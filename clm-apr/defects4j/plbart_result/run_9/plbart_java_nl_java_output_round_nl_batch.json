{
  "config": "PLBART_SEQFORM_COMMENTFORM_NOCOMMENT",
  "data": {
    "Chart_14_source/org/jfree/chart/plot/CategoryPlot.java_2166-2167": {
      "loc": "2166-2167",
      "input": "public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent(); } return removed; }",
      "target": "public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } if (markers == null) { return false; } boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent(); } return removed; }",
      "function range": "2155,5-2171,5",
      "raw_output": [
        "public void removeMarker ( Marker marker ) { if ( markers == null ) { markers = new ArrayList < Marker > ( ) ; } markers. remove ( marker ) ; fireMarkerRemoved ( marker ) ; }",
        "public void removeMarker ( Marker marker ) { if ( markers == null ) { markers = new ArrayList < Marker > ( ) ; } markers. add ( marker ) ; fireMarkerRemoved ( marker ) ; }",
        "public void removeMarker ( Marker marker ) { if ( markers == null || markers. size ( ) == 0 ) { return ; } markers. remove ( marker ) ; fireMarkerRemoved ( marker ) ; }",
        "public void removeMarker ( Marker marker ) { if ( markers == null ) { markers = new ArrayList < Marker > ( ) ; } markers. remove ( marker ) ; }",
        "public void removeMarker ( Marker marker ) { if ( markers == null ) { markers = new ArrayList < Marker > ( ) ; } markers. add ( marker ) ; }",
        "public void removeMarkerInLayer ( int layer ) { for ( int i = 0 ; i < markers. size ( ) ; i ++ ) { markers. get ( i ). removeMarkerInLayer ( layer ) ; } }",
        "public void removeMarker ( int layer ) { for ( int i = 0 ; i < markers. size ( ) ; i ++ ) { markers. get ( i ). removeMarker ( layer ) ; } }",
        "public void removeMarkerInLayer ( int layer ) { for ( int i = 0 ; i < markers. length ; i ++ ) { if ( markers [ i ] == layer ) { markers [ i ] = null ; break ; } } }",
        "public void removeMarker ( int layer ) { for ( int i = 0 ; i < markers. length ; i ++ ) { if ( markers [ i ] == layer ) { markers [ i ] = null ; break ; } } }",
        "public void removeMarkerInLayer ( int layer ) { for ( int i = 0 ; i < markers. length ; i ++ ) { markers [ i ]. removeMarkerInLayer ( layer ) ; } }",
        "public void removeMarker ( int layer ) { for ( int i = 0 ; i < markers. size ( ) ; i ++ ) { markers. get ( i ). removeMarker ( layer ) ; } }",
        "public void removeMarker ( int layer ) { for ( int i = 0 ; i < markers. length ; i ++ ) { if ( markers [ i ] == layer ) { markers [ i ] = null ; break ; } } }",
        "public void removeMarker ( int layer ) { for ( int i = 0 ; i < markers. size ( ) ; i ++ ) { ( ( Marker ) markers. get ( i ) ). removeMarker ( layer ) ; } }",
        "public void removeMarker ( int layer ) { for ( int i = 0 ; i < markers. length ; i ++ ) { markers [ i ]. removeMarker ( layer ) ; } }",
        "public void removeMarker ( int layer ) { for ( int i = 0 ; i < markers. size ( ) ; i ++ ) { if ( markers. get ( i ) == layer ) { markers. remove ( i ) ; } } }",
        "public void removeDomainMarker ( int layer, int marker ) { if ( ( layer < 0 ) || ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } }",
        "public void removeDomainMarker ( int layer, int marker ) { if ( ( layer < 0 ) || ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } }",
        "public void removeDomainMarker ( int layer, int marker ) { if ( ( layer < 0 ) || ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer number: \" + layer ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer number: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker number: \" + marker ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer number: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker number: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker number: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker number: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker number: \" + marker ) ; } }",
        "public void removeDomainMarker ( int layer, int marker ) { if ( ( layer < 0 ) || ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } }",
        "public void removeDomainMarker ( int layer, int marker ) { if ( ( layer < 0 ) || ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker >= layers [ layer ]. length ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } markers [ layer ] [ marker ] = null ; }",
        "public void removeMarker ( int layer, Marker marker ) { if ( markers. containsKey ( layer ) ) { markers. get ( layer ). removeMarker ( marker ) ; markers. remove ( layer ) ; } }",
        "public void removeMarker ( int layer, Marker marker ) { if ( markers. containsKey ( layer ) ) { markers. get ( layer ). removeMarker ( marker ) ; } markers. remove ( layer ) ; }",
        "public void removeMarker ( int layer, Marker marker ) { if ( markers. containsKey ( layer ) ) { markers. get ( layer ). removeMarker ( marker ) ; } }",
        "public void removeMarker ( int layer, Marker marker ) { if ( markers. containsKey ( layer ) ) { markers. remove ( layer ) ; } markers. remove ( layer ) ; }",
        "public void removeMarker ( int layer, Marker marker ) { if ( markers. containsKey ( layer ) ) { markers. remove ( layer ) ; } markers. put ( layer, marker ) ; }"
      ],
      "mid_translation": [
        "Removes a domain marker from the list of markers.",
        "Removes a domain marker in the specified layer.",
        "Removes a domain marker from the specified layer.",
        "Removes the specified domain marker from the specified layer.",
        "Removes a domain marker from the list of markers for a given layer"
      ],
      "output": [
        "public void removeDomainMarker ( Marker marker ) { if ( markers == null ) { markers = new ArrayList < Marker > ( ) ; } markers. remove ( marker ) ; fireMarkerRemoved ( marker ) ; }",
        "public void removeDomainMarker ( Marker marker ) { if ( markers == null ) { markers = new ArrayList < Marker > ( ) ; } markers. add ( marker ) ; fireMarkerRemoved ( marker ) ; }",
        "public void removeDomainMarker ( Marker marker ) { if ( markers == null || markers. size ( ) == 0 ) { return ; } markers. remove ( marker ) ; fireMarkerRemoved ( marker ) ; }",
        "public void removeDomainMarker ( Marker marker ) { if ( markers == null ) { markers = new ArrayList < Marker > ( ) ; } markers. remove ( marker ) ; }",
        "public void removeDomainMarker ( Marker marker ) { if ( markers == null ) { markers = new ArrayList < Marker > ( ) ; } markers. add ( marker ) ; }",
        "public void removeDomainMarker ( int layer ) { for ( int i = 0 ; i < markers. size ( ) ; i ++ ) { markers. get ( i ). removeMarkerInLayer ( layer ) ; } }",
        "public void removeDomainMarker ( int layer ) { for ( int i = 0 ; i < markers. size ( ) ; i ++ ) { markers. get ( i ). removeMarker ( layer ) ; } }",
        "public void removeDomainMarker ( int layer ) { for ( int i = 0 ; i < markers. length ; i ++ ) { if ( markers [ i ] == layer ) { markers [ i ] = null ; break ; } } }",
        "public void removeDomainMarker ( int layer ) { for ( int i = 0 ; i < markers. length ; i ++ ) { if ( markers [ i ] == layer ) { markers [ i ] = null ; break ; } } }",
        "public void removeDomainMarker ( int layer ) { for ( int i = 0 ; i < markers. length ; i ++ ) { markers [ i ]. removeMarkerInLayer ( layer ) ; } }",
        "public void removeDomainMarker ( int layer ) { for ( int i = 0 ; i < markers. size ( ) ; i ++ ) { markers. get ( i ). removeMarker ( layer ) ; } }",
        "public void removeDomainMarker ( int layer ) { for ( int i = 0 ; i < markers. length ; i ++ ) { if ( markers [ i ] == layer ) { markers [ i ] = null ; break ; } } }",
        "public void removeDomainMarker ( int layer ) { for ( int i = 0 ; i < markers. size ( ) ; i ++ ) { ( ( Marker ) markers. get ( i ) ). removeMarker ( layer ) ; } }",
        "public void removeDomainMarker ( int layer ) { for ( int i = 0 ; i < markers. length ; i ++ ) { markers [ i ]. removeMarker ( layer ) ; } }",
        "public void removeDomainMarker ( int layer ) { for ( int i = 0 ; i < markers. size ( ) ; i ++ ) { if ( markers. get ( i ) == layer ) { markers. remove ( i ) ; } } }",
        "public void removeDomainMarker ( int layer, int marker ) { if ( ( layer < 0 ) || ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } }",
        "public void removeDomainMarker ( int layer, int marker ) { if ( ( layer < 0 ) || ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } }",
        "public void removeDomainMarker ( int layer, int marker ) { if ( ( layer < 0 ) || ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer number: \" + layer ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer number: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker number: \" + marker ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer number: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker number: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker number: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker number: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker number: \" + marker ) ; } }",
        "public void removeDomainMarker ( int layer, int marker ) { if ( ( layer < 0 ) || ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } if ( ( marker < 0 ) || ( marker > layers [ layer ] ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } }",
        "public void removeDomainMarker ( int layer, int marker ) { if ( ( layer < 0 ) || ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( layer >= layers. length ) ) { throw new IllegalArgumentException ( \"Invalid layer: \" + layer ) ; } if ( ( marker < 0 ) || ( marker >= layers [ layer ]. length ) ) { throw new IllegalArgumentException ( \"Invalid marker: \" + marker ) ; } markers [ layer ] [ marker ] = null ; }",
        "public void removeDomainMarker ( int layer, Marker marker ) { if ( markers. containsKey ( layer ) ) { markers. get ( layer ). removeMarker ( marker ) ; markers. remove ( layer ) ; } }",
        "public void removeDomainMarker ( int layer, Marker marker ) { if ( markers. containsKey ( layer ) ) { markers. get ( layer ). removeMarker ( marker ) ; } markers. remove ( layer ) ; }",
        "public void removeDomainMarker ( int layer, Marker marker ) { if ( markers. containsKey ( layer ) ) { markers. get ( layer ). removeMarker ( marker ) ; } }",
        "public void removeDomainMarker ( int layer, Marker marker ) { if ( markers. containsKey ( layer ) ) { markers. remove ( layer ) ; } markers. remove ( layer ) ; }",
        "public void removeDomainMarker ( int layer, Marker marker ) { if ( markers. containsKey ( layer ) ) { markers. remove ( layer ) ; } markers. put ( layer, marker ) ; }"
      ]
    },
    "Chart_26_source/org/jfree/chart/axis/Axis.java_1192-1193": {
      "loc": "1192-1193",
      "input": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) { if (state == null) { throw new IllegalArgumentException(\"Null 'state' argument.\"); } if ((label == null) || (label.equals(\"\"))) { return state; } Font font = getLabelFont(); RectangleInsets insets = getLabelInsets(); g2.setFont(font); g2.setPaint(getLabelPaint()); FontMetrics fm = g2.getFontMetrics(); Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm); Shape hotspot = null; if (edge == RectangleEdge.TOP) { AffineTransform t = AffineTransform.getRotateInstance( getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY()); Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); labelBounds = rotatedLabelBounds.getBounds2D(); float w = (float) labelBounds.getWidth(); float h = (float) labelBounds.getHeight(); float labelx = (float) dataArea.getCenterX(); float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0); TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER); hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom()); } else if (edge == RectangleEdge.BOTTOM) { AffineTransform t = AffineTransform.getRotateInstance( getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY()); Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); labelBounds = rotatedLabelBounds.getBounds2D(); float w = (float) labelBounds.getWidth(); float h = (float) labelBounds.getHeight(); float labelx = (float) dataArea.getCenterX(); float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0); TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER); hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom()); } else if (edge == RectangleEdge.LEFT) { AffineTransform t = AffineTransform.getRotateInstance( getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY()); Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); labelBounds = rotatedLabelBounds.getBounds2D(); float w = (float) labelBounds.getWidth(); float h = (float) labelBounds.getHeight(); float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0); float labely = (float) dataArea.getCenterY(); TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER); hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight()); } else if (edge == RectangleEdge.RIGHT) { AffineTransform t = AffineTransform.getRotateInstance( getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY()); Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); labelBounds = rotatedLabelBounds.getBounds2D(); float w = (float) labelBounds.getWidth(); float h = (float) labelBounds.getHeight(); float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0); float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0); TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER); hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight()); } if (plotState != null && hotspot != null) { ChartRenderingInfo owner = plotState.getOwner(); EntityCollection entities = owner.getEntityCollection(); if (entities != null) { entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL)); } } return state; }",
      "target": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) { if (state == null) { throw new IllegalArgumentException(\"Null 'state' argument.\"); } if ((label == null) || (label.equals(\"\"))) { return state; } Font font = getLabelFont(); RectangleInsets insets = getLabelInsets(); g2.setFont(font); g2.setPaint(getLabelPaint()); FontMetrics fm = g2.getFontMetrics(); Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm); Shape hotspot = null; if (edge == RectangleEdge.TOP) { AffineTransform t = AffineTransform.getRotateInstance( getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY()); Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); labelBounds = rotatedLabelBounds.getBounds2D(); float w = (float) labelBounds.getWidth(); float h = (float) labelBounds.getHeight(); float labelx = (float) dataArea.getCenterX(); float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0); TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER); hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom()); } else if (edge == RectangleEdge.BOTTOM) { AffineTransform t = AffineTransform.getRotateInstance( getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY()); Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); labelBounds = rotatedLabelBounds.getBounds2D(); float w = (float) labelBounds.getWidth(); float h = (float) labelBounds.getHeight(); float labelx = (float) dataArea.getCenterX(); float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0); TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER); hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom()); } else if (edge == RectangleEdge.LEFT) { AffineTransform t = AffineTransform.getRotateInstance( getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY()); Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); labelBounds = rotatedLabelBounds.getBounds2D(); float w = (float) labelBounds.getWidth(); float h = (float) labelBounds.getHeight(); float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0); float labely = (float) dataArea.getCenterY(); TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER); hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight()); } else if (edge == RectangleEdge.RIGHT) { AffineTransform t = AffineTransform.getRotateInstance( getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY()); Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); labelBounds = rotatedLabelBounds.getBounds2D(); float w = (float) labelBounds.getWidth(); float h = (float) labelBounds.getHeight(); float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0); float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0); TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER); hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight()); } if (plotState != null && hotspot != null) { ChartRenderingInfo owner = plotState.getOwner(); if (owner != null) { EntityCollection entities = owner.getEntityCollection(); if (entities != null) { entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL)); } } } return state; }",
      "function range": "1092,5-1200,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Closure_19_src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java_169-172": {
      "loc": "169-172",
      "input": "protected void declareNameInScope(FlowScope scope, Node node, JSType type) { switch (node.getType()) { case Token.NAME: scope.inferSlotType(node.getString(), type); break; case Token.GETPROP: String qualifiedName = node.getQualifiedName(); Preconditions.checkNotNull(qualifiedName); JSType origType = node.getJSType(); origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType; scope.inferQualifiedSlot(node, qualifiedName, origType, type); break; default: throw new IllegalArgumentException(\"Node cannot be refined. \\n\" + node.toStringTree()); } }",
      "target": "protected void declareNameInScope(FlowScope scope, Node node, JSType type) { switch (node.getType()) { case Token.NAME: scope.inferSlotType(node.getString(), type); break; case Token.GETPROP: String qualifiedName = node.getQualifiedName(); Preconditions.checkNotNull(qualifiedName); JSType origType = node.getJSType(); origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType; scope.inferQualifiedSlot(node, qualifiedName, origType, type); break; case Token.THIS: break; default: throw new IllegalArgumentException(\"Node cannot be refined. \\n\" + node.toStringTree()); } }",
      "function range": "157,3-178,3",
      "raw_output": [
        "public static FlowScope declareQualifiedName ( FlowScope flowScope, String name ) { Preconditions. checkNotNull ( flowScope, \"flowScope\" ) ; Preconditions. checkNotNull ( name, \"name\" ) ; return flowScope. declareQualifiedName ( name ) ; }",
        "public static FlowScope declareQualifiedName ( FlowScope flowScope, String name ) { Preconditions. checkNotNull ( flowScope, \"flowScope\" ) ; Preconditions. checkNotNull ( name, \"name\" ) ; Preconditions. checkArgument ( flowScope. getName ( ). equals ( name ) ) ; return flowScope. declareQualifiedName ( name ) ; }",
        "public static FlowScope declareQualifiedName ( FlowScope flowScope, String name ) { Preconditions. checkNotNull ( flowScope, \"flowScope\" ) ; Preconditions. checkNotNull ( name, \"name\" ) ; flowScope. declareQualifiedName ( name ) ; return flowScope ; }",
        "public static void declareQualifiedName ( FlowScope flowScope, String name ) { if ( flowScope!= null ) { flowScope. declareQualifiedName ( name ) ; } }",
        "public static FlowScope declareQualifiedName ( FlowScope flowScope, String name ) { Preconditions. checkNotNull ( flowScope ) ; Preconditions. checkNotNull ( name ) ; return flowScope. declareQualifiedName ( name ) ; }",
        "public static void declareName ( FlowScope flowScope, String name ) { if ( flowScope!= null ) { flowScope. declareName ( name ) ; } }",
        "public static void declare ( FlowScope flowScope, String name ) { checkNotNull ( flowScope ) ; checkNotNull ( name ) ; flowScope. put ( name, flowScope ) ; }",
        "public static void declareNameInFlowScope ( FlowScope flowScope, String name ) { if ( flowScope!= null ) { flowScope. declareName ( name ) ; } }",
        "public static void declare ( FlowScope flowScope, String name ) { if ( flowScope!= null ) { flowScope. declare ( name, name ) ; } }",
        "public static void declareNameInFlowScope ( String name, FlowScope flowScope ) { if ( flowScope!= null ) { flowScope. declareName ( name ) ; } }",
        "public void declareQualifiedName ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { names. put ( name, scope ) ; } }",
        "public void declareQualifiedName ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. get ( name ). declareQualifiedName ( name, scope ) ; } }",
        "public void declareQualifiedName ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { scope. declareQualifiedName ( name, name ) ; } }",
        "public void declareQualifiedName ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. get ( name ). declareQualifiedName ( name, scope ) ; } else { scope. declareQualifiedName ( name ) ; } }",
        "public void declareQualifiedName ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { scope. declareQualifiedName ( name ) ; } }",
        "public void declare ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { names. put ( name, scope ) ; } }",
        "public void declare ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { scope. declare ( name, name ) ; } }",
        "public void declare ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. get ( name ). declare ( name, scope ) ; } }",
        "public void declare ( String name, Scope scope ) { if ( names. contains ( name ) ) { names. add ( name ) ; } if ( scope!= null ) { scope. declare ( name, this ) ; } }",
        "public void declare ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { scope. declare ( name, scope ) ; } }",
        "public void declare ( Scope scope, String name ) { checkState ( scope!= null, \"No scope specified\" ) ; checkState ( names. containsKey ( name ), \"No name specified\" ) ; names. put ( name, scope ) ; scope. declare ( name, name ) ; }",
        "public void declare ( Scope scope, String name ) { checkState ( scope!= null, \"No scope specified\" ) ; checkState ( names. contains ( name ) ) ; names. add ( name ) ; scope. declare ( scope, name ) ; }",
        "public void declareQualifiedName ( Scope scope, String name ) { checkState ( scope!= null, \"No scope specified\" ) ; checkState ( names. containsKey ( name ), \"No name specified\" ) ; names. put ( name, scope ) ; scope. declareQualifiedName ( name ) ; }",
        "public void declare ( Scope scope, String name ) { checkState ( scope!= null, \"No scope specified\" ) ; checkState ( names. containsKey ( name ), \"No name specified\" ) ; names. put ( name, scope ) ; scope. declare ( name ) ; }",
        "public void declare ( Scope scope, String name ) { checkState ( scope!= null, \"No scope specified\" ) ; checkState ( names. containsKey ( name ), \"No name specified\" ) ; names. put ( name, scope ) ; scope. declare ( scope, name ) ; }"
      ],
      "mid_translation": [
        "Declares a qualified name in the given flow scope.",
        "Declares a name in the given flow scope.",
        "Declares a qualified name in the given scope.",
        "Declares a name in the given scope.",
        "Declares a single qualified name in the given scope."
      ],
      "output": [
        "protected FlowScope declareNameInScope ( FlowScope flowScope, String name ) { Preconditions. checkNotNull ( flowScope, \"flowScope\" ) ; Preconditions. checkNotNull ( name, \"name\" ) ; return flowScope. declareQualifiedName ( name ) ; }",
        "protected FlowScope declareNameInScope ( FlowScope flowScope, String name ) { Preconditions. checkNotNull ( flowScope, \"flowScope\" ) ; Preconditions. checkNotNull ( name, \"name\" ) ; Preconditions. checkArgument ( flowScope. getName ( ). equals ( name ) ) ; return flowScope. declareQualifiedName ( name ) ; }",
        "protected FlowScope declareNameInScope ( FlowScope flowScope, String name ) { Preconditions. checkNotNull ( flowScope, \"flowScope\" ) ; Preconditions. checkNotNull ( name, \"name\" ) ; flowScope. declareQualifiedName ( name ) ; return flowScope ; }",
        "protected void declareNameInScope ( FlowScope flowScope, String name ) { if ( flowScope!= null ) { flowScope. declareQualifiedName ( name ) ; } }",
        "protected FlowScope declareNameInScope ( FlowScope flowScope, String name ) { Preconditions. checkNotNull ( flowScope ) ; Preconditions. checkNotNull ( name ) ; return flowScope. declareQualifiedName ( name ) ; }",
        "protected void declareNameInScope ( FlowScope flowScope, String name ) { if ( flowScope!= null ) { flowScope. declareName ( name ) ; } }",
        "protected void declareNameInScope ( FlowScope flowScope, String name ) { checkNotNull ( flowScope ) ; checkNotNull ( name ) ; flowScope. put ( name, flowScope ) ; }",
        "protected void declareNameInScope ( FlowScope flowScope, String name ) { if ( flowScope!= null ) { flowScope. declareName ( name ) ; } }",
        "protected void declareNameInScope ( FlowScope flowScope, String name ) { if ( flowScope!= null ) { flowScope. declare ( name, name ) ; } }",
        "protected void declareNameInScope ( String name, FlowScope flowScope ) { if ( flowScope!= null ) { flowScope. declareName ( name ) ; } }",
        "protected void declareNameInScope ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { names. put ( name, scope ) ; } }",
        "protected void declareNameInScope ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. get ( name ). declareQualifiedName ( name, scope ) ; } }",
        "protected void declareNameInScope ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { scope. declareQualifiedName ( name, name ) ; } }",
        "protected void declareNameInScope ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. get ( name ). declareQualifiedName ( name, scope ) ; } else { scope. declareQualifiedName ( name ) ; } }",
        "protected void declareNameInScope ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { scope. declareQualifiedName ( name ) ; } }",
        "protected void declareNameInScope ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { names. put ( name, scope ) ; } }",
        "protected void declareNameInScope ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { scope. declare ( name, name ) ; } }",
        "protected void declareNameInScope ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. get ( name ). declare ( name, scope ) ; } }",
        "protected void declareNameInScope ( String name, Scope scope ) { if ( names. contains ( name ) ) { names. add ( name ) ; } if ( scope!= null ) { scope. declare ( name, this ) ; } }",
        "protected void declareNameInScope ( String name, Scope scope ) { if ( names. containsKey ( name ) ) { names. put ( name, scope ) ; } else { scope. declare ( name, scope ) ; } }",
        "protected void declareNameInScope ( Scope scope, String name ) { checkState ( scope!= null, \"No scope specified\" ) ; checkState ( names. containsKey ( name ), \"No name specified\" ) ; names. put ( name, scope ) ; scope. declare ( name, name ) ; }",
        "protected void declareNameInScope ( Scope scope, String name ) { checkState ( scope!= null, \"No scope specified\" ) ; checkState ( names. contains ( name ) ) ; names. add ( name ) ; scope. declare ( scope, name ) ; }",
        "protected void declareNameInScope ( Scope scope, String name ) { checkState ( scope!= null, \"No scope specified\" ) ; checkState ( names. containsKey ( name ), \"No name specified\" ) ; names. put ( name, scope ) ; scope. declareQualifiedName ( name ) ; }",
        "protected void declareNameInScope ( Scope scope, String name ) { checkState ( scope!= null, \"No scope specified\" ) ; checkState ( names. containsKey ( name ), \"No name specified\" ) ; names. put ( name, scope ) ; scope. declare ( name ) ; }",
        "protected void declareNameInScope ( Scope scope, String name ) { checkState ( scope!= null, \"No scope specified\" ) ; checkState ( names. containsKey ( name ), \"No name specified\" ) ; names. put ( name, scope ) ; scope. declare ( scope, name ) ; }"
      ]
    },
    "Closure_40_src/com/google/javascript/jscomp/NameAnalyzer.java_635-636": {
      "loc": "635-636",
      "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns != null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null && ns.onlyAffectsClassDef) { JsName name = getName(ns.name, false); if (name != null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } }",
      "target": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns != null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null && ns.onlyAffectsClassDef) { JsName name = getName(ns.name, true); refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } }",
      "function range": "595,5-642,5",
      "raw_output": [
        "public void setGlobalVariableNames ( Set < String > globalVariableNames ) { if ( globalVariableNames == null ) { globalVariableNames = new HashSet < String > ( ) ; } globalVariableNames. addAll ( globalVariableNames ) ; }",
        "public void setGlobalVariables ( Set < String > globalVariables ) { if ( globalVariables == null ) { globalVariables = new HashSet < String > ( ) ; } globalVariables. addAll ( globalVariables ) ; }",
        "public void addGlobalVariable ( String name ) { if ( globalVariables == null ) { globalVariables = new HashSet < String > ( ) ; } globalVariables. add ( name ) ; }",
        "public void setGlobalVariableNames ( Set < String > globalVariableNames ) { if ( globalVariableNames == null ) { globalVariableNames = new HashSet <> ( ) ; } globalVariableNames. addAll ( globalVariableNames ) ; }",
        "public void setGlobalVariableNames ( Set < String > globalVariableNames ) { if ( globalVariableNames == null ) { globalVariableNames = new HashSet < String > ( ) ; } globalVariableNames. removeAll ( globalVariableNames ) ; }",
        "public boolean containsFunction ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, name ) ; return false ; }",
        "public void setFunctionName ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setFunctionName ( name ) ; } }",
        "public boolean containsFunction ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, name ) ; return true ; }",
        "public boolean containsFunction ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return false ; } functionMap. put ( name, name ) ; return true ; }",
        "public boolean containsFunction ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, this ) ; return false ; }",
        "public void setGlobalVariables ( final Set < String > globalVariables ) { if ( globalVariables == null ) { this. globalVariables = Collections. emptySet ( ) ; } else { this. globalVariables. addAll ( globalVariables ) ; } }",
        "public void setGlobalVariableNames ( Set < String > globalVariableNames ) { if ( globalVariableNames == null ) { globalVariableNames = new HashSet < String > ( ) ; } globalVariableNames. addAll ( globalVariableNames ) ; }",
        "public void setGlobalVariables ( final Set < String > globalVariables ) { if ( globalVariables == null ) { this. globalVariables = new HashSet < String > ( ) ; } else { this. globalVariables. addAll ( globalVariables ) ; } }",
        "public void setGlobalVariableNames ( Set < String > globalVariableNames ) { if ( globalVariableNames == null ) { globalVariableNames = new HashSet <> ( ) ; } globalVariableNames. addAll ( globalVariableNames ) ; }",
        "public void setGlobalVariables ( Set < String > globalVariables ) { if ( globalVariables == null ) { globalVariables = new HashSet < String > ( ) ; } globalVariables. addAll ( globalVariables ) ; }",
        "public void setFunctionName ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setFunctionName ( name ) ; } }",
        "public void setFunctionName ( String functionName ) { if ( functionName == null || functionName. isEmpty ( ) ) { this. functionName = functionName ; } else { this. functionName = functionName ; } }",
        "public void setFunctionName ( String name ) { if ( name == null || name. length ( ) == 0 ) { this. functionName = name ; } else { this. functionName = name ; } }",
        "public void setName ( String name ) { if ( name == null || name. length ( ) == 0 ) { this. name = name ; } else { this. name = name ; } }",
        "public void setFunctionName ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setParent ( this ) ; } }",
        "public void addGlobalVariable ( String name ) { if ( globalVariables == null ) { globalVariables = new HashSet < String > ( ) ; } globalVariables. add ( name ) ; }",
        "public void setGlobalVariableName ( String name ) { if ( globalVariables == null ) { globalVariables = new HashSet < String > ( ) ; } globalVariables. add ( name ) ; }",
        "public void setGlobalVariableName ( String name ) { if ( globalVariableName == null ) { globalVariableName = name ; } else { globalVariableName. set ( name ) ; } }",
        "public void setGlobalVarName ( String name ) { if ( globalVarName == null ) { globalVarName = name ; } else { globalVarName. set ( name ) ; } }",
        "public void addGlobalVariable ( String name ) { if ( globalVariables == null ) { globalVariables = new HashSet <> ( ) ; } globalVariables. add ( name ) ; }"
      ],
      "mid_translation": [
        "Records the set of names of variables in the global scope.",
        "Records the name of a function in the global scope.",
        "Record the set of names of variables in the global scope.",
        "Records the name of the function in the global scope.",
        "Records the name of the variable in the global scope to the set of names of the function nodes."
      ],
      "output": [
        "@Override public void visit ( Set < String > globalVariableNames ) { if ( globalVariableNames == null ) { globalVariableNames = new HashSet < String > ( ) ; } globalVariableNames. addAll ( globalVariableNames ) ; }",
        "@Override public void visit ( Set < String > globalVariables ) { if ( globalVariables == null ) { globalVariables = new HashSet < String > ( ) ; } globalVariables. addAll ( globalVariables ) ; }",
        "@Override public void visit ( String name ) { if ( globalVariables == null ) { globalVariables = new HashSet < String > ( ) ; } globalVariables. add ( name ) ; }",
        "@Override public void visit ( Set < String > globalVariableNames ) { if ( globalVariableNames == null ) { globalVariableNames = new HashSet <> ( ) ; } globalVariableNames. addAll ( globalVariableNames ) ; }",
        "@Override public void visit ( Set < String > globalVariableNames ) { if ( globalVariableNames == null ) { globalVariableNames = new HashSet < String > ( ) ; } globalVariableNames. removeAll ( globalVariableNames ) ; }",
        "@Override public boolean visit ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, name ) ; return false ; }",
        "@Override public void visit ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setFunctionName ( name ) ; } }",
        "@Override public boolean visit ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, name ) ; return true ; }",
        "@Override public boolean visit ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return false ; } functionMap. put ( name, name ) ; return true ; }",
        "@Override public boolean visit ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, this ) ; return false ; }",
        "@Override public void visit ( final Set < String > globalVariables ) { if ( globalVariables == null ) { this. globalVariables = Collections. emptySet ( ) ; } else { this. globalVariables. addAll ( globalVariables ) ; } }",
        "@Override public void visit ( Set < String > globalVariableNames ) { if ( globalVariableNames == null ) { globalVariableNames = new HashSet < String > ( ) ; } globalVariableNames. addAll ( globalVariableNames ) ; }",
        "@Override public void visit ( final Set < String > globalVariables ) { if ( globalVariables == null ) { this. globalVariables = new HashSet < String > ( ) ; } else { this. globalVariables. addAll ( globalVariables ) ; } }",
        "@Override public void visit ( Set < String > globalVariableNames ) { if ( globalVariableNames == null ) { globalVariableNames = new HashSet <> ( ) ; } globalVariableNames. addAll ( globalVariableNames ) ; }",
        "@Override public void visit ( Set < String > globalVariables ) { if ( globalVariables == null ) { globalVariables = new HashSet < String > ( ) ; } globalVariables. addAll ( globalVariables ) ; }",
        "@Override public void visit ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setFunctionName ( name ) ; } }",
        "@Override public void visit ( String functionName ) { if ( functionName == null || functionName. isEmpty ( ) ) { this. functionName = functionName ; } else { this. functionName = functionName ; } }",
        "@Override public void visit ( String name ) { if ( name == null || name. length ( ) == 0 ) { this. functionName = name ; } else { this. functionName = name ; } }",
        "@Override public void visit ( String name ) { if ( name == null || name. length ( ) == 0 ) { this. name = name ; } else { this. name = name ; } }",
        "@Override public void visit ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setParent ( this ) ; } }",
        "@Override public void visit ( String name ) { if ( globalVariables == null ) { globalVariables = new HashSet < String > ( ) ; } globalVariables. add ( name ) ; }",
        "@Override public void visit ( String name ) { if ( globalVariables == null ) { globalVariables = new HashSet < String > ( ) ; } globalVariables. add ( name ) ; }",
        "@Override public void visit ( String name ) { if ( globalVariableName == null ) { globalVariableName = name ; } else { globalVariableName. set ( name ) ; } }",
        "@Override public void visit ( String name ) { if ( globalVarName == null ) { globalVarName = name ; } else { globalVarName. set ( name ) ; } }",
        "@Override public void visit ( String name ) { if ( globalVariables == null ) { globalVariables = new HashSet <> ( ) ; } globalVariables. add ( name ) ; }"
      ]
    },
    "Closure_46_src/com/google/javascript/rhino/jstype/RecordType.java_142-145": {
      "loc": "142-145",
      "input": "@Override public JSType getLeastSupertype(JSType that) { if (!that.isRecordType()) { return super.getLeastSupertype(that); } RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); }",
      "target": "JSType getGreatestSubtypeHelper(JSType that) { if (that.isRecordType()) { RecordType thatRecord = that.toMaybeRecordType(); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo( getPropertyType(property))) { return registry.getNativeObjectType(JSTypeNative.NO_TYPE); } builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } for (String property : thatRecord.properties.keySet()) { if (!hasProperty(property)) { builder.addProperty(property, thatRecord.getPropertyType(property), thatRecord.getPropertyNode(property)); } } return builder.build(); } JSType greatestSubtype = registry.getNativeType( JSTypeNative.NO_OBJECT_TYPE); JSType thatRestrictedToObj = registry.getNativeType(JSTypeNative.OBJECT_TYPE) .getGreatestSubtype(that); if (!thatRestrictedToObj.isEmptyType()) { for (Map.Entry<String, JSType> entry : properties.entrySet()) { String propName = entry.getKey(); JSType propType = entry.getValue(); UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (ObjectType alt : registry.getEachReferenceTypeWithProperty(propName)) { JSType altPropType = alt.getPropertyType(propName); if (altPropType != null && !alt.isEquivalentTo(this) && alt.isSubtype(that) && (propType.isUnknownType() || altPropType.isUnknownType() || altPropType.isEquivalentTo(propType))) { builder.addAlternate(alt); } } greatestSubtype = greatestSubtype.getLeastSupertype(builder.build()); } } return greatestSubtype; }",
      "function range": "140,3-155,3",
      "raw_output": [
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } if ( type instanceof GenericArrayType ) { return supertype ( ( GenericArrayType ) type ). getGenericComponentType ( ) ; } if ( type instanceof GenericArrayType ) { return supertype ( ( GenericArrayType ) type ). getGenericComponentType ( ) ; } return type ; }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } if ( type instanceof GenericArrayType ) { return supertype ( ( GenericArrayType ) type ). getGenericComponentType ( ) ; } if ( type instanceof GenericArrayType ) { return supertype ( ( GenericArrayType ) type ). getGenericComponentType ( ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } return type ; }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } if ( type instanceof Class <? > ) { return supertype ( ( Class <? > ) type ) ; } return type ; }",
        "public static Class <? > leastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; if ( parameterizedType. getRawType ( ) instanceof Class <? > ) { return ( Class <? > ) parameterizedType. getRawType ( ) ; } } return type ; }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } return null ; }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } return type ; }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof TypeVariable <? > ) { TypeVariable <? > typeVariable = ( TypeVariable <? > ) type ; return supertype ( typeVariable. getBounds ( ) [ 0 ] ) ; } else { return type ; } }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { return type ; } }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getActualTypeArguments ( ) [ 0 ] ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { return type ; } }",
        "public static Class <? > leastSupertype ( Class <? > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"type cannot be null\" ) ; } Class <? > supertype = type ; while ( supertype!= null ) { supertype = supertype. getSuperclass ( ) ; } return supertype ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > leastSupertype ( T object ) { if ( object == null ) { return null ; } Class <? > clazz = object. getClass ( ) ; while ( clazz!= Object. class ) { clazz = clazz. getSuperclass ( ) ; } if ( clazz == null ) { return object ; } return ( Class < T > ) clazz ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > leastSupertype ( T object ) { if ( object == null ) { return null ; } Class <? > clazz = object. getClass ( ) ; while ( clazz!= Object. class ) { clazz = clazz. getSuperclass ( ) ; } if ( clazz == null ) { return null ; } return ( Class < T > ) clazz ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > leastSupertype ( T object ) { if ( object == null ) { return null ; } Class <? > clazz = object. getClass ( ) ; while ( clazz!= Object. class ) { clazz = clazz. getSuperclass ( ) ; } if ( clazz == null ) { clazz = object. getClass ( ) ; } return clazz ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > leastSupertype ( T object ) { if ( object == null ) { return null ; } Class <? > clazz = object. getClass ( ) ; while ( clazz!= Object. class ) { clazz = clazz. getSuperclass ( ) ; } return clazz ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public Class <? > getExtends ( Class <? > that ) { if ( that == null ) { return null ; } else if ( that instanceof Class <? > ) { return ( Class <? > ) that ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } else { return null ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public Class <? > getExtends ( Class <? > that ) { if ( that == null ) { return null ; } else if ( that instanceof Class <? > ) { return ( Class <? > ) that ; } else if ( that instanceof ParameterizedType ) { return ( Class <? > ) ( ( ParameterizedType ) that ). getRawType ( ) ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } else { return null ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public Class <? > getExtends ( Class <? > that ) { if ( that == null ) { return null ; } else if ( that instanceof Class <? > ) { return ( Class <? > ) that ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public Class <? > getExtends ( Class <? > that ) { if ( that == null ) { return null ; } else if ( that instanceof Class <? > ) { return ( Class <? > ) that ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } else { return null ; } }",
        "public Class <? > getExtends ( Class <? > that ) { if ( that == null ) { return null ; } Class <? > superType = getExtends ( that ) ; if ( superType == null ) { return null ; } return superType. getSuperclass ( ) ; }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; } }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { return type ; } }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { return null ; } }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof TypeVariable <? > ) { TypeVariable <? > typeVariable = ( TypeVariable <? > ) type ; return supertype ( typeVariable. getBounds ( ) [ 0 ] ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { return type ; } }",
        "public Class <? > supertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } return type ; }"
      ],
      "mid_translation": [
        "Gets the least supertype of the given type.",
        "Gets the least supertype of a given type.",
        "Gets the least supertype of the given object.",
        "Gets the least supertype of the given that.",
        "Gets the least supertype of given type."
      ],
      "output": [
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } if ( type instanceof GenericArrayType ) { return supertype ( ( GenericArrayType ) type ). getGenericComponentType ( ) ; } if ( type instanceof GenericArrayType ) { return supertype ( ( GenericArrayType ) type ). getGenericComponentType ( ) ; } return type ; }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } if ( type instanceof GenericArrayType ) { return supertype ( ( GenericArrayType ) type ). getGenericComponentType ( ) ; } if ( type instanceof GenericArrayType ) { return supertype ( ( GenericArrayType ) type ). getGenericComponentType ( ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } return type ; }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } if ( type instanceof Class <? > ) { return supertype ( ( Class <? > ) type ) ; } return type ; }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; if ( parameterizedType. getRawType ( ) instanceof Class <? > ) { return ( Class <? > ) parameterizedType. getRawType ( ) ; } } return type ; }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } return null ; }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } return type ; }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof TypeVariable <? > ) { TypeVariable <? > typeVariable = ( TypeVariable <? > ) type ; return supertype ( typeVariable. getBounds ( ) [ 0 ] ) ; } else { return type ; } }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { return type ; } }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getActualTypeArguments ( ) [ 0 ] ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { return type ; } }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"type cannot be null\" ) ; } Class <? > supertype = type ; while ( supertype!= null ) { supertype = supertype. getSuperclass ( ) ; } return supertype ; }",
        "@Override public < T > Class < T > getLeastSupertype ( T object ) { if ( object == null ) { return null ; } Class <? > clazz = object. getClass ( ) ; while ( clazz!= Object. class ) { clazz = clazz. getSuperclass ( ) ; } if ( clazz == null ) { return object ; } return ( Class < T > ) clazz ; }",
        "@Override public < T > Class < T > getLeastSupertype ( T object ) { if ( object == null ) { return null ; } Class <? > clazz = object. getClass ( ) ; while ( clazz!= Object. class ) { clazz = clazz. getSuperclass ( ) ; } if ( clazz == null ) { return null ; } return ( Class < T > ) clazz ; }",
        "@Override public < T > Class < T > getLeastSupertype ( T object ) { if ( object == null ) { return null ; } Class <? > clazz = object. getClass ( ) ; while ( clazz!= Object. class ) { clazz = clazz. getSuperclass ( ) ; } if ( clazz == null ) { clazz = object. getClass ( ) ; } return clazz ; }",
        "@Override public < T > Class < T > getLeastSupertype ( T object ) { if ( object == null ) { return null ; } Class <? > clazz = object. getClass ( ) ; while ( clazz!= Object. class ) { clazz = clazz. getSuperclass ( ) ; } return clazz ; }",
        "@Override public Class <? > getLeastSupertype ( Class <? > that ) { if ( that == null ) { return null ; } else if ( that instanceof Class <? > ) { return ( Class <? > ) that ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } else { return null ; } }",
        "@Override public Class <? > getLeastSupertype ( Class <? > that ) { if ( that == null ) { return null ; } else if ( that instanceof Class <? > ) { return ( Class <? > ) that ; } else if ( that instanceof ParameterizedType ) { return ( Class <? > ) ( ( ParameterizedType ) that ). getRawType ( ) ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } else { return null ; } }",
        "@Override public Class <? > getLeastSupertype ( Class <? > that ) { if ( that == null ) { return null ; } else if ( that instanceof Class <? > ) { return ( Class <? > ) that ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } return null ; }",
        "@Override public Class <? > getLeastSupertype ( Class <? > that ) { if ( that == null ) { return null ; } else if ( that instanceof Class <? > ) { return ( Class <? > ) that ; } else if ( that instanceof Class <? > ) { return getExtends ( ( Class <? > ) that ) ; } else { return null ; } }",
        "@Override public Class <? > getLeastSupertype ( Class <? > that ) { if ( that == null ) { return null ; } Class <? > superType = getExtends ( that ) ; if ( superType == null ) { return null ; } return superType. getSuperclass ( ) ; }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; } }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { return type ; } }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { return null ; } }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof TypeVariable <? > ) { TypeVariable <? > typeVariable = ( TypeVariable <? > ) type ; return supertype ( typeVariable. getBounds ( ) [ 0 ] ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } else { return type ; } }",
        "@Override public Class <? > getLeastSupertype ( Class <? > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class <? > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return supertype ( parameterizedType. getRawType ( ) ) ; } if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return supertype ( genericArrayType. getGenericComponentType ( ) ) ; } return type ; }"
      ]
    },
    "Closure_123_src/com/google/javascript/jscomp/CodeGenerator.java_285-286": {
      "loc": "285-286",
      "input": "void add(Node n, Context context) { if (!cc.continueProcessing()) { return; } int type = n.getType(); String opstr = NodeUtil.opToStr(type); int childCount = n.getChildCount(); Node first = n.getFirstChild(); Node last = n.getLastChild(); if (opstr != null && first != last) { Preconditions.checkState( childCount == 2, \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\", opstr, childCount); int p = NodeUtil.precedence(type); Context rhsContext = getContextForNoInOperator(context); if (last.getType() == type && NodeUtil.isAssociative(type)) { addExpr(first, p, context); cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) { addExpr(first, p, context); cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else { unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1); } return; } cc.startSourceMapping(n); switch (type) { case Token.TRY: { Preconditions.checkState(first.getNext().isBlock() && !first.getNext().hasMoreThanOneChild()); Preconditions.checkState(childCount >= 2 && childCount <= 3); add(\"try\"); add(first, Context.PRESERVE_BLOCK); Node catchblock = first.getNext().getFirstChild(); if (catchblock != null) { add(catchblock); } if (childCount == 3) { add(\"finally\"); add(last, Context.PRESERVE_BLOCK); } break; } case Token.CATCH: Preconditions.checkState(childCount == 2); add(\"catch(\"); add(first); add(\")\"); add(last, Context.PRESERVE_BLOCK); break; case Token.THROW: Preconditions.checkState(childCount == 1); add(\"throw\"); add(first); cc.endStatement(true); break; case Token.RETURN: add(\"return\"); if (childCount == 1) { add(first); } else { Preconditions.checkState(childCount == 0); } cc.endStatement(); break; case Token.VAR: if (first != null) { add(\"var \"); addList(first, false, getContextForNoInOperator(context)); } break; case Token.LABEL_NAME: Preconditions.checkState(!n.getString().isEmpty()); addIdentifier(n.getString()); break; case Token.NAME: if (first == null || first.isEmpty()) { addIdentifier(n.getString()); } else { Preconditions.checkState(childCount == 1); addIdentifier(n.getString()); cc.addOp(\"=\", true); if (first.isComma()) { addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER); } else { addExpr(first, 0, getContextForNoInOperator(context)); } } break; case Token.ARRAYLIT: add(\"[\"); addArrayList(first); add(\"]\"); break; case Token.PARAM_LIST: add(\"(\"); addList(first); add(\")\"); break; case Token.COMMA: Preconditions.checkState(childCount == 2); unrollBinaryOperator(n, Token.COMMA, \",\", context, getContextForNoInOperator(context), 0, 0); break; case Token.NUMBER: Preconditions.checkState(childCount == 0); cc.addNumber(n.getDouble()); break; case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.POS: { Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); break; } case Token.NEG: { Preconditions.checkState(childCount == 1); if (n.getFirstChild().isNumber()) { cc.addNumber(-n.getFirstChild().getDouble()); } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp(\"?\", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(\":\", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error(\"Expected children to be strings\"); } String regexp = regexpEscape(first.getString(), outputCharsetEncoder); if (childCount == 2) { add(regexp + last.getString()); } else { Preconditions.checkState(childCount == 1); add(regexp); } break; case Token.FUNCTION: if (n.getClass() != Node.class) { throw new Error(\"Unexpected Node subclass.\"); } Preconditions.checkState(childCount == 3); boolean funcNeedsParens = (context == Context.START_OF_EXPR); if (funcNeedsParens) { add(\"(\"); } add(\"function\"); add(first); add(first.getNext()); add(last, Context.PRESERVE_BLOCK); cc.endFunction(context == Context.STATEMENT); if (funcNeedsParens) { add(\")\"); } break; case Token.GETTER_DEF: case Token.SETTER_DEF: Preconditions.checkState(n.getParent().isObjectLit()); Preconditions.checkState(childCount == 1); Preconditions.checkState(first.isFunction()); Preconditions.checkState(first.getFirstChild().getString().isEmpty()); if (type == Token.GETTER_DEF) { Preconditions.checkState(!first.getChildAtIndex(1).hasChildren()); add(\"get \"); } else { Preconditions.checkState(first.getChildAtIndex(1).hasOneChild()); add(\"set \"); } String name = n.getString(); Node fn = first; Node parameters = fn.getChildAtIndex(1); Node body = fn.getLastChild(); if (!n.isQuotedString() && TokenStream.isJSIdentifier(name) && NodeUtil.isLatin(name)) { add(name); } else { double d = getSimpleNumber(name); if (!Double.isNaN(d)) { cc.addNumber(d); } else { addJsString(n); } } add(parameters); add(body, Context.PRESERVE_BLOCK); break; case Token.SCRIPT: case Token.BLOCK: { if (n.getClass() != Node.class) { throw new Error(\"Unexpected Node subclass.\"); } boolean preserveBlock = context == Context.PRESERVE_BLOCK; if (preserveBlock) { cc.beginBlock(); } boolean preferLineBreaks = type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript()); for (Node c = first; c != null; c = c.getNext()) { add(c, Context.STATEMENT); if (c.isVar()) { cc.endStatement(); } if (c.isFunction()) { cc.maybeLineBreak(); } if (preferLineBreaks) { cc.notePreferredLineBreak(); } } if (preserveBlock) { cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } break; } case Token.FOR: if (childCount == 4) { add(\"for(\"); if (first.isVar()) { add(first, Context.IN_FOR_INIT_CLAUSE); } else { addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE); } add(\";\"); add(first.getNext()); add(\";\"); add(first.getNext().getNext()); add(\")\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); } else { Preconditions.checkState(childCount == 3); add(\"for(\"); add(first); add(\"in\"); add(first.getNext()); add(\")\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); } break; case Token.DO: Preconditions.checkState(childCount == 2); add(\"do\"); addNonEmptyStatement(first, Context.OTHER, false); add(\"while(\"); add(last); add(\")\"); cc.endStatement(); break; case Token.WHILE: Preconditions.checkState(childCount == 2); add(\"while(\"); add(first); add(\")\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); break; case Token.EMPTY: Preconditions.checkState(childCount == 0); break; case Token.GETPROP: { Preconditions.checkState( childCount == 2, \"Bad GETPROP: expected 2 children, but got %s\", childCount); Preconditions.checkState( last.isString(), \"Bad GETPROP: RHS should be STRING\"); boolean needsParens = (first.isNumber()); if (needsParens) { add(\"(\"); } addExpr(first, NodeUtil.precedence(type), context); if (needsParens) { add(\")\"); } if (this.languageMode == LanguageMode.ECMASCRIPT3 && TokenStream.isKeyword(last.getString())) { add(\"[\"); add(last); add(\"]\"); } else { add(\".\"); addIdentifier(last.getString()); } break; } case Token.GETELEM: Preconditions.checkState( childCount == 2, \"Bad GETELEM: expected 2 children but got %s\", childCount); addExpr(first, NodeUtil.precedence(type), context); add(\"[\"); add(first.getNext()); add(\"]\"); break; case Token.WITH: Preconditions.checkState(childCount == 2); add(\"with(\"); add(first); add(\")\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); break; case Token.INC: case Token.DEC: { Preconditions.checkState(childCount == 1); String o = type == Token.INC ? \"++\" : \"--\"; int postProp = n.getIntProp(Node.INCRDECR_PROP); if (postProp != 0) { addExpr(first, NodeUtil.precedence(type), context); cc.addOp(o, false); } else { cc.addOp(o, false); add(first); } break; } case Token.CALL: if (isIndirectEval(first) || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) { add(\"(0,\"); addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER); add(\")\"); } else { addExpr(first, NodeUtil.precedence(type), context); } add(\"(\"); addList(first.getNext()); add(\")\"); break; case Token.IF: boolean hasElse = childCount == 3; boolean ambiguousElseClause = context == Context.BEFORE_DANGLING_ELSE && !hasElse; if (ambiguousElseClause) { cc.beginBlock(); } add(\"if(\"); add(first); add(\")\"); if (hasElse) { addNonEmptyStatement( first.getNext(), Context.BEFORE_DANGLING_ELSE, false); add(\"else\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); } else { addNonEmptyStatement(first.getNext(), Context.OTHER, false); Preconditions.checkState(childCount == 2); } if (ambiguousElseClause) { cc.endBlock(); } break; case Token.NULL: Preconditions.checkState(childCount == 0); cc.addConstant(\"null\"); break; case Token.THIS: Preconditions.checkState(childCount == 0); add(\"this\"); break; case Token.FALSE: Preconditions.checkState(childCount == 0); cc.addConstant(\"false\"); break; case Token.TRUE: Preconditions.checkState(childCount == 0); cc.addConstant(\"true\"); break; case Token.CONTINUE: Preconditions.checkState(childCount <= 1); add(\"continue\"); if (childCount == 1) { if (!first.isLabelName()) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(\" \"); add(first); } cc.endStatement(); break; case Token.DEBUGGER: Preconditions.checkState(childCount == 0); add(\"debugger\"); cc.endStatement(); break; case Token.BREAK: Preconditions.checkState(childCount <= 1); add(\"break\"); if (childCount == 1) { if (!first.isLabelName()) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(\" \"); add(first); } cc.endStatement(); break; case Token.EXPR_RESULT: Preconditions.checkState(childCount == 1); add(first, Context.START_OF_EXPR); cc.endStatement(); break; case Token.NEW: add(\"new \"); int precedence = NodeUtil.precedence(type); if (NodeUtil.containsType( first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) { precedence = NodeUtil.precedence(first.getType()) + 1; } addExpr(first, precedence, Context.OTHER); Node next = first.getNext(); if (next != null) { add(\"(\"); addList(next); add(\")\"); } break; case Token.STRING_KEY: Preconditions.checkState( childCount == 1, \"Object lit key must have 1 child\"); addJsString(n); break; case Token.STRING: Preconditions.checkState( childCount == 0, \"A string may not have children\"); addJsString(n); break; case Token.DELPROP: Preconditions.checkState(childCount == 1); add(\"delete \"); add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add(\"(\"); } add(\"{\"); for (Node c = first; c != null; c = c.getNext()) { if (c != first) { cc.listSeparator(); } if (c.isGetterDef() || c.isSetterDef()) { add(c); } else { Preconditions.checkState(c.isStringKey()); String key = c.getString(); if (!c.isQuotedString() && !(languageMode == LanguageMode.ECMASCRIPT3 && TokenStream.isKeyword(key)) && TokenStream.isJSIdentifier(key) && NodeUtil.isLatin(key)) { add(key); } else { double d = getSimpleNumber(key); if (!Double.isNaN(d)) { cc.addNumber(d); } else { addExpr(c, 1, Context.OTHER); } } add(\":\"); addExpr(c.getFirstChild(), 1, Context.OTHER); } } add(\"}\"); if (needsParens) { add(\")\"); } break; } case Token.SWITCH: add(\"switch(\"); add(first); add(\")\"); cc.beginBlock(); addAllSiblings(first.getNext()); cc.endBlock(context == Context.STATEMENT); break; case Token.CASE: Preconditions.checkState(childCount == 2); add(\"case \"); add(first); addCaseBody(last); break; case Token.DEFAULT_CASE: Preconditions.checkState(childCount == 1); add(\"default\"); addCaseBody(first); break; case Token.LABEL: Preconditions.checkState(childCount == 2); if (!first.isLabelName()) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(first); add(\":\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), true); break; case Token.CAST: add(\"(\"); add(first); add(\")\"); break; default: throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree()); } cc.endSourceMapping(n); }",
      "target": "void add(Node n, Context context) { if (!cc.continueProcessing()) { return; } int type = n.getType(); String opstr = NodeUtil.opToStr(type); int childCount = n.getChildCount(); Node first = n.getFirstChild(); Node last = n.getLastChild(); if (opstr != null && first != last) { Preconditions.checkState( childCount == 2, \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\", opstr, childCount); int p = NodeUtil.precedence(type); Context rhsContext = getContextForNoInOperator(context); if (last.getType() == type && NodeUtil.isAssociative(type)) { addExpr(first, p, context); cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) { addExpr(first, p, context); cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else { unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1); } return; } cc.startSourceMapping(n); switch (type) { case Token.TRY: { Preconditions.checkState(first.getNext().isBlock() && !first.getNext().hasMoreThanOneChild()); Preconditions.checkState(childCount >= 2 && childCount <= 3); add(\"try\"); add(first, Context.PRESERVE_BLOCK); Node catchblock = first.getNext().getFirstChild(); if (catchblock != null) { add(catchblock); } if (childCount == 3) { add(\"finally\"); add(last, Context.PRESERVE_BLOCK); } break; } case Token.CATCH: Preconditions.checkState(childCount == 2); add(\"catch(\"); add(first); add(\")\"); add(last, Context.PRESERVE_BLOCK); break; case Token.THROW: Preconditions.checkState(childCount == 1); add(\"throw\"); add(first); cc.endStatement(true); break; case Token.RETURN: add(\"return\"); if (childCount == 1) { add(first); } else { Preconditions.checkState(childCount == 0); } cc.endStatement(); break; case Token.VAR: if (first != null) { add(\"var \"); addList(first, false, getContextForNoInOperator(context)); } break; case Token.LABEL_NAME: Preconditions.checkState(!n.getString().isEmpty()); addIdentifier(n.getString()); break; case Token.NAME: if (first == null || first.isEmpty()) { addIdentifier(n.getString()); } else { Preconditions.checkState(childCount == 1); addIdentifier(n.getString()); cc.addOp(\"=\", true); if (first.isComma()) { addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER); } else { addExpr(first, 0, getContextForNoInOperator(context)); } } break; case Token.ARRAYLIT: add(\"[\"); addArrayList(first); add(\"]\"); break; case Token.PARAM_LIST: add(\"(\"); addList(first); add(\")\"); break; case Token.COMMA: Preconditions.checkState(childCount == 2); unrollBinaryOperator(n, Token.COMMA, \",\", context, getContextForNoInOperator(context), 0, 0); break; case Token.NUMBER: Preconditions.checkState(childCount == 0); cc.addNumber(n.getDouble()); break; case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.POS: { Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); break; } case Token.NEG: { Preconditions.checkState(childCount == 1); if (n.getFirstChild().isNumber()) { cc.addNumber(-n.getFirstChild().getDouble()); } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = getContextForNoInOperator(context); addExpr(first, p + 1, context); cc.addOp(\"?\", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(\":\", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error(\"Expected children to be strings\"); } String regexp = regexpEscape(first.getString(), outputCharsetEncoder); if (childCount == 2) { add(regexp + last.getString()); } else { Preconditions.checkState(childCount == 1); add(regexp); } break; case Token.FUNCTION: if (n.getClass() != Node.class) { throw new Error(\"Unexpected Node subclass.\"); } Preconditions.checkState(childCount == 3); boolean funcNeedsParens = (context == Context.START_OF_EXPR); if (funcNeedsParens) { add(\"(\"); } add(\"function\"); add(first); add(first.getNext()); add(last, Context.PRESERVE_BLOCK); cc.endFunction(context == Context.STATEMENT); if (funcNeedsParens) { add(\")\"); } break; case Token.GETTER_DEF: case Token.SETTER_DEF: Preconditions.checkState(n.getParent().isObjectLit()); Preconditions.checkState(childCount == 1); Preconditions.checkState(first.isFunction()); Preconditions.checkState(first.getFirstChild().getString().isEmpty()); if (type == Token.GETTER_DEF) { Preconditions.checkState(!first.getChildAtIndex(1).hasChildren()); add(\"get \"); } else { Preconditions.checkState(first.getChildAtIndex(1).hasOneChild()); add(\"set \"); } String name = n.getString(); Node fn = first; Node parameters = fn.getChildAtIndex(1); Node body = fn.getLastChild(); if (!n.isQuotedString() && TokenStream.isJSIdentifier(name) && NodeUtil.isLatin(name)) { add(name); } else { double d = getSimpleNumber(name); if (!Double.isNaN(d)) { cc.addNumber(d); } else { addJsString(n); } } add(parameters); add(body, Context.PRESERVE_BLOCK); break; case Token.SCRIPT: case Token.BLOCK: { if (n.getClass() != Node.class) { throw new Error(\"Unexpected Node subclass.\"); } boolean preserveBlock = context == Context.PRESERVE_BLOCK; if (preserveBlock) { cc.beginBlock(); } boolean preferLineBreaks = type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript()); for (Node c = first; c != null; c = c.getNext()) { add(c, Context.STATEMENT); if (c.isVar()) { cc.endStatement(); } if (c.isFunction()) { cc.maybeLineBreak(); } if (preferLineBreaks) { cc.notePreferredLineBreak(); } } if (preserveBlock) { cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } break; } case Token.FOR: if (childCount == 4) { add(\"for(\"); if (first.isVar()) { add(first, Context.IN_FOR_INIT_CLAUSE); } else { addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE); } add(\";\"); add(first.getNext()); add(\";\"); add(first.getNext().getNext()); add(\")\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); } else { Preconditions.checkState(childCount == 3); add(\"for(\"); add(first); add(\"in\"); add(first.getNext()); add(\")\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); } break; case Token.DO: Preconditions.checkState(childCount == 2); add(\"do\"); addNonEmptyStatement(first, Context.OTHER, false); add(\"while(\"); add(last); add(\")\"); cc.endStatement(); break; case Token.WHILE: Preconditions.checkState(childCount == 2); add(\"while(\"); add(first); add(\")\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); break; case Token.EMPTY: Preconditions.checkState(childCount == 0); break; case Token.GETPROP: { Preconditions.checkState( childCount == 2, \"Bad GETPROP: expected 2 children, but got %s\", childCount); Preconditions.checkState( last.isString(), \"Bad GETPROP: RHS should be STRING\"); boolean needsParens = (first.isNumber()); if (needsParens) { add(\"(\"); } addExpr(first, NodeUtil.precedence(type), context); if (needsParens) { add(\")\"); } if (this.languageMode == LanguageMode.ECMASCRIPT3 && TokenStream.isKeyword(last.getString())) { add(\"[\"); add(last); add(\"]\"); } else { add(\".\"); addIdentifier(last.getString()); } break; } case Token.GETELEM: Preconditions.checkState( childCount == 2, \"Bad GETELEM: expected 2 children but got %s\", childCount); addExpr(first, NodeUtil.precedence(type), context); add(\"[\"); add(first.getNext()); add(\"]\"); break; case Token.WITH: Preconditions.checkState(childCount == 2); add(\"with(\"); add(first); add(\")\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); break; case Token.INC: case Token.DEC: { Preconditions.checkState(childCount == 1); String o = type == Token.INC ? \"++\" : \"--\"; int postProp = n.getIntProp(Node.INCRDECR_PROP); if (postProp != 0) { addExpr(first, NodeUtil.precedence(type), context); cc.addOp(o, false); } else { cc.addOp(o, false); add(first); } break; } case Token.CALL: if (isIndirectEval(first) || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) { add(\"(0,\"); addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER); add(\")\"); } else { addExpr(first, NodeUtil.precedence(type), context); } add(\"(\"); addList(first.getNext()); add(\")\"); break; case Token.IF: boolean hasElse = childCount == 3; boolean ambiguousElseClause = context == Context.BEFORE_DANGLING_ELSE && !hasElse; if (ambiguousElseClause) { cc.beginBlock(); } add(\"if(\"); add(first); add(\")\"); if (hasElse) { addNonEmptyStatement( first.getNext(), Context.BEFORE_DANGLING_ELSE, false); add(\"else\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); } else { addNonEmptyStatement(first.getNext(), Context.OTHER, false); Preconditions.checkState(childCount == 2); } if (ambiguousElseClause) { cc.endBlock(); } break; case Token.NULL: Preconditions.checkState(childCount == 0); cc.addConstant(\"null\"); break; case Token.THIS: Preconditions.checkState(childCount == 0); add(\"this\"); break; case Token.FALSE: Preconditions.checkState(childCount == 0); cc.addConstant(\"false\"); break; case Token.TRUE: Preconditions.checkState(childCount == 0); cc.addConstant(\"true\"); break; case Token.CONTINUE: Preconditions.checkState(childCount <= 1); add(\"continue\"); if (childCount == 1) { if (!first.isLabelName()) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(\" \"); add(first); } cc.endStatement(); break; case Token.DEBUGGER: Preconditions.checkState(childCount == 0); add(\"debugger\"); cc.endStatement(); break; case Token.BREAK: Preconditions.checkState(childCount <= 1); add(\"break\"); if (childCount == 1) { if (!first.isLabelName()) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(\" \"); add(first); } cc.endStatement(); break; case Token.EXPR_RESULT: Preconditions.checkState(childCount == 1); add(first, Context.START_OF_EXPR); cc.endStatement(); break; case Token.NEW: add(\"new \"); int precedence = NodeUtil.precedence(type); if (NodeUtil.containsType( first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) { precedence = NodeUtil.precedence(first.getType()) + 1; } addExpr(first, precedence, Context.OTHER); Node next = first.getNext(); if (next != null) { add(\"(\"); addList(next); add(\")\"); } break; case Token.STRING_KEY: Preconditions.checkState( childCount == 1, \"Object lit key must have 1 child\"); addJsString(n); break; case Token.STRING: Preconditions.checkState( childCount == 0, \"A string may not have children\"); addJsString(n); break; case Token.DELPROP: Preconditions.checkState(childCount == 1); add(\"delete \"); add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add(\"(\"); } add(\"{\"); for (Node c = first; c != null; c = c.getNext()) { if (c != first) { cc.listSeparator(); } if (c.isGetterDef() || c.isSetterDef()) { add(c); } else { Preconditions.checkState(c.isStringKey()); String key = c.getString(); if (!c.isQuotedString() && !(languageMode == LanguageMode.ECMASCRIPT3 && TokenStream.isKeyword(key)) && TokenStream.isJSIdentifier(key) && NodeUtil.isLatin(key)) { add(key); } else { double d = getSimpleNumber(key); if (!Double.isNaN(d)) { cc.addNumber(d); } else { addExpr(c, 1, Context.OTHER); } } add(\":\"); addExpr(c.getFirstChild(), 1, Context.OTHER); } } add(\"}\"); if (needsParens) { add(\")\"); } break; } case Token.SWITCH: add(\"switch(\"); add(first); add(\")\"); cc.beginBlock(); addAllSiblings(first.getNext()); cc.endBlock(context == Context.STATEMENT); break; case Token.CASE: Preconditions.checkState(childCount == 2); add(\"case \"); add(first); addCaseBody(last); break; case Token.DEFAULT_CASE: Preconditions.checkState(childCount == 1); add(\"default\"); addCaseBody(first); break; case Token.LABEL: Preconditions.checkState(childCount == 2); if (!first.isLabelName()) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(first); add(\":\"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), true); break; case Token.CAST: add(\"(\"); add(first); add(\")\"); break; default: throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree()); } cc.endSourceMapping(n); }",
      "function range": "107,3-771,3",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Lang_10_src/main/java/org/apache/commons/lang3/time/FastDateParser.java_307-314": {
      "loc": "307-314",
      "input": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i); if(Character.isWhitespace(c)) { if(!wasWhite) { wasWhite= true; regex.append(\"\\\\s*+\"); } continue; } wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); } return regex; }",
      "target": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i); switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); } return regex; }",
      "function range": "303,5-343,5",
      "raw_output": [
        "public static String escape ( String str ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else { buf. append ( c ) ; } } return buf. toString ( ) ; }",
        "public static String escape ( String string ) { if ( string == null ) { return null ; } StringBuilder sb = new StringBuilder ( string. length ( ) ) ; for ( int i = 0 ; i < string. length ( ) ; i ++ ) { char c = string. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String escape ( String string ) { if ( string == null ) { return null ; } StringBuffer buf = new StringBuffer ( string. length ( ) ) ; for ( int i = 0 ; i < string. length ( ) ; i ++ ) { char c = string. charAt ( i ) ; if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else { buf. append ( c ) ; } } return buf. toString ( ) ; }",
        "public static String escape ( String str ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else { buf. append ( c ) ; } } buf. append ( str ) ; return buf. toString ( ) ; }",
        "public static String escape ( String str ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } buf. append ( c ) ; } return buf. toString ( ) ; }",
        "public static String escapeRegex ( String string ) { if ( string == null ) { return null ; } if ( string. indexOf ('' )!= - 1 ) { string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; } return string ; }",
        "public static String escapeRegex ( String string ) { if ( string == null ) { return null ; } if ( string. indexOf ('' ) >= 0 ) { string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; } return string ; }",
        "public static String escapeRegex ( String string ) { if ( string == null ) { return null ; } if ( string. indexOf ('' ) >= 0 ) { string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; return string ; } return string ; }",
        "public static String escapeRegex ( String string ) { if ( string == null ) { return null ; } if ( string. indexOf ('' )!= - 1 ) { string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; return string ; } return string ; }",
        "public static String escapeRegex ( String string ) { if ( string == null ) { return null ; } string = string. replaceAll ( \"\\\\$\", \"$1\" ) ; string = string. replaceAll ( \"\\\\$\", \"$2\" ) ; string = string. replaceAll ( \"\\\\$\", \"$3\" ) ; string = string. replaceAll ( \"\\\\$\", \"$4\" ) ; return string ; }",
        "public static StringBuilder escape ( StringBuilder builder, char escapeChar ) { for ( int i = 0 ; i < builder. length ( ) ; i ++ ) { if ( builder. charAt ( i ) == escapeChar ) { return builder ; } } return new StringBuilder ( builder. toString ( ) ) ; }",
        "public static StringBuilder escape ( StringBuilder builder, char escape ) { for ( int i = 0 ; i < builder. length ( ) ; i ++ ) { if ( builder. charAt ( i ) == escape ) { return builder ; } } return new StringBuilder ( builder. toString ( ) ) ; }",
        "public static StringBuilder escape ( StringBuilder builder, char escapeChar ) { for ( int i = 0 ; i < builder. length ( ) ; i ++ ) { if ( builder. charAt ( i ) == escapeChar ) { return builder ; } } return builder ; }",
        "public static StringBuilder escape ( StringBuilder builder, char escape ) { for ( int i = 0 ; i < builder. length ( ) ; i ++ ) { builder. setCharAt ( i, escape ) ; } return builder ; }",
        "public static StringBuilder escape ( StringBuilder builder, char escapeChar ) { for ( int i = 0 ; i < builder. length ( ) ; i ++ ) { if ( builder. charAt ( i ) == escapeChar ) { return builder ; } } return new StringBuilder ( builder. length ( ) ) ; }",
        "public static String escapeRegex ( String regex ) { if ( regex == null || regex. length ( ) == 0 ) { return regex ; } StringBuilder sb = new StringBuilder ( regex. length ( ) ) ; for ( int i = 0 ; i < regex. length ( ) ; i ++ ) { char c = regex. charAt ( i ) ; if ( c =='' ) { if ( sb. length ( ) > 0 ) { sb. append ('' ) ; } sb. append ( c ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String escapeRegex ( String regex ) { if ( regex == null || regex. length ( ) == 0 ) { return regex ; } StringBuilder sb = new StringBuilder ( regex. length ( ) ) ; for ( int i = 0 ; i < regex. length ( ) ; i ++ ) { char c = regex. charAt ( i ) ; if ( c =='' ) { sb. append ( \"\\\\$\" ) ; } else if ( c =='' ) { sb. append ( \"\\\\$\" ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String escapeRegex ( String regex ) { if ( regex == null || regex. length ( ) == 0 ) { return regex ; } StringBuilder sb = new StringBuilder ( regex. length ( ) ) ; for ( int i = 0 ; i < regex. length ( ) ; i ++ ) { char c = regex. charAt ( i ) ; if ( c =='' ) { sb. append ( \"\\\\\" ) ; } else if ( c =='' ) { sb. append ( \"\\\\\\\\\" ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String escapeRegex ( String regex ) { if ( regex == null || regex. length ( ) == 0 ) { return regex ; } StringBuilder sb = new StringBuilder ( regex. length ( ) ) ; for ( int i = 0 ; i < regex. length ( ) ; i ++ ) { char c = regex. charAt ( i ) ; if ( c =='' ) { sb. append ( \"\\\\\" ) ; } else if ( c =='' ) { sb. append ( \"\\\\\" ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String escapeRegex ( String regex ) { if ( regex == null || regex. length ( ) == 0 ) { return regex ; } StringBuilder sb = new StringBuilder ( regex. length ( ) ) ; for ( int i = 0 ; i < regex. length ( ) ; i ++ ) { char c = regex. charAt ( i ) ; if ( c =='' ) { sb. append ( \"\\\\\" ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ( \"&lt;\" ) ; } else if ( c =='' ) { output. append ( \"&gt;\" ) ; } else if ( c =='' ) { output. append ( \"&quot;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ( \"&lt;\" ) ; } else if ( c =='' ) { output. append ( \"&gt;\" ) ; } else if ( c =='' ) { output. append ( \"&amp;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ( \"&lt;\" ) ; } else if ( c =='' ) { output. append ( \"&gt;\" ) ; } else if ( c =='' ) { output. append ( \"&quot;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ( \"&lt;\" ) ; } else if ( c =='' ) { output. append ( \"&gt;\" ) ; } else if ( c =='' ) { output. append ( \"&amp;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ( \"&lt;\" ) ; } else if ( c =='' ) { output. append ( \"&gt;\" ) ; } else if ( c =='' ) { output. append ( \"&quot;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }"
      ],
      "mid_translation": [
        "Escape characters in a regular expression.",
        "Escape regular expression.",
        "Escape characters in the given string builder.",
        "Escape characters in a regex.",
        "Escape characters."
      ],
      "output": [
        "private static String escapeRegex ( String str ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else { buf. append ( c ) ; } } return buf. toString ( ) ; }",
        "private static String escapeRegex ( String string ) { if ( string == null ) { return null ; } StringBuilder sb = new StringBuilder ( string. length ( ) ) ; for ( int i = 0 ; i < string. length ( ) ; i ++ ) { char c = string. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "private static String escapeRegex ( String string ) { if ( string == null ) { return null ; } StringBuffer buf = new StringBuffer ( string. length ( ) ) ; for ( int i = 0 ; i < string. length ( ) ; i ++ ) { char c = string. charAt ( i ) ; if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else { buf. append ( c ) ; } } return buf. toString ( ) ; }",
        "private static String escapeRegex ( String str ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else { buf. append ( c ) ; } } buf. append ( str ) ; return buf. toString ( ) ; }",
        "private static String escapeRegex ( String str ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } else if ( c =='' ) { buf. append ('' ) ; } buf. append ( c ) ; } return buf. toString ( ) ; }",
        "private static String escapeRegex ( String string ) { if ( string == null ) { return null ; } if ( string. indexOf ('' )!= - 1 ) { string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; } return string ; }",
        "private static String escapeRegex ( String string ) { if ( string == null ) { return null ; } if ( string. indexOf ('' ) >= 0 ) { string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; } return string ; }",
        "private static String escapeRegex ( String string ) { if ( string == null ) { return null ; } if ( string. indexOf ('' ) >= 0 ) { string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; return string ; } return string ; }",
        "private static String escapeRegex ( String string ) { if ( string == null ) { return null ; } if ( string. indexOf ('' )!= - 1 ) { string = string. replace ('','' ) ; string = string. replace ('','' ) ; string = string. replace ('','' ) ; return string ; } return string ; }",
        "private static String escapeRegex ( String string ) { if ( string == null ) { return null ; } string = string. replaceAll ( \"\\\\$\", \"$1\" ) ; string = string. replaceAll ( \"\\\\$\", \"$2\" ) ; string = string. replaceAll ( \"\\\\$\", \"$3\" ) ; string = string. replaceAll ( \"\\\\$\", \"$4\" ) ; return string ; }",
        "private static StringBuilder escapeRegex ( StringBuilder builder, char escapeChar ) { for ( int i = 0 ; i < builder. length ( ) ; i ++ ) { if ( builder. charAt ( i ) == escapeChar ) { return builder ; } } return new StringBuilder ( builder. toString ( ) ) ; }",
        "private static StringBuilder escapeRegex ( StringBuilder builder, char escape ) { for ( int i = 0 ; i < builder. length ( ) ; i ++ ) { if ( builder. charAt ( i ) == escape ) { return builder ; } } return new StringBuilder ( builder. toString ( ) ) ; }",
        "private static StringBuilder escapeRegex ( StringBuilder builder, char escapeChar ) { for ( int i = 0 ; i < builder. length ( ) ; i ++ ) { if ( builder. charAt ( i ) == escapeChar ) { return builder ; } } return builder ; }",
        "private static StringBuilder escapeRegex ( StringBuilder builder, char escape ) { for ( int i = 0 ; i < builder. length ( ) ; i ++ ) { builder. setCharAt ( i, escape ) ; } return builder ; }",
        "private static StringBuilder escapeRegex ( StringBuilder builder, char escapeChar ) { for ( int i = 0 ; i < builder. length ( ) ; i ++ ) { if ( builder. charAt ( i ) == escapeChar ) { return builder ; } } return new StringBuilder ( builder. length ( ) ) ; }",
        "private static String escapeRegex ( String regex ) { if ( regex == null || regex. length ( ) == 0 ) { return regex ; } StringBuilder sb = new StringBuilder ( regex. length ( ) ) ; for ( int i = 0 ; i < regex. length ( ) ; i ++ ) { char c = regex. charAt ( i ) ; if ( c =='' ) { if ( sb. length ( ) > 0 ) { sb. append ('' ) ; } sb. append ( c ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "private static String escapeRegex ( String regex ) { if ( regex == null || regex. length ( ) == 0 ) { return regex ; } StringBuilder sb = new StringBuilder ( regex. length ( ) ) ; for ( int i = 0 ; i < regex. length ( ) ; i ++ ) { char c = regex. charAt ( i ) ; if ( c =='' ) { sb. append ( \"\\\\$\" ) ; } else if ( c =='' ) { sb. append ( \"\\\\$\" ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "private static String escapeRegex ( String regex ) { if ( regex == null || regex. length ( ) == 0 ) { return regex ; } StringBuilder sb = new StringBuilder ( regex. length ( ) ) ; for ( int i = 0 ; i < regex. length ( ) ; i ++ ) { char c = regex. charAt ( i ) ; if ( c =='' ) { sb. append ( \"\\\\\" ) ; } else if ( c =='' ) { sb. append ( \"\\\\\\\\\" ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "private static String escapeRegex ( String regex ) { if ( regex == null || regex. length ( ) == 0 ) { return regex ; } StringBuilder sb = new StringBuilder ( regex. length ( ) ) ; for ( int i = 0 ; i < regex. length ( ) ; i ++ ) { char c = regex. charAt ( i ) ; if ( c =='' ) { sb. append ( \"\\\\\" ) ; } else if ( c =='' ) { sb. append ( \"\\\\\" ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "private static String escapeRegex ( String regex ) { if ( regex == null || regex. length ( ) == 0 ) { return regex ; } StringBuilder sb = new StringBuilder ( regex. length ( ) ) ; for ( int i = 0 ; i < regex. length ( ) ; i ++ ) { char c = regex. charAt ( i ) ; if ( c =='' ) { sb. append ( \"\\\\\" ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "private static String escapeRegex ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ( \"&lt;\" ) ; } else if ( c =='' ) { output. append ( \"&gt;\" ) ; } else if ( c =='' ) { output. append ( \"&quot;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "private static String escapeRegex ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ( \"&lt;\" ) ; } else if ( c =='' ) { output. append ( \"&gt;\" ) ; } else if ( c =='' ) { output. append ( \"&amp;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "private static String escapeRegex ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ( \"&lt;\" ) ; } else if ( c =='' ) { output. append ( \"&gt;\" ) ; } else if ( c =='' ) { output. append ( \"&quot;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "private static String escapeRegex ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ( \"&lt;\" ) ; } else if ( c =='' ) { output. append ( \"&gt;\" ) ; } else if ( c =='' ) { output. append ( \"&amp;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "private static String escapeRegex ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ( \"&lt;\" ) ; } else if ( c =='' ) { output. append ( \"&gt;\" ) ; } else if ( c =='' ) { output. append ( \"&quot;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else if ( c =='' ) { output. append ( \"&apos;\" ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }"
      ]
    },
    "Lang_24_src/main/java/org/apache/commons/lang3/math/NumberUtils.java_1413-1414": {
      "loc": "1413-1414",
      "input": "public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; } for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) { return false; } } return true; } } sz--; int i = start; while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) { if (chars[i] >= '0' && chars[i] <= '9') { foundDigit = true; allowSigns = false; } else if (chars[i] == '.') { if (hasDecPoint || hasExp) { return false; } hasDecPoint = true; } else if (chars[i] == 'e' || chars[i] == 'E') { if (hasExp) { return false; } if (!foundDigit) { return false; } hasExp = true; allowSigns = true; } else if (chars[i] == '+' || chars[i] == '-') { if (!allowSigns) { return false; } allowSigns = false; foundDigit = false; } else { return false; } i++; } if (i < chars.length) { if (chars[i] >= '0' && chars[i] <= '9') { return true; } if (chars[i] == 'e' || chars[i] == 'E') { return false; } if (chars[i] == '.') { if (hasDecPoint || hasExp) { return false; } return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) { return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') { return foundDigit && !hasExp; } return false; } return !allowSigns && foundDigit; }",
      "target": "public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; } for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) { return false; } } return true; } } sz--; int i = start; while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) { if (chars[i] >= '0' && chars[i] <= '9') { foundDigit = true; allowSigns = false; } else if (chars[i] == '.') { if (hasDecPoint || hasExp) { return false; } hasDecPoint = true; } else if (chars[i] == 'e' || chars[i] == 'E') { if (hasExp) { return false; } if (!foundDigit) { return false; } hasExp = true; allowSigns = true; } else if (chars[i] == '+' || chars[i] == '-') { if (!allowSigns) { return false; } allowSigns = false; foundDigit = false; } else { return false; } i++; } if (i < chars.length) { if (chars[i] >= '0' && chars[i] <= '9') { return true; } if (chars[i] == 'e' || chars[i] == 'E') { return false; } if (chars[i] == '.') { if (hasDecPoint || hasExp) { return false; } return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) { return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') { return foundDigit && !hasExp && !hasDecPoint; } return false; } return !allowSigns && foundDigit; }",
      "function range": "1319,5-1421,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Lang_38_src/java/org/apache/commons/lang3/time/FastDateFormat.java_871-872": {
      "loc": "871-872",
      "input": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
      "target": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { calendar.getTime(); calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
      "function range": "870,5-876,5",
      "raw_output": [
        "private StringBuffer format ( Calendar cal ) { StringBuffer buf = new StringBuffer ( ) ; format ( cal, buf ) ; return buf ; }",
        "private StringBuffer format ( Calendar cal ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < cal. get ( Calendar. DAY_OF_MONTH ) ; i ++ ) { buf. append ( format ( cal. get ( Calendar. DAY_OF_MONTH ) ) ) ; } return buf ; }",
        "private StringBuffer format ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; format ( calendar, buf ) ; return buf ; }",
        "private StringBuffer format ( Calendar cal ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < cal. get ( Calendar. DAY_OF_MONTH ) ; i ++ ) { buf. append ( cal. get ( Calendar. DAY_OF_MONTH ) ) ; } return buf ; }",
        "private StringBuffer format ( Calendar cal ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < cal. get ( Calendar. DAY_OF_MONTH ) ; i ++ ) { buf. append ( cal. get ( Calendar. DAY_OF_MONTH ) ). append ('' ) ; } return buf ; }",
        "private void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { format ( calendar, buf ) ; } }",
        "public static StringBuffer format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { return buf ; } return format ( calendar. getTime ( ), buf ) ; }",
        "public static StringBuffer format ( Calendar calendar, StringBuffer buf ) { if ( buf == null ) { buf = new StringBuffer ( ) ; } format ( calendar, buf ) ; return buf ; }",
        "public static StringBuffer format ( Calendar calendar, StringBuffer buf ) { if ( buf == null ) { buf = new StringBuffer ( ) ; } return format ( calendar, buf ) ; }",
        "private void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null calendar\" ) ; } else { format ( calendar, buf ) ; } }",
        "private void format ( ICalForm form, StringBuffer buf ) { if ( buf. length ( ) > 0 ) { buf. append ('' ) ; } format ( form, buf ) ; }",
        "public static StringBuffer format ( ICalendar calendar, StringBuffer buf ) { if ( buf == null ) { buf = new StringBuffer ( ) ; } format ( calendar, buf ) ; return buf ; }",
        "private void format ( ICalendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { format ( calendar, buf ) ; } }",
        "public static StringBuffer format ( ICalendar calendar, StringBuffer buf ) { if ( buf == null ) { buf = new StringBuffer ( ) ; } format ( calendar, buf, buf ) ; return buf ; }",
        "public static StringBuffer format ( ICalendar calendar, StringBuffer buf ) { if ( buf == null ) { buf = new StringBuffer ( ) ; } formatImpl ( calendar, buf ) ; return buf ; }",
        "private void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { format ( calendar, buf ) ; } }",
        "private void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { buf. append ( calendar. toString ( ) ) ; } }",
        "private static void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { format ( calendar, buf ) ; } }",
        "private static void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { buf. append ( calendar. toString ( ) ) ; } }",
        "public static StringBuffer format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { return buf ; } return format ( calendar. getTime ( ), buf ) ; }",
        "private StringBuffer format ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; format ( calendar, buf ) ; return buf ; }",
        "private StringBuffer format ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; if ( calendar == null ) { buf. append ( \"null\" ) ; } else { buf. append ( calendar. toString ( ) ) ; } return buf ; }",
        "private StringBuffer format ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; if ( calendar == null ) { buf. append ( \"null calendar\" ) ; } else { buf. append ( calendar. toString ( ) ) ; } return buf ; }",
        "private StringBuffer formatCalendar ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; format ( calendar, buf ) ; return buf ; }",
        "private StringBuffer format ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; if ( calendar == null ) { buf. append ( \"null\" ) ; } else { buf. append ( calendar. getID ( ) ) ; } format ( calendar, buf ) ; return buf ; }"
      ],
      "mid_translation": [
        "Formats a calendar object into a string buffer.",
        "Formats the specified calendar object into the specified StringBuffer.",
        "Formats an iCalendar object into a string buffer.",
        "Formats the given calendar object into the given StringBuffer.",
        "Formats the specified calendar object into a string buffer."
      ],
      "output": [
        "public StringBuffer format ( Calendar cal ) { StringBuffer buf = new StringBuffer ( ) ; format ( cal, buf ) ; return buf ; }",
        "public StringBuffer format ( Calendar cal ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < cal. get ( Calendar. DAY_OF_MONTH ) ; i ++ ) { buf. append ( format ( cal. get ( Calendar. DAY_OF_MONTH ) ) ) ; } return buf ; }",
        "public StringBuffer format ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; format ( calendar, buf ) ; return buf ; }",
        "public StringBuffer format ( Calendar cal ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < cal. get ( Calendar. DAY_OF_MONTH ) ; i ++ ) { buf. append ( cal. get ( Calendar. DAY_OF_MONTH ) ) ; } return buf ; }",
        "public StringBuffer format ( Calendar cal ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < cal. get ( Calendar. DAY_OF_MONTH ) ; i ++ ) { buf. append ( cal. get ( Calendar. DAY_OF_MONTH ) ). append ('' ) ; } return buf ; }",
        "public void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { format ( calendar, buf ) ; } }",
        "public StringBuffer format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { return buf ; } return format ( calendar. getTime ( ), buf ) ; }",
        "public StringBuffer format ( Calendar calendar, StringBuffer buf ) { if ( buf == null ) { buf = new StringBuffer ( ) ; } format ( calendar, buf ) ; return buf ; }",
        "public StringBuffer format ( Calendar calendar, StringBuffer buf ) { if ( buf == null ) { buf = new StringBuffer ( ) ; } return format ( calendar, buf ) ; }",
        "public void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null calendar\" ) ; } else { format ( calendar, buf ) ; } }",
        "public void format ( ICalForm form, StringBuffer buf ) { if ( buf. length ( ) > 0 ) { buf. append ('' ) ; } format ( form, buf ) ; }",
        "public StringBuffer format ( ICalendar calendar, StringBuffer buf ) { if ( buf == null ) { buf = new StringBuffer ( ) ; } format ( calendar, buf ) ; return buf ; }",
        "public void format ( ICalendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { format ( calendar, buf ) ; } }",
        "public StringBuffer format ( ICalendar calendar, StringBuffer buf ) { if ( buf == null ) { buf = new StringBuffer ( ) ; } format ( calendar, buf, buf ) ; return buf ; }",
        "public StringBuffer format ( ICalendar calendar, StringBuffer buf ) { if ( buf == null ) { buf = new StringBuffer ( ) ; } formatImpl ( calendar, buf ) ; return buf ; }",
        "public void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { format ( calendar, buf ) ; } }",
        "public void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { buf. append ( calendar. toString ( ) ) ; } }",
        "public void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { format ( calendar, buf ) ; } }",
        "public void format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { buf. append ( \"null\" ) ; } else { buf. append ( calendar. toString ( ) ) ; } }",
        "public StringBuffer format ( Calendar calendar, StringBuffer buf ) { if ( calendar == null ) { return buf ; } return format ( calendar. getTime ( ), buf ) ; }",
        "public StringBuffer format ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; format ( calendar, buf ) ; return buf ; }",
        "public StringBuffer format ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; if ( calendar == null ) { buf. append ( \"null\" ) ; } else { buf. append ( calendar. toString ( ) ) ; } return buf ; }",
        "public StringBuffer format ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; if ( calendar == null ) { buf. append ( \"null calendar\" ) ; } else { buf. append ( calendar. toString ( ) ) ; } return buf ; }",
        "public StringBuffer format ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; format ( calendar, buf ) ; return buf ; }",
        "public StringBuffer format ( Calendar calendar ) { StringBuffer buf = new StringBuffer ( ) ; if ( calendar == null ) { buf. append ( \"null\" ) ; } else { buf. append ( calendar. getID ( ) ) ; } format ( calendar, buf ) ; return buf ; }"
      ]
    },
    "Math_65_src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java_254-255": {
      "loc": "254-255",
      "input": "public double getChiSquare() { <mask> double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; }",
      "target": "public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual * residualsWeights[i]; } return chiSquare; }",
      "function range": "254,5-261,5",
      "raw_output": [
        "public double calculateChiSquare ( double [ ] x, double [ ] y ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "public double calculateChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { sum += data [ i ] * data [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public double responseSum ( ) { double sum = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { sum += data [ i ] * data [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public double responseSum ( ) { double sum = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { sum += data [ i ] * data [ i ] ; } return sum ; }",
        "public double responseSum ( ) { double sum = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { sum += Math. pow ( data [ i ], 2 ) ; } return sum ; }",
        "public doubleChiSquare ( ) { double max = Double. NEGATIVE_INFINITY ; double min = Double. POSITIVE_INFINITY ; for ( int i = 0 ; i < data. length ; i ++ ) { max = Math. max ( max, Math. abs ( data [ i ] ) ) ; min = Math. min ( min, Math. abs ( data [ i ] ) ) ; } return Math. max ( min, Math. abs ( max ) ) ; }",
        "public doubleChiSquare ( ) { double max = Double. NEGATIVE_INFINITY ; double min = Double. POSITIVE_INFINITY ; for ( int i = 0 ; i < data. length ; i ++ ) { max = Math. max ( max, Math. abs ( data [ i ] ) ) ; min = Math. min ( min, Math. abs ( data [ i ] ) ) ; } return Math. max ( max, Math. abs ( min ) ) ; }",
        "public doubleChiSquare ( ) { double max = Double. NEGATIVE_INFINITY ; double min = Double. POSITIVE_INFINITY ; for ( int i = 0 ; i < data. length ; i ++ ) { max = Math. max ( max, Math. abs ( data [ i ] ) ) ; min = Math. min ( min, Math. abs ( data [ i ] ) ) ; } return Math. sqrt ( min ) ; }",
        "public doubleChiSquare ( ) { double max = Double. NEGATIVE_INFINITY ; double min = Double. POSITIVE_INFINITY ; for ( int i = 0 ; i < data. length ; i ++ ) { max = Math. max ( max, Math. abs ( data [ i ] ) ) ; min = Math. min ( min, Math. abs ( data [ i ] ) ) ; } return max - min ; }",
        "public doubleChiSquare ( ) { double max = Double. NEGATIVE_INFINITY ; double min = Double. POSITIVE_INFINITY ; for ( int i = 0 ; i < data. length ; i ++ ) { max = Math. max ( max, Math. abs ( data [ i ] ) ) ; min = Math. min ( min, Math. abs ( data [ i ] ) ) ; } return max / min ; }",
        "public doubleChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < weights. length ; i ++ ) { sum += weights [ i ] * weights [ i ] ; } return sum ; }",
        "public double ChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < weights. length ; i ++ ) { sum += weights [ i ] * weights [ i ] ; } return sum ; }",
        "public doubleChiSquare ( ) { double sum = 0.0 ; for ( int i = 0 ; i < weights. length ; i ++ ) { sum += weights [ i ] * weights [ i ] ; } return sum ; }",
        "public double ChiSquare ( ) { double sum = 0.0 ; for ( int i = 0 ; i < weights. length ; i ++ ) { sum += weights [ i ] * weights [ i ] ; } return sum ; }",
        "public doubleChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < weights. length ; i ++ ) { sum += weights [ i ] * weights [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public double chiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { sum += model [ i ] * model [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public double ChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { sum += model [ i ] * model [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public double chiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < model. size ( ) ; i ++ ) { sum += model. get ( i ). chiSquare ( ) ; } return sum ; }",
        "public double calculateChiSquare ( ) { double square = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { square += model [ i ] * model [ i ] ; } return square ; }",
        "public double chiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { sum += model [ i ] * model [ i ] ; } return sum ; }",
        "public doubleChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < weight. length ; i ++ ) { sum += weight [ i ] * weight [ i ] ; } return sum ; }",
        "public doubleChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < weights. length ; i ++ ) { sum += weights [ i ] * weights [ i ] ; } return sum ; }",
        "public doubleChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < weights. length ; i ++ ) { sum += weights [ i ] * weights [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public doubleChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < weight. length ; i ++ ) { sum += weight [ i ] * weight [ i ] ; } return sum / weight. length ; }",
        "public doubleChiSquare ( ) { double sum = 0.0 ; for ( int i = 0 ; i < weight. length ; i ++ ) { sum += weight [ i ] * weight [ i ] ; } return sum ; }"
      ],
      "mid_translation": [
        "Calculates the Chi - square of the response",
        "Calculates the Chi - square of the residual of the model.",
        "Calculates the Chi - square of the weights.",
        "Calculates the Chi - square of the Chi - square model",
        "Calculates the Chi - square of the Chi weight."
      ],
      "output": [
        "public double getChiSquare ( double [ ] x, double [ ] y ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "public double getChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { sum += data [ i ] * data [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public double getChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { sum += data [ i ] * data [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public double getChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { sum += data [ i ] * data [ i ] ; } return sum ; }",
        "public double getChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { sum += Math. pow ( data [ i ], 2 ) ; } return sum ; }",
        "",
        "",
        "",
        "",
        "",
        "",
        "public double getChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < weights. length ; i ++ ) { sum += weights [ i ] * weights [ i ] ; } return sum ; }",
        "",
        "public double getChiSquare ( ) { double sum = 0.0 ; for ( int i = 0 ; i < weights. length ; i ++ ) { sum += weights [ i ] * weights [ i ] ; } return sum ; }",
        "",
        "public double getChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { sum += model [ i ] * model [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public double getChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { sum += model [ i ] * model [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public double getChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < model. size ( ) ; i ++ ) { sum += model. get ( i ). chiSquare ( ) ; } return sum ; }",
        "public double getChiSquare ( ) { double square = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { square += model [ i ] * model [ i ] ; } return square ; }",
        "public double getChiSquare ( ) { double sum = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { sum += model [ i ] * model [ i ] ; } return sum ; }",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Math_79_src/main/java/org/apache/commons/math/util/MathUtils.java_1624-1625": {
      "loc": "1624-1625",
      "input": "public static double distance(int[] p1, int[] p2) { int sum = 0; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }",
      "target": "public static double distance(int[] p1, int[] p2) { double sum = 0; for (int i = 0; i < p1.length; i++) { final double dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }",
      "function range": "1623,5-1630,5",
      "raw_output": [
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSquared ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distance ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distancePoint ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, x2, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distance ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSquared ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, x2, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x, double y ) { return Math. sqrt ( distanceSq ( x, y ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSquared ( x1, y1, x2, y2 ) ) ; }",
        "public double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distanceSq ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distanceSq ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSqSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( final double x1, final double y1, final double x2, final double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distance ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, x2, y1, x2, y2 ) ) ; }",
        "public static float distance ( float x1, float y1, float x2, float y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distanceSq ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSquared ( x1, y1, x2, y2 ) ) ; }",
        "public double distance ( Point2D p1, Point2D p2 ) { return Math. sqrt ( distanceSq ( p1. x, p1. y, p2. x, p2. y ) ) ; }",
        "public static double distanceSq ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSqSq ( x1, y1, x2, y2 ) ) ; }"
      ],
      "mid_translation": [
        "Calculates the Euclidean distance between two points.",
        "Calculates the Euclidean distance between two points",
        "Computes the Euclidean distance between two points.",
        "Calculates the distance between two points.",
        "Computes the Euclidean distance between two points"
      ],
      "output": [
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSquared ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distance ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distancePoint ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, x2, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distance ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSquared ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, x2, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x, double y ) { return Math. sqrt ( distanceSq ( x, y ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSquared ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSqSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( final double x1, final double y1, final double x2, final double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distance ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, x2, y1, x2, y2 ) ) ; }",
        "public static float distance ( float x1, float y1, float x2, float y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSq ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSquared ( x1, y1, x2, y2 ) ) ; }",
        "public static double distance ( Point2D p1, Point2D p2 ) { return Math. sqrt ( distanceSq ( p1. x, p1. y, p2. x, p2. y ) ) ; }",
        "public static double distance ( double x1, double y1, double x2, double y2 ) { return Math. sqrt ( distanceSqSq ( x1, y1, x2, y2 ) ) ; }"
      ]
    },
    "Math_98_src/java/org/apache/commons/math/linear/BigMatrixImpl.java_991-992": {
      "loc": "991-992",
      "input": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; }",
      "target": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[nRows]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; }",
      "function range": "985,5-1000,5",
      "raw_output": [
        "public double [ ] vector ( double [ ] x ) { double [ ] res = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { res [ i ] = Math. abs ( x [ i ] ) ; } return res ; }",
        "public double [ ] compute ( double [ ] x ) { double [ ] res = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { res [ i ] = Math. abs ( x [ i ] ) ; } return res ; }",
        "public double [ ] compute ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. abs ( x [ i ] ) ; } return ret ; }",
        "public double [ ] vector ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. abs ( x [ i ] ) ; } return ret ; }",
        "public double [ ] vector ( double [ ] x ) { double [ ] res = new double [ x. length ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = Math. abs ( x [ i ] ) ; } return res ; }",
        "public static double [ ] dot ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. dot ( x [ i ], x [ i ] ) ; } return ret ; }",
        "public static double [ ] dot ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = Math. dot ( x [ i ], x [ i ] ) ; } return ret ; }",
        "public static double [ ] dot ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = x [ i ] * x [ i ] ; } return ret ; }",
        "public double [ ] vector ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. abs ( x [ i ] ) ; } return ret ; }",
        "public double [ ] compute ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. abs ( x [ i ] ) ; } return ret ; }",
        "public double [ ] toArray ( ) { double [ ] res = new double [ vector. length ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = vector [ i ] ; } return res ; }",
        "public double [ ] toArray ( ) { double [ ] ret = new double [ vector. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = vector [ i ] ; } return ret ; }",
        "public double [ ] toArray ( ) { double [ ] v = new double [ vector. length ] ; for ( int i = 0 ; i < v. length ; i ++ ) { v [ i ] = vector [ i ] ; } return v ; }",
        "public double [ ] toArray ( ) { double [ ] res = new double [ vector. length ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = Math. abs ( vector [ i ] ) ; } return res ; }",
        "public double [ ] toArray ( ) { double [ ] ret = new double [ vector. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. abs ( vector [ i ] ) ; } return ret ; }",
        "public static double distance ( double [ ] x, double [ ] y ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "public doubleLength ( double [ ] vector ) { doubleLength result = 0 ; for ( int i = 0 ; i < vector. length ; i ++ ) { result += Math. abs ( vector [ i ] ) ; } return result ; }",
        "public doubleLength ( double [ ] vector ) { doubleLength result = 0 ; for ( int i = 0 ; i < vector. length ; i ++ ) { result += vector [ i ] * vector [ i ] ; } return result ; }",
        "public doubleLength ( double [ ] x ) { double length = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { length += x [ i ] ; } return length ; }",
        "public double [ ]op ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = x [ i ] ; } return ret ; }",
        "public doubleLength ( double [ ] vector ) { double length = 0 ; for ( int i = 0 ; i < vector. length ; i ++ ) { length += vector [ i ] ; } return length ; }",
        "public doubleLength ( double [ ] vector ) { doubleLength result = 0 ; for ( int i = 0 ; i < vector. length ; i ++ ) { result += Math. abs ( vector [ i ] ) ; } return result ; }",
        "public doubleLength ( double [ ] vector ) { double length = 0 ; for ( int i = 0 ; i < vector. length ; i ++ ) { length += Math. abs ( vector [ i ] ) ; } return length ; }",
        "public double [ ]op ( double [ ] vector ) { double [ ] ret = new double [ vector. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) ret [ i ] = vector [ i ] ; return ret ; }",
        "public doubleLength ( double [ ] vector ) { doubleLength result = 0 ; for ( int i = 0 ; i < vector. length ; i ++ ) { result += vector [ i ] ; } return result ; }"
      ],
      "mid_translation": [
        "Computes the operate of the vector.",
        "Computes the operate of a vector.",
        "Computes the operate of this vector.",
        "Calculates the operate of a vector.",
        "Calculates the operate of the vector."
      ],
      "output": [
        "public double [ ] operate ( double [ ] x ) { double [ ] res = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { res [ i ] = Math. abs ( x [ i ] ) ; } return res ; }",
        "public double [ ] operate ( double [ ] x ) { double [ ] res = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { res [ i ] = Math. abs ( x [ i ] ) ; } return res ; }",
        "public double [ ] operate ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. abs ( x [ i ] ) ; } return ret ; }",
        "public double [ ] operate ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. abs ( x [ i ] ) ; } return ret ; }",
        "public double [ ] operate ( double [ ] x ) { double [ ] res = new double [ x. length ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = Math. abs ( x [ i ] ) ; } return res ; }",
        "public double [ ] operate ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. dot ( x [ i ], x [ i ] ) ; } return ret ; }",
        "public double [ ] operate ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = Math. dot ( x [ i ], x [ i ] ) ; } return ret ; }",
        "public double [ ] operate ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = x [ i ] * x [ i ] ; } return ret ; }",
        "public double [ ] operate ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. abs ( x [ i ] ) ; } return ret ; }",
        "public double [ ] operate ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. abs ( x [ i ] ) ; } return ret ; }",
        "public double [ ] operate ( ) { double [ ] res = new double [ vector. length ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = vector [ i ] ; } return res ; }",
        "public double [ ] operate ( ) { double [ ] ret = new double [ vector. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = vector [ i ] ; } return ret ; }",
        "public double [ ] operate ( ) { double [ ] v = new double [ vector. length ] ; for ( int i = 0 ; i < v. length ; i ++ ) { v [ i ] = vector [ i ] ; } return v ; }",
        "public double [ ] operate ( ) { double [ ] res = new double [ vector. length ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = Math. abs ( vector [ i ] ) ; } return res ; }",
        "public double [ ] operate ( ) { double [ ] ret = new double [ vector. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. abs ( vector [ i ] ) ; } return ret ; }",
        "public double operate ( double [ ] x, double [ ] y ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "",
        "",
        "",
        "public double [ operate ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = x [ i ] ; } return ret ; }",
        "",
        "",
        "",
        "public double [ operate ( double [ ] vector ) { double [ ] ret = new double [ vector. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) ret [ i ] = vector [ i ] ; return ret ; }",
        ""
      ]
    },
    "Chart_1_/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java_1797-1798": {
      "loc": "1797-1798",
      "input": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index); if (dataset != null) { return result; } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item != null) { result.add(item); } } } } else { for (int i = seriesCount - 1; i >= 0; i--) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item != null) { result.add(item); } } } } return result; }",
      "target": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index); if (dataset == null) { return result; } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item != null) { result.add(item); } } } } else { for (int i = seriesCount - 1; i >= 0; i--) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item != null) { result.add(item); } } } } return result; }",
      "function range": "1790,5-1822,5",
      "raw_output": [
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < data. size ( ) ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ) ; y [ i ] = data. get ( i ) ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] ret = new double [ data. size ( ) ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = data. get ( i ). getLegendItem ( ) ; } return ret ; }",
        "public double [ ] getLegendItems ( ) { double [ ] ret = new double [ data. size ( ) ] ; for ( int i = 0 ; i < data. size ( ) ; i ++ ) { ret [ i ] = data. get ( i ). getLegendItem ( ) ; } return ret ; }",
        "public double [ ] getLegendItems ( double [ ] x, double [ ] y ) { double [ ] series = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { series [ i ] = x [ i ] ; } for ( int i = 0 ; i < y. length ; i ++ ) { series [ i ] = y [ i ] ; } return series ; }",
        "public double [ ] getLegendItems ( double [ ] x, double [ ] y ) { double [ ] xData = new double [ x. length ] ; double [ ] yData = new double [ y. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { xData [ i ] = x [ i ] ; yData [ i ] = y [ i ] ; } return getLegend ( xData, yData ) ; }",
        "public double [ ] getLegendItems ( double [ ] x, double [ ] y ) { double [ ] xData = new double [ x. length ] ; double [ ] yData = new double [ y. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { xData [ i ] = x [ i ] ; yData [ i ] = y [ i ] ; } return getLegendItems ( xData ) ; }",
        "public double [ ] getLegendItems ( double [ ] x, double [ ] y ) { double [ ] data = new double [ x. length + y. length ] ; System. arraycopy ( x, 0, data, 0, x. length ) ; System. arraycopy ( y, 0, data, x. length, y. length ) ; return data ; }",
        "public double [ ] getLegendItems ( double [ ] x, double [ ] y ) { double [ ] series = new double [ x. length + y. length ] ; for ( int i = 0 ; i < series. length ; i ++ ) { series [ i ] = x [ i ] + y [ i ] ; } return series ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < data. size ( ) ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). x ; } for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ plot. getWidth ( ) ] ; double [ ] y = new double [ plot. getHeight ( ) ] ; for ( int i = 0 ; i < plot. getWidth ( ) ; i ++ ) { x [ i ] = plot. getX ( i ) ; y [ i ] = plot. getY ( i ) ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ plot. getWidth ( ) ] ; double [ ] y = new double [ plot. getHeight ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = plot. getX ( i ) ; y [ i ] = plot. getY ( i ) ; } return x ; }",
        "public List < T > getSlideItems ( ) { final List < T > items = new ArrayList < T > ( ) ; for ( final T item : this. items ) { items. add ( item ) ; } return items ; }",
        "public List < T > getSeries ( ) { if ( series == null ) { return Collections. emptyList ( ) ; } return series. stream ( ). map ( this :: getSeries ). collect ( Collectors. toList ( ) ) ; }",
        "public List < T > getSeries ( ) { if ( series == null ) { return Collections. emptyList ( ) ; } return series. stream ( ). map ( T :: getData ). collect ( Collectors. toList ( ) ) ; }",
        "public List < T > getSeries ( ) { if ( series == null ) { return Collections. emptyList ( ) ; } return series. stream ( ). map ( T :: getSeries ). collect ( Collectors. toList ( ) ) ; }",
        "public List < T > getSlideItems ( ) { final List < T > items = new ArrayList < T > ( ) ; for ( final T item : get ( ) ) { items. add ( item ) ; } return items ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < data. size ( ) ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). x ; } for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). getLegend ( ) ; y [ i ] = data. get ( i ). getLegend ( ) ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ) ; y [ i ] = data. get ( i ) ; } return x ; }"
      ],
      "mid_translation": [
        "Gets the legend items for this plot.",
        "Gets the legend items from the plot.",
        "Gets the legend items for the plot.",
        "Gets the legend items.",
        "Gets the legend items from this plot."
      ],
      "output": [
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < data. size ( ) ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ) ; y [ i ] = data. get ( i ) ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] ret = new double [ data. size ( ) ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = data. get ( i ). getLegendItem ( ) ; } return ret ; }",
        "public double [ ] getLegendItems ( ) { double [ ] ret = new double [ data. size ( ) ] ; for ( int i = 0 ; i < data. size ( ) ; i ++ ) { ret [ i ] = data. get ( i ). getLegendItem ( ) ; } return ret ; }",
        "public double [ ] getLegendItems ( double [ ] x, double [ ] y ) { double [ ] series = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { series [ i ] = x [ i ] ; } for ( int i = 0 ; i < y. length ; i ++ ) { series [ i ] = y [ i ] ; } return series ; }",
        "public double [ ] getLegendItems ( double [ ] x, double [ ] y ) { double [ ] xData = new double [ x. length ] ; double [ ] yData = new double [ y. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { xData [ i ] = x [ i ] ; yData [ i ] = y [ i ] ; } return getLegend ( xData, yData ) ; }",
        "public double [ ] getLegendItems ( double [ ] x, double [ ] y ) { double [ ] xData = new double [ x. length ] ; double [ ] yData = new double [ y. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { xData [ i ] = x [ i ] ; yData [ i ] = y [ i ] ; } return getLegendItems ( xData ) ; }",
        "public double [ ] getLegendItems ( double [ ] x, double [ ] y ) { double [ ] data = new double [ x. length + y. length ] ; System. arraycopy ( x, 0, data, 0, x. length ) ; System. arraycopy ( y, 0, data, x. length, y. length ) ; return data ; }",
        "public double [ ] getLegendItems ( double [ ] x, double [ ] y ) { double [ ] series = new double [ x. length + y. length ] ; for ( int i = 0 ; i < series. length ; i ++ ) { series [ i ] = x [ i ] + y [ i ] ; } return series ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < data. size ( ) ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). x ; } for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ plot. getWidth ( ) ] ; double [ ] y = new double [ plot. getHeight ( ) ] ; for ( int i = 0 ; i < plot. getWidth ( ) ; i ++ ) { x [ i ] = plot. getX ( i ) ; y [ i ] = plot. getY ( i ) ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ plot. getWidth ( ) ] ; double [ ] y = new double [ plot. getHeight ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = plot. getX ( i ) ; y [ i ] = plot. getY ( i ) ; } return x ; }",
        "public List < T > getLegendItems ( ) { final List < T > items = new ArrayList < T > ( ) ; for ( final T item : this. items ) { items. add ( item ) ; } return items ; }",
        "public List < T > getLegendItems ( ) { if ( series == null ) { return Collections. emptyList ( ) ; } return series. stream ( ). map ( this :: getSeries ). collect ( Collectors. toList ( ) ) ; }",
        "public List < T > getLegendItems ( ) { if ( series == null ) { return Collections. emptyList ( ) ; } return series. stream ( ). map ( T :: getData ). collect ( Collectors. toList ( ) ) ; }",
        "public List < T > getLegendItems ( ) { if ( series == null ) { return Collections. emptyList ( ) ; } return series. stream ( ). map ( T :: getSeries ). collect ( Collectors. toList ( ) ) ; }",
        "public List < T > getLegendItems ( ) { final List < T > items = new ArrayList < T > ( ) ; for ( final T item : get ( ) ) { items. add ( item ) ; } return items ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < data. size ( ) ; i ++ ) { x [ i ] = data. get ( i ). x ; y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). x ; } for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = data. get ( i ). y ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ). getLegend ( ) ; y [ i ] = data. get ( i ). getLegend ( ) ; } return x ; }",
        "public double [ ] getLegendItems ( ) { double [ ] x = new double [ data. size ( ) ] ; double [ ] y = new double [ data. size ( ) ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data. get ( i ) ; y [ i ] = data. get ( i ) ; } return x ; }"
      ]
    },
    "Chart_3_/source/org/jfree/data/time/TimeSeries.java_1057-1058": {
      "loc": "1057-1058",
      "input": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy; }",
      "target": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone(); copy.minY = Double.NaN; copy.maxY = Double.NaN; copy.data = new java.util.ArrayList(); if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy; }",
      "function range": "1048,5-1072,5",
      "raw_output": [
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series = copy. series ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. x = x ; copy. y = y ; copy. z = z ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start. copy ( ) ; copy. end = end. copy ( ) ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = this. start ; copy. end = this. end ; copy. series = copy. series ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. series. clear ( ) ; copy. series. addAll ( series ) ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series = series ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series. length = series. length ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. seriesId = seriesId ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. name = this. name ; copy. start = this. start ; copy. end = this. end ; copy. duration = this. duration ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. name = this. name ; copy. start = this. start ; copy. end = this. end ; copy. duration = this. duration ; copy. zone = this. zone ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. name = this. name ; copy. start = this. start ; copy. end = this. end ; copy. duration = this. duration ; copy. unit = this. unit ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. name = this. name ; copy. startTime = this. startTime ; copy. endTime = this. endTime ; copy. duration = this. duration ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. name = this. name ; copy. start = this. start ; copy. end = this. end ; return copy ; }",
        "public TimeSeries clone ( ) { TimeSeries clone = new TimeSeries ( ) ; clone. series = this. series. clone ( ) ; return clone ; }",
        "public TimeSeries clone ( ) { TimeSeries clone = new TimeSeries ( ) ; clone. start = start. clone ( ) ; clone. end = end. clone ( ) ; return clone ; }",
        "public TimeSeries clone ( ) { TimeSeries clone = new TimeSeries ( ) ; clone. series = new ArrayList < TimeSeries > ( series. size ( ) ) ; clone. series. addAll ( series ) ; return clone ; }",
        "public TimeSeries clone ( ) { TimeSeries clone = new TimeSeries ( ) ; clone. start = start ; clone. end = end ; return clone ; }",
        "public TimeSeries clone ( ) { TimeSeries clone = new TimeSeries ( ) ; clone. x = x ; clone. y = y ; clone. z = z ; return clone ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. seriesId = seriesId ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. zone = zone ; copy. seriesId = seriesId ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. duration = duration ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. zone = zone ; return copy ; }"
      ],
      "mid_translation": [
        "Creates a copy of the time series.",
        "Creates a copy of this time series.",
        "Creates a copy of the TimeSeries object.",
        "Creates a clone of this time series.",
        "Creates a copy of this series."
      ],
      "output": [
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series = copy. series ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. x = x ; copy. y = y ; copy. z = z ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start. copy ( ) ; copy. end = end. copy ( ) ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = this. start ; copy. end = this. end ; copy. series = copy. series ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. series. clear ( ) ; copy. series. addAll ( series ) ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series = series ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series. length = series. length ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. seriesId = seriesId ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. name = this. name ; copy. start = this. start ; copy. end = this. end ; copy. duration = this. duration ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. name = this. name ; copy. start = this. start ; copy. end = this. end ; copy. duration = this. duration ; copy. zone = this. zone ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. name = this. name ; copy. start = this. start ; copy. end = this. end ; copy. duration = this. duration ; copy. unit = this. unit ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. name = this. name ; copy. startTime = this. startTime ; copy. endTime = this. endTime ; copy. duration = this. duration ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. name = this. name ; copy. start = this. start ; copy. end = this. end ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries clone = new TimeSeries ( ) ; clone. series = this. series. clone ( ) ; return clone ; }",
        "public TimeSeries createCopy ( ) { TimeSeries clone = new TimeSeries ( ) ; clone. start = start. clone ( ) ; clone. end = end. clone ( ) ; return clone ; }",
        "public TimeSeries createCopy ( ) { TimeSeries clone = new TimeSeries ( ) ; clone. series = new ArrayList < TimeSeries > ( series. size ( ) ) ; clone. series. addAll ( series ) ; return clone ; }",
        "public TimeSeries createCopy ( ) { TimeSeries clone = new TimeSeries ( ) ; clone. start = start ; clone. end = end ; return clone ; }",
        "public TimeSeries createCopy ( ) { TimeSeries clone = new TimeSeries ( ) ; clone. x = x ; clone. y = y ; clone. z = z ; return clone ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. seriesId = seriesId ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. zone = zone ; copy. seriesId = seriesId ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. duration = duration ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. zone = zone ; return copy ; }"
      ]
    },
    "Chart_6_/source/org/jfree/chart/util/ShapeList.java_111-112": {
      "loc": "111-112",
      "input": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; } return super.equals(obj); }",
      "target": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; } ShapeList that = (ShapeList) obj; int listSize = size(); for (int i = 0; i < listSize; i++) { if (!ShapeUtilities.equal((Shape) get(i), (Shape) that.get(i))) { return false; } } return true; }",
      "function range": "103,5-113,5",
      "raw_output": [
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ) == obj. getClass ( ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return getClass ( ). equals ( object. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return object. getClass ( ). equals ( getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ) == obj. getClass ( ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return getClass ( ). equals ( object. getClass ( ) ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return super. equals ( object ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return super. equals ( object ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return object. getClass ( ). equals ( getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) == obj. getClass ( ) ) { return super. equals ( obj ) ; } return obj. getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) return false ; if ( getClass ( )!= obj. getClass ( ) ) return false ; return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) return false ; if ( getClass ( )!= obj. getClass ( ) ) return false ; if ( obj == null ) return false ; if ( getClass ( )!= obj. getClass ( ) ) return false ; return super. equals ( obj ) ; }",
        "public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null ) return false ; if ( getClass ( )!= o. getClass ( ) ) return false ; if ( getClass ( )!= o. getClass ( ) ) return false ; return super. equals ( o ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( this. getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }"
      ],
      "mid_translation": [
        "Return true if the given object is the same as this object.",
        "Return true if the specified object is equal to this object.",
        "Return true if the given object is equal to this object.",
        "Override equals to check if this object is equal to another object.",
        "Return true if the specified object equals this object."
      ],
      "output": [
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ) == obj. getClass ( ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return getClass ( ). equals ( object. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return object. getClass ( ). equals ( getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ) == obj. getClass ( ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return getClass ( ). equals ( object. getClass ( ) ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return super. equals ( object ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return super. equals ( object ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object object ) { if ( object == null ) { return false ; } if (! getClass ( ). equals ( object. getClass ( ) ) ) { return false ; } return object. getClass ( ). equals ( getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) == obj. getClass ( ) ) { return super. equals ( obj ) ; } return obj. getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) return false ; if ( getClass ( )!= obj. getClass ( ) ) return false ; return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) return false ; if ( getClass ( )!= obj. getClass ( ) ) return false ; if ( obj == null ) return false ; if ( getClass ( )!= obj. getClass ( ) ) return false ; return super. equals ( obj ) ; }",
        "public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null ) return false ; if ( getClass ( )!= o. getClass ( ) ) return false ; if ( getClass ( )!= o. getClass ( ) ) return false ; return super. equals ( o ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( this. getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }"
      ]
    },
    "Chart_8_/source/org/jfree/data/time/Week.java_175-176": {
      "loc": "175-176",
      "input": "public Week(Date time, TimeZone zone) { this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()); }",
      "target": "public Week(Date time, TimeZone zone) { this(time, zone, Locale.getDefault()); }",
      "function range": "173,5-176,5",
      "raw_output": [
        "public static Week of ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public static Week of ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getTimeZone ( \"GMT\" ) ) ; }",
        "public static Week of ( final int year, final int month, final int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public static Week of ( final int year, final int month, final int dayOfMonth ) { return new Week ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public static Week of ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, null, null ) ; }",
        "public static Week of ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getTimeZone ( \"GMT\" ) ) ; }",
        "public static Week of ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, null, null ) ; }",
        "public static Week of ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public static Week of ( final int year, final int month, final int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public static Week of ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getTimeZone ( \"UTC\" ) ) ; }",
        "public static Week of ( final long time, final TimeZone zone ) { return of ( time, zone, null ) ; }",
        "public static Week of ( final long time, final TimeZone timeZone ) { return of ( time, timeZone, null ) ; }",
        "public static Week of ( final long time, final DateTimeZone zone ) { return of ( time, zone, null ) ; }",
        "public static Week of ( final long time, final TimeZone zone ) { return new Week ( time, zone, null ) ; }",
        "public static Week of ( long time, TimeZone zone ) { return of ( time, zone, null ) ; }",
        "public static Week of ( final int year, final int month, final int day ) { return of ( year, month, day, TimeZone. getDefault ( ) ) ; }",
        "public static Week of ( final int year, final int month, final int dayOfMonth ) { return of ( year, month, dayOfMonth, null, null ) ; }",
        "public static Week of ( final int year, final int month, final int dayOfMonth ) { return new Week ( year, month, dayOfMonth, null ) ; }",
        "public static Week of ( final long time ) { return new Week ( time, TimeZone. getTimeZone ( \"GMT\" ) ) ; }",
        "public static Week of ( final int year, final int month, final int day ) { return new Week ( year, month, day, 0, 0 ) ; }",
        "public static Week of ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public static Week of ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getTimeZone ( \"GMT\" ) ) ; }",
        "public static Week of ( final int year, final int month, final int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public static Week of ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, null, null ) ; }",
        "public static Week of ( final int year, final int month, final int dayOfMonth ) { return of ( year, month, dayOfMonth, null, null ) ; }"
      ],
      "mid_translation": [
        "Creates a new Week object with default time and time zone.",
        "Creates a Week object with default time and time zone.",
        "Creates a Week object with default time and time and time zone.",
        "Creates a new Week object with the default time and time zone.",
        "Creates a Week object with the default time and time zone."
      ],
      "output": [
        "public Week Week ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public Week Week ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getTimeZone ( \"GMT\" ) ) ; }",
        "public Week Week ( final int year, final int month, final int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public Week Week ( final int year, final int month, final int dayOfMonth ) { return new Week ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public Week Week ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, null, null ) ; }",
        "public Week Week ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getTimeZone ( \"GMT\" ) ) ; }",
        "public Week Week ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, null, null ) ; }",
        "public Week Week ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public Week Week ( final int year, final int month, final int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public Week Week ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getTimeZone ( \"UTC\" ) ) ; }",
        "public Week Week ( final long time, final TimeZone zone ) { return of ( time, zone, null ) ; }",
        "public Week Week ( final long time, final TimeZone timeZone ) { return of ( time, timeZone, null ) ; }",
        "public Week Week ( final long time, final DateTimeZone zone ) { return of ( time, zone, null ) ; }",
        "public Week Week ( final long time, final TimeZone zone ) { return new Week ( time, zone, null ) ; }",
        "public Week Week ( long time, TimeZone zone ) { return of ( time, zone, null ) ; }",
        "public Week Week ( final int year, final int month, final int day ) { return of ( year, month, day, TimeZone. getDefault ( ) ) ; }",
        "public Week Week ( final int year, final int month, final int dayOfMonth ) { return of ( year, month, dayOfMonth, null, null ) ; }",
        "public Week Week ( final int year, final int month, final int dayOfMonth ) { return new Week ( year, month, dayOfMonth, null ) ; }",
        "public Week Week ( final long time ) { return new Week ( time, TimeZone. getTimeZone ( \"GMT\" ) ) ; }",
        "public Week Week ( final int year, final int month, final int day ) { return new Week ( year, month, day, 0, 0 ) ; }",
        "public Week Week ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public Week Week ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getTimeZone ( \"GMT\" ) ) ; }",
        "public Week Week ( final int year, final int month, final int dayOfMonth ) { return of ( year, month, dayOfMonth, TimeZone. getDefault ( ) ) ; }",
        "public Week Week ( int year, int month, int dayOfMonth ) { return of ( year, month, dayOfMonth, null, null ) ; }",
        "public Week Week ( final int year, final int month, final int dayOfMonth ) { return of ( year, month, dayOfMonth, null, null ) ; }"
      ]
    },
    "Chart_9_/source/org/jfree/data/time/TimeSeries.java_944-945": {
      "loc": "944-945",
      "input": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null 'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; } if (endIndex < 0) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); return copy; } else { return createCopy(startIndex, endIndex); } }",
      "target": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null 'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; } if ((endIndex < 0) || (endIndex < startIndex)) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); return copy; } else { return createCopy(startIndex, endIndex); } }",
      "function range": "918,5-956,5",
      "raw_output": [
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. series. clear ( ) ; copy. series. addAll ( series ) ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series = series ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series. length = series. length ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. seriesId = seriesId ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series = copy. series ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. x = x ; copy. y = y ; copy. z = z ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start. copy ( ) ; copy. end = end. copy ( ) ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = this. start ; copy. end = this. end ; copy. series = copy. series ; return copy ; }",
        "public TimeSeries copy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; return copy ; }",
        "public TimeSeries copy ( TimeSeries series ) { TimeSeries copy = new TimeSeries ( ) ; copy. series. setSeries ( series ) ; return copy ; }",
        "public TimeSeries copy ( TimeSeries series ) { if ( series == null ) { return null ; } TimeSeries copy = new TimeSeries ( ) ; copy. series. setSeries ( series ) ; return copy ; }",
        "public TimeSeries copy ( TimeSeries series ) { if ( series == null ) { throw new IllegalArgumentException ( \"Series cannot be null\" ) ; } if ( series. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( ) ; copy. series. copy ( series ) ; return copy ; }",
        "public TimeSeries copy ( TimeSeries series ) { if ( series == null ) { throw new IllegalArgumentException ( \"Series cannot be null\" ) ; } TimeSeries copy = new TimeSeries ( ) ; copy. series. setSeries ( series ) ; return copy ; }",
        "public TimeSeries copy ( TimeSeries series ) { if ( series == null ) { throw new IllegalArgumentException ( \"Series cannot be null\" ) ; } if ( this. series == null ) { return new TimeSeries ( ) ; } return new TimeSeries ( this. series. copy ( series. series ) ) ; }",
        "public TimeSeries copy ( TimeSeries other ) { if ( other == null ) { return null ; } TimeSeries copy = new TimeSeries ( ) ; copy. data. putAll ( other. data ) ; return copy ; }",
        "public TimeSeries copy ( TimeSeries other ) { if ( other == null ) { return null ; } TimeSeries copy = new TimeSeries ( ) ; copy. data. addAll ( other. data ) ; return copy ; }",
        "public TimeSeries copy ( TimeSeries other ) { if ( other == null ) { throw new IllegalArgumentException ( ) ; } TimeSeries copy = new TimeSeries ( ) ; copy. data. addAll ( other. data ) ; return copy ; }",
        "public TimeSeries copy ( TimeSeries other ) { if ( other == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( other. isEmpty ( ) ) { return this ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } return new TimeSeries ( other. copy ( ) ) ; }",
        "public TimeSeries copy ( TimeSeries other ) { if ( other == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( other. isEmpty ( ) ) { return this ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( this ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( other ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( this ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( other ) ; } return new TimeSeries ( this, other. copy ( ) ) ; }",
        "public TimeSeries copy ( TimeSeries timeSeries ) { if ( timeSeries == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( timeSeries. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( timeSeries. size ( ) ) ; for ( int i = 0 ; i < timeSeries. size ( ) ; i ++ ) { copy. add ( timeSeries. get ( i ) ) ; } return copy ; }",
        "public TimeSeries copy ( TimeSeries timeSeries ) { if ( timeSeries == null ) { throw new IllegalArgumentException ( \"timeSeries cannot be null\" ) ; } if ( timeSeries. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( timeSeries. size ( ) ) ; for ( int i = 0 ; i < timeSeries. size ( ) ; i ++ ) { copy. add ( timeSeries. get ( i ) ) ; } return copy ; }",
        "public TimeSeries copy ( TimeSeries timeSeries ) { if ( timeSeries == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( timeSeries. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( timeSeries ) ; for ( int i = 0 ; i < timeSeries. size ( ) ; i ++ ) { copy. add ( timeSeries. get ( i ) ) ; } return copy ; }",
        "public TimeSeries copy ( TimeSeries timeSeries ) { if ( timeSeries == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( timeSeries. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( timeSeries. size ( ) ) ; for ( int i = 0 ; i < timeSeries. size ( ) ; i ++ ) { copy. timeSeries. add ( timeSeries. get ( i ) ) ; } return copy ; }",
        "public TimeSeries copy ( TimeSeries timeSeries ) { if ( timeSeries == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( timeSeries. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( timeSeries. size ( ) ) ; for ( int i = 0 ; i < timeSeries. size ( ) ; i ++ ) { copy. addSeries ( timeSeries. get ( i ) ) ; } return copy ; }"
      ],
      "mid_translation": [
        "Creates a copy of this time series.",
        "Creates a copy of the time series.",
        "Creates a copy of this time series by copying the contents of the specified series.",
        "Creates a copy of this time series by copying the contents of another time series.",
        "Creates a copy of this time series by copying the contents of the specified time series."
      ],
      "output": [
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. series. clear ( ) ; copy. series. addAll ( series ) ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series = series ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series. length = series. length ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. seriesId = seriesId ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; copy. series = copy. series ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. x = x ; copy. y = y ; copy. z = z ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start. copy ( ) ; copy. end = end. copy ( ) ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = this. start ; copy. end = this. end ; copy. series = copy. series ; return copy ; }",
        "public TimeSeries createCopy ( ) { TimeSeries copy = new TimeSeries ( ) ; copy. start = start ; copy. end = end ; return copy ; }",
        "public TimeSeries createCopy ( TimeSeries series ) { TimeSeries copy = new TimeSeries ( ) ; copy. series. setSeries ( series ) ; return copy ; }",
        "public TimeSeries createCopy ( TimeSeries series ) { if ( series == null ) { return null ; } TimeSeries copy = new TimeSeries ( ) ; copy. series. setSeries ( series ) ; return copy ; }",
        "public TimeSeries createCopy ( TimeSeries series ) { if ( series == null ) { throw new IllegalArgumentException ( \"Series cannot be null\" ) ; } if ( series. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( ) ; copy. series. copy ( series ) ; return copy ; }",
        "public TimeSeries createCopy ( TimeSeries series ) { if ( series == null ) { throw new IllegalArgumentException ( \"Series cannot be null\" ) ; } TimeSeries copy = new TimeSeries ( ) ; copy. series. setSeries ( series ) ; return copy ; }",
        "public TimeSeries createCopy ( TimeSeries series ) { if ( series == null ) { throw new IllegalArgumentException ( \"Series cannot be null\" ) ; } if ( this. series == null ) { return new TimeSeries ( ) ; } return new TimeSeries ( this. series. copy ( series. series ) ) ; }",
        "public TimeSeries createCopy ( TimeSeries other ) { if ( other == null ) { return null ; } TimeSeries copy = new TimeSeries ( ) ; copy. data. putAll ( other. data ) ; return copy ; }",
        "public TimeSeries createCopy ( TimeSeries other ) { if ( other == null ) { return null ; } TimeSeries copy = new TimeSeries ( ) ; copy. data. addAll ( other. data ) ; return copy ; }",
        "public TimeSeries createCopy ( TimeSeries other ) { if ( other == null ) { throw new IllegalArgumentException ( ) ; } TimeSeries copy = new TimeSeries ( ) ; copy. data. addAll ( other. data ) ; return copy ; }",
        "public TimeSeries createCopy ( TimeSeries other ) { if ( other == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( other. isEmpty ( ) ) { return this ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( ) ; } return new TimeSeries ( other. copy ( ) ) ; }",
        "public TimeSeries createCopy ( TimeSeries other ) { if ( other == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( other. isEmpty ( ) ) { return this ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( this ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( other ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( this ) ; } if ( other. isEmpty ( ) ) { return new TimeSeries ( other ) ; } return new TimeSeries ( this, other. copy ( ) ) ; }",
        "public TimeSeries createCopy ( TimeSeries timeSeries ) { if ( timeSeries == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( timeSeries. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( timeSeries. size ( ) ) ; for ( int i = 0 ; i < timeSeries. size ( ) ; i ++ ) { copy. add ( timeSeries. get ( i ) ) ; } return copy ; }",
        "public TimeSeries createCopy ( TimeSeries timeSeries ) { if ( timeSeries == null ) { throw new IllegalArgumentException ( \"timeSeries cannot be null\" ) ; } if ( timeSeries. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( timeSeries. size ( ) ) ; for ( int i = 0 ; i < timeSeries. size ( ) ; i ++ ) { copy. add ( timeSeries. get ( i ) ) ; } return copy ; }",
        "public TimeSeries createCopy ( TimeSeries timeSeries ) { if ( timeSeries == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( timeSeries. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( timeSeries ) ; for ( int i = 0 ; i < timeSeries. size ( ) ; i ++ ) { copy. add ( timeSeries. get ( i ) ) ; } return copy ; }",
        "public TimeSeries createCopy ( TimeSeries timeSeries ) { if ( timeSeries == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( timeSeries. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( timeSeries. size ( ) ) ; for ( int i = 0 ; i < timeSeries. size ( ) ; i ++ ) { copy. timeSeries. add ( timeSeries. get ( i ) ) ; } return copy ; }",
        "public TimeSeries createCopy ( TimeSeries timeSeries ) { if ( timeSeries == null ) { throw new IllegalArgumentException ( \"TimeSeries cannot be null\" ) ; } if ( timeSeries. size ( ) == 0 ) { return this ; } TimeSeries copy = new TimeSeries ( timeSeries. size ( ) ) ; for ( int i = 0 ; i < timeSeries. size ( ) ; i ++ ) { copy. addSeries ( timeSeries. get ( i ) ) ; } return copy ; }"
      ]
    },
    "Chart_10_/source/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java_65-66": {
      "loc": "65-66",
      "input": "public String generateToolTipFragment(String toolTipText) { return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\"; }",
      "target": "public String generateToolTipFragment(String toolTipText) { return \" title=\\\"\" + ImageMapUtilities.htmlEscape(toolTipText) + \"\\\" alt=\\\"\\\"\"; }",
      "function range": "64,5-67,5",
      "raw_output": [
        "private void generate tipFragment ( ) { if (! TextUtils. isEmpty ( tipText ) ) { tipText = tipText. replace ('','' ). replace ('','' ). replace ('','' ). replace ('','' ). replace ('','' ) ; } }",
        "private void show tipFragment ( ) { if ( tipFragment == null ) { tipFragment = new TextView ( getContext ( ) ) ; tipFragment. setText ( R. string. tip ) ; tipFragment. setOnClickListener ( new View. OnClickListener ( ) { @ Override public void onClick ( View v ) { show tipFragment ( ) ; } } ) ; } }",
        "private void show tipFragment ( ) { if ( tipFragment == null ) { tipFragment = new TextView ( getContext ( ) ) ; tipFragment. setText ( R. string. tip ) ; tipFragment. setOnClickListener ( new View. OnClickListener ( ) { @ Override public void onClick ( View v ) { show tip ( ) ; } } ) ; } }",
        "private void generate tipFragment ( ) { if (! TextUtils. isEmpty ( tipText ) ) { tipText = tipText. replace ('','' ). replace ('','' ). replace ('','' ). replace ('','' ) ; } }",
        "private void show tipFragment ( ) { if ( tipFragment == null ) { tipFragment = new TextView ( getContext ( ) ) ; tipFragment. setText ( \"\" ) ; tipFragment. setOnClickListener ( new View. OnClickListener ( ) { @ Override public void onClick ( View v ) { show tipFragment ( ) ; } } ) ; } }",
        "@ SuppressWarnings ( \"deprecation\" ) public static String getToolTipFragment ( String toolTipText ) { if ( toolTipText == null ) { return null ; } if ( toolTipText. length ( ) == 0 ) { return null ; } return toolTipText. substring ( 0, toolTipText. length ( ) - 1 ) ; }",
        "@ SuppressWarnings ( \"deprecation\" ) public static String getToolTipFragment ( String toolTipText ) { if ( toolTipText == null ) { return null ; } if ( toolTipText. length ( ) == 0 ) { return \"\" ; } return toolTipText. substring ( 0, toolTipText. length ( ) - 1 ) ; }",
        "@ SuppressWarnings ( \"deprecation\" ) public static String getToolTipFragment ( String toolTip ) { if ( toolTip == null || toolTip. length ( ) == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; builder. append ( toolTip ) ; return builder. toString ( ) ; }",
        "@ SuppressWarnings ( \"deprecation\" ) public static String getToolTipFragment ( String toolTip ) { if ( toolTip == null || toolTip. length ( ) == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; builder. append ( toolTip ). append ( \"\\n\" ) ; return builder. toString ( ) ; }",
        "@ SuppressWarnings ( \"deprecation\" ) public static String getToolTipFragment ( String toolTipText ) { if ( toolTipText == null ) { return null ; } if ( toolTipText. length ( ) == 0 ) { return null ; } return toolTipText. substring ( 0, toolTipText. length ( ) - 2 ) ; }",
        "@ SuppressWarnings ( \"static-method\" ) protected void generate tipFragment ( ) { if ( tool tipFragment == null ) { tool tipFragment = new Tool tipFragment ( ) ; } tool tipFragment. show ( ) ; }",
        "@ SuppressWarnings ( \"static-method\" ) protected void generate tipFragment ( ) { if ( tool tipFragment == null ) { tool tipFragment = new tool tipFragment ( ) ; } tool tipFragment. show ( ) ; }",
        "@ SuppressWarnings ( \"static-method\" ) protected void generate tipFragment ( ) { if ( tool tip!= null ) { tool tip. show ( ) ; } }",
        "@ SuppressWarnings ( \"static-method\" ) protected void generate tipFragment ( ) { if ( tool tip == null ) { tool tip = new DefaultTool tip ( ) ; } tool tip. show ( ) ; }",
        "@ SuppressWarnings ( \"static-method\" ) protected void generate tipFragment ( ) { if ( tool tip == null ) { tool tip = new Tool tip ( ) ; } tool tip. show ( ) ; }",
        "@ SuppressWarnings ( \"deprecation\" ) @ Override protected View createView ( ) { View view = super. createView ( ) ; if ( tool tip!= null ) { view. addView ( tool tip ) ; tool tip = null ; } return view ; }",
        "@ SuppressWarnings ( \"deprecation\" ) @ Override protected Fragment createFragment ( ) { Fragment fragment = super. createFragment ( ) ; if ( tool tip!= null ) { tool tip. show ( fragment ) ; } return fragment ; }",
        "@ SuppressWarnings ( \"deprecation\" ) @ Override protected View createView ( ) { View view = super. createView ( ) ; if ( tool tip!= null ) { view. addView ( tool tip ) ; tool tip. setVisibility ( View. VISIBLE ) ; } return view ; }",
        "@ SuppressWarnings ( \"deprecation\" ) @ Override protected View createView ( ) { View view = super. createView ( ) ; if ( tool tip!= null ) { view. addView ( tool tip ) ; tool tip. setVisibility ( View. GONE ) ; } return view ; }",
        "@ SuppressWarnings ( \"deprecation\" ) @ Override protected View createView ( ) { View view = super. createView ( ) ; if ( tool tip!= null ) { view. addView ( tool tip ) ; } return view ; }",
        "public String getToolTipFragment ( ) { if ( mToolTipFragment == null ) { mToolTipFragment = createToolTipFragment ( ) ; } return mToolTipFragment ; }",
        "public String get toolTipFragment ( ) { if ( toolTipFragment == null ) { toolTipFragment = getClass ( ). getSimpleName ( ) ; } return toolTipFragment ; }",
        "public String get toolTipFragment ( ) { if ( toolTipFragment == null ) { toolTipFragment = getClass ( ). getSimpleName ( ) ; } return toolTipFragment. replace ('','' ) ; }",
        "public String get toolTipFragment ( ) { if ( toolTipFragment == null ) { toolTipFragment = getClass ( ). getName ( ) ; } return toolTipFragment ; }",
        "public String get toolTipFragment ( ) { if ( toolTipFragment == null ) { toolTipFragment = getClass ( ). getName ( ) + \".\" + getClass ( ). getName ( ) ; } return toolTipFragment ; }"
      ],
      "mid_translation": [
        "Generate tool tip fragment.",
        "Returns a string that represents a tool tip fragment.",
        "Generate the tool tip fragment.",
        "Returns the tool tip fragment.",
        "Returns a string that represents a toolTipFragment."
      ],
      "output": [
        "public void generate generateToolTipFragment ( ) { if (! TextUtils. isEmpty ( tipText ) ) { tipText = tipText. replace ('','' ). replace ('','' ). replace ('','' ). replace ('','' ). replace ('','' ) ; } }",
        "public void generateToolTipFragment ( View v ) { show tipFragment ( ) ; } } ) ; } }",
        "public void generateToolTipFragment ( View v ) { show tip ( ) ; } } ) ; } }",
        "public void generate generateToolTipFragment ( ) { if (! TextUtils. isEmpty ( tipText ) ) { tipText = tipText. replace ('','' ). replace ('','' ). replace ('','' ). replace ('','' ) ; } }",
        "public void generateToolTipFragment ( View v ) { show tipFragment ( ) ; } } ) ; } }",
        "public String generateToolTipFragment ( String toolTipText ) { if ( toolTipText == null ) { return null ; } if ( toolTipText. length ( ) == 0 ) { return null ; } return toolTipText. substring ( 0, toolTipText. length ( ) - 1 ) ; }",
        "public String generateToolTipFragment ( String toolTipText ) { if ( toolTipText == null ) { return null ; } if ( toolTipText. length ( ) == 0 ) { return \"\" ; } return toolTipText. substring ( 0, toolTipText. length ( ) - 1 ) ; }",
        "public String generateToolTipFragment ( String toolTip ) { if ( toolTip == null || toolTip. length ( ) == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; builder. append ( toolTip ) ; return builder. toString ( ) ; }",
        "public String generateToolTipFragment ( String toolTip ) { if ( toolTip == null || toolTip. length ( ) == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; builder. append ( toolTip ). append ( \"\\n\" ) ; return builder. toString ( ) ; }",
        "public String generateToolTipFragment ( String toolTipText ) { if ( toolTipText == null ) { return null ; } if ( toolTipText. length ( ) == 0 ) { return null ; } return toolTipText. substring ( 0, toolTipText. length ( ) - 2 ) ; }",
        "public method\" ) protected void generate generateToolTipFragment ( ) { if ( tool tipFragment == null ) { tool tipFragment = new Tool tipFragment ( ) ; } tool tipFragment. show ( ) ; }",
        "public method\" ) protected void generate generateToolTipFragment ( ) { if ( tool tipFragment == null ) { tool tipFragment = new tool tipFragment ( ) ; } tool tipFragment. show ( ) ; }",
        "public method\" ) protected void generate generateToolTipFragment ( ) { if ( tool tip!= null ) { tool tip. show ( ) ; } }",
        "public method\" ) protected void generate generateToolTipFragment ( ) { if ( tool tip == null ) { tool tip = new DefaultTool tip ( ) ; } tool tip. show ( ) ; }",
        "public method\" ) protected void generate generateToolTipFragment ( ) { if ( tool tip == null ) { tool tip = new Tool tip ( ) ; } tool tip. show ( ) ; }",
        "public View generateToolTipFragment ( ) { View view = super. createView ( ) ; if ( tool tip!= null ) { view. addView ( tool tip ) ; tool tip = null ; } return view ; }",
        "public Fragment generateToolTipFragment ( ) { Fragment fragment = super. createFragment ( ) ; if ( tool tip!= null ) { tool tip. show ( fragment ) ; } return fragment ; }",
        "public View generateToolTipFragment ( ) { View view = super. createView ( ) ; if ( tool tip!= null ) { view. addView ( tool tip ) ; tool tip. setVisibility ( View. VISIBLE ) ; } return view ; }",
        "public View generateToolTipFragment ( ) { View view = super. createView ( ) ; if ( tool tip!= null ) { view. addView ( tool tip ) ; tool tip. setVisibility ( View. GONE ) ; } return view ; }",
        "public View generateToolTipFragment ( ) { View view = super. createView ( ) ; if ( tool tip!= null ) { view. addView ( tool tip ) ; } return view ; }",
        "public String generateToolTipFragment ( ) { if ( mToolTipFragment == null ) { mToolTipFragment = createToolTipFragment ( ) ; } return mToolTipFragment ; }",
        "public String get generateToolTipFragment ( ) { if ( toolTipFragment == null ) { toolTipFragment = getClass ( ). getSimpleName ( ) ; } return toolTipFragment ; }",
        "public String get generateToolTipFragment ( ) { if ( toolTipFragment == null ) { toolTipFragment = getClass ( ). getSimpleName ( ) ; } return toolTipFragment. replace ('','' ) ; }",
        "public String get generateToolTipFragment ( ) { if ( toolTipFragment == null ) { toolTipFragment = getClass ( ). getName ( ) ; } return toolTipFragment ; }",
        "public String get generateToolTipFragment ( ) { if ( toolTipFragment == null ) { toolTipFragment = getClass ( ). getName ( ) + \".\" + getClass ( ). getName ( ) ; } return toolTipFragment ; }"
      ]
    },
    "Chart_11_/source/org/jfree/chart/util/ShapeUtilities.java_275-276": {
      "loc": "275-276",
      "input": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; }",
      "target": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p2.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; }",
      "function range": "264,5-296,5",
      "raw_output": [
        "private static boolean pathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if ( generalPath1. get ( i )!= generalPath2. get ( i ) ) { return false ; } } return true ; }",
        "private boolean pathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if ( generalPath1. get ( i )!= generalPath2. get ( i ) ) { return false ; } } return true ; }",
        "private static boolean pathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. length!= generalPath2. length ) { return false ; } for ( int i = 0 ; i < generalPath1. length ; i ++ ) { if ( generalPath1 [ i ]!= generalPath2 [ i ] ) { return false ; } } return true ; }",
        "private boolean pathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if (! generalPath1. get ( i ). equals ( generalPath2. get ( i ) ) ) { return false ; } } return true ; }",
        "private static boolean pathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == null && generalPath2 == null ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. length!= generalPath2. length ) { return false ; } for ( int i = 0 ; i < generalPath1. length ; i ++ ) { if ( generalPath1 [ i ]!= generalPath2 [ i ] ) { return false ; } } return true ; }",
        "private static boolean pathEquals ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } else if ( path1 == null ) { return false ; } else if ( path2 == null ) { return false ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "private static boolean pathEquals ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } if ( path1 == null ) { return false ; } if ( path2 == null ) { return false ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "private static boolean pathEquals ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == null ) { return path2 == null ; } if ( path2 == null ) { return path1 == null ; } return path1. getPathName ( ). equals ( path2. getPathName ( ) ) ; }",
        "private static boolean pathEquals ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == null ) { return path2 == null ; } if ( path2 == null ) { return path1 == null ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "private static boolean pathEquals ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } else if ( path1 == null ) { return false ; } else if ( path2 == null ) { return false ; } return path1. getPath ( ) == path2. getPath ( ) ; }",
        "private static boolean pathEquals ( String path1, String path2 ) { if ( path1 == path2 ) { return true ; } if ( path1 == null ) { return false ; } if ( path2 == null ) { return false ; } if ( path1. length ( )!= path2. length ( ) ) { return false ; } return path1. equals ( path2 ) ; }",
        "private static boolean pathEquals ( String path1, String path2 ) { if ( path1 == null ) { return path2 == null ; } if ( path2 == null ) { return path1 == null ; } if ( path1. length ( )!= path2. length ( ) ) { return false ; } return path1. equals ( path2 ) ; }",
        "private static boolean pathEquals ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } else if ( path1 == null ) { return false ; } else if ( path2 == null ) { return false ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "private static boolean pathEquals ( String path1, String path2 ) { if ( path1 == null || path2 == null ) { return false ; } if ( path1. length ( )!= path2. length ( ) ) { return false ; } return path1. equals ( path2 ) ; }",
        "private static boolean pathEquals ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } if ( path1 == null ) { return false ; } if ( path2 == null ) { return false ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "private boolean pathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if ( generalPath1. get ( i )!= generalPath2. get ( i ) ) { return false ; } } return true ; }",
        "private static boolean pathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. length!= generalPath2. length ) { return false ; } for ( int i = 0 ; i < generalPath1. length ; i ++ ) { if ( generalPath1 [ i ]!= generalPath2 [ i ] ) { return false ; } } return true ; }",
        "private static boolean pathEquals ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } else if ( path1 == null ) { return false ; } else if ( path2 == null ) { return false ; } return path1. getPathName ( ). equals ( path2. getPathName ( ) ) ; }",
        "private static boolean pathEquals ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } if ( path1 == null ) { return false ; } if ( path2 == null ) { return false ; } return path1. getPathName ( ). equals ( path2. getPathName ( ) ) ; }",
        "private static boolean pathEquals ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } else if ( path1 == null ) { return false ; } else if ( path2 == null ) { return false ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "private static boolean pathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if ( generalPath1. get ( i )!= generalPath2. get ( i ) ) { return false ; } } return true ; }",
        "private static boolean generalPathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if ( generalPath1. get ( i )!= generalPath2. get ( i ) ) { return false ; } } return true ; }",
        "private static boolean generalPathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if (! generalPath1. get ( i ). equals ( generalPath2. get ( i ) ) ) { return false ; } } return true ; }",
        "private static boolean pathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if (! generalPath1. get ( i ). equals ( generalPath2. get ( i ) ) ) { return false ; } } return true ; }",
        "private static boolean pathEquals ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. length ( )!= generalPath2. length ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. length ( ) ; i ++ ) { if ( generalPath1. charAt ( i )!= generalPath2. charAt ( i ) ) { return false ; } } return true ; }"
      ],
      "mid_translation": [
        "Returns true if two general paths are equal.",
        "Determines if two general paths are equal.",
        "Determines whether two general paths are equal.",
        "Returns true if the two general paths are equal.",
        "Returns true if the two given general paths are equal."
      ],
      "output": [
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if ( generalPath1. get ( i )!= generalPath2. get ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if ( generalPath1. get ( i )!= generalPath2. get ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. length!= generalPath2. length ) { return false ; } for ( int i = 0 ; i < generalPath1. length ; i ++ ) { if ( generalPath1 [ i ]!= generalPath2 [ i ] ) { return false ; } } return true ; }",
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if (! generalPath1. get ( i ). equals ( generalPath2. get ( i ) ) ) { return false ; } } return true ; }",
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == null && generalPath2 == null ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. length!= generalPath2. length ) { return false ; } for ( int i = 0 ; i < generalPath1. length ; i ++ ) { if ( generalPath1 [ i ]!= generalPath2 [ i ] ) { return false ; } } return true ; }",
        "public static boolean equal ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } else if ( path1 == null ) { return false ; } else if ( path2 == null ) { return false ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "public static boolean equal ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } if ( path1 == null ) { return false ; } if ( path2 == null ) { return false ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "public static boolean equal ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == null ) { return path2 == null ; } if ( path2 == null ) { return path1 == null ; } return path1. getPathName ( ). equals ( path2. getPathName ( ) ) ; }",
        "public static boolean equal ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == null ) { return path2 == null ; } if ( path2 == null ) { return path1 == null ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "public static boolean equal ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } else if ( path1 == null ) { return false ; } else if ( path2 == null ) { return false ; } return path1. getPath ( ) == path2. getPath ( ) ; }",
        "public static boolean equal ( String path1, String path2 ) { if ( path1 == path2 ) { return true ; } if ( path1 == null ) { return false ; } if ( path2 == null ) { return false ; } if ( path1. length ( )!= path2. length ( ) ) { return false ; } return path1. equals ( path2 ) ; }",
        "public static boolean equal ( String path1, String path2 ) { if ( path1 == null ) { return path2 == null ; } if ( path2 == null ) { return path1 == null ; } if ( path1. length ( )!= path2. length ( ) ) { return false ; } return path1. equals ( path2 ) ; }",
        "public static boolean equal ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } else if ( path1 == null ) { return false ; } else if ( path2 == null ) { return false ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "public static boolean equal ( String path1, String path2 ) { if ( path1 == null || path2 == null ) { return false ; } if ( path1. length ( )!= path2. length ( ) ) { return false ; } return path1. equals ( path2 ) ; }",
        "public static boolean equal ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } if ( path1 == null ) { return false ; } if ( path2 == null ) { return false ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if ( generalPath1. get ( i )!= generalPath2. get ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. length!= generalPath2. length ) { return false ; } for ( int i = 0 ; i < generalPath1. length ; i ++ ) { if ( generalPath1 [ i ]!= generalPath2 [ i ] ) { return false ; } } return true ; }",
        "public static boolean equal ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } else if ( path1 == null ) { return false ; } else if ( path2 == null ) { return false ; } return path1. getPathName ( ). equals ( path2. getPathName ( ) ) ; }",
        "public static boolean equal ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } if ( path1 == null ) { return false ; } if ( path2 == null ) { return false ; } return path1. getPathName ( ). equals ( path2. getPathName ( ) ) ; }",
        "public static boolean equal ( GeneralPath path1, GeneralPath path2 ) { if ( path1 == path2 ) { return true ; } else if ( path1 == null ) { return false ; } else if ( path2 == null ) { return false ; } return path1. getPath ( ). equals ( path2. getPath ( ) ) ; }",
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if ( generalPath1. get ( i )!= generalPath2. get ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if ( generalPath1. get ( i )!= generalPath2. get ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if (! generalPath1. get ( i ). equals ( generalPath2. get ( i ) ) ) { return false ; } } return true ; }",
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. size ( )!= generalPath2. size ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. size ( ) ; i ++ ) { if (! generalPath1. get ( i ). equals ( generalPath2. get ( i ) ) ) { return false ; } } return true ; }",
        "public static boolean equal ( generalPath1, generalPath2 ) { if ( generalPath1 == generalPath2 ) { return true ; } if ( generalPath1 == null ) { return false ; } if ( generalPath2 == null ) { return false ; } if ( generalPath1. length ( )!= generalPath2. length ( ) ) { return false ; } for ( int i = 0 ; i < generalPath1. length ( ) ; i ++ ) { if ( generalPath1. charAt ( i )!= generalPath2. charAt ( i ) ) { return false ; } } return true ; }"
      ]
    },
    "Chart_12_/source/org/jfree/chart/plot/MultiplePiePlot.java_145-146": {
      "loc": "145-146",
      "input": "public MultiplePiePlot(CategoryDataset dataset) { super(); this.dataset = dataset; PiePlot piePlot = new PiePlot(null); this.pieChart = new JFreeChart(piePlot); this.pieChart.removeLegend(); this.dataExtractOrder = TableOrder.BY_COLUMN; this.pieChart.setBackgroundPaint(null); TextTitle seriesTitle = new TextTitle(\"Series Title\", new Font(\"SansSerif\", Font.BOLD, 12)); seriesTitle.setPosition(RectangleEdge.BOTTOM); this.pieChart.setTitle(seriesTitle); this.aggregatedItemsKey = \"Other\"; this.aggregatedItemsPaint = Color.lightGray; this.sectionPaints = new HashMap(); }",
      "target": "public MultiplePiePlot(CategoryDataset dataset) { super(); setDataset(dataset); PiePlot piePlot = new PiePlot(null); this.pieChart = new JFreeChart(piePlot); this.pieChart.removeLegend(); this.dataExtractOrder = TableOrder.BY_COLUMN; this.pieChart.setBackgroundPaint(null); TextTitle seriesTitle = new TextTitle(\"Series Title\", new Font(\"SansSerif\", Font.BOLD, 12)); seriesTitle.setPosition(RectangleEdge.BOTTOM); this.pieChart.setTitle(seriesTitle); this.aggregatedItemsKey = \"Other\"; this.aggregatedItemsPaint = Color.lightGray; this.sectionPaints = new HashMap(); }",
      "function range": "143,5-158,5",
      "raw_output": [
        "public static JFreeChart create ( CategoryDataset categoryDataset ) { if ( categoryDataset == null ) { throw new IllegalArgumentException ( \"CategoryDataset cannot be null\" ) ; } JFreeChart chart = new JFreeChart ( ) ; chart. setCategoryDataset ( categoryDataset ) ; chart. init ( ) ; return chart ; }",
        "public static JFreeChart create ( CategoryDataset categoryDataset ) { if ( categoryDataset == null ) { throw new IllegalArgumentException ( \"CategoryDataset cannot be null\" ) ; } JFreeChart chart = new JFreeChart ( ) ; chart. setCategoryDataset ( categoryDataset ) ; chart. initialize ( ) ; return chart ; }",
        "public static JFreeChart create ( CategoryDataset categoryDataset ) { JFreeChart chart = new JFreeChart ( ) ; chart. setCategoryDataset ( categoryDataset ) ; chart. init ( ) ; return chart ; }",
        "public static JFreeChart createChart ( CategoryDataset categoryDataset ) { JFreeChart chart = new JFreeChart ( ) ; chart. setCategoryDataset ( categoryDataset ) ; chart. init ( ) ; return chart ; }",
        "public static JFreeChart createChart ( CategoryDataset categoryDataset ) { JFreeChart chart = new JFreeChart ( ) ; chart. setCategoryDataset ( categoryDataset ) ; chart. setDataset ( categoryDataset ) ; return chart ; }",
        "public static JFreeChart ofCategory ( double [ ] x, double [ ] y, double [ ] z ) { return new JFreeChart ( x, y, z ) ; }",
        "public static JFreeChart ofCategory ( double [ ] x, double [ ] y ) { return new JFreeChart ( x, y, x, y ) ; }",
        "public static JFreeChart ofCategory ( double [ ] x, double [ ] y ) { return ofCategory ( x, y, null ) ; }",
        "public static JFreeChart create ( double [ ] x, double [ ] y ) { JFreeChart chart = new JFreeChart ( x, y ) ; chart. setDataset ( x, y ) ; return chart ; }",
        "public static JFreeChart create ( double [ ] x, double [ ] y ) { JFreeChart chart = new JFreeChart ( x, y ) ; chart. setDataset ( dataset ) ; return chart ; }",
        "public JFreeChart createChart ( String name, double [ ] x, double [ ] y ) { JFreeChart chart = chartMap. get ( name ) ; if ( chart == null ) { chart = new JFreeChart ( name, x, y ) ; chartMap. put ( name, chart ) ; } return chart ; }",
        "public JFreeChart addChart ( String name, double [ ] x, double [ ] y ) { JFreeChart chart = chartMap. get ( name ) ; if ( chart == null ) { chart = new JFreeChart ( name, x, y ) ; chartMap. put ( name, chart ) ; } chart. addChart ( name, x, y ) ; return chart ; }",
        "public JFreeChart addChart ( String name, double [ ] x, double [ ] y ) { JFreeChart chart = chartMap. get ( name ) ; if ( chart == null ) { chart = new JFreeChart ( name, x, y ) ; chartMap. put ( name, chart ) ; } return chart ; }",
        "public JFreeChart addChart ( String name, double [ ] x, double [ ] y ) { JFreeChart chart = chartMap. get ( name ) ; if ( chart == null ) { chart = new JFreeChart ( name, x, y ) ; chartMap. put ( name, chart ) ; } chart. addChart ( x, y ) ; return chart ; }",
        "public JFreeChart addChart ( String name, double [ ] x, double [ ] y ) { JFreeChart chart = chartMap. get ( name ) ; if ( chart == null ) { chart = new JFreeChart ( name, x, y ) ; chartMap. put ( name, chart ) ; } chart. addChart ( x, y, x, y ) ; return chart ; }",
        "public static JFreeChart createChart ( double [ ] [ ] x, double [ ] [ ] y ) { if ( x == null || y == null || x. length!= y. length ) { throw new IllegalArgumentException ( ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( ) ; } JFreeChart chart = new JFreeChart ( x, y ) ; for ( int i = 0 ; i < x. length ; i ++ ) { chart. add ( x [ i ], y [ i ] ) ; } return chart ; }",
        "public static JFreeChart createChart ( double [ ] [ ] x, double [ ] [ ] y ) { if ( x == null || y == null || x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length.\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length.\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length.\" ) ; } return new JFreeChart ( x, y ) ; }",
        "public static JFreeChart createChart ( double [ ] [ ] x, double [ ] [ ] y ) { if ( x == null || y == null || x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } return new JFreeChart ( x, y ) ; }",
        "public static JFreeChart createChart ( double [ ] [ ] x, double [ ] [ ] y ) { if ( x == null || y == null || x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } return new JFreeChart ( x, y, x, y ) ; }",
        "public static JFreeChart createChart ( double [ ] [ ] x, double [ ] [ ] y ) { if ( x == null || y == null || x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length.\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length.\" ) ; } return new JFreeChart ( x, y, x, y ) ; }",
        "public JFreeChart createChart ( CategoryDataset categoryDataset ) { JFreeChart chart = chartMap. get ( categoryDataset ) ; if ( chart == null ) { chart = new JFreeChart ( categoryDataset ) ; chartMap. put ( categoryDataset, chart ) ; } return chart ; }",
        "public JFreeChart createChart ( CategoryDataset categoryDataset ) { JFreeChart chart = chartMap. get ( categoryDataset ) ; if ( chart == null ) { chart = chartMap. get ( categoryDataset ) ; if ( chart == null ) { chart = new JFreeChart ( categoryDataset ) ; chartMap. put ( categoryDataset, chart ) ; } chartMap. put ( categoryDataset, chart ) ; } return chart ; }",
        "public JFreeChart createChart ( CategoryDataset categoryDataset ) { JFreeChart chart = chartMap. get ( categoryDataset. getId ( ) ) ; if ( chart == null ) { chart = new JFreeChart ( categoryDataset. getId ( ) ) ; chartMap. put ( categoryDataset. getId ( ), chart ) ; } return chart ; }",
        "public JFreeChart createChart ( CategoryDataset categoryDataset ) { JFreeChart chart = chartMap. get ( categoryDataset. getId ( ) ) ; if ( chart == null ) { chart = new JFreeChart ( categoryDataset ) ; chartMap. put ( categoryDataset. getId ( ), chart ) ; } return chart ; }",
        "public JFreeChart createChart ( CategoryDataset categoryDataset ) { JFreeChart chart = chartMap. get ( categoryDataset. getId ( ) ) ; if ( chart == null ) { chart = new JFreeChart ( categoryDataset ) ; chartMap. put ( categoryDataset. getId ( ), chart ) ; chartMap. put ( categoryDataset. getId ( ), chart ) ; } return chart ; }"
      ],
      "mid_translation": [
        "Creates a JFreeChart and initializes it with the given category dataset.",
        "Creates a JFreeChart with the given category dataset.",
        "Creates a JFreeChart with the given category dataset and sets up a JFreeChart.",
        "Creates a JFreeChart for the given category dataset.",
        "Creates a JFreeChart for the given category dataset and sets up a JFreeChart for the series."
      ],
      "output": [
        "public JFreeChart MultiplePiePlot ( CategoryDataset categoryDataset ) { if ( categoryDataset == null ) { throw new IllegalArgumentException ( \"CategoryDataset cannot be null\" ) ; } JFreeChart chart = new JFreeChart ( ) ; chart. setCategoryDataset ( categoryDataset ) ; chart. init ( ) ; return chart ; }",
        "public JFreeChart MultiplePiePlot ( CategoryDataset categoryDataset ) { if ( categoryDataset == null ) { throw new IllegalArgumentException ( \"CategoryDataset cannot be null\" ) ; } JFreeChart chart = new JFreeChart ( ) ; chart. setCategoryDataset ( categoryDataset ) ; chart. initialize ( ) ; return chart ; }",
        "public JFreeChart MultiplePiePlot ( CategoryDataset categoryDataset ) { JFreeChart chart = new JFreeChart ( ) ; chart. setCategoryDataset ( categoryDataset ) ; chart. init ( ) ; return chart ; }",
        "public JFreeChart MultiplePiePlot ( CategoryDataset categoryDataset ) { JFreeChart chart = new JFreeChart ( ) ; chart. setCategoryDataset ( categoryDataset ) ; chart. init ( ) ; return chart ; }",
        "public JFreeChart MultiplePiePlot ( CategoryDataset categoryDataset ) { JFreeChart chart = new JFreeChart ( ) ; chart. setCategoryDataset ( categoryDataset ) ; chart. setDataset ( categoryDataset ) ; return chart ; }",
        "public JFreeChart MultiplePiePlot ( double [ ] x, double [ ] y, double [ ] z ) { return new JFreeChart ( x, y, z ) ; }",
        "public JFreeChart MultiplePiePlot ( double [ ] x, double [ ] y ) { return new JFreeChart ( x, y, x, y ) ; }",
        "public JFreeChart MultiplePiePlot ( double [ ] x, double [ ] y ) { return ofCategory ( x, y, null ) ; }",
        "public JFreeChart MultiplePiePlot ( double [ ] x, double [ ] y ) { JFreeChart chart = new JFreeChart ( x, y ) ; chart. setDataset ( x, y ) ; return chart ; }",
        "public JFreeChart MultiplePiePlot ( double [ ] x, double [ ] y ) { JFreeChart chart = new JFreeChart ( x, y ) ; chart. setDataset ( dataset ) ; return chart ; }",
        "public JFreeChart MultiplePiePlot ( String name, double [ ] x, double [ ] y ) { JFreeChart chart = chartMap. get ( name ) ; if ( chart == null ) { chart = new JFreeChart ( name, x, y ) ; chartMap. put ( name, chart ) ; } return chart ; }",
        "public JFreeChart MultiplePiePlot ( String name, double [ ] x, double [ ] y ) { JFreeChart chart = chartMap. get ( name ) ; if ( chart == null ) { chart = new JFreeChart ( name, x, y ) ; chartMap. put ( name, chart ) ; } chart. addChart ( name, x, y ) ; return chart ; }",
        "public JFreeChart MultiplePiePlot ( String name, double [ ] x, double [ ] y ) { JFreeChart chart = chartMap. get ( name ) ; if ( chart == null ) { chart = new JFreeChart ( name, x, y ) ; chartMap. put ( name, chart ) ; } return chart ; }",
        "public JFreeChart MultiplePiePlot ( String name, double [ ] x, double [ ] y ) { JFreeChart chart = chartMap. get ( name ) ; if ( chart == null ) { chart = new JFreeChart ( name, x, y ) ; chartMap. put ( name, chart ) ; } chart. addChart ( x, y ) ; return chart ; }",
        "public JFreeChart MultiplePiePlot ( String name, double [ ] x, double [ ] y ) { JFreeChart chart = chartMap. get ( name ) ; if ( chart == null ) { chart = new JFreeChart ( name, x, y ) ; chartMap. put ( name, chart ) ; } chart. addChart ( x, y, x, y ) ; return chart ; }",
        "public JFreeChart MultiplePiePlot ( double [ ] [ ] x, double [ ] [ ] y ) { if ( x == null || y == null || x. length!= y. length ) { throw new IllegalArgumentException ( ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( ) ; } JFreeChart chart = new JFreeChart ( x, y ) ; for ( int i = 0 ; i < x. length ; i ++ ) { chart. add ( x [ i ], y [ i ] ) ; } return chart ; }",
        "public JFreeChart MultiplePiePlot ( double [ ] [ ] x, double [ ] [ ] y ) { if ( x == null || y == null || x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length.\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length.\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length.\" ) ; } return new JFreeChart ( x, y ) ; }",
        "public JFreeChart MultiplePiePlot ( double [ ] [ ] x, double [ ] [ ] y ) { if ( x == null || y == null || x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } return new JFreeChart ( x, y ) ; }",
        "public JFreeChart MultiplePiePlot ( double [ ] [ ] x, double [ ] [ ] y ) { if ( x == null || y == null || x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } return new JFreeChart ( x, y, x, y ) ; }",
        "public JFreeChart MultiplePiePlot ( double [ ] [ ] x, double [ ] [ ] y ) { if ( x == null || y == null || x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length.\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length.\" ) ; } return new JFreeChart ( x, y, x, y ) ; }",
        "public JFreeChart MultiplePiePlot ( CategoryDataset categoryDataset ) { JFreeChart chart = chartMap. get ( categoryDataset ) ; if ( chart == null ) { chart = new JFreeChart ( categoryDataset ) ; chartMap. put ( categoryDataset, chart ) ; } return chart ; }",
        "public JFreeChart MultiplePiePlot ( CategoryDataset categoryDataset ) { JFreeChart chart = chartMap. get ( categoryDataset ) ; if ( chart == null ) { chart = chartMap. get ( categoryDataset ) ; if ( chart == null ) { chart = new JFreeChart ( categoryDataset ) ; chartMap. put ( categoryDataset, chart ) ; } chartMap. put ( categoryDataset, chart ) ; } return chart ; }",
        "public JFreeChart MultiplePiePlot ( CategoryDataset categoryDataset ) { JFreeChart chart = chartMap. get ( categoryDataset. getId ( ) ) ; if ( chart == null ) { chart = new JFreeChart ( categoryDataset. getId ( ) ) ; chartMap. put ( categoryDataset. getId ( ), chart ) ; } return chart ; }",
        "public JFreeChart MultiplePiePlot ( CategoryDataset categoryDataset ) { JFreeChart chart = chartMap. get ( categoryDataset. getId ( ) ) ; if ( chart == null ) { chart = new JFreeChart ( categoryDataset ) ; chartMap. put ( categoryDataset. getId ( ), chart ) ; } return chart ; }",
        "public JFreeChart MultiplePiePlot ( CategoryDataset categoryDataset ) { JFreeChart chart = chartMap. get ( categoryDataset. getId ( ) ) ; if ( chart == null ) { chart = new JFreeChart ( categoryDataset ) ; chartMap. put ( categoryDataset. getId ( ), chart ) ; chartMap. put ( categoryDataset. getId ( ), chart ) ; } return chart ; }"
      ]
    },
    "Chart_13_/source/org/jfree/chart/block/BorderArrangement.java_455-456": {
      "loc": "455-456",
      "input": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { double[] w = new double[5]; double[] h = new double[5]; w[0] = constraint.getWidth(); if (this.topBlock != null) { RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE); Size2D size = this.topBlock.arrange(g2, c1); h[0] = size.height; } w[1] = w[0]; if (this.bottomBlock != null) { RectangleConstraint c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight() - h[0]), LengthConstraintType.RANGE); Size2D size = this.bottomBlock.arrange(g2, c2); h[1] = size.height; } h[2] = constraint.getHeight() - h[1] - h[0]; if (this.leftBlock != null) { RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.leftBlock.arrange(g2, c3); w[2] = size.width; } h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } h[4] = h[2]; w[4] = constraint.getWidth() - w[3] - w[2]; RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); if (this.centerBlock != null) { this.centerBlock.arrange(g2, c5); } if (this.topBlock != null) { this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); } if (this.bottomBlock != null) { this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])); } if (this.leftBlock != null) { this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); } if (this.rightBlock != null) { this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])); } if (this.centerBlock != null) { this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4])); } return new Size2D(constraint.getWidth(), constraint.getHeight()); }",
      "target": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { double[] w = new double[5]; double[] h = new double[5]; w[0] = constraint.getWidth(); if (this.topBlock != null) { RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE); Size2D size = this.topBlock.arrange(g2, c1); h[0] = size.height; } w[1] = w[0]; if (this.bottomBlock != null) { RectangleConstraint c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight() - h[0]), LengthConstraintType.RANGE); Size2D size = this.bottomBlock.arrange(g2, c2); h[1] = size.height; } h[2] = constraint.getHeight() - h[1] - h[0]; if (this.leftBlock != null) { RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.leftBlock.arrange(g2, c3); w[2] = size.width; } h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } h[4] = h[2]; w[4] = constraint.getWidth() - w[3] - w[2]; RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); if (this.centerBlock != null) { this.centerBlock.arrange(g2, c5); } if (this.topBlock != null) { this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); } if (this.bottomBlock != null) { this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])); } if (this.leftBlock != null) { this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); } if (this.rightBlock != null) { this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])); } if (this.centerBlock != null) { this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4])); } return new Size2D(constraint.getWidth(), constraint.getHeight()); }",
      "function range": "422,5-489,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Chart_17_/source/org/jfree/data/time/TimeSeries.java_857-858": {
      "loc": "857-858",
      "input": "public Object clone() throws CloneNotSupportedException { Object clone = createCopy(0, getItemCount() - 1); return clone; }",
      "target": "public Object clone() throws CloneNotSupportedException { TimeSeries clone = (TimeSeries) super.clone(); clone.data = (List) ObjectUtilities.deepClone(this.data); return clone; }",
      "function range": "856,5-859,5",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. type = this. type ; copy. comment = this. comment ; copy. source = this. source ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; copy. comment = this. comment ; copy. source = this. source ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. type = this. type ; copy. comment = this. comment ; copy. source = this. source ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; copy. timestamp = this. timestamp ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; copy. comment = this. comment ; copy. source = this. source ; return copy ; }",
        "public Config copy ( ) { Config copy = new Config ( ) ; copy. url = url ; copy. username = username ; copy. password = password ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; copy. timestamp = this. timestamp ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. version = this. version ; copy. user = this. user ; copy. password = this. password ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. type = this. type ; copy. comment = this. comment ; return copy ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T copy ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; copy. comment = this. comment ; return copy ; }",
        "public ConfigObject copy ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = name ; copy. type = type ; copy. parent = parent ; copy. children. addAll ( children ) ; return copy ; }",
        "public ConfigObject copy ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = this. name ; copy. type = this. type ; copy. parent = this. parent ; copy. children. addAll ( this. children ) ; return copy ; }",
        "public ConfigObject copy ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = this. name ; copy. type = this. type ; copy. parent = this. parent ; copy. children. putAll ( this. children ) ; return copy ; }",
        "public ConfigObject copy ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = this. name ; copy. type = this. type ; copy. parent = this. parent ; copy. children = this. children ; return copy ; }",
        "public ConfigObject copy ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = name ; copy. type = type ; copy. parent = parent ; copy. children. addAll ( children ) ; return copy ; }",
        "public ConfigObject copy ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = this. name ; copy. type = this. type ; copy. parent = this. parent ; return copy ; }",
        "public CopyState copyState ( ) { CopyState copyState = new CopyState ( ) ; copyState. src = src ; copyState. dest = dest ; copyState. srcState = srcState ; copyState. destState = destState ; return copyState ; }",
        "public CopyState copyState ( ) { CopyState copyState = new CopyState ( ) ; copyState. src = src ; copyState. dest = dest ; copyState. srcId = srcId ; copyState. destId = destId ; return copyState ; }",
        "public CopyState copyState ( ) { CopyState copyState = new CopyState ( ) ; copyState. src = src ; copyState. dest = dest ; return copyState ; }",
        "public CopyState copyState ( ) { CopyState copyState = new CopyState ( ) ; copyState. src = src ; copyState. dst = dst ; copyState. srcState = srcState ; copyState. destState = destState ; return copyState ; }",
        "public CopyState copyState ( ) { CopyState copyState = new CopyState ( ) ; copyState. src = src ; copyState. dest = dest ; copyState. state = state ; return copyState ; }"
      ],
      "mid_translation": [
        "Creates and returns a new copy of this object.",
        "Creates a copy of this object.",
        "Creates and returns a copy of this object.",
        "Creates a new copy of this object.",
        "Returns a copy of this object."
      ],
      "output": [
        "public T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. type = this. type ; copy. comment = this. comment ; copy. source = this. source ; return copy ; }",
        "public T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; copy. comment = this. comment ; copy. source = this. source ; return copy ; }",
        "public < T > T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. type = this. type ; copy. comment = this. comment ; copy. source = this. source ; return copy ; }",
        "public T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; copy. timestamp = this. timestamp ; return copy ; }",
        "public < T > T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; copy. comment = this. comment ; copy. source = this. source ; return copy ; }",
        "public Config clone ( ) { Config copy = new Config ( ) ; copy. url = url ; copy. username = username ; copy. password = password ; return copy ; }",
        "public T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; copy. timestamp = this. timestamp ; return copy ; }",
        "public T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; return copy ; }",
        "public < T > T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; return copy ; }",
        "public T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. version = this. version ; copy. user = this. user ; copy. password = this. password ; return copy ; }",
        "public T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; return copy ; }",
        "public < T > T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; return copy ; }",
        "public T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. type = this. type ; copy. comment = this. comment ; return copy ; }",
        "public T clone ( ) { T copy = ( T ) super. copy ( ) ; copy. id = this. id ; copy. name = this. name ; copy. version = this. version ; copy. comment = this. comment ; return copy ; }",
        "public ConfigObject clone ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = name ; copy. type = type ; copy. parent = parent ; copy. children. addAll ( children ) ; return copy ; }",
        "public ConfigObject clone ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = this. name ; copy. type = this. type ; copy. parent = this. parent ; copy. children. addAll ( this. children ) ; return copy ; }",
        "public ConfigObject clone ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = this. name ; copy. type = this. type ; copy. parent = this. parent ; copy. children. putAll ( this. children ) ; return copy ; }",
        "public ConfigObject clone ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = this. name ; copy. type = this. type ; copy. parent = this. parent ; copy. children = this. children ; return copy ; }",
        "public ConfigObject clone ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = name ; copy. type = type ; copy. parent = parent ; copy. children. addAll ( children ) ; return copy ; }",
        "public ConfigObject clone ( ) { ConfigObject copy = new ConfigObject ( ) ; copy. name = this. name ; copy. type = this. type ; copy. parent = this. parent ; return copy ; }",
        "public CopyState clone ( ) { CopyState copyState = new CopyState ( ) ; copyState. src = src ; copyState. dest = dest ; copyState. srcState = srcState ; copyState. destState = destState ; return copyState ; }",
        "public CopyState clone ( ) { CopyState copyState = new CopyState ( ) ; copyState. src = src ; copyState. dest = dest ; copyState. srcId = srcId ; copyState. destId = destId ; return copyState ; }",
        "public CopyState clone ( ) { CopyState copyState = new CopyState ( ) ; copyState. src = src ; copyState. dest = dest ; return copyState ; }",
        "public CopyState clone ( ) { CopyState copyState = new CopyState ( ) ; copyState. src = src ; copyState. dst = dst ; copyState. srcState = srcState ; copyState. destState = destState ; return copyState ; }",
        "public CopyState clone ( ) { CopyState copyState = new CopyState ( ) ; copyState. src = src ; copyState. dest = dest ; copyState. state = state ; return copyState ; }"
      ]
    },
    "Chart_20_/source/org/jfree/chart/plot/ValueMarker.java_95-96": {
      "loc": "95-96",
      "input": "public ValueMarker(double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) { super(paint, stroke, paint, stroke, alpha); this.value = value; }",
      "target": "public ValueMarker(double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) { super(paint, stroke, outlinePaint, outlineStroke, alpha); this.value = value; }",
      "function range": "93,5-97,5",
      "raw_output": [
        "public void setValue ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Integer ) { this. value = ( Integer ) value ; } else if ( value instanceof Long ) { this. value = ( Long ) value ; } else if ( value instanceof Float ) { this. value = ( Float ) value ; } else if ( value instanceof Double ) { this. value = ( Double ) value ; } else if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; } else if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else",
        "public void setValue ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Integer ) { this. value = ( Integer ) value ; } else if ( value instanceof Long ) { this. value = ( Long ) value ; } else if ( value instanceof Float ) { this. value = ( Float ) value ; } else if ( value instanceof Double ) { this. value = ( Double ) value ; } else if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; } else if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else",
        "public void setValue ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Integer ) { this. value = ( Integer ) value ; } else if ( value instanceof Long ) { this. value = ( Long ) value ; } else if ( value instanceof Float ) { this. value = ( Float ) value ; } else if ( value instanceof Double ) { this. value = ( Double ) value ; } else if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; } else if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else",
        "public void setValue ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Integer ) { this. value = ( Integer ) value ; } else if ( value instanceof Long ) { this. value = ( Long ) value ; } else if ( value instanceof Float ) { this. value = ( Float ) value ; } else if ( value instanceof Double ) { this. value = ( Double ) value ; } else if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; } else if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else",
        "public void setValue ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Integer ) { this. value = ( Integer ) value ; } else if ( value instanceof Long ) { this. value = ( Long ) value ; } else if ( value instanceof Float ) { this. value = ( Float ) value ; } else if ( value instanceof Double ) { this. value = ( Double ) value ; } else if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; } else if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else",
        "public void setValue ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value =",
        "public void setValue ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value =",
        "public void setValue ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value =",
        "public void setValue ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value =",
        "public void setValue ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value =",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Number ) { setValue ( ( Number ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Number ) { setValue ( ( Number ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Number ) { setValue ( ( Number ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Number ) { setValue ( ( Number ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Number ) { setValue ( ( Number ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar )",
        "public void setValueMarker ( String valueMarker ) { if ( valueMarker == null || valueMarker. trim ( ). length ( ) == 0 ) { setValueMarker ( null ) ; } else { setValueMarker ( valueMarker. trim ( ) ) ; } }",
        "public void setValueMarker ( String valueMarker ) { if ( valueMarker == null || valueMarker. trim ( ). length ( ) == 0 ) { setValueMarker ( DEFAULT_MARKER ) ; } else { setValueMarker ( valueMarker ) ; } }",
        "public void setValueMarker ( String valueMarker ) { if ( valueMarker == null || valueMarker. trim ( ). length ( ) == 0 ) { setValueMarker ( \"\" ) ; } else { setValueMarker ( valueMarker. trim ( ) ) ; } }",
        "public void setValueMarker ( String valueMarker ) { if ( valueMarker == null || valueMarker. trim ( ). length ( ) == 0 ) { setValueMarker ( null ) ; } else { setValueMarker ( valueMarker ) ; } }",
        "public void setValueMarker ( String valueMarker ) { if ( valueMarker == null || valueMarker. trim ( ). length ( ) == 0 ) { setValueMarker ( \"\" ) ; } else { setValueMarker ( valueMarker ) ; } }",
        "public void setValue ( double value ) { if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } this. value = value ; }",
        "public void setValue ( double value ) { if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max.\" ) ; } this. value = value ; if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max.\" ) ; } }",
        "public void setValue ( double value ) { if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } setValue ( value ) ; }",
        "public void setValue ( double value ) { if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } this. value = value ; if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } }",
        "public void setValue ( double value ) { if ( Double. isNaN ( value ) || Double. isInfinite ( value ) ) { setValue ( 0.0 ) ; } else { setValue ( value ) ; } }"
      ],
      "mid_translation": [
        "Sets the value of this ValueMarker.",
        "Sets the value of this marker.",
        "Sets this ValueMarker to the given value.",
        "Sets the value marker.",
        "Sets the value of the marker."
      ],
      "output": [
        "public void ValueMarker ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Integer ) { this. value = ( Integer ) value ; } else if ( value instanceof Long ) { this. value = ( Long ) value ; } else if ( value instanceof Float ) { this. value = ( Float ) value ; } else if ( value instanceof Double ) { this. value = ( Double ) value ; } else if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; } else if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else",
        "public void ValueMarker ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Integer ) { this. value = ( Integer ) value ; } else if ( value instanceof Long ) { this. value = ( Long ) value ; } else if ( value instanceof Float ) { this. value = ( Float ) value ; } else if ( value instanceof Double ) { this. value = ( Double ) value ; } else if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; } else if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else",
        "public void ValueMarker ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Integer ) { this. value = ( Integer ) value ; } else if ( value instanceof Long ) { this. value = ( Long ) value ; } else if ( value instanceof Float ) { this. value = ( Float ) value ; } else if ( value instanceof Double ) { this. value = ( Double ) value ; } else if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; } else if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else",
        "public void ValueMarker ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Integer ) { this. value = ( Integer ) value ; } else if ( value instanceof Long ) { this. value = ( Long ) value ; } else if ( value instanceof Float ) { this. value = ( Float ) value ; } else if ( value instanceof Double ) { this. value = ( Double ) value ; } else if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; } else if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else",
        "public void ValueMarker ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Integer ) { this. value = ( Integer ) value ; } else if ( value instanceof Long ) { this. value = ( Long ) value ; } else if ( value instanceof Float ) { this. value = ( Float ) value ; } else if ( value instanceof Double ) { this. value = ( Double ) value ; } else if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; } else if ( value instanceof String ) { this. value = ( String ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else if ( value instanceof Date ) { this. value = ( Date ) value ; } else if ( value instanceof Calendar ) { this. value = ( Calendar ) value ; } else",
        "public void ValueMarker ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value =",
        "public void ValueMarker ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value =",
        "public void ValueMarker ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value =",
        "public void ValueMarker ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value =",
        "public void ValueMarker ( Object value ) { if ( value == null ) { this. value = null ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Boolean ) { this. value = ( Boolean ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof Integer ) { this. value = ( Integer ) value ; return ; } if ( value instanceof Long ) { this. value = ( Long ) value ; return ; } if ( value instanceof Float ) { this. value = ( Float ) value ; return ; } if ( value instanceof Double ) { this. value = ( Double ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value = ( String ) value ; return ; } if ( value instanceof String ) { this. value =",
        "public void ValueMarker ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Number ) { setValue ( ( Number ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "public void ValueMarker ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Number ) { setValue ( ( Number ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "public void ValueMarker ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Number ) { setValue ( ( Number ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "public void ValueMarker ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Number ) { setValue ( ( Number ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "public void ValueMarker ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Number ) { setValue ( ( Number ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar ) value ) ; } else if ( value instanceof Calendar ) { setValue ( ( Calendar )",
        "public void ValueMarker ( String valueMarker ) { if ( valueMarker == null || valueMarker. trim ( ). length ( ) == 0 ) { setValueMarker ( null ) ; } else { setValueMarker ( valueMarker. trim ( ) ) ; } }",
        "public void ValueMarker ( String valueMarker ) { if ( valueMarker == null || valueMarker. trim ( ). length ( ) == 0 ) { setValueMarker ( DEFAULT_MARKER ) ; } else { setValueMarker ( valueMarker ) ; } }",
        "public void ValueMarker ( String valueMarker ) { if ( valueMarker == null || valueMarker. trim ( ). length ( ) == 0 ) { setValueMarker ( \"\" ) ; } else { setValueMarker ( valueMarker. trim ( ) ) ; } }",
        "public void ValueMarker ( String valueMarker ) { if ( valueMarker == null || valueMarker. trim ( ). length ( ) == 0 ) { setValueMarker ( null ) ; } else { setValueMarker ( valueMarker ) ; } }",
        "public void ValueMarker ( String valueMarker ) { if ( valueMarker == null || valueMarker. trim ( ). length ( ) == 0 ) { setValueMarker ( \"\" ) ; } else { setValueMarker ( valueMarker ) ; } }",
        "public void ValueMarker ( double value ) { if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } this. value = value ; }",
        "public void ValueMarker ( double value ) { if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max.\" ) ; } this. value = value ; if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max.\" ) ; } }",
        "public void ValueMarker ( double value ) { if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } setValue ( value ) ; }",
        "public void ValueMarker ( double value ) { if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } this. value = value ; if ( value < min || value > max ) { throw new IllegalArgumentException ( \"Value must be between min and max\" ) ; } }",
        "public void ValueMarker ( double value ) { if ( Double. isNaN ( value ) || Double. isInfinite ( value ) ) { setValue ( 0.0 ) ; } else { setValue ( value ) ; } }"
      ]
    },
    "Chart_24_/source/org/jfree/chart/renderer/GrayPaintScale.java_126-127": {
      "loc": "126-127",
      "input": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound); int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0); return new Color(g, g, g); }",
      "target": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound); int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0); return new Color(g, g, g); }",
      "function range": "123,5-129,5",
      "raw_output": [
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } return null ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new Paint ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Paint ( ( Integer ) value ) ; } if ( value instanceof Long ) { return new Paint ( ( Long ) value ) ; } if ( value instanceof Float ) { return new Paint ( ( Float ) value ) ; } if ( value instanceof Double ) { return new Paint ( ( Double ) value ) ; } if ( value instanceof Boolean ) { return new Paint ( ( Boolean ) value ) ; } if ( value instanceof String ) { return new Paint ( ( String ) value ) ; } return null ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } return null ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return getInstance ( ( String ) value ) ; } if ( value instanceof Integer ) { return getInstance ( ( Integer ) value ) ; } if ( value instanceof Long ) { return getInstance ( ( Long ) value ) ; } if ( value instanceof Float ) { return getInstance ( ( Float ) value ) ; } if ( value instanceof Double ) { return getInstance ( ( Double ) value ) ; } if ( value instanceof Boolean ) { return getInstance ( ( Boolean ) value ) ; } if ( value instanceof String ) { return getInstance ( ( String ) value ) ; } return null ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new Paint ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Paint ( ( Integer ) value ) ; } if ( value instanceof Long ) { return new Paint ( ( Long ) value ) ; } if ( value instanceof Float ) { return new Paint ( ( Float ) value ) ; } if ( value instanceof Double ) { return new Paint ( ( Double ) value ) ; } if ( value instanceof Boolean ) { return new Paint ( ( Boolean ) value ) ; } return null ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } switch ( value. getClass ( ) ) { case Integer. class : return new Integer ( ( Integer ) value ) ; case Long. class : return new Long ( ( Long ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; default : return null ; } }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } switch ( value. getClass ( ) ) { case Integer. class : return new Integer ( ( Integer ) value ) ; case Long. class : return new Long ( ( Long ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; default : return null ; } }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } switch ( value. getClass ( ) ) { case Integer. class : return new Integer ( ( Integer ) value ) ; case Long. class : return new Long ( ( Long ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; default : throw new IllegalArgumentException ( ) ; } }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } switch ( value. getClass ( ) ) { case Integer. class : return new Integer ( ( Integer ) value ) ; case Long. class : return new Long ( ( Long ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; default : return null ; } }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } return null ; }",
        "public static Paint valueOf ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new String ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Integer ( ( ( Integer ) value ). intValue ( ) ) ; } if ( value instanceof Long ) { return new Long ( ( ( Long ) value ). longValue ( ) ) ; } if ( value instanceof Float ) { return new Float ( ( ( Float ) value ). floatValue ( ) ) ; } if ( value instanceof Double ) { return new Double ( ( ( Double ) value ). doubleValue ( ) ) ; } if ( value instanceof Boolean ) { return new Boolean ( ( ( Boolean ) value ). booleanValue ( ) ) ; } return null ; }",
        "public static Paint valueOf ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new String ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Integer ( ( ( Integer ) value ). intValue ( ) ) ; } if ( value instanceof Long ) { return new Long ( ( ( Long ) value ). longValue ( ) ) ; } if ( value instanceof Float ) { return new Float ( ( ( Float ) value ). floatValue ( ) ) ; } if ( value instanceof Double ) { return new Double ( ( ( Double ) value ). doubleValue ( ) ) ; } return null ; }",
        "public static Paint valueOf ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new String ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Integer ( ( ( Integer ) value ). intValue ( ) ) ; } if ( value instanceof Long ) { return new Long ( ( ( Long ) value ). longValue ( ) ) ; } if ( value instanceof Float ) { return new Float ( ( ( Float ) value ). floatValue ( ) ) ; } if ( value instanceof Double ) { return new Double ( ( ( Double ) value ). doubleValue ( ) ) ; } return value ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new StringPaint ( ( String ) value ) ; } if ( value instanceof Integer ) { return new IntegerPaint ( ( Integer ) value ) ; } if ( value instanceof Long ) { return new LongPaint ( ( Long ) value ) ; } if ( value instanceof Float ) { return new FloatPaint ( ( Float ) value ) ; } if ( value instanceof Double ) { return new DoublePaint ( ( Double ) value ) ; } return null ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new Paint ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Paint ( ( Integer ) value ) ; } if ( value instanceof Long ) { return new Paint ( ( Long ) value ) ; } if ( value instanceof Float ) { return new Paint ( ( Float ) value ) ; } if ( value instanceof Double ) { return new Paint ( ( Double ) value ) ; } return null ; }",
        "public static Paint getInstance ( double value ) { if ( value < 0 || value > 1.0 ) { throw new IllegalArgumentException ( \"Invalid value: \" + value ) ; } return getInstance ( Double. toString ( value ) ) ; }",
        "public static Paint getInstance ( double value ) { if ( value < 0 || value > 1.0 ) { throw new IllegalArgumentException ( \"Invalid value: \" + value ) ; } return new Paint ( value ) ; }",
        "public static Paint getInstance ( double value ) { if ( value < 0 ) { throw new IllegalArgumentException ( \"Invalid value: \" + value ) ; } return getInstance ( Double. toString ( value ) ) ; }",
        "public static Paint getInstance ( double value ) { if ( Double. isNaN ( value ) ) { return null ; } return new Paint ( value ) ; }",
        "public static Paint getInstance ( double value ) { if ( value < 0 || value > 1.0 ) { throw new IllegalArgumentException ( \"Invalid value: \" + value ) ; } return getInstance ( value ) ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } return null ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return getInstance ( ( String ) value ) ; } if ( value instanceof Integer ) { return getInstance ( ( Integer ) value ) ; } if ( value instanceof Long ) { return getInstance ( ( Long ) value ) ; } if ( value instanceof Float ) { return getInstance ( ( Float ) value ) ; } if ( value instanceof Double ) { return getInstance ( ( Double ) value ) ; } if ( value instanceof Boolean ) { return getInstance ( ( Boolean ) value ) ; } if ( value instanceof String ) { return getInstance ( ( String ) value ) ; } return null ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } return null ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } return null ; }",
        "public static Paint getInstance ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new Paint ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Paint ( ( Integer ) value ) ; } if ( value instanceof Long ) { return new Paint ( ( Long ) value ) ; } if ( value instanceof Float ) { return new Paint ( ( Float ) value ) ; } if ( value instanceof Double ) { return new Paint ( ( Double ) value ) ; } if ( value instanceof Boolean ) { return new Paint ( ( Boolean ) value ) ; } return null ; }"
      ],
      "mid_translation": [
        "Returns a Paint instance with the given value.",
        "Returns a Paint instance with the specified value.",
        "Creates a Paint instance with the given value.",
        "Returns a Paint instance with the given double value.",
        "returns a Paint instance with the given value."
      ],
      "output": [
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new Paint ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Paint ( ( Integer ) value ) ; } if ( value instanceof Long ) { return new Paint ( ( Long ) value ) ; } if ( value instanceof Float ) { return new Paint ( ( Float ) value ) ; } if ( value instanceof Double ) { return new Paint ( ( Double ) value ) ; } if ( value instanceof Boolean ) { return new Paint ( ( Boolean ) value ) ; } if ( value instanceof String ) { return new Paint ( ( String ) value ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return getInstance ( ( String ) value ) ; } if ( value instanceof Integer ) { return getInstance ( ( Integer ) value ) ; } if ( value instanceof Long ) { return getInstance ( ( Long ) value ) ; } if ( value instanceof Float ) { return getInstance ( ( Float ) value ) ; } if ( value instanceof Double ) { return getInstance ( ( Double ) value ) ; } if ( value instanceof Boolean ) { return getInstance ( ( Boolean ) value ) ; } if ( value instanceof String ) { return getInstance ( ( String ) value ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new Paint ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Paint ( ( Integer ) value ) ; } if ( value instanceof Long ) { return new Paint ( ( Long ) value ) ; } if ( value instanceof Float ) { return new Paint ( ( Float ) value ) ; } if ( value instanceof Double ) { return new Paint ( ( Double ) value ) ; } if ( value instanceof Boolean ) { return new Paint ( ( Boolean ) value ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } switch ( value. getClass ( ) ) { case Integer. class : return new Integer ( ( Integer ) value ) ; case Long. class : return new Long ( ( Long ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; default : return null ; } }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } switch ( value. getClass ( ) ) { case Integer. class : return new Integer ( ( Integer ) value ) ; case Long. class : return new Long ( ( Long ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; default : return null ; } }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } switch ( value. getClass ( ) ) { case Integer. class : return new Integer ( ( Integer ) value ) ; case Long. class : return new Long ( ( Long ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; default : throw new IllegalArgumentException ( ) ; } }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } switch ( value. getClass ( ) ) { case Integer. class : return new Integer ( ( Integer ) value ) ; case Long. class : return new Long ( ( Long ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Double. class : return new Double ( ( Double ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; case Float. class : return new Float ( ( Float ) value ) ; default : return null ; } }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new String ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Integer ( ( ( Integer ) value ). intValue ( ) ) ; } if ( value instanceof Long ) { return new Long ( ( ( Long ) value ). longValue ( ) ) ; } if ( value instanceof Float ) { return new Float ( ( ( Float ) value ). floatValue ( ) ) ; } if ( value instanceof Double ) { return new Double ( ( ( Double ) value ). doubleValue ( ) ) ; } if ( value instanceof Boolean ) { return new Boolean ( ( ( Boolean ) value ). booleanValue ( ) ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new String ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Integer ( ( ( Integer ) value ). intValue ( ) ) ; } if ( value instanceof Long ) { return new Long ( ( ( Long ) value ). longValue ( ) ) ; } if ( value instanceof Float ) { return new Float ( ( ( Float ) value ). floatValue ( ) ) ; } if ( value instanceof Double ) { return new Double ( ( ( Double ) value ). doubleValue ( ) ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new String ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Integer ( ( ( Integer ) value ). intValue ( ) ) ; } if ( value instanceof Long ) { return new Long ( ( ( Long ) value ). longValue ( ) ) ; } if ( value instanceof Float ) { return new Float ( ( ( Float ) value ). floatValue ( ) ) ; } if ( value instanceof Double ) { return new Double ( ( ( Double ) value ). doubleValue ( ) ) ; } return value ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new StringPaint ( ( String ) value ) ; } if ( value instanceof Integer ) { return new IntegerPaint ( ( Integer ) value ) ; } if ( value instanceof Long ) { return new LongPaint ( ( Long ) value ) ; } if ( value instanceof Float ) { return new FloatPaint ( ( Float ) value ) ; } if ( value instanceof Double ) { return new DoublePaint ( ( Double ) value ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new Paint ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Paint ( ( Integer ) value ) ; } if ( value instanceof Long ) { return new Paint ( ( Long ) value ) ; } if ( value instanceof Float ) { return new Paint ( ( Float ) value ) ; } if ( value instanceof Double ) { return new Paint ( ( Double ) value ) ; } return null ; }",
        "public Paint getPaint ( double value ) { if ( value < 0 || value > 1.0 ) { throw new IllegalArgumentException ( \"Invalid value: \" + value ) ; } return getInstance ( Double. toString ( value ) ) ; }",
        "public Paint getPaint ( double value ) { if ( value < 0 || value > 1.0 ) { throw new IllegalArgumentException ( \"Invalid value: \" + value ) ; } return new Paint ( value ) ; }",
        "public Paint getPaint ( double value ) { if ( value < 0 ) { throw new IllegalArgumentException ( \"Invalid value: \" + value ) ; } return getInstance ( Double. toString ( value ) ) ; }",
        "public Paint getPaint ( double value ) { if ( Double. isNaN ( value ) ) { return null ; } return new Paint ( value ) ; }",
        "public Paint getPaint ( double value ) { if ( value < 0 || value > 1.0 ) { throw new IllegalArgumentException ( \"Invalid value: \" + value ) ; } return getInstance ( value ) ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return getInstance ( ( String ) value ) ; } if ( value instanceof Integer ) { return getInstance ( ( Integer ) value ) ; } if ( value instanceof Long ) { return getInstance ( ( Long ) value ) ; } if ( value instanceof Float ) { return getInstance ( ( Float ) value ) ; } if ( value instanceof Double ) { return getInstance ( ( Double ) value ) ; } if ( value instanceof Boolean ) { return getInstance ( ( Boolean ) value ) ; } if ( value instanceof String ) { return getInstance ( ( String ) value ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return ( ( String ) value ). trim ( ) ; } if ( value instanceof Integer ) { return ( ( Integer ) value ). intValue ( ) ; } if ( value instanceof Long ) { return ( ( Long ) value ). longValue ( ) ; } if ( value instanceof Float ) { return ( ( Float ) value ). floatValue ( ) ; } if ( value instanceof Double ) { return ( ( Double ) value ). doubleValue ( ) ; } return null ; }",
        "public Paint getPaint ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof String ) { return new Paint ( ( String ) value ) ; } if ( value instanceof Integer ) { return new Paint ( ( Integer ) value ) ; } if ( value instanceof Long ) { return new Paint ( ( Long ) value ) ; } if ( value instanceof Float ) { return new Paint ( ( Float ) value ) ; } if ( value instanceof Double ) { return new Paint ( ( Double ) value ) ; } if ( value instanceof Boolean ) { return new Paint ( ( Boolean ) value ) ; } return null ; }"
      ]
    },
    "Cli_4_/src/java/org/apache/commons/cli/Parser.java_298-299": {
      "loc": "298-299",
      "input": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator(); StringBuffer buff = new StringBuffer(); while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
      "target": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator(); StringBuffer buff = new StringBuffer(\"Missing required option\"); buff.append(requiredOptions.size() == 1 ? \"\" : \"s\"); buff.append(\": \"); while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
      "function range": "290,5-309,5",
      "raw_output": [
        "private void validateRequiredOptions ( ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } if ( requiredOptions. size ( ) == 0 ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } }",
        "private void validateRequiredOptions ( ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } if ( requiredOptions. size ( ) == 0 ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } }",
        "private void validateRequiredOptions ( ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } if ( requiredOptions. size ( ) < 1 ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } }",
        "private void validateRequiredOptions ( ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } if ( requiredOptions. size ( ) < 1 ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } }",
        "private void validateRequiredOptions ( ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] == null ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void validateRequiredOptions ( List < String > requiredOptions ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are empty.\" ) ; } for ( String requiredOption : requiredOptions ) { if ( requiredOption. isEmpty ( ) ) { throw new MissingOptionException ( \"Required option '\" + requiredOption + \"' is empty.\" ) ; } } }",
        "private void validateRequiredOptions ( List < String > requiredOptions ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are empty.\" ) ; } for ( String requiredOption : requiredOptions ) { if ( requiredOption. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are empty.\" ) ; } } }",
        "private List < String > validateRequiredOptions ( List < String > requiredOptions ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } List < String > errors = new ArrayList <> ( requiredOptions. size ( ) ) ; for ( String option : requiredOptions ) { errors. add ( option ) ; } return errors ; }",
        "private void validateRequiredOptions ( List < String > requiredOptions ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are empty.\" ) ; } for ( String requiredOption : requiredOptions ) { if ( requiredOption. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are not empty.\" ) ; } } }",
        "private void validateRequiredOptions ( List < String > requiredOptions ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are empty.\" ) ; } for ( String requiredOption : requiredOptions ) { if ( requiredOption. isEmpty ( ) ) { throw new MissingOptionException ( \"Required option is empty.\" ) ; } } }",
        "private void checkRequiredOptions ( String [ ] requiredOptions ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] == null ) { throw new MissingOptionException ( \"Missing required option: \" + requiredOptions [ i ] ) ; } } }",
        "private void checkRequiredOptions ( String [ ] requiredOptions ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] == null ) { throw new MissingOptionException ( \"Missing required option '\" + i + \"'\" ) ; } } }",
        "private void checkRequiredOptions ( String [ ] requiredOptions ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] == null ) { throw new MissingOptionException ( \"Missing required option '\" + requiredOptions [ i ] + \"'\" ) ; } } }",
        "private void checkRequiredOptions ( String [ ] requiredOptions ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { String opt = requiredOptions [ i ] ; if ( opt == null ) { throw new MissingOptionException ( \"Missing required option: \" + opt ) ; } } }",
        "private void checkRequiredOptions ( String [ ] requiredOptions ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] == null ) { throw new MissingOptionException ( \"Missing required option: \" + i ) ; } } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } for ( int i = 0 ; i < requiredOptions. size ( ) ; i ++ ) { String opt = requiredOptions. get ( i ) ; if ( opt. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void checkRequiredOptions ( List < String > requiredOptions ) throws MissingOptionException { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } for ( String requiredOption : requiredOptions ) { if ( requiredOption. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } for ( int i = 0 ; i < requiredOptions. size ( ) ; i ++ ) { Option option = requiredOptions. get ( i ) ; if ( option. isRequired ( ) ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } for ( int i = 0 ; i < requiredOptions. size ( ) ; i ++ ) { String option = requiredOptions. get ( i ) ; if (! option. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } for ( int i = 0 ; i < requiredOptions. size ( ) ; i ++ ) { Object o = requiredOptions. get ( i ) ; if ( o instanceof String ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void validateRequiredOptions ( ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] > 0 ) { throw new MissingOptionException ( requiredOptions [ i ] ) ; } } }",
        "private void validateRequiredOptions ( ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] > 0 ) { throw new MissingOptionException ( \"Required option '\" + i + \"' is greater than zero.\" ) ; } } }",
        "private void validateRequiredOptions ( ) { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] > 0 ) { throw new MissingOptionException ( \"Required option '\" + i + \"' is greater than zero.\" ) ; } } }",
        "private void validateRequiredOptions ( ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] > 0 ) { throw new MissingOptionException ( \"Required option '\" + i + \"' is greater than zero\" ) ; } } }",
        "private void validateRequiredOptions ( ) { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] > 0 ) { throw new MissingOptionException ( requiredOptions [ i ] ) ; } } }"
      ],
      "mid_translation": [
        "Throws a MissingOptionException if there are no required options.",
        "Throws a MissingOptionException if the list of required options is empty.",
        "Check that all of the required options are present and throw a MissingOptionException if any.",
        "Check that all the required options are present and throw a MissingOptionException if there are.",
        "Throws a MissingOptionException if the list of required options is greater than zero."
      ],
      "output": [
        "private void checkRequiredOptions ( ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } if ( requiredOptions. size ( ) == 0 ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } }",
        "private void checkRequiredOptions ( ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } if ( requiredOptions. size ( ) == 0 ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } }",
        "private void checkRequiredOptions ( ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } if ( requiredOptions. size ( ) < 1 ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } }",
        "private void checkRequiredOptions ( ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } if ( requiredOptions. size ( ) < 1 ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] == null ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void checkRequiredOptions ( List < String > requiredOptions ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are empty.\" ) ; } for ( String requiredOption : requiredOptions ) { if ( requiredOption. isEmpty ( ) ) { throw new MissingOptionException ( \"Required option '\" + requiredOption + \"' is empty.\" ) ; } } }",
        "private void checkRequiredOptions ( List < String > requiredOptions ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are empty.\" ) ; } for ( String requiredOption : requiredOptions ) { if ( requiredOption. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are empty.\" ) ; } } }",
        "private List < String > checkRequiredOptions ( List < String > requiredOptions ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } List < String > errors = new ArrayList <> ( requiredOptions. size ( ) ) ; for ( String option : requiredOptions ) { errors. add ( option ) ; } return errors ; }",
        "private void checkRequiredOptions ( List < String > requiredOptions ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are empty.\" ) ; } for ( String requiredOption : requiredOptions ) { if ( requiredOption. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are not empty.\" ) ; } } }",
        "private void checkRequiredOptions ( List < String > requiredOptions ) { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Required options are empty.\" ) ; } for ( String requiredOption : requiredOptions ) { if ( requiredOption. isEmpty ( ) ) { throw new MissingOptionException ( \"Required option is empty.\" ) ; } } }",
        "private void checkRequiredOptions ( String [ ] requiredOptions ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] == null ) { throw new MissingOptionException ( \"Missing required option: \" + requiredOptions [ i ] ) ; } } }",
        "private void checkRequiredOptions ( String [ ] requiredOptions ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] == null ) { throw new MissingOptionException ( \"Missing required option '\" + i + \"'\" ) ; } } }",
        "private void checkRequiredOptions ( String [ ] requiredOptions ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] == null ) { throw new MissingOptionException ( \"Missing required option '\" + requiredOptions [ i ] + \"'\" ) ; } } }",
        "private void checkRequiredOptions ( String [ ] requiredOptions ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { String opt = requiredOptions [ i ] ; if ( opt == null ) { throw new MissingOptionException ( \"Missing required option: \" + opt ) ; } } }",
        "private void checkRequiredOptions ( String [ ] requiredOptions ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] == null ) { throw new MissingOptionException ( \"Missing required option: \" + i ) ; } } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } for ( int i = 0 ; i < requiredOptions. size ( ) ; i ++ ) { String opt = requiredOptions. get ( i ) ; if ( opt. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void checkRequiredOptions ( List < String > requiredOptions ) throws MissingOptionException { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } for ( String requiredOption : requiredOptions ) { if ( requiredOption. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } for ( int i = 0 ; i < requiredOptions. size ( ) ; i ++ ) { Option option = requiredOptions. get ( i ) ; if ( option. isRequired ( ) ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } for ( int i = 0 ; i < requiredOptions. size ( ) ; i ++ ) { String option = requiredOptions. get ( i ) ; if (! option. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { if ( requiredOptions. isEmpty ( ) ) { throw new MissingOptionException ( \"Missing required options.\" ) ; } for ( int i = 0 ; i < requiredOptions. size ( ) ; i ++ ) { Object o = requiredOptions. get ( i ) ; if ( o instanceof String ) { throw new MissingOptionException ( \"Missing required option.\" ) ; } } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] > 0 ) { throw new MissingOptionException ( requiredOptions [ i ] ) ; } } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] > 0 ) { throw new MissingOptionException ( \"Required option '\" + i + \"' is greater than zero.\" ) ; } } }",
        "private void checkRequiredOptions ( ) { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] > 0 ) { throw new MissingOptionException ( \"Required option '\" + i + \"' is greater than zero.\" ) ; } } }",
        "private void checkRequiredOptions ( ) throws MissingOptionException { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] > 0 ) { throw new MissingOptionException ( \"Required option '\" + i + \"' is greater than zero\" ) ; } } }",
        "private void checkRequiredOptions ( ) { for ( int i = 0 ; i < requiredOptions. length ; i ++ ) { if ( requiredOptions [ i ] > 0 ) { throw new MissingOptionException ( requiredOptions [ i ] ) ; } } }"
      ]
    },
    "Cli_8_/src/java/org/apache/commons/cli/HelpFormatter.java_812-813": {
      "loc": "812-813",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, nextLineTabStop); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
      "target": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
      "function range": "792,5-823,5",
      "raw_output": [
        "protected void render ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text. charAt ( i ) ) ; } }",
        "protected void renderText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text. charAt ( i ) ) ; } }",
        "protected void render ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { render ( buffer, text. charAt ( i ) ) ; } }",
        "protected void render ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text ) ; } }",
        "protected void renderText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text ) ; } }",
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, sb, text ) ; return sb ; }",
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, text, sb ) ; return sb ; }",
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, text, sb ) ; return sb ; }",
        "public static StringBuilder render ( Render r, String text ) { return render ( r. render ( r. render ( text ) ) ) ; }",
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, sb, text ) ; return sb ; }",
        "public static void renderText ( RenderedContext context, String text, StringBuilder buffer ) { renderText ( context, text, buffer, null ) ; }",
        "public static void render ( RenderedContext ctx, String text, String buffer ) { render ( ctx, text, buffer, null ) ; }",
        "public static void render ( RenderedContext context, String text, String buffer ) { render ( context, text, buffer, null ) ; }",
        "public static void renderText ( RenderedContext context, String text, String buffer ) { renderText ( context, text, buffer, null ) ; }",
        "public static void renderText ( RenderedContext ctx, String text, String buffer ) { renderText ( ctx, text, buffer, null ) ; }",
        "protected void renderText ( Graphics2D gfx, Object text, int x, int y, int width, int height ) { renderText ( gfx, text, x, y, width, height ) ; }",
        "protected void renderText ( Graphics2D gfx, Object text, int x, int y, int width, int height ) { gfx. drawImage ( text, x, y, width, height ) ; }",
        "protected void renderText ( Graphics2D gfx, Object text, int x, int y, int width, int height ) { renderText ( gfx, text, x, y, width, height, null ) ; }",
        "protected void renderText ( Graphics2D gfx, Object text, int x, int y, int width, int height ) { renderText ( gfx, text, x, y, width, height, false ) ; }",
        "protected void renderText ( Graphics2D gfx, Object text, int x, int y, int width, int height ) { renderText ( gfx, text, x, y, width, height, true ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }"
      ],
      "mid_translation": [
        "Render the supplied text into the supplied string buffer.",
        "Render a wrapped text into a string buffer.",
        "Render the given text into the given string buffer.",
        "Render the given text into the supplied string buffer.",
        "Render wrapped text."
      ],
      "output": [
        "protected void renderWrappedText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text. charAt ( i ) ) ; } }",
        "protected void renderWrappedText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text. charAt ( i ) ) ; } }",
        "protected void renderWrappedText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { render ( buffer, text. charAt ( i ) ) ; } }",
        "protected void renderWrappedText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text ) ; } }",
        "protected void renderWrappedText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text ) ; } }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, sb, text ) ; return sb ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, text, sb ) ; return sb ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, text, sb ) ; return sb ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { return render ( r. render ( r. render ( text ) ) ) ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, sb, text ) ; return sb ; }",
        "protected void renderWrappedText ( RenderedContext context, String text, StringBuilder buffer ) { renderText ( context, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext ctx, String text, String buffer ) { render ( ctx, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext context, String text, String buffer ) { render ( context, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext context, String text, String buffer ) { renderText ( context, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext ctx, String text, String buffer ) { renderText ( ctx, text, buffer, null ) ; }",
        "protected void renderWrappedText ( Graphics2D gfx, Object text, int x, int y, int width, int height ) { renderText ( gfx, text, x, y, width, height ) ; }",
        "protected void renderWrappedText ( Graphics2D gfx, Object text, int x, int y, int width, int height ) { gfx. drawImage ( text, x, y, width, height ) ; }",
        "protected void renderWrappedText ( Graphics2D gfx, Object text, int x, int y, int width, int height ) { renderText ( gfx, text, x, y, width, height, null ) ; }",
        "protected void renderWrappedText ( Graphics2D gfx, Object text, int x, int y, int width, int height ) { renderText ( gfx, text, x, y, width, height, false ) ; }",
        "protected void renderWrappedText ( Graphics2D gfx, Object text, int x, int y, int width, int height ) { renderText ( gfx, text, x, y, width, height, true ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }"
      ]
    },
    "Cli_11_/src/java/org/apache/commons/cli/HelpFormatter.java_632-633": {
      "loc": "632-633",
      "input": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt() != null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); } if (option.hasArg() && (option.getArgName() != null)) { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
      "target": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt() != null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); } if (option.hasArg() && option.hasArgName()) { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
      "function range": "613,5-642,5",
      "raw_output": [
        "private static void appendOption ( StringBuffer buf, Option opt ) { if ( opt == null ) { buf. append ( \"null\" ) ; } else { buf. append ( opt. getValue ( ) ) ; } }",
        "private static void appendOption ( StringBuffer buf, Option opt ) { if ( opt == null ) { buf. append ( \"null\" ) ; } else { buf. append ( opt. toString ( ) ) ; } }",
        "private static void appendOption ( StringBuffer buf, Option option ) { if ( option == null ) { buf. append ( \"null\" ) ; } else { buf. append ( option. toString ( ) ) ; } }",
        "private static void appendOption ( StringBuffer buf, Option option ) { if ( option == null ) { buf. append ( \"null\" ) ; } else { buf. append ( option. getValue ( ) ) ; } }",
        "private static void appendOption ( StringBuffer buf, Option opt ) { if ( opt == null ) { buf. append ( \"null\" ) ; } else { buf. append ( opt. getDescription ( ) ) ; } }",
        "private static void appendOption ( final StringBuilder builder, final Object option ) { if ( option == null ) { builder. append ( \"null\" ) ; } else { builder. append ( option. toString ( ) ) ; } }",
        "private static void appendOption ( final StringBuilder sb, final Object option ) { if ( option == null ) { sb. append ( \"null\" ) ; } else { sb. append ( option. toString ( ) ) ; } }",
        "private void appendOption ( final StringBuilder builder, final Object option ) { if ( option == null ) { builder. append ( \"null\" ) ; } else { builder. append ( option. toString ( ) ) ; } }",
        "private static void appendOption ( StringBuilder sb, String option, Object value ) { if ( value == null ) { sb. append ( \"null\" ) ; } else { sb. append ( option ) ; } }",
        "private void appendOption ( final StringBuilder builder, final String option ) { builder. append ( option ) ; builder. append ('' ) ; }",
        "private static void appendOption ( StringBuilder sb, String option ) { if ( sb. length ( ) > 0 ) { sb. append ('' ) ; } sb. append ( option ) ; }",
        "protected void appendOption ( StringBuilder sb, String option ) { if ( sb. length ( ) > 0 ) { sb. append ('' ) ; } sb. append ( option ) ; }",
        "protected void appendOption ( StringBuilder sb, String option ) { if ( sb. length ( ) > 0 ) { sb. append ( \", \" ) ; } sb. append ( option ) ; }",
        "private static void appendOption ( StringBuilder sb, String option ) { if ( sb. length ( ) > 0 ) { sb. append ( \", \" ) ; } sb. append ( option ) ; }",
        "private static void appendOption ( StringBuilder builder, String option ) { builder. append ('' ) ; builder. append ( option ) ; builder. append ('' ) ; }",
        "private static void appendOption ( StringBuffer buf, Object option ) { if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionBoolean ) { appendOptionBoolean ( buf, ( OptionBoolean ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } }",
        "private static void appendOption ( StringBuffer buf, Object option ) { if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionBoolean ) { appendOptionBoolean ( buf, ( OptionBoolean ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } }",
        "private static void appendOption ( StringBuffer buf, Object option ) { if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionBoolean ) { appendOptionBoolean ( buf, ( OptionBoolean ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } }",
        "private static void appendOption ( StringBuffer buf, Object option ) { if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionSet ) { appendOptionSet ( buf, ( OptionSet ) option ) ; } else { appendOption ( buf, option ) ; } }",
        "private static void appendOption ( StringBuffer buf, Object option ) { if ( option == null ) { buf. append ( \"null\" ) ; } else { buf. append ( option. toString ( ) ) ; } }",
        "public static void appendOption ( StringBuffer buf, String name, Object value ) { appendOption ( buf, name, value. toString ( ) ) ; }",
        "private static void appendOption ( StringBuffer buf, String name, Object value ) { if ( value == null ) { buf. append ( \"null\" ) ; } else { appendOption ( buf, name, value. toString ( ) ) ; } }",
        "private static void appendOption ( StringBuffer buf, String name, Object value ) { if ( value == null ) { buf. append ( \"null\" ) ; } else { appendOption ( buf, name, value ) ; } }",
        "public static void appendOption ( StringBuffer buf, Option option ) { appendOption ( buf, option. getName ( ), option. getValue ( ) ) ; }",
        "public static void appendOption ( StringBuffer buffer, Option option ) { appendOption ( buffer, option. getName ( ), option. getValue ( ) ) ; }"
      ],
      "mid_translation": [
        "Appends an Option object to a StringBuffer.",
        "Appends an option to a string builder.",
        "Appends an option to the given string builder.",
        "Appends an Option to a StringBuffer.",
        "Append an Option to a StringBuffer."
      ],
      "output": [
        "private static void appendOption ( StringBuffer buf, Option opt ) { if ( opt == null ) { buf. append ( \"null\" ) ; } else { buf. append ( opt. getValue ( ) ) ; } }",
        "private static void appendOption ( StringBuffer buf, Option opt ) { if ( opt == null ) { buf. append ( \"null\" ) ; } else { buf. append ( opt. toString ( ) ) ; } }",
        "private static void appendOption ( StringBuffer buf, Option option ) { if ( option == null ) { buf. append ( \"null\" ) ; } else { buf. append ( option. toString ( ) ) ; } }",
        "private static void appendOption ( StringBuffer buf, Option option ) { if ( option == null ) { buf. append ( \"null\" ) ; } else { buf. append ( option. getValue ( ) ) ; } }",
        "private static void appendOption ( StringBuffer buf, Option opt ) { if ( opt == null ) { buf. append ( \"null\" ) ; } else { buf. append ( opt. getDescription ( ) ) ; } }",
        "private static void appendOption ( final StringBuilder builder, final Object option ) { if ( option == null ) { builder. append ( \"null\" ) ; } else { builder. append ( option. toString ( ) ) ; } }",
        "private static void appendOption ( final StringBuilder sb, final Object option ) { if ( option == null ) { sb. append ( \"null\" ) ; } else { sb. append ( option. toString ( ) ) ; } }",
        "private static void appendOption ( final StringBuilder builder, final Object option ) { if ( option == null ) { builder. append ( \"null\" ) ; } else { builder. append ( option. toString ( ) ) ; } }",
        "private static void appendOption ( StringBuilder sb, String option, Object value ) { if ( value == null ) { sb. append ( \"null\" ) ; } else { sb. append ( option ) ; } }",
        "private static void appendOption ( final StringBuilder builder, final String option ) { builder. append ( option ) ; builder. append ('' ) ; }",
        "private static void appendOption ( StringBuilder sb, String option ) { if ( sb. length ( ) > 0 ) { sb. append ('' ) ; } sb. append ( option ) ; }",
        "private static void appendOption ( StringBuilder sb, String option ) { if ( sb. length ( ) > 0 ) { sb. append ('' ) ; } sb. append ( option ) ; }",
        "private static void appendOption ( StringBuilder sb, String option ) { if ( sb. length ( ) > 0 ) { sb. append ( \", \" ) ; } sb. append ( option ) ; }",
        "private static void appendOption ( StringBuilder sb, String option ) { if ( sb. length ( ) > 0 ) { sb. append ( \", \" ) ; } sb. append ( option ) ; }",
        "private static void appendOption ( StringBuilder builder, String option ) { builder. append ('' ) ; builder. append ( option ) ; builder. append ('' ) ; }",
        "private static void appendOption ( StringBuffer buf, Object option ) { if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionBoolean ) { appendOptionBoolean ( buf, ( OptionBoolean ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } }",
        "private static void appendOption ( StringBuffer buf, Object option ) { if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionBoolean ) { appendOptionBoolean ( buf, ( OptionBoolean ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } }",
        "private static void appendOption ( StringBuffer buf, Object option ) { if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionBoolean ) { appendOptionBoolean ( buf, ( OptionBoolean ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionLong ) { appendOptionLong ( buf, ( OptionLong ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } else if ( option instanceof OptionString ) { appendOptionString ( buf, ( OptionString ) option ) ; } }",
        "private static void appendOption ( StringBuffer buf, Object option ) { if ( option instanceof OptionGroup ) { appendOptionGroup ( buf, ( OptionGroup ) option ) ; } else if ( option instanceof OptionSet ) { appendOptionSet ( buf, ( OptionSet ) option ) ; } else { appendOption ( buf, option ) ; } }",
        "private static void appendOption ( StringBuffer buf, Object option ) { if ( option == null ) { buf. append ( \"null\" ) ; } else { buf. append ( option. toString ( ) ) ; } }",
        "private static void appendOption ( StringBuffer buf, String name, Object value ) { appendOption ( buf, name, value. toString ( ) ) ; }",
        "private static void appendOption ( StringBuffer buf, String name, Object value ) { if ( value == null ) { buf. append ( \"null\" ) ; } else { appendOption ( buf, name, value. toString ( ) ) ; } }",
        "private static void appendOption ( StringBuffer buf, String name, Object value ) { if ( value == null ) { buf. append ( \"null\" ) ; } else { appendOption ( buf, name, value ) ; } }",
        "private static void appendOption ( StringBuffer buf, Option option ) { appendOption ( buf, option. getName ( ), option. getValue ( ) ) ; }",
        "private static void appendOption ( StringBuffer buffer, Option option ) { appendOption ( buffer, option. getName ( ), option. getValue ( ) ) ; }"
      ]
    },
    "Cli_24_/src/java/org/apache/commons/cli/HelpFormatter.java_825-827": {
      "loc": "825-827",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) { throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\"); } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
      "target": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) { nextLineTabStop = width - 1; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
      "function range": "809,5-852,5",
      "raw_output": [
        "public static void renderText ( RenderedContext context, String text, StringBuilder buffer ) { renderText ( context, text, buffer, null ) ; }",
        "public static void render ( RenderedContext ctx, String text, String buffer ) { render ( ctx, text, buffer, null ) ; }",
        "public static void render ( RenderedContext context, String text, String buffer ) { render ( context, text, buffer, null ) ; }",
        "public static void renderText ( RenderedContext context, String text, String buffer ) { renderText ( context, text, buffer, null ) ; }",
        "public static void renderText ( RenderedContext ctx, String text, String buffer ) { renderText ( ctx, text, buffer, null ) ; }",
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, sb, text ) ; return sb ; }",
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, text, sb ) ; return sb ; }",
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, text, sb ) ; return sb ; }",
        "public static StringBuilder render ( Render r, String text ) { return render ( r. render ( r. render ( text ) ) ) ; }",
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, sb, text ) ; return sb ; }",
        "protected void renderText ( Graphics2D gfx, String text ) { if ( text == null ) { gfx. drawImage ( text, 0, 0 ) ; } else { gfx. drawImage ( text, 0, text. length ( ) ) ; } }",
        "protected void renderText ( Graphics2D gfx, String text ) { if ( text == null ) { gfx. drawImage ( text, 0, 0 ) ; } else { gfx. drawImage ( text, 0, text. length ( ), 0 ) ; } }",
        "protected void renderText ( Graphics2D gfx, String text ) { if ( text == null ) { gfx. drawImage ( text, 0, 0 ) ; } else { gfx. drawImage ( text, 0, text. length ( ), text. length ( ) ) ; } }",
        "protected void renderText ( Graphics2D gfx, String text ) { if ( text == null ) { gfx. drawImage ( text, 0, 0 ) ; } else { gfx. drawImage ( text, text. length ( ), 0, text. length ( ) ) ; } }",
        "protected void renderText ( Graphics2D gfx, String text ) { if ( text == null ) { gfx. drawImage ( text, 0, 0 ) ; } else { gfx. drawImage ( text, 0, 0, text. length ( ) ) ; } }",
        "public static void renderLine ( StringBuilder buf, String line ) { buf. append ( renderLine ( buf, line, false ) ) ; }",
        "public static void renderLine ( StringBuilder buf, String line ) { buf. append ( renderLine ( buf, line ) ) ; }",
        "public static void renderLine ( StringBuilder buffer, String line ) { renderLine ( buffer. toString ( ), line, null ) ; }",
        "public static void renderLine ( StringBuilder buffer, String line ) { renderLine ( buffer, line, null ) ; }",
        "public static void renderLine ( StringBuilder buffer, String line ) { renderLine ( buffer. toString ( ), line ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }"
      ],
      "mid_translation": [
        "Render the given text into the given string buffer.",
        "Render a wrapped text into a string buffer.",
        "Renders the given text into the given string buffer.",
        "Render a single line of text into a string buffer.",
        "Render wrapped text."
      ],
      "output": [
        "protected void renderWrappedText ( RenderedContext context, String text, StringBuilder buffer ) { renderText ( context, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext ctx, String text, String buffer ) { render ( ctx, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext context, String text, String buffer ) { render ( context, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext context, String text, String buffer ) { renderText ( context, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext ctx, String text, String buffer ) { renderText ( ctx, text, buffer, null ) ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, sb, text ) ; return sb ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, text, sb ) ; return sb ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, text, sb ) ; return sb ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { return render ( r. render ( r. render ( text ) ) ) ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, sb, text ) ; return sb ; }",
        "protected void renderWrappedText ( Graphics2D gfx, String text ) { if ( text == null ) { gfx. drawImage ( text, 0, 0 ) ; } else { gfx. drawImage ( text, 0, text. length ( ) ) ; } }",
        "protected void renderWrappedText ( Graphics2D gfx, String text ) { if ( text == null ) { gfx. drawImage ( text, 0, 0 ) ; } else { gfx. drawImage ( text, 0, text. length ( ), 0 ) ; } }",
        "protected void renderWrappedText ( Graphics2D gfx, String text ) { if ( text == null ) { gfx. drawImage ( text, 0, 0 ) ; } else { gfx. drawImage ( text, 0, text. length ( ), text. length ( ) ) ; } }",
        "protected void renderWrappedText ( Graphics2D gfx, String text ) { if ( text == null ) { gfx. drawImage ( text, 0, 0 ) ; } else { gfx. drawImage ( text, text. length ( ), 0, text. length ( ) ) ; } }",
        "protected void renderWrappedText ( Graphics2D gfx, String text ) { if ( text == null ) { gfx. drawImage ( text, 0, 0 ) ; } else { gfx. drawImage ( text, 0, 0, text. length ( ) ) ; } }",
        "protected void renderWrappedText ( StringBuilder buf, String line ) { buf. append ( renderLine ( buf, line, false ) ) ; }",
        "protected void renderWrappedText ( StringBuilder buf, String line ) { buf. append ( renderLine ( buf, line ) ) ; }",
        "protected void renderWrappedText ( StringBuilder buffer, String line ) { renderLine ( buffer. toString ( ), line, null ) ; }",
        "protected void renderWrappedText ( StringBuilder buffer, String line ) { renderLine ( buffer, line, null ) ; }",
        "protected void renderWrappedText ( StringBuilder buffer, String line ) { renderLine ( buffer. toString ( ), line ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }"
      ]
    },
    "Cli_25_/src/java/org/apache/commons/cli/HelpFormatter.java_825-826": {
      "loc": "825-826",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) { nextLineTabStop = width - 1; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
      "target": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) { nextLineTabStop = 1; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
      "function range": "809,5-851,5",
      "raw_output": [
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, sb, text ) ; return sb ; }",
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, text, sb ) ; return sb ; }",
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, text, sb ) ; return sb ; }",
        "public static StringBuilder render ( Render r, String text ) { return render ( r. render ( r. render ( text ) ) ) ; }",
        "public static StringBuilder render ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, sb, text ) ; return sb ; }",
        "protected void render ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text. charAt ( i ) ) ; } }",
        "protected void renderText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text. charAt ( i ) ) ; } }",
        "protected void render ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { render ( buffer, text. charAt ( i ) ) ; } }",
        "protected void render ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text ) ; } }",
        "protected void renderText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text ) ; } }",
        "public static void renderText ( RenderedContext context, String text, StringBuilder buffer ) { renderText ( context, text, buffer, null ) ; }",
        "public static void render ( RenderedContext ctx, String text, String buffer ) { render ( ctx, text, buffer, null ) ; }",
        "public static void render ( RenderedContext context, String text, String buffer ) { render ( context, text, buffer, null ) ; }",
        "public static void renderText ( RenderedContext context, String text, String buffer ) { renderText ( context, text, buffer, null ) ; }",
        "public static void renderText ( RenderedContext ctx, String text, String buffer ) { renderText ( ctx, text, buffer, null ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String wrapped ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static void renderText ( StringBuilder buf, String text ) { if ( text == null ) return ; buf. append ( text ) ; buf. append ( \"\\n\" ) ; }",
        "public static void render ( StringBuffer buf, String text ) { if ( text == null ) { return ; } buf. append ( render ( buf, text ) ) ; }",
        "public static void renderText ( StringBuilder buf, String text ) { if ( text == null ) return ; buf. append ( text ) ; buf. append ('' ) ; }",
        "public static void renderText ( StringBuilder buf, String text ) { if ( text == null ) { return ; } buf. append ( text ) ; }",
        "public static void renderText ( StringBuilder buf, String text ) { buf. append ( renderText ( buf, text ) ) ; }"
      ],
      "mid_translation": [
        "Render a wrapped text into a string buffer.",
        "Render the supplied text into the supplied string buffer.",
        "Render the given text into the given string buffer.",
        "Render wrapped text.",
        "Render a wrapped text into the supplied string buffer."
      ],
      "output": [
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, sb, text ) ; return sb ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, text, sb ) ; return sb ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, text, sb ) ; return sb ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { return render ( r. render ( r. render ( text ) ) ) ; }",
        "protected StringBuilder renderWrappedText ( Render r, String text ) { StringBuilder sb = new StringBuilder ( ) ; render ( r, r, sb, text ) ; return sb ; }",
        "protected void renderWrappedText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text. charAt ( i ) ) ; } }",
        "protected void renderWrappedText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text. charAt ( i ) ) ; } }",
        "protected void renderWrappedText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { render ( buffer, text. charAt ( i ) ) ; } }",
        "protected void renderWrappedText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text ) ; } }",
        "protected void renderWrappedText ( StringBuffer buffer, String text ) { if ( text == null ) { return ; } int len = text. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buffer. append ( text ) ; } }",
        "protected void renderWrappedText ( RenderedContext context, String text, StringBuilder buffer ) { renderText ( context, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext ctx, String text, String buffer ) { render ( ctx, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext context, String text, String buffer ) { render ( context, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext context, String text, String buffer ) { renderText ( context, text, buffer, null ) ; }",
        "protected void renderWrappedText ( RenderedContext ctx, String text, String buffer ) { renderText ( ctx, text, buffer, null ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected String renderWrappedText ( String text ) { if ( text == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < text. length ( ) ; i ++ ) { char c = text. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "protected void renderWrappedText ( StringBuilder buf, String text ) { if ( text == null ) return ; buf. append ( text ) ; buf. append ( \"\\n\" ) ; }",
        "protected void renderWrappedText ( StringBuffer buf, String text ) { if ( text == null ) { return ; } buf. append ( render ( buf, text ) ) ; }",
        "protected void renderWrappedText ( StringBuilder buf, String text ) { if ( text == null ) return ; buf. append ( text ) ; buf. append ('' ) ; }",
        "protected void renderWrappedText ( StringBuilder buf, String text ) { if ( text == null ) { return ; } buf. append ( text ) ; }",
        "protected void renderWrappedText ( StringBuilder buf, String text ) { buf. append ( renderText ( buf, text ) ) ; }"
      ]
    },
    "Cli_28_/src/java/org/apache/commons/cli/Parser.java_290-291": {
      "loc": "290-291",
      "input": "protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) { break; } cmd.addOption(opt); } } }",
      "target": "protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) { continue; } cmd.addOption(opt); } } }",
      "function range": "252,5-296,5",
      "raw_output": [
        "public void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "private void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ). toString ( ) ; String value = entry. getValue ( ). toString ( ) ; processProperty ( key, value ) ; } }",
        "public void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( ( String ) entry. getKey ( ), ( String ) entry. getValue ( ) ) ; } }",
        "private void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { String key = ( String ) entry. getKey ( ) ; String value = ( String ) entry. getValue ( ) ; processProperty ( key, value ) ; } }",
        "public void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ). toString ( ) ; String value = entry. getValue ( ). toString ( ) ; processProperty ( key, value ) ; } }",
        "public static void main ( String [ ] args ) throws Exception { if ( args. length == 0 ) { printUsage ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } }",
        "public static void main ( String [ ] args ) { if ( args. length == 0 ) { printUsage ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } }",
        "public static void main ( String [ ] args ) throws Exception { if ( args. length == 0 ) { printUsage ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } }",
        "public static void main ( String [ ] args ) { if ( args. length == 0 ) { printUsage ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } }",
        "public static void main ( String [ ] args ) throws Exception { if ( args. length == 0 ) { printUsage ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } }",
        "private void processProperties ( Map < String, String > properties ) { for ( Entry < String, String > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; processProperty ( key, value ) ; } }",
        "private void processProperties ( Map < String, String > properties ) { for ( Entry < String, String > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "private void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ). toString ( ) ; String value = entry. getValue ( ). toString ( ) ; processProperty ( key, value ) ; } }",
        "private void processProperties ( Map < String, Object > properties ) { for ( Entry < String, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "public void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "private void processProperties ( Map < String, String > properties ) { for ( Entry < String, String > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; processProperty ( key, value ) ; } }",
        "private void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ). toString ( ) ; String value = entry. getValue ( ). toString ( ) ; processProperty ( key, value ) ; } }",
        "private void processProperties ( Map < String, String > properties ) { for ( Entry < String, String > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "public void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "private void processProperties ( Map < String, String > properties ) { for ( Entry < String, String > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; if ( value!= null ) { processProperty ( key, value ) ; } } }",
        "private void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "public void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "private void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( ( String ) entry. getKey ( ), ( String ) entry. getValue ( ) ) ; } }",
        "public static void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "public void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { process ( entry. getKey ( ), entry. getValue ( ) ) ; } }"
      ],
      "mid_translation": [
        "Processes the properties.",
        "Processes properties from the command line.",
        "Process the properties.",
        "Processes properties.",
        "Processes the specified properties."
      ],
      "output": [
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ). toString ( ) ; String value = entry. getValue ( ). toString ( ) ; processProperty ( key, value ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( ( String ) entry. getKey ( ), ( String ) entry. getValue ( ) ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { String key = ( String ) entry. getKey ( ) ; String value = ( String ) entry. getValue ( ) ; processProperty ( key, value ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ). toString ( ) ; String value = entry. getValue ( ). toString ( ) ; processProperty ( key, value ) ; } }",
        "protected void processProperties ( String [ ] args ) throws Exception { if ( args. length == 0 ) { printUsage ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } }",
        "protected void processProperties ( String [ ] args ) { if ( args. length == 0 ) { printUsage ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } }",
        "protected void processProperties ( String [ ] args ) throws Exception { if ( args. length == 0 ) { printUsage ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } }",
        "protected void processProperties ( String [ ] args ) { if ( args. length == 0 ) { printUsage ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } }",
        "protected void processProperties ( String [ ] args ) throws Exception { if ( args. length == 0 ) { printUsage ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } if ( args [ 0 ]. equals ( \"-help\" ) ) { printHelp ( ) ; System. exit ( 0 ) ; } }",
        "protected void processProperties ( Map < String, String > properties ) { for ( Entry < String, String > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; processProperty ( key, value ) ; } }",
        "protected void processProperties ( Map < String, String > properties ) { for ( Entry < String, String > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ). toString ( ) ; String value = entry. getValue ( ). toString ( ) ; processProperty ( key, value ) ; } }",
        "protected void processProperties ( Map < String, Object > properties ) { for ( Entry < String, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "protected void processProperties ( Map < String, String > properties ) { for ( Entry < String, String > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; processProperty ( key, value ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ). toString ( ) ; String value = entry. getValue ( ). toString ( ) ; processProperty ( key, value ) ; } }",
        "protected void processProperties ( Map < String, String > properties ) { for ( Entry < String, String > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "protected void processProperties ( Map < String, String > properties ) { for ( Entry < String, String > entry : properties. entrySet ( ) ) { String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; if ( value!= null ) { processProperty ( key, value ) ; } } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( ( String ) entry. getKey ( ), ( String ) entry. getValue ( ) ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { processProperty ( entry. getKey ( ), entry. getValue ( ) ) ; } }",
        "protected void processProperties ( Properties properties ) { for ( Entry < Object, Object > entry : properties. entrySet ( ) ) { process ( entry. getKey ( ), entry. getValue ( ) ) ; } }"
      ]
    },
    "Cli_32_/src/main/java/org/apache/commons/cli/HelpFormatter.java_937-939": {
      "loc": "937-939",
      "input": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width; while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { ++pos; } return pos == text.length() ? -1 : pos; }",
      "target": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width; return pos == text.length() ? -1 : pos; }",
      "function range": "902,5-943,5",
      "raw_output": [
        "private int findWordWrapStart ( int pos ) { while ( pos < input. length ( ) ) { if ( input. charAt ( pos ) =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "private int findWrapStart ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? pos : input. length ( ) ; }",
        "private int findWordWrapStart ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? pos : input. length ( ) ; }",
        "private int findWordWrapStart ( int pos ) { while ( pos < input. length ( ) ) { char c = input. charAt ( pos ) ; if ( c =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "private int findWordWrapStart ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? input. charAt ( pos ) : pos ; }",
        "private static int findWrapStart ( int pos, String word ) { for ( int i = pos ; i < word. length ( ) ; i ++ ) { if ( word. charAt ( i ) =='' ) { return i ; } } return - 1 ; }",
        "private static int findWrapStart ( int pos, String word ) { for ( int i = 0 ; i < word. length ( ) ; i ++ ) { if ( word. charAt ( i ) =='' ) { return pos ; } } return - 1 ; }",
        "private static int findWrapStart ( int pos, String word ) { for ( int i = 0 ; i < word. length ( ) ; i ++ ) { if ( word. charAt ( i ) =='' ) { pos = i + 1 ; break ; } } return pos ; }",
        "private static int findWrapStart ( int pos, String word ) { for ( int i = 0 ; i < word. length ( ) ; i ++ ) { if ( word. charAt ( i ) =='' ) { pos = i ; break ; } } return pos ; }",
        "private static int findWrapStart ( int pos, String word ) { for ( int i = 0 ; i < word. length ( ) ; i ++ ) { if ( word. charAt ( i ) =='' ) { return i ; } } return - 1 ; }",
        "private int findWrapStart ( int pos ) { for ( int i = 0 ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ] == pos ) { return i ; } } return - 1 ; }",
        "private int findWrapStart ( int pos ) { for ( int i = pos ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ] == pos ) { return i ; } } return - 1 ; }",
        "private int findWrapStart ( int pos ) { for ( int i = pos ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ] == 0 ) { return i ; } } return - 1 ; }",
        "private int findWordWrapStart ( int pos ) { for ( int i = pos ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ] == pos ) { return i ; } } return - 1 ; }",
        "private int findWrapStart ( int pos ) { for ( int i = pos ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ]!= 0 ) { return i ; } } return - 1 ; }",
        "private int findWrapStart ( int pos ) { while ( pos < input. length ( ) ) { if ( input. charAt ( pos ) =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "private int findWrapStart ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? pos : input. length ( ) ; }",
        "private int findWordWrapStart ( int pos ) { while ( pos < input. length ( ) ) { if ( input. charAt ( pos ) =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "private int findWrapStart ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? input. charAt ( pos ) : pos ; }",
        "private int findWrapStart ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? input. charAt ( pos ) : - 1 ; }",
        "private int findWrapStart ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? pos : input. length ( ) ; }",
        "private int findWordWrapStart ( int pos ) { while ( pos < input. length ( ) ) { if ( input. charAt ( pos ) =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "private int findWordWrapStart ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? pos : input. length ( ) ; }",
        "private int findWrapStart ( int pos ) { while ( pos < input. length ( ) ) { char c = input. charAt ( pos ) ; if ( c =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "private int findWrapStart ( int pos ) { for ( int i = pos ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ]!= 0 ) { return i ; } } return - 1 ; }"
      ],
      "mid_translation": [
        "Finds the start of a word wrap at a given position in a string.",
        "Finds the start of a word wrap at a certain position in a string.",
        "Finds the start of a word wrap at a given position.",
        "Find the start of a word wrap at a given position in a string.",
        "Finds the start of a word wrap at a specified position in a string."
      ],
      "output": [
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) ) { if ( input. charAt ( pos ) =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? pos : input. length ( ) ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? pos : input. length ( ) ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) ) { char c = input. charAt ( pos ) ; if ( c =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? input. charAt ( pos ) : pos ; }",
        "protected int findWrapPos ( int pos, String word ) { for ( int i = pos ; i < word. length ( ) ; i ++ ) { if ( word. charAt ( i ) =='' ) { return i ; } } return - 1 ; }",
        "protected int findWrapPos ( int pos, String word ) { for ( int i = 0 ; i < word. length ( ) ; i ++ ) { if ( word. charAt ( i ) =='' ) { return pos ; } } return - 1 ; }",
        "protected int findWrapPos ( int pos, String word ) { for ( int i = 0 ; i < word. length ( ) ; i ++ ) { if ( word. charAt ( i ) =='' ) { pos = i + 1 ; break ; } } return pos ; }",
        "protected int findWrapPos ( int pos, String word ) { for ( int i = 0 ; i < word. length ( ) ; i ++ ) { if ( word. charAt ( i ) =='' ) { pos = i ; break ; } } return pos ; }",
        "protected int findWrapPos ( int pos, String word ) { for ( int i = 0 ; i < word. length ( ) ; i ++ ) { if ( word. charAt ( i ) =='' ) { return i ; } } return - 1 ; }",
        "protected int findWrapPos ( int pos ) { for ( int i = 0 ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ] == pos ) { return i ; } } return - 1 ; }",
        "protected int findWrapPos ( int pos ) { for ( int i = pos ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ] == pos ) { return i ; } } return - 1 ; }",
        "protected int findWrapPos ( int pos ) { for ( int i = pos ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ] == 0 ) { return i ; } } return - 1 ; }",
        "protected int findWrapPos ( int pos ) { for ( int i = pos ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ] == pos ) { return i ; } } return - 1 ; }",
        "protected int findWrapPos ( int pos ) { for ( int i = pos ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ]!= 0 ) { return i ; } } return - 1 ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) ) { if ( input. charAt ( pos ) =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? pos : input. length ( ) ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) ) { if ( input. charAt ( pos ) =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? input. charAt ( pos ) : pos ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? input. charAt ( pos ) : - 1 ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? pos : input. length ( ) ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) ) { if ( input. charAt ( pos ) =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) && input. charAt ( pos ) =='' ) pos ++ ; return pos < input. length ( )? pos : input. length ( ) ; }",
        "protected int findWrapPos ( int pos ) { while ( pos < input. length ( ) ) { char c = input. charAt ( pos ) ; if ( c =='' ) { pos ++ ; } else { break ; } } return pos ; }",
        "protected int findWrapPos ( int pos ) { for ( int i = pos ; i < wordWrappers. length ; i ++ ) { if ( wordWrappers [ i ]!= 0 ) { return i ; } } return - 1 ; }"
      ]
    },
    "Cli_40_/src/main/java/org/apache/commons/cli/TypeHandler.java_103-104": {
      "loc": "103-104",
      "input": "@SuppressWarnings(\"unchecked\") public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else { return null; } }",
      "target": "@SuppressWarnings(\"unchecked\") public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else { throw new ParseException(\"Unable to handle the class: \" + clazz); } }",
      "function range": "62,5-105,5",
      "raw_output": [
        "public static String createPatternValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } StringBuffer buf = new StringBuffer ( ) ; buf. append ( pattern ) ; buf. append ('' ) ; buf. append ( value ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "public static String createPatternValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } StringBuffer buf = new StringBuffer ( ) ; buf. append ( pattern ) ; buf. append ('' ) ; buf. append ( value. toString ( ) ) ; return buf. toString ( ) ; }",
        "public static String createPatternValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } StringBuffer buf = new StringBuffer ( ) ; buf. append ( pattern ) ; buf. append ( \"=\" ) ; buf. append ( value. toString ( ) ) ; return buf. toString ( ) ; }",
        "public static String createPatternValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } StringBuffer buf = new StringBuffer ( pattern. length ( ) ) ; buf. append ( pattern ) ; buf. append ('' ) ; buf. append ( value. toString ( ) ) ; return buf. toString ( ) ; }",
        "public static String createPatternValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } StringBuffer buf = new StringBuffer ( ) ; buf. append ( pattern ) ; buf. append ( value. toString ( ) ) ; return buf. toString ( ) ; }",
        "public static Object fromString ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return value ; } if ( value. charAt ( 0 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } if ( value. charAt ( value. length ( ) - 1 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } return value ; }",
        "public static Object valueOf ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return value ; } if ( value. charAt ( 0 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } if ( value. charAt ( value. length ( ) - 1 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } return value ; }",
        "public static Object valueOf ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return value ; } if ( value. charAt ( 0 ) =='' && value. charAt ( value. length ( ) - 1 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } return value ; }",
        "public static Object fromString ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return value ; } if ( value. charAt ( 0 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } return value ; }",
        "public static Object fromString ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return value ; } if ( value. charAt ( 0 ) =='' ) { return value. substring ( 1 ) ; } return value ; }",
        "public static String createPatternValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } return pattern ; }",
        "public static String createPatternValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } return pattern. substring ( 0, pattern. length ( ) - 1 ) ; }",
        "public static String createPatternValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } return pattern ; }",
        "public static String createPatternValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } return pattern ; }",
        "public static String createPatternValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } return pattern ; }",
        "public static OptionValue ofPattern ( String pattern ) { OptionValue value = new OptionValue ( ) ; value. setPattern ( pattern ) ; return value ; }",
        "public static OptionValue ofPattern ( String pattern ) { OptionValue value = new OptionValue ( ) ; value. setValue ( pattern ) ; return value ; }",
        "public static OptionValue ofPattern ( String pattern ) { OptionValue value = new OptionValue ( ) ; value. pattern = pattern ; return value ; }",
        "public static < T > T createPatternValue ( Class < T > type, String value ) { return createPatternValue ( type, value, null ) ; }",
        "public static OptionValue ofPattern ( String pattern ) { OptionValue value = new OptionValue ( ) ; value. setName ( pattern ) ; return value ; }",
        "public static Value from ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return new NullValue ( ) ; } if ( value. charAt ( 0 ) =='' && value. charAt ( value. length ( ) - 1 ) =='' ) { value = value. substring ( 1, value. length ( ) - 1 ) ; } if ( value. charAt ( 0 ) =='' && value. charAt ( value. length ( ) - 1 ) =='' ) { value = value. substring ( 1, value. length ( ) - 1 ) ; } if ( value. charAt ( 0 ) =='' && value. charAt ( value. length ( ) - 1 ) =='' ) { value = value. substring ( 1, value. length ( ) - 1 ) ; } return new Value ( value ) ; }",
        "public static Value from ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return new NullValue ( ) ; } if ( value. charAt ( 0 ) =='' && value. charAt ( value. length ( ) - 1 ) =='' ) { value = value. substring ( 1, value. length ( ) - 1 ) ; } return new Value ( value ) ; }",
        "public static Value from ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return new NullValue ( ) ; } try { return new Value ( value ) ; } catch ( ClassCastException e ) { return new NullValue ( value ) ; } }",
        "public static Value from ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return new NullValue ( ) ; } try { return new Value ( value ) ; } catch ( ClassCastException e ) { return new NullValue ( ) ; } }",
        "public static Value from ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return new NullValue ( ) ; } return new Value ( value ) ; }"
      ],
      "mid_translation": [
        "Create a value of a pattern option.",
        "Create a value from a string.",
        "Create a value for a pattern option.",
        "Create a new value of a pattern option.",
        "Create a value from the given string."
      ],
      "output": [
        "@SuppressWarnings(\"unchecked\") public static String createValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } StringBuffer buf = new StringBuffer ( ) ; buf. append ( pattern ) ; buf. append ('' ) ; buf. append ( value ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "@SuppressWarnings(\"unchecked\") public static String createValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } StringBuffer buf = new StringBuffer ( ) ; buf. append ( pattern ) ; buf. append ('' ) ; buf. append ( value. toString ( ) ) ; return buf. toString ( ) ; }",
        "@SuppressWarnings(\"unchecked\") public static String createValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } StringBuffer buf = new StringBuffer ( ) ; buf. append ( pattern ) ; buf. append ( \"=\" ) ; buf. append ( value. toString ( ) ) ; return buf. toString ( ) ; }",
        "@SuppressWarnings(\"unchecked\") public static String createValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } StringBuffer buf = new StringBuffer ( pattern. length ( ) ) ; buf. append ( pattern ) ; buf. append ('' ) ; buf. append ( value. toString ( ) ) ; return buf. toString ( ) ; }",
        "@SuppressWarnings(\"unchecked\") public static String createValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } StringBuffer buf = new StringBuffer ( ) ; buf. append ( pattern ) ; buf. append ( value. toString ( ) ) ; return buf. toString ( ) ; }",
        "@SuppressWarnings(\"unchecked\") public static Object createValue ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return value ; } if ( value. charAt ( 0 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } if ( value. charAt ( value. length ( ) - 1 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } return value ; }",
        "@SuppressWarnings(\"unchecked\") public static Object createValue ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return value ; } if ( value. charAt ( 0 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } if ( value. charAt ( value. length ( ) - 1 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } return value ; }",
        "@SuppressWarnings(\"unchecked\") public static Object createValue ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return value ; } if ( value. charAt ( 0 ) =='' && value. charAt ( value. length ( ) - 1 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } return value ; }",
        "@SuppressWarnings(\"unchecked\") public static Object createValue ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return value ; } if ( value. charAt ( 0 ) =='' ) { return value. substring ( 1, value. length ( ) - 1 ) ; } return value ; }",
        "@SuppressWarnings(\"unchecked\") public static Object createValue ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return value ; } if ( value. charAt ( 0 ) =='' ) { return value. substring ( 1 ) ; } return value ; }",
        "@SuppressWarnings(\"unchecked\") public static String createValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } return pattern ; }",
        "@SuppressWarnings(\"unchecked\") public static String createValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } return pattern. substring ( 0, pattern. length ( ) - 1 ) ; }",
        "@SuppressWarnings(\"unchecked\") public static String createValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( pattern. length ( ) - 1 ) =='' ) { return pattern. substring ( 0, pattern. length ( ) - 1 ) ; } return pattern ; }",
        "@SuppressWarnings(\"unchecked\") public static String createValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } return pattern ; }",
        "@SuppressWarnings(\"unchecked\") public static String createValue ( String pattern, Object value ) { if ( pattern == null ) { return null ; } if ( value == null ) { return \"\" ; } if ( pattern. length ( ) == 0 ) { return pattern ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } if ( pattern. charAt ( 0 ) =='' ) { return pattern. substring ( 1, pattern. length ( ) - 1 ) ; } return pattern ; }",
        "@SuppressWarnings(\"unchecked\") public static OptionValue createValue ( String pattern ) { OptionValue value = new OptionValue ( ) ; value. setPattern ( pattern ) ; return value ; }",
        "@SuppressWarnings(\"unchecked\") public static OptionValue createValue ( String pattern ) { OptionValue value = new OptionValue ( ) ; value. setValue ( pattern ) ; return value ; }",
        "@SuppressWarnings(\"unchecked\") public static OptionValue createValue ( String pattern ) { OptionValue value = new OptionValue ( ) ; value. pattern = pattern ; return value ; }",
        "@SuppressWarnings(\"unchecked\") public static < T > T createValue ( Class < T > type, String value ) { return createPatternValue ( type, value, null ) ; }",
        "@SuppressWarnings(\"unchecked\") public static OptionValue createValue ( String pattern ) { OptionValue value = new OptionValue ( ) ; value. setName ( pattern ) ; return value ; }",
        "@SuppressWarnings(\"unchecked\") public static Value createValue ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return new NullValue ( ) ; } if ( value. charAt ( 0 ) =='' && value. charAt ( value. length ( ) - 1 ) =='' ) { value = value. substring ( 1, value. length ( ) - 1 ) ; } if ( value. charAt ( 0 ) =='' && value. charAt ( value. length ( ) - 1 ) =='' ) { value = value. substring ( 1, value. length ( ) - 1 ) ; } if ( value. charAt ( 0 ) =='' && value. charAt ( value. length ( ) - 1 ) =='' ) { value = value. substring ( 1, value. length ( ) - 1 ) ; } return new Value ( value ) ; }",
        "@SuppressWarnings(\"unchecked\") public static Value createValue ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return new NullValue ( ) ; } if ( value. charAt ( 0 ) =='' && value. charAt ( value. length ( ) - 1 ) =='' ) { value = value. substring ( 1, value. length ( ) - 1 ) ; } return new Value ( value ) ; }",
        "@SuppressWarnings(\"unchecked\") public static Value createValue ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return new NullValue ( ) ; } try { return new Value ( value ) ; } catch ( ClassCastException e ) { return new NullValue ( value ) ; } }",
        "@SuppressWarnings(\"unchecked\") public static Value createValue ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return new NullValue ( ) ; } try { return new Value ( value ) ; } catch ( ClassCastException e ) { return new NullValue ( ) ; } }",
        "@SuppressWarnings(\"unchecked\") public static Value createValue ( String value ) { if ( value == null ) { return null ; } if ( value. length ( ) == 0 ) { return new NullValue ( ) ; } return new Value ( value ) ; }"
      ]
    },
    "Closure_1_/src/com/google/javascript/jscomp/RemoveUnusedVars.java_379-380": {
      "loc": "379-380",
      "input": "private void removeUnreferencedFunctionArgs(Scope fnScope) { <mask> Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
      "target": "private void removeUnreferencedFunctionArgs(Scope fnScope) { if (!removeGlobals) { return; } Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
      "function range": "369,3-406,3",
      "raw_output": [
        "private void removeArguments ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isGetProp ( ) && right. isGetProp ( ) ) { Node leftValue = left. getFirstChild ( ) ; Node rightValue = right. getLastChild ( ) ; if ( leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && right",
        "private void removeArguments ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isGetProp ( ) && right. isGetProp ( ) ) { Node leftValue = left. getFirstChild ( ) ; Node rightValue = right. getLastChild ( ) ; if ( leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && right",
        "private void removeArguments ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isGetProp ( ) && right. isGetProp ( ) ) { Node leftValue = left. getFirstChild ( ) ; Node rightValue = right. getLastChild ( ) ; if ( leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && left",
        "private void removeArguments ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isGetProp ( ) && right. isGetProp ( ) ) { Node leftValue = left. getFirstChild ( ) ; Node rightValue = right. getLastChild ( ) ; if ( leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && left",
        "private void removeArguments ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isGetProp ( ) && right. isGetProp ( ) ) { Node leftValue = left. getFirstChild ( ) ; Node rightValue = right. getLastChild ( ) ; if ( leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && left",
        "private void removeArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } }",
        "private void removeArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } args = null ; }",
        "private void removeArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ]. remove ( ) ; } } }",
        "private void removeArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; break ; } } }",
        "private void removeArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ] == null ) { args [ i ] = null ; break ; } } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T, R > R remove ( Function < T, R > function ) { return ( R ) function. getArguments ( ). remove ( function. getArguments ( ). get ( 0 ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T, R > R remove ( Function < T, R > function ) { return ( R ) function. getArguments ( ). remove ( function. getArguments ( ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T, R > R remove ( Function < T, R > function ) { return ( R ) function. getArguments ( ). remove ( function. getArguments ( ). remove ( 0 ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T, R > R remove ( Function < T, R > function ) { return ( R ) remove ( function. getArguments ( ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T remove ( Function < T, T > function ) { return ( T ) remove ( function. getArguments ( ) ) ; }",
        "private void removeReferences ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ]. removeReference ( ) ; } } }",
        "private void removeReferencedArguments ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ]. removeReferencedArgument ( ) ; } } }",
        "private void removeReferences ( ) { for ( int i = 0 ; i < arguments. length ; i ++ ) { if ( arguments [ i ]!= null ) { arguments [ i ]. removeReference ( ) ; } } }",
        "private void removeReferencedArguments ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ]. removeReferencedArguments ( ) ; } } }",
        "private void removeReferences ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } }",
        "private void removeArguments ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } }",
        "private void removeReferencedArguments ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } }",
        "private void removeReferences ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } }",
        "private void removeArguments ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; break ; } } }",
        "private void removeArguments ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ]. remove ( ) ; } } }"
      ],
      "mid_translation": [
        "Remove referenced arguments from a function call.",
        "Remove referenced arguments from the function.",
        "Remove referenced arguments from a function.",
        "Remove referenced arguments from the function",
        "Remove the referenced arguments from the function."
      ],
      "output": [
        "private void removeUnreferencedFunctionArgs ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isGetProp ( ) && right. isGetProp ( ) ) { Node leftValue = left. getFirstChild ( ) ; Node rightValue = right. getLastChild ( ) ; if ( leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && right",
        "private void removeUnreferencedFunctionArgs ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isGetProp ( ) && right. isGetProp ( ) ) { Node leftValue = left. getFirstChild ( ) ; Node rightValue = right. getLastChild ( ) ; if ( leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && right",
        "private void removeUnreferencedFunctionArgs ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isGetProp ( ) && right. isGetProp ( ) ) { Node leftValue = left. getFirstChild ( ) ; Node rightValue = right. getLastChild ( ) ; if ( leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && left",
        "private void removeUnreferencedFunctionArgs ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isGetProp ( ) && right. isGetProp ( ) ) { Node leftValue = left. getFirstChild ( ) ; Node rightValue = right. getLastChild ( ) ; if ( leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && left",
        "private void removeUnreferencedFunctionArgs ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isGetProp ( ) && right. isGetProp ( ) ) { Node leftValue = left. getFirstChild ( ) ; Node rightValue = right. getLastChild ( ) ; if ( leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && leftValue. isString ( ) && rightValue. isString ( ) && left",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } args = null ; }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ]. remove ( ) ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; break ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ] == null ) { args [ i ] = null ; break ; } } }",
        "private < T, R > R removeUnreferencedFunctionArgs ( Function < T, R > function ) { return ( R ) function. getArguments ( ). remove ( function. getArguments ( ). get ( 0 ) ) ; }",
        "private < T, R > R removeUnreferencedFunctionArgs ( Function < T, R > function ) { return ( R ) function. getArguments ( ). remove ( function. getArguments ( ) ) ; }",
        "private < T, R > R removeUnreferencedFunctionArgs ( Function < T, R > function ) { return ( R ) function. getArguments ( ). remove ( function. getArguments ( ). remove ( 0 ) ) ; }",
        "private < T, R > R removeUnreferencedFunctionArgs ( Function < T, R > function ) { return ( R ) remove ( function. getArguments ( ) ) ; }",
        "private < T > T removeUnreferencedFunctionArgs ( Function < T, T > function ) { return ( T ) remove ( function. getArguments ( ) ) ; }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ]. removeReference ( ) ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ]. removeReferencedArgument ( ) ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < arguments. length ; i ++ ) { if ( arguments [ i ]!= null ) { arguments [ i ]. removeReference ( ) ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ]. removeReferencedArguments ( ) ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ] = null ; break ; } } }",
        "private void removeUnreferencedFunctionArgs ( ) { for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]!= null ) { args [ i ]. remove ( ) ; } } }"
      ]
    },
    "Closure_5_/src/com/google/javascript/jscomp/InlineObjectLiterals.java_176-177": {
      "loc": "176-177",
      "input": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; } <mask> String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; }",
      "target": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; } if (gramps.isDelProp()) { return false; } String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; }",
      "function range": "155,5-253,5",
      "raw_output": [
        "public boolean isInlinable ( List <? > objects ) { if ( objects == null || objects. size ( ) == 0 ) { return false ; } for ( Object object : objects ) { if (! isInlinable ( object ) ) { return false ; } } return true ; }",
        "public boolean isInlinable ( List <? > objects ) { if ( objects == null || objects. isEmpty ( ) ) { return false ; } for ( Object object : objects ) { if (! isInlinable ( object ) ) { return false ; } } return true ; }",
        "public boolean isInlinable ( List <? > objects ) { if ( objects == null || objects. size ( ) == 0 ) { return false ; } for ( Object object : objects ) { if ( isInlinable ( object ) ) { return true ; } } return false ; }",
        "public boolean isInlinable ( Iterable <? > objects ) { if ( objects == null ) { return false ; } for ( Object object : objects ) { if (! isInlinable ( object ) ) { return false ; } } return true ; }",
        "public static boolean isInlinable ( Iterable <? > objects ) { if ( objects == null ) { return false ; } for ( Object object : objects ) { if (! isInlinable ( object ) ) { return false ; } } return true ; }",
        "@ SuppressWarnings ( \"rawtypes\" ) public Map < String, Object > inline ( Map < String, Object > map ) { Map < String, Object > result = new HashMap <> ( ) ; for ( String key : map. keySet ( ) ) { Object value = map. get ( key ) ; if ( value == null ) { result. put ( key, value ) ; } else { result. put ( key, value ) ; } } return result ; }",
        "@ SuppressWarnings ( \"rawtypes\" ) public Map < String, Object > inline ( Map < String, Object > map ) { Map < String, Object > result = new HashMap <> ( ) ; for ( Entry < String, Object > entry : map. entrySet ( ) ) { String key = entry. getKey ( ) ; Object value = entry. getValue ( ) ; result. put ( key, value ) ; } return result ; }",
        "@ SuppressWarnings ( \"rawtypes\" ) public Map < String, Object > inline ( Map < String, Object > map ) { Map < String, Object > result = new HashMap <> ( ) ; for ( String key : map. keySet ( ) ) { Object value = map. get ( key ) ; if ( value == null ) { result. put ( key, null ) ; } else { result. put ( key, value ) ; } } return result ; }",
        "@ SuppressWarnings ( \"rawtypes\" ) public Map < String, Object > inline ( Map < String, Object > map ) { Map < String, Object > result = new HashMap <> ( ) ; for ( String key : map. keySet ( ) ) { Object value = map. get ( key ) ; if ( value!= null ) { result. put ( key, value ) ; } } return result ; }",
        "@ SuppressWarnings ( \"rawtypes\" ) public Map < String, Object > inline ( Map < String, Object > map ) { Map < String, Object > result = new HashMap <> ( ) ; for ( Entry < String, Object > entry : map. entrySet ( ) ) { result. put ( entry. getKey ( ), inline ( entry. getValue ( ) ) ) ; } return result ; }",
        "private boolean isInlinable ( List < Reference > references ) { if ( references. isEmpty ( ) ) { return false ; } for ( Reference reference : references ) { if (! isInlinable ( reference ) ) { return false ; } } return true ; }",
        "private boolean isInlinable ( List < Reference > references ) { if ( references. isEmpty ( ) ) { return false ; } for ( Reference reference : references ) { if ( isInlinable ( reference ) ) { return true ; } } return false ; }",
        "private boolean isInlinable ( List < Reference > references ) { if ( references. isEmpty ( ) ) { return false ; } for ( Reference reference : references ) { if ( reference. isInlinable ( ) ) { return true ; } } return false ; }",
        "private boolean isInlinable ( List < Reference > references ) { for ( Reference reference : references ) { if ( reference. isInlinable ( ) ) { return true ; } } return false ; }",
        "private boolean isInlinable ( List < Reference > references ) { if ( references. isEmpty ( ) ) { return false ; } for ( Reference reference : references ) { if ( inlinable ( reference ) ) { return true ; } } return false ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T asObject ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } if ( this. map == null ) { this. map = new HashMap <> ( ) ; } return ( T ) this. map. get ( clazz ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T toObject ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } if ( this. map == null ) { this. map = new HashMap <> ( ) ; } return ( T ) this. map. get ( clazz ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T toObject ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( this. map == null ) { this. map = new HashMap <> ( ) ; } return ( T ) this. map. get ( clazz ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T asObject ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } return ( T ) this. clazz. newInstance ( ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T asObject ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } return ( T ) this. clazz. cast ( clazz ) ; }",
        "private boolean isInlinable ( List < Reference > references ) { if ( references. isEmpty ( ) ) { return false ; } for ( Reference reference : references ) { if (! isInlinable ( reference ) ) { return false ; } } return true ; }",
        "private boolean inlinableReferences ( List < Reference > references ) { for ( Reference reference : references ) { if (! inlinableReferences ( reference ) ) { return false ; } } return true ; }",
        "private boolean inlinableReferences ( List < Reference > references ) { for ( Reference reference : references ) { if ( inlinableReferences ( reference ) ) { return true ; } } return false ; }",
        "private boolean isInlinable ( List < Reference > references ) { for ( Reference reference : references ) { if ( reference. isInlinable ( ) ) { return true ; } } return false ; }",
        "private boolean inlinableReferences ( List < Ref > references ) { for ( Ref ref : references ) { if (! inlinableReferences ( ref ) ) { return false ; } } return true ; }"
      ],
      "mid_translation": [
        "Given a list of objects return true if the object is inlinable.",
        "inlinable objects.",
        "Given a list of references return true if the reference is inlinable.",
        "inlinable object.",
        "Given a list of references return true if the references are inlinable."
      ],
      "output": [
        "private boolean isInlinableObject ( List <? > objects ) { if ( objects == null || objects. size ( ) == 0 ) { return false ; } for ( Object object : objects ) { if (! isInlinable ( object ) ) { return false ; } } return true ; }",
        "private boolean isInlinableObject ( List <? > objects ) { if ( objects == null || objects. isEmpty ( ) ) { return false ; } for ( Object object : objects ) { if (! isInlinable ( object ) ) { return false ; } } return true ; }",
        "private boolean isInlinableObject ( List <? > objects ) { if ( objects == null || objects. size ( ) == 0 ) { return false ; } for ( Object object : objects ) { if ( isInlinable ( object ) ) { return true ; } } return false ; }",
        "private boolean isInlinableObject ( Iterable <? > objects ) { if ( objects == null ) { return false ; } for ( Object object : objects ) { if (! isInlinable ( object ) ) { return false ; } } return true ; }",
        "private boolean isInlinableObject ( Iterable <? > objects ) { if ( objects == null ) { return false ; } for ( Object object : objects ) { if (! isInlinable ( object ) ) { return false ; } } return true ; }",
        "private Map < String, Object > isInlinableObject ( Map < String, Object > map ) { Map < String, Object > result = new HashMap <> ( ) ; for ( String key : map. keySet ( ) ) { Object value = map. get ( key ) ; if ( value == null ) { result. put ( key, value ) ; } else { result. put ( key, value ) ; } } return result ; }",
        "private Map < String, Object > isInlinableObject ( Map < String, Object > map ) { Map < String, Object > result = new HashMap <> ( ) ; for ( Entry < String, Object > entry : map. entrySet ( ) ) { String key = entry. getKey ( ) ; Object value = entry. getValue ( ) ; result. put ( key, value ) ; } return result ; }",
        "private Map < String, Object > isInlinableObject ( Map < String, Object > map ) { Map < String, Object > result = new HashMap <> ( ) ; for ( String key : map. keySet ( ) ) { Object value = map. get ( key ) ; if ( value == null ) { result. put ( key, null ) ; } else { result. put ( key, value ) ; } } return result ; }",
        "private Map < String, Object > isInlinableObject ( Map < String, Object > map ) { Map < String, Object > result = new HashMap <> ( ) ; for ( String key : map. keySet ( ) ) { Object value = map. get ( key ) ; if ( value!= null ) { result. put ( key, value ) ; } } return result ; }",
        "private Map < String, Object > isInlinableObject ( Map < String, Object > map ) { Map < String, Object > result = new HashMap <> ( ) ; for ( Entry < String, Object > entry : map. entrySet ( ) ) { result. put ( entry. getKey ( ), inline ( entry. getValue ( ) ) ) ; } return result ; }",
        "private boolean isInlinableObject ( List < Reference > references ) { if ( references. isEmpty ( ) ) { return false ; } for ( Reference reference : references ) { if (! isInlinable ( reference ) ) { return false ; } } return true ; }",
        "private boolean isInlinableObject ( List < Reference > references ) { if ( references. isEmpty ( ) ) { return false ; } for ( Reference reference : references ) { if ( isInlinable ( reference ) ) { return true ; } } return false ; }",
        "private boolean isInlinableObject ( List < Reference > references ) { if ( references. isEmpty ( ) ) { return false ; } for ( Reference reference : references ) { if ( reference. isInlinable ( ) ) { return true ; } } return false ; }",
        "private boolean isInlinableObject ( List < Reference > references ) { for ( Reference reference : references ) { if ( reference. isInlinable ( ) ) { return true ; } } return false ; }",
        "private boolean isInlinableObject ( List < Reference > references ) { if ( references. isEmpty ( ) ) { return false ; } for ( Reference reference : references ) { if ( inlinable ( reference ) ) { return true ; } } return false ; }",
        "private < T > T isInlinableObject ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } if ( this. map == null ) { this. map = new HashMap <> ( ) ; } return ( T ) this. map. get ( clazz ) ; }",
        "private < T > T isInlinableObject ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } if ( this. map == null ) { this. map = new HashMap <> ( ) ; } return ( T ) this. map. get ( clazz ) ; }",
        "private < T > T isInlinableObject ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( this. map == null ) { this. map = new HashMap <> ( ) ; } return ( T ) this. map. get ( clazz ) ; }",
        "private < T > T isInlinableObject ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } return ( T ) this. clazz. newInstance ( ) ; }",
        "private < T > T isInlinableObject ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"Class must not be null\" ) ; } return ( T ) this. clazz. cast ( clazz ) ; }",
        "private boolean isInlinableObject ( List < Reference > references ) { if ( references. isEmpty ( ) ) { return false ; } for ( Reference reference : references ) { if (! isInlinable ( reference ) ) { return false ; } } return true ; }",
        "private boolean isInlinableObject ( List < Reference > references ) { for ( Reference reference : references ) { if (! inlinableReferences ( reference ) ) { return false ; } } return true ; }",
        "private boolean isInlinableObject ( List < Reference > references ) { for ( Reference reference : references ) { if ( inlinableReferences ( reference ) ) { return true ; } } return false ; }",
        "private boolean isInlinableObject ( List < Reference > references ) { for ( Reference reference : references ) { if ( reference. isInlinable ( ) ) { return true ; } } return false ; }",
        "private boolean isInlinableObject ( List < Ref > references ) { for ( Ref ref : references ) { if (! inlinableReferences ( ref ) ) { return false ; } } return true ; }"
      ]
    },
    "Closure_10_/src/com/google/javascript/jscomp/NodeUtil.java_1417-1418": {
      "loc": "1417-1418",
      "input": "static boolean mayBeString(Node n, boolean recurse) { if (recurse) { return allResultsMatch(n, MAY_BE_STRING_PREDICATE); } else { return mayBeStringHelper(n); } }",
      "target": "static boolean mayBeString(Node n, boolean recurse) { if (recurse) { return anyResultsMatch(n, MAY_BE_STRING_PREDICATE); } else { return mayBeStringHelper(n); } }",
      "function range": "1415,3-1421,3",
      "raw_output": [
        "public static boolean isString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isString ( ( ( Element ) node ). getFirstChild ( ) ) ; } return false ; }",
        "public static boolean isString ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : return true ; default : return false ; } }",
        "public static boolean isString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return ( ( Element ) node ). isString ( ) ; } return false ; }",
        "public static boolean isString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return ( ( Text ) node ). isString ( ) ; } return false ; }",
        "public static boolean isString ( Node n ) { if ( n == null ) { return false ; } if ( n. getNodeType ( ) == Node. TEXT_NODE ) { return ( ( Text ) n ). isString ( ) ; } return false ; }",
        "public static boolean isString ( Node node ) { if ( node == null ) return false ; if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) return isString ( ( ( Element ) node ). getFirstChild ( ) ) ; return false ; }",
        "public static boolean isString ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : return true ; default : return false ; } }",
        "public static boolean isString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return ( ( Text ) node ). isString ( ) ; } return false ; }",
        "public static boolean isString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return ( ( Element ) node ). isString ( ) ; } return false ; }",
        "public static boolean isString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return ( ( Text ) node ). getNodeValue ( ) ; } return false ; }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_STRING : return true ; default : return false ; } }",
        "static boolean isNumber ( Node n ) { switch ( n. getToken ( ) ) { case Node. MAY_BE_STRING : case Node. MAY_BE_LONG : case Node. MAY_BE_DOUBLE : return true ; default : return false ; } }",
        "static boolean isNumber ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_LONG : case Token. MAY_BE_DOUBLE : return true ; default : return false ; } }",
        "private static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_STRING : return true ; default : return false ; } }",
        "static boolean isNumber ( Node n ) { switch ( n. getToken ( ) ) { case Node. MAY_BE_STRING : case Node. MAY_BE_LONG : case Node. MAY_BE_DOUBLE : case Node. MAY_BE_STRING : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_STRING : return true ; default : return false ; } }",
        "static boolean isNumber ( Node n ) { switch ( n. getToken ( ) ) { case Node. MAY_BE_STRING : case Node. MAY_BE_LONG : case Node. MAY_BE_DOUBLE : return true ; default : return false ; } }",
        "static boolean isNumber ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_LONG : case Token. MAY_BE_DOUBLE : return true ; default : return false ; } }",
        "private static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_STRING : return true ; default : return false ; } }",
        "static boolean isNumber ( Node n ) { switch ( n. getToken ( ) ) { case Node. MAY_BE_STRING : case Node. MAY_BE_LONG : case Node. MAY_BE_DOUBLE : case Node. MAY_BE_STRING : return true ; default : return false ; } }",
        "public static boolean isString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isString ( ( ( Element ) node ). getFirstChild ( ) ) ; } return false ; }",
        "public static boolean isString ( Node node ) { if ( node == null ) return false ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) return true ; if ( node. getNodeType ( ) == Node. CDATA_SECTION_NODE ) return true ; if ( node. getNodeType ( ) == Node. COMMENT_NODE ) return true ; return false ; }",
        "public static boolean isString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return ( ( Element ) node ). getTagName ( ). equals ( \"string\" ) ; } return false ; }",
        "public static boolean isString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return true ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isString ( ( ( Element ) node ). getFirstChild ( ) ) ; } return false ; }",
        "public static boolean isString ( Node node ) { if ( node == null ) return false ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) return true ; if ( node. getNodeType ( ) == Node. CDATA_SECTION_NODE ) return true ; return false ; }"
      ],
      "mid_translation": [
        "Determines whether the node is a string or not.",
        "Determines whether the node is a string or not",
        "Return true if the node is an MAY_BE_STRING",
        "Returns true if the node is an MAY_BE_STRING",
        "Determines if the node is a string or not."
      ],
      "output": [
        "static boolean mayBeString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isString ( ( ( Element ) node ). getFirstChild ( ) ) ; } return false ; }",
        "static boolean mayBeString ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return ( ( Element ) node ). isString ( ) ; } return false ; }",
        "static boolean mayBeString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return ( ( Text ) node ). isString ( ) ; } return false ; }",
        "static boolean mayBeString ( Node n ) { if ( n == null ) { return false ; } if ( n. getNodeType ( ) == Node. TEXT_NODE ) { return ( ( Text ) n ). isString ( ) ; } return false ; }",
        "static boolean mayBeString ( Node node ) { if ( node == null ) return false ; if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) return isString ( ( ( Element ) node ). getFirstChild ( ) ) ; return false ; }",
        "static boolean mayBeString ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return ( ( Text ) node ). isString ( ) ; } return false ; }",
        "static boolean mayBeString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return ( ( Element ) node ). isString ( ) ; } return false ; }",
        "static boolean mayBeString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return ( ( Text ) node ). getNodeValue ( ) ; } return false ; }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_STRING : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Node. MAY_BE_STRING : case Node. MAY_BE_LONG : case Node. MAY_BE_DOUBLE : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_LONG : case Token. MAY_BE_DOUBLE : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_STRING : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Node. MAY_BE_STRING : case Node. MAY_BE_LONG : case Node. MAY_BE_DOUBLE : case Node. MAY_BE_STRING : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_STRING : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Node. MAY_BE_STRING : case Node. MAY_BE_LONG : case Node. MAY_BE_DOUBLE : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_LONG : case Token. MAY_BE_DOUBLE : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Token. MAY_BE_STRING : case Token. MAY_BE_STRING : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node n ) { switch ( n. getToken ( ) ) { case Node. MAY_BE_STRING : case Node. MAY_BE_LONG : case Node. MAY_BE_DOUBLE : case Node. MAY_BE_STRING : return true ; default : return false ; } }",
        "static boolean mayBeString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isString ( ( ( Element ) node ). getFirstChild ( ) ) ; } return false ; }",
        "static boolean mayBeString ( Node node ) { if ( node == null ) return false ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) return true ; if ( node. getNodeType ( ) == Node. CDATA_SECTION_NODE ) return true ; if ( node. getNodeType ( ) == Node. COMMENT_NODE ) return true ; return false ; }",
        "static boolean mayBeString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return ( ( Element ) node ). getTagName ( ). equals ( \"string\" ) ; } return false ; }",
        "static boolean mayBeString ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return true ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isString ( ( ( Element ) node ). getFirstChild ( ) ) ; } return false ; }",
        "static boolean mayBeString ( Node node ) { if ( node == null ) return false ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) return true ; if ( node. getNodeType ( ) == Node. CDATA_SECTION_NODE ) return true ; return false ; }"
      ]
    },
    "Closure_11_/src/com/google/javascript/jscomp/TypeCheck.java_1314-1316": {
      "loc": "1314-1316",
      "input": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\"); } else if (n.getJSType() != null && parent.isAssign()) { return; } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); }",
      "target": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\"); } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); }",
      "function range": "1303,3-1321,3",
      "raw_output": [
        "private void visitGetProp ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = info. getType ( ) ; if ( type == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType propType = type. toMaybeObjectType ( ). getJSType ( ) ; if ( propType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType paramType = propType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = info. getType ( ) ; if ( type == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType propType = type. toMaybeObjectType ( ). getJSType ( ) ; if ( propType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType paramType = propType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = info. getType ( ) ; if ( type == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType propType = type. toMaybeObjectType ( ). getJSType ( ) ; if ( propType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType paramType = propType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = info. getType ( ) ; if ( type == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType propType = type. toMaybeObjectType ( ). getJSType ( ) ; if ( propType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType paramType = propType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = info. getType ( ) ; if ( type == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType propType = type. toMaybeObjectType ( ). getJSType ( ) ; if ( propType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType paramType = propType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType.",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } getPropType = getPropType",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getProp",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType.",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType.",
        "private void visitGetPropertyAccessNode ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) &&",
        "private void visitGetPropertyAccessNode ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) &&",
        "private void visitGetPropertyAccessNode ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) &&",
        "private void visitGetPropertyAccessNode ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) &&",
        "private void visitGetPropertyAccessNode ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGet",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { JSType type = n. getJSType ( ) ; if ( type!= null && type. isUnknownType ( ) ) { compiler. report ( JSError. make ( n, n. getFirstChild ( ). getString ( ), n. getLastChild ( ). getString ( ) ) ) ; } } }",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { JSType type = n. getJSType ( ) ; if ( type!= null && type. isUnknownType ( ) ) { compiler. report ( JSError. make ( n, n. getString ( ), n. getLastChild ( ). getString ( ) ) ) ; } } }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { JSType type = n. getJSType ( ) ; if ( type. isUnknownType ( ) ) { t. report ( JSError. make ( n, UNKNOWN_TYPE, n. getString ( ) ) ) ; } } }",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { JSType type = n. getJSType ( ) ; if ( type!= null && type. isUnknownType ( ) ) { compiler. report ( JSError. make ( n, n. getString ( ), n. getString ( ) ) ) ; } } }",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { JSType type = n. getJSType ( ) ; if ( type!= null && type. isUnknownType ( ) ) { compiler. report ( JSError. make ( n, n. getFirstChild ( ). getString ( ) ) ) ; } } }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType"
      ],
      "mid_translation": [
        "Visits a GETPROP node.",
        "Visits aGetProp node.",
        "Visits a GET_PROPERTY_ACCESS node.",
        "Visits a GETPROP node. Checks that the value is not null or undefined.",
        "Visits a GETProp node."
      ],
      "output": [
        "private void visitGetProp ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = info. getType ( ) ; if ( type == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType propType = type. toMaybeObjectType ( ). getJSType ( ) ; if ( propType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType paramType = propType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = info. getType ( ) ; if ( type == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType propType = type. toMaybeObjectType ( ). getJSType ( ) ; if ( propType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType paramType = propType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = info. getType ( ) ; if ( type == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType propType = type. toMaybeObjectType ( ). getJSType ( ) ; if ( propType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType paramType = propType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = info. getType ( ) ; if ( type == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType propType = type. toMaybeObjectType ( ). getJSType ( ) ; if ( propType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType paramType = propType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = info. getType ( ) ; if ( type == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType propType = type. toMaybeObjectType ( ). getJSType ( ) ; if ( propType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType paramType = propType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } paramType = paramType. toMaybeObjectType ( ). getJSType ( ) ; if ( paramType == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType.",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } getPropType = getPropType",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getProp",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType.",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType.",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) &&",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) &&",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) &&",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) &&",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). isGet",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { JSType type = n. getJSType ( ) ; if ( type!= null && type. isUnknownType ( ) ) { compiler. report ( JSError. make ( n, n. getFirstChild ( ). getString ( ), n. getLastChild ( ). getString ( ) ) ) ; } } }",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { JSType type = n. getJSType ( ) ; if ( type!= null && type. isUnknownType ( ) ) { compiler. report ( JSError. make ( n, n. getString ( ), n. getLastChild ( ). getString ( ) ) ) ; } } }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { JSType type = n. getJSType ( ) ; if ( type. isUnknownType ( ) ) { t. report ( JSError. make ( n, UNKNOWN_TYPE, n. getString ( ) ) ) ; } } }",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { JSType type = n. getJSType ( ) ; if ( type!= null && type. isUnknownType ( ) ) { compiler. report ( JSError. make ( n, n. getString ( ), n. getString ( ) ) ) ; } } }",
        "private void visitGetProp ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) ) { JSType type = n. getJSType ( ) ; if ( type!= null && type. isUnknownType ( ) ) { compiler. report ( JSError. make ( n, n. getFirstChild ( ). getString ( ) ) ) ; } } }",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType",
        "private void visitGetProp ( NodeTraversal t, Node n ) { if ( n. isGetProp ( ) ) { Node getProp = n. getFirstChild ( ) ; JSType getPropType = getProp. getJSType ( ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType ( ) ) { return ; } JSType getPropType = getPropType ( getProp. getString ( ) ) ; if ( getPropType == null || getPropType. isUnknownType"
      ]
    },
    "Closure_14_/src/com/google/javascript/jscomp/ControlFlowAnalysis.java_767-768": {
      "loc": "767-768",
      "input": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext() != null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling != null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling != null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } }",
      "target": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext() != null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.ON_EX, finallyNode); } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling != null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling != null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } }",
      "function range": "692,3-789,3",
      "raw_output": [
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return next ; }",
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return node ; }",
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } else { return next ; } }",
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; node = next ; } return node ; }",
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } return next ; }",
        "private Node getNextNode ( Node node ) { if ( node == null ) { return null ; } if ( node. next == null ) { return node ; } return node. next ; }",
        "private Node getNextNode ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } else { return next ; } }",
        "private Node getNextNode ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } return next ; }",
        "private static Node getNextNode ( Node node ) { while ( node!= null ) { node = node. getNextNode ( ) ; } return node ; }",
        "public static Node next ( Node node ) { if ( node == null ) return null ; if ( node. next == null ) return node ; return node. next ; }",
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return node ; }",
        "private Node follow ( Node node ) { if ( node. isLeaf ( ) ) { return node ; } else if ( node. isLeaf ( ) ) { return node ; } else if ( node. isLeaf ( ) ) { return node ; } else { return follow ( node ) ; } }",
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } Node prev = next. getNext ( ) ; if ( prev == null ) { return node ; } return prev ; }",
        "private Node follow ( Node node ) { if ( node. isLeaf ( ) ) { return node ; } else if ( node. isLeaf ( ) ) { return node ; } else if ( node. isLeaf ( ) ) { return node ; } else { return node ; } }",
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return next ; }",
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return node ; }",
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return next ; }",
        "private Node follow ( Node node ) { Node next = node. next ; while ( next!= null ) { next = next. next ; } return node ; }",
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; node = next ; } return node ; }",
        "private Node follow ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } else { return next ; } }",
        "protected Node computeFollowingNode ( Node node ) { if ( node == null ) { return null ; } return computeFollowingNode ( node. getParent ( ), node. getLastChild ( ) ) ; }",
        "private Node computeFollowingNode ( Node node ) { if ( node == null ) { return null ; } return computeFollowingNode ( node. getParent ( ), node. getLastChild ( ) ) ; }",
        "protected Node computeFollowingNode ( Node node ) { if ( node == null ) { return null ; } return computeFollowingNode ( node. getParent ( ), node ) ; }",
        "protected Node computeFollowingNode ( Node node ) { if ( node == null ) { return null ; } return computeFollowingNode ( node. getParentNode ( ), node ) ; }",
        "public static Node getNext ( Node node ) { if ( node == null ) return null ; return getNext ( node. getParentNode ( ), node. getLastChild ( ) ) ; }"
      ],
      "mid_translation": [
        "Computes the follow node from the given node.",
        "Computes the next node following the given node.",
        "Computes the follow node of the given node.",
        "Computes the follow node for the given node.",
        "Computes the following node from the given node."
      ],
      "output": [
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return next ; }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return node ; }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } else { return next ; } }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; node = next ; } return node ; }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } return next ; }",
        "private static Node computeFollowNode ( Node node ) { if ( node == null ) { return null ; } if ( node. next == null ) { return node ; } return node. next ; }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } else { return next ; } }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } return next ; }",
        "private static Node computeFollowNode ( Node node ) { while ( node!= null ) { node = node. getNextNode ( ) ; } return node ; }",
        "private static Node computeFollowNode ( Node node ) { if ( node == null ) return null ; if ( node. next == null ) return node ; return node. next ; }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return node ; }",
        "private static Node computeFollowNode ( Node node ) { if ( node. isLeaf ( ) ) { return node ; } else if ( node. isLeaf ( ) ) { return node ; } else if ( node. isLeaf ( ) ) { return node ; } else { return follow ( node ) ; } }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } Node prev = next. getNext ( ) ; if ( prev == null ) { return node ; } return prev ; }",
        "private static Node computeFollowNode ( Node node ) { if ( node. isLeaf ( ) ) { return node ; } else if ( node. isLeaf ( ) ) { return node ; } else if ( node. isLeaf ( ) ) { return node ; } else { return node ; } }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return next ; }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return node ; }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; } return next ; }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. next ; while ( next!= null ) { next = next. next ; } return node ; }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; while ( next!= null ) { next = next. getNext ( ) ; node = next ; } return node ; }",
        "private static Node computeFollowNode ( Node node ) { Node next = node. getNext ( ) ; if ( next == null ) { return node ; } else { return next ; } }",
        "private static Node computeFollowNode ( Node node ) { if ( node == null ) { return null ; } return computeFollowingNode ( node. getParent ( ), node. getLastChild ( ) ) ; }",
        "private static Node computeFollowNode ( Node node ) { if ( node == null ) { return null ; } return computeFollowingNode ( node. getParent ( ), node. getLastChild ( ) ) ; }",
        "private static Node computeFollowNode ( Node node ) { if ( node == null ) { return null ; } return computeFollowingNode ( node. getParent ( ), node ) ; }",
        "private static Node computeFollowNode ( Node node ) { if ( node == null ) { return null ; } return computeFollowingNode ( node. getParentNode ( ), node ) ; }",
        "private static Node computeFollowNode ( Node node ) { if ( node == null ) return null ; return getNext ( node. getParentNode ( ), node. getLastChild ( ) ) ; }"
      ]
    },
    "Closure_15_/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java_102-103": {
      "loc": "102-103",
      "input": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; } <mask> for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; }",
      "target": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; } if (n.isDelProp()) { return true; } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; }",
      "function range": "83,7-109,7",
      "raw_output": [
        "public void apply ( Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { applySideEffects ( node ) ; } else { super. apply ( node ) ; } }",
        "public Node apply ( Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( node ) ; } return node ; }",
        "public ControlFlowNode apply ( ControlFlowNode node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( node ) ; } return node ; }",
        "public Node apply ( Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( node ) ; } else { return node ; } }",
        "public ControlFlowNode apply ( ControlFlowNode node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( node ) ; } else { return node ; } }",
        "public static ControlFlowGraph apply ( ControlFlowGraph graph, Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( graph, node ) ; } return graph ; }",
        "public static ControlFlowGraph apply ( Node node ) { ControlFlowGraph graph = new ControlFlowGraph ( ) ; apply ( node, graph ) ; return graph ; }",
        "public static ControlFlowGraph apply ( ControlFlowGraph graph, Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return graph. apply ( node ) ; } if ( node. isSideEffects ( ) ) { return graph. apply ( node ) ; } return null ; }",
        "public static Node apply ( Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( node ) ; } return node ; }",
        "public static ControlFlowGraph apply ( ControlFlowGraph graph, Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( graph, node ) ; } else { return graph. apply ( node ) ; } }",
        "public static boolean hasSideEffects ( Node n ) { switch ( n. getToken ( ) ) { case NAME : return hasSideEffects ( n. getFirstChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; case GETELEM : return hasSideEffects ( n. getLastChild ( ) ) ; default : return false ; } }",
        "public static boolean hasSideEffects ( Node n ) { switch ( n. getToken ( ) ) { case NAME : return hasSideEffects ( n. getFirstChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; case GETELEM : return hasSideEffects ( n. getLastChild ( ) ) ; case GETELEM : return hasSideEffects ( n. getLastChild ( ) ) ; default : return false ; } }",
        "public static boolean hasSideEffects ( Node n ) { switch ( n. getToken ( ) ) { case NAME : return hasSideEffects ( n. getFirstChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; default : return false ; } }",
        "public static boolean hasSideEffects ( Node n ) { switch ( n. getToken ( ) ) { case NAME : return hasSideEffects ( n. getFirstChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; case GETELEM : return hasSideEffects ( n. getLastChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; default : return false ; } }",
        "public static boolean hasSideEffects ( Node n ) { switch ( n. getToken ( ) ) { case NAME : return hasSideEffects ( n. getFirstChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; case GETPROP_LIST : return hasSideEffects ( n. getLastChild ( ) ) ; case GETELEM : return hasSideEffects ( n. getLastChild ( ) ) ; default : return false ; } }",
        "public ControlFlowGraph apply ( Node node ) { if ( node instanceof ControlFlowGraph ) ( ( ControlFlowGraph ) node ). apply ( this ) ; return this ; }",
        "public ControlFlowGraph apply ( Node node ) { if ( node instanceof ControlFlowGraph ) ( ( ControlFlowGraph ) node ). apply ( node ) ; return this ; }",
        "public ControlFlowGraph apply ( Node node ) { ControlFlowGraph graph = new ControlFlowGraph ( ) ; graph. add ( node ) ; apply ( graph ) ; return graph ; }",
        "public ControlFlowGraph apply ( Node node ) { if ( node instanceof ControlFlowGraph ) ( ( ControlFlowGraph ) node ). apply ( ) ; return this ; }",
        "public ControlFlowGraph apply ( Node node ) { if ( node instanceof ControlFlowGraph ) ( ( ControlFlowGraph ) node ). apply ( this ) ; else throw new IllegalArgumentException ( \"Unknown node type: \" + node ) ; }",
        "public static ControlFlowGraph apply ( ControlFlowGraph graph, Node node ) { if ( node instanceof ControlFlowGraph ) { return ( ( ControlFlowGraph ) node ). apply ( graph ) ; } return graph ; }",
        "public ControlFlowGraph apply ( Node node ) { ControlFlowGraph graph = new ControlFlowGraph ( ) ; graph. add ( node ) ; apply ( graph ) ; return graph ; }",
        "public ControlFlowGraph apply ( Node node ) { ControlFlowGraph graph = new ControlFlowGraph ( ) ; graph. add ( node ) ; apply ( node ) ; return graph ; }",
        "public static ControlFlowGraph apply ( ControlFlowGraph graph, Node node ) { if ( node instanceof ControlFlowGraph ) { return ( ( ControlFlowGraph ) node ). apply ( graph ) ; } throw new IllegalArgumentException ( \"Invalid node type: \" + node ) ; }",
        "public ControlFlowGraph apply ( Node node ) { ControlFlowGraphGraph graph = new ControlFlowGraphGraph ( ) ; graph. add ( node ) ; apply ( graph ) ; return graph ; }"
      ],
      "mid_translation": [
        "Apply the given node to the current control flow graph. If the node is a function call and side effects are met the function call is ignored.",
        "Applies the given node to the control flow graph. If the node is a function call and side effects are met the function call is ignored.",
        "Does the given node have any side effects?",
        "Applies the given node to the current control flow graph.",
        "Applies the given node to the control flow graph."
      ],
      "output": [
        "@Override public void apply ( Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { applySideEffects ( node ) ; } else { super. apply ( node ) ; } }",
        "@Override public Node apply ( Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( node ) ; } return node ; }",
        "@Override public ControlFlowNode apply ( ControlFlowNode node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( node ) ; } return node ; }",
        "@Override public Node apply ( Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( node ) ; } else { return node ; } }",
        "@Override public ControlFlowNode apply ( ControlFlowNode node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( node ) ; } else { return node ; } }",
        "@Override public ControlFlowGraph apply ( ControlFlowGraph graph, Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( graph, node ) ; } return graph ; }",
        "@Override public ControlFlowGraph apply ( Node node ) { ControlFlowGraph graph = new ControlFlowGraph ( ) ; apply ( node, graph ) ; return graph ; }",
        "@Override public ControlFlowGraph apply ( ControlFlowGraph graph, Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return graph. apply ( node ) ; } if ( node. isSideEffects ( ) ) { return graph. apply ( node ) ; } return null ; }",
        "@Override public Node apply ( Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( node ) ; } return node ; }",
        "@Override public ControlFlowGraph apply ( ControlFlowGraph graph, Node node ) { if ( node. isFunctionCall ( ) && node. isSideEffects ( ) ) { return applySideEffects ( graph, node ) ; } else { return graph. apply ( node ) ; } }",
        "@Override public boolean apply ( Node n ) { switch ( n. getToken ( ) ) { case NAME : return hasSideEffects ( n. getFirstChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; case GETELEM : return hasSideEffects ( n. getLastChild ( ) ) ; default : return false ; } }",
        "@Override public boolean apply ( Node n ) { switch ( n. getToken ( ) ) { case NAME : return hasSideEffects ( n. getFirstChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; case GETELEM : return hasSideEffects ( n. getLastChild ( ) ) ; case GETELEM : return hasSideEffects ( n. getLastChild ( ) ) ; default : return false ; } }",
        "@Override public boolean apply ( Node n ) { switch ( n. getToken ( ) ) { case NAME : return hasSideEffects ( n. getFirstChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; default : return false ; } }",
        "@Override public boolean apply ( Node n ) { switch ( n. getToken ( ) ) { case NAME : return hasSideEffects ( n. getFirstChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; case GETELEM : return hasSideEffects ( n. getLastChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; default : return false ; } }",
        "@Override public boolean apply ( Node n ) { switch ( n. getToken ( ) ) { case NAME : return hasSideEffects ( n. getFirstChild ( ) ) ; case GETPROP : return hasSideEffects ( n. getLastChild ( ) ) ; case GETPROP_LIST : return hasSideEffects ( n. getLastChild ( ) ) ; case GETELEM : return hasSideEffects ( n. getLastChild ( ) ) ; default : return false ; } }",
        "@Override public ControlFlowGraph apply ( Node node ) { if ( node instanceof ControlFlowGraph ) ( ( ControlFlowGraph ) node ). apply ( this ) ; return this ; }",
        "@Override public ControlFlowGraph apply ( Node node ) { if ( node instanceof ControlFlowGraph ) ( ( ControlFlowGraph ) node ). apply ( node ) ; return this ; }",
        "@Override public ControlFlowGraph apply ( Node node ) { ControlFlowGraph graph = new ControlFlowGraph ( ) ; graph. add ( node ) ; apply ( graph ) ; return graph ; }",
        "@Override public ControlFlowGraph apply ( Node node ) { if ( node instanceof ControlFlowGraph ) ( ( ControlFlowGraph ) node ). apply ( ) ; return this ; }",
        "@Override public ControlFlowGraph apply ( Node node ) { if ( node instanceof ControlFlowGraph ) ( ( ControlFlowGraph ) node ). apply ( this ) ; else throw new IllegalArgumentException ( \"Unknown node type: \" + node ) ; }",
        "@Override public ControlFlowGraph apply ( ControlFlowGraph graph, Node node ) { if ( node instanceof ControlFlowGraph ) { return ( ( ControlFlowGraph ) node ). apply ( graph ) ; } return graph ; }",
        "@Override public ControlFlowGraph apply ( Node node ) { ControlFlowGraph graph = new ControlFlowGraph ( ) ; graph. add ( node ) ; apply ( graph ) ; return graph ; }",
        "@Override public ControlFlowGraph apply ( Node node ) { ControlFlowGraph graph = new ControlFlowGraph ( ) ; graph. add ( node ) ; apply ( node ) ; return graph ; }",
        "@Override public ControlFlowGraph apply ( ControlFlowGraph graph, Node node ) { if ( node instanceof ControlFlowGraph ) { return ( ( ControlFlowGraph ) node ). apply ( graph ) ; } throw new IllegalArgumentException ( \"Invalid node type: \" + node ) ; }",
        "@Override public ControlFlowGraph apply ( Node node ) { ControlFlowGraphGraph graph = new ControlFlowGraphGraph ( ) ; graph. add ( node ) ; apply ( graph ) ; return graph ; }"
      ]
    },
    "Closure_18_/src/com/google/javascript/jscomp/Compiler.java_1288-1289": {
      "loc": "1288-1289",
      "input": "Node parseInputs() { boolean devMode = options.devMode != DevMode.OFF; if (externsRoot != null) { externsRoot.detachChildren(); } if (jsRoot != null) { jsRoot.detachChildren(); } jsRoot = IR.block(); jsRoot.setIsSyntheticBlock(true); externsRoot = IR.block(); externsRoot.setIsSyntheticBlock(true); externAndJsRoot = IR.block(externsRoot, jsRoot); externAndJsRoot.setIsSyntheticBlock(true); if (options.tracer.isOn()) { tracker = new PerformanceTracker(jsRoot, options.tracer); addChangeHandler(tracker.getCodeChangeHandler()); } Tracer tracer = newTracer(\"parseInputs\"); try { for (CompilerInput input : externs) { Node n = input.getAstRoot(this); if (hasErrors()) { return null; } externsRoot.addChildToBack(n); } if (options.transformAMDToCJSModules || options.processCommonJSModules) { processAMDAndCommonJSModules(); } hoistExterns(externsRoot); boolean staleInputs = false; if (options.dependencyOptions.needsManagement() && options.closurePass) { for (CompilerInput input : inputs) { for (String provide : input.getProvides()) { getTypeRegistry().forwardDeclareType(provide); } } try { inputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph) .manageDependencies(options.dependencyOptions, inputs); staleInputs = true; } catch (CircularDependencyException e) { report(JSError.make( JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage())); if (hasErrors()) { return null; } } catch (MissingProvideException e) { report(JSError.make( MISSING_ENTRY_ERROR, e.getMessage())); if (hasErrors()) { return null; } } } hoistNoCompileFiles(); if (staleInputs) { repartitionInputs(); } for (CompilerInput input : inputs) { Node n = input.getAstRoot(this); if (n == null) { continue; } if (devMode) { runSanityCheck(); if (hasErrors()) { return null; } } if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) { SourceInformationAnnotator sia = new SourceInformationAnnotator( input.getName(), options.devMode != DevMode.OFF); NodeTraversal.traverse(this, n, sia); } jsRoot.addChildToBack(n); } if (hasErrors()) { return null; } return externAndJsRoot; } finally { stopTracer(tracer, \"parseInputs\"); } }",
      "target": "Node parseInputs() { boolean devMode = options.devMode != DevMode.OFF; if (externsRoot != null) { externsRoot.detachChildren(); } if (jsRoot != null) { jsRoot.detachChildren(); } jsRoot = IR.block(); jsRoot.setIsSyntheticBlock(true); externsRoot = IR.block(); externsRoot.setIsSyntheticBlock(true); externAndJsRoot = IR.block(externsRoot, jsRoot); externAndJsRoot.setIsSyntheticBlock(true); if (options.tracer.isOn()) { tracker = new PerformanceTracker(jsRoot, options.tracer); addChangeHandler(tracker.getCodeChangeHandler()); } Tracer tracer = newTracer(\"parseInputs\"); try { for (CompilerInput input : externs) { Node n = input.getAstRoot(this); if (hasErrors()) { return null; } externsRoot.addChildToBack(n); } if (options.transformAMDToCJSModules || options.processCommonJSModules) { processAMDAndCommonJSModules(); } hoistExterns(externsRoot); boolean staleInputs = false; if (options.dependencyOptions.needsManagement()) { for (CompilerInput input : inputs) { for (String provide : input.getProvides()) { getTypeRegistry().forwardDeclareType(provide); } } try { inputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph) .manageDependencies(options.dependencyOptions, inputs); staleInputs = true; } catch (CircularDependencyException e) { report(JSError.make( JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage())); if (hasErrors()) { return null; } } catch (MissingProvideException e) { report(JSError.make( MISSING_ENTRY_ERROR, e.getMessage())); if (hasErrors()) { return null; } } } hoistNoCompileFiles(); if (staleInputs) { repartitionInputs(); } for (CompilerInput input : inputs) { Node n = input.getAstRoot(this); if (n == null) { continue; } if (devMode) { runSanityCheck(); if (hasErrors()) { return null; } } if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) { SourceInformationAnnotator sia = new SourceInformationAnnotator( input.getName(), options.devMode != DevMode.OFF); NodeTraversal.traverse(this, n, sia); } jsRoot.addChildToBack(n); } if (hasErrors()) { return null; } return externAndJsRoot; } finally { stopTracer(tracer, \"parseInputs\"); } }",
      "function range": "1240,3-1362,3",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Closure_20_/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java_220-221": {
      "loc": "220-221",
      "input": "private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext(); if (value != null) { Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } } return n; }",
      "target": "private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext(); if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) { Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } } return n; }",
      "function range": "208,3-230,3",
      "raw_output": [
        "private Node tryRemoveSimpleCall ( Node n ) { checkArgument ( n. isCall ( ), n ) ; Node parent = n. getParent ( ) ; checkArgument ( parent. isFunction ( ), parent ) ; Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) ; return left ; }",
        "private Node tryRemoveSimpleCall ( Node n ) { checkArgument ( n. isCall ( ), n ) ; Node parent = n. getParent ( ) ; checkArgument ( parent. isFunction ( ), parent ) ; Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) ; return left ; }",
        "private Node tryRemoveSimpleCall ( Node n ) { checkArgument ( n. isCall ( ), n ) ; Node parent = n. getParent ( ) ; checkArgument ( parent. isFunction ( ), parent ) ; Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) ; return left ; }",
        "private Node tryRemoveSimpleCall ( Node n ) { checkArgument ( n. isCall ( ), n ) ; Node parent = n. getParent ( ) ; checkArgument ( parent. isFunction ( ), parent ) ; Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) ; return left ; }",
        "private Node tryRemoveSimpleCall ( Node n ) { checkArgument ( n. isCall ( ), n ) ; Node parent = n. getParent ( ) ; checkArgument ( parent. isFunction ( ), parent ) ; Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) ; return n ; }",
        "private void removeSimpleCallNodes ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } }",
        "private void removeSimpleCallNodes ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( right ) ; } } }",
        "private void removeSimpleCallNodes ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } }",
        "private void removeSimpleCallNodes ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } }",
        "private void removeSimpleCallNodes ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( right ) ; } } }",
        "private void removeFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; checkState ( parent. isFunction ( ), parent ) ; Node call = parent. getFirstChild ( ) ; checkState ( call. isCall ( ), call ) ; n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( call ) ; }",
        "private void removeFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; checkState ( parent. isFunction ( ), parent ) ; Node call = parent. getFirstChild ( ) ; checkState ( call. isCall ( ), call ) ; compiler. reportChangeToEnclosingScope ( call ) ; }",
        "private void removeFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; checkState ( parent. isFunction ( ), parent ) ; Node call = parent. getFirstChild ( ) ; checkState ( call. isCall ( ), call ) ; n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( n ) ; }",
        "private void removeFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; checkState ( parent. isFunction ( ), parent ) ; Node call = parent. getFirstChild ( ) ; checkState ( call. isCall ( ), call ) ; compiler. reportChangeToEnclosingScope ( call ) ; n. removeFirstChild ( ) ; }",
        "private void removeFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; checkState ( parent. isFunction ( ), parent ) ; Node call = parent. getFirstChild ( ) ; checkState ( call. isCall ( ), call ) ; compiler. reportChangeToEnclosingScope ( n ) ; }",
        "private void removeFunctionCall ( Node n ) { if ( n. isFunction ( ) ) { Node parent = n. getParent ( ) ; if ( parent. isCall ( ) && parent. getFirstChild ( ). isString ( ) ) { n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( parent ) ; } } }",
        "private void removeFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; if ( parent. isCall ( ) && parent. getFirstChild ( ). isExprResult ( ) ) { n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( parent ) ; } }",
        "private void removeFunctionCall ( Node n ) { if ( n. isFunction ( ) ) { Node parent = n. getParent ( ) ; if ( parent. isCall ( ) && parent. getFirstChild ( ). isString ( ) ) { n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( n ) ; } } }",
        "private void removeFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; if ( parent. isCall ( ) && parent. getFirstChild ( ). isExprResult ( ) ) { n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( n ) ; } }",
        "private void removeFunctionCall ( Node n ) { if ( n. isFunction ( ) ) { Node parent = n. getParent ( ) ; if ( parent. isCall ( ) && parent. getFirstChild ( ). isString ( ) ) { n. removeFirstChild ( ) ; } } }",
        "private void removeFunctionCallNodes ( Node n ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { Node next = child. getNext ( ) ; if ( NodeUtil. isFunctionCall ( child ) ) { n. removeChild ( child ) ; } } }",
        "private void removeFunctionCallNodes ( Node n ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { Node next = child. getNext ( ) ; if ( NodeUtil. isFunctionCall ( child ) ) { n. removeChild ( child ) ; } else { n. removeChild ( child ) ; } } }",
        "private void removeFunctionCallNodes ( Node n ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { Node next = child. getNext ( ) ; if ( NodeUtil. isFunctionCall ( next ) ) { n. removeChild ( child ) ; } } }",
        "private void removeFunctionCallNodes ( Node n ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { Node parent = child. getParent ( ) ; if ( parent!= null ) { removeFunctionCallNodes ( parent ) ; } } }",
        "private void removeFunctionCallNodes ( Node n ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { Node next = child. getNext ( ) ; if ( NodeUtil. isFunctionCall ( next ) ) { n. removeChild ( child ) ; } else { n. removeChild ( child ) ; } } }"
      ],
      "mid_translation": [
        "Removes simple function calls.",
        "Removes string nodes that are simple function calls.",
        "Removes a simple function call.",
        "Removes a simple function call with a string literal.",
        "Removes string nodes that are used as function calls."
      ],
      "output": [
        "private Node tryFoldSimpleFunctionCall ( Node n ) { checkArgument ( n. isCall ( ), n ) ; Node parent = n. getParent ( ) ; checkArgument ( parent. isFunction ( ), parent ) ; Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) ; return left ; }",
        "private Node tryFoldSimpleFunctionCall ( Node n ) { checkArgument ( n. isCall ( ), n ) ; Node parent = n. getParent ( ) ; checkArgument ( parent. isFunction ( ), parent ) ; Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) ; return left ; }",
        "private Node tryFoldSimpleFunctionCall ( Node n ) { checkArgument ( n. isCall ( ), n ) ; Node parent = n. getParent ( ) ; checkArgument ( parent. isFunction ( ), parent ) ; Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) ; return left ; }",
        "private Node tryFoldSimpleFunctionCall ( Node n ) { checkArgument ( n. isCall ( ), n ) ; Node parent = n. getParent ( ) ; checkArgument ( parent. isFunction ( ), parent ) ; Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) ; return left ; }",
        "private Node tryFoldSimpleFunctionCall ( Node n ) { checkArgument ( n. isCall ( ), n ) ; Node parent = n. getParent ( ) ; checkArgument ( parent. isFunction ( ), parent ) ; Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) && left. getNext ( ). isCall ( ) && right. getNext ( ). isCall ( ) ; return n ; }",
        "private void tryFoldSimpleFunctionCall ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( right ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getLastChild ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = left. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( left ) ; } } else if ( parent. isFunction ( ) ) { Node left = n. getFirstChild ( ) ; Node right = n. getNext ( ) ; if ( left. isCall ( ) && right. isCall ( ) ) { n. removeChild ( right ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; checkState ( parent. isFunction ( ), parent ) ; Node call = parent. getFirstChild ( ) ; checkState ( call. isCall ( ), call ) ; n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( call ) ; }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; checkState ( parent. isFunction ( ), parent ) ; Node call = parent. getFirstChild ( ) ; checkState ( call. isCall ( ), call ) ; compiler. reportChangeToEnclosingScope ( call ) ; }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; checkState ( parent. isFunction ( ), parent ) ; Node call = parent. getFirstChild ( ) ; checkState ( call. isCall ( ), call ) ; n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( n ) ; }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; checkState ( parent. isFunction ( ), parent ) ; Node call = parent. getFirstChild ( ) ; checkState ( call. isCall ( ), call ) ; compiler. reportChangeToEnclosingScope ( call ) ; n. removeFirstChild ( ) ; }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; checkState ( parent. isFunction ( ), parent ) ; Node call = parent. getFirstChild ( ) ; checkState ( call. isCall ( ), call ) ; compiler. reportChangeToEnclosingScope ( n ) ; }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { if ( n. isFunction ( ) ) { Node parent = n. getParent ( ) ; if ( parent. isCall ( ) && parent. getFirstChild ( ). isString ( ) ) { n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( parent ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; if ( parent. isCall ( ) && parent. getFirstChild ( ). isExprResult ( ) ) { n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( parent ) ; } }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { if ( n. isFunction ( ) ) { Node parent = n. getParent ( ) ; if ( parent. isCall ( ) && parent. getFirstChild ( ). isString ( ) ) { n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( n ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { checkState ( n. isFunction ( ), n ) ; Node parent = n. getParent ( ) ; if ( parent. isCall ( ) && parent. getFirstChild ( ). isExprResult ( ) ) { n. removeFirstChild ( ) ; compiler. reportChangeToEnclosingScope ( n ) ; } }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { if ( n. isFunction ( ) ) { Node parent = n. getParent ( ) ; if ( parent. isCall ( ) && parent. getFirstChild ( ). isString ( ) ) { n. removeFirstChild ( ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { Node next = child. getNext ( ) ; if ( NodeUtil. isFunctionCall ( child ) ) { n. removeChild ( child ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { Node next = child. getNext ( ) ; if ( NodeUtil. isFunctionCall ( child ) ) { n. removeChild ( child ) ; } else { n. removeChild ( child ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { Node next = child. getNext ( ) ; if ( NodeUtil. isFunctionCall ( next ) ) { n. removeChild ( child ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { Node parent = child. getParent ( ) ; if ( parent!= null ) { removeFunctionCallNodes ( parent ) ; } } }",
        "private void tryFoldSimpleFunctionCall ( Node n ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { Node next = child. getNext ( ) ; if ( NodeUtil. isFunctionCall ( next ) ) { n. removeChild ( child ) ; } else { n. removeChild ( child ) ; } } }"
      ]
    },
    "Closure_31_/src/com/google/javascript/jscomp/Compiler.java_1285-1286": {
      "loc": "1285-1286",
      "input": "Node parseInputs() { boolean devMode = options.devMode != DevMode.OFF; if (externsRoot != null) { externsRoot.detachChildren(); } if (jsRoot != null) { jsRoot.detachChildren(); } jsRoot = IR.block(); jsRoot.setIsSyntheticBlock(true); externsRoot = IR.block(); externsRoot.setIsSyntheticBlock(true); externAndJsRoot = IR.block(externsRoot, jsRoot); externAndJsRoot.setIsSyntheticBlock(true); if (options.tracer.isOn()) { tracker = new PerformanceTracker(jsRoot, options.tracer); addChangeHandler(tracker.getCodeChangeHandler()); } Tracer tracer = newTracer(\"parseInputs\"); try { for (CompilerInput input : externs) { Node n = input.getAstRoot(this); if (hasErrors()) { return null; } externsRoot.addChildToBack(n); } if (options.transformAMDToCJSModules || options.processCommonJSModules) { processAMDAndCommonJSModules(); } boolean staleInputs = false; if (options.dependencyOptions.needsManagement() && !options.skipAllPasses && options.closurePass) { for (CompilerInput input : inputs) { for (String provide : input.getProvides()) { getTypeRegistry().forwardDeclareType(provide); } } try { inputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph) .manageDependencies(options.dependencyOptions, inputs); staleInputs = true; } catch (CircularDependencyException e) { report(JSError.make( JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage())); if (hasErrors()) { return null; } } catch (MissingProvideException e) { report(JSError.make( MISSING_ENTRY_ERROR, e.getMessage())); if (hasErrors()) { return null; } } } for (CompilerInput input : inputs) { Node n = input.getAstRoot(this); if (n == null) { continue; } if (n.getJSDocInfo() != null) { JSDocInfo info = n.getJSDocInfo(); if (info.isExterns()) { externsRoot.addChildToBack(n); input.setIsExtern(true); input.getModule().remove(input); externs.add(input); staleInputs = true; } else if (info.isNoCompile()) { input.getModule().remove(input); staleInputs = true; } } } if (staleInputs) { fillEmptyModules(modules); rebuildInputsFromModules(); } for (CompilerInput input : inputs) { Node n = input.getAstRoot(this); if (n == null) { continue; } if (devMode) { runSanityCheck(); if (hasErrors()) { return null; } } if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) { SourceInformationAnnotator sia = new SourceInformationAnnotator( input.getName(), options.devMode != DevMode.OFF); NodeTraversal.traverse(this, n, sia); } jsRoot.addChildToBack(n); } if (hasErrors()) { return null; } return externAndJsRoot; } finally { stopTracer(tracer, \"parseInputs\"); } }",
      "target": "Node parseInputs() { boolean devMode = options.devMode != DevMode.OFF; if (externsRoot != null) { externsRoot.detachChildren(); } if (jsRoot != null) { jsRoot.detachChildren(); } jsRoot = IR.block(); jsRoot.setIsSyntheticBlock(true); externsRoot = IR.block(); externsRoot.setIsSyntheticBlock(true); externAndJsRoot = IR.block(externsRoot, jsRoot); externAndJsRoot.setIsSyntheticBlock(true); if (options.tracer.isOn()) { tracker = new PerformanceTracker(jsRoot, options.tracer); addChangeHandler(tracker.getCodeChangeHandler()); } Tracer tracer = newTracer(\"parseInputs\"); try { for (CompilerInput input : externs) { Node n = input.getAstRoot(this); if (hasErrors()) { return null; } externsRoot.addChildToBack(n); } if (options.transformAMDToCJSModules || options.processCommonJSModules) { processAMDAndCommonJSModules(); } boolean staleInputs = false; if (options.dependencyOptions.needsManagement() && options.closurePass) { for (CompilerInput input : inputs) { for (String provide : input.getProvides()) { getTypeRegistry().forwardDeclareType(provide); } } try { inputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph) .manageDependencies(options.dependencyOptions, inputs); staleInputs = true; } catch (CircularDependencyException e) { report(JSError.make( JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage())); if (hasErrors()) { return null; } } catch (MissingProvideException e) { report(JSError.make( MISSING_ENTRY_ERROR, e.getMessage())); if (hasErrors()) { return null; } } } for (CompilerInput input : inputs) { Node n = input.getAstRoot(this); if (n == null) { continue; } if (n.getJSDocInfo() != null) { JSDocInfo info = n.getJSDocInfo(); if (info.isExterns()) { externsRoot.addChildToBack(n); input.setIsExtern(true); input.getModule().remove(input); externs.add(input); staleInputs = true; } else if (info.isNoCompile()) { input.getModule().remove(input); staleInputs = true; } } } if (staleInputs) { fillEmptyModules(modules); rebuildInputsFromModules(); } for (CompilerInput input : inputs) { Node n = input.getAstRoot(this); if (n == null) { continue; } if (devMode) { runSanityCheck(); if (hasErrors()) { return null; } } if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) { SourceInformationAnnotator sia = new SourceInformationAnnotator( input.getName(), options.devMode != DevMode.OFF); NodeTraversal.traverse(this, n, sia); } jsRoot.addChildToBack(n); } if (hasErrors()) { return null; } return externAndJsRoot; } finally { stopTracer(tracer, \"parseInputs\"); } }",
      "function range": "1236,3-1387,3",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558": {
      "loc": "557-558",
      "input": "@Override public void matchConstraint(ObjectType constraintObj) { <mask> if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE) .getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } }",
      "target": "@Override public void matchConstraint(ObjectType constraintObj) { if (hasReferenceName()) { return; } if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE) .getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } }",
      "function range": "554,3-580,3",
      "raw_output": [
        "public static boolean isCompatible ( Object object, Class <? extends Constraint > clazz ) { if ( object == null ) { return false ; } if ( clazz == null ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } return true ; }",
        "public static boolean isCompatible ( Object object, Class <? extends Constraint > type ) { if ( object == null ) { return false ; } if ( type == null ) { return false ; } if (! type. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! type. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! type. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } return true ; }",
        "public static boolean isCompatible ( Object object, Class <? extends Constraint > clazz ) { if ( object == null ) { return false ; } if ( clazz == null ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } return isCompatible ( object. getClass ( ), clazz ) ; }",
        "public static boolean isCompatible ( Object object, Class <? extends Constraint > type ) { if ( object == null ) { return false ; } if ( type == null ) { return false ; } if (! type. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! type. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } return isCompatible ( object. getClass ( ), type ) ; }",
        "public static boolean isCompatible ( Object object, Class <? extends Constraint > clazz ) { if ( object == null ) { return false ; } if ( clazz == null ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } return true ; }",
        "public boolean hasAnyProperty ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( hasAnyProperty ( field ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( hasAnyProperty ( method ) ) { return true ; } } return false ; }",
        "public boolean hasAnyProperty ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( hasAnyProperty ( field. get ( object ) ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( hasAnyProperty ( method. get ( object ) ) ) { return true ; } } return false ; }",
        "public boolean hasAnyProperty ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( hasAnyProperty ( field. get ( object ) ) ) { return false ; } } for ( Method method : clazz. getMethods ( ) ) { if ( hasAnyProperty ( method. get ( object ) ) ) { return false ; } } return true ; }",
        "public boolean hasAnyProperty ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( hasAnyProperty ( field. get ( object ) ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( hasAnyProperty ( method. getName ( ) ) ) { return true ; } } return false ; }",
        "public boolean hasAnyProperty ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( hasAnyProperty ( field. get ( object ) ) ) { return false ; } } for ( Method method : clazz. getMethods ( ) ) { if ( hasAnyProperty ( method. get ( object ) ) ) { return true ; } } return false ; }",
        "public boolean check ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( check ( field. get ( object ) ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( check ( method. get ( object ) ) ) { return true ; } } return false ; }",
        "public boolean check ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( check ( field ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( check ( method ) ) { return true ; } } return false ; }",
        "public boolean check ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( check ( field. get ( object ) ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( check ( method. getName ( ) ) ) { return true ; } } return false ; }",
        "public boolean check ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( check ( field. get ( object ) ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( check ( method. get ( object ) ) ) { return false ; } } return true ; }",
        "public boolean check ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( check ( field. get ( object ) ) ) { return true ; } } if ( clazz. getSuperclass ( )!= null ) { return check ( clazz. getSuperclass ( ) ) ; } return false ; }",
        "public static boolean hasAtLeastOneType ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "public static boolean hasAtLeastOneType ( final Object object, final String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "public static boolean hasAtLeastOneType ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { return true ; } } return false ; }",
        "public static boolean hasAtLeastOneType ( final Object object, final String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { return true ; } } return false ; }",
        "public static boolean hasAtLeastOneType ( final Object object, final String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > clazz = object. getClass ( ) ; for ( Class <? > c : clazz. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "public static boolean hasAtLeastOneType ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "public static boolean hasAtLeastOneType ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \"Constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "public static boolean hasAtLeastOneType ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > clazz = object. getClass ( ) ; for ( Class <? > c : clazz. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "public static boolean hasAtLeastOneType ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { return true ; } } return false ; }",
        "public static boolean hasAtLeastOneType ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > clazz = object. getClass ( ) ; for ( Class <? > c : clazz. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { return true ; } } return false ; }"
      ],
      "mid_translation": [
        "Checks whether the given object has at least one type that is compatible with the given constraint object.",
        "Checks whether the given object has at least one property with the least supertype matching this constraint.",
        "Checks that the given object has at least one property with the least supertype matching this constraint.",
        "Checks that the given object has at least one type that matches the given constraint.",
        "Checks whether the given object has at least one type that matches the given constraint."
      ],
      "output": [
        "@Override public boolean matchConstraint ( Object object, Class <? extends Constraint > clazz ) { if ( object == null ) { return false ; } if ( clazz == null ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } return true ; }",
        "@Override public boolean matchConstraint ( Object object, Class <? extends Constraint > type ) { if ( object == null ) { return false ; } if ( type == null ) { return false ; } if (! type. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! type. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! type. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } return true ; }",
        "@Override public boolean matchConstraint ( Object object, Class <? extends Constraint > clazz ) { if ( object == null ) { return false ; } if ( clazz == null ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } return isCompatible ( object. getClass ( ), clazz ) ; }",
        "@Override public boolean matchConstraint ( Object object, Class <? extends Constraint > type ) { if ( object == null ) { return false ; } if ( type == null ) { return false ; } if (! type. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! type. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } return isCompatible ( object. getClass ( ), type ) ; }",
        "@Override public boolean matchConstraint ( Object object, Class <? extends Constraint > clazz ) { if ( object == null ) { return false ; } if ( clazz == null ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } if (! clazz. isAssignableFrom ( object. getClass ( ) ) ) { return false ; } return true ; }",
        "@Override public boolean matchConstraint ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( hasAnyProperty ( field ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( hasAnyProperty ( method ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( hasAnyProperty ( field. get ( object ) ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( hasAnyProperty ( method. get ( object ) ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( hasAnyProperty ( field. get ( object ) ) ) { return false ; } } for ( Method method : clazz. getMethods ( ) ) { if ( hasAnyProperty ( method. get ( object ) ) ) { return false ; } } return true ; }",
        "@Override public boolean matchConstraint ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( hasAnyProperty ( field. get ( object ) ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( hasAnyProperty ( method. getName ( ) ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( hasAnyProperty ( field. get ( object ) ) ) { return false ; } } for ( Method method : clazz. getMethods ( ) ) { if ( hasAnyProperty ( method. get ( object ) ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( check ( field. get ( object ) ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( check ( method. get ( object ) ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( check ( field ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( check ( method ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( check ( field. get ( object ) ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( check ( method. getName ( ) ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( check ( field. get ( object ) ) ) { return true ; } } for ( Method method : clazz. getMethods ( ) ) { if ( check ( method. get ( object ) ) ) { return false ; } } return true ; }",
        "@Override public boolean matchConstraint ( Object object ) { if ( object == null ) { return false ; } Class <? > clazz = object. getClass ( ) ; for ( Field field : clazz. getFields ( ) ) { if ( check ( field. get ( object ) ) ) { return true ; } } if ( clazz. getSuperclass ( )!= null ) { return check ( clazz. getSuperclass ( ) ) ; } return false ; }",
        "@Override public boolean matchConstraint ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( final Object object, final String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( final Object object, final String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( final Object object, final String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > clazz = object. getClass ( ) ; for ( Class <? > c : clazz. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \"Constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > clazz = object. getClass ( ) ; for ( Class <? > c : clazz. getInterfaces ( ) ) { if ( c. getName ( ). equals ( constraint ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > type = object. getClass ( ) ; for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { return true ; } } return false ; }",
        "@Override public boolean matchConstraint ( Object object, String constraint ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( constraint == null ) { throw new IllegalArgumentException ( \" constraint cannot be null\" ) ; } Class <? > clazz = object. getClass ( ) ; for ( Class <? > c : clazz. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { return true ; } } return false ; }"
      ]
    },
    "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1123": {
      "loc": "1121-1123",
      "input": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined()); if (constraintObj != null && constraintObj.isRecordType()) { ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType != null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); } } } } }",
      "target": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined()); if (constraintObj != null) { type.matchConstraint(constraintObj); } }",
      "function range": "1113,3-1137,3",
      "raw_output": [
        "private void inferPropertyTypes ( Map < String, Class <? > > propertyMap, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : propertyMap. entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > type = entry. getValue ( ) ; if ( propertyMap. containsKey ( propertyName ) ) { Class <? > propertyType = propertyMap. get ( propertyName ) ; if ( propertyType. isAssignableFrom ( type ) ) { constraintMap. put ( propertyName, type ) ; } } } }",
        "private void inferPropertyTypes ( Map < String, Class <? > > propertyMap, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : propertyMap. entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > type = entry. getValue ( ) ; if ( propertyMap. containsKey ( propertyName ) ) { Class <? > propertyType = propertyMap. get ( propertyName ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( constraintMap, propertyType ) ; } } } }",
        "private void inferPropertyTypes ( Map < String, Class <? > > propertyMap, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : propertyMap. entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > type = entry. getValue ( ) ; if ( propertyMap. containsKey ( propertyName ) ) { Class <? > propertyType = propertyMap. get ( propertyName ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( constraintMap, propertyType, propertyMap ) ; } } } }",
        "private void inferPropertyTypes ( Map < String, Class <? > > propertyMap, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : propertyMap. entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( propertyType ) ) { inferPropertyTypes ( constraintMap, propertyName, propertyType ) ; } } }",
        "private void inferPropertyTypes ( Map < String, Class <? > > propertyMap, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : propertyMap. entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > type = entry. getValue ( ) ; if ( propertyMap. containsKey ( propertyName ) ) { Class <? > propertyType = propertyMap. get ( propertyName ) ; Class <? > constraintType = constraintMap. get ( constraintType ) ; if (! propertyType. isAssignableFrom ( constraintType ) ) { throw new IllegalArgumentException ( String. format ( \"Constraint type '%s' is not assignable to '%s'\", constraintType, propertyName ) ) ; } } } }",
        "private void inferPropertyTypes ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } }",
        "private void inferPropertyTypes ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getSuperclass ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } }",
        "private void inferPropertyTypes ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getFields ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } }",
        "private void inferPropertyTypes ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getDeclaredInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } }",
        "private void inferPropertyTypes ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( propertyType, constraintMap ) ; } } }",
        "private void inferPropertyTypes ( Class <? > type, Constraint constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraint ) ; } for ( Class <? > c : type. getFields ( ) ) { inferPropertyTypes ( c, constraint ) ; } for ( Class <? > c : type. getFields ( ) ) { inferPropertyTypes ( c, constraint ) ; } }",
        "private void inferPropertyTypes ( Class <? > type, Constraint constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraint ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraint ) ; } }",
        "private void inferPropertyTypes ( Class <? > type, Constraint constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyType ( c, constraint ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyType ( c, constraint ) ; } }",
        "private void inferPropertyTypes ( Class <? > type, Constraint constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraint ) ; } for ( Class <? > c : type. getSuperclass ( ) ) { inferPropertyTypes ( c, constraint ) ; } }",
        "private void inferPropertyTypes ( Class <? > type, Constraint constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraint ) ; } for ( Class <? > c : type. getFields ( ) ) { inferPropertyTypes ( c, constraint ) ; } }",
        "private void inferPropertyTypes ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( propertyType, constraintMap ) ; } else if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( propertyType, constraintMap ) ; } } }",
        "private void inferPropertyTypes ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyType ( propertyType, constraintMap ) ; } else if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyType ( propertyType, constraintMap ) ; } } }",
        "private void inferPropertyTypes ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( type ) ) { if ( constraintMap. get ( propertyName ) == null ) { constraintMap. put ( propertyName, propertyType ) ; } } } }",
        "private void inferPropertyTypes ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { if ( entry. getValue ( ). isAssignableFrom ( constraintMap. get ( entry. getKey ( ) ) ) ) { inferPropertyTypes ( entry. getKey ( ), constraintMap ) ; } } }",
        "private void inferPropertyTypes ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( propertyType, constraintMap ) ; } } }",
        "protected void inferPropertyTypesLessThan ( Class <? > type, Class <? > constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } }",
        "private void inferPropertyTypesLessThan ( Class <? > type, Class <? > constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } }",
        "protected void inferPropertyTypesLessThan ( Class <? > type, Class <? extends Constraint > constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } } }",
        "protected void inferPropertyTypesLessThan ( Class <? > type, Class <? extends Constraint > constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } }",
        "private void inferPropertyTypesLessThan ( Class <? > type, Class <? extends Constraint > constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } } }"
      ],
      "mid_translation": [
        "Infer the property types to match the given constraint.",
        "Infer the property types of the given type to match the given constraint.",
        "Infer the property types of the given type to the given constraint.",
        "Infer the property types of a given type to match the given constraint.",
        "Infer the property types of the given type that are less than the given constraint."
      ],
      "output": [
        "private void inferPropertyTypesToMatchConstraint ( Map < String, Class <? > > propertyMap, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : propertyMap. entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > type = entry. getValue ( ) ; if ( propertyMap. containsKey ( propertyName ) ) { Class <? > propertyType = propertyMap. get ( propertyName ) ; if ( propertyType. isAssignableFrom ( type ) ) { constraintMap. put ( propertyName, type ) ; } } } }",
        "private void inferPropertyTypesToMatchConstraint ( Map < String, Class <? > > propertyMap, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : propertyMap. entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > type = entry. getValue ( ) ; if ( propertyMap. containsKey ( propertyName ) ) { Class <? > propertyType = propertyMap. get ( propertyName ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( constraintMap, propertyType ) ; } } } }",
        "private void inferPropertyTypesToMatchConstraint ( Map < String, Class <? > > propertyMap, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : propertyMap. entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > type = entry. getValue ( ) ; if ( propertyMap. containsKey ( propertyName ) ) { Class <? > propertyType = propertyMap. get ( propertyName ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( constraintMap, propertyType, propertyMap ) ; } } } }",
        "private void inferPropertyTypesToMatchConstraint ( Map < String, Class <? > > propertyMap, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : propertyMap. entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( propertyType ) ) { inferPropertyTypes ( constraintMap, propertyName, propertyType ) ; } } }",
        "private void inferPropertyTypesToMatchConstraint ( Map < String, Class <? > > propertyMap, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : propertyMap. entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > type = entry. getValue ( ) ; if ( propertyMap. containsKey ( propertyName ) ) { Class <? > propertyType = propertyMap. get ( propertyName ) ; Class <? > constraintType = constraintMap. get ( constraintType ) ; if (! propertyType. isAssignableFrom ( constraintType ) ) { throw new IllegalArgumentException ( String. format ( \"Constraint type '%s' is not assignable to '%s'\", constraintType, propertyName ) ) ; } } } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getSuperclass ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getFields ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } for ( Class <? > c : type. getDeclaredInterfaces ( ) ) { inferPropertyTypes ( c, constraintMap ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( propertyType, constraintMap ) ; } } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Constraint constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraint ) ; } for ( Class <? > c : type. getFields ( ) ) { inferPropertyTypes ( c, constraint ) ; } for ( Class <? > c : type. getFields ( ) ) { inferPropertyTypes ( c, constraint ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Constraint constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraint ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraint ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Constraint constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyType ( c, constraint ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyType ( c, constraint ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Constraint constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraint ) ; } for ( Class <? > c : type. getSuperclass ( ) ) { inferPropertyTypes ( c, constraint ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Constraint constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypes ( c, constraint ) ; } for ( Class <? > c : type. getFields ( ) ) { inferPropertyTypes ( c, constraint ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( propertyType, constraintMap ) ; } else if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( propertyType, constraintMap ) ; } } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyType ( propertyType, constraintMap ) ; } else if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyType ( propertyType, constraintMap ) ; } } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( type ) ) { if ( constraintMap. get ( propertyName ) == null ) { constraintMap. put ( propertyName, propertyType ) ; } } } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { if ( entry. getValue ( ). isAssignableFrom ( constraintMap. get ( entry. getKey ( ) ) ) ) { inferPropertyTypes ( entry. getKey ( ), constraintMap ) ; } } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Map < String, Class <? > > constraintMap ) { for ( Map. Entry < String, Class <? > > entry : type. getDeclaredProperties ( ). entrySet ( ) ) { String propertyName = entry. getKey ( ) ; Class <? > propertyType = entry. getValue ( ) ; if ( propertyType. isAssignableFrom ( type ) ) { inferPropertyTypes ( propertyType, constraintMap ) ; } } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Class <? > constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Class <? > constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Class <? extends Constraint > constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Class <? extends Constraint > constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } }",
        "private void inferPropertyTypesToMatchConstraint ( Class <? > type, Class <? extends Constraint > constraint ) { for ( Class <? > c : type. getInterfaces ( ) ) { if ( c. isAssignableFrom ( constraint ) ) { inferPropertyTypesLessThan ( c, constraint ) ; } } }"
      ]
    },
    "Closure_36_/src/com/google/javascript/jscomp/InlineVariables.java_575-576": {
      "loc": "575-576",
      "input": "private boolean canInline( Reference declaration, Reference initialization, Reference reference) { if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) { return false; } if (declaration != initialization && !initialization.getGrandparent().isExprResult()) { return false; } if (declaration.getBasicBlock() != initialization.getBasicBlock() || declaration.getBasicBlock() != reference.getBasicBlock()) { return false; } Node value = initialization.getAssignedValue(); Preconditions.checkState(value != null); if (value.isGetProp() && reference.getParent().isCall() && reference.getParent().getFirstChild() == reference.getNode()) { return false; } if (value.isFunction()) { Node callNode = reference.getParent(); if (reference.getParent().isCall()) { CodingConvention convention = compiler.getCodingConvention(); SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode); if (relationship != null) { return false; } } } return canMoveAggressively(value) || canMoveModerately(initialization, reference); }",
      "target": "private boolean canInline( Reference declaration, Reference initialization, Reference reference) { if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) { return false; } if (declaration != initialization && !initialization.getGrandparent().isExprResult()) { return false; } if (declaration.getBasicBlock() != initialization.getBasicBlock() || declaration.getBasicBlock() != reference.getBasicBlock()) { return false; } Node value = initialization.getAssignedValue(); Preconditions.checkState(value != null); if (value.isGetProp() && reference.getParent().isCall() && reference.getParent().getFirstChild() == reference.getNode()) { return false; } if (value.isFunction()) { Node callNode = reference.getParent(); if (reference.getParent().isCall()) { CodingConvention convention = compiler.getCodingConvention(); SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode); if (relationship != null) { return false; } if (convention.getSingletonGetterClassName(callNode) != null) { return false; } } } return canMoveAggressively(value) || canMoveModerately(initialization, reference); }",
      "function range": "519,5-580,5",
      "raw_output": [
        "private boolean inline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } Node result = declaration. getFirstChild ( ) ; while ( result!= null ) { if ( result. isName ( ) ) { return false ; } result = result. getNext ( ) ; } return true ; }",
        "private boolean inline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } Node parent = declaration. getParent ( ) ; if ( parent == null ) { return false ; } return inline ( declaration, initialization, parent ) ; }",
        "private boolean inline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } Node result = declaration. getFirstChild ( ) ; while ( result!= null ) { if ( result. isName ( ) ) { return false ; } result = result. getNext ( ) ; } return result. isName ( ) ; }",
        "private boolean inline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } return inline ( declaration, initialization ) ; }",
        "private boolean inline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } Node parent = declaration. getParent ( ) ; if ( parent == null ) { return false ; } return inline ( declaration, initialization ) ; }",
        "public static boolean inline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } return inline ( declaration, initialization ) ; }",
        "public static boolean inline ( Node declaration, Node initialization ) { if ( declaration == null || initialization == null ) { return false ; } return inline ( declaration, initialization ) ; }",
        "public static boolean inline ( Node declaration, Node initialization ) { if ( declaration == null || initialization == null ) { return false ; } return inline ( declaration. getFirstChild ( ), initialization ) ; }",
        "public static boolean inline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } return inline ( declaration, initialization, declaration ) ; }",
        "public static boolean inline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } return inline ( declaration, initialization, false ) ; }",
        "public static boolean isInlineExpression ( Node declaration, Node initialization ) { return isInlineExpression ( declaration, initialization, declaration. getParent ( ) ) ; }",
        "public static boolean isInlineExpression ( Node declaration, Node initialization ) { return isInlineExpression ( declaration. getFirstChild ( ), initialization ) ; }",
        "public static boolean isInlineExpression ( Node declaration, Node init ) { return isInlineExpression ( declaration. getFirstChild ( ), init ) ; }",
        "public static boolean isInlineExpression ( Node declaration, Node init ) { return isInlineExpression ( declaration. getFirstChild ( ), init. getFirstChild ( ) ) ; }",
        "public static boolean isInlineExpression ( Node declaration, Node initialization ) { return isInlineExpression ( declaration, initialization, declaration. getFirstChild ( ) ) ; }",
        "public static boolean isInlineFunctionDeclaration ( Node declaration, Node init ) { if ( declaration == null || init == null ) { return false ; } if ( declaration. isFunction ( ) ) { return false ; } Node parent = declaration. getParent ( ) ; if ( parent == null ) { return false ; } return isInlineFunctionDeclaration ( declaration, init ) ; }",
        "public static boolean isInlineFunctionDeclaration ( Node declaration, Node init ) { if ( declaration == null || init == null ) { return false ; } if ( declaration. isFunction ( ) ) { return false ; } Node parent = declaration. getParent ( ) ; if ( parent == null ) { return false ; } return isInlineFunctionDeclaration ( parent ) ; }",
        "public static boolean isInlineFunctionDeclaration ( Node declaration, Node init ) { if ( declaration == null || init == null ) { return false ; } return isInlineFunctionDeclaration ( declaration, init ) ; }",
        "public static boolean isInlineFunctionDeclaration ( Node declaration, Node init ) { if ( declaration == null || init == null ) { return false ; } if ( declaration. isFunction ( ) ) { return false ; } Node parent = declaration. getParent ( ) ; if ( parent == null ) { return false ; } return isInlineFunctionDeclaration ( parent, init ) ; }",
        "public static boolean isInlineFunctionDeclaration ( Node declaration, Node init ) { if ( declaration == null || init == null ) { return false ; } if ( declaration. isFunction ( ) ) { return false ; } Node parent = declaration. getParent ( ) ; return isInlineFunctionDeclaration ( parent, init ) ; }",
        "public static boolean isInlineExpression ( Node declaration, Node initialization ) { return isInlineExpression ( declaration, initialization, declaration. getParent ( ) ) ; }",
        "private boolean canUseInlineExpression ( Node declaration, Node init ) { return declaration. isName ( ) && init. isName ( ) && declaration. getFirstChild ( ). isGetProp ( ) && init. getFirstChild ( ). isGetProp ( ) ; }",
        "private boolean shouldUseInlineExpression ( Node declaration, Node init ) { return declaration. isName ( ) && init. isName ( ) && declaration. getFirstChild ( ). isGetProp ( ) && init. getFirstChild ( ). isGetProp ( ) ; }",
        "private boolean canUseInlineExpression ( Node declaration, Node initialization ) { return declaration. isName ( ) && initialization. isName ( ) && declaration. getFirstChild ( ). isGetProp ( ) && declaration. getFirstChild ( ). isGetProp ( ) ; }",
        "private boolean canUseInlineExpression ( Node declaration, Node init ) { return declaration. isName ( ) && init. isName ( ) && ( declaration. getFirstChild ( ). isGetProp ( ) || declaration. getFirstChild ( ). isGetProp ( ) ) ; }"
      ],
      "mid_translation": [
        "Determines whether the given declaration and initialization node can be inline into the given reference.",
        "Determines whether the given declaration and initialization node can be inline into the given reference node.",
        "Determines whether the given declaration and initialization node can be used as an inline expression.",
        "Determines whether the given declaration and initialization node can be used as an inline function.",
        "Determines whether the given declaration and initialization node can be used in an inline expression."
      ],
      "output": [
        "private boolean canInline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } Node result = declaration. getFirstChild ( ) ; while ( result!= null ) { if ( result. isName ( ) ) { return false ; } result = result. getNext ( ) ; } return true ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } Node parent = declaration. getParent ( ) ; if ( parent == null ) { return false ; } return inline ( declaration, initialization, parent ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } Node result = declaration. getFirstChild ( ) ; while ( result!= null ) { if ( result. isName ( ) ) { return false ; } result = result. getNext ( ) ; } return result. isName ( ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } return inline ( declaration, initialization ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } Node parent = declaration. getParent ( ) ; if ( parent == null ) { return false ; } return inline ( declaration, initialization ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } return inline ( declaration, initialization ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { if ( declaration == null || initialization == null ) { return false ; } return inline ( declaration, initialization ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { if ( declaration == null || initialization == null ) { return false ; } return inline ( declaration. getFirstChild ( ), initialization ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } return inline ( declaration, initialization, declaration ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { if ( declaration == null ) { return false ; } if ( initialization == null ) { return false ; } return inline ( declaration, initialization, false ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { return isInlineExpression ( declaration, initialization, declaration. getParent ( ) ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { return isInlineExpression ( declaration. getFirstChild ( ), initialization ) ; }",
        "private boolean canInline ( Node declaration, Node init ) { return isInlineExpression ( declaration. getFirstChild ( ), init ) ; }",
        "private boolean canInline ( Node declaration, Node init ) { return isInlineExpression ( declaration. getFirstChild ( ), init. getFirstChild ( ) ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { return isInlineExpression ( declaration, initialization, declaration. getFirstChild ( ) ) ; }",
        "private boolean canInline ( Node declaration, Node init ) { if ( declaration == null || init == null ) { return false ; } if ( declaration. isFunction ( ) ) { return false ; } Node parent = declaration. getParent ( ) ; if ( parent == null ) { return false ; } return isInlineFunctionDeclaration ( declaration, init ) ; }",
        "private boolean canInline ( Node declaration, Node init ) { if ( declaration == null || init == null ) { return false ; } if ( declaration. isFunction ( ) ) { return false ; } Node parent = declaration. getParent ( ) ; if ( parent == null ) { return false ; } return isInlineFunctionDeclaration ( parent ) ; }",
        "private boolean canInline ( Node declaration, Node init ) { if ( declaration == null || init == null ) { return false ; } return isInlineFunctionDeclaration ( declaration, init ) ; }",
        "private boolean canInline ( Node declaration, Node init ) { if ( declaration == null || init == null ) { return false ; } if ( declaration. isFunction ( ) ) { return false ; } Node parent = declaration. getParent ( ) ; if ( parent == null ) { return false ; } return isInlineFunctionDeclaration ( parent, init ) ; }",
        "private boolean canInline ( Node declaration, Node init ) { if ( declaration == null || init == null ) { return false ; } if ( declaration. isFunction ( ) ) { return false ; } Node parent = declaration. getParent ( ) ; return isInlineFunctionDeclaration ( parent, init ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { return isInlineExpression ( declaration, initialization, declaration. getParent ( ) ) ; }",
        "private boolean canInline ( Node declaration, Node init ) { return declaration. isName ( ) && init. isName ( ) && declaration. getFirstChild ( ). isGetProp ( ) && init. getFirstChild ( ). isGetProp ( ) ; }",
        "private boolean canInline ( Node declaration, Node init ) { return declaration. isName ( ) && init. isName ( ) && declaration. getFirstChild ( ). isGetProp ( ) && init. getFirstChild ( ). isGetProp ( ) ; }",
        "private boolean canInline ( Node declaration, Node initialization ) { return declaration. isName ( ) && initialization. isName ( ) && declaration. getFirstChild ( ). isGetProp ( ) && declaration. getFirstChild ( ). isGetProp ( ) ; }",
        "private boolean canInline ( Node declaration, Node init ) { return declaration. isName ( ) && init. isName ( ) && ( declaration. getFirstChild ( ). isGetProp ( ) || declaration. getFirstChild ( ). isGetProp ( ) ) ; }"
      ]
    },
    "Closure_38_/src/com/google/javascript/jscomp/CodeConsumer.java_245-246": {
      "loc": "245-246",
      "input": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x); if (x < 0 && prev == '-') { add(\" \"); } if ((long) x == x && !negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
      "target": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x); if ((x < 0 || negativeZero) && prev == '-') { add(\" \"); } if ((long) x == x && !negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
      "function range": "240,3-267,3",
      "raw_output": [
        "public static String add ( String number ) { if ( number == null ) { number = \"\" ; } return add ( number. trim ( ) ) ; }",
        "public static String add ( String number ) { if ( number == null ) { return null ; } return add ( number. trim ( ) ) ; }",
        "public static String add ( String number ) { if ( number == null ) { return null ; } if ( number. length ( ) == 0 ) { return number ; } return number + \" \" + number ; }",
        "public static String add ( String number ) { if ( number == null ) number = \"\" ; return add ( number. trim ( ) ) ; }",
        "public static String add ( String number ) { if ( number == null ) { return null ; } if ( number. length ( ) == 0 ) { return number ; } return number + \"+\" ; }",
        "public void add ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } elements [ x ] = y ; elements [ y ] = x ; size ++ ; }",
        "public void add ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } elements [ x ] = y ; elements [ y ] = x ; }",
        "public void add ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } elements [ x ] = y ; elements [ y ] = x ; elements [ y ] ++ ; }",
        "public void add ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } elements [ x ] = y ; elements [ y ] = x ; elements [ x + 1 ] = y ; }",
        "public void add ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } elements [ x ] = y ; elements [ y ] = x ; elements [ y ] = y ; size ++ ; }",
        "public void add ( int x, int y ) { _buffer [ _offset ++ ] = x ; _buffer [ _offset ++ ] = y ; _buffer [ _offset ++ ] = x ; }",
        "public void add ( int x, int y ) { _buffer [ _offset ++ ] = x ; _buffer [ _offset ++ ] = y ; }",
        "public void add ( int x, int y ) { _buffer [ _offset ++ ] = x ; _buffer [ _offset + 1 ] = y ; _buffer [ _offset + 2 ] = x ; }",
        "public void add ( int x, int y ) { _buffer [ _offset ++ ] = x ; _buffer [ _offset ++ ] = y ; _buffer [ _offset ++ + 1 ] = x ; }",
        "public void add ( int x, int y ) { _buffer [ _offset ++ ] = x ; _buffer [ _offset ++ ] = y ; _offset ++ ; }",
        "public void add ( int x ) { if ( _size + x < _size ) { System. arraycopy ( _data, _size + x, _data, _size, x ) ; _size += x ; } else { _data [ _size ++ ] = x ; } }",
        "public void add ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( ) ; } elements [ x ] = y ; elements [ y ] = x ; elements [ y + 1 ] = y ; }",
        "public void add ( int x ) { if ( _size + x < _size ) { System. arraycopy ( _data, _size + x, _data, _size, x ) ; _size += x ; } _data [ _size ++ ] = x ; }",
        "public void add ( int x ) { if ( _size + x < _size ) { System. arraycopy ( _data, _size + x, _data, _size, x ) ; _size += x ; } }",
        "public void add ( int x ) { if ( _size + x < _size ) { System. arraycopy ( _data, _size + x, _data, _size, x ) ; _size += x ; } else { _data [ _size + x ] = x ; } }",
        "public void add ( double x ) { elements [ elements. length - 1 ] = x ; System. arraycopy ( elements, 0, elements, 0, elements. length ) ; elements [ elements. length - 1 ] = x ; }",
        "public void add ( double x ) { elements [ elements. length - 1 ] = x ; System. arraycopy ( elements, 0, elements, 0, elements. length ) ; }",
        "public void add ( double x ) { elements [ elements. length - 1 ] = x ; System. arraycopy ( elements, 0, elements, 0, elements. length ) ; elements [ elements. length ] = x ; }",
        "public void add ( double x ) { elements [ elements. length - 1 ] = x ; System. arraycopy ( elements, 0, elements, 0, elements. length ) ; elements [ elements. length - 1 ] += x ; }",
        "public void add ( double x ) { elements [ elements. length - 1 ] = x ; System. arraycopy ( elements, 0, elements, 1, elements. length ) ; elements [ elements. length - 1 ] = x ; }"
      ],
      "mid_translation": [
        "Adds a number.",
        "Adds a number to the set.",
        "Adds a number to the buffer.",
        "Adds a number to the array.",
        "Adds a number to the list."
      ],
      "output": [
        "String addNumber ( String number ) { if ( number == null ) { number = \"\" ; } return add ( number. trim ( ) ) ; }",
        "String addNumber ( String number ) { if ( number == null ) { return null ; } return add ( number. trim ( ) ) ; }",
        "String addNumber ( String number ) { if ( number == null ) { return null ; } if ( number. length ( ) == 0 ) { return number ; } return number + \" \" + number ; }",
        "String addNumber ( String number ) { if ( number == null ) number = \"\" ; return add ( number. trim ( ) ) ; }",
        "String addNumber ( String number ) { if ( number == null ) { return null ; } if ( number. length ( ) == 0 ) { return number ; } return number + \"+\" ; }",
        "void addNumber ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } elements [ x ] = y ; elements [ y ] = x ; size ++ ; }",
        "void addNumber ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } elements [ x ] = y ; elements [ y ] = x ; }",
        "void addNumber ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } elements [ x ] = y ; elements [ y ] = x ; elements [ y ] ++ ; }",
        "void addNumber ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } elements [ x ] = y ; elements [ y ] = x ; elements [ x + 1 ] = y ; }",
        "void addNumber ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } if ( x < 0 ) { throw new IllegalArgumentException ( \"Invalid x: \" + x ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( \"Invalid y: \" + y ) ; } elements [ x ] = y ; elements [ y ] = x ; elements [ y ] = y ; size ++ ; }",
        "void addNumber ( int x, int y ) { _buffer [ _offset ++ ] = x ; _buffer [ _offset ++ ] = y ; _buffer [ _offset ++ ] = x ; }",
        "void addNumber ( int x, int y ) { _buffer [ _offset ++ ] = x ; _buffer [ _offset ++ ] = y ; }",
        "void addNumber ( int x, int y ) { _buffer [ _offset ++ ] = x ; _buffer [ _offset + 1 ] = y ; _buffer [ _offset + 2 ] = x ; }",
        "void addNumber ( int x, int y ) { _buffer [ _offset ++ ] = x ; _buffer [ _offset ++ ] = y ; _buffer [ _offset ++ + 1 ] = x ; }",
        "void addNumber ( int x, int y ) { _buffer [ _offset ++ ] = x ; _buffer [ _offset ++ ] = y ; _offset ++ ; }",
        "void addNumber ( int x ) { if ( _size + x < _size ) { System. arraycopy ( _data, _size + x, _data, _size, x ) ; _size += x ; } else { _data [ _size ++ ] = x ; } }",
        "void addNumber ( int x, int y ) { if ( x < 0 ) { throw new IllegalArgumentException ( ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( ) ; } elements [ x ] = y ; elements [ y ] = x ; elements [ y + 1 ] = y ; }",
        "void addNumber ( int x ) { if ( _size + x < _size ) { System. arraycopy ( _data, _size + x, _data, _size, x ) ; _size += x ; } _data [ _size ++ ] = x ; }",
        "void addNumber ( int x ) { if ( _size + x < _size ) { System. arraycopy ( _data, _size + x, _data, _size, x ) ; _size += x ; } }",
        "void addNumber ( int x ) { if ( _size + x < _size ) { System. arraycopy ( _data, _size + x, _data, _size, x ) ; _size += x ; } else { _data [ _size + x ] = x ; } }",
        "void addNumber ( double x ) { elements [ elements. length - 1 ] = x ; System. arraycopy ( elements, 0, elements, 0, elements. length ) ; elements [ elements. length - 1 ] = x ; }",
        "void addNumber ( double x ) { elements [ elements. length - 1 ] = x ; System. arraycopy ( elements, 0, elements, 0, elements. length ) ; }",
        "void addNumber ( double x ) { elements [ elements. length - 1 ] = x ; System. arraycopy ( elements, 0, elements, 0, elements. length ) ; elements [ elements. length ] = x ; }",
        "void addNumber ( double x ) { elements [ elements. length - 1 ] = x ; System. arraycopy ( elements, 0, elements, 0, elements. length ) ; elements [ elements. length - 1 ] += x ; }",
        "void addNumber ( double x ) { elements [ elements. length - 1 ] = x ; System. arraycopy ( elements, 0, elements, 1, elements. length ) ; elements [ elements. length - 1 ] = x ; }"
      ]
    },
    "Closure_52_/src/com/google/javascript/jscomp/CodeGenerator.java_745-746": {
      "loc": "745-746",
      "input": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } } return len > 0; }",
      "target": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } } return len > 0 && s.charAt(0) != '0'; }",
      "function range": "737,3-746,3",
      "raw_output": [
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Long. parseLong ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } return number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Long. parseLong ( number ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' ) { return true ; } return false ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Long. parseLong ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } return number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( Exception e ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Long. parseLong ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' ) { return true ; } return false ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' ) { return true ; } return false ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( Exception e ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' && number. charAt ( 6 ) =='' ) { return true ; } return false ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' && number. charAt ( 6 ) =='' ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' ) { return true ; } return false ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Long. parseLong ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' && number. charAt ( 6 ) =='' ) { return true ; } return false ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' && number. charAt ( 6 ) =='' ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' ) { return false ; } return true ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' ) { return true ; } return false ; }",
        "public static boolean isNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' ) { return false ; } return true ; }"
      ],
      "mid_translation": [
        "Checks if the given string is a simple number.",
        "Checks if a string is a simple number.",
        "Checks if a string is a simple number",
        "Checks if the given string is a simple number",
        "Checks whether the given string is a simple number."
      ],
      "output": [
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Long. parseLong ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } return number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Long. parseLong ( number ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' ) { return true ; } return false ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Long. parseLong ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } return number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( Exception e ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Long. parseLong ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' ) { return true ; } return false ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' ) { return true ; } return false ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( Exception e ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' && number. charAt ( 6 ) =='' ) { return true ; } return false ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' && number. charAt ( 6 ) =='' ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' ) { return true ; } return false ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Double. parseDouble ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } try { Long. parseLong ( number ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' && number. charAt ( 6 ) =='' ) { return true ; } return false ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' && number. charAt ( 6 ) =='' ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' ) { return false ; } return true ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 ) =='' && number. charAt ( 1 ) =='' && number. charAt ( 2 ) =='' && number. charAt ( 3 ) =='' && number. charAt ( 4 ) =='' && number. charAt ( 5 ) =='' ) { return true ; } return false ; }",
        "static boolean isSimpleNumber ( String number ) { if ( number == null ) { return false ; } if ( number. length ( ) == 0 ) { return false ; } if ( number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' && number. charAt ( 0 )!='' ) { return false ; } return true ; }"
      ]
    },
    "Closure_55_/src/com/google/javascript/jscomp/FunctionRewriter.java_117-118": {
      "loc": "117-118",
      "input": "private static boolean isReduceableFunctionExpression(Node n) { return NodeUtil.isFunctionExpression(n); }",
      "target": "private static boolean isReduceableFunctionExpression(Node n) { return NodeUtil.isFunctionExpression(n) && !NodeUtil.isGetOrSetKey(n.getParent()); }",
      "function range": "116,3-118,3",
      "raw_output": [
        "static boolean is reduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case OR : case AND : case OR : case OR : return true ; default : return false ; } }",
        "static boolean is reduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case OR : case AND : case OR_AND : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return true ; default : return false ; } }",
        "static boolean is reduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case OR : case AND : case OR_AND : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return true ; default : return false ; } }",
        "static boolean is reduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case OR : case AND : case OR_AND : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return true ; default : return false ; } }",
        "static boolean is reduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case OR : case AND : case OR_AND : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return true ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node node ) { switch ( node. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( node ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node node ) { switch ( node. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( node. getFirstChild ( ) ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; case GETPROP : return isFunctionExpression ( n. getLastChild ( ) ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node node ) { switch ( node. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( node ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node node ) { switch ( node. getToken ( ) ) { case FUNCTION_EXPRESSION : return isFunctionExpression ( node ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; case GETPROP : return isFunctionExpression ( n. getFirstChild ( ) ) ; default : return false ; } }",
        "static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FOR : case FOR_IN : case FOR_OF : case FOR_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_",
        "static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FOR : case FOR_IN : case FOR_OF : case FOR_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case",
        "static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FOR : case FOR_IN : case FOR_OF : case FOR_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT",
        "static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FOR : case FOR_IN : case FOR_OF : case FOR_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT",
        "static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FOR : case FOR_IN : case FOR_OF : case FOR_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT",
        "public static boolean isFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; case GETPROP : return isFunctionExpression ( n. getLastChild ( ) ) ; case GETELEM : return isFunctionExpression ( n. getLastChild ( ) ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; case GETPROP : return isFunctionExpression ( n. getLastChild ( ) ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; case GETPROP : return isFunctionExpression ( n. getLastChild ( ) ) ; case GETPROP_LIST : return isFunctionExpression ( n. getLastChild ( ) ) ; default : return false ; } }",
        "public static boolean isFunctionExpression ( Node node ) { switch ( node. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( node. getFirstChild ( ) ) ; default : return false ; } }"
      ],
      "mid_translation": [
        "Returns true if the node is a reduceable function expression.",
        "Returns true if the given node is a function expression.",
        "Returns true if the node is a function expression.",
        "Returns true if the node is aReduceable function expression.",
        "Returns true if the given node represents a function expression."
      ],
      "output": [
        "private static boolean is isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case OR : case AND : case OR : case OR : return true ; default : return false ; } }",
        "private static boolean is isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case OR : case AND : case OR_AND : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return true ; default : return false ; } }",
        "private static boolean is isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case OR : case AND : case OR_AND : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return true ; default : return false ; } }",
        "private static boolean is isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case OR : case AND : case OR_AND : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return true ; default : return false ; } }",
        "private static boolean is isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case OR : case AND : case OR_AND : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return true ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node node ) { switch ( node. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( node ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node node ) { switch ( node. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( node. getFirstChild ( ) ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; case GETPROP : return isFunctionExpression ( n. getLastChild ( ) ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node node ) { switch ( node. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( node ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node node ) { switch ( node. getToken ( ) ) { case FUNCTION_EXPRESSION : return isFunctionExpression ( node ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; case GETPROP : return isFunctionExpression ( n. getFirstChild ( ) ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FOR : case FOR_IN : case FOR_OF : case FOR_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FOR : case FOR_IN : case FOR_OF : case FOR_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FOR : case FOR_IN : case FOR_OF : case FOR_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FOR : case FOR_IN : case FOR_OF : case FOR_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FOR : case FOR_IN : case FOR_OF : case FOR_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT_OF_IN : case FOR_AWAIT",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; case GETPROP : return isFunctionExpression ( n. getLastChild ( ) ) ; case GETELEM : return isFunctionExpression ( n. getLastChild ( ) ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; case GETPROP : return isFunctionExpression ( n. getLastChild ( ) ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node n ) { switch ( n. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( n. getFirstChild ( ) ) ; case GETPROP : return isFunctionExpression ( n. getLastChild ( ) ) ; case GETPROP_LIST : return isFunctionExpression ( n. getLastChild ( ) ) ; default : return false ; } }",
        "private static boolean isReduceableFunctionExpression ( Node node ) { switch ( node. getToken ( ) ) { case FUNCTION : return isFunctionExpression ( node. getFirstChild ( ) ) ; default : return false ; } }"
      ]
    },
    "Closure_57_/src/com/google/javascript/jscomp/ClosureCodingConvention.java_197-198": {
      "loc": "197-198",
      "input": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } return className; }",
      "target": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null && target.getType() == Token.STRING) { className = target.getString(); } } } } return className; }",
      "function range": "188,3-204,3",
      "raw_output": [
        "static String extractFunctionClassName ( Object obj ) { if ( obj == null ) { return null ; } Class <? > clazz = obj. getClass ( ) ; if ( clazz == null ) { return null ; } return clazz. getName ( ) ; }",
        "private String extractFunctionClassName ( Object obj ) { if ( obj == null ) { return null ; } Class <? > clazz = obj. getClass ( ) ; if ( clazz == null ) { return null ; } return clazz. getName ( ) ; }",
        "static String extractFunctionClassName ( Object obj ) { if ( obj == null ) { return null ; } Class <? > clazz = obj. getClass ( ) ; if ( clazz == null ) { return null ; } if ( clazz. isArray ( ) ) { return clazz. getComponentType ( ). getName ( ) ; } return clazz. getName ( ) ; }",
        "static String extractFunctionClassName ( Object obj ) { if ( obj == null ) { return null ; } Class <? > clazz = obj. getClass ( ) ; if ( clazz. isArray ( ) ) { clazz = clazz. getComponentType ( ) ; } return clazz. getName ( ) ; }",
        "static String extractFunctionClassName ( Object obj ) { if ( obj == null ) { return null ; } Class <? > clazz = obj. getClass ( ) ; if ( clazz == Object. class ) { return null ; } return clazz. getName ( ) ; }",
        "public static String getFunctionClassName ( Node node ) { if ( node == null ) return null ; if ( node. isFunction ( ) ) return node. getFirstChild ( ). getString ( ) ; return node. getFirstChild ( ). getString ( ) ; }",
        "public static String getFunctionClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getFirstChild ( ). getString ( ) ; } return node. getString ( ) ; }",
        "public static String getFunctionClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getString ( ) ; } return node. getFirstChild ( ). getString ( ) ; }",
        "public static String getFunctionClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getFirstChild ( ). getString ( ) ; } return null ; }",
        "public static String getFunctionClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getString ( ) ; } return node. getParent ( ). getString ( ) ; }",
        "public static String extractClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return extractClassName ( node. getFirstChild ( ) ) ; }",
        "public static String extractClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return node. getFirstChild ( ). getString ( ) ; }",
        "public static String extractClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return node. getString ( ) ; }",
        "public static String extractClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return null ; }",
        "public static String extractClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return extractClassName ( node. getParent ( ) ) ; }",
        "public static String getFunctionClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getFirstChild ( ). getString ( ) ; } return node. getFirstChild ( ). getString ( ) ; }",
        "public static String getFunctionClassName ( Node node ) { if ( node == null ) { return null ; } if ( node instanceof FunctionNode ) { FunctionNode functionNode = ( FunctionNode ) node ; return functionNode. getFunctionClassName ( ) ; } return null ; }",
        "public static String getFunctionClassName ( Node node ) { if ( node == null ) return null ; if ( node. isFunction ( ) ) return node. getFirstChild ( ). getString ( ) ; return node. getFirstChild ( ). getString ( ) ; }",
        "public static String getFunctionClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getFirstChild ( ). getString ( ) ; } else { return node. getFirstChild ( ). getString ( ) ; } }",
        "public static String getFunctionClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getFirstChild ( ). getString ( ) ; } return null ; }",
        "public static String extractClassName ( Node node ) { if ( node == null ) return null ; if ( node. isFunction ( ) ) return extractClassName ( node. getFirstChild ( ) ) ; return extractClassName ( node. getLastChild ( ) ) ; }",
        "public static String extractClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return extractClassName ( node. getFirstChild ( ) ) ; }",
        "public static String extractClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return node. getFirstChild ( ). getString ( ) ; }",
        "public static String extractClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return null ; }",
        "public static String extractClassName ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return node. getString ( ) ; }"
      ],
      "mid_translation": [
        "Extracts the class name of a function from a G goog object.",
        "Given a tree node and a function name extract the class name.",
        "Given a tree node and a function extract the class name.",
        "Given a tree node and a function extract the class name of the function",
        "Given a tree node and a function extract the class name"
      ],
      "output": [
        "private static String extractClassNameIfGoog ( Object obj ) { if ( obj == null ) { return null ; } Class <? > clazz = obj. getClass ( ) ; if ( clazz == null ) { return null ; } return clazz. getName ( ) ; }",
        "private static String extractClassNameIfGoog ( Object obj ) { if ( obj == null ) { return null ; } Class <? > clazz = obj. getClass ( ) ; if ( clazz == null ) { return null ; } return clazz. getName ( ) ; }",
        "private static String extractClassNameIfGoog ( Object obj ) { if ( obj == null ) { return null ; } Class <? > clazz = obj. getClass ( ) ; if ( clazz == null ) { return null ; } if ( clazz. isArray ( ) ) { return clazz. getComponentType ( ). getName ( ) ; } return clazz. getName ( ) ; }",
        "private static String extractClassNameIfGoog ( Object obj ) { if ( obj == null ) { return null ; } Class <? > clazz = obj. getClass ( ) ; if ( clazz. isArray ( ) ) { clazz = clazz. getComponentType ( ) ; } return clazz. getName ( ) ; }",
        "private static String extractClassNameIfGoog ( Object obj ) { if ( obj == null ) { return null ; } Class <? > clazz = obj. getClass ( ) ; if ( clazz == Object. class ) { return null ; } return clazz. getName ( ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) return null ; if ( node. isFunction ( ) ) return node. getFirstChild ( ). getString ( ) ; return node. getFirstChild ( ). getString ( ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getFirstChild ( ). getString ( ) ; } return node. getString ( ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getString ( ) ; } return node. getFirstChild ( ). getString ( ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getFirstChild ( ). getString ( ) ; } return null ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getString ( ) ; } return node. getParent ( ). getString ( ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return extractClassName ( node. getFirstChild ( ) ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return node. getFirstChild ( ). getString ( ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return node. getString ( ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return null ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return extractClassName ( node. getParent ( ) ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getFirstChild ( ). getString ( ) ; } return node. getFirstChild ( ). getString ( ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node instanceof FunctionNode ) { FunctionNode functionNode = ( FunctionNode ) node ; return functionNode. getFunctionClassName ( ) ; } return null ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) return null ; if ( node. isFunction ( ) ) return node. getFirstChild ( ). getString ( ) ; return node. getFirstChild ( ). getString ( ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getFirstChild ( ). getString ( ) ; } else { return node. getFirstChild ( ). getString ( ) ; } }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return node. getFirstChild ( ). getString ( ) ; } return null ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) return null ; if ( node. isFunction ( ) ) return extractClassName ( node. getFirstChild ( ) ) ; return extractClassName ( node. getLastChild ( ) ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return extractClassName ( node. getFirstChild ( ) ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return node. getFirstChild ( ). getString ( ) ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return null ; }",
        "private static String extractClassNameIfGoog ( Node node ) { if ( node == null ) { return null ; } if ( node. isFunction ( ) ) { return extractClassName ( node. getFirstChild ( ) ) ; } return node. getString ( ) ; }"
      ]
    },
    "Closure_59_/src/com/google/javascript/jscomp/Compiler.java_255-256": {
      "loc": "255-256",
      "input": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); } if (options.checkGlobalThisLevel.isOn()) { options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel); } if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) { options.setWarningLevel( DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR); } List<WarningsGuard> guards = Lists.newArrayList(); guards.add( new SuppressDocWarningsGuard( getDiagnosticGroups().getRegisteredGroups())); guards.add(options.getWarningsGuard()); ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards); if (!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) { composedGuards.addGuard(new DiagnosticGroupWarningsGuard( DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF)); } this.warningsGuard = composedGuards; }",
      "target": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); } if (options.checkGlobalThisLevel.isOn() && !options.disables(DiagnosticGroups.GLOBAL_THIS)) { options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel); } if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) { options.setWarningLevel( DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR); } List<WarningsGuard> guards = Lists.newArrayList(); guards.add( new SuppressDocWarningsGuard( getDiagnosticGroups().getRegisteredGroups())); guards.add(options.getWarningsGuard()); ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards); if (!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) { composedGuards.addGuard(new DiagnosticGroupWarningsGuard( DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF)); } this.warningsGuard = composedGuards; }",
      "function range": "226,3-288,3",
      "raw_output": [
        "private static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "private static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"os.name\" )!= null ) { compilerOptions. setSystemProperty ( \"os.name\", System. getProperty ( \"os.name\" ) ) ; } if ( System. getProperty ( \"os.version\" )!= null ) { compilerOptions. setSystemProperty ( \"os.version\", System. getProperty ( \"os.version\" ) ) ; } if ( System. getProperty ( \"os.arch\" )!= null ) { compilerOptions. setArch ( System. getProperty ( \"os.arch\" ) ) ; } if ( System. getProperty ( \"os.arch\" )!= null ) { compilerOptions. setArch ( System. getProperty ( \"os.arch\" ) ) ; } if ( System. getProperty ( \"os.arch\" )!= null ) { compilerOptions. setArch ( System. getProperty ( \"os.arch\" ) ) ; } } return compilerOptions ; }",
        "private static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } } return compilerOptions ; }",
        "private static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "private static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; } } return compilerOptions ; }",
        "public static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "public static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setProperty ( \"java.class.path\", System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setProperty ( \"java.class.path\", System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "public static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } } return compilerOptions ; }",
        "public static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "public static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setProperty ( \"java.class.path\", System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "protected CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. addOptions ( options ) ; options = compilerOptions ; } return compilerOptions ; }",
        "protected CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setOptions ( options ) ; options = compilerOptions ; } return compilerOptions ; }",
        "protected CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; } return compilerOptions ; }",
        "protected CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setOptions ( options ) ; } return compilerOptions ; }",
        "protected CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. init ( options ) ; } return compilerOptions ; }",
        "public static CompilerOptions getOptions ( ) { if ( options == null ) { options = new CompilerOptions ( ) ; } return options ; }",
        "public static CompilerOptions getOptions ( ) { if ( options == null ) { options = new CompilerOptions ( ) ; } if ( options. getProgramName ( )!= null ) { options. setProgramName ( options. getProgramName ( ) ) ; } return options ; }",
        "public static CompilerOptions getOptions ( ) { if ( options == null ) { options = new CompilerOptions ( ) ; } if ( options. getOpt ( )!= null ) { options. setOpt ( options. getOpt ( ) ) ; } return options ; }",
        "public static CompilerOptions getOptions ( ) { if ( options == null ) options = new CompilerOptions ( ) ; return options ; }",
        "public static CompilerOptions getOptions ( ) { if ( options == null ) { options = new CompilerOptions ( ) ; } if ( options. getProgramName ( ) == null ) { options. setProgramName ( System. getProperty ( \"java.class.path\" ) ) ; } return options ; }",
        "private static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setTestMode ( true ) ; compilerOptions. setTestName ( \"test-name\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestName ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; } return compilerOptions ; }",
        "private static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setTestMode ( true ) ; compilerOptions. setTestName ( \"test-name\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; } return compilerOptions ; }",
        "private static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setTestMode ( true ) ; compilerOptions. setTestName ( \"test-name\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestName ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; } return compilerOptions ; }",
        "private static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setTestMode ( true ) ; compilerOptions. setTestName ( \"test-name\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; } return compilerOptions ; }",
        "private static CompilerOptions getCompilerOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setTestMode ( true ) ; compilerOptions. setTestName ( \"test-name\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestName ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; } return compilerOptions ; }"
      ],
      "mid_translation": [
        "Initializes the compiler options.",
        "Initializes the compiler options object.",
        "Initializes the compiler options",
        "Initialize the compiler options.",
        "Initializes the compiler options object"
      ],
      "output": [
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"os.name\" )!= null ) { compilerOptions. setSystemProperty ( \"os.name\", System. getProperty ( \"os.name\" ) ) ; } if ( System. getProperty ( \"os.version\" )!= null ) { compilerOptions. setSystemProperty ( \"os.version\", System. getProperty ( \"os.version\" ) ) ; } if ( System. getProperty ( \"os.arch\" )!= null ) { compilerOptions. setArch ( System. getProperty ( \"os.arch\" ) ) ; } if ( System. getProperty ( \"os.arch\" )!= null ) { compilerOptions. setArch ( System. getProperty ( \"os.arch\" ) ) ; } if ( System. getProperty ( \"os.arch\" )!= null ) { compilerOptions. setArch ( System. getProperty ( \"os.arch\" ) ) ; } } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; } } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setProperty ( \"java.class.path\", System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setProperty ( \"java.class.path\", System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } if ( System. getProperty ( \"java.class.path\" )!= null ) { compilerOptions. setJavaClassPath ( System. getProperty ( \"java.class.path\" ) ) ; } } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setJavaPath ( System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; if ( System. getProperty ( \"java.class.path\" )!= null ) compilerOptions. setProperty ( \"java.class.path\", System. getProperty ( \"java.class.path\" ) ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. addOptions ( options ) ; options = compilerOptions ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setOptions ( options ) ; options = compilerOptions ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setOptions ( options ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. init ( options ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( options == null ) { options = new CompilerOptions ( ) ; } return options ; }",
        "public CompilerOptions initOptions ( ) { if ( options == null ) { options = new CompilerOptions ( ) ; } if ( options. getProgramName ( )!= null ) { options. setProgramName ( options. getProgramName ( ) ) ; } return options ; }",
        "public CompilerOptions initOptions ( ) { if ( options == null ) { options = new CompilerOptions ( ) ; } if ( options. getOpt ( )!= null ) { options. setOpt ( options. getOpt ( ) ) ; } return options ; }",
        "public CompilerOptions initOptions ( ) { if ( options == null ) options = new CompilerOptions ( ) ; return options ; }",
        "public CompilerOptions initOptions ( ) { if ( options == null ) { options = new CompilerOptions ( ) ; } if ( options. getProgramName ( ) == null ) { options. setProgramName ( System. getProperty ( \"java.class.path\" ) ) ; } return options ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setTestMode ( true ) ; compilerOptions. setTestName ( \"test-name\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestName ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setTestMode ( true ) ; compilerOptions. setTestName ( \"test-name\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setTestMode ( true ) ; compilerOptions. setTestName ( \"test-name\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestName ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setTestMode ( true ) ; compilerOptions. setTestName ( \"test-name\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; compilerOptions. setTestSourceName ( \"test-source\" ) ; } return compilerOptions ; }",
        "public CompilerOptions initOptions ( ) { if ( compilerOptions == null ) { compilerOptions = new CompilerOptions ( ) ; compilerOptions. setTestMode ( true ) ; compilerOptions. setTestName ( \"test-name\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestName ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; compilerOptions. setTestSource ( \"test-source\" ) ; } return compilerOptions ; }"
      ]
    },
    "Closure_62_/src/com/google/javascript/jscomp/LightweightMessageFormatter.java_98-99": {
      "loc": "98-99",
      "input": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) && 0 <= charno && charno < sourceExcerpt.length()) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } } return b.toString(); }",
      "target": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } } return b.toString(); }",
      "function range": "66,3-111,3",
      "raw_output": [
        "public static String format ( String message, Object... args ) { if ( args == null || args. length == 0 ) { return message ; } StringBuilder sb = new StringBuilder ( ) ; sb. append ( message ) ; for ( int i = 0 ; i < args. length ; i ++ ) { sb. append ('' ) ; sb. append ( args [ i ] ) ; } return sb. toString ( ) ; }",
        "public static String format ( String message, Object... args ) { if ( args == null || args. length == 0 ) { return message ; } StringBuilder sb = new StringBuilder ( ) ; sb. append ( message ) ; for ( int i = 0 ; i < args. length ; i ++ ) { sb. append ('' ) ; } sb. append ( args [ i ] ) ; return sb. toString ( ) ; }",
        "public static String format ( String message, Object... args ) { if ( args == null || args. length == 0 ) { return message ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < args. length ; i ++ ) { sb. append ( args [ i ] ) ; sb. append ('' ) ; } return sb. toString ( ) ; }",
        "public static String format ( String message, Object... args ) { if ( args == null || args. length == 0 ) { return message ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < args. length ; i ++ ) { sb. append ( args [ i ]. toString ( ) ) ; } return sb. toString ( ) ; }",
        "public static String format ( String message, Object... args ) { if ( args == null || args. length == 0 ) { return message ; } StringBuilder sb = new StringBuilder ( ) ; sb. append ( formatMessage ( message, args ) ) ; return sb. toString ( ) ; }",
        "public String asJavaScript ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( getMessage ( ) ) ; sb. append ( \"\\n\" ) ; sb. append ( getMessage ( ) ) ; sb. append ( \"\\n\" ) ; sb. append ( getMessage ( ) ) ; sb. append ( \"\\n\" ) ; return sb. toString ( ) ; }",
        "public String asJavaScript ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( this. getMessage ( ) ) ; sb. append ( \"\\n\" ) ; sb. append ( this. getMessage ( ) ) ; sb. append ( \"\\n\" ) ; sb. append ( this. getMessage ( ) ) ; return sb. toString ( ) ; }",
        "public String asJavaScript ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( this. getMessage ( ) ) ; sb. append ( \"\\n\" ) ; sb. append ( this. getMessage ( ) ) ; sb. append ( \"\\n\" ) ; return sb. toString ( ) ; }",
        "public String asJsError ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( getMessage ( ) ) ; sb. append ( \": \" ) ; sb. append ( getMessage ( ) ) ; sb. append ( \"\\n\" ) ; return sb. toString ( ) ; }",
        "public String asJavaScript ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( getMessage ( ) ) ; sb. append ( \": \" ) ; sb. append ( getMessage ( ) ) ; sb. append ( \"\\n\" ) ; return sb. toString ( ) ; }",
        "public static String format ( Throwable error, String format, Object... args ) { return format ( error, format, args ) ; }",
        "public static String format ( Throwable e, String format, Object... args ) { return format ( e, format, args ) ; }",
        "public static String format ( Throwable error, String... options ) { return format ( error, Arrays. asList ( options ) ) ; }",
        "public static String format ( Throwable error, String format, Object... args ) { return format ( error. getMessage ( ), format, args ) ; }",
        "public static String format ( Throwable error, String format, Object... options ) { return format ( error, format, options, null ) ; }",
        "public static String format ( Throwable error ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; error. printStackTrace ( pw ) ; pw. close ( ) ; return sw. toString ( ) ; }",
        "public static String format ( Throwable error ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; error. printStackTrace ( pw ) ; pw. flush ( ) ; return sw. toString ( ) ; }",
        "public static String format ( Throwable error ) { StringWriter sw = new StringWriter ( ) ; format ( error, sw ) ; return sw. toString ( ) ; }",
        "public static String format ( Throwable error ) { StringBuilder sb = new StringBuilder ( ) ; format ( error, sb ) ; return sb. toString ( ) ; }",
        "public static String format ( Throwable error ) { if ( error == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; format ( error, sb ) ; return sb. toString ( ) ; }",
        "public static String format ( Throwable error, Format format ) { return format == null? null : format. format ( error ) ; }",
        "public static String format ( Throwable error, Format formatter ) { return format ( error. getMessage ( ), formatter, null ) ; }",
        "public static String format ( Throwable error, Format format ) { return format == null? null : format. format ( error, format ) ; }",
        "public static String format ( Throwable error, Format format ) { return format ( error. getMessage ( ), format, null ) ; }",
        "public static String format ( Throwable error, Formatter formatter ) { return format ( error. getMessage ( ), formatter, null ) ; }"
      ],
      "mid_translation": [
        "Format the error with the given options.",
        "Format the given error as a JavaScript error.",
        "Format the given error with the given options.",
        "Format the given error into a string.",
        "Format the given error with the given formatter."
      ],
      "output": [
        "private String format ( String message, Object... args ) { if ( args == null || args. length == 0 ) { return message ; } StringBuilder sb = new StringBuilder ( ) ; sb. append ( message ) ; for ( int i = 0 ; i < args. length ; i ++ ) { sb. append ('' ) ; sb. append ( args [ i ] ) ; } return sb. toString ( ) ; }",
        "private String format ( String message, Object... args ) { if ( args == null || args. length == 0 ) { return message ; } StringBuilder sb = new StringBuilder ( ) ; sb. append ( message ) ; for ( int i = 0 ; i < args. length ; i ++ ) { sb. append ('' ) ; } sb. append ( args [ i ] ) ; return sb. toString ( ) ; }",
        "private String format ( String message, Object... args ) { if ( args == null || args. length == 0 ) { return message ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < args. length ; i ++ ) { sb. append ( args [ i ] ) ; sb. append ('' ) ; } return sb. toString ( ) ; }",
        "private String format ( String message, Object... args ) { if ( args == null || args. length == 0 ) { return message ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < args. length ; i ++ ) { sb. append ( args [ i ]. toString ( ) ) ; } return sb. toString ( ) ; }",
        "private String format ( String message, Object... args ) { if ( args == null || args. length == 0 ) { return message ; } StringBuilder sb = new StringBuilder ( ) ; sb. append ( formatMessage ( message, args ) ) ; return sb. toString ( ) ; }",
        "private String format ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( getMessage ( ) ) ; sb. append ( \"\\n\" ) ; sb. append ( getMessage ( ) ) ; sb. append ( \"\\n\" ) ; sb. append ( getMessage ( ) ) ; sb. append ( \"\\n\" ) ; return sb. toString ( ) ; }",
        "private String format ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( this. getMessage ( ) ) ; sb. append ( \"\\n\" ) ; sb. append ( this. getMessage ( ) ) ; sb. append ( \"\\n\" ) ; sb. append ( this. getMessage ( ) ) ; return sb. toString ( ) ; }",
        "private String format ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( this. getMessage ( ) ) ; sb. append ( \"\\n\" ) ; sb. append ( this. getMessage ( ) ) ; sb. append ( \"\\n\" ) ; return sb. toString ( ) ; }",
        "private String format ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( getMessage ( ) ) ; sb. append ( \": \" ) ; sb. append ( getMessage ( ) ) ; sb. append ( \"\\n\" ) ; return sb. toString ( ) ; }",
        "private String format ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( getMessage ( ) ) ; sb. append ( \": \" ) ; sb. append ( getMessage ( ) ) ; sb. append ( \"\\n\" ) ; return sb. toString ( ) ; }",
        "private String format ( Throwable error, String format, Object... args ) { return format ( error, format, args ) ; }",
        "private String format ( Throwable e, String format, Object... args ) { return format ( e, format, args ) ; }",
        "private String format ( Throwable error, String... options ) { return format ( error, Arrays. asList ( options ) ) ; }",
        "private String format ( Throwable error, String format, Object... args ) { return format ( error. getMessage ( ), format, args ) ; }",
        "private String format ( Throwable error, String format, Object... options ) { return format ( error, format, options, null ) ; }",
        "private String format ( Throwable error ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; error. printStackTrace ( pw ) ; pw. close ( ) ; return sw. toString ( ) ; }",
        "private String format ( Throwable error ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; error. printStackTrace ( pw ) ; pw. flush ( ) ; return sw. toString ( ) ; }",
        "private String format ( Throwable error ) { StringWriter sw = new StringWriter ( ) ; format ( error, sw ) ; return sw. toString ( ) ; }",
        "private String format ( Throwable error ) { StringBuilder sb = new StringBuilder ( ) ; format ( error, sb ) ; return sb. toString ( ) ; }",
        "private String format ( Throwable error ) { if ( error == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; format ( error, sb ) ; return sb. toString ( ) ; }",
        "private String format ( Throwable error, Format format ) { return format == null? null : format. format ( error ) ; }",
        "private String format ( Throwable error, Format formatter ) { return format ( error. getMessage ( ), formatter, null ) ; }",
        "private String format ( Throwable error, Format format ) { return format == null? null : format. format ( error, format ) ; }",
        "private String format ( Throwable error, Format format ) { return format ( error. getMessage ( ), format, null ) ; }",
        "private String format ( Throwable error, Formatter formatter ) { return format ( error. getMessage ( ), formatter, null ) ; }"
      ]
    },
    "Closure_65_/src/com/google/javascript/jscomp/CodeGenerator.java_1015-1016": {
      "loc": "1015-1016",
      "input": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
      "target": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\000\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
      "function range": "1005,3-1075,3",
      "raw_output": [
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } else if ( c =='' ) { output. append ('' ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; switch ( c ) { case'' : output. append ('' ) ; break ; case'' : output. append ('' ) ; break ; default : output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' || c =='' ) { output. append ( c ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } output. append ( c ) ; } return output. toString ( ) ; }",
        "StringEscape ( CharSequence s ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "StringEscape ( CharSequence s ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "StringEscape ( CharSequence s ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "StringEscape ( CharSequence s ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "StringEscape ( CharSequence s ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "private static boolean checkEscapeSequence ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "private static boolean checkEscapeSequence ( char c ) { if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "private static boolean checkEscapeSequence ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "private static boolean checkEscapeSequence ( char c ) { if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "private static boolean checkEscapeSequence ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escapeSpecial ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }"
      ],
      "mid_translation": [
        "Method to escape a string.",
        "escape sequence for a string.",
        "escape sequence for JavaScript source code",
        "source code for escape sequences.",
        "Method to escape special characters."
      ],
      "output": [
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } else if ( c =='' ) { output. append ('' ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "static String strEscape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; switch ( c ) { case'' : output. append ('' ) ; break ; case'' : output. append ('' ) ; break ; default : output. append ( c ) ; } } return output. toString ( ) ; }",
        "static String strEscape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "static String strEscape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' || c =='' ) { output. append ( c ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "static String strEscape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } output. append ( c ) ; } return output. toString ( ) ; }",
        "",
        "",
        "",
        "",
        "",
        "static boolean strEscape ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "static boolean strEscape ( char c ) { if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "static boolean strEscape ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "static boolean strEscape ( char c ) { if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "static boolean strEscape ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }"
      ]
    },
    "Closure_67_/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java_318-319": {
      "loc": "318-319",
      "input": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP ) { boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } } return false; }",
      "target": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP && assign.getParent().getType() == Token.EXPR_RESULT) { boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } } return false; }",
      "function range": "314,5-334,5",
      "raw_output": [
        "private boolean isPrototypePropertyAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototypeProperty ( ) ; } return false ; }",
        "private boolean isPrototypeAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototype ( ) ; } return false ; }",
        "public static boolean isPrototypeAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private boolean isPrototypeAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private boolean isPrototypePropertyAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototype ( ) ; } return false ; }",
        "public static boolean isPrototypeAssignment ( Assignment assignment ) { if ( assignment. getPrototype ( ) == null ) { return false ; } return assignment. getPrototype ( ). isPrototype ( ) ; }",
        "private static boolean isPrototypeAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private boolean isPrototypeAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isConstructor ( ) && prototype. isConstructor ( ) ; }",
        "private boolean isPrototypeAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private static boolean isPrototypeAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototype ( ) ; } return false ; }",
        "private boolean isPrototypePropertyAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototypeProperty ( ) ; } return false ; }",
        "private boolean isPrototypeAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototype ( ) ; } return false ; }",
        "private static boolean isPrototypeAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private boolean isPrototypeAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private static boolean isPrototypeAssignment ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype == null ) { return false ; } ObjectType prototypeType = prototype. toObjectType ( ) ; return prototypeType!= null && prototypeType. isPrototype ( ) ; }",
        "private boolean isPrototypeAssignment ( Node assign ) { Node parent = assign. getParent ( ) ; if ( parent. isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isThis ( ) ) { return true ; } return false ; }",
        "private boolean isPrototypeAssignment ( Node assign ) { Node parent = assign. getParent ( ) ; if ( parent. isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) ) { return true ; } return false ; }",
        "private boolean isPrototypeAssignment ( Node assign ) { Node parent = assign. getParent ( ) ; if ( parent. isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isThis ( ) ) { return true ; } return false ; }",
        "private boolean isPrototypeAssignment ( Node assign ) { Node parent = assign. getParent ( ) ; if ( parent. isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) ) { return true ; } return false ; }",
        "private boolean isPrototypeAssignment ( Node assign ) { Node parent = assign. getParent ( ) ; if ( parent. isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) ) { return true ; } return false ; }",
        "public static boolean isPrototypePropertyAssign ( Assignment assignment ) { if ( assignment. getPrototype ( ) == null ) { return false ; } return assignment. getPrototype ( ). isPrototypeProperty ( ) ; }",
        "public static boolean isPrototypePropertyAssign ( Assignment assignment ) { if ( assignment. getPrototype ( ) == null ) { return false ; } return assignment. getPrototype ( ). isPrototypePropertyAssign ( ) ; }",
        "public static boolean isPrototypePropertyAssign ( Assignment assignment ) { if ( assignment. getPrototype ( ) == null ) { return false ; } return assignment. getPrototype ( ). isPrototype ( ) ; }",
        "public static boolean isPrototypePropertyAssignment ( Assignment assignment ) { Node parent = assignment. getParent ( ) ; if ( parent == null ) { return false ; } return isPrototypePropertyAssignment ( parent ) ; }",
        "public static boolean isPrototypePropertyAssign ( Assignment assignment ) { if ( assignment. getPrototype ( ) == null ) { return false ; } return assignment. getPrototype ( ). isProperty ( ) ; }"
      ],
      "mid_translation": [
        "Determines whether the given assignment is an assign to a prototype property.",
        "Returns true if the given assignment is an assignment to a prototype property.",
        "Returns true if the given assignment is an assign to a prototype property.",
        "Returns true if the given assign is an assignment to a prototype property.",
        "Determines whether the given assignment is a prototype property assign."
      ],
      "output": [
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototypeProperty ( ) ; } return false ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototype ( ) ; } return false ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototype ( ) ; } return false ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { if ( assignment. getPrototype ( ) == null ) { return false ; } return assignment. getPrototype ( ). isPrototype ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isConstructor ( ) && prototype. isConstructor ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototype ( ) ; } return false ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototypeProperty ( ) ; } return false ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype!= null ) { return prototype. isPrototype ( ) ; } return false ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; return prototype!= null && prototype. isPrototype ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { ObjectType prototype = assignment. getPrototype ( ) ; if ( prototype == null ) { return false ; } ObjectType prototypeType = prototype. toObjectType ( ) ; return prototypeType!= null && prototypeType. isPrototype ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Node assign ) { Node parent = assign. getParent ( ) ; if ( parent. isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isThis ( ) ) { return true ; } return false ; }",
        "private boolean isPrototypePropertyAssign ( Node assign ) { Node parent = assign. getParent ( ) ; if ( parent. isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) ) { return true ; } return false ; }",
        "private boolean isPrototypePropertyAssign ( Node assign ) { Node parent = assign. getParent ( ) ; if ( parent. isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isThis ( ) ) { return true ; } return false ; }",
        "private boolean isPrototypePropertyAssign ( Node assign ) { Node parent = assign. getParent ( ) ; if ( parent. isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) ) { return true ; } return false ; }",
        "private boolean isPrototypePropertyAssign ( Node assign ) { Node parent = assign. getParent ( ) ; if ( parent. isGetProp ( ) && parent. getFirstChild ( ). isGetProp ( ) && parent. getFirstChild ( ). getNext ( ). isGetProp ( ) ) { return true ; } return false ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { if ( assignment. getPrototype ( ) == null ) { return false ; } return assignment. getPrototype ( ). isPrototypeProperty ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { if ( assignment. getPrototype ( ) == null ) { return false ; } return assignment. getPrototype ( ). isPrototypePropertyAssign ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { if ( assignment. getPrototype ( ) == null ) { return false ; } return assignment. getPrototype ( ). isPrototype ( ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { Node parent = assignment. getParent ( ) ; if ( parent == null ) { return false ; } return isPrototypePropertyAssignment ( parent ) ; }",
        "private boolean isPrototypePropertyAssign ( Assignment assignment ) { if ( assignment. getPrototype ( ) == null ) { return false ; } return assignment. getPrototype ( ). isProperty ( ) ; }"
      ]
    },
    "Closure_70_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1745-1746": {
      "loc": "1745-1746",
      "input": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType != null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters != null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter != null) { defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
      "target": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType != null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters != null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter != null) { defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), false); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
      "function range": "1734,5-1753,5",
      "raw_output": [
        "private void declareFunctionArgsSlot ( ) { int i = 0 ; for ( int j = 0 ; j < functionArgs. length ; j ++ ) { functionArgs [ i ] = i + j ; i += functionArgs [ i ]. length ; } }",
        "private void declareFunctionArgsSlot ( ) { int i = 0 ; for ( int j = 0 ; j < functionArgs. length ; j ++ ) { functionArgs [ i ] = i ; i ++ ; } }",
        "private void declareFunctionArgsSlot ( ) { int i = 0 ; for ( int j = 0 ; j < functionArgs. length ; j ++ ) { functionArgs [ i ] = i + j ; i += functionArgs. length ; } }",
        "private void declareFunctionArgsSlot ( ) { int i = 0 ; for ( int j = 0 ; j < functionArgs. length ; j ++ ) { functionArgs [ i ++ ] = i ; } }",
        "private void declareFunctionArgsSlot ( ) { int i = 0 ; for ( int j = 0 ; j < functionArgs. length ; j ++ ) { functionArgs [ i ] = i + j ; i ++ ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T1, T2 > FunctionArgs < T1, T2 > with ( Function < T1, T2 > function ) { return new FunctionArgs <> ( function ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T1, T2 > FunctionArgs < T1, T2 > declare ( Function < T1, T2 > function ) { return new FunctionArgs <> ( function ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T, R > Function < T, R > args ( Function < T, R > function ) { return new Function < T, R > ( function ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T1, T2 > Function < T1, T2 > withArgs ( Function < T1, T2 > function ) { return function ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T1, T2 > Function < T1, T2 > args ( Function < T1, T2 > function ) { return new Function <> ( function ) ; }",
        "private void declareFunctionArgs ( ) { if ( functionArgs == null ) { functionArgs = new ArrayList <> ( ) ; for ( int i = 0 ; i < functionArgs. size ( ) ; i ++ ) { functionArgs. add ( functionArgs. get ( i ) ) ; } } }",
        "public void declareFunctionArgs ( String name, Object [ ] args ) { if ( functionArgs == null ) { functionArgs = new Object [ args. length ] ; System. arraycopy ( args, 0, functionArgs, 0, functionArgs. length ) ; } functionArgs [ functionArgs. length - 1 ] = name ; }",
        "public void declareFunctionArgs ( String name, Object [ ] args ) { if ( functionArgs == null ) { functionArgs = new Object [ args. length ] ; System. arraycopy ( args, 0, functionArgs, 0, args. length ) ; } functionArgs [ functionArgs. length - 1 ] = name ; }",
        "public void declareFunctionArgs ( String name, Object [ ] args ) { if ( functionArgs == null ) { functionArgs = new Object [ args. length + 1 ] ; System. arraycopy ( args, 0, functionArgs, 0, args. length ) ; } functionArgs [ functionArgs. length ] = name ; }",
        "public void declareFunctionArgs ( String name, Object [ ] args ) { if ( functionArgs == null ) { functionArgs = new Object [ args. length + 1 ] ; System. arraycopy ( args, 0, functionArgs, 0, args. length ) ; } functionArgs. put ( name, args ) ; }",
        "private void declareArguments ( ) { if ( arguments!= null ) { arguments = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. size ( ) ; i ++ ) { arguments. add ( arguments. get ( i ) ) ; } } }",
        "private void declareArguments ( ) { if ( arguments == null ) { arguments = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. size ( ) ; i ++ ) { arguments. add ( arguments. get ( i ) ) ; } } }",
        "private void declareArguments ( ) { if ( arguments!= null ) { arguments = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. size ( ) ; i ++ ) { arguments. add ( declareArgument ( i ) ) ; } } }",
        "private void declareArguments ( ) { if ( arguments!= null ) { arguments = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. size ( ) ; i ++ ) { arguments. add ( declareArg ( i ) ) ; } } }",
        "private void declareArguments ( ) { if ( arguments!= null ) { arguments = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. size ( ) ; ++ i ) { arguments. add ( arguments. get ( i ) ) ; } } }",
        "public static < T, R > Function < T, R > withNoArgs ( Function < T, R > function ) { return new Function < T, R > ( ) { @ Override public R apply ( T input ) { return function. apply ( input ) ; } } ; }",
        "public static < T, R > Function < T, R > withNoArgs ( Function < T, R > function ) { if ( function == null ) { throw new NullPointerException ( \"function\" ) ; } return new Function < T, R > ( function ) ; }",
        "public static < T, R > Function < T, R > with ( Function < T, R > function ) { return new Function < T, R > ( ) { public R apply ( T input ) { return function. apply ( input ) ; } } ; }",
        "public static < T, R > Function < T, R > with ( Function < T, R > function ) { return new Function < T, R > ( function ) ; }",
        "public static < T, R > Function < T, R > withNoArgs ( Function < T, R > function ) { return new Function < T, R > ( function ) ; }"
      ],
      "mid_translation": [
        "Declares slot for function arguments.",
        "Declares a function s arguments.",
        "Declares the arguments for a function.",
        "Declares the arguments of a function.",
        "Declares a function with no arguments."
      ],
      "output": [
        "private void declareArguments ( ) { int i = 0 ; for ( int j = 0 ; j < functionArgs. length ; j ++ ) { functionArgs [ i ] = i + j ; i += functionArgs [ i ]. length ; } }",
        "private void declareArguments ( ) { int i = 0 ; for ( int j = 0 ; j < functionArgs. length ; j ++ ) { functionArgs [ i ] = i ; i ++ ; } }",
        "private void declareArguments ( ) { int i = 0 ; for ( int j = 0 ; j < functionArgs. length ; j ++ ) { functionArgs [ i ] = i + j ; i += functionArgs. length ; } }",
        "private void declareArguments ( ) { int i = 0 ; for ( int j = 0 ; j < functionArgs. length ; j ++ ) { functionArgs [ i ++ ] = i ; } }",
        "private void declareArguments ( ) { int i = 0 ; for ( int j = 0 ; j < functionArgs. length ; j ++ ) { functionArgs [ i ] = i + j ; i ++ ; } }",
        "private < T1, T2 > FunctionArgs < T1, T2 > declareArguments ( Function < T1, T2 > function ) { return new FunctionArgs <> ( function ) ; }",
        "private < T1, T2 > FunctionArgs < T1, T2 > declareArguments ( Function < T1, T2 > function ) { return new FunctionArgs <> ( function ) ; }",
        "private < T, R > Function < T, R > declareArguments ( Function < T, R > function ) { return new Function < T, R > ( function ) ; }",
        "private < T1, T2 > Function < T1, T2 > declareArguments ( Function < T1, T2 > function ) { return function ; }",
        "private < T1, T2 > Function < T1, T2 > declareArguments ( Function < T1, T2 > function ) { return new Function <> ( function ) ; }",
        "private void declareArguments ( ) { if ( functionArgs == null ) { functionArgs = new ArrayList <> ( ) ; for ( int i = 0 ; i < functionArgs. size ( ) ; i ++ ) { functionArgs. add ( functionArgs. get ( i ) ) ; } } }",
        "private void declareArguments ( String name, Object [ ] args ) { if ( functionArgs == null ) { functionArgs = new Object [ args. length ] ; System. arraycopy ( args, 0, functionArgs, 0, functionArgs. length ) ; } functionArgs [ functionArgs. length - 1 ] = name ; }",
        "private void declareArguments ( String name, Object [ ] args ) { if ( functionArgs == null ) { functionArgs = new Object [ args. length ] ; System. arraycopy ( args, 0, functionArgs, 0, args. length ) ; } functionArgs [ functionArgs. length - 1 ] = name ; }",
        "private void declareArguments ( String name, Object [ ] args ) { if ( functionArgs == null ) { functionArgs = new Object [ args. length + 1 ] ; System. arraycopy ( args, 0, functionArgs, 0, args. length ) ; } functionArgs [ functionArgs. length ] = name ; }",
        "private void declareArguments ( String name, Object [ ] args ) { if ( functionArgs == null ) { functionArgs = new Object [ args. length + 1 ] ; System. arraycopy ( args, 0, functionArgs, 0, args. length ) ; } functionArgs. put ( name, args ) ; }",
        "private void declareArguments ( ) { if ( arguments!= null ) { arguments = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. size ( ) ; i ++ ) { arguments. add ( arguments. get ( i ) ) ; } } }",
        "private void declareArguments ( ) { if ( arguments == null ) { arguments = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. size ( ) ; i ++ ) { arguments. add ( arguments. get ( i ) ) ; } } }",
        "private void declareArguments ( ) { if ( arguments!= null ) { arguments = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. size ( ) ; i ++ ) { arguments. add ( declareArgument ( i ) ) ; } } }",
        "private void declareArguments ( ) { if ( arguments!= null ) { arguments = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. size ( ) ; i ++ ) { arguments. add ( declareArg ( i ) ) ; } } }",
        "private void declareArguments ( ) { if ( arguments!= null ) { arguments = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. size ( ) ; ++ i ) { arguments. add ( arguments. get ( i ) ) ; } } }",
        "private < T, R > Function < T, R > declareArguments ( Function < T, R > function ) { return new Function < T, R > ( ) { @ Override public R apply ( T input ) { return function. apply ( input ) ; } } ; }",
        "private < T, R > Function < T, R > declareArguments ( Function < T, R > function ) { if ( function == null ) { throw new NullPointerException ( \"function\" ) ; } return new Function < T, R > ( function ) ; }",
        "private < T, R > Function < T, R > declareArguments ( Function < T, R > function ) { return new Function < T, R > ( ) { public R apply ( T input ) { return function. apply ( input ) ; } } ; }",
        "private < T, R > Function < T, R > declareArguments ( Function < T, R > function ) { return new Function < T, R > ( function ) ; }",
        "private < T, R > Function < T, R > declareArguments ( Function < T, R > function ) { return new Function < T, R > ( function ) ; }"
      ]
    },
    "Closure_71_/src/com/google/javascript/jscomp/CheckAccessControls.java_416-417": {
      "loc": "416-417",
      "input": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) { ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString(); if (objectType != null) { boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop; if (isOverride) { objectType = objectType.getImplicitPrototype(); } JSDocInfo docInfo = null; for (; objectType != null; objectType = objectType.getImplicitPrototype()) { docInfo = objectType.getOwnPropertyJSDocInfo(propertyName); if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) { break; } } if (objectType == null) { return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); JSType ownerType = normalizeClassType(objectType); if (isOverride) { JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility(); if (visibility == Visibility.PRIVATE && !sameInput) { compiler.report( t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) { compiler.report( t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name())); } } else { if (sameInput) { return; } else if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) { if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) { return; } compiler.report( t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName( getprop.getFirstChild(), true))); } else if (visibility == Visibility.PROTECTED) { if (currentClass == null || !currentClass.isSubtype(ownerType)) { compiler.report( t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName( getprop.getFirstChild(), true))); } } } } }",
      "target": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) { ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString(); if (objectType != null) { boolean isOverride = parent.getJSDocInfo() != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop; if (isOverride) { objectType = objectType.getImplicitPrototype(); } JSDocInfo docInfo = null; for (; objectType != null; objectType = objectType.getImplicitPrototype()) { docInfo = objectType.getOwnPropertyJSDocInfo(propertyName); if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) { break; } } if (objectType == null) { return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); JSType ownerType = normalizeClassType(objectType); if (isOverride) { JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility(); if (visibility == Visibility.PRIVATE && !sameInput) { compiler.report( t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) { compiler.report( t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name())); } } else { if (sameInput) { return; } else if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) { if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) { return; } compiler.report( t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName( getprop.getFirstChild(), true))); } else if (visibility == Visibility.PROTECTED) { if (currentClass == null || !currentClass.isSubtype(ownerType)) { compiler.report( t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName( getprop.getFirstChild(), true))); } } } } }",
      "function range": "407,3-500,3",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Closure_73_/src/com/google/javascript/jscomp/CodeGenerator.java_1045-1046": {
      "loc": "1045-1046",
      "input": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
      "target": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
      "function range": "988,3-1058,3",
      "raw_output": [
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } else if ( c =='' ) { output. append ('' ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; switch ( c ) { case'' : output. append ('' ) ; break ; case'' : output. append ('' ) ; break ; default : output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' || c =='' ) { output. append ( c ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String escape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } output. append ( c ) ; } return output. toString ( ) ; }",
        "StringEscape ( CharSequence s ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "StringEscape ( CharSequence s ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "StringEscape ( CharSequence s ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "StringEscape ( CharSequence s ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "StringEscape ( CharSequence s ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "private static boolean checkEscapeSequence ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "private static boolean checkEscapeSequence ( char c ) { if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "private static boolean checkEscapeSequence ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "private static boolean checkEscapeSequence ( char c ) { if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "private static boolean checkEscapeSequence ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String escapeSpecial ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }"
      ],
      "mid_translation": [
        "Method to escape a string.",
        "escape sequence for a string.",
        "escape sequence for JavaScript source code",
        "source code for escape sequences.",
        "Method to escape special characters."
      ],
      "output": [
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } else if ( c =='' ) { output. append ('' ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "static String strEscape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; switch ( c ) { case'' : output. append ('' ) ; break ; case'' : output. append ('' ) ; break ; default : output. append ( c ) ; } } return output. toString ( ) ; }",
        "static String strEscape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "static String strEscape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' || c =='' ) { output. append ( c ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "static String strEscape ( String input ) { if ( input == null ) { return null ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } output. append ( c ) ; } return output. toString ( ) ; }",
        "",
        "",
        "",
        "",
        "",
        "static boolean strEscape ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "static boolean strEscape ( char c ) { if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "static boolean strEscape ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "static boolean strEscape ( char c ) { if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "static boolean strEscape ( char c ) { if ( c =='' ) { return true ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } if ( c =='' ) { return false ; } return true ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }"
      ]
    },
    "Closure_82_/src/com/google/javascript/rhino/jstype/JSType.java_163-164": {
      "loc": "163-164",
      "input": "public final boolean isEmptyType() { return isNoType() || isNoObjectType() || isNoResolvedType(); }",
      "target": "public final boolean isEmptyType() { return isNoType() || isNoObjectType() || isNoResolvedType() || (registry.getNativeFunctionType( JSTypeNative.LEAST_FUNCTION_TYPE) == this); }",
      "function range": "162,3-164,3",
      "raw_output": [
        "public boolean isEmpty ( ) { Node node = root ; while ( node!= null ) { if (! node. isEmpty ( ) ) { return false ; } node = node. getParent ( ) ; } return true ; }",
        "public boolean isEmpty ( ) { Node node = root ; while ( node!= null ) { if (! node. isEmpty ( ) ) return false ; node = node. getParent ( ) ; } return true ; }",
        "public boolean isEmpty ( ) { Node node = root ; while ( node!= null ) { if (! node. isEmpty ( ) ) { return false ; } node = node. next ; } return true ; }",
        "public boolean isEmpty ( ) { Node node = root ; while ( node!= null ) { if (! node. isEmpty ( ) ) return false ; node = node. next ; } return true ; }",
        "public boolean isEmpty ( ) { for ( int i = 0 ; i < nodes. length ; i ++ ) { if ( nodes [ i ]. isEmpty ( ) ) return true ; } return false ; }",
        "public static boolean isEmpty ( Type type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ). isEmpty ( ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return genericArrayType. getActualTypeArguments ( ). isEmpty ( ) ; } else { return false ; } }",
        "public static boolean isEmpty ( Type type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getRawType ( ). isEmpty ( ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return genericArrayType. getGenericComponentType ( ). isEmpty ( ) ; } else { return false ; } }",
        "public static boolean isEmpty ( Type type ) { if ( type instanceof Class <? > ) { return ( ( Class <? > ) type ). isEmpty ( ) ; } if ( type instanceof ParameterizedType ) { return ( ( ParameterizedType ) type ). getRawType ( ). isEmpty ( ) ; } return false ; }",
        "public static boolean isEmpty ( Type type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getRawType ( ) == null || parameterizedType. getRawType ( ). isEmpty ( ) ; } else { return false ; } }",
        "public static boolean isEmpty ( Type type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getRawType ( ) == null || parameterizedType. getRawType ( ). isEmpty ( ) ; } return false ; }",
        "public static boolean isEmpty ( Node node ) { if ( node == null ) { return false ; } if ( node. isString ( ) ) { return node. getString ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } return false ; }",
        "public static boolean isEmpty ( Node node ) { if ( node == null ) { return false ; } if ( node. isString ( ) ) { return node. getString ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } return true ; }",
        "public static boolean isEmpty ( Node node ) { if ( node == null ) { return false ; } if ( node. isString ( ) ) { return node. getString ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } return false ; }",
        "public static boolean isEmpty ( Node node ) { if ( node == null ) { return false ; } if ( node. isString ( ) ) { return node. getString ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } return false ; }",
        "public static boolean isEmpty ( Node node ) { if ( node == null ) { return false ; } if ( node. isString ( ) ) { return node. getString ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } return false ; }",
        "public static boolean isEmpty ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof String ) { return ( ( String ) obj ). isEmpty ( ) ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) == 0 ; } if ( obj instanceof Boolean ) { return ( ( Boolean ) obj ). booleanValue ( ) ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } return false ; }",
        "public static boolean isEmpty ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) == 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) == 0 ; } if ( obj instanceof Boolean ) { return ( ( Boolean ) obj ). booleanValue ( ) ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } return false ; }",
        "public static boolean isEmpty ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof String ) { return ( ( String ) obj ). isEmpty ( ) ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) == 0 ; } if ( obj instanceof Boolean ) { return ( ( Boolean ) obj ). booleanValue ( ) ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } return false ; }",
        "public static boolean isEmpty ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) == 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) == 0 ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Calendar ) { return ( ( Calendar ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Calendar ) { return ( ( Calendar ) obj ). getTime ( ) == 0 ; } return false ; }",
        "public static boolean isEmpty ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) > 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) > 0 ; } if ( obj instanceof Boolean ) { return ( ( Boolean ) obj ). booleanValue ( ) ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) > 0 ; } return false ; }",
        "public static boolean isEmptyType ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : case Node. CDATA_SECTION_NODE : case Node. COMMENT_NODE : return true ; default : return false ; } }",
        "public static boolean isEmptyType ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : case Node. CDATA_SECTION_NODE : return true ; default : return false ; } }",
        "public static boolean isEmptyType ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : case Node. CDATA_SECTION_NODE : case Node. COMMENT_NODE : return false ; default : return true ; } }",
        "public static boolean isEmptyType ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : case Node. ELEMENT_NODE : return true ; default : return false ; } }",
        "public static boolean isEmptyType ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : case Node. CDATA_SECTION_NODE : case Node. COMMENT_NODE : case Node. DOCUMENT_FRAGMENT_NODE : return true ; default : return false ; } }"
      ],
      "mid_translation": [
        "Returns true if the node is empty.",
        "Returns true if the type is empty.",
        "Returns true if the node is empty or has no resolved type.",
        "Returns true if the object is empty.",
        "Returns true if the node is empty type."
      ],
      "output": [
        "public final boolean isEmptyType ( ) { Node node = root ; while ( node!= null ) { if (! node. isEmpty ( ) ) { return false ; } node = node. getParent ( ) ; } return true ; }",
        "public final boolean isEmptyType ( ) { Node node = root ; while ( node!= null ) { if (! node. isEmpty ( ) ) return false ; node = node. getParent ( ) ; } return true ; }",
        "public final boolean isEmptyType ( ) { Node node = root ; while ( node!= null ) { if (! node. isEmpty ( ) ) { return false ; } node = node. next ; } return true ; }",
        "public final boolean isEmptyType ( ) { Node node = root ; while ( node!= null ) { if (! node. isEmpty ( ) ) return false ; node = node. next ; } return true ; }",
        "public final boolean isEmptyType ( ) { for ( int i = 0 ; i < nodes. length ; i ++ ) { if ( nodes [ i ]. isEmpty ( ) ) return true ; } return false ; }",
        "public final boolean isEmptyType ( Type type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ). isEmpty ( ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return genericArrayType. getActualTypeArguments ( ). isEmpty ( ) ; } else { return false ; } }",
        "public final boolean isEmptyType ( Type type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getRawType ( ). isEmpty ( ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return genericArrayType. getGenericComponentType ( ). isEmpty ( ) ; } else { return false ; } }",
        "public final boolean isEmptyType ( Type type ) { if ( type instanceof Class <? > ) { return ( ( Class <? > ) type ). isEmpty ( ) ; } if ( type instanceof ParameterizedType ) { return ( ( ParameterizedType ) type ). getRawType ( ). isEmpty ( ) ; } return false ; }",
        "public final boolean isEmptyType ( Type type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getRawType ( ) == null || parameterizedType. getRawType ( ). isEmpty ( ) ; } else { return false ; } }",
        "public final boolean isEmptyType ( Type type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getRawType ( ) == null || parameterizedType. getRawType ( ). isEmpty ( ) ; } return false ; }",
        "public final boolean isEmptyType ( Node node ) { if ( node == null ) { return false ; } if ( node. isString ( ) ) { return node. getString ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } return false ; }",
        "public final boolean isEmptyType ( Node node ) { if ( node == null ) { return false ; } if ( node. isString ( ) ) { return node. getString ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } return true ; }",
        "public final boolean isEmptyType ( Node node ) { if ( node == null ) { return false ; } if ( node. isString ( ) ) { return node. getString ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } return false ; }",
        "public final boolean isEmptyType ( Node node ) { if ( node == null ) { return false ; } if ( node. isString ( ) ) { return node. getString ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } return false ; }",
        "public final boolean isEmptyType ( Node node ) { if ( node == null ) { return false ; } if ( node. isString ( ) ) { return node. getString ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } if ( node. isEnum ( ) ) { return node. getEnum ( ). isEmpty ( ) ; } return false ; }",
        "public final boolean isEmptyType ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof String ) { return ( ( String ) obj ). isEmpty ( ) ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) == 0 ; } if ( obj instanceof Boolean ) { return ( ( Boolean ) obj ). booleanValue ( ) ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } return false ; }",
        "public final boolean isEmptyType ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) == 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) == 0 ; } if ( obj instanceof Boolean ) { return ( ( Boolean ) obj ). booleanValue ( ) ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } return false ; }",
        "public final boolean isEmptyType ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof String ) { return ( ( String ) obj ). isEmpty ( ) ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) == 0 ; } if ( obj instanceof Boolean ) { return ( ( Boolean ) obj ). booleanValue ( ) ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } return false ; }",
        "public final boolean isEmptyType ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) == 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) == 0 ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Calendar ) { return ( ( Calendar ) obj ). getTime ( ) == 0 ; } if ( obj instanceof Calendar ) { return ( ( Calendar ) obj ). getTime ( ) == 0 ; } return false ; }",
        "public final boolean isEmptyType ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) > 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) > 0 ; } if ( obj instanceof Boolean ) { return ( ( Boolean ) obj ). booleanValue ( ) ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) > 0 ; } return false ; }",
        "public final boolean isEmptyType ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : case Node. CDATA_SECTION_NODE : case Node. COMMENT_NODE : return true ; default : return false ; } }",
        "public final boolean isEmptyType ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : case Node. CDATA_SECTION_NODE : return true ; default : return false ; } }",
        "public final boolean isEmptyType ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : case Node. CDATA_SECTION_NODE : case Node. COMMENT_NODE : return false ; default : return true ; } }",
        "public final boolean isEmptyType ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : case Node. ELEMENT_NODE : return true ; default : return false ; } }",
        "public final boolean isEmptyType ( Node n ) { switch ( n. getNodeType ( ) ) { case Node. ELEMENT_NODE : case Node. TEXT_NODE : case Node. CDATA_SECTION_NODE : case Node. COMMENT_NODE : case Node. DOCUMENT_FRAGMENT_NODE : return true ; default : return false ; } }"
      ]
    },
    "Closure_83_/src/com/google/javascript/jscomp/CommandLineRunner.java_334-335": {
      "loc": "334-335",
      "input": "@Override public int parseArguments(Parameters params) throws CmdLineException { String param = params.getParameter(0); if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } }",
      "target": "@Override public int parseArguments(Parameters params) throws CmdLineException { String param = null; try { param = params.getParameter(0); } catch (CmdLineException e) {} if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } }",
      "function range": "332,7-351,7",
      "raw_output": [
        "public void addArgsToSetter ( Object [ ] args ) { if ( args!= null ) { for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = args [ i ] ; } } }",
        "public void addArgsToSetter ( Object [ ] args ) { if ( args!= null ) { for ( int i = 0 ; i < args. length ; i ++ ) { addArgsToSetter ( args [ i ] ) ; } } }",
        "public void addArgsToSetter ( Object [ ] args ) { for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = args [ i ] ; } }",
        "public void addArgsToSetter ( Object [ ] args ) { if ( args!= null ) { for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = args [ i ]. toString ( ) ; } } }",
        "public void addArgsToSetter ( Object [ ] args ) { for ( int i = 0 ; i < args. length ; i ++ ) { addArgsToSetter ( args [ i ] ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Setter < T > toSetter ( Class < T > type, String... parameters ) { Setter < T > setter = new Setter < T > ( type ) ; for ( String parameter : parameters ) { setter. parameters. add ( parameter ) ; } return setter ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Setter < T > toSetter ( Class < T > type, String... parameters ) { Setter < T > setter = new Setter <> ( type ) ; for ( String parameter : parameters ) { setter. parameters. add ( parameter ) ; } return setter ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Setter < T > toSetter ( Class < T > type, String... parameters ) { Setter < T > setter = new Setter < T > ( type ) ; for ( String parameter : parameters ) { setter. parameter ( parameter ) ; } return setter ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Setter < T > toSetter ( Class < T > type, String... parameters ) { Setter < T > setter = new Setter < T > ( type ) ; for ( String parameter : parameters ) { setter. setParameter ( parameter ) ; } return setter ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Setter < T > of ( Class < T > type, String... parameters ) { return new Setter < T > ( type, parameters ) ; }",
        "public static Command [ ] parse ( String [ ] args ) { Command [ ] ret = new Command [ args. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = new Command ( args [ i ] ) ; } return ret ; }",
        "public static Command [ ] parse ( String [ ] args ) { Command [ ] ret = new Command [ args. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = parse ( args [ i ] ) ; } return ret ; }",
        "public static Command [ ] parse ( String [ ] args ) { Command [ ] result = new Command [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = new Command ( args [ i ] ) ; } return result ; }",
        "public static Command [ ] parse ( String [ ] args ) { Command [ ] ret = new Command [ args. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) ret [ i ] = new Command ( args [ i ] ) ; return ret ; }",
        "public static Command [ ] parse ( String [ ] args ) { Command [ ] result = new Command [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = parse ( args [ i ] ) ; } return result ; }",
        "public static String [ ] parse ( String [ ] args ) { if ( args == null || args. length == 0 ) { return null ; } String [ ] result = new String [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = args [ i ] ; } return result ; }",
        "public static String [ ] parse ( String [ ] args ) { String [ ] result = new String [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = args [ i ] ; } return result ; }",
        "public static String [ ] parseArgs ( String [ ] args ) { if ( args == null || args. length == 0 ) { return null ; } String [ ] result = new String [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = args [ i ] ; } return result ; }",
        "public static String [ ] parseArguments ( String [ ] args ) { if ( args == null || args. length == 0 ) { return null ; } String [ ] result = new String [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = args [ i ] ; } return result ; }",
        "public static String [ ] parse ( String [ ] args ) { if ( args == null || args. length == 0 ) { return new String [ ] { } ; } String [ ] result = new String [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = args [ i ] ; } return result ; }",
        "public static setter ( String name, Object... args ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( args == null ) { throw new IllegalArgumentException ( \"args cannot be null\" ) ; } if ( name. length ( ) == 0 ) { throw new IllegalArgumentException ( \"name cannot be empty\" ) ; } Class <? > clazz = args [ 0 ]. getClass ( ) ; return setter ( clazz, name, args ) ; }",
        "public static setter ( String name, Object... args ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( args == null ) { throw new IllegalArgumentException ( \"args cannot be null\" ) ; } if ( name. length ( ) == 0 ) { throw new IllegalArgumentException ( \"name cannot be empty\" ) ; } return new setter ( name, args ) ; }",
        "public static setter ( String name, Object... args ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( args == null ) { throw new IllegalArgumentException ( \"args cannot be null\" ) ; } Class <? > clazz = args [ 0 ]. getClass ( ) ; return setter ( clazz, name, args ) ; }",
        "public static setter ( String name, Object... args ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( args == null ) { throw new IllegalArgumentException ( \"args cannot be null\" ) ; } return new setter ( name, args ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Setter < T > toSetter ( Class < T > type, Object... args ) { return new Setter < T > ( type, args ) ; }"
      ],
      "mid_translation": [
        "Adds the given arguments to the setter.",
        "Parses the given parameters into a setter.",
        "Parses the command line arguments.",
        "Parses the command line arguments into a single argument.",
        "Parses the given arguments into a setter."
      ],
      "output": [
        "@Override public void parseArguments ( Object [ ] args ) { if ( args!= null ) { for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = args [ i ] ; } } }",
        "@Override public void parseArguments ( Object [ ] args ) { if ( args!= null ) { for ( int i = 0 ; i < args. length ; i ++ ) { addArgsToSetter ( args [ i ] ) ; } } }",
        "@Override public void parseArguments ( Object [ ] args ) { for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = args [ i ] ; } }",
        "@Override public void parseArguments ( Object [ ] args ) { if ( args!= null ) { for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = args [ i ]. toString ( ) ; } } }",
        "@Override public void parseArguments ( Object [ ] args ) { for ( int i = 0 ; i < args. length ; i ++ ) { addArgsToSetter ( args [ i ] ) ; } }",
        "@Override public < T > Setter < T > parseArguments ( Class < T > type, String... parameters ) { Setter < T > setter = new Setter < T > ( type ) ; for ( String parameter : parameters ) { setter. parameters. add ( parameter ) ; } return setter ; }",
        "@Override public < T > Setter < T > parseArguments ( Class < T > type, String... parameters ) { Setter < T > setter = new Setter <> ( type ) ; for ( String parameter : parameters ) { setter. parameters. add ( parameter ) ; } return setter ; }",
        "@Override public < T > Setter < T > parseArguments ( Class < T > type, String... parameters ) { Setter < T > setter = new Setter < T > ( type ) ; for ( String parameter : parameters ) { setter. parameter ( parameter ) ; } return setter ; }",
        "@Override public < T > Setter < T > parseArguments ( Class < T > type, String... parameters ) { Setter < T > setter = new Setter < T > ( type ) ; for ( String parameter : parameters ) { setter. setParameter ( parameter ) ; } return setter ; }",
        "@Override public < T > Setter < T > parseArguments ( Class < T > type, String... parameters ) { return new Setter < T > ( type, parameters ) ; }",
        "@Override public Command [ ] parseArguments ( String [ ] args ) { Command [ ] ret = new Command [ args. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = new Command ( args [ i ] ) ; } return ret ; }",
        "@Override public Command [ ] parseArguments ( String [ ] args ) { Command [ ] ret = new Command [ args. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = parse ( args [ i ] ) ; } return ret ; }",
        "@Override public Command [ ] parseArguments ( String [ ] args ) { Command [ ] result = new Command [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = new Command ( args [ i ] ) ; } return result ; }",
        "@Override public Command [ ] parseArguments ( String [ ] args ) { Command [ ] ret = new Command [ args. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) ret [ i ] = new Command ( args [ i ] ) ; return ret ; }",
        "@Override public Command [ ] parseArguments ( String [ ] args ) { Command [ ] result = new Command [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = parse ( args [ i ] ) ; } return result ; }",
        "@Override public String [ ] parseArguments ( String [ ] args ) { if ( args == null || args. length == 0 ) { return null ; } String [ ] result = new String [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = args [ i ] ; } return result ; }",
        "@Override public String [ ] parseArguments ( String [ ] args ) { String [ ] result = new String [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = args [ i ] ; } return result ; }",
        "@Override public String [ ] parseArguments ( String [ ] args ) { if ( args == null || args. length == 0 ) { return null ; } String [ ] result = new String [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = args [ i ] ; } return result ; }",
        "@Override public String [ ] parseArguments ( String [ ] args ) { if ( args == null || args. length == 0 ) { return null ; } String [ ] result = new String [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = args [ i ] ; } return result ; }",
        "@Override public String [ ] parseArguments ( String [ ] args ) { if ( args == null || args. length == 0 ) { return new String [ ] { } ; } String [ ] result = new String [ args. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = args [ i ] ; } return result ; }",
        "",
        "",
        "",
        "",
        "@Override public < T > Setter < T > parseArguments ( Class < T > type, Object... args ) { return new Setter < T > ( type, args ) ; }"
      ]
    },
    "Closure_86_/src/com/google/javascript/jscomp/NodeUtil.java_2465-2466": {
      "loc": "2465-2466",
      "input": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW: return true; case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } }",
      "target": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW: return false; case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } }",
      "function range": "2424,3-2489,3",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T asLocal ( final Expression < T > expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } return asLocal ( expression. getExpression ( ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T asLocal ( final Expression < T > expr ) { if ( expr == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } return ( T ) expr. asLocal ( ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T asLocal ( final Expression < T > expr ) { if ( expr == null ) { return null ; } return expr. asLocal ( ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T as ( final Expression < T > expr ) { if ( expr == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } return expr. as ( ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T asLocal ( final Expression < T > expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } return asLocal ( expression. getExpression ( ). getExpressionType ( ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T asLocal ( Expression expression, Class < T > type ) { return asLocal ( expression. getExpression ( ), type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T localValue ( Expression < T > expression ) { return ( T ) expression. getValue ( ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T asLocal ( Expression expression, Class < T > type ) { return asLocal ( expression, type, null ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T evaluate ( Expression < T > expression ) { return ( T ) expression. evaluate ( ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T evaluateExpressionLocal ( Expression expression, Class < T > type ) { return ( T ) expression. evaluate ( type ) ; }",
        "public static boolean isExpression ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "public static boolean isExpression ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "public static boolean isExpression ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } else if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } else { return false ; } }",
        "public static boolean isExpression ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } else if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "public static boolean isExpression ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "public static boolean isExpressionLocal ( Expression expression ) { if ( expression == null ) { return false ; } if ( expression instanceof VariableExpression ) { return ( ( VariableExpression ) expression ). isExpressionLocal ( ) ; } return false ; }",
        "public static boolean isExpressionLocal ( ExpressionNode expressionNode ) { if ( expressionNode == null ) { return false ; } if ( expressionNode. getParent ( ) == null ) { return false ; } return expressionNode. getParent ( ). isExpression ( ) ; }",
        "public static boolean isExpressionLocal ( Expression expression ) { if ( expression instanceof ExpressionLocal ) { return ( ( ExpressionLocal ) expression ). isExpression ( ) ; } return false ; }",
        "public static boolean isExpressionLocal ( Expression expression ) { if ( expression instanceof ExpressionLocal ) { return ( ( ExpressionLocal ) expression ). getValue ( )!= null ; } return false ; }",
        "public static boolean isExpressionLocal ( Expression expression ) { if ( expression == null ) { return false ; } if ( expression instanceof VariableExpression ) { return ( ( VariableExpression ) expression ). isExpression ( ) ; } return false ; }",
        "public static boolean isExpression ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return expression. getClass ( ) == Expression. class && ( ( Expression ) expression ). isExpression ( value ) ; }",
        "public static boolean isExpression ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "public static boolean isExpression ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return expression. getClass ( ) == Expression. class || expression. isExpression ( value ) ; }",
        "public static boolean isExpression ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression instanceof Expression ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "public static boolean isExpression ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return isExpression ( expression, value ) ; }"
      ],
      "mid_translation": [
        "Evaluates an expression node into a local value.",
        "Evaluates an expression node s local value.",
        "Determines whether the given expression node is an expression node that evaluates to the given local value.",
        "Determines whether an expression node is an expression node that evaluates to a local value.",
        "Returns true if the given expression node is an expression node that evaluates to the given local value."
      ],
      "output": [
        "static < T > T evaluatesToLocalValue ( final Expression < T > expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } return asLocal ( expression. getExpression ( ) ) ; }",
        "static < T > T evaluatesToLocalValue ( final Expression < T > expr ) { if ( expr == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } return ( T ) expr. asLocal ( ) ; }",
        "static < T > T evaluatesToLocalValue ( final Expression < T > expr ) { if ( expr == null ) { return null ; } return expr. asLocal ( ) ; }",
        "static < T > T evaluatesToLocalValue ( final Expression < T > expr ) { if ( expr == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } return expr. as ( ) ; }",
        "static < T > T evaluatesToLocalValue ( final Expression < T > expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } return asLocal ( expression. getExpression ( ). getExpressionType ( ) ) ; }",
        "static < T > T evaluatesToLocalValue ( Expression expression, Class < T > type ) { return asLocal ( expression. getExpression ( ), type ) ; }",
        "static < T > T evaluatesToLocalValue ( Expression < T > expression ) { return ( T ) expression. getValue ( ) ; }",
        "static < T > T evaluatesToLocalValue ( Expression expression, Class < T > type ) { return asLocal ( expression, type, null ) ; }",
        "static < T > T evaluatesToLocalValue ( Expression < T > expression ) { return ( T ) expression. evaluate ( ) ; }",
        "static < T > T evaluatesToLocalValue ( Expression expression, Class < T > type ) { return ( T ) expression. evaluate ( type ) ; }",
        "static boolean evaluatesToLocalValue ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "static boolean evaluatesToLocalValue ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "static boolean evaluatesToLocalValue ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } else if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } else { return false ; } }",
        "static boolean evaluatesToLocalValue ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } else if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "static boolean evaluatesToLocalValue ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "static boolean evaluatesToLocalValue ( Expression expression ) { if ( expression == null ) { return false ; } if ( expression instanceof VariableExpression ) { return ( ( VariableExpression ) expression ). isExpressionLocal ( ) ; } return false ; }",
        "static boolean evaluatesToLocalValue ( ExpressionNode expressionNode ) { if ( expressionNode == null ) { return false ; } if ( expressionNode. getParent ( ) == null ) { return false ; } return expressionNode. getParent ( ). isExpression ( ) ; }",
        "static boolean evaluatesToLocalValue ( Expression expression ) { if ( expression instanceof ExpressionLocal ) { return ( ( ExpressionLocal ) expression ). isExpression ( ) ; } return false ; }",
        "static boolean evaluatesToLocalValue ( Expression expression ) { if ( expression instanceof ExpressionLocal ) { return ( ( ExpressionLocal ) expression ). getValue ( )!= null ; } return false ; }",
        "static boolean evaluatesToLocalValue ( Expression expression ) { if ( expression == null ) { return false ; } if ( expression instanceof VariableExpression ) { return ( ( VariableExpression ) expression ). isExpression ( ) ; } return false ; }",
        "static boolean evaluatesToLocalValue ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return expression. getClass ( ) == Expression. class && ( ( Expression ) expression ). isExpression ( value ) ; }",
        "static boolean evaluatesToLocalValue ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "static boolean evaluatesToLocalValue ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return expression. getClass ( ) == Expression. class || expression. isExpression ( value ) ; }",
        "static boolean evaluatesToLocalValue ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression instanceof Expression ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return false ; }",
        "static boolean evaluatesToLocalValue ( Expression expression, Local value ) { if ( expression == null ) { throw new IllegalArgumentException ( \"expression cannot be null\" ) ; } if ( expression. getClass ( ) == Expression. class ) { return ( ( Expression ) expression ). isExpression ( value ) ; } return isExpression ( expression, value ) ; }"
      ]
    },
    "Closure_92_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_789-790": {
      "loc": "789-790",
      "input": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition != null && explicitNode != null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else { int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) { compiler.getNodeForCodeInsertion(minimumModule) .addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode != null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
      "target": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition != null && explicitNode != null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else { int indexOfDot = namespace.lastIndexOf('.'); if (indexOfDot == -1) { compiler.getNodeForCodeInsertion(minimumModule) .addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode != null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
      "function range": "747,5-809,5",
      "raw_output": [
        "public void setCandidate ( String name, String value ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( value == null ) { throw new IllegalArgumentException ( \"value cannot be null\" ) ; } if ( candidate. containsKey ( name ) ) { candidate. put ( name, value ) ; } else { candidate. put ( name, value ) ; } }",
        "public void setCandidate ( String name, String value ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( value == null ) { throw new IllegalArgumentException ( \"value cannot be null\" ) ; } if ( name. length ( )!= value. length ( ) ) { throw new IllegalArgumentException ( \"name.length()!= value.length()\" ) ; } candidates. put ( name, value ) ; }",
        "public void setCandidate ( String name, String value ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( value == null ) { throw new IllegalArgumentException ( \"value cannot be null\" ) ; } if ( name. length ( )!= value. length ( ) ) { throw new IllegalArgumentException ( \"name.length()!= value.length()\" ) ; } candidate. put ( name, value ) ; }",
        "public void setCandidate ( String name, String value ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( value == null ) { throw new IllegalArgumentException ( \"value cannot be null\" ) ; } if ( candidate. containsKey ( name ) ) { candidate. put ( name, value ) ; } else { candidate. remove ( name ) ; } }",
        "public void setCandidate ( String name, String value ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( value == null ) { throw new IllegalArgumentException ( \"value cannot be null\" ) ; } candidates. put ( name, value ) ; }",
        "private void replaceWithExpression ( Node expr, Node replacement ) { replaceWithExpression ( expr, replacement ) ; expr. getParent ( ). replaceChild ( expr, replacement ) ; }",
        "private void replaceWithExpression ( Node oldExpr, Node replacementExpr ) { if ( oldExpr == replacementExpr ) { return ; } replaceWithExpression ( oldExpr, replacementExpr ) ; }",
        "private void replaceWithExpression ( Node expr, Node replacement ) { replaceWithExpression ( expr, replacement ) ; expr. getParent ( ). replaceChild ( replacement, replacement ) ; }",
        "private void replaceWithExpression ( Node expr, Node replacement ) { replaceWithExpression ( expr, replacement ) ; expr. getParent ( ). removeChild ( expr ) ; }",
        "private void replaceWithExpression ( Node expr, Node replacement ) { replaceWithExpression ( expr, replacement ) ; expr. getParent ( ). removeChild ( replacement ) ; }",
        "public void setCandidate ( T definition ) { if ( definition == null ) { throw new IllegalArgumentException ( \"null definition\" ) ; } if ( this. candidate == null ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } }",
        "public void setCandidate ( T definition ) { if ( definition == null ) { throw new IllegalArgumentException ( \"null definition\" ) ; } if ( this. candidate == null ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } }",
        "public void setCandidate ( T definition ) { if ( definition == null ) { throw new IllegalArgumentException ( \"null definition\" ) ; } if ( this. candidate == null ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } }",
        "public void setCandidate ( T definition ) { if ( definition == null ) { throw new IllegalArgumentException ( \"null definition\" ) ; } if ( this. candidate == null ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } }",
        "public void setCandidate ( T definition ) { if ( definition == null ) { throw new IllegalArgumentException ( \"null definition\" ) ; } if ( this. candidate == null ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } }",
        "private void replaceExplicitNode ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; }",
        "private void replaceExplicitNode ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; oldNode. getParent ( ). removeChild ( oldNode ) ; }",
        "public void replaceNode ( Node oldNode, Node newNode ) { if ( oldNode!= null ) { oldNode. getParent ( ). removeChild ( oldNode ) ; } if ( newNode!= null ) { newNode. getParent ( ). addChild ( newNode ) ; } }",
        "private void replaceExplicitNode ( Node oldNode, Node newNode ) { if ( oldNode!= newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; } }",
        "private void replaceExplicitNode ( Node oldNode, Node newNode ) { if ( oldNode == newNode ) return ; oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; }",
        "private void replaceNode ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; }",
        "private void replaceNode ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; oldNode. getParent ( ). removeChild ( oldNode ) ; }",
        "private Node replaceNode ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; return newNode ; }",
        "private void replaceNode ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; }",
        "private void replaceNode ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; oldNode. getParent ( ). removeChild ( newNode ) ; }"
      ],
      "mid_translation": [
        "Replaces a candidate definition with a new one.",
        "Replaces an expression node with a replacement node.",
        "Replaces a candidate definition with another one.",
        "Replaces an explicit node with a new one.",
        "Replace node with new one."
      ],
      "output": [
        "void replace ( String name, String value ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( value == null ) { throw new IllegalArgumentException ( \"value cannot be null\" ) ; } if ( candidate. containsKey ( name ) ) { candidate. put ( name, value ) ; } else { candidate. put ( name, value ) ; } }",
        "void replace ( String name, String value ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( value == null ) { throw new IllegalArgumentException ( \"value cannot be null\" ) ; } if ( name. length ( )!= value. length ( ) ) { throw new IllegalArgumentException ( \"name.length()!= value.length()\" ) ; } candidates. put ( name, value ) ; }",
        "void replace ( String name, String value ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( value == null ) { throw new IllegalArgumentException ( \"value cannot be null\" ) ; } if ( name. length ( )!= value. length ( ) ) { throw new IllegalArgumentException ( \"name.length()!= value.length()\" ) ; } candidate. put ( name, value ) ; }",
        "void replace ( String name, String value ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( value == null ) { throw new IllegalArgumentException ( \"value cannot be null\" ) ; } if ( candidate. containsKey ( name ) ) { candidate. put ( name, value ) ; } else { candidate. remove ( name ) ; } }",
        "void replace ( String name, String value ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( value == null ) { throw new IllegalArgumentException ( \"value cannot be null\" ) ; } candidates. put ( name, value ) ; }",
        "void replace ( Node expr, Node replacement ) { replaceWithExpression ( expr, replacement ) ; expr. getParent ( ). replaceChild ( expr, replacement ) ; }",
        "void replace ( Node oldExpr, Node replacementExpr ) { if ( oldExpr == replacementExpr ) { return ; } replaceWithExpression ( oldExpr, replacementExpr ) ; }",
        "void replace ( Node expr, Node replacement ) { replaceWithExpression ( expr, replacement ) ; expr. getParent ( ). replaceChild ( replacement, replacement ) ; }",
        "void replace ( Node expr, Node replacement ) { replaceWithExpression ( expr, replacement ) ; expr. getParent ( ). removeChild ( expr ) ; }",
        "void replace ( Node expr, Node replacement ) { replaceWithExpression ( expr, replacement ) ; expr. getParent ( ). removeChild ( replacement ) ; }",
        "void replace ( T definition ) { if ( definition == null ) { throw new IllegalArgumentException ( \"null definition\" ) ; } if ( this. candidate == null ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } }",
        "void replace ( T definition ) { if ( definition == null ) { throw new IllegalArgumentException ( \"null definition\" ) ; } if ( this. candidate == null ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } }",
        "void replace ( T definition ) { if ( definition == null ) { throw new IllegalArgumentException ( \"null definition\" ) ; } if ( this. candidate == null ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } }",
        "void replace ( T definition ) { if ( definition == null ) { throw new IllegalArgumentException ( \"null definition\" ) ; } if ( this. candidate == null ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = null ; } }",
        "void replace ( T definition ) { if ( definition == null ) { throw new IllegalArgumentException ( \"null definition\" ) ; } if ( this. candidate == null ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } else if ( this. candidate. equals ( definition ) ) { this. candidate = definition ; } }",
        "void replace ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; }",
        "void replace ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; oldNode. getParent ( ). removeChild ( oldNode ) ; }",
        "void replace ( Node oldNode, Node newNode ) { if ( oldNode!= null ) { oldNode. getParent ( ). removeChild ( oldNode ) ; } if ( newNode!= null ) { newNode. getParent ( ). addChild ( newNode ) ; } }",
        "void replace ( Node oldNode, Node newNode ) { if ( oldNode!= newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; } }",
        "void replace ( Node oldNode, Node newNode ) { if ( oldNode == newNode ) return ; oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; }",
        "void replace ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; }",
        "void replace ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; oldNode. getParent ( ). removeChild ( oldNode ) ; }",
        "Node replace ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; return newNode ; }",
        "void replace ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; }",
        "void replace ( Node oldNode, Node newNode ) { oldNode. getParent ( ). removeChild ( oldNode ) ; oldNode. getParent ( ). addChild ( newNode ) ; oldNode. getParent ( ). removeChild ( newNode ) ; }"
      ]
    },
    "Closure_97_/src/com/google/javascript/jscomp/PeepholeFoldConstants.java_698-699": {
      "loc": "698-699",
      "input": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH: result = lvalInt >>> rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
      "target": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH: long lvalLong = lvalInt & 0xffffffffL; result = lvalLong >>> rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
      "function range": "652,3-713,3",
      "raw_output": [
        "private static Node removeShiftOperator ( Node n1, Node n2 ) { Node left = n1. getFirstChild ( ) ; Node right = n2. getFirstChild ( ) ; if ( left == right ) { left = n1 ; } if ( left == null ) { left = n2 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } return left ; }",
        "private static Node removeShiftOperator ( Node n1, Node n2 ) { Node left = n1. getFirstChild ( ) ; Node right = n2. getFirstChild ( ) ; if ( left == right ) { left = n1 ; } if ( left == null ) { left = n2 ; } if ( right == null ) { right = n1 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } return left ; }",
        "private static Node removeShiftOperator ( Node n1, Node n2 ) { Node left = n1. getFirstChild ( ) ; Node right = n2. getFirstChild ( ) ; if ( left == right ) { left = n1 ; } if ( left == null ) { left = n2 ; } if ( right == null ) { right = n1 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } return left ; }",
        "private static Node removeShiftOperator ( Node n1, Node n2 ) { Node left = n1. getFirstChild ( ) ; Node right = n2. getLastChild ( ) ; if ( left == right ) { left = n1 ; } if ( left == null ) { left = n2 ; } if ( right == null ) { right = n1 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } return left ; }",
        "private static Node removeShiftOperator ( Node n1, Node n2 ) { Node left = n1. getFirstChild ( ) ; Node right = n2. getFirstChild ( ) ; if ( left == right ) { left = n1 ; } if ( left == null ) { left = n2 ; } if ( right == null ) { right = n1 ; } if ( left == null ) { right = n2 ; } if ( right == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } return left ; }",
        "private static boolean removeShiftOperator ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : return false ; default : return true ; } }",
        "private static boolean removeShiftOperator ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "private static boolean removeShiftOperator ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "private static boolean removeShiftOperator ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : return false ; default : return true ; } }",
        "private static boolean removeShiftOperator ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "private static boolean removeShiftOperator ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "private static boolean removeShiftOperator ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "private static boolean removeShiftOperator ( Node n ) { switch ( n. getToken ( ) ) { case AND : case OR : case AND_AND : case OR_OR : return false ; default : return true ; } }",
        "private static boolean removeShiftOperator ( Node n ) { switch ( n. getToken ( ) ) { case AND : case OR : case NOT : return false ; default : return true ; } }",
        "private static boolean removeShiftOperator ( Node n ) { switch ( n. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "public static < T extends Tree < T > > T removeShift ( T tree, Class < T > operator ) { if ( tree == null ) { throw new IllegalArgumentException ( \"Tree cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > left = tree. left ( ) ; if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > right = tree. right ( ) ; if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if",
        "public static < T extends Tree < T > > T removeShift ( T tree, Class < T > operator ) { if ( tree == null ) { throw new IllegalArgumentException ( \"Tree cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > left = tree. left ( ) ; if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > right = tree. right ( ) ; if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree",
        "public static < T extends Tree < T > > T removeShift ( T tree, Class < T > operator ) { if ( tree == null ) { throw new IllegalArgumentException ( \"Tree cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > left = tree. left ( ) ; if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > right = tree. right ( ) ; if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if",
        "public static < T extends Tree < T > > T removeShift ( T tree, Class < T > operator ) { if ( tree == null ) { throw new IllegalArgumentException ( \"Tree cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > left = tree. left ( ) ; if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > right = tree. right ( ) ; if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if",
        "public static < T extends Tree < T > > T removeShift ( T tree, Class < T > operator ) { if ( tree == null ) { throw new IllegalArgumentException ( \"Tree cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > left = tree. left ( ) ; if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > right = tree. right ( ) ; if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } return",
        "private Tree < T > removeShiftOperator ( Tree < T > subtree ) { Tree < T > left = subtree. getLeft ( ) ; Tree < T > right = subtree. getRight ( ) ; if ( left == right ) { return subtree ; } else { return removeShiftOperator ( left, right ) ; } }",
        "private Tree < T > removeShiftOperator ( Tree < T > subtree ) { Tree < T > left = subtree. left ( ) ; Tree < T > right = subtree. right ( ) ; if ( left == right ) { subtree. left ( ) ; subtree. right ( ) ; return left ; } else { return right ; } }",
        "private Tree < T > removeShiftOperator ( Tree < T > subtree ) { Tree < T > left = subtree. getLeft ( ) ; Tree < T > right = subtree. getRight ( ) ; if ( left == right ) { subtree. removeRight ( ) ; return left ; } else { return right ; } }",
        "private Tree < T > removeShiftOperator ( Tree < T > subtree ) { Tree < T > left = subtree. getLeft ( ) ; Tree < T > right = subtree. getRight ( ) ; if ( left == right ) { subtree. removeRight ( ) ; } else { subtree. removeLeft ( left ) ; } return left ; }",
        "private Tree < T > removeShiftOperator ( Tree < T > subtree ) { Tree < T > left = subtree. left ( ) ; Tree < T > right = subtree. right ( ) ; if ( left == right ) { subtree. left ( ) ; subtree. right ( ) ; subtree. left ( ) ; return left ; } else { return right ; } }"
      ],
      "mid_translation": [
        "Removes a shift operator from two nodes.",
        "Removes a shift operator from the given node.",
        "Removes the shift operator from the given node.",
        "Removes a shift operator from the given tree.",
        "Removes a shift operator from the given subtree."
      ],
      "output": [
        "private Node tryFoldShift ( Node n1, Node n2 ) { Node left = n1. getFirstChild ( ) ; Node right = n2. getFirstChild ( ) ; if ( left == right ) { left = n1 ; } if ( left == null ) { left = n2 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } return left ; }",
        "private Node tryFoldShift ( Node n1, Node n2 ) { Node left = n1. getFirstChild ( ) ; Node right = n2. getFirstChild ( ) ; if ( left == right ) { left = n1 ; } if ( left == null ) { left = n2 ; } if ( right == null ) { right = n1 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } return left ; }",
        "private Node tryFoldShift ( Node n1, Node n2 ) { Node left = n1. getFirstChild ( ) ; Node right = n2. getFirstChild ( ) ; if ( left == right ) { left = n1 ; } if ( left == null ) { left = n2 ; } if ( right == null ) { right = n1 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } return left ; }",
        "private Node tryFoldShift ( Node n1, Node n2 ) { Node left = n1. getFirstChild ( ) ; Node right = n2. getLastChild ( ) ; if ( left == right ) { left = n1 ; } if ( left == null ) { left = n2 ; } if ( right == null ) { right = n1 ; } if ( right == null ) { right = n2 ; } if ( left == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } return left ; }",
        "private Node tryFoldShift ( Node n1, Node n2 ) { Node left = n1. getFirstChild ( ) ; Node right = n2. getFirstChild ( ) ; if ( left == right ) { left = n1 ; } if ( left == null ) { left = n2 ; } if ( right == null ) { right = n1 ; } if ( left == null ) { right = n2 ; } if ( right == null ) { left = n1 ; } if ( right == null ) { right = n2 ; } return left ; }",
        "private boolean tryFoldShift ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : return false ; default : return true ; } }",
        "private boolean tryFoldShift ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "private boolean tryFoldShift ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "private boolean tryFoldShift ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : case OR_AND_OR_EQUAL : return false ; default : return true ; } }",
        "private boolean tryFoldShift ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "private boolean tryFoldShift ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "private boolean tryFoldShift ( Node node ) { switch ( node. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "private boolean tryFoldShift ( Node n ) { switch ( n. getToken ( ) ) { case AND : case OR : case AND_AND : case OR_OR : return false ; default : return true ; } }",
        "private boolean tryFoldShift ( Node n ) { switch ( n. getToken ( ) ) { case AND : case OR : case NOT : return false ; default : return true ; } }",
        "private boolean tryFoldShift ( Node n ) { switch ( n. getToken ( ) ) { case AND : case OR : case AND_AND_OR : case OR_AND_OR : case OR_AND_OR : case OR_AND_OR : return false ; default : return true ; } }",
        "private < T extends Tree < T > > T tryFoldShift ( T tree, Class < T > operator ) { if ( tree == null ) { throw new IllegalArgumentException ( \"Tree cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > left = tree. left ( ) ; if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > right = tree. right ( ) ; if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if",
        "private < T extends Tree < T > > T tryFoldShift ( T tree, Class < T > operator ) { if ( tree == null ) { throw new IllegalArgumentException ( \"Tree cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > left = tree. left ( ) ; if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > right = tree. right ( ) ; if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree",
        "private < T extends Tree < T > > T tryFoldShift ( T tree, Class < T > operator ) { if ( tree == null ) { throw new IllegalArgumentException ( \"Tree cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > left = tree. left ( ) ; if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > right = tree. right ( ) ; if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if",
        "private < T extends Tree < T > > T tryFoldShift ( T tree, Class < T > operator ) { if ( tree == null ) { throw new IllegalArgumentException ( \"Tree cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > left = tree. left ( ) ; if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > right = tree. right ( ) ; if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if",
        "private < T extends Tree < T > > T tryFoldShift ( T tree, Class < T > operator ) { if ( tree == null ) { throw new IllegalArgumentException ( \"Tree cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > left = tree. left ( ) ; if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( operator == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } Tree < T > right = tree. right ( ) ; if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == right ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( left == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } if ( right == null ) { throw new IllegalArgumentException ( \"Shift operator cannot be null\" ) ; } return",
        "private Tree < T > tryFoldShift ( Tree < T > subtree ) { Tree < T > left = subtree. getLeft ( ) ; Tree < T > right = subtree. getRight ( ) ; if ( left == right ) { return subtree ; } else { return removeShiftOperator ( left, right ) ; } }",
        "private Tree < T > tryFoldShift ( Tree < T > subtree ) { Tree < T > left = subtree. left ( ) ; Tree < T > right = subtree. right ( ) ; if ( left == right ) { subtree. left ( ) ; subtree. right ( ) ; return left ; } else { return right ; } }",
        "private Tree < T > tryFoldShift ( Tree < T > subtree ) { Tree < T > left = subtree. getLeft ( ) ; Tree < T > right = subtree. getRight ( ) ; if ( left == right ) { subtree. removeRight ( ) ; return left ; } else { return right ; } }",
        "private Tree < T > tryFoldShift ( Tree < T > subtree ) { Tree < T > left = subtree. getLeft ( ) ; Tree < T > right = subtree. getRight ( ) ; if ( left == right ) { subtree. removeRight ( ) ; } else { subtree. removeLeft ( left ) ; } return left ; }",
        "private Tree < T > tryFoldShift ( Tree < T > subtree ) { Tree < T > left = subtree. left ( ) ; Tree < T > right = subtree. right ( ) ; if ( left == right ) { subtree. left ( ) ; subtree. right ( ) ; subtree. left ( ) ; return left ; } else { return right ; } }"
      ]
    },
    "Closure_104_/src/com/google/javascript/rhino/jstype/UnionType.java_291-292": {
      "loc": "291-292",
      "input": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build(); if (result != null) { return result; } else if (this.isObject() && that.isObject()) { return getNativeType(JSTypeNative.NO_OBJECT_TYPE); } else { return getNativeType(JSTypeNative.NO_TYPE); } }",
      "target": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build(); if (!result.isNoType()) { return result; } else if (this.isObject() && that.isObject()) { return getNativeType(JSTypeNative.NO_OBJECT_TYPE); } else { return getNativeType(JSTypeNative.NO_TYPE); } }",
      "function range": "273,3-298,3",
      "raw_output": [
        "public static UnionType from ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType from ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType from ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public JSType createUnionType ( JSType type ) { if ( type. isUnionType ( ) ) { UnionType unionType = new UnionType ( this ) ; unionType. setUnionType ( type ) ; return unionType ; } return type ; }",
        "public JSType createUnionType ( JSType type ) { if ( type. isUnionType ( ) ) { UnionType unionType = new UnionType ( this, type ) ; unionType. setUnionType ( unionType ) ; return unionType ; } return type ; }",
        "public JSType createUnionType ( JSType type ) { if ( type. isUnionType ( ) ) { UnionType unionType = new UnionType ( this ) ; unionType. setUnionType ( type ) ; return unionType ; } else { return type ; } }",
        "public JSType createUnionType ( JSType type ) { if ( type. isUnionType ( ) ) { UnionType unionType = new UnionType ( this ) ; unionType. unionType = type ; return unionType ; } return type ; }",
        "public JSType createUnionType ( JSType type ) { if ( type. isUnionType ( ) ) { UnionType unionType = new UnionType ( type ) ; unionType. setUnionType ( this ) ; return unionType ; } return type ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } return new UnionType ( type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return new UnionType ( ( UnionType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType from ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType from ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType from ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "public static UnionType of ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }"
      ],
      "mid_translation": [
        "Creates a union type from the given type.",
        "Creates a union type from this type and the given type.",
        "Creates a union type for the given type.",
        "Creates a union type from a given type.",
        "Creates a union type based on the contents of the given type."
      ],
      "output": [
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "JSType meet ( JSType type ) { if ( type. isUnionType ( ) ) { UnionType unionType = new UnionType ( this ) ; unionType. setUnionType ( type ) ; return unionType ; } return type ; }",
        "JSType meet ( JSType type ) { if ( type. isUnionType ( ) ) { UnionType unionType = new UnionType ( this, type ) ; unionType. setUnionType ( unionType ) ; return unionType ; } return type ; }",
        "JSType meet ( JSType type ) { if ( type. isUnionType ( ) ) { UnionType unionType = new UnionType ( this ) ; unionType. setUnionType ( type ) ; return unionType ; } else { return type ; } }",
        "JSType meet ( JSType type ) { if ( type. isUnionType ( ) ) { UnionType unionType = new UnionType ( this ) ; unionType. unionType = type ; return unionType ; } return type ; }",
        "JSType meet ( JSType type ) { if ( type. isUnionType ( ) ) { UnionType unionType = new UnionType ( type ) ; unionType. setUnionType ( this ) ; return unionType ; } return type ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return new UnionType ( ( UnionType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type: \" + type ) ; }",
        "UnionType meet ( Type type ) { if ( type instanceof UnionType ) { return ( UnionType ) type ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return new UnionType ( ( GenericArrayType ) type ) ; } return new UnionType ( type ) ; }"
      ]
    },
    "Closure_109_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_1908-1909": {
      "loc": "1908-1909",
      "input": "private Node parseContextTypeExpression(JsDocToken token) { return parseTypeName(token); }",
      "target": "private Node parseContextTypeExpression(JsDocToken token) { if (token == JsDocToken.QMARK) { return newNode(Token.QMARK); } else { return parseBasicTypeExpression(token); } }",
      "function range": "1907,3-1909,3",
      "raw_output": [
        "private void parseTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void parseTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : //",
        "private void parseTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : parseTypeExpression ( ) ; break ; case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void parseTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "private void parseTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "public static TypeExpression parse ( String expression ) { if ( expression == null || expression. length ( ) == 0 ) { return null ; } TypeExpression typeExpression = new TypeExpression ( ) ; typeExpression. setExpression ( expression ) ; parse ( typeExpression ) ; return typeExpression ; }",
        "public static TypeExpression parse ( String expression ) { if ( expression == null || expression. length ( ) == 0 ) { return null ; } TypeExpression typeExpression = new TypeExpression ( expression ) ; parse ( typeExpression ) ; return typeExpression ; }",
        "public static TypeExpression parse ( String expression ) { if ( expression == null || expression. length ( ) == 0 ) { return null ; } try { return new TypeExpression ( expression ) ; } catch ( ParseException e ) { return null ; } }",
        "public static TypeExpression parse ( String expression ) { if ( expression == null || expression. length ( ) == 0 ) { return null ; } try { return new TypeExpression ( expression ) ; } catch ( Exception e ) { return null ; } }",
        "public static TypeExpression parse ( String expression ) { if ( expression == null || expression. length ( ) == 0 ) { return null ; } try { return new TypeExpression ( expression ) ; } catch ( IllegalArgumentException e ) { return null ; } }",
        "public static Expression getTypeExpression ( Expression expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } if ( expression. getType ( ) == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } return expression ; }",
        "public static Expression getTypeExpression ( Expression expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression cannot be null\" ) ; } if ( expression. getType ( ) == null ) { throw new IllegalArgumentException ( \"Expression cannot be null\" ) ; } return expression. getType ( ) ; }",
        "public static Expression getTypeExpression ( Expression expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } if ( expression. getExpressionType ( ) == null ) { throw new IllegalArgumentException ( \"Expression type must not be null\" ) ; } return expression ; }",
        "public static Expression getTypeExpression ( Expression expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression cannot be null\" ) ; } if ( expression. getType ( ) == null ) { throw new IllegalArgumentException ( \"Expression type cannot be null\" ) ; } return expression ; }",
        "public static Expression getTypeExpression ( Expression expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } if ( expression. getType ( ) == null ) { throw new IllegalArgumentException ( \"Expression type must not be null\" ) ; } return expression ; }",
        "private void parseSimpleTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' :",
        "private void parseSimpleTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void parseSimpleTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void parseSimpleTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void parseSimpleTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "public static TypeExpression getTypeExpression ( Token token ) { switch ( token. getType ( ) ) { case STRING : return TypeExpression. STRING ; case BOOLEAN : return TypeExpression. BOOLEAN ; case BYTE : return TypeExpression. BYTE ; case SHORT : return TypeExpression. SHORT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case DOUBLE : return TypeExpression. DOUBLE ; case FLOAT : return TypeExpression. FLOAT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case FLOAT : return TypeExpression. FLOAT ; case DOUBLE : return TypeExpression. DOUBLE ; default : return null ; } }",
        "public static TypeExpression getTypeExpression ( Token token ) { switch ( token. getType ( ) ) { case STRING : return TypeExpression. STRING ; case BOOLEAN : return TypeExpression. BOOLEAN ; case BYTE : return TypeExpression. BYTE ; case SHORT : return TypeExpression. SHORT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case DOUBLE : return TypeExpression. DOUBLE ; case FLOAT : return TypeExpression. FLOAT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case DOUBLE : return TypeExpression. DOUBLE ; default : return null ; } }",
        "public static TypeExpression getTypeExpression ( Token token ) { switch ( token. getType ( ) ) { case STRING : return TypeExpression. STRING ; case BOOLEAN : return TypeExpression. BOOLEAN ; case BYTE : return TypeExpression. BYTE ; case SHORT : return TypeExpression. SHORT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case DOUBLE : return TypeExpression. DOUBLE ; case FLOAT : return TypeExpression. FLOAT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; default : return null ; } }",
        "public static TypeExpression getTypeExpression ( Token token ) { switch ( token. getType ( ) ) { case STRING : return TypeExpression. STRING ; case BOOLEAN : return TypeExpression. BOOLEAN ; case BYTE : return TypeExpression. BYTE ; case SHORT : return TypeExpression. SHORT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case FLOAT : return TypeExpression. FLOAT ; case DOUBLE : return TypeExpression. DOUBLE ; default : return null ; } }",
        "public static TypeExpression getTypeExpression ( Token token ) { switch ( token. getType ( ) ) { case STRING : return TypeExpression. STRING ; case BOOLEAN : return TypeExpression. BOOLEAN ; case BYTE : return TypeExpression. BYTE ; case SHORT : return TypeExpression. SHORT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case FLOAT : return TypeExpression. FLOAT ; case DOUBLE : return TypeExpression. DOUBLE ; default : throw new IllegalArgumentException ( \"Invalid token type: \" + token. getType ( ) ) ; } }"
      ],
      "mid_translation": [
        "Parse a node that represents a type expression.",
        "Parse a type expression.",
        "Gets the node that represents a type expression.",
        "Parse a node that represents a simple type expression.",
        "Extracts the type expression from the given token."
      ],
      "output": [
        "private void parseContextTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void parseContextTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : //",
        "private void parseContextTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : parseTypeExpression ( ) ; break ; case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void parseContextTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "private void parseContextTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "private TypeExpression parseContextTypeExpression ( String expression ) { if ( expression == null || expression. length ( ) == 0 ) { return null ; } TypeExpression typeExpression = new TypeExpression ( ) ; typeExpression. setExpression ( expression ) ; parse ( typeExpression ) ; return typeExpression ; }",
        "private TypeExpression parseContextTypeExpression ( String expression ) { if ( expression == null || expression. length ( ) == 0 ) { return null ; } TypeExpression typeExpression = new TypeExpression ( expression ) ; parse ( typeExpression ) ; return typeExpression ; }",
        "private TypeExpression parseContextTypeExpression ( String expression ) { if ( expression == null || expression. length ( ) == 0 ) { return null ; } try { return new TypeExpression ( expression ) ; } catch ( ParseException e ) { return null ; } }",
        "private TypeExpression parseContextTypeExpression ( String expression ) { if ( expression == null || expression. length ( ) == 0 ) { return null ; } try { return new TypeExpression ( expression ) ; } catch ( Exception e ) { return null ; } }",
        "private TypeExpression parseContextTypeExpression ( String expression ) { if ( expression == null || expression. length ( ) == 0 ) { return null ; } try { return new TypeExpression ( expression ) ; } catch ( IllegalArgumentException e ) { return null ; } }",
        "private Expression parseContextTypeExpression ( Expression expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } if ( expression. getType ( ) == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } return expression ; }",
        "private Expression parseContextTypeExpression ( Expression expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression cannot be null\" ) ; } if ( expression. getType ( ) == null ) { throw new IllegalArgumentException ( \"Expression cannot be null\" ) ; } return expression. getType ( ) ; }",
        "private Expression parseContextTypeExpression ( Expression expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } if ( expression. getExpressionType ( ) == null ) { throw new IllegalArgumentException ( \"Expression type must not be null\" ) ; } return expression ; }",
        "private Expression parseContextTypeExpression ( Expression expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression cannot be null\" ) ; } if ( expression. getType ( ) == null ) { throw new IllegalArgumentException ( \"Expression type cannot be null\" ) ; } return expression ; }",
        "private Expression parseContextTypeExpression ( Expression expression ) { if ( expression == null ) { throw new IllegalArgumentException ( \"Expression must not be null\" ) ; } if ( expression. getType ( ) == null ) { throw new IllegalArgumentException ( \"Expression type must not be null\" ) ; } return expression ; }",
        "private void parseContextTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' :",
        "private void parseContextTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void parseContextTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void parseContextTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void parseContextTypeExpression ( ) { Token token = scanToken ( ) ; switch ( token ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private TypeExpression parseContextTypeExpression ( Token token ) { switch ( token. getType ( ) ) { case STRING : return TypeExpression. STRING ; case BOOLEAN : return TypeExpression. BOOLEAN ; case BYTE : return TypeExpression. BYTE ; case SHORT : return TypeExpression. SHORT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case DOUBLE : return TypeExpression. DOUBLE ; case FLOAT : return TypeExpression. FLOAT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case FLOAT : return TypeExpression. FLOAT ; case DOUBLE : return TypeExpression. DOUBLE ; default : return null ; } }",
        "private TypeExpression parseContextTypeExpression ( Token token ) { switch ( token. getType ( ) ) { case STRING : return TypeExpression. STRING ; case BOOLEAN : return TypeExpression. BOOLEAN ; case BYTE : return TypeExpression. BYTE ; case SHORT : return TypeExpression. SHORT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case DOUBLE : return TypeExpression. DOUBLE ; case FLOAT : return TypeExpression. FLOAT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case DOUBLE : return TypeExpression. DOUBLE ; default : return null ; } }",
        "private TypeExpression parseContextTypeExpression ( Token token ) { switch ( token. getType ( ) ) { case STRING : return TypeExpression. STRING ; case BOOLEAN : return TypeExpression. BOOLEAN ; case BYTE : return TypeExpression. BYTE ; case SHORT : return TypeExpression. SHORT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case DOUBLE : return TypeExpression. DOUBLE ; case FLOAT : return TypeExpression. FLOAT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; default : return null ; } }",
        "private TypeExpression parseContextTypeExpression ( Token token ) { switch ( token. getType ( ) ) { case STRING : return TypeExpression. STRING ; case BOOLEAN : return TypeExpression. BOOLEAN ; case BYTE : return TypeExpression. BYTE ; case SHORT : return TypeExpression. SHORT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case FLOAT : return TypeExpression. FLOAT ; case DOUBLE : return TypeExpression. DOUBLE ; default : return null ; } }",
        "private TypeExpression parseContextTypeExpression ( Token token ) { switch ( token. getType ( ) ) { case STRING : return TypeExpression. STRING ; case BOOLEAN : return TypeExpression. BOOLEAN ; case BYTE : return TypeExpression. BYTE ; case SHORT : return TypeExpression. SHORT ; case INT : return TypeExpression. INT ; case LONG : return TypeExpression. LONG ; case FLOAT : return TypeExpression. FLOAT ; case DOUBLE : return TypeExpression. DOUBLE ; default : throw new IllegalArgumentException ( \"Invalid token type: \" + token. getType ( ) ) ; } }"
      ]
    },
    "Closure_111_/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java_54-55": {
      "loc": "54-55",
      "input": "@Override protected JSType caseTopType(JSType topType) { return topType; }",
      "target": "@Override protected JSType caseTopType(JSType topType) { return topType.isAllType() ? getNativeType(ARRAY_TYPE) : topType; }",
      "function range": "52,9-55,9",
      "raw_output": [
        "@ SuppressWarnings ( { \"rawtypes\", \"unchecked\" } ) public Class <? > getTopType ( ) { Class <? > topType = super. getTopType ( ) ; if ( topType == null ) { topType = Class. class ; } return topType ; }",
        "@ SuppressWarnings ( { \"rawtypes\", \"unchecked\" } ) public Class <? > getTopType ( Class <? > topType ) { if ( topType == null ) { throw new IllegalArgumentException ( \"Top type cannot be null\" ) ; } return topType ; }",
        "@ SuppressWarnings ( { \"rawtypes\", \"unchecked\" } ) public Class <? > getTopType ( ) { Class <? > topType = super. getTopType ( ) ; if ( topType!= null ) { return topType ; } return null ; }",
        "@ SuppressWarnings ( { \"rawtypes\", \"unchecked\" } ) public Class <? > getTopType ( ) { if ( topType == null ) { topType = Class. class ; } return topType ; }",
        "@ SuppressWarnings ( { \"rawtypes\", \"unchecked\" } ) public Class <? > getTopType ( ) { Class <? > topType = super. getTopType ( ) ; if ( topType!= null ) { return topType ; } else { return null ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > getReturnType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { return ( Class < T > ) ( ( ParameterizedType ) type ). getRawType ( ) ; } else { return type ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > getReturnType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ) [ 0 ] ; } return type ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > getReturnType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ) [ 0 ] ; } return type ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > getReturnType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } if ( type instanceof ParameterizedType ) { return ( Class < T > ) ( ( ParameterizedType ) type ). getRawType ( ) ; } return type ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > getReturnType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { return ( Class < T > ) ( ( ParameterizedType ) type ). getRawType ( ) ; } return type ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > getReturnType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ) [ 0 ] ; } else { return null ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > getReturnType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ) [ 0 ] ; } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > getReturnType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ) [ 0 ] ; } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > getReturnType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getRawType ( ) ; } else { return null ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > getReturnType ( Class < T > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class < T > ) type ; } return ( Class < T > ) type ; }",
        "public static Class <? > getTopClass ( Class <? > clazz ) { while ( clazz!= null ) { clazz = clazz. getSuperclass ( ) ; if ( clazz == null ) { clazz = clazz. getSuperclass ( ) ; } } return clazz ; }",
        "public static Class <? > getTopClass ( Class <? > clazz ) { while ( clazz!= null ) { clazz = clazz. getSuperclass ( ) ; } return clazz ; }",
        "public static Class <? > getTopClass ( Class <? > clazz ) { while ( clazz!= null ) { clazz = clazz. getSuperclass ( ) ; if ( clazz!= null ) { return clazz ; } clazz = clazz. getSuperclass ( ) ; } return clazz ; }",
        "public static Class <? > getTopClass ( Class <? > clazz ) { while ( clazz!= null ) { clazz = clazz. getSuperclass ( ) ; } if ( clazz == null ) { clazz = clazz. getSuperclass ( ) ; } return clazz ; }",
        "public static Class <? > getTopClass ( Class <? > clazz ) { while ( clazz!= null ) { clazz = clazz. getSuperclass ( ) ; if ( clazz!= null ) { return clazz ; } clazz = clazz. getSuperclass ( ) ; } return null ; }",
        "@ SuppressWarnings ( \"rawtypes\" ) public Class <? > getTopType ( Class <? > topType ) { if ( topType == null ) { throw new IllegalArgumentException ( \"Top type cannot be null\" ) ; } return super. getTopType ( topType ) ; }",
        "@ SuppressWarnings ( \"rawtypes\" ) public Class <? > getTopType ( Class <? > topType ) { if ( topType == Integer. class ) { return Integer. class ; } if ( topType == Long. class ) { return Long. class ; } return topType ; }",
        "@ SuppressWarnings ( { \"rawtypes\", \"unchecked\" } ) public Class <? > getTopType ( ) { if ( topType == null ) { topType = Class. class ; } return topType ; }",
        "@ SuppressWarnings ( \"rawtypes\" ) public Class <? > getTopType ( Class <? > topType ) { if ( topType == null ) { throw new IllegalArgumentException ( \"Top type cannot be null\" ) ; } return topType ; }",
        "@ SuppressWarnings ( \"rawtypes\" ) public Class <? > getTopType ( ) { if ( topType == null ) { topType = Class. class ; } return topType ; }"
      ],
      "mid_translation": [
        "Override this method to change the behavior of the case where the top type is not specified.",
        "In the case of the top type of a function return the given type.",
        "In the case of the top type of a function return the given type otherwise return null.",
        "In the case of the top type of a function return the top type of the function.",
        "Override this method to change the behavior of the case where the top type is known."
      ],
      "output": [
        "@Override protected Class <? > caseTopType ( ) { Class <? > topType = super. getTopType ( ) ; if ( topType == null ) { topType = Class. class ; } return topType ; }",
        "@Override protected Class <? > caseTopType ( Class <? > topType ) { if ( topType == null ) { throw new IllegalArgumentException ( \"Top type cannot be null\" ) ; } return topType ; }",
        "@Override protected Class <? > caseTopType ( ) { Class <? > topType = super. getTopType ( ) ; if ( topType!= null ) { return topType ; } return null ; }",
        "@Override protected Class <? > caseTopType ( ) { if ( topType == null ) { topType = Class. class ; } return topType ; }",
        "@Override protected Class <? > caseTopType ( ) { Class <? > topType = super. getTopType ( ) ; if ( topType!= null ) { return topType ; } else { return null ; } }",
        "@Override protected < T > Class < T > caseTopType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { return ( Class < T > ) ( ( ParameterizedType ) type ). getRawType ( ) ; } else { return type ; } }",
        "@Override protected < T > Class < T > caseTopType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ) [ 0 ] ; } return type ; }",
        "@Override protected < T > Class < T > caseTopType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ) [ 0 ] ; } return type ; }",
        "@Override protected < T > Class < T > caseTopType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } if ( type instanceof ParameterizedType ) { return ( Class < T > ) ( ( ParameterizedType ) type ). getRawType ( ) ; } return type ; }",
        "@Override protected < T > Class < T > caseTopType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { return ( Class < T > ) ( ( ParameterizedType ) type ). getRawType ( ) ; } return type ; }",
        "@Override protected < T > Class < T > caseTopType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ) [ 0 ] ; } else { return null ; } }",
        "@Override protected < T > Class < T > caseTopType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ) [ 0 ] ; } return null ; }",
        "@Override protected < T > Class < T > caseTopType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getActualTypeArguments ( ) [ 0 ] ; } return null ; }",
        "@Override protected < T > Class < T > caseTopType ( Class < T > type ) { if ( type instanceof Class ) { return ( Class < T > ) type ; } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return parameterizedType. getRawType ( ) ; } else { return null ; } }",
        "@Override protected < T > Class < T > caseTopType ( Class < T > type ) { if ( type == null ) { return null ; } if ( type instanceof Class <? > ) { return ( Class < T > ) type ; } return ( Class < T > ) type ; }",
        "@Override protected Class <? > caseTopType ( Class <? > clazz ) { while ( clazz!= null ) { clazz = clazz. getSuperclass ( ) ; if ( clazz == null ) { clazz = clazz. getSuperclass ( ) ; } } return clazz ; }",
        "@Override protected Class <? > caseTopType ( Class <? > clazz ) { while ( clazz!= null ) { clazz = clazz. getSuperclass ( ) ; } return clazz ; }",
        "@Override protected Class <? > caseTopType ( Class <? > clazz ) { while ( clazz!= null ) { clazz = clazz. getSuperclass ( ) ; if ( clazz!= null ) { return clazz ; } clazz = clazz. getSuperclass ( ) ; } return clazz ; }",
        "@Override protected Class <? > caseTopType ( Class <? > clazz ) { while ( clazz!= null ) { clazz = clazz. getSuperclass ( ) ; } if ( clazz == null ) { clazz = clazz. getSuperclass ( ) ; } return clazz ; }",
        "@Override protected Class <? > caseTopType ( Class <? > clazz ) { while ( clazz!= null ) { clazz = clazz. getSuperclass ( ) ; if ( clazz!= null ) { return clazz ; } clazz = clazz. getSuperclass ( ) ; } return null ; }",
        "@Override protected Class <? > caseTopType ( Class <? > topType ) { if ( topType == null ) { throw new IllegalArgumentException ( \"Top type cannot be null\" ) ; } return super. getTopType ( topType ) ; }",
        "@Override protected Class <? > caseTopType ( Class <? > topType ) { if ( topType == Integer. class ) { return Integer. class ; } if ( topType == Long. class ) { return Long. class ; } return topType ; }",
        "@Override protected Class <? > caseTopType ( ) { if ( topType == null ) { topType = Class. class ; } return topType ; }",
        "@Override protected Class <? > caseTopType ( Class <? > topType ) { if ( topType == null ) { throw new IllegalArgumentException ( \"Top type cannot be null\" ) ; } return topType ; }",
        "@Override protected Class <? > caseTopType ( ) { if ( topType == null ) { topType = Class. class ; } return topType ; }"
      ]
    },
    "Closure_113_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_329-330": {
      "loc": "329-330",
      "input": "private void processRequireCall(NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null || !provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg); if (provided != null) { parent.detachFromParent(); compiler.reportCodeChange(); } } }",
      "target": "private void processRequireCall(NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null || !provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg); if (provided != null || requiresLevel.isOn()) { parent.detachFromParent(); compiler.reportCodeChange(); } } }",
      "function range": "295,3-334,3",
      "raw_output": [
        "private void processRequireCall ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param. isName ( ) ) { Node name = param. getFirstChild ( ) ; Node value = param. getFirstChild ( ) ; if ( name. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) ; } }",
        "private void processRequireCall ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param. isName ( ) ) { Node name = param. getFirstChild ( ) ; Node value = param. getFirstChild ( ) ; if ( name. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) ; } }",
        "private void processRequireCall ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param. isName ( ) ) { Node name = param. getFirstChild ( ) ; Node value = param. getFirstChild ( ) ; if ( name. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) ; } }",
        "private void processRequireCall ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param. isName ( ) ) { Node name = param. getFirstChild ( ) ; Node value = param. getFirstChild ( ) ; if ( name. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) ; } }",
        "private void processRequireCall ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param. isName ( ) ) { Node name = param. getFirstChild ( ) ; Node value = param. getFirstChild ( ) ; if ( name. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) ; } }",
        "private void handleRequireCall ( NodeTraversal t, Node n ) { checkState ( n. isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; Node param = n. getFirstChild ( ). getNext ( ) ; checkState ( param. isGetProp ( ) ) ; checkState ( param. isGetProp ( ) ) ; Node paramValue = param. getFirstChild ( ). getNext ( ) ; checkState ( paramValue. isGetProp ( ) ) ; Node value = paramValue. getFirstChild ( ). getNext ( ) ; checkState ( value. isGetProp ( ) ) ; checkState ( value. isGetProp ( ) ) ; Node paramValueNode = value. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = paramValueNode. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = value. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ;",
        "private void handleRequireCall ( NodeTraversal t, Node n ) { checkState ( n. isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; Node param = n. getFirstChild ( ). getNext ( ) ; checkState ( param. isGetProp ( ) ) ; checkState ( param. isGetProp ( ) ) ; Node paramValue = param. getFirstChild ( ). getNext ( ) ; checkState ( paramValue. isGetProp ( ) ) ; Node value = paramValue. getFirstChild ( ). getNext ( ) ; checkState ( value. isGetProp ( ) ) ; checkState ( value. isGetProp ( ) ) ; Node paramValueNode = value. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = paramValueNode. getFirstChild ( ) ; checkState ( value. isGetProp ( ) ) ; Node valueNode = value. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState (",
        "private void handleRequireCall ( NodeTraversal t, Node n ) { checkState ( n. isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; Node param = n. getFirstChild ( ). getNext ( ) ; checkState ( param. isGetProp ( ) ) ; checkState ( param. isGetProp ( ) ) ; Node paramValue = param. getFirstChild ( ). getNext ( ) ; checkState ( paramValue. isGetProp ( ) ) ; Node value = paramValue. getFirstChild ( ). getNext ( ) ; checkState ( value. isGetProp ( ) ) ; checkState ( value. isGetProp ( ) ) ; Node paramValueNode = value. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = paramValueNode. getFirstChild ( ) ; checkState ( value. isGetProp ( ) ) ; Node valueNode = value. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ;",
        "private void handleRequireCall ( NodeTraversal t, Node n ) { checkState ( n. isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; Node param = n. getFirstChild ( ). getNext ( ) ; checkState ( param. isGetProp ( ) ) ; checkState ( param. isGetProp ( ) ) ; Node paramValue = param. getFirstChild ( ). getNext ( ) ; checkState ( paramValue. isGetProp ( ) ) ; Node value = paramValue. getFirstChild ( ). getNext ( ) ; checkState ( value. isGetProp ( ) ) ; checkState ( value. isGetProp ( ) ) ; Node paramValueNode = value. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = paramValueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = value. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) )",
        "private void handleRequireCall ( NodeTraversal t, Node n ) { checkState ( n. isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; Node param = n. getFirstChild ( ). getNext ( ) ; checkState ( param. isGetProp ( ) ) ; checkState ( param. isGetProp ( ) ) ; Node paramValue = param. getFirstChild ( ). getNext ( ) ; checkState ( paramValue. isGetProp ( ) ) ; Node value = paramValue. getFirstChild ( ). getNext ( ) ; checkState ( value. isGetProp ( ) ) ; checkState ( value. isGetProp ( ) ) ; Node paramValueNode = value. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = paramValueNode. getNext ( ) ; checkState ( value. isGetProp ( ) ) ; Node valueNode = value. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState (",
        "private void processRequireBody ( NodeTraversal t, Node n, Node parent ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = param. getFirstChild ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = paramExpr. getNext ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramExpr. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ; return ; } Node param = paramNode.",
        "private void processRequireBody ( NodeTraversal t, Node n, Node parent ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = param. getFirstChild ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = paramExpr. getNext ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramExpr. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ; return ; } Node paramNode = paramNode",
        "private void processRequireBody ( NodeTraversal t, Node n, Node parent ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = param. getFirstChild ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = paramExpr. getNext ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramExpr. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node param = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ; return ; } Node paramNode = paramNode.",
        "private void processRequireBody ( NodeTraversal t, Node n, Node parent ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = param. getFirstChild ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramExpr. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ; return ; } Node param = paramNode.",
        "private void processRequireBody ( NodeTraversal t, Node n, Node parent ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = param. getFirstChild ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = paramExpr. getNext ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramExpr. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node param = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ; return ; } Node paramNode = paramNode.",
        "@ SuppressWarnings ( { \"rawtypes\", \"unchecked\" } ) private void handleRequest ( final HttpServletRequest request, final HttpServletResponse response ) throws IOException, ServletException { if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) )",
        "@ SuppressWarnings ( { \"rawtypes\", \"unchecked\" } ) private void handleRequest ( final HttpServletRequest request, final HttpServletResponse response ) throws IOException, ServletException { if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) )",
        "@ SuppressWarnings ( { \"rawtypes\", \"unchecked\" } ) private void handleRequest ( final HttpServletRequest request, final HttpServletResponse response ) throws IOException, ServletException { if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) )",
        "@ SuppressWarnings ( { \"rawtypes\", \"unchecked\" } ) private void handleRequest ( final HttpServletRequest request, final HttpServletResponse response ) throws IOException, ServletException { if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) )",
        "@ SuppressWarnings ( { \"rawtypes\", \"unchecked\" } ) private void handleRequest ( final HttpServletRequest request, final HttpServletResponse response ) throws IOException, ServletException { if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) )",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( )",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). is",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( )",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild"
      ],
      "mid_translation": [
        "Handles a goog. require call.",
        "Handles a require call.",
        "Handles a goog. require and its body.",
        "Handles a REQUIRE call.",
        "Handles a call to a goog. require."
      ],
      "output": [
        "private void processRequireCall ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param. isName ( ) ) { Node name = param. getFirstChild ( ) ; Node value = param. getFirstChild ( ) ; if ( name. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) ; } }",
        "private void processRequireCall ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param. isName ( ) ) { Node name = param. getFirstChild ( ) ; Node value = param. getFirstChild ( ) ; if ( name. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) ; } }",
        "private void processRequireCall ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param. isName ( ) ) { Node name = param. getFirstChild ( ) ; Node value = param. getFirstChild ( ) ; if ( name. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) ; } }",
        "private void processRequireCall ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param. isName ( ) ) { Node name = param. getFirstChild ( ) ; Node value = param. getFirstChild ( ) ; if ( name. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) ; } }",
        "private void processRequireCall ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param. isName ( ) ) { Node name = param. getFirstChild ( ) ; Node value = param. getFirstChild ( ) ; if ( name. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) && value. isDestructuringPattern ( ) ; } }",
        "private void processRequireCall ( NodeTraversal t, Node n ) { checkState ( n. isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; Node param = n. getFirstChild ( ). getNext ( ) ; checkState ( param. isGetProp ( ) ) ; checkState ( param. isGetProp ( ) ) ; Node paramValue = param. getFirstChild ( ). getNext ( ) ; checkState ( paramValue. isGetProp ( ) ) ; Node value = paramValue. getFirstChild ( ). getNext ( ) ; checkState ( value. isGetProp ( ) ) ; checkState ( value. isGetProp ( ) ) ; Node paramValueNode = value. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = paramValueNode. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = value. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ;",
        "private void processRequireCall ( NodeTraversal t, Node n ) { checkState ( n. isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; Node param = n. getFirstChild ( ). getNext ( ) ; checkState ( param. isGetProp ( ) ) ; checkState ( param. isGetProp ( ) ) ; Node paramValue = param. getFirstChild ( ). getNext ( ) ; checkState ( paramValue. isGetProp ( ) ) ; Node value = paramValue. getFirstChild ( ). getNext ( ) ; checkState ( value. isGetProp ( ) ) ; checkState ( value. isGetProp ( ) ) ; Node paramValueNode = value. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = paramValueNode. getFirstChild ( ) ; checkState ( value. isGetProp ( ) ) ; Node valueNode = value. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState (",
        "private void processRequireCall ( NodeTraversal t, Node n ) { checkState ( n. isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; Node param = n. getFirstChild ( ). getNext ( ) ; checkState ( param. isGetProp ( ) ) ; checkState ( param. isGetProp ( ) ) ; Node paramValue = param. getFirstChild ( ). getNext ( ) ; checkState ( paramValue. isGetProp ( ) ) ; Node value = paramValue. getFirstChild ( ). getNext ( ) ; checkState ( value. isGetProp ( ) ) ; checkState ( value. isGetProp ( ) ) ; Node paramValueNode = value. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = paramValueNode. getFirstChild ( ) ; checkState ( value. isGetProp ( ) ) ; Node valueNode = value. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ;",
        "private void processRequireCall ( NodeTraversal t, Node n ) { checkState ( n. isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; Node param = n. getFirstChild ( ). getNext ( ) ; checkState ( param. isGetProp ( ) ) ; checkState ( param. isGetProp ( ) ) ; Node paramValue = param. getFirstChild ( ). getNext ( ) ; checkState ( paramValue. isGetProp ( ) ) ; Node value = paramValue. getFirstChild ( ). getNext ( ) ; checkState ( value. isGetProp ( ) ) ; checkState ( value. isGetProp ( ) ) ; Node paramValueNode = value. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = paramValueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = value. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) )",
        "private void processRequireCall ( NodeTraversal t, Node n ) { checkState ( n. isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; checkState ( n. getFirstChild ( ). isGetProp ( ) ) ; Node param = n. getFirstChild ( ). getNext ( ) ; checkState ( param. isGetProp ( ) ) ; checkState ( param. isGetProp ( ) ) ; Node paramValue = param. getFirstChild ( ). getNext ( ) ; checkState ( paramValue. isGetProp ( ) ) ; Node value = paramValue. getFirstChild ( ). getNext ( ) ; checkState ( value. isGetProp ( ) ) ; checkState ( value. isGetProp ( ) ) ; Node paramValueNode = value. getFirstChild ( ) ; checkState ( paramValueNode. isGetProp ( ) ) ; Node valueNode = paramValueNode. getNext ( ) ; checkState ( value. isGetProp ( ) ) ; Node valueNode = value. getFirstChild ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState ( valueNode. isGetProp ( ) ) ; Node valueNode = valueNode. getNext ( ) ; checkState (",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = param. getFirstChild ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = paramExpr. getNext ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramExpr. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ; return ; } Node param = paramNode.",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = param. getFirstChild ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = paramExpr. getNext ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramExpr. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ; return ; } Node paramNode = paramNode",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = param. getFirstChild ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = paramExpr. getNext ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramExpr. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node param = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ; return ; } Node paramNode = paramNode.",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = param. getFirstChild ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramExpr. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ; return ; } Node param = paramNode.",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = param. getFirstChild ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramExpr = paramExpr. getNext ( ) ; if ( paramExpr == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramExpr. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node param = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } Node paramNode = paramNode. getNext ( ) ; if ( paramNode == null ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ; return ; } Node paramNode = paramNode.",
        "private void processRequireCall ( final HttpServletRequest request, final HttpServletResponse response ) throws IOException, ServletException { if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) )",
        "private void processRequireCall ( final HttpServletRequest request, final HttpServletResponse response ) throws IOException, ServletException { if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) )",
        "private void processRequireCall ( final HttpServletRequest request, final HttpServletResponse response ) throws IOException, ServletException { if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) )",
        "private void processRequireCall ( final HttpServletRequest request, final HttpServletResponse response ) throws IOException, ServletException { if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) )",
        "private void processRequireCall ( final HttpServletRequest request, final HttpServletResponse response ) throws IOException, ServletException { if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"DELETE\" ) ) { handleDeleteRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"PUT\" ) ) { handlePutRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) ) { handlePostRequest ( request, response ) ; } else if ( request. getMethod ( ). equals ( \"POST\" ) )",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( )",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). is",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( )",
        "private void processRequireCall ( NodeTraversal t, Node n, Node parent ) { if ( n. isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). getNext ( ). isGetProp ( ) && n. getFirstChild ( ). isGetProp ( ) && n. getFirstChild"
      ]
    },
    "Closure_114_/src/com/google/javascript/jscomp/NameAnalyzer.java_578-579": {
      "loc": "578-579",
      "input": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns != null) { if (parent.isFor() && !NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext() != n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); } } else { recordDepScope(recordNode, ns); } } }",
      "target": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns != null) { if (parent.isFor() && !NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext() != n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); } } else if (!(parent.isCall() && parent.getFirstChild() == n)) { recordDepScope(recordNode, ns); } } }",
      "function range": "558,5-588,5",
      "raw_output": [
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; } else { t. report ( JSError. make ( n, n. getString ( ) ) ) ; } }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } t. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void addAssignmentScope ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isAssign ( ) ) { t. getScope ( ). add ( n ) ; } else { t. getScope ( ). add ( n ) ; } }",
        "public void addAssignmentScope ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScopeInternal ( name ) ; } else { addAssignmentScopeInternal ( name ) ; } }",
        "private void addAssignmentScope ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isAssign ( ) ) { t. getScope ( ). add ( n ) ; } else { t. getScope ( ). add ( parent ) ; } }",
        "public Record getAssignment ( String name ) { Record record = getAssignment ( name ) ; if ( record == null ) { record = new Record ( name ) ; putAssignment ( name, record ) ; } return record ; }",
        "public Record get ( String name ) { Record record = get ( name ) ; if ( record == null ) { record = new Record ( name ) ; put ( name, record ) ; } return record ; }",
        "public Record getAssignment ( String name ) { Record rec = getAssignment ( name ) ; if ( rec == null ) { rec = new Record ( name ) ; putAssignment ( name, rec ) ; } return rec ; }",
        "public Record getAssignment ( String name ) { Record rec = getAssignment ( name ) ; if ( rec == null ) { rec = new Record ( name ) ; setAssignment ( rec ) ; } return rec ; }",
        "public Record getAssignment ( String name ) { Record record = getAssignment ( name ) ; if ( record == null ) { record = createAssignment ( name ) ; setAssignment ( name, record ) ; } return record ; }",
        "public void addDependency ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( this. dependencies == null ) { this. dependencies = new ArrayList < String > ( ) ; } this. dependencies. add ( name ) ; }",
        "public void addDependency ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( this. dependencies == null ) { this. dependencies = new ArrayList <> ( ) ; } this. dependencies. add ( name ) ; }",
        "public void addDependency ( String name ) { if ( this. dependencies == null ) { this. dependencies = new ArrayList < String > ( ) ; } this. dependencies. add ( name ) ; }",
        "public void addDependency ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( this. dependencies == null ) { this. dependencies = new HashSet < String > ( ) ; } this. dependencies. add ( name ) ; }",
        "public void addDependency ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( this. dependencies == null ) { this. dependencies = new ArrayList ( ) ; } this. dependencies. add ( name ) ; }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { compiler. reportChangeToEnclosingScope ( n ) ; } else { compiler. reportChangeToEnclosingScope ( n ) ; } }",
        "private void recordAssignmentScope ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { compiler. reportChangeToEnclosingScope ( n ) ; } else { compiler. reportChangeToEnclosingScope ( n ) ; } }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { compiler. reportChangeToEnclosingScope ( n ) ; } else { compiler. reportChangeToEnclosingScope ( parent ) ; } }",
        "private void recordAssignmentScope ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { compiler. reportChangeToEnclosingScope ( n ) ; } else { compiler. reportChangeToEnclosingScope ( parent ) ; } }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { compiler. reportChangeToEnclosingScope ( n ) ; } else { compiler. reportChangeToEnclosingScope ( n ) ; n. getParent ( ). addChildToBack ( n ) ; } }",
        "public void addAssignmentScope ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScopeInternal ( name ) ; } else { addAssignmentScopeInternal ( name ) ; } }",
        "public void addAssignmentScope ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScope ( name ) ; } else { addAssignmentScopeInternal ( name ) ; } }",
        "public void addAssignmentScope ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScope ( name ) ; } else { addAssignmentScope ( name ) ; } }",
        "public void addAssignmentScope ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScopeInternal ( name ) ; } else { setAssignmentScopeInternal ( name ) ; } }",
        "public void addAssignmentScope ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScope ( name ) ; } else { setAssignmentScope ( name ) ; } }"
      ],
      "mid_translation": [
        "Records the scope of an assignment.",
        "Records a scope based on the name of an assignment.",
        "Records the dependency scope of an assignment.",
        "Record the scope of an assignment.",
        "Records the scope of a single assignment."
      ],
      "output": [
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; } else { t. report ( JSError. make ( n, n. getString ( ) ) ) ; } }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } t. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isAssign ( ) ) { t. getScope ( ). add ( n ) ; } else { t. getScope ( ). add ( n ) ; } }",
        "private void recordAssignment ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScopeInternal ( name ) ; } else { addAssignmentScopeInternal ( name ) ; } }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isAssign ( ) ) { t. getScope ( ). add ( n ) ; } else { t. getScope ( ). add ( parent ) ; } }",
        "private Record recordAssignment ( String name ) { Record record = getAssignment ( name ) ; if ( record == null ) { record = new Record ( name ) ; putAssignment ( name, record ) ; } return record ; }",
        "private Record recordAssignment ( String name ) { Record record = get ( name ) ; if ( record == null ) { record = new Record ( name ) ; put ( name, record ) ; } return record ; }",
        "private Record recordAssignment ( String name ) { Record rec = getAssignment ( name ) ; if ( rec == null ) { rec = new Record ( name ) ; putAssignment ( name, rec ) ; } return rec ; }",
        "private Record recordAssignment ( String name ) { Record rec = getAssignment ( name ) ; if ( rec == null ) { rec = new Record ( name ) ; setAssignment ( rec ) ; } return rec ; }",
        "private Record recordAssignment ( String name ) { Record record = getAssignment ( name ) ; if ( record == null ) { record = createAssignment ( name ) ; setAssignment ( name, record ) ; } return record ; }",
        "private void recordAssignment ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( this. dependencies == null ) { this. dependencies = new ArrayList < String > ( ) ; } this. dependencies. add ( name ) ; }",
        "private void recordAssignment ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( this. dependencies == null ) { this. dependencies = new ArrayList <> ( ) ; } this. dependencies. add ( name ) ; }",
        "private void recordAssignment ( String name ) { if ( this. dependencies == null ) { this. dependencies = new ArrayList < String > ( ) ; } this. dependencies. add ( name ) ; }",
        "private void recordAssignment ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( this. dependencies == null ) { this. dependencies = new HashSet < String > ( ) ; } this. dependencies. add ( name ) ; }",
        "private void recordAssignment ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( \"name cannot be null\" ) ; } if ( this. dependencies == null ) { this. dependencies = new ArrayList ( ) ; } this. dependencies. add ( name ) ; }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { compiler. reportChangeToEnclosingScope ( n ) ; } else { compiler. reportChangeToEnclosingScope ( n ) ; } }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { compiler. reportChangeToEnclosingScope ( n ) ; } else { compiler. reportChangeToEnclosingScope ( n ) ; } }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { compiler. reportChangeToEnclosingScope ( n ) ; } else { compiler. reportChangeToEnclosingScope ( parent ) ; } }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { compiler. reportChangeToEnclosingScope ( n ) ; } else { compiler. reportChangeToEnclosingScope ( parent ) ; } }",
        "private void recordAssignment ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { compiler. reportChangeToEnclosingScope ( n ) ; } else { compiler. reportChangeToEnclosingScope ( n ) ; n. getParent ( ). addChildToBack ( n ) ; } }",
        "private void recordAssignment ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScopeInternal ( name ) ; } else { addAssignmentScopeInternal ( name ) ; } }",
        "private void recordAssignment ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScope ( name ) ; } else { addAssignmentScopeInternal ( name ) ; } }",
        "private void recordAssignment ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScope ( name ) ; } else { addAssignmentScope ( name ) ; } }",
        "private void recordAssignment ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScopeInternal ( name ) ; } else { setAssignmentScopeInternal ( name ) ; } }",
        "private void recordAssignment ( String name ) { if ( name == null || name. length ( ) == 0 ) { addAssignmentScope ( name ) ; } else { setAssignmentScope ( name ) ; } }"
      ]
    },
    "Closure_118_/src/com/google/javascript/jscomp/DisambiguateProperties.java_495-496": {
      "loc": "495-496",
      "input": "private void handleObjectLit(NodeTraversal t, Node n) { for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { <mask> String name = child.getString(); T type = typeSystem.getType(getScope(), n, name); Property prop = getProperty(name); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(name)) { compiler.report(JSError.make( t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()), n.toString(), \"\")); } } } }",
      "target": "private void handleObjectLit(NodeTraversal t, Node n) { for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { if (child.isQuotedString()) { continue; } String name = child.getString(); T type = typeSystem.getType(getScope(), n, name); Property prop = getProperty(name); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(name)) { compiler.report(JSError.make( t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()), n.toString(), \"\")); } } } }",
      "function range": "490,5-513,5",
      "raw_output": [
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : break ; } }",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : break ; } }",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : break ; } }",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : } }",
        "private void handleObjectLiteral ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : break ; } }",
        "private void handleObjectLiteral ( Node n ) { switch ( n. getToken ( ) ) { case STRING : handleStringLiteral ( n ) ; break ; case INTEGER : handleIntegerLiteral ( n ) ; break ; case FLOAT : handleFloatLiteral ( n ) ; break ; case LONG : handleLongLiteral ( n ) ; break ; case DOUBLE : handleDoubleLiteral ( n ) ; break ; case ARRAY : handleArrayLiteral ( n ) ; break ; case MAP : handleMapLiteral ( n ) ; break ; } }",
        "private void handleObjectLiteral ( Node n ) { switch ( n. getToken ( ) ) { case STRING : handleStringLiteral ( n ) ; break ; case INTEGER : handleIntegerLiteral ( n ) ; break ; case FLOAT : handleFloatLiteral ( n ) ; break ; case LONG : handleLongLiteral ( n ) ; break ; case DOUBLE : handleDoubleLiteral ( n ) ; break ; case BOOLEAN : handleBooleanLiteral ( n ) ; break ; case STRING : handleStringLiteral ( n ) ; break ; default : break ; } }",
        "private void handleObjectLiteral ( Node n ) { switch ( n. getToken ( ) ) { case STRING : handleStringLiteral ( n ) ; break ; case INTEGER : handleIntegerLiteral ( n ) ; break ; case FLOAT : handleFloatLiteral ( n ) ; break ; case LONG : handleLongLiteral ( n ) ; break ; case DOUBLE : handleDoubleLiteral ( n ) ; break ; case ARRAY : handleArrayLiteral ( n ) ; break ; case OBJECT : handleObjectLiteral ( n ) ; break ; default : break ; } }",
        "private void handleObjectLiteral ( Node n ) { switch ( n. getToken ( ) ) { case STRING : handleStringLiteral ( n ) ; break ; case INTEGER : handleIntegerLiteral ( n ) ; break ; case FLOAT : handleFloatLiteral ( n ) ; break ; case LONG : handleLongLiteral ( n ) ; break ; case DOUBLE : handleDoubleLiteral ( n ) ; break ; case STRING : handleStringLiteral ( n ) ; break ; default : break ; } }",
        "private void handleObjectLiteral ( Node n ) { switch ( n. getToken ( ) ) { case STRING : handleStringLiteral ( n ) ; break ; case INTEGER : handleIntegerLiteral ( n ) ; break ; case FLOAT : handleFloatLiteral ( n ) ; break ; case LONG : handleLongLiteral ( n ) ; break ; case DOUBLE : handleDoubleLiteral ( n ) ; break ; case ARRAY : handleArrayLiteral ( n ) ; break ; default : break ; } }"
      ],
      "mid_translation": [
        "Handles an object literal.",
        "Handles a single object literal.",
        "Handle an object literal.",
        "Handles an object literal literal.",
        "Handles an object literal node."
      ],
      "output": [
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : break ; } }",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : break ; } }",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : break ; } }",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : } }",
        "private void handleObjectLit ( final char c ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : break ; } }",
        "private void handleObjectLit ( Node n ) { switch ( n. getToken ( ) ) { case STRING : handleStringLiteral ( n ) ; break ; case INTEGER : handleIntegerLiteral ( n ) ; break ; case FLOAT : handleFloatLiteral ( n ) ; break ; case LONG : handleLongLiteral ( n ) ; break ; case DOUBLE : handleDoubleLiteral ( n ) ; break ; case ARRAY : handleArrayLiteral ( n ) ; break ; case MAP : handleMapLiteral ( n ) ; break ; } }",
        "private void handleObjectLit ( Node n ) { switch ( n. getToken ( ) ) { case STRING : handleStringLiteral ( n ) ; break ; case INTEGER : handleIntegerLiteral ( n ) ; break ; case FLOAT : handleFloatLiteral ( n ) ; break ; case LONG : handleLongLiteral ( n ) ; break ; case DOUBLE : handleDoubleLiteral ( n ) ; break ; case BOOLEAN : handleBooleanLiteral ( n ) ; break ; case STRING : handleStringLiteral ( n ) ; break ; default : break ; } }",
        "private void handleObjectLit ( Node n ) { switch ( n. getToken ( ) ) { case STRING : handleStringLiteral ( n ) ; break ; case INTEGER : handleIntegerLiteral ( n ) ; break ; case FLOAT : handleFloatLiteral ( n ) ; break ; case LONG : handleLongLiteral ( n ) ; break ; case DOUBLE : handleDoubleLiteral ( n ) ; break ; case ARRAY : handleArrayLiteral ( n ) ; break ; case OBJECT : handleObjectLiteral ( n ) ; break ; default : break ; } }",
        "private void handleObjectLit ( Node n ) { switch ( n. getToken ( ) ) { case STRING : handleStringLiteral ( n ) ; break ; case INTEGER : handleIntegerLiteral ( n ) ; break ; case FLOAT : handleFloatLiteral ( n ) ; break ; case LONG : handleLongLiteral ( n ) ; break ; case DOUBLE : handleDoubleLiteral ( n ) ; break ; case STRING : handleStringLiteral ( n ) ; break ; default : break ; } }",
        "private void handleObjectLit ( Node n ) { switch ( n. getToken ( ) ) { case STRING : handleStringLiteral ( n ) ; break ; case INTEGER : handleIntegerLiteral ( n ) ; break ; case FLOAT : handleFloatLiteral ( n ) ; break ; case LONG : handleLongLiteral ( n ) ; break ; case DOUBLE : handleDoubleLiteral ( n ) ; break ; case ARRAY : handleArrayLiteral ( n ) ; break ; default : break ; } }"
      ]
    },
    "Closure_120_/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java_431-432": {
      "loc": "431-432",
      "input": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) { if (block.isFunction) { break; } else if (block.isLoop) { return false; } } return true; }",
      "target": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) { if (block.isFunction) { if (ref.getSymbol().getScope() != ref.scope) { return false; } break; } else if (block.isLoop) { return false; } } return true; }",
      "function range": "421,5-438,5",
      "raw_output": [
        "public boolean hasBasicBlock ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ]!= null ) { return true ; } } return false ; }",
        "public boolean hasBasicBlock ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ]!= 0 ) { return false ; } } return true ; }",
        "public boolean hasBasicBlock ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ]!= 0 ) { return true ; } } return false ; }",
        "public boolean hasBasicBlock ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ] == null ) { return false ; } } return true ; }",
        "public boolean hasBasicBlock ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ] == 0 ) { return true ; } } return false ; }",
        "public boolean hasBasicBlock ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ]!= null ) { return true ; } } return false ; }",
        "public boolean hasBasicBlock ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. size ( ) ; i ++ ) { basicBlock. get ( i ). hasBasicBlock ( ) ; } return true ; }",
        "public boolean hasBasicBlock ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if (! basicBlock [ i ]. hasBasicBlock ( ) ) { return false ; } } return true ; }",
        "public boolean hasBasicBlock ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. size ( ) ; i ++ ) { basicBlock. get ( i ). hasBasicBlock ( ) ; } return basicBlock!= null ; }",
        "public boolean hasBasicBlock ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ] == null ) { return false ; } } return true ; }",
        "public boolean hasBlock ( ) { if ( block == null ) { return false ; } for ( int i = 0 ; i < block. size ( ) ; i ++ ) { block. get ( i ). hasBlock ( ) ; } return true ; }",
        "public boolean hasBlock ( ) { if ( block == null ) { return false ; } for ( int i = 0 ; i < block. length ; i ++ ) { if ( block [ i ]!= null ) { return true ; } } return false ; }",
        "public boolean hasBlock ( ) { if ( block == null ) { return false ; } for ( BasicBlock block : blockList ) { if ( block. hasBlock ( ) ) { return true ; } } return false ; }",
        "public boolean hasBlock ( ) { if ( block == null ) { return false ; } for ( int i = 0 ; i < block. length ; i ++ ) { if ( block [ i ]!= 0 ) { return false ; } } return true ; }",
        "public boolean hasBlock ( ) { if ( block == null ) { return false ; } for ( int i = 0 ; i < block. length ; i ++ ) { if ( block [ i ]!= 0 ) { return true ; } } return false ; }",
        "public boolean isInit ( ) { if ( init == null ) { init = initBlock ( ) ; } return init == null || init. isInit ( ) || init. isLoop ( ) ; }",
        "public boolean isInit ( ) { if ( mInit == null ) { mInit = init ( ) ; } return mInit!= null && mInit. isInit ( ) ; }",
        "public boolean isInit ( ) { if ( mInit == null ) { mInit = init ( ) ; } return mInit!= null && mInit. booleanValue ( ) ; }",
        "public boolean isInit ( ) { if ( mInit == null ) { mInit = isInitInit ( ) ; } return mInit!= null && mInit. isInit ( ) ; }",
        "public boolean isInit ( ) { if ( mInit == null ) { mInit = isInit ( ) ; } return mInit!= null && mInit. booleanValue ( ) ; }",
        "static boolean isLoopBlock ( BasicBlock basicBlock ) { return basicBlock. getType ( ) == BasicBlock. Type.LOOP || basicBlock. getType ( ) == BasicBlock. Type. loop ; }",
        "static boolean isLoopBlock ( BasicBlock basicBlock ) { return basicBlock. getType ( ) == BasicBlock. Type.LOOP || basicBlock. getType ( ) == BasicBlock. Type. FOR ; }",
        "static boolean isLoopBlock ( BasicBlock basicBlock ) { return basicBlock. getType ( ) == BasicBlock. Type.LOOP || basicBlock. getType ( ) == BasicBlock. Type. DO ; }",
        "private static boolean isLoopBlock ( BasicBlock basicBlock ) { return basicBlock. getType ( ) == BasicBlock. Type.LOOP || basicBlock. getType ( ) == BasicBlock. Type. FOR ; }",
        "private boolean isLoop ( BasicBlock basicBlock ) { return basicBlock. getType ( ) == BasicBlock. Type.LOOP || basicBlock. getType ( ) == BasicBlock. Type. FOR ; }"
      ],
      "mid_translation": [
        "Returns true if the basic block is assigned once in the lifetime of a function or loop.",
        "Returns true if the basic block is assigned once in the lifetime of the current scope.",
        "Returns true if this basic block is assigned once in the lifetime of the current scope.",
        "Returns true if this basic block is assigned once in the lifetime of a function or loop.",
        "Returns true if the basic block is a function or a loop."
      ],
      "output": [
        "boolean isAssignedOnceInLifetime ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ]!= null ) { return true ; } } return false ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ]!= 0 ) { return false ; } } return true ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ]!= 0 ) { return true ; } } return false ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ] == null ) { return false ; } } return true ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ] == 0 ) { return true ; } } return false ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ]!= null ) { return true ; } } return false ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. size ( ) ; i ++ ) { basicBlock. get ( i ). hasBasicBlock ( ) ; } return true ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if (! basicBlock [ i ]. hasBasicBlock ( ) ) { return false ; } } return true ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. size ( ) ; i ++ ) { basicBlock. get ( i ). hasBasicBlock ( ) ; } return basicBlock!= null ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( basicBlock == null ) { return false ; } for ( int i = 0 ; i < basicBlock. length ; i ++ ) { if ( basicBlock [ i ] == null ) { return false ; } } return true ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( block == null ) { return false ; } for ( int i = 0 ; i < block. size ( ) ; i ++ ) { block. get ( i ). hasBlock ( ) ; } return true ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( block == null ) { return false ; } for ( int i = 0 ; i < block. length ; i ++ ) { if ( block [ i ]!= null ) { return true ; } } return false ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( block == null ) { return false ; } for ( BasicBlock block : blockList ) { if ( block. hasBlock ( ) ) { return true ; } } return false ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( block == null ) { return false ; } for ( int i = 0 ; i < block. length ; i ++ ) { if ( block [ i ]!= 0 ) { return false ; } } return true ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( block == null ) { return false ; } for ( int i = 0 ; i < block. length ; i ++ ) { if ( block [ i ]!= 0 ) { return true ; } } return false ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( init == null ) { init = initBlock ( ) ; } return init == null || init. isInit ( ) || init. isLoop ( ) ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( mInit == null ) { mInit = init ( ) ; } return mInit!= null && mInit. isInit ( ) ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( mInit == null ) { mInit = init ( ) ; } return mInit!= null && mInit. booleanValue ( ) ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( mInit == null ) { mInit = isInitInit ( ) ; } return mInit!= null && mInit. isInit ( ) ; }",
        "boolean isAssignedOnceInLifetime ( ) { if ( mInit == null ) { mInit = isInit ( ) ; } return mInit!= null && mInit. booleanValue ( ) ; }",
        "boolean isAssignedOnceInLifetime ( BasicBlock basicBlock ) { return basicBlock. getType ( ) == BasicBlock. Type.LOOP || basicBlock. getType ( ) == BasicBlock. Type. loop ; }",
        "boolean isAssignedOnceInLifetime ( BasicBlock basicBlock ) { return basicBlock. getType ( ) == BasicBlock. Type.LOOP || basicBlock. getType ( ) == BasicBlock. Type. FOR ; }",
        "boolean isAssignedOnceInLifetime ( BasicBlock basicBlock ) { return basicBlock. getType ( ) == BasicBlock. Type.LOOP || basicBlock. getType ( ) == BasicBlock. Type. DO ; }",
        "boolean isAssignedOnceInLifetime ( BasicBlock basicBlock ) { return basicBlock. getType ( ) == BasicBlock. Type.LOOP || basicBlock. getType ( ) == BasicBlock. Type. FOR ; }",
        "boolean isAssignedOnceInLifetime ( BasicBlock basicBlock ) { return basicBlock. getType ( ) == BasicBlock. Type.LOOP || basicBlock. getType ( ) == BasicBlock. Type. FOR ; }"
      ]
    },
    "Closure_122_/src/com/google/javascript/jscomp/parsing/IRFactory.java_252-253": {
      "loc": "252-253",
      "input": "private void handleBlockComment(Comment comment) { if (comment.getValue().indexOf(\" @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) { errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); } }",
      "target": "private void handleBlockComment(Comment comment) { Pattern p = Pattern.compile(\"(/|(\\n[ \\t]*))\\\\*[ \\t]*@[a-zA-Z]\"); if (p.matcher(comment.getValue()).find()) { errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); } }",
      "function range": "251,3-258,3",
      "raw_output": [
        "private void handleBlockComment ( String text ) { if ( text == null || text. trim ( ). length ( ) == 0 ) { return ; } String [ ] split = text. trim ( ). split ( \"\\\\s+\" ) ; if ( split. length == 2 ) { if ( split [ 0 ]. equals ( \" \" ) && split [ 1 ]. equals ( \" \" ) && split [ 2 ]. equals ( \" \" ) && split [ 3 ]. equals ( \" \" ) && split [ 4 ]. equals ( \" \" ) && split [ 5 ]. equals ( \" \" ) && split [ 6 ]. equals ( \" \" ) && split [ 7 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 9 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 16 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) ; } }",
        "private void handleBlockComment ( String text ) { if ( text == null || text. trim ( ). length ( ) == 0 ) { return ; } String [ ] split = text. trim ( ). split ( \"\\\\s+\" ) ; if ( split. length == 2 ) { if ( split [ 0 ]. equals ( \" \" ) && split [ 1 ]. equals ( \" \" ) && split [ 2 ]. equals ( \" \" ) && split [ 3 ]. equals ( \" \" ) && split [ 4 ]. equals ( \" \" ) && split [ 5 ]. equals ( \" \" ) && split [ 6 ]. equals ( \" \" ) && split [ 7 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 9 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 16 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) ; } }",
        "private void handleBlockComment ( String text ) { if ( text == null || text. trim ( ). length ( ) == 0 ) { return ; } String [ ] split = text. trim ( ). split ( \"\\\\s+\" ) ; if ( split. length == 2 ) { if ( split [ 0 ]. equals ( \" \" ) && split [ 1 ]. equals ( \" \" ) && split [ 2 ]. equals ( \" \" ) && split [ 3 ]. equals ( \" \" ) && split [ 4 ]. equals ( \" \" ) && split [ 5 ]. equals ( \" \" ) && split [ 6 ]. equals ( \" \" ) && split [ 7 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 9 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 16 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) ; } } }",
        "private void handleBlockComment ( String text ) { if ( text == null || text. trim ( ). length ( ) == 0 ) { return ; } String [ ] split = text. trim ( ). split ( \"\\\\s+\" ) ; if ( split. length == 2 ) { if ( split [ 0 ]. equals ( \" \" ) && split [ 1 ]. equals ( \" \" ) && split [ 2 ]. equals ( \" \" ) && split [ 3 ]. equals ( \" \" ) && split [ 4 ]. equals ( \" \" ) && split [ 5 ]. equals ( \" \" ) && split [ 6 ]. equals ( \" \" ) && split [ 7 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 9 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 16 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) ; } } }",
        "private void handleBlockComment ( String text ) { if ( text == null || text. trim ( ). length ( ) == 0 ) { return ; } String [ ] split = text. trim ( ). split ( \"\\\\s+\" ) ; if ( split. length == 2 ) { if ( split [ 0 ]. equals ( \" \" ) && split [ 1 ]. equals ( \" \" ) && split [ 2 ]. equals ( \" \" ) && split [ 3 ]. equals ( \" \" ) && split [ 4 ]. equals ( \" \" ) && split [ 5 ]. equals ( \" \" ) && split [ 6 ]. equals ( \" \" ) && split [ 7 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 9 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 16 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) ; } }",
        "private void handleWarning ( Node n, JSDocInfo info ) { if ( info. isBlockComment ( ) ) { reportBlockComment ( n, info ) ; } else if ( info. isComment ( ) ) { reportBlockComment ( n, info ) ; } }",
        "private void handleWarning ( Node n, JSDocInfo info ) { if ( info. isBlockComment ( ) ) { reportBlockComment ( n, info ) ; } else { reportBlockComment ( n, info ) ; } }",
        "private void handleWarning ( Node n, JSDocInfo info ) { if ( info. isBlockComment ( ) ) { reportBlockComment ( n, info ) ; } else if ( info. isComment ( ) ) { reportComment ( n, info ) ; } }",
        "private void handleWarning ( Node n, JSDocInfo info ) { if ( info. kind!= JSDocInfo. Kind. WARNING ) { report ( n, JSError. make ( n, n. getString ( ), info. kind ) ) ; } }",
        "private void handleWarning ( Node n, JSDocInfo info ) { if ( info. kind!= JSDocInfo. Kind. WARNING ) { report ( n, JSError. make ( n, n. toString ( ) ) ) ; } }",
        "private void handleComment ( String comment ) { if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } }",
        "private void handleComment ( String comment ) { if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } }",
        "private void handleComment ( String comment ) { if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } }",
        "private void handleComment ( String comment ) { if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockBlockComment ( comment ) ; } }",
        "private void handleComment ( String comment ) { if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isComment ( comment ) ) { handleBlockComment ( comment ) ; } }",
        "private void handleWarning ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { return ; } if ( info. isWarning ( ) ) { t. report ( n ) ; } else { t. report ( n ) ; } }",
        "private void handleWarning ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info!= null && info. isWarning ( ) ) { t. report ( n ) ; } }",
        "private void handleWarning ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { return ; } if ( info. isWarning ( ) ) { t. report ( n ) ; return ; } if ( info. isBlockComment ( ) ) { t. report ( n ) ; return ; } t. report ( n ) ; }",
        "private void handleWarning ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { return ; } if ( info. isWarning ( ) ) { t. report ( n ) ; return ; } t. report ( n ) ; }",
        "private void handleWarning ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { return ; } if ( info. isBlockComment ( ) ) { t. report ( n ) ; } else { t. report ( n ) ; } }",
        "private void reportBlockCommentWarning ( Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info!= null && info. isBlockComment ( ) ) { compiler. report ( JSError. make ( n, n. getFirstChild ( ). getString ( ) ) ) ; } }",
        "private void reportBlockCommentWarning ( Node n, String msg ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { report ( n, msg ) ; } else { report ( n, msg ) ; } }",
        "private void reportBlockCommentWarning ( Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info!= null && info. isBlockComment ( ) ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; } }",
        "private void reportBlockCommentWarning ( Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info!= null && info. isBlockComment ( ) ) { compiler. report ( JSError. make ( n, n. getLastChild ( ). getString ( ) ) ) ; } }",
        "private void reportBlockCommentWarning ( Node n, String msg ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { report ( n, msg ) ; } else { report ( n, msg, info ) ; } }"
      ],
      "mid_translation": [
        "Handles a block comment.",
        "Handles a warning for a block comment.",
        "Handles a non - block comment.",
        "Handles a warning in a block comment.",
        "Report a warning for a block comment."
      ],
      "output": [
        "private void handleBlockComment ( String text ) { if ( text == null || text. trim ( ). length ( ) == 0 ) { return ; } String [ ] split = text. trim ( ). split ( \"\\\\s+\" ) ; if ( split. length == 2 ) { if ( split [ 0 ]. equals ( \" \" ) && split [ 1 ]. equals ( \" \" ) && split [ 2 ]. equals ( \" \" ) && split [ 3 ]. equals ( \" \" ) && split [ 4 ]. equals ( \" \" ) && split [ 5 ]. equals ( \" \" ) && split [ 6 ]. equals ( \" \" ) && split [ 7 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 9 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 16 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) ; } }",
        "private void handleBlockComment ( String text ) { if ( text == null || text. trim ( ). length ( ) == 0 ) { return ; } String [ ] split = text. trim ( ). split ( \"\\\\s+\" ) ; if ( split. length == 2 ) { if ( split [ 0 ]. equals ( \" \" ) && split [ 1 ]. equals ( \" \" ) && split [ 2 ]. equals ( \" \" ) && split [ 3 ]. equals ( \" \" ) && split [ 4 ]. equals ( \" \" ) && split [ 5 ]. equals ( \" \" ) && split [ 6 ]. equals ( \" \" ) && split [ 7 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 9 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 16 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) ; } }",
        "private void handleBlockComment ( String text ) { if ( text == null || text. trim ( ). length ( ) == 0 ) { return ; } String [ ] split = text. trim ( ). split ( \"\\\\s+\" ) ; if ( split. length == 2 ) { if ( split [ 0 ]. equals ( \" \" ) && split [ 1 ]. equals ( \" \" ) && split [ 2 ]. equals ( \" \" ) && split [ 3 ]. equals ( \" \" ) && split [ 4 ]. equals ( \" \" ) && split [ 5 ]. equals ( \" \" ) && split [ 6 ]. equals ( \" \" ) && split [ 7 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 9 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 16 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) ; } } }",
        "private void handleBlockComment ( String text ) { if ( text == null || text. trim ( ). length ( ) == 0 ) { return ; } String [ ] split = text. trim ( ). split ( \"\\\\s+\" ) ; if ( split. length == 2 ) { if ( split [ 0 ]. equals ( \" \" ) && split [ 1 ]. equals ( \" \" ) && split [ 2 ]. equals ( \" \" ) && split [ 3 ]. equals ( \" \" ) && split [ 4 ]. equals ( \" \" ) && split [ 5 ]. equals ( \" \" ) && split [ 6 ]. equals ( \" \" ) && split [ 7 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 9 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 16 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) ; } } }",
        "private void handleBlockComment ( String text ) { if ( text == null || text. trim ( ). length ( ) == 0 ) { return ; } String [ ] split = text. trim ( ). split ( \"\\\\s+\" ) ; if ( split. length == 2 ) { if ( split [ 0 ]. equals ( \" \" ) && split [ 1 ]. equals ( \" \" ) && split [ 2 ]. equals ( \" \" ) && split [ 3 ]. equals ( \" \" ) && split [ 4 ]. equals ( \" \" ) && split [ 5 ]. equals ( \" \" ) && split [ 6 ]. equals ( \" \" ) && split [ 7 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 9 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 16 ]. equals ( \" \" ) && split [ 8 ]. equals ( \" \" ) && split [ 10 ]. equals ( \" \" ) && split [ 11 ]. equals ( \" \" ) && split [ 12 ]. equals ( \" \" ) && split [ 13 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 14 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) && split [ 15 ]. equals ( \" \" ) ; } }",
        "private void handleBlockComment ( Node n, JSDocInfo info ) { if ( info. isBlockComment ( ) ) { reportBlockComment ( n, info ) ; } else if ( info. isComment ( ) ) { reportBlockComment ( n, info ) ; } }",
        "private void handleBlockComment ( Node n, JSDocInfo info ) { if ( info. isBlockComment ( ) ) { reportBlockComment ( n, info ) ; } else { reportBlockComment ( n, info ) ; } }",
        "private void handleBlockComment ( Node n, JSDocInfo info ) { if ( info. isBlockComment ( ) ) { reportBlockComment ( n, info ) ; } else if ( info. isComment ( ) ) { reportComment ( n, info ) ; } }",
        "private void handleBlockComment ( Node n, JSDocInfo info ) { if ( info. kind!= JSDocInfo. Kind. WARNING ) { report ( n, JSError. make ( n, n. getString ( ), info. kind ) ) ; } }",
        "private void handleBlockComment ( Node n, JSDocInfo info ) { if ( info. kind!= JSDocInfo. Kind. WARNING ) { report ( n, JSError. make ( n, n. toString ( ) ) ) ; } }",
        "private void handleBlockComment ( String comment ) { if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } }",
        "private void handleBlockComment ( String comment ) { if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } }",
        "private void handleBlockComment ( String comment ) { if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } }",
        "private void handleBlockComment ( String comment ) { if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockBlockComment ( comment ) ; } }",
        "private void handleBlockComment ( String comment ) { if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isBlockComment ( comment ) ) { handleBlockComment ( comment ) ; } else if ( isComment ( comment ) ) { handleBlockComment ( comment ) ; } }",
        "private void handleBlockComment ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { return ; } if ( info. isWarning ( ) ) { t. report ( n ) ; } else { t. report ( n ) ; } }",
        "private void handleBlockComment ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info!= null && info. isWarning ( ) ) { t. report ( n ) ; } }",
        "private void handleBlockComment ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { return ; } if ( info. isWarning ( ) ) { t. report ( n ) ; return ; } if ( info. isBlockComment ( ) ) { t. report ( n ) ; return ; } t. report ( n ) ; }",
        "private void handleBlockComment ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { return ; } if ( info. isWarning ( ) ) { t. report ( n ) ; return ; } t. report ( n ) ; }",
        "private void handleBlockComment ( NodeTraversal t, Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { return ; } if ( info. isBlockComment ( ) ) { t. report ( n ) ; } else { t. report ( n ) ; } }",
        "private void handleBlockComment ( Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info!= null && info. isBlockComment ( ) ) { compiler. report ( JSError. make ( n, n. getFirstChild ( ). getString ( ) ) ) ; } }",
        "private void handleBlockComment ( Node n, String msg ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { report ( n, msg ) ; } else { report ( n, msg ) ; } }",
        "private void handleBlockComment ( Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info!= null && info. isBlockComment ( ) ) { compiler. report ( JSError. make ( n, n. getString ( ) ) ) ; } }",
        "private void handleBlockComment ( Node n ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info!= null && info. isBlockComment ( ) ) { compiler. report ( JSError. make ( n, n. getLastChild ( ). getString ( ) ) ) ; } }",
        "private void handleBlockComment ( Node n, String msg ) { JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { report ( n, msg ) ; } else { report ( n, msg, info ) ; } }"
      ]
    },
    "Closure_125_/src/com/google/javascript/jscomp/TypeCheck.java_1661-1662": {
      "loc": "1661-1662",
      "input": "private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType(); if (fnType != null) { visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } } else { report(t, n, NOT_A_CONSTRUCTOR); ensureTyped(t, n); } }",
      "target": "private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType(); if (fnType != null && fnType.hasInstanceType()) { visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } } else { report(t, n, NOT_A_CONSTRUCTOR); ensureTyped(t, n); } }",
      "function range": "1656,3-1671,3",
      "raw_output": [
        "private void visitNewNode ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = n. getJSType ( ) ; if ( type == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } t. report ( JSError. make ( n, newType ) ) ; }",
        "private void visitNewNode ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = n. getJSType ( ) ; if ( type == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = newType. restrictByNotNullOrUndefined ( ) ; newType = newType. restrictByNotNullOrUndefined ( ) ; t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; }",
        "private void visitNewNode ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = n. getJSType ( ) ; if ( type == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = newType. restrictByNotNullOrUndefined ( ) ; t. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void visitNewNode ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = n. getJSType ( ) ; if ( type == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = newType. restrictByNotNullOrUndefined ( ) ; t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; }",
        "private void visitNewNode ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = n. getJSType ( ) ; if ( type == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = newType. restrictByNotNullOrUndefined ( ) ; newType = newType. restrictByNotNullOrUndefined ( ) ; t. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void visitConstructorParameter ( Node n, JSDocInfo info ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( )",
        "private void visitConstructorParameter ( Node n, JSDocInfo info ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ).",
        "private void visitConstructorParameter ( Node n, JSDocInfo info ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ).",
        "private void visitConstructorParameter ( Node n, JSDocInfo info ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ).",
        "private void visitConstructorParameter ( Node n, JSDocInfo info ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ).",
        "private void visitConstructorOrConstructorParameter ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitConstructorOrConstructorParameter ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitConstructorOrConstructorParameter ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitConstructorOrConstructorParameter ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitConstructorOrConstructorParameter ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitConstructorOrParameter ( NodeTraversal t, Node n ) { if ( n. isConstructor ( ) ) { Node param = n. getFirstChild ( ) ; JSType type = param. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info2 = n. getJSDocInfo ( ) ; if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info3 = n. getJSDocInfo ( ) ; if ( info3 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info4 = n. getJSDocInfo ( ) ; if ( info4 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo ( ) ; if ( info8 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if (",
        "private void visitConstructorOrParameter ( NodeTraversal t, Node n ) { if ( n. isConstructor ( ) ) { Node param = n. getFirstChild ( ) ; JSType type = param. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info2 = n. getJSDocInfo ( ) ; if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info3 = n. getJSDocInfo ( ) ; if ( info3 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info4 = n. getJSDocInfo ( ) ; if ( info4 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo ( ) ; if ( info8 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info9 = n. getJSDocInfo ( ) ; if ( info9 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info9 = n. getJSDocInfo",
        "private void visitConstructorOrParameter ( NodeTraversal t, Node n ) { if ( n. isConstructor ( ) ) { Node param = n. getFirstChild ( ) ; JSType type = param. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info2 = n. getJSDocInfo ( ) ; if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info3 = n. getJSDocInfo ( ) ; if ( info3 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info4 = n. getJSDocInfo ( ) ; if ( info4 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo ( ) ; if ( info8 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info8 == null ) { info8 = getNativeType ( JSTypeNative. OBJECT",
        "private void visitConstructorOrParameter ( NodeTraversal t, Node n ) { if ( n. isConstructor ( ) ) { Node param = n. getFirstChild ( ) ; JSType type = param. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info2 = n. getJSDocInfo ( ) ; if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info3 = n. getJSDocInfo ( ) ; if ( info3 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info4 = n. getJSDocInfo ( ) ; if ( info4 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo ( ) ; if ( info8 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDoc",
        "private void visitConstructorOrParameter ( NodeTraversal t, Node n ) { if ( n. isConstructor ( ) ) { Node param = n. getFirstChild ( ) ; JSType type = param. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info2 = n. getJSDocInfo ( ) ; if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info3 = n. getJSDocInfo ( ) ; if ( info3 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info4 = n. getJSDocInfo ( ) ; if ( info4 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo ( ) ; if ( info8 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info9 = n. getJSDocInfo ( ) ; if ( info9 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo",
        "private void visitConstructorOrConstructorParameter ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitConstructorOrConstructorParameter ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitConstructorOrConstructorParameter ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitConstructorOrConstructorParameter ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitConstructorOrConstructorParameter ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }"
      ],
      "mid_translation": [
        "Visits a NEW node.",
        "Visits a new constructor parameter.",
        "Visits a new constructor or constructor parameter.",
        "Visits a new constructor or a constructor parameter.",
        "Visits a new constructor or constructor constructor parameter."
      ],
      "output": [
        "private void visitNew ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = n. getJSType ( ) ; if ( type == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } t. report ( JSError. make ( n, newType ) ) ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = n. getJSType ( ) ; if ( type == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = newType. restrictByNotNullOrUndefined ( ) ; newType = newType. restrictByNotNullOrUndefined ( ) ; t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = n. getJSType ( ) ; if ( type == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = newType. restrictByNotNullOrUndefined ( ) ; t. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = n. getJSType ( ) ; if ( type == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = newType. restrictByNotNullOrUndefined ( ) ; t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType type = n. getJSType ( ) ; if ( type == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } JSType newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = type. restrictByNotNullOrUndefined ( ) ; if ( newType == null ) { t. report ( JSError. make ( n, n. getString ( ) ) ) ; return ; } newType = newType. restrictByNotNullOrUndefined ( ) ; newType = newType. restrictByNotNullOrUndefined ( ) ; t. report ( JSError. make ( n, n. getString ( ) ) ) ; }",
        "private void visitNew ( Node n, JSDocInfo info ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( )",
        "private void visitNew ( Node n, JSDocInfo info ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ).",
        "private void visitNew ( Node n, JSDocInfo info ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ).",
        "private void visitNew ( Node n, JSDocInfo info ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ).",
        "private void visitNew ( Node n, JSDocInfo info ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ).",
        "private void visitNew ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { if ( n. isConstructor ( ) ) { Node param = n. getFirstChild ( ) ; JSType type = param. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info2 = n. getJSDocInfo ( ) ; if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info3 = n. getJSDocInfo ( ) ; if ( info3 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info4 = n. getJSDocInfo ( ) ; if ( info4 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo ( ) ; if ( info8 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if (",
        "private void visitNew ( NodeTraversal t, Node n ) { if ( n. isConstructor ( ) ) { Node param = n. getFirstChild ( ) ; JSType type = param. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info2 = n. getJSDocInfo ( ) ; if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info3 = n. getJSDocInfo ( ) ; if ( info3 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info4 = n. getJSDocInfo ( ) ; if ( info4 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo ( ) ; if ( info8 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info9 = n. getJSDocInfo ( ) ; if ( info9 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info9 = n. getJSDocInfo",
        "private void visitNew ( NodeTraversal t, Node n ) { if ( n. isConstructor ( ) ) { Node param = n. getFirstChild ( ) ; JSType type = param. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info2 = n. getJSDocInfo ( ) ; if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info3 = n. getJSDocInfo ( ) ; if ( info3 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info4 = n. getJSDocInfo ( ) ; if ( info4 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo ( ) ; if ( info8 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info8 == null ) { info8 = getNativeType ( JSTypeNative. OBJECT",
        "private void visitNew ( NodeTraversal t, Node n ) { if ( n. isConstructor ( ) ) { Node param = n. getFirstChild ( ) ; JSType type = param. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info2 = n. getJSDocInfo ( ) ; if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info3 = n. getJSDocInfo ( ) ; if ( info3 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info4 = n. getJSDocInfo ( ) ; if ( info4 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo ( ) ; if ( info8 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info5 == null ) { info5 = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDoc",
        "private void visitNew ( NodeTraversal t, Node n ) { if ( n. isConstructor ( ) ) { Node param = n. getFirstChild ( ) ; JSType type = param. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info = n. getJSDocInfo ( ) ; if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info2 = n. getJSDocInfo ( ) ; if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } if ( info2 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info3 = n. getJSDocInfo ( ) ; if ( info3 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info4 = n. getJSDocInfo ( ) ; if ( info4 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info5 = n. getJSDocInfo ( ) ; if ( info5 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info6 = n. getJSDocInfo ( ) ; if ( info6 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo ( ) ; if ( info8 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info9 = n. getJSDocInfo ( ) ; if ( info9 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info7 = n. getJSDocInfo ( ) ; if ( info7 == null ) { info = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; } JSDocInfo info8 = n. getJSDocInfo",
        "private void visitNew ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }",
        "private void visitNew ( NodeTraversal t, Node n ) { Node param = n. getFirstChild ( ) ; if ( param == null ) { return ; } JSType type = param. getJSType ( ) ; if ( type == null ) { return ; } JSType paramType = type. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ) ; }"
      ]
    },
    "Closure_126_/src/com/google/javascript/jscomp/MinimizeExitPoints.java_141-142": {
      "loc": "141-142",
      "input": "void tryMinimizeExits(Node n, int exitType, String labelName) { if (matchingExitNode(n, exitType, labelName)) { NodeUtil.removeChild(n.getParent(), n); compiler.reportCodeChange(); return; } if (n.isIf()) { Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; } if (n.isTry()) { Node tryBlock = n.getFirstChild(); tryMinimizeExits(tryBlock, exitType, labelName); Node allCatchNodes = NodeUtil.getCatchBlock(n); if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); } if (NodeUtil.hasFinally(n)) { Node finallyBlock = n.getLastChild(); tryMinimizeExits(finallyBlock, exitType, labelName); } } if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); } if (!n.isBlock() || n.getLastChild() == null) { return; } for (Node c : n.children()) { if (c.isIf()) { Node ifTree = c; Node trueBlock, falseBlock; trueBlock = ifTree.getFirstChild().getNext(); falseBlock = trueBlock.getNext(); tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName); trueBlock = ifTree.getFirstChild().getNext(); falseBlock = trueBlock.getNext(); if (falseBlock != null) { tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName); } } if (c == n.getLastChild()) { break; } } for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) { tryMinimizeExits(c, exitType, labelName); if (c == n.getLastChild()) { break; } } }",
      "target": "void tryMinimizeExits(Node n, int exitType, String labelName) { if (matchingExitNode(n, exitType, labelName)) { NodeUtil.removeChild(n.getParent(), n); compiler.reportCodeChange(); return; } if (n.isIf()) { Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; } if (n.isTry()) { Node tryBlock = n.getFirstChild(); tryMinimizeExits(tryBlock, exitType, labelName); Node allCatchNodes = NodeUtil.getCatchBlock(n); if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); } } if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); } if (!n.isBlock() || n.getLastChild() == null) { return; } for (Node c : n.children()) { if (c.isIf()) { Node ifTree = c; Node trueBlock, falseBlock; trueBlock = ifTree.getFirstChild().getNext(); falseBlock = trueBlock.getNext(); tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName); trueBlock = ifTree.getFirstChild().getNext(); falseBlock = trueBlock.getNext(); if (falseBlock != null) { tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName); } } if (c == n.getLastChild()) { break; } } for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) { tryMinimizeExits(c, exitType, labelName); if (c == n.getLastChild()) { break; } } }",
      "function range": "106,3-201,3",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Closure_129_/src/com/google/javascript/jscomp/PrepareAst.java_166-167": {
      "loc": "166-167",
      "input": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild(); <mask> if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
      "target": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild(); while (first.isCast()) { first = first.getFirstChild(); } if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
      "function range": "158,5-177,5",
      "raw_output": [
        "@ Override public void visitCall ( CallNode node ) { super. visitCall ( node ) ; if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCall ( this ) ; } }",
        "@ Override public void visitCall ( CallNode node ) { super. visitCall ( node ) ; if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCall ( node ) ; } }",
        "public void visitCallNode ( CallNode node ) { if (! ( node instanceof CallCallNode ) ) { throw new IllegalArgumentException ( node. getClass ( ). getName ( ) + \" is not a call node\" ) ; } node. acceptCallNode ( this ) ; }",
        "public void visitCallNode ( CallNode node ) { if (! ( node instanceof CallCallNode ) ) { throw new IllegalArgumentException ( node. getClass ( ). getName ( ) + \" is not a call node\" ) ; } node. acceptCallNode ( node ) ; }",
        "@ Override public void visitCall ( CallNode node ) { super. visitCall ( node ) ; if (! ( node instanceof CallParamNode ) ) { return ; } CallParamNode param = ( CallParamNode ) node ; param. acceptCall ( this ) ; }",
        "@ Override public void visitCallNode ( CallNode node ) { super. visitCallNode ( node ) ; if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( this ) ; } }",
        "@ Override public void visitCallNode ( CallNode node ) { super. visitCallNode ( node ) ; for ( CallParam param : node. params ) { param. accept ( this ) ; } for ( CallParam param : node. param ) { param. accept ( this ) ; } }",
        "@ Override public void visitCallNode ( CallNode node ) { super. visitCallNode ( node ) ; if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( node ) ; } }",
        "@ Override public void visitCallNode ( CallNode node ) { super. visitCallNode ( node ) ; if (! ( node instanceof CallParamNode ) ) { return ; } CallParamNode callParamNode = ( CallParamNode ) node ; callParamNode. accept ( this ) ; }",
        "@ Override public void visitCallNode ( CallNode node ) { super. visitCallNode ( node ) ; if ( node. getParent ( )!= null ) { node. getParent ( ). visitCallNode ( node ) ; } }",
        "public void visitCallNode ( CallNode node ) { if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( node ) ; } else { node. acceptCallNode ( node ) ; } }",
        "public void visitCallNode ( CallNode node ) { if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( node ) ; } else { node. acceptCallNode ( this ) ; } }",
        "public void visitCallNode ( CallNode node ) { if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( node ) ; } else { callNode. acceptCallNode ( node ) ; } }",
        "public void visitCallNode ( CallNode node ) { if ( node. getParent ( )!= null ) { ( ( CallNode ) node. getParent ( ) ). visitCallNode ( node ) ; } }",
        "public void visitCallNode ( CallNode node ) { if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( node ) ; } else { callNode = node ; } }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; if (! calls. isEmpty ( ) ) { for ( Call call : calls ) { call. accept ( this ) ; } } }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; if (! calls. isEmpty ( ) ) { for ( Call call : calls ) { call. visitEnd ( ) ; } } }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; if (! calls. isEmpty ( ) ) { for ( Call call : calls ) { call. visitEnd ( ) ; } calls. clear ( ) ; } }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; if (! calls. isEmpty ( ) ) { for ( Call call : calls ) { call. accept ( this ) ; } calls. clear ( ) ; } }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; if (! calls. isEmpty ( ) ) { for ( Node n : calls ) { n. accept ( this ) ; } calls. clear ( ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public < R > R annotate ( Function <? super T, R > function ) { return function. apply ( this ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < R > R annotate ( Function <? super T,? extends R > function ) { return function. apply ( this ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < R > R annotate ( Function <? super T, R > function ) { R result = function. apply ( this ) ; return result ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < R > R annotate ( Function < T, R > function ) { return function. apply ( this ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < R > R annotate ( Function <? super T, R > fn ) { return fn. apply ( this ) ; }"
      ],
      "mid_translation": [
        "Annotate calls node.",
        "Annotate call nodes.",
        "Annotate call node.",
        "Annotate calls that have no direct children.",
        "Annotate calls."
      ],
      "output": [
        "private void annotateCalls ( CallNode node ) { super. visitCall ( node ) ; if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCall ( this ) ; } }",
        "private void annotateCalls ( CallNode node ) { super. visitCall ( node ) ; if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCall ( node ) ; } }",
        "private void annotateCalls ( CallNode node ) { if (! ( node instanceof CallCallNode ) ) { throw new IllegalArgumentException ( node. getClass ( ). getName ( ) + \" is not a call node\" ) ; } node. acceptCallNode ( this ) ; }",
        "private void annotateCalls ( CallNode node ) { if (! ( node instanceof CallCallNode ) ) { throw new IllegalArgumentException ( node. getClass ( ). getName ( ) + \" is not a call node\" ) ; } node. acceptCallNode ( node ) ; }",
        "private void annotateCalls ( CallNode node ) { super. visitCall ( node ) ; if (! ( node instanceof CallParamNode ) ) { return ; } CallParamNode param = ( CallParamNode ) node ; param. acceptCall ( this ) ; }",
        "private void annotateCalls ( CallNode node ) { super. visitCallNode ( node ) ; if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( this ) ; } }",
        "private void annotateCalls ( CallNode node ) { super. visitCallNode ( node ) ; for ( CallParam param : node. params ) { param. accept ( this ) ; } for ( CallParam param : node. param ) { param. accept ( this ) ; } }",
        "private void annotateCalls ( CallNode node ) { super. visitCallNode ( node ) ; if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( node ) ; } }",
        "private void annotateCalls ( CallNode node ) { super. visitCallNode ( node ) ; if (! ( node instanceof CallParamNode ) ) { return ; } CallParamNode callParamNode = ( CallParamNode ) node ; callParamNode. accept ( this ) ; }",
        "private void annotateCalls ( CallNode node ) { super. visitCallNode ( node ) ; if ( node. getParent ( )!= null ) { node. getParent ( ). visitCallNode ( node ) ; } }",
        "private void annotateCalls ( CallNode node ) { if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( node ) ; } else { node. acceptCallNode ( node ) ; } }",
        "private void annotateCalls ( CallNode node ) { if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( node ) ; } else { node. acceptCallNode ( this ) ; } }",
        "private void annotateCalls ( CallNode node ) { if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( node ) ; } else { callNode. acceptCallNode ( node ) ; } }",
        "private void annotateCalls ( CallNode node ) { if ( node. getParent ( )!= null ) { ( ( CallNode ) node. getParent ( ) ). visitCallNode ( node ) ; } }",
        "private void annotateCalls ( CallNode node ) { if ( node. getParent ( )!= null ) { node. getParent ( ). acceptCallNode ( node ) ; } else { callNode = node ; } }",
        "private void annotateCalls ( ) { super. visitEnd ( ) ; if (! calls. isEmpty ( ) ) { for ( Call call : calls ) { call. accept ( this ) ; } } }",
        "private void annotateCalls ( ) { super. visitEnd ( ) ; if (! calls. isEmpty ( ) ) { for ( Call call : calls ) { call. visitEnd ( ) ; } } }",
        "private void annotateCalls ( ) { super. visitEnd ( ) ; if (! calls. isEmpty ( ) ) { for ( Call call : calls ) { call. visitEnd ( ) ; } calls. clear ( ) ; } }",
        "private void annotateCalls ( ) { super. visitEnd ( ) ; if (! calls. isEmpty ( ) ) { for ( Call call : calls ) { call. accept ( this ) ; } calls. clear ( ) ; } }",
        "private void annotateCalls ( ) { super. visitEnd ( ) ; if (! calls. isEmpty ( ) ) { for ( Node n : calls ) { n. accept ( this ) ; } calls. clear ( ) ; } }",
        "private < R > R annotateCalls ( Function <? super T, R > function ) { return function. apply ( this ) ; }",
        "private < R > R annotateCalls ( Function <? super T,? extends R > function ) { return function. apply ( this ) ; }",
        "private < R > R annotateCalls ( Function <? super T, R > function ) { R result = function. apply ( this ) ; return result ; }",
        "private < R > R annotateCalls ( Function < T, R > function ) { return function. apply ( this ) ; }",
        "private < R > R annotateCalls ( Function <? super T, R > fn ) { return fn. apply ( this ) ; }"
      ]
    },
    "Closure_130_/src/com/google/javascript/jscomp/CollapseProperties.java_172-173": {
      "loc": "172-173",
      "input": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; } if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) { workList.addAll(name.props); } } }",
      "target": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; } if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) { workList.addAll(name.props); } } }",
      "function range": "161,3-197,3",
      "raw_output": [
        "private String inlineNamespace ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { return \"\" ; } StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < namespace. length ( ) ; i ++ ) { buf. append ( namespace. charAt ( i ) ) ; } buf. append ('' ) ; return buf. toString ( ) ; }",
        "private String inlineNamespace ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { return \"\" ; } StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < namespace. length ( ) ; i ++ ) { buf. append ( namespace. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "private String inlineNamespace ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { return \"\" ; } StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < namespace. length ( ) ; i ++ ) { buf. append ( namespace. charAt ( i ) ) ; buf. append ('' ) ; } return buf. toString ( ) ; }",
        "private String inlineNamespace ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { return null ; } StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < namespace. length ( ) ; i ++ ) { buf. append ( namespace. charAt ( i ) ) ; } buf. append ('' ) ; return buf. toString ( ) ; }",
        "private String inlineNamespace ( String namespace ) { if ( namespace == null || namespace. isEmpty ( ) ) { return \"\" ; } StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < namespace. length ( ) ; i ++ ) { buf. append ( namespace. charAt ( i ) ) ; } buf. append ('' ) ; return buf. toString ( ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. isEmpty ( ) ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace already exists: \" + namespace ) ; } namespaceMap. put ( namespace, namespace ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } namespaceMap. put ( namespace. trim ( ), namespace ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } namespaceMap. put ( namespace, namespace ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } namespaceMap. put ( namespace, this ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty.\" ) ; } namespaceMap. put ( namespace. trim ( ), namespace ) ; }",
        "public void addAlias ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( m_aliasMap == null ) { m_aliasMap = new HashMap ( ) ; } m_aliasMap. put ( namespace, namespace ) ; }",
        "public void addAlias ( String namespace ) { if ( namespace == null ) { throw new IllegalArgumentException ( \"namespace cannot be null\" ) ; } if ( m_alias == null ) { m_alias = new HashMap < String, String > ( ) ; } m_alias. put ( namespace, namespace ) ; }",
        "public void addAlias ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( m_alias == null ) { m_alias = new HashMap < String, String > ( ) ; } m_alias. put ( namespace, namespace ) ; }",
        "public void inlineNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } for ( int i = 0 ; i < aliases. length ; i ++ ) { aliases [ i ]. inlineNamespace ( namespace ) ; } }",
        "public void addAlias ( String namespace ) { if ( namespace == null ) { throw new IllegalArgumentException ( \"namespace cannot be null\" ) ; } if ( m_alias == null ) { m_alias = new HashMap < String, String > ( ) ; } m_alias. put ( namespace, m_alias ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if (! map. containsKey ( namespace ) ) { map. put ( namespace, new HashMap < String, String > ( ) ) ; } map. get ( namespace ). add ( namespace ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( m_namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace \" + namespace + \" already exists\" ) ; } m_namespaceMap. put ( namespace, namespace ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( m_namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace '\" + namespace + \"' already exists\" ) ; } m_namespaceMap. put ( namespace, namespace ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace \" + namespace + \" already exists\" ) ; } namespaceMap. put ( namespace, namespace ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if (! map. containsKey ( namespace ) ) { map. put ( namespace, new HashMap < String, String > ( ) ) ; } map. get ( namespace ). put ( namespace, namespace ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace \" + namespace + \" already exists\" ) ; } namespaceMap. put ( namespace, namespace ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace \" + namespace + \" already exists\" ) ; } namespaceMap. put ( namespace, this ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace '\" + namespace + \"' already exists\" ) ; } namespaceMap. put ( namespace, namespace ) ; }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if (! map. containsKey ( namespace ) ) { map. put ( namespace, new HashMap < String, String > ( ) ) ; } }",
        "public void addNamespace ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } namespaceMap. put ( namespace, this ) ; }"
      ],
      "mid_translation": [
        "inline aliases for the given namespace.",
        "Inline aliases for the given namespace.",
        "inline aliases in the given namespace.",
        "inline aliases for a given namespace.",
        "Inline aliases for a given namespace."
      ],
      "output": [
        "private String inlineAliases ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { return \"\" ; } StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < namespace. length ( ) ; i ++ ) { buf. append ( namespace. charAt ( i ) ) ; } buf. append ('' ) ; return buf. toString ( ) ; }",
        "private String inlineAliases ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { return \"\" ; } StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < namespace. length ( ) ; i ++ ) { buf. append ( namespace. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "private String inlineAliases ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { return \"\" ; } StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < namespace. length ( ) ; i ++ ) { buf. append ( namespace. charAt ( i ) ) ; buf. append ('' ) ; } return buf. toString ( ) ; }",
        "private String inlineAliases ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { return null ; } StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < namespace. length ( ) ; i ++ ) { buf. append ( namespace. charAt ( i ) ) ; } buf. append ('' ) ; return buf. toString ( ) ; }",
        "private String inlineAliases ( String namespace ) { if ( namespace == null || namespace. isEmpty ( ) ) { return \"\" ; } StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < namespace. length ( ) ; i ++ ) { buf. append ( namespace. charAt ( i ) ) ; } buf. append ('' ) ; return buf. toString ( ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. isEmpty ( ) ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace already exists: \" + namespace ) ; } namespaceMap. put ( namespace, namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } namespaceMap. put ( namespace. trim ( ), namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } namespaceMap. put ( namespace, namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } namespaceMap. put ( namespace, this ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty.\" ) ; } namespaceMap. put ( namespace. trim ( ), namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( m_aliasMap == null ) { m_aliasMap = new HashMap ( ) ; } m_aliasMap. put ( namespace, namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null ) { throw new IllegalArgumentException ( \"namespace cannot be null\" ) ; } if ( m_alias == null ) { m_alias = new HashMap < String, String > ( ) ; } m_alias. put ( namespace, namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( m_alias == null ) { m_alias = new HashMap < String, String > ( ) ; } m_alias. put ( namespace, namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } for ( int i = 0 ; i < aliases. length ; i ++ ) { aliases [ i ]. inlineNamespace ( namespace ) ; } }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null ) { throw new IllegalArgumentException ( \"namespace cannot be null\" ) ; } if ( m_alias == null ) { m_alias = new HashMap < String, String > ( ) ; } m_alias. put ( namespace, m_alias ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if (! map. containsKey ( namespace ) ) { map. put ( namespace, new HashMap < String, String > ( ) ) ; } map. get ( namespace ). add ( namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( m_namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace \" + namespace + \" already exists\" ) ; } m_namespaceMap. put ( namespace, namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( m_namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace '\" + namespace + \"' already exists\" ) ; } m_namespaceMap. put ( namespace, namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace \" + namespace + \" already exists\" ) ; } namespaceMap. put ( namespace, namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if (! map. containsKey ( namespace ) ) { map. put ( namespace, new HashMap < String, String > ( ) ) ; } map. get ( namespace ). put ( namespace, namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace \" + namespace + \" already exists\" ) ; } namespaceMap. put ( namespace, namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace \" + namespace + \" already exists\" ) ; } namespaceMap. put ( namespace, this ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if ( namespaceMap. containsKey ( namespace ) ) { throw new IllegalArgumentException ( \"Namespace '\" + namespace + \"' already exists\" ) ; } namespaceMap. put ( namespace, namespace ) ; }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } if (! map. containsKey ( namespace ) ) { map. put ( namespace, new HashMap < String, String > ( ) ) ; } }",
        "private void inlineAliases ( String namespace ) { if ( namespace == null || namespace. trim ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"namespace cannot be null or empty\" ) ; } namespaceMap. put ( namespace, this ) ; }"
      ]
    },
    "Closure_132_/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java_782-783": {
      "loc": "782-783",
      "input": "private Node tryMinimizeIf(Node n) { Node parent = n.getParent(); Node cond = n.getFirstChild(); if (NodeUtil.isLiteralValue(cond, true)) { return n; } Node thenBranch = cond.getNext(); Node elseBranch = thenBranch.getNext(); if (elseBranch == null) { if (isFoldableExpressBlock(thenBranch)) { Node expr = getBlockExpression(thenBranch); if (!late && isPropertyAssignmentInExpression(expr)) { return n; } if (cond.isNot()) { if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) && isLowerPrecedenceInExpression(expr.getFirstChild(), OR_PRECEDENCE)) { return n; } Node or = IR.or( cond.removeFirstChild(), expr.removeFirstChild()).srcref(n); Node newExpr = NodeUtil.newExpr(or); parent.replaceChild(n, newExpr); reportCodeChange(); return newExpr; } if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) && isLowerPrecedenceInExpression(expr.getFirstChild(), AND_PRECEDENCE)) { return n; } n.removeChild(cond); Node and = IR.and(cond, expr.removeFirstChild()).srcref(n); Node newExpr = NodeUtil.newExpr(and); parent.replaceChild(n, newExpr); reportCodeChange(); return newExpr; } else { if (NodeUtil.isStatementBlock(thenBranch) && thenBranch.hasOneChild()) { Node innerIf = thenBranch.getFirstChild(); if (innerIf.isIf()) { Node innerCond = innerIf.getFirstChild(); Node innerThenBranch = innerCond.getNext(); Node innerElseBranch = innerThenBranch.getNext(); if (innerElseBranch == null && !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) && isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) { n.detachChildren(); n.addChildToBack( IR.and( cond, innerCond.detachFromParent()) .srcref(cond)); n.addChildrenToBack(innerThenBranch.detachFromParent()); reportCodeChange(); return n; } } } } return n; } tryRemoveRepeatedStatements(n); if (cond.isNot() && !consumesDanglingElse(elseBranch)) { n.replaceChild(cond, cond.removeFirstChild()); n.removeChild(thenBranch); n.addChildToBack(thenBranch); reportCodeChange(); return n; } if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) { Node thenExpr = getBlockReturnExpression(thenBranch); Node elseExpr = getBlockReturnExpression(elseBranch); n.removeChild(cond); thenExpr.detachFromParent(); elseExpr.detachFromParent(); Node returnNode = IR.returnNode( IR.hook(cond, thenExpr, elseExpr) .srcref(n)); parent.replaceChild(n, returnNode); reportCodeChange(); return returnNode; } boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch); boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch); if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) { Node thenOp = getBlockExpression(thenBranch).getFirstChild(); Node elseOp = getBlockExpression(elseBranch).getFirstChild(); if (thenOp.getType() == elseOp.getType()) { if (NodeUtil.isAssignmentOp(thenOp)) { Node lhs = thenOp.getFirstChild(); if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) { n.removeChild(cond); Node assignName = thenOp.removeFirstChild(); Node thenExpr = thenOp.removeFirstChild(); Node elseExpr = elseOp.getLastChild(); elseOp.removeChild(elseExpr); Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n); Node assign = new Node(thenOp.getType(), assignName, hookNode) .srcref(thenOp); Node expr = NodeUtil.newExpr(assign); parent.replaceChild(n, expr); reportCodeChange(); return expr; } } } n.removeChild(cond); thenOp.detachFromParent(); elseOp.detachFromParent(); Node expr = IR.exprResult( IR.hook(cond, thenOp, elseOp).srcref(n)); parent.replaceChild(n, expr); reportCodeChange(); return expr; } boolean thenBranchIsVar = isVarBlock(thenBranch); boolean elseBranchIsVar = isVarBlock(elseBranch); if (thenBranchIsVar && elseBranchIsExpressionBlock && getBlockExpression(elseBranch).getFirstChild().isAssign()) { Node var = getBlockVar(thenBranch); Node elseAssign = getBlockExpression(elseBranch).getFirstChild(); Node name1 = var.getFirstChild(); Node maybeName2 = elseAssign.getFirstChild(); if (name1.hasChildren() && maybeName2.isName() && name1.getString().equals(maybeName2.getString())) { Node thenExpr = name1.removeChildren(); Node elseExpr = elseAssign.getLastChild().detachFromParent(); cond.detachFromParent(); Node hookNode = IR.hook(cond, thenExpr, elseExpr) .srcref(n); var.detachFromParent(); name1.addChildrenToBack(hookNode); parent.replaceChild(n, var); reportCodeChange(); return var; } } else if (elseBranchIsVar && thenBranchIsExpressionBlock && getBlockExpression(thenBranch).getFirstChild().isAssign()) { Node var = getBlockVar(elseBranch); Node thenAssign = getBlockExpression(thenBranch).getFirstChild(); Node maybeName1 = thenAssign.getFirstChild(); Node name2 = var.getFirstChild(); if (name2.hasChildren() && maybeName1.isName() && maybeName1.getString().equals(name2.getString())) { Node thenExpr = thenAssign.getLastChild().detachFromParent(); Node elseExpr = name2.removeChildren(); cond.detachFromParent(); Node hookNode = IR.hook(cond, thenExpr, elseExpr) .srcref(n); var.detachFromParent(); name2.addChildrenToBack(hookNode); parent.replaceChild(n, var); reportCodeChange(); return var; } } return n; }",
      "target": "private Node tryMinimizeIf(Node n) { Node parent = n.getParent(); Node cond = n.getFirstChild(); if (NodeUtil.isLiteralValue(cond, true)) { return n; } Node thenBranch = cond.getNext(); Node elseBranch = thenBranch.getNext(); if (elseBranch == null) { if (isFoldableExpressBlock(thenBranch)) { Node expr = getBlockExpression(thenBranch); if (!late && isPropertyAssignmentInExpression(expr)) { return n; } if (cond.isNot()) { if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) && isLowerPrecedenceInExpression(expr.getFirstChild(), OR_PRECEDENCE)) { return n; } Node or = IR.or( cond.removeFirstChild(), expr.removeFirstChild()).srcref(n); Node newExpr = NodeUtil.newExpr(or); parent.replaceChild(n, newExpr); reportCodeChange(); return newExpr; } if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) && isLowerPrecedenceInExpression(expr.getFirstChild(), AND_PRECEDENCE)) { return n; } n.removeChild(cond); Node and = IR.and(cond, expr.removeFirstChild()).srcref(n); Node newExpr = NodeUtil.newExpr(and); parent.replaceChild(n, newExpr); reportCodeChange(); return newExpr; } else { if (NodeUtil.isStatementBlock(thenBranch) && thenBranch.hasOneChild()) { Node innerIf = thenBranch.getFirstChild(); if (innerIf.isIf()) { Node innerCond = innerIf.getFirstChild(); Node innerThenBranch = innerCond.getNext(); Node innerElseBranch = innerThenBranch.getNext(); if (innerElseBranch == null && !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) && isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) { n.detachChildren(); n.addChildToBack( IR.and( cond, innerCond.detachFromParent()) .srcref(cond)); n.addChildrenToBack(innerThenBranch.detachFromParent()); reportCodeChange(); return n; } } } } return n; } tryRemoveRepeatedStatements(n); if (cond.isNot() && !consumesDanglingElse(elseBranch)) { n.replaceChild(cond, cond.removeFirstChild()); n.removeChild(thenBranch); n.addChildToBack(thenBranch); reportCodeChange(); return n; } if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) { Node thenExpr = getBlockReturnExpression(thenBranch); Node elseExpr = getBlockReturnExpression(elseBranch); n.removeChild(cond); thenExpr.detachFromParent(); elseExpr.detachFromParent(); Node returnNode = IR.returnNode( IR.hook(cond, thenExpr, elseExpr) .srcref(n)); parent.replaceChild(n, returnNode); reportCodeChange(); return returnNode; } boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch); boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch); if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) { Node thenOp = getBlockExpression(thenBranch).getFirstChild(); Node elseOp = getBlockExpression(elseBranch).getFirstChild(); if (thenOp.getType() == elseOp.getType()) { if (NodeUtil.isAssignmentOp(thenOp)) { Node lhs = thenOp.getFirstChild(); if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) && !mayEffectMutableState(lhs) && (!mayHaveSideEffects(cond) || (thenOp.isAssign() && thenOp.getFirstChild().isName()))) { n.removeChild(cond); Node assignName = thenOp.removeFirstChild(); Node thenExpr = thenOp.removeFirstChild(); Node elseExpr = elseOp.getLastChild(); elseOp.removeChild(elseExpr); Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n); Node assign = new Node(thenOp.getType(), assignName, hookNode) .srcref(thenOp); Node expr = NodeUtil.newExpr(assign); parent.replaceChild(n, expr); reportCodeChange(); return expr; } } } n.removeChild(cond); thenOp.detachFromParent(); elseOp.detachFromParent(); Node expr = IR.exprResult( IR.hook(cond, thenOp, elseOp).srcref(n)); parent.replaceChild(n, expr); reportCodeChange(); return expr; } boolean thenBranchIsVar = isVarBlock(thenBranch); boolean elseBranchIsVar = isVarBlock(elseBranch); if (thenBranchIsVar && elseBranchIsExpressionBlock && getBlockExpression(elseBranch).getFirstChild().isAssign()) { Node var = getBlockVar(thenBranch); Node elseAssign = getBlockExpression(elseBranch).getFirstChild(); Node name1 = var.getFirstChild(); Node maybeName2 = elseAssign.getFirstChild(); if (name1.hasChildren() && maybeName2.isName() && name1.getString().equals(maybeName2.getString())) { Node thenExpr = name1.removeChildren(); Node elseExpr = elseAssign.getLastChild().detachFromParent(); cond.detachFromParent(); Node hookNode = IR.hook(cond, thenExpr, elseExpr) .srcref(n); var.detachFromParent(); name1.addChildrenToBack(hookNode); parent.replaceChild(n, var); reportCodeChange(); return var; } } else if (elseBranchIsVar && thenBranchIsExpressionBlock && getBlockExpression(thenBranch).getFirstChild().isAssign()) { Node var = getBlockVar(elseBranch); Node thenAssign = getBlockExpression(thenBranch).getFirstChild(); Node maybeName1 = thenAssign.getFirstChild(); Node name2 = var.getFirstChild(); if (name2.hasChildren() && maybeName1.isName() && maybeName1.getString().equals(name2.getString())) { Node thenExpr = thenAssign.getLastChild().detachFromParent(); Node elseExpr = name2.removeChildren(); cond.detachFromParent(); Node hookNode = IR.hook(cond, thenExpr, elseExpr) .srcref(n); var.detachFromParent(); name2.addChildrenToBack(hookNode); parent.replaceChild(n, var); reportCodeChange(); return var; } } return n; }",
      "function range": "636,3-868,3",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Closure_133_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_2401-2402": {
      "loc": "2401-2402",
      "input": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine(); return result; }",
      "target": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine(); unreadToken = NO_UNREAD_TOKEN; return result; }",
      "function range": "2399,3-2402,3",
      "raw_output": [
        "public JSDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. getJSDocLine ( ) ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. getJSDocLine ( ) ; }",
        "public JSDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. getJSDocLine ( remainingJSDocLine. getStartPosition ( ) ) ; }",
        "public JSDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine ; }",
        "publicJSDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine!= null ) { return remainingJSDocLine ; } remainingJSDocLine = newJSDocLine ( ) ; return remainingJSDocLine ; }",
        "public String getRemainingJSDocLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < this. jsDocLines. size ( ) ; i ++ ) { sb. append ( this. jsDocLines. get ( i ). getRemainingJSDocLine ( ) ) ; } return sb. toString ( ) ; }",
        "public String getRemainingJSDocLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < jsDocLines. size ( ) ; i ++ ) { sb. append ( jsDocLines. get ( i ). getRemainingJSDocLine ( ) ) ; } return sb. toString ( ) ; }",
        "public String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < jsDocLines. size ( ) ; i ++ ) { buf. append ( jsDocLines. get ( i ). getRemainingJSDocLine ( ) ) ; } return buf. toString ( ) ; }",
        "public String getRemainingJSDocLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < jsDocLines. length ; i ++ ) { sb. append ( jsDocLines [ i ]. getRemainingJSDocLine ( ) ) ; } return sb. toString ( ) ; }",
        "public String getRemainingJSDocLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < this. jsDocLines. length ; i ++ ) { sb. append ( this. jsDocLines [ i ]. getRemainingJSDocLine ( ) ) ; } return sb. toString ( ) ; }",
        "public String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = buf. length ( ) - 1 ; i >= 0 ; i -- ) { buf. append ( buf. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "public String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < buf. length ( ) ; i ++ ) { buf. append ( buf. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "public String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = buf. length ( ) - 1 ; i >= 0 ; i -- ) { buf. append ( ( char ) buf. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "public String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ( ) ; i ++ ) { buf. append ( line. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "public String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = buf. length ( ) - 1 ; i >= 0 ; -- i ) { buf. append ( buf. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( lastJSDocLine!= null ) { return lastJSDocLine ; } lastJSDocLine = createJSDocLine ( ) ; if ( lastJSDocLine!= null ) { return lastJSDocLine ; } return null ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( lastJSDocLine!= null ) { return lastJSDocLine ; } lastJSDocLine = new JSDocLine ( lastJSDocLine. getLine ( ), lastJSDocLine. getColumn ( ) ) ; return lastJSDocLine ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( lastJSDocLine!= null ) { return lastJSDocLine ; } lastJSDocLine = createJSDocLine ( ) ; if ( lastJSDocLine!= null ) { return lastJSDocLine ; } else { return null ; } }",
        "publicJSDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { remainingJSDocLine = newJSDocLine ( ) ; } return remainingJSDocLine ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( lastJSDocLine!= null ) { return lastJSDocLine ; } lastJSDocLine = createJSDocLine ( ) ; if ( lastJSDocLine == null ) { return null ; } return lastJSDocLine ; }",
        "public String getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. substring ( 0, remainingJSDocLine. length ( ) - 1 ) ; }",
        "public String getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return \"\" ; } return remainingJSDocLine. substring ( 0, remainingJSDocLine. length ( ) - 1 ) ; }",
        "public String getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. substring ( remainingJSDocLine. lastIndexOf ('' ) + 1 ) ; }",
        "public String getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return \"\" ; } return remainingJSDocLine. substring ( remainingJSDocLine. lastIndexOf ('' ) + 1 ) ; }",
        "public String getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. substring ( remainingJSDocLine. indexOf ('' ) + 1 ) ; }"
      ],
      "mid_translation": [
        "Gets the remainingJSDocLine.",
        "Gets the remaining js doc line.",
        "Gets the remaining JSDoc line.",
        "Gets the remainingJSDocLine from the stream.",
        "Gets the remainingJSDoc line."
      ],
      "output": [
        "private JSDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. getJSDocLine ( ) ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. getJSDocLine ( ) ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. getJSDocLine ( remainingJSDocLine. getStartPosition ( ) ) ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine ; }",
        "private SDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine!= null ) { return remainingJSDocLine ; } remainingJSDocLine = newJSDocLine ( ) ; return remainingJSDocLine ; }",
        "private String getRemainingJSDocLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < this. jsDocLines. size ( ) ; i ++ ) { sb. append ( this. jsDocLines. get ( i ). getRemainingJSDocLine ( ) ) ; } return sb. toString ( ) ; }",
        "private String getRemainingJSDocLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < jsDocLines. size ( ) ; i ++ ) { sb. append ( jsDocLines. get ( i ). getRemainingJSDocLine ( ) ) ; } return sb. toString ( ) ; }",
        "private String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < jsDocLines. size ( ) ; i ++ ) { buf. append ( jsDocLines. get ( i ). getRemainingJSDocLine ( ) ) ; } return buf. toString ( ) ; }",
        "private String getRemainingJSDocLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < jsDocLines. length ; i ++ ) { sb. append ( jsDocLines [ i ]. getRemainingJSDocLine ( ) ) ; } return sb. toString ( ) ; }",
        "private String getRemainingJSDocLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < this. jsDocLines. length ; i ++ ) { sb. append ( this. jsDocLines [ i ]. getRemainingJSDocLine ( ) ) ; } return sb. toString ( ) ; }",
        "private String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = buf. length ( ) - 1 ; i >= 0 ; i -- ) { buf. append ( buf. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "private String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < buf. length ( ) ; i ++ ) { buf. append ( buf. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "private String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = buf. length ( ) - 1 ; i >= 0 ; i -- ) { buf. append ( ( char ) buf. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "private String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ( ) ; i ++ ) { buf. append ( line. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "private String getRemainingJSDocLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = buf. length ( ) - 1 ; i >= 0 ; -- i ) { buf. append ( buf. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( lastJSDocLine!= null ) { return lastJSDocLine ; } lastJSDocLine = createJSDocLine ( ) ; if ( lastJSDocLine!= null ) { return lastJSDocLine ; } return null ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( lastJSDocLine!= null ) { return lastJSDocLine ; } lastJSDocLine = new JSDocLine ( lastJSDocLine. getLine ( ), lastJSDocLine. getColumn ( ) ) ; return lastJSDocLine ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( lastJSDocLine!= null ) { return lastJSDocLine ; } lastJSDocLine = createJSDocLine ( ) ; if ( lastJSDocLine!= null ) { return lastJSDocLine ; } else { return null ; } }",
        "private SDocLine getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { remainingJSDocLine = newJSDocLine ( ) ; } return remainingJSDocLine ; }",
        "private JSDocLine getRemainingJSDocLine ( ) { if ( lastJSDocLine!= null ) { return lastJSDocLine ; } lastJSDocLine = createJSDocLine ( ) ; if ( lastJSDocLine == null ) { return null ; } return lastJSDocLine ; }",
        "private String getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. substring ( 0, remainingJSDocLine. length ( ) - 1 ) ; }",
        "private String getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return \"\" ; } return remainingJSDocLine. substring ( 0, remainingJSDocLine. length ( ) - 1 ) ; }",
        "private String getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. substring ( remainingJSDocLine. lastIndexOf ('' ) + 1 ) ; }",
        "private String getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return \"\" ; } return remainingJSDocLine. substring ( remainingJSDocLine. lastIndexOf ('' ) + 1 ) ; }",
        "private String getRemainingJSDocLine ( ) { if ( remainingJSDocLine == null ) { return null ; } return remainingJSDocLine. substring ( remainingJSDocLine. indexOf ('' ) + 1 ) ; }"
      ]
    },
    "Closure_146_/src/com/google/javascript/rhino/jstype/JSType.java_706-707": {
      "loc": "706-707",
      "input": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE: return new TypePair(null, null); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
      "target": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE: JSType noType = getNativeType(JSTypeNative.NO_TYPE); return new TypePair(noType, noType); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
      "function range": "696,3-715,3",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > TypePair < T, T > of ( Class < T > type ) { return new TypePair < T, T > ( type ) ; }",
        "public static Pair < JSType, JSType > of ( JSType type ) { if ( type == null ) { return new Pair <> ( null, null ) ; } return new Pair <> ( type, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > TypePair < T, T > of ( T type ) { return new TypePair < T, T > ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > TypePair < T, T > of ( Class < T > type ) { return new TypePair <> ( type, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > TypePair < T, T > of ( Class < T > type ) { return new TypePair < T, T > ( type, null ) ; }",
        "public static Pair < JSType, JSType > of ( JSType first, JSType second ) { return new Pair <> ( first, second ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > TypePair < T, T > of ( JSType first, JSType second ) { return new TypePair <> ( first, second ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T extends JSType > Pair < T, T > of ( T first, T second ) { return new Pair <> ( first, second ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > TypePair < T, T > of ( T first, T second ) { return new TypePair <> ( first, second ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Pair < T, JSType > of ( T first, T second ) { return new Pair <> ( first, second ) ; }",
        "public static TypePair < Type > of ( Type type1, Type type2 ) { return new TypePair <> ( type1, type2 ) ; }",
        "public static TypePair < Type > of ( Type type1, Type type2 ) { if ( type1 == type2 ) return new TypePair <> ( type1, type2 ) ; else return new TypePair <> ( type1, type2 ) ; }",
        "public static TypePair < Type > of ( Type type1, Type type2 ) { if ( type1 == type2 ) { return of ( type1 ) ; } else { return new TypePair <> ( type1, type2 ) ; } }",
        "public static TypePair < Type > of ( Type type1, Type type2 ) { return new TypePair < Type > ( type1, type2 ) ; }",
        "public static TypePair < Type, Type > of ( Type type ) { TypePair < Type, Type > pair = new TypePair <> ( type ) ; pair. first = type ; pair. second = type ; return pair ; }",
        "public static TypePair of ( Type type ) { if ( type instanceof ParameterizedType ) { return of ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } return null ; }",
        "public static TypePair of ( Type type ) { if ( type instanceof ParameterizedType ) { return of ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } return new TypePair <> ( type ) ; }",
        "public static TypePair of ( Type type ) { if ( type instanceof ParameterizedType ) { return of ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type \" + type ) ; }",
        "public static TypePair of ( Type type ) { if ( type instanceof ParameterizedType ) { return of ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } return new TypePair ( type ) ; }",
        "public static TypePair of ( Type type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return new TypePair ( parameterizedType. getRawType ( ), parameterizedType. getActualTypeArguments ( ) ) ; } else { return new TypePair ( type ) ; } }",
        "public static Pair < JSType, JSType > of ( JSType first, JSType second ) { return new Pair <> ( first, second ) ; }",
        "public static Pair < JSType, JSType > create ( JSType first, JSType second ) { return new Pair <> ( first, second ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > TypePair < T, T > of ( JSType first, JSType second ) { return new TypePair <> ( first, second ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T extends JSType > Pair < T, T > of ( T first, T second ) { return new Pair <> ( first, second ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > TypePair < T, T > of ( T first, T second ) { return new TypePair <> ( first, second ) ; }"
      ],
      "mid_translation": [
        "Creates a type pair for the given JSType that is different from the given type.",
        "Creates a type pair for the given JSType that is different from the given one.",
        "Creates a type pair for a given type that is different from a given type.",
        "Creates a type pair for a given type that is equivalent to a given type.",
        "Creates a type pair for the given JSType that is different from the one given."
      ],
      "output": [
        "public < T > TypePair < T, T > getTypesUnderInequality ( Class < T > type ) { return new TypePair < T, T > ( type ) ; }",
        "public Pair < JSType, JSType > getTypesUnderInequality ( JSType type ) { if ( type == null ) { return new Pair <> ( null, null ) ; } return new Pair <> ( type, type ) ; }",
        "public < T > TypePair < T, T > getTypesUnderInequality ( T type ) { return new TypePair < T, T > ( type ) ; }",
        "public < T > TypePair < T, T > getTypesUnderInequality ( Class < T > type ) { return new TypePair <> ( type, type ) ; }",
        "public < T > TypePair < T, T > getTypesUnderInequality ( Class < T > type ) { return new TypePair < T, T > ( type, null ) ; }",
        "public Pair < JSType, JSType > getTypesUnderInequality ( JSType first, JSType second ) { return new Pair <> ( first, second ) ; }",
        "public < T > TypePair < T, T > getTypesUnderInequality ( JSType first, JSType second ) { return new TypePair <> ( first, second ) ; }",
        "public < T extends JSType > Pair < T, T > getTypesUnderInequality ( T first, T second ) { return new Pair <> ( first, second ) ; }",
        "public < T > TypePair < T, T > getTypesUnderInequality ( T first, T second ) { return new TypePair <> ( first, second ) ; }",
        "public < T > Pair < T, JSType > getTypesUnderInequality ( T first, T second ) { return new Pair <> ( first, second ) ; }",
        "public TypePair < Type > getTypesUnderInequality ( Type type1, Type type2 ) { return new TypePair <> ( type1, type2 ) ; }",
        "public TypePair < Type > getTypesUnderInequality ( Type type1, Type type2 ) { if ( type1 == type2 ) return new TypePair <> ( type1, type2 ) ; else return new TypePair <> ( type1, type2 ) ; }",
        "public TypePair < Type > getTypesUnderInequality ( Type type1, Type type2 ) { if ( type1 == type2 ) { return of ( type1 ) ; } else { return new TypePair <> ( type1, type2 ) ; } }",
        "public TypePair < Type > getTypesUnderInequality ( Type type1, Type type2 ) { return new TypePair < Type > ( type1, type2 ) ; }",
        "public TypePair < Type, Type > getTypesUnderInequality ( Type type ) { TypePair < Type, Type > pair = new TypePair <> ( type ) ; pair. first = type ; pair. second = type ; return pair ; }",
        "public TypePair getTypesUnderInequality ( Type type ) { if ( type instanceof ParameterizedType ) { return of ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } return null ; }",
        "public TypePair getTypesUnderInequality ( Type type ) { if ( type instanceof ParameterizedType ) { return of ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } return new TypePair <> ( type ) ; }",
        "public TypePair getTypesUnderInequality ( Type type ) { if ( type instanceof ParameterizedType ) { return of ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( \"Unsupported type \" + type ) ; }",
        "public TypePair getTypesUnderInequality ( Type type ) { if ( type instanceof ParameterizedType ) { return of ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return of ( ( GenericArrayType ) type ) ; } return new TypePair ( type ) ; }",
        "public TypePair getTypesUnderInequality ( Type type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return new TypePair ( parameterizedType. getRawType ( ), parameterizedType. getActualTypeArguments ( ) ) ; } else { return new TypePair ( type ) ; } }",
        "public Pair < JSType, JSType > getTypesUnderInequality ( JSType first, JSType second ) { return new Pair <> ( first, second ) ; }",
        "public Pair < JSType, JSType > getTypesUnderInequality ( JSType first, JSType second ) { return new Pair <> ( first, second ) ; }",
        "public < T > TypePair < T, T > getTypesUnderInequality ( JSType first, JSType second ) { return new TypePair <> ( first, second ) ; }",
        "public < T extends JSType > Pair < T, T > getTypesUnderInequality ( T first, T second ) { return new Pair <> ( first, second ) ; }",
        "public < T > TypePair < T, T > getTypesUnderInequality ( T first, T second ) { return new TypePair <> ( first, second ) ; }"
      ]
    },
    "Closure_150_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1451-1452": {
      "loc": "1451-1452",
      "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; } attachLiteralTypes(n); switch (n.getType()) { case Token.FUNCTION: if (parent.getType() == Token.NAME) { return; } defineDeclaredFunction(n, parent); break; case Token.CATCH: defineCatch(n, parent); break; case Token.VAR: defineVar(n, parent); break; } }",
      "target": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; } super.visit(t, n, parent); }",
      "function range": "1443,5-1466,5",
      "raw_output": [
        "NodeTraversal ( NodeTraversal t, Node n ) { switch ( n. getToken ( ) ) { case CATCH : Node parent = n. getParent ( ) ; if ( parent instanceof NodeTraversal ) { NodeTraversal. traverse ( t, parent, n ) ; } else { NodeTraversal. traverse ( t, parent, n ) ; } break ; case CATCH : NodeTraversal. traverse ( t, parent, n ) ; break ; default : break ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { switch ( n. getToken ( ) ) { case CATCH : Node parent = n. getParent ( ) ; if ( parent instanceof NodeTraversal ) { NodeTraversal t = ( NodeTraversal ) parent ; NodeTraversal. traverse ( t, parent, n ) ; } else { NodeTraversal. traverse ( t, parent, n ) ; } break ; case CATCH : NodeTraversal. traverse ( t, parent, n ) ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { switch ( n. getToken ( ) ) { case CATCH : Node parent = n. getParent ( ) ; if ( parent instanceof NodeTraversal ) { NodeTraversal. traverse ( t, parent, n ) ; } else { NodeTraversal. traverse ( t, parent, n ) ; } break ; default : NodeTraversal. traverse ( t, parent, n ) ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { switch ( n. getToken ( ) ) { case CATCH : Node parent = n. getParent ( ) ; if ( parent instanceof NodeTraversal ) { NodeTraversal. traverse ( t, parent, n ) ; } else { NodeTraversal. traverse ( t, parent, n ) ; } break ; case CATCH : NodeTraversal. traverse ( t, parent, n ) ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { switch ( n. getToken ( ) ) { case CATCH : Node parent = n. getParent ( ) ; if ( parent instanceof NodeTraversal ) { NodeTraversal. traverse ( t, parent, n ) ; } else { NodeTraversal. traverse ( t, parent, n ) ; } break ; case CATCH : NodeTraversal. traverse ( t, parent, n ) ; break ; default : throw new AssertionError ( n ) ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { switch ( n. getToken ( ) ) { case CATCH : Node parent = n. getParent ( ) ; if ( parent instanceof NodeTraversal ) { NodeTraversal. traverse ( t, parent, n ) ; } else { NodeTraversal. traverse ( t, parent, n ) ; } break ; case CATCH : NodeTraversal. traverse ( t, parent, n ) ; break ; default : break ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { switch ( n. getToken ( ) ) { case CATCH : Node parent = n. getParent ( ) ; if ( parent instanceof NodeTraversal ) { NodeTraversal. traverse ( t, parent, n ) ; } else { NodeTraversal. traverse ( t, parent, n ) ; } break ; default : NodeTraversal. traverse ( t, parent, n ) ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { switch ( n. getToken ( ) ) { case CATCH : Node parent = n. getParent ( ) ; if ( parent instanceof NodeTraversal ) { NodeTraversal. traverse ( t, parent, n ) ; } else { NodeTraversal. traverse ( t, parent, n ) ; } break ; case CATCH : NodeTraversal. traverse ( t, parent, n ) ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { switch ( n. getToken ( ) ) { case CATCH : Node parent = n. getParent ( ) ; if ( parent instanceof NodeTraversal ) { NodeTraversal. traverse ( t, parent, n ) ; } else { NodeTraversal. traverse ( t, parent, n ) ; } break ; case CATCH : NodeTraversal. traverse ( t, parent, n ) ; break ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { switch ( n. getToken ( ) ) { case CATCH : Node parent = n. getParent ( ) ; if ( parent instanceof NodeTraversal ) { NodeTraversal. traverse ( t, parent, n ) ; } else { NodeTraversal. traverse ( t, parent, n ) ; } break ; default : NodeTraversal. traverse ( t, n ) ; } return n ; }",
        "public static Node traverse ( Node n ) { if ( n. isATCH ( ) ) { return traverse ( n. getNext ( ) ) ; } if ( n. isCatch ( ) ) { return traverse ( n. getNext ( ) ) ; } return n ; }",
        "public static Node traverse ( Node n ) { if ( n. isATCH ( ) ) { Node parent = n. getParent ( ) ; return traverse ( parent, n. getNext ( ) ) ; } else { return n ; } }",
        "public static Node traverse ( Node n ) { if ( n. isATCH ( ) ) { Node parent = n. getParent ( ) ; return traverse ( parent, n. getLastChild ( ) ) ; } else { return n ; } }",
        "public static Node traverse ( Node n ) { if ( n. isATCH ( ) ) { Node parent = n. getParent ( ) ; return traverse ( parent, n. getNext ( ) ) ; } return n ; }",
        "public static Node traverse ( Node n ) { if ( n. isATCH ( ) ) { return traverse ( n. getNext ( ) ) ; } if ( n. isCatch ( ) ) { return traverse ( n. getNext ( ) ) ; } return null ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; switch ( n. getToken ( ) ) { case CATCH : Node catchNode = n. getNext ( ) ; if ( catchNode!= null ) { NodeTraversal. traverse ( t, catchNode, n ) ; } break ; case CATCH : Node catchNode = n. getNext ( ) ; if ( catchNode!= null ) { NodeTraversal. traverse ( t, catchNode, n ) ; } break ; case FUNCTION : Node functionNode = n. getNext ( ) ; if ( functionNode!= null ) { NodeTraversal. traverse ( t, functionNode, n ) ; } break ; default : break ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; switch ( n. getToken ( ) ) { case CATCH : Node catchNode = n. getNext ( ) ; if ( catchNode!= null ) { NodeTraversal. traverse ( t, catchNode, n ) ; } break ; case FUNCTION : Node functionNode = n. getNext ( ) ; if ( functionNode!= null ) { NodeTraversal. traverse ( t, functionNode, n ) ; } break ; case CATCH : Node catchNode = n. getNext ( ) ; if ( catchNode!= null ) { NodeTraversal. traverse ( t, catchNode, n ) ; } break ; default : break ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; switch ( n. getToken ( ) ) { case CATCH : Node catchNode = n. getNext ( ) ; if ( catchNode!= null ) { NodeTraversal. traverse ( t, catchNode, n ) ; } break ; case FUNCTION : Node catchNode = n. getNext ( ) ; if ( catchNode!= null ) { NodeTraversal. traverse ( t, catchNode, n ) ; } break ; case CATCH : Node catchNode = n. getNext ( ) ; if ( catchNode!= null ) { NodeTraversal. traverse ( t, catchNode, n ) ; } break ; default : break ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; switch ( n. getToken ( ) ) { case CATCH : Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { NodeTraversal. traverse ( t, catchNode, n ) ; } break ; case FUNCTION : Node functionNode = n. getLastChild ( ) ; if ( functionNode!= null ) { NodeTraversal. traverse ( t, functionNode, n ) ; } break ; case CATCH : Node catchNode = n. getLastChild ( ) ; if ( catchNode!= null ) { NodeTraversal. traverse ( t, catchNode, n ) ; } break ; default : break ; } return n ; }",
        "NodeTraversal ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; switch ( n. getToken ( ) ) { case CATCH : Node catchNode = n. getNext ( ) ; if ( catchNode!= null ) { NodeTraversal. traverse ( t, catchNode, n ) ; } break ; case CATCH : Node catchNode = n. getNext ( ) ; if ( catchNode!= null ) { NodeTraversal. traverse ( t, catchNode, n ) ; } break ; case FUNCTION : Node functionNode = n. getNext ( ) ; if ( functionNode!= null ) { NodeTraversal. traverse ( t, functionNode, n ) ; } break ; default : throw new AssertionError ( n ) ; } return n ; }",
        "private void visitCatchOrCATCH ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isCatch ( ) ) { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } else { Node catchNode = n. getLastChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } }",
        "private void visitCatchOrCATCH ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isCatch ( ) ) { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } else { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } }",
        "private void visitCatchOrCATCH ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isCatch ( ) ) { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } else { Node catchNode = n. getNext ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } }",
        "private void visitCatchOrCATCH ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isCatch ( ) ) { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } else { Node catchNode = n. getLastChild ( ) ; if ( catchNode!= null ) { t. report ( n, catchNode ) ; } } }",
        "private void visitCatchOrCATCH ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isCatch ( ) ) { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } else { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, catchNode ) ; } } }"
      ],
      "mid_translation": [
        "Visits a CATCH or CATCH node. If the node is a CATCH node then a CATCH node is created. If the node is a CATCH node then a CATCH node is created.",
        "Visits a CATCH or CATCH node. If the given node is a CATCH node then a CATCH node is created. If the node is a CATCH node then a CATCH node is created.",
        "Visits a CATCH or CATCH node. If the given node is a CATCH node then a CATCH node is created. If the given node is a CATCH node then a CATCH node is created.",
        "Visits a CATCH or CATCH node. If the node is a CATCH node then a CATCH node is created. If the node is a function then a CATCH node is created.",
        "Visits a CATCH or CATCH node."
      ],
      "output": [
        "",
        "",
        "",
        "",
        "@Override public : throw new visit ( n ) ; } return n ; }",
        "",
        "",
        "",
        "",
        "",
        "@Override public Node visit ( Node n ) { if ( n. isATCH ( ) ) { return traverse ( n. getNext ( ) ) ; } if ( n. isCatch ( ) ) { return traverse ( n. getNext ( ) ) ; } return n ; }",
        "@Override public Node visit ( Node n ) { if ( n. isATCH ( ) ) { Node parent = n. getParent ( ) ; return traverse ( parent, n. getNext ( ) ) ; } else { return n ; } }",
        "@Override public Node visit ( Node n ) { if ( n. isATCH ( ) ) { Node parent = n. getParent ( ) ; return traverse ( parent, n. getLastChild ( ) ) ; } else { return n ; } }",
        "@Override public Node visit ( Node n ) { if ( n. isATCH ( ) ) { Node parent = n. getParent ( ) ; return traverse ( parent, n. getNext ( ) ) ; } return n ; }",
        "@Override public Node visit ( Node n ) { if ( n. isATCH ( ) ) { return traverse ( n. getNext ( ) ) ; } if ( n. isCatch ( ) ) { return traverse ( n. getNext ( ) ) ; } return null ; }",
        "",
        "",
        "",
        "",
        "@Override public : throw new visit ( n ) ; } return n ; }",
        "@Override public void visit ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isCatch ( ) ) { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } else { Node catchNode = n. getLastChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } }",
        "@Override public void visit ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isCatch ( ) ) { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } else { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } }",
        "@Override public void visit ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isCatch ( ) ) { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } else { Node catchNode = n. getNext ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } }",
        "@Override public void visit ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isCatch ( ) ) { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } else { Node catchNode = n. getLastChild ( ) ; if ( catchNode!= null ) { t. report ( n, catchNode ) ; } } }",
        "@Override public void visit ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isCatch ( ) ) { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, CATCH ) ; } } else { Node catchNode = n. getFirstChild ( ) ; if ( catchNode!= null ) { t. report ( n, catchNode ) ; } } }"
      ]
    },
    "Closure_152_/src/com/google/javascript/rhino/jstype/FunctionType.java_871-872": {
      "loc": "871-872",
      "input": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope); typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); boolean changed = false; ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder(); for (ObjectType iface : implementedInterfaces) { ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope); resolvedInterfaces.add(resolvedIface); changed |= (resolvedIface != iface); } if (changed) { implementedInterfaces = resolvedInterfaces.build(); } if (subTypes != null) { for (int i = 0; i < subTypes.size(); i++) { subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope)); } } return super.resolveInternal(t, scope); }",
      "target": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope); JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope); if (maybeTypeOfThis instanceof ObjectType) { typeOfThis = (ObjectType) maybeTypeOfThis; } boolean changed = false; ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder(); for (ObjectType iface : implementedInterfaces) { ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope); resolvedInterfaces.add(resolvedIface); changed |= (resolvedIface != iface); } if (changed) { implementedInterfaces = resolvedInterfaces.build(); } if (subTypes != null) { for (int i = 0; i < subTypes.size(); i++) { subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope)); } } return super.resolveInternal(t, scope); }",
      "function range": "861,3-892,3",
      "raw_output": [
        "static Class <? > resolveFunctionInterface ( Class <? > functionInterface ) { if ( functionInterface == null ) { return functionInterface ; } Class <? > [ ] interfaces = functionInterface. getInterfaces ( ) ; if ( interfaces. length == 0 ) { return functionInterface ; } for ( int i = 0 ; i < interfaces. length ; i ++ ) { interfaces [ i ] = resolveInterface ( interfaces [ i ] ) ; } return functionInterface ; }",
        "static Class <? > resolveFunctionInterface ( Class <? > functionInterface ) { if ( functionInterface == null ) { return functionInterface ; } Class <? > [ ] interfaces = functionInterface. getInterfaces ( ) ; if ( interfaces. length == 0 ) { return functionInterface ; } for ( int i = 0 ; i < interfaces. length ; i ++ ) { interfaces [ i ] = resolveFunctionInterface ( interfaces [ i ] ) ; } return functionInterface ; }",
        "static Class <? > resolveFunctionInterface ( Class <? > functionInterface ) { if ( functionInterface == null ) { return functionInterface ; } Class <? > [ ] interfaces = functionInterface. getInterfaces ( ) ; if ( interfaces!= null ) { for ( int i = 0 ; i < interfaces. length ; i ++ ) { Class <? > iface = interfaces [ i ] ; if ( iface. isAssignableFrom ( functionInterface ) ) { return iface ; } } } return functionInterface ; }",
        "static Class <? > resolveFunctionInterface ( Class <? > functionInterface ) { if ( functionInterface == null ) { return functionInterface ; } Class <? > [ ] interfaces = functionInterface. getInterfaces ( ) ; if ( interfaces!= null ) { for ( int i = 0 ; i < interfaces. length ; i ++ ) { interfaces [ i ] = resolveInterface ( interfaces [ i ] ) ; } } return functionInterface ; }",
        "static Class <? > resolveFunctionInterface ( Class <? > functionInterface ) { if ( functionInterface == null ) { return functionInterface ; } Class <? > [ ] interfaces = functionInterface. getInterfaces ( ) ; if ( interfaces!= null ) { for ( int i = 0 ; i < interfaces. length ; i ++ ) { Class <? > iface = interfaces [ i ] ; if ( iface. equals ( functionInterface ) ) { return iface ; } } } return functionInterface ; }",
        "public static Method resolveMethod ( Class <? > cls, String methodName, Class <? >... parameterTypes ) { return resolveMethod ( cls, methodName, parameterTypes, null ) ; }",
        "public static Method resolveMethod ( Class <? > functionClass, String methodName, Class <? > [ ] parameterTypes ) { return resolveMethod ( functionClass, methodName, parameterTypes, null ) ; }",
        "public static Method resolveMethod ( Class <? > cls, String methodName, Class <? > [ ] parameterTypes ) { return resolveMethod ( cls, methodName, parameterTypes, null ) ; }",
        "public static Method resolveMethod ( Class <? > cls, String methodName, Class <? > [ ] argTypes ) { return resolveMethod ( cls, methodName, argTypes, null ) ; }",
        "public static Method resolveMethod ( Class <? > cls, String methodName, Class <? >... argTypes ) { return resolveMethod ( cls, methodName, argTypes, null ) ; }",
        "public static Method resolveMethod ( Class <? > functionClass, String methodName, Class <? >... parameterTypes ) { return resolveMethod ( functionClass, methodName, parameterTypes, null ) ; }",
        "public static Method resolveMethod ( Class <? > cls, String methodName, Class <? >... parameterTypes ) { return resolveMethod ( cls, methodName, parameterTypes, null ) ; }",
        "public static Method resolveMethod ( Class <? > cls, String methodName, Class <? > [ ] parameterTypes ) { return resolveMethod ( cls, methodName, parameterTypes, null ) ; }",
        "public static Method resolveMethod ( Class <? > functionClass, String methodName, Class <? >... parameterTypes ) { return resolveMethod ( functionClass, methodName, parameterTypes, false ) ; }",
        "public static Method resolveMethod ( Class <? > cls, String methodName, Class <? >... argTypes ) { return resolveMethod ( cls, methodName, argTypes, null ) ; }",
        "private void resolvePrototype ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } else if ( parent. isFunction ( ) ) { JSType functionType = n. getJSType ( ) ; if ( functionType == null ) { functionType = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( functionType ) ; } n. setJSType ( functionType ) ; } }",
        "private void resolvePrototype ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } else if ( parent. isFunction ( ) ) { JSType functionType = parent. getJSType ( ) ; if ( functionType == null ) { functionType = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( functionType ) ; } n. setJSType ( functionType ) ; } }",
        "private void resolvePrototype ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } else if ( parent. isFunction ( ) ) { JSType type = parent. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } }",
        "private void resolvePrototype ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } else if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } }",
        "private void resolvePrototype ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } else if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { n. setJSType ( getNativeType ( JSTypeNative. OBJECT_TYPE ) ) ; } n. setJSType ( type ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > resolve ( Function <?,? > function ) { return ( Class < T > ) resolve ( function. getClass ( ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T resolve ( Class < T > returnType, String... arguments ) { return ( T ) resolve ( returnType, arguments ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > resolve ( Function <?,? > function ) { return ( Class < T > ) function. resolve ( ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > resolve ( Class < T > returnType ) { return ( Class < T > ) resolve ( returnType ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Class < T > resolve ( Function <?,? > function ) { return ( Class < T > ) function. getResolvedType ( ) ; }"
      ],
      "mid_translation": [
        "Resolve the function s prototype and implemented interfaces and return the resolved type.",
        "Resolves a function s resolve method into the given scope.",
        "Resolves a function s resolve method to the given scope.",
        "Resolve the function s prototype in the given scope.",
        "Resolves a function s resolve method and returns the resolved type."
      ],
      "output": [
        "Class <? > resolveInternal ( Class <? > functionInterface ) { if ( functionInterface == null ) { return functionInterface ; } Class <? > [ ] interfaces = functionInterface. getInterfaces ( ) ; if ( interfaces. length == 0 ) { return functionInterface ; } for ( int i = 0 ; i < interfaces. length ; i ++ ) { interfaces [ i ] = resolveInterface ( interfaces [ i ] ) ; } return functionInterface ; }",
        "Class <? > resolveInternal ( Class <? > functionInterface ) { if ( functionInterface == null ) { return functionInterface ; } Class <? > [ ] interfaces = functionInterface. getInterfaces ( ) ; if ( interfaces. length == 0 ) { return functionInterface ; } for ( int i = 0 ; i < interfaces. length ; i ++ ) { interfaces [ i ] = resolveFunctionInterface ( interfaces [ i ] ) ; } return functionInterface ; }",
        "Class <? > resolveInternal ( Class <? > functionInterface ) { if ( functionInterface == null ) { return functionInterface ; } Class <? > [ ] interfaces = functionInterface. getInterfaces ( ) ; if ( interfaces!= null ) { for ( int i = 0 ; i < interfaces. length ; i ++ ) { Class <? > iface = interfaces [ i ] ; if ( iface. isAssignableFrom ( functionInterface ) ) { return iface ; } } } return functionInterface ; }",
        "Class <? > resolveInternal ( Class <? > functionInterface ) { if ( functionInterface == null ) { return functionInterface ; } Class <? > [ ] interfaces = functionInterface. getInterfaces ( ) ; if ( interfaces!= null ) { for ( int i = 0 ; i < interfaces. length ; i ++ ) { interfaces [ i ] = resolveInterface ( interfaces [ i ] ) ; } } return functionInterface ; }",
        "Class <? > resolveInternal ( Class <? > functionInterface ) { if ( functionInterface == null ) { return functionInterface ; } Class <? > [ ] interfaces = functionInterface. getInterfaces ( ) ; if ( interfaces!= null ) { for ( int i = 0 ; i < interfaces. length ; i ++ ) { Class <? > iface = interfaces [ i ] ; if ( iface. equals ( functionInterface ) ) { return iface ; } } } return functionInterface ; }",
        "Method resolveInternal ( Class <? > cls, String methodName, Class <? >... parameterTypes ) { return resolveMethod ( cls, methodName, parameterTypes, null ) ; }",
        "Method resolveInternal ( Class <? > functionClass, String methodName, Class <? > [ ] parameterTypes ) { return resolveMethod ( functionClass, methodName, parameterTypes, null ) ; }",
        "Method resolveInternal ( Class <? > cls, String methodName, Class <? > [ ] parameterTypes ) { return resolveMethod ( cls, methodName, parameterTypes, null ) ; }",
        "Method resolveInternal ( Class <? > cls, String methodName, Class <? > [ ] argTypes ) { return resolveMethod ( cls, methodName, argTypes, null ) ; }",
        "Method resolveInternal ( Class <? > cls, String methodName, Class <? >... argTypes ) { return resolveMethod ( cls, methodName, argTypes, null ) ; }",
        "Method resolveInternal ( Class <? > functionClass, String methodName, Class <? >... parameterTypes ) { return resolveMethod ( functionClass, methodName, parameterTypes, null ) ; }",
        "Method resolveInternal ( Class <? > cls, String methodName, Class <? >... parameterTypes ) { return resolveMethod ( cls, methodName, parameterTypes, null ) ; }",
        "Method resolveInternal ( Class <? > cls, String methodName, Class <? > [ ] parameterTypes ) { return resolveMethod ( cls, methodName, parameterTypes, null ) ; }",
        "Method resolveInternal ( Class <? > functionClass, String methodName, Class <? >... parameterTypes ) { return resolveMethod ( functionClass, methodName, parameterTypes, false ) ; }",
        "Method resolveInternal ( Class <? > cls, String methodName, Class <? >... argTypes ) { return resolveMethod ( cls, methodName, argTypes, null ) ; }",
        "void resolveInternal ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } else if ( parent. isFunction ( ) ) { JSType functionType = n. getJSType ( ) ; if ( functionType == null ) { functionType = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( functionType ) ; } n. setJSType ( functionType ) ; } }",
        "void resolveInternal ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } else if ( parent. isFunction ( ) ) { JSType functionType = parent. getJSType ( ) ; if ( functionType == null ) { functionType = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( functionType ) ; } n. setJSType ( functionType ) ; } }",
        "void resolveInternal ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } else if ( parent. isFunction ( ) ) { JSType type = parent. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } }",
        "void resolveInternal ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } else if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } }",
        "void resolveInternal ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { type = getNativeType ( JSTypeNative. OBJECT_TYPE ) ; n. setJSType ( type ) ; } n. setJSType ( type ) ; } else if ( parent. isFunction ( ) ) { JSType type = n. getJSType ( ) ; if ( type == null ) { n. setJSType ( getNativeType ( JSTypeNative. OBJECT_TYPE ) ) ; } n. setJSType ( type ) ; } }",
        "< T > Class < T > resolveInternal ( Function <?,? > function ) { return ( Class < T > ) resolve ( function. getClass ( ) ) ; }",
        "< T > T resolveInternal ( Class < T > returnType, String... arguments ) { return ( T ) resolve ( returnType, arguments ) ; }",
        "< T > Class < T > resolveInternal ( Function <?,? > function ) { return ( Class < T > ) function. resolve ( ) ; }",
        "< T > Class < T > resolveInternal ( Class < T > returnType ) { return ( Class < T > ) resolve ( returnType ) ; }",
        "< T > Class < T > resolveInternal ( Function <?,? > function ) { return ( Class < T > ) function. getResolvedType ( ) ; }"
      ]
    },
    "Closure_159_/src/com/google/javascript/jscomp/InlineFunctions.java_777-781": {
      "loc": "777-781",
      "input": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed != null); if (node.getType() == Token.CALL) { Node child = node.getFirstChild(); if (child.getType() == Token.NAME) { changed.add(child.getString()); } } for (Node c = node.getFirstChild(); c != null; c = c.getNext()) { findCalledFunctions(c, changed); } }",
      "target": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed != null); if (node.getType() == Token.NAME) { if (isCandidateUsage(node)) { changed.add(node.getString()); } } for (Node c = node.getFirstChild(); c != null; c = c.getNext()) { findCalledFunctions(c, changed); } }",
      "function range": "773,3-787,3",
      "raw_output": [
        "List = new ArrayList ( ) ; for ( Node n = n. getFirstChild ( ) ; n!= null ; n = n. getNext ( ) ) { Node next = n. getNext ( ) ; if ( next == null ) { continue ; } if (! next. isFunction ( ) ) { continue ; } List < Node > children = next. getChildren ( ) ; if ( children. isEmpty ( ) ) { continue ; } for ( Node child : children ) { List < Node > children2 = child. getChildren ( ) ; if ( children2. isEmpty ( ) ) { continue ; } List < Node > children3 = child. getChildren ( ) ; if ( children3. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue",
        "List = new ArrayList ( ) ; for ( Node n = n. getFirstChild ( ) ; n!= null ; n = n. getNext ( ) ) { Node next = n. getNext ( ) ; if ( next == null ) { continue ; } if (! next. isFunction ( ) ) { continue ; } List < Node > children = next. getChildren ( ) ; if ( children == null ) { continue ; } for ( Node child = children. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { List < Node > children2 = child. getChildren ( ) ; if ( children2 == null ) { continue ; } List < Node > children3 = children2. get ( child ) ; if ( children3 == null ) { continue ; } List < Node > children4 = children3. get ( child ) ; if ( children4 == null ) { continue ; } List < Node > children5 = children4. get ( child ) ; if ( children5 == null ) { continue ; } List < Node > children6 = children5. get ( child ) ; if ( children6 == null ) { continue ; } List < Node > children7 = children6. get ( child ) ; if ( children7 == null ) { continue ; } List < Node > children8 = children8. get ( child ) ; if ( children8 == null ) { continue ; } List < Node > children81 = children81. get ( child ) ; if ( children81 == null ) { continue ; } List < Node > children82 = children82. get ( child ) ; if ( children82 == null ) { continue ; } List < Node > children83 = children82. get ( child ) ; if ( children83 == null ) { continue ; } List < Node > children84 = children83. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children8 = children84. get ( child ) ; if",
        "List = new ArrayList ( ) ; for ( Node n = n. getFirstChild ( ) ; n!= null ; n = n. getNext ( ) ) { Node next = n. getNext ( ) ; if ( next == null ) { continue ; } if (! next. isFunction ( ) ) { continue ; } List < Node > children = next. getChildren ( ) ; if ( children. isEmpty ( ) ) { continue ; } for ( Node child : children ) { List < Node > children2 = child. getChildren ( ) ; if ( children2. isEmpty ( ) ) { continue ; } List < Node > children3 = child. getChildren ( ) ; if ( children3. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children81 = child. getChildren ( ) ; if ( children81. isEmpty ( ) ) { continue ; } List < Node > children82 = child. getChildren ( ) ; if ( children82. isEmpty ( ) ) { continue ; } List < Node > children83 = child. getChildren ( ) ; if ( children83. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4.",
        "List = new ArrayList ( ) ; for ( Node n = n. getFirstChild ( ) ; n!= null ; n = n. getNext ( ) ) { Node next = n. getNext ( ) ; if ( next == null ) { continue ; } if (! next. isFunction ( ) ) { continue ; } List < Node > children = next. getChildren ( ) ; if ( children. isEmpty ( ) ) { continue ; } for ( Node child : children ) { List < Node > children2 = child. getChildren ( ) ; if ( children2. isEmpty ( ) ) { continue ; } List < Node > children3 = child. getChildren ( ) ; if ( children3. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children81 = child. getChildren ( ) ; if ( children81. isEmpty ( ) ) { continue ; } List < Node > children82 = child. getChildren ( ) ; if ( children82. isEmpty ( ) ) { continue ; } List < Node > children83 = child. getChildren ( ) ; if ( children83. isEmpty ( ) ) { continue ; } List < Node > children84 = child. getChildren ( ) ; if ( children8",
        "List = new ArrayList ( ) ; for ( Node n = n. getFirstChild ( ) ; n!= null ; n = n. getNext ( ) ) { Node next = n. getNext ( ) ; if ( next == null ) { continue ; } if (! next. isFunction ( ) ) { continue ; } List < Node > children = next. getChildren ( ) ; if ( children == null ) { continue ; } for ( Node child = children. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { List < Node > children2 = child. getChildren ( ) ; if ( children2 == null ) { continue ; } List < Node > children3 = children2. get ( child ) ; if ( children3 == null ) { continue ; } List < Node > children4 = children3. get ( child ) ; if ( children4 == null ) { continue ; } List < Node > children5 = children4. get ( child ) ; if ( children5 == null ) { continue ; } List < Node > children6 = children5. get ( child ) ; if ( children6 == null ) { continue ; } List < Node > children7 = children6. get ( child ) ; if ( children7 == null ) { continue ; } List < Node > children8 = children8. get ( child ) ; if ( children8 == null ) { continue ; } List < Node > children81 = children81. get ( child ) ; if ( children81 == null ) { continue ; } List < Node > children82 = children82. get ( child ) ; if ( children82 == null ) { continue ; } List < Node > children83 = children82. get ( child ) ; if ( children83 == null ) { continue ; } List < Node > children84 = children83. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ;",
        "private void find calledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { find calledFunctions ( child ) ; } } }",
        "private void find calledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { find calledFunctions ( child ) ; } } }",
        "private void find calledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { find calledFunctions ( child ) ; } }",
        "private void find calledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { find calledFunctions ( child ) ; } }",
        "private void find calledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { if ( child. getNodeType ( ) == Node. ELEMENT_NODE ) { find calledFunctions ( child ) ; } } }",
        "private void find calledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { find calledFunctions ( child ) ; } } }",
        "private void find calledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { find calledFunctions ( child ) ; } } }",
        "private void find calledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { find calledFunctions ( child ) ; } }",
        "private void find calledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { find calledFunctions ( child ) ; } }",
        "private void find calledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { if ( child. isFunction ( ) ) { find calledFunctions ( child ) ; } } }",
        "private boolean find calledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { if ( child. isFunction ( ) ) { find calledFunctions ( child ) ; return true ; } } } return false ; }",
        "private boolean find calledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { if ( child. isFunction ( ) ) { find calledFunctions ( child ) ; return true ; } } } return false ; }",
        "private boolean find calledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { if ( child. isFunction ( ) ) { found calledFunctions ( child ) ; return true ; } } } return false ; }",
        "private boolean find calledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { if ( find calledFunctions ( child ) ) { return true ; } } } return false ; }",
        "private boolean find calledFunctions ( Node n ) { if ( n. isFunction ( ) ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { if ( child. isFunction ( ) ) { find calledFunctions ( child ) ; return true ; } } } return false ; }",
        "private void find calledFunctions ( Node n ) { for ( int i = 0 ; i < n. getChildCount ( ) ; i ++ ) { Node child = n. getChild ( i ) ; if ( child. isFunction ( ) ) { calledFunctions. add ( child ) ; } } }",
        "private void find calledFunctions ( Node n ) { for ( int i = 0 ; i < n. getChildCount ( ) ; i ++ ) { Node child = n. getChild ( i ) ; if ( child. isFunction ( ) ) { calledFunctions. put ( child. getString ( ), child ) ; } } }",
        "private Node find calledFunctions ( Node n ) { for ( Node f = n. getFirstChild ( ) ; f!= null ; f = f. getNext ( ) ) { if ( f. isFunction ( ) ) { return f ; } } return null ; }",
        "private void find calledFunctions ( Node n ) { for ( int i = 0 ; i < n. getChildCount ( ) ; i ++ ) { Node child = n. getChild ( i ) ; if ( child. isFunction ( ) ) { Node call = child. getFirstChild ( ) ; if ( call. isCall ( ) ) { calledFunctions. add ( call ) ; } } } }",
        "private void find calledFunctions ( Node n ) { for ( int i = 0 ; i < n. getChildCount ( ) ; i ++ ) { Node child = n. getChild ( i ) ; if ( child. isCall ( ) ) { calledFunctions. add ( child ) ; } } }"
      ],
      "mid_translation": [
        "Given a node find all called functions.",
        "Recursively find called functions.",
        "Recursively finds called functions.",
        "Recursively searches for called functions.",
        "Given a node find the called functions."
      ],
      "output": [
        "private List = new findCalledFunctions ( ) ; for ( Node n = n. getFirstChild ( ) ; n!= null ; n = n. getNext ( ) ) { Node next = n. getNext ( ) ; if ( next == null ) { continue ; } if (! next. isFunction ( ) ) { continue ; } List < Node > children = next. getChildren ( ) ; if ( children. isEmpty ( ) ) { continue ; } for ( Node child : children ) { List < Node > children2 = child. getChildren ( ) ; if ( children2. isEmpty ( ) ) { continue ; } List < Node > children3 = child. getChildren ( ) ; if ( children3. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue",
        "private List = new findCalledFunctions ( ) ; for ( Node n = n. getFirstChild ( ) ; n!= null ; n = n. getNext ( ) ) { Node next = n. getNext ( ) ; if ( next == null ) { continue ; } if (! next. isFunction ( ) ) { continue ; } List < Node > children = next. getChildren ( ) ; if ( children == null ) { continue ; } for ( Node child = children. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { List < Node > children2 = child. getChildren ( ) ; if ( children2 == null ) { continue ; } List < Node > children3 = children2. get ( child ) ; if ( children3 == null ) { continue ; } List < Node > children4 = children3. get ( child ) ; if ( children4 == null ) { continue ; } List < Node > children5 = children4. get ( child ) ; if ( children5 == null ) { continue ; } List < Node > children6 = children5. get ( child ) ; if ( children6 == null ) { continue ; } List < Node > children7 = children6. get ( child ) ; if ( children7 == null ) { continue ; } List < Node > children8 = children8. get ( child ) ; if ( children8 == null ) { continue ; } List < Node > children81 = children81. get ( child ) ; if ( children81 == null ) { continue ; } List < Node > children82 = children82. get ( child ) ; if ( children82 == null ) { continue ; } List < Node > children83 = children82. get ( child ) ; if ( children83 == null ) { continue ; } List < Node > children84 = children83. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children8 = children84. get ( child ) ; if",
        "private List = new findCalledFunctions ( ) ; for ( Node n = n. getFirstChild ( ) ; n!= null ; n = n. getNext ( ) ) { Node next = n. getNext ( ) ; if ( next == null ) { continue ; } if (! next. isFunction ( ) ) { continue ; } List < Node > children = next. getChildren ( ) ; if ( children. isEmpty ( ) ) { continue ; } for ( Node child : children ) { List < Node > children2 = child. getChildren ( ) ; if ( children2. isEmpty ( ) ) { continue ; } List < Node > children3 = child. getChildren ( ) ; if ( children3. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children81 = child. getChildren ( ) ; if ( children81. isEmpty ( ) ) { continue ; } List < Node > children82 = child. getChildren ( ) ; if ( children82. isEmpty ( ) ) { continue ; } List < Node > children83 = child. getChildren ( ) ; if ( children83. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4.",
        "private List = new findCalledFunctions ( ) ; for ( Node n = n. getFirstChild ( ) ; n!= null ; n = n. getNext ( ) ) { Node next = n. getNext ( ) ; if ( next == null ) { continue ; } if (! next. isFunction ( ) ) { continue ; } List < Node > children = next. getChildren ( ) ; if ( children. isEmpty ( ) ) { continue ; } for ( Node child : children ) { List < Node > children2 = child. getChildren ( ) ; if ( children2. isEmpty ( ) ) { continue ; } List < Node > children3 = child. getChildren ( ) ; if ( children3. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children4 = child. getChildren ( ) ; if ( children4. isEmpty ( ) ) { continue ; } List < Node > children5 = child. getChildren ( ) ; if ( children5. isEmpty ( ) ) { continue ; } List < Node > children6 = child. getChildren ( ) ; if ( children6. isEmpty ( ) ) { continue ; } List < Node > children7 = child. getChildren ( ) ; if ( children7. isEmpty ( ) ) { continue ; } List < Node > children8 = child. getChildren ( ) ; if ( children8. isEmpty ( ) ) { continue ; } List < Node > children81 = child. getChildren ( ) ; if ( children81. isEmpty ( ) ) { continue ; } List < Node > children82 = child. getChildren ( ) ; if ( children82. isEmpty ( ) ) { continue ; } List < Node > children83 = child. getChildren ( ) ; if ( children83. isEmpty ( ) ) { continue ; } List < Node > children84 = child. getChildren ( ) ; if ( children8",
        "private List = new findCalledFunctions ( ) ; for ( Node n = n. getFirstChild ( ) ; n!= null ; n = n. getNext ( ) ) { Node next = n. getNext ( ) ; if ( next == null ) { continue ; } if (! next. isFunction ( ) ) { continue ; } List < Node > children = next. getChildren ( ) ; if ( children == null ) { continue ; } for ( Node child = children. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { List < Node > children2 = child. getChildren ( ) ; if ( children2 == null ) { continue ; } List < Node > children3 = children2. get ( child ) ; if ( children3 == null ) { continue ; } List < Node > children4 = children3. get ( child ) ; if ( children4 == null ) { continue ; } List < Node > children5 = children4. get ( child ) ; if ( children5 == null ) { continue ; } List < Node > children6 = children5. get ( child ) ; if ( children6 == null ) { continue ; } List < Node > children7 = children6. get ( child ) ; if ( children7 == null ) { continue ; } List < Node > children8 = children8. get ( child ) ; if ( children8 == null ) { continue ; } List < Node > children81 = children81. get ( child ) ; if ( children81 == null ) { continue ; } List < Node > children82 = children82. get ( child ) ; if ( children82 == null ) { continue ; } List < Node > children83 = children82. get ( child ) ; if ( children83 == null ) { continue ; } List < Node > children84 = children83. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ; if ( children84 == null ) { continue ; } List < Node > children84 = children84. get ( child ) ;",
        "private void find findCalledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { find calledFunctions ( child ) ; } } }",
        "private void find findCalledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { find calledFunctions ( child ) ; } } }",
        "private void find findCalledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { find calledFunctions ( child ) ; } }",
        "private void find findCalledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { find calledFunctions ( child ) ; } }",
        "private void find findCalledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { if ( child. getNodeType ( ) == Node. ELEMENT_NODE ) { find calledFunctions ( child ) ; } } }",
        "private void find findCalledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { find calledFunctions ( child ) ; } } }",
        "private void find findCalledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { find calledFunctions ( child ) ; } } }",
        "private void find findCalledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { find calledFunctions ( child ) ; } }",
        "private void find findCalledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { find calledFunctions ( child ) ; } }",
        "private void find findCalledFunctions ( Node node ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { if ( child. isFunction ( ) ) { find calledFunctions ( child ) ; } } }",
        "private boolean find findCalledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { if ( child. isFunction ( ) ) { find calledFunctions ( child ) ; return true ; } } } return false ; }",
        "private boolean find findCalledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNextSibling ( ) ) { if ( child. isFunction ( ) ) { find calledFunctions ( child ) ; return true ; } } } return false ; }",
        "private boolean find findCalledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { if ( child. isFunction ( ) ) { found calledFunctions ( child ) ; return true ; } } } return false ; }",
        "private boolean find findCalledFunctions ( Node node ) { if ( node. isFunction ( ) ) { for ( Node child = node. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { if ( find calledFunctions ( child ) ) { return true ; } } } return false ; }",
        "private boolean find findCalledFunctions ( Node n ) { if ( n. isFunction ( ) ) { for ( Node child = n. getFirstChild ( ) ; child!= null ; child = child. getNext ( ) ) { if ( child. isFunction ( ) ) { find calledFunctions ( child ) ; return true ; } } } return false ; }",
        "private void find findCalledFunctions ( Node n ) { for ( int i = 0 ; i < n. getChildCount ( ) ; i ++ ) { Node child = n. getChild ( i ) ; if ( child. isFunction ( ) ) { calledFunctions. add ( child ) ; } } }",
        "private void find findCalledFunctions ( Node n ) { for ( int i = 0 ; i < n. getChildCount ( ) ; i ++ ) { Node child = n. getChild ( i ) ; if ( child. isFunction ( ) ) { calledFunctions. put ( child. getString ( ), child ) ; } } }",
        "private Node find findCalledFunctions ( Node n ) { for ( Node f = n. getFirstChild ( ) ; f!= null ; f = f. getNext ( ) ) { if ( f. isFunction ( ) ) { return f ; } } return null ; }",
        "private void find findCalledFunctions ( Node n ) { for ( int i = 0 ; i < n. getChildCount ( ) ; i ++ ) { Node child = n. getChild ( i ) ; if ( child. isFunction ( ) ) { Node call = child. getFirstChild ( ) ; if ( call. isCall ( ) ) { calledFunctions. add ( call ) ; } } } }",
        "private void find findCalledFunctions ( Node n ) { for ( int i = 0 ; i < n. getChildCount ( ) ; i ++ ) { Node child = n. getChild ( i ) ; if ( child. isCall ( ) ) { calledFunctions. add ( child ) ; } } }"
      ]
    },
    "Closure_168_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1996-1997": {
      "loc": "1996-1997",
      "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild() != null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); } if (t.getScopeDepth() <= 2) { return; } if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var != null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope != ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var != null) { Scope ownerScope = var.getScope(); if (scope != ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()) .recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
      "target": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild() != null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); } if (t.getScopeDepth() <= 1) { return; } if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var != null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope != ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var != null) { Scope ownerScope = var.getScope(); if (scope != ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()) .recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
      "function range": "1987,5-2038,5",
      "raw_output": [
        "public void setFunctionName ( String name ) { if ( m_functionName == null ) { m_functionName = name ; } else { m_functionName. setFunctionName ( name ) ; } }",
        "public void setFunctionName ( String name ) { if ( m_functionName == null ) { m_functionName = name ; } else { m_functionName. set ( name ) ; } }",
        "public void setFunctionName ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setFunctionName ( name ) ; } }",
        "public void setFunctionName ( String name ) { if ( m_functionName!= null ) m_functionName. setFunctionName ( name ) ; else m_functionName = name ; }",
        "public void setFunctionName ( String name ) { if ( m_functionName == null ) m_functionName = name ; else m_functionName. set ( name ) ; }",
        "public void setFunctionName ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setFunctionName ( name ) ; } }",
        "public void setFunctionName ( String name ) { if ( m_functionName == null ) m_functionName = name ; else m_functionName. setFunctionName ( name ) ; }",
        "public void setFunctionName ( String name ) { if ( m_functionName == null ) { m_functionName = name ; } else { m_functionName. set ( name ) ; } }",
        "public void setFunctionName ( String name ) { if ( m_functionName == null ) m_functionName = name ; else { m_functionName. setFunctionName ( name ) ; } }",
        "public void setFunctionName ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. append ( name ) ; } }",
        "private void visitReturn ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { return ; } JSType returnType = n. getJSType ( ) ; if ( returnType == null ) { return ; } JSType returnTypeType = returnType. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). to",
        "private void visitReturn ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { return ; } JSType returnType = n. getJSType ( ) ; if ( returnType == null ) { return ; } JSType returnTypeType = returnType. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybe",
        "private void visitReturn ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { return ; } JSType returnType = n. getJSType ( ) ; if ( returnType == null ) { return ; } JSType returnTypeType = returnType. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ). toMaybe",
        "private void visitReturn ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { return ; } JSType returnType = n. getJSType ( ) ; if ( returnType == null ) { return ; } JSType returnTypeType = returnType. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybe",
        "private void visitReturn ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { return ; } JSType returnType = n. getJSType ( ) ; if ( returnType == null ) { return ; } JSType returnTypeType = returnType. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybe",
        "public boolean containsFunction ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, name ) ; return false ; }",
        "public void setFunctionName ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setFunctionName ( name ) ; } }",
        "public boolean containsFunction ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, name ) ; return true ; }",
        "public boolean containsFunction ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return false ; } functionMap. put ( name, name ) ; return true ; }",
        "public boolean containsFunction ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, this ) ; return false ; }",
        "public void setFunctionName ( String name ) { if ( m_functionName!= null ) m_functionName. setFunctionName ( name ) ; else m_functionName = name ; }",
        "public void setFunctionName ( String name ) { if ( m_functionName == null ) { m_functionName = name ; } else { m_functionName. setFunctionName ( name ) ; } }",
        "public void setFunctionName ( String name ) { if ( m_functionName!= null ) { m_functionName. setFunctionName ( name ) ; } else { m_functionName = name ; } }",
        "public void setFunctionName ( String name ) { if ( m_functionName == null ) { m_functionName = name ; } else { m_functionName. set ( name ) ; } }",
        "public void setFunctionName ( String name ) { if ( m_functionName!= null ) m_functionName. setFunctionName ( name ) ; else m_functionName = null ; }"
      ],
      "mid_translation": [
        "Record the name of a function in the global scope.",
        "Record the name of the function in the global scope.",
        "Visits a return node.",
        "Records the name of a function in the global scope.",
        "Record the name of a function in the current scope."
      ],
      "output": [
        "@Override public void visit ( String name ) { if ( m_functionName == null ) { m_functionName = name ; } else { m_functionName. setFunctionName ( name ) ; } }",
        "@Override public void visit ( String name ) { if ( m_functionName == null ) { m_functionName = name ; } else { m_functionName. set ( name ) ; } }",
        "@Override public void visit ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setFunctionName ( name ) ; } }",
        "@Override public void visit ( String name ) { if ( m_functionName!= null ) m_functionName. setFunctionName ( name ) ; else m_functionName = name ; }",
        "@Override public void visit ( String name ) { if ( m_functionName == null ) m_functionName = name ; else m_functionName. set ( name ) ; }",
        "@Override public void visit ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setFunctionName ( name ) ; } }",
        "@Override public void visit ( String name ) { if ( m_functionName == null ) m_functionName = name ; else m_functionName. setFunctionName ( name ) ; }",
        "@Override public void visit ( String name ) { if ( m_functionName == null ) { m_functionName = name ; } else { m_functionName. set ( name ) ; } }",
        "@Override public void visit ( String name ) { if ( m_functionName == null ) m_functionName = name ; else { m_functionName. setFunctionName ( name ) ; } }",
        "@Override public void visit ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. append ( name ) ; } }",
        "@Override public void visit ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { return ; } JSType returnType = n. getJSType ( ) ; if ( returnType == null ) { return ; } JSType returnTypeType = returnType. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). to",
        "@Override public void visit ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { return ; } JSType returnType = n. getJSType ( ) ; if ( returnType == null ) { return ; } JSType returnTypeType = returnType. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybe",
        "@Override public void visit ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { return ; } JSType returnType = n. getJSType ( ) ; if ( returnType == null ) { return ; } JSType returnTypeType = returnType. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ). toMaybe",
        "@Override public void visit ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { return ; } JSType returnType = n. getJSType ( ) ; if ( returnType == null ) { return ; } JSType returnTypeType = returnType. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybe",
        "@Override public void visit ( NodeTraversal t, Node n ) { Node parent = n. getParent ( ) ; if ( parent == null ) { return ; } JSType returnType = n. getJSType ( ) ; if ( returnType == null ) { return ; } JSType returnTypeType = returnType. toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybeObjectType ( ). toMaybe",
        "@Override public boolean visit ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, name ) ; return false ; }",
        "@Override public void visit ( String name ) { if ( functionName == null ) { functionName = name ; } else { functionName. setFunctionName ( name ) ; } }",
        "@Override public boolean visit ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, name ) ; return true ; }",
        "@Override public boolean visit ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return false ; } functionMap. put ( name, name ) ; return true ; }",
        "@Override public boolean visit ( String name ) { if ( name == null || name. isEmpty ( ) ) { return false ; } if ( functionMap. containsKey ( name ) ) { return true ; } functionMap. put ( name, this ) ; return false ; }",
        "@Override public void visit ( String name ) { if ( m_functionName!= null ) m_functionName. setFunctionName ( name ) ; else m_functionName = name ; }",
        "@Override public void visit ( String name ) { if ( m_functionName == null ) { m_functionName = name ; } else { m_functionName. setFunctionName ( name ) ; } }",
        "@Override public void visit ( String name ) { if ( m_functionName!= null ) { m_functionName. setFunctionName ( name ) ; } else { m_functionName = name ; } }",
        "@Override public void visit ( String name ) { if ( m_functionName == null ) { m_functionName = name ; } else { m_functionName. set ( name ) ; } }",
        "@Override public void visit ( String name ) { if ( m_functionName!= null ) m_functionName. setFunctionName ( name ) ; else m_functionName = null ; }"
      ]
    },
    "Codec_2_/src/java/org/apache/commons/codec/binary/Base64.java_446-447": {
      "loc": "446-447",
      "input": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; } if (lineLength > 0) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
      "target": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
      "function range": "414,5-473,5",
      "raw_output": [
        "public static byte [ ] encode ( byte [ ] input ) { if ( input == null ) { return null ; } try { ByteArrayOutputStream baos = new ByteArrayOutputStream ( input. length ) ; encode ( input, baos ) ; return baos. toByteArray ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "public static byte [ ] encode ( byte [ ] value ) { if ( value == null ) { return null ; } byte [ ] encoded = new byte [ value. length ] ; System. arraycopy ( value, 0, encoded, 0, value. length ) ; return encoded ; }",
        "public static byte [ ] encode ( byte [ ] value ) { if ( value == null ) { return null ; } try { ByteArrayOutputStream baos = new ByteArrayOutputStream ( value. length ) ; encode ( value, baos ) ; return baos. toByteArray ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "public static byte [ ] encode ( byte [ ] input ) { if ( input == null ) { return null ; } try { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; encode ( input, baos ) ; return baos. toByteArray ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "public static byte [ ] encode ( byte [ ] value ) { if ( value == null ) { return null ; } ByteArrayOutputStream baos = new ByteArrayOutputStream ( value. length ) ; encode ( value, baos ) ; return baos. toByteArray ( ) ; }",
        "public void put ( byte [ ] b, int off, int len ) { if ( off < 0 || len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid position: \" + off ) ; } if ( len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid length: \" + len ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len ) ; } System. arraycopy ( b, off, buf, 0, len ) ; }",
        "public void put ( byte [ ] b, int off, int len ) { if ( off < 0 || len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid position: \" + off ) ; } if ( len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid length: \" + len ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len + len ) ; } System. arraycopy ( b, off, buf, 0, len ) ; }",
        "public void put ( byte [ ] b, int off, int len ) { if ( off < 0 || len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid position: \" + off ) ; } if ( len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid length: \" + len ) ; } for ( int i = 0 ; i < len ; i ++ ) { put ( b [ off + i ] ) ; } }",
        "public void put ( byte [ ] b, int off, int len ) { if ( off < 0 || len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid position: \" + off ) ; } if ( len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid length: \" + len ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len + len ) ; } System. arraycopy ( b, off, buf, 0, len ) ; buf [ len ] = b ; }",
        "public void put ( byte [ ] b, int off, int len ) { if ( off < 0 || len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid position: \" + off ) ; } if ( len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid length: \" + len ) ; } System. arraycopy ( b, off, _buffer, _offset, len ) ; _offset += len ; }",
        "public void put ( byte [ ] b, int off, int len ) { if ( b == null ) { throw new NullPointerException ( ) ; } if ( off < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, Math. max ( len, buf. length ) ) ; } System. arraycopy ( b, off, buf, 0, len ) ; }",
        "public void put ( byte [ ] b, int off, int len ) { if ( b == null ) { throw new NullPointerException ( ) ; } if ( off < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len ) ; } System. arraycopy ( b, off, buf, 0, len ) ; }",
        "public void put ( byte [ ] b, int off, int len ) { if ( b == null ) { throw new NullPointerException ( ) ; } if ( off < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len ) ; } System. arraycopy ( b, off, buf, 0, len ) ; buf [ len ] = b ; }",
        "public void put ( byte [ ] b, int off, int len ) { if ( b == null ) { throw new NullPointerException ( ) ; } if ( off < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len ) ; } System. arraycopy ( b, off, buf, len, buf. length ) ; }",
        "public void put ( byte [ ] b, int off, int len ) { if ( b == null ) { throw new NullPointerException ( ) ; } if ( off < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, Math. max ( len, buf. length ) ) ; } System. arraycopy ( b, off, buf, len, buf. length ) ; }",
        "public static IoBuffer encode ( IoBuffer in, byte [ ] b, int off, int len ) { return IoBuffer. wrap ( in, b, off, len ) ; }",
        "public static void encode ( ByteBuffer buffer, byte [ ] value, int offset, int length ) { buffer. position ( offset ) ; buffer. put ( value ) ; buffer. position ( offset + length ) ; }",
        "public static void encode ( byte [ ] buffer, int offset, int length ) { for ( int i = offset ; i < offset + length ; i ++ ) { buffer [ i ] = ( byte ) ( length & 0xFF ) ; } }",
        "public static IoBuffer encode ( IoBuffer in, byte [ ] b, int off, int len ) { return IoBuffer. allocate ( len ). put ( b, off, len ) ; }",
        "public static void encode ( ByteBuffer buffer, byte [ ] data, int offset, int length ) { buffer. position ( offset ) ; buffer. put ( data ) ; buffer. position ( offset + length ) ; }",
        "public void copyTo ( byte [ ] buf, int off, int len ) { System. arraycopy ( buf, off, buf, off + len, len ) ; }",
        "public void copyTo ( byte [ ] buffer, int offset, int length ) { System. arraycopy ( buffer, offset, data, 0, length ) ; }",
        "public void copyTo ( byte [ ] buffer, int offset, int length ) { System. arraycopy ( buffer, offset, data, offset, length ) ; }",
        "public void copyTo ( byte [ ] buffer, int offset, int length ) { System. arraycopy ( buffer, offset, buffer, offset, length ) ; }",
        "public void copyTo ( byte [ ] buffer, int offset, int length ) { System. arraycopy ( buffer, offset, buffer, offset + length, length ) ; }"
      ],
      "mid_translation": [
        "Encode byte array.",
        "Encodes bytes into the buffer.",
        "Encodes bytes into the input buffer.",
        "Encodes bytes into the given buffer.",
        "Copies data into the buffer."
      ],
      "output": [
        "byte [ ] encode ( byte [ ] input ) { if ( input == null ) { return null ; } try { ByteArrayOutputStream baos = new ByteArrayOutputStream ( input. length ) ; encode ( input, baos ) ; return baos. toByteArray ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "byte [ ] encode ( byte [ ] value ) { if ( value == null ) { return null ; } byte [ ] encoded = new byte [ value. length ] ; System. arraycopy ( value, 0, encoded, 0, value. length ) ; return encoded ; }",
        "byte [ ] encode ( byte [ ] value ) { if ( value == null ) { return null ; } try { ByteArrayOutputStream baos = new ByteArrayOutputStream ( value. length ) ; encode ( value, baos ) ; return baos. toByteArray ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "byte [ ] encode ( byte [ ] input ) { if ( input == null ) { return null ; } try { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; encode ( input, baos ) ; return baos. toByteArray ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "byte [ ] encode ( byte [ ] value ) { if ( value == null ) { return null ; } ByteArrayOutputStream baos = new ByteArrayOutputStream ( value. length ) ; encode ( value, baos ) ; return baos. toByteArray ( ) ; }",
        "void encode ( byte [ ] b, int off, int len ) { if ( off < 0 || len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid position: \" + off ) ; } if ( len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid length: \" + len ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len ) ; } System. arraycopy ( b, off, buf, 0, len ) ; }",
        "void encode ( byte [ ] b, int off, int len ) { if ( off < 0 || len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid position: \" + off ) ; } if ( len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid length: \" + len ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len + len ) ; } System. arraycopy ( b, off, buf, 0, len ) ; }",
        "void encode ( byte [ ] b, int off, int len ) { if ( off < 0 || len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid position: \" + off ) ; } if ( len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid length: \" + len ) ; } for ( int i = 0 ; i < len ; i ++ ) { put ( b [ off + i ] ) ; } }",
        "void encode ( byte [ ] b, int off, int len ) { if ( off < 0 || len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid position: \" + off ) ; } if ( len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid length: \" + len ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len + len ) ; } System. arraycopy ( b, off, buf, 0, len ) ; buf [ len ] = b ; }",
        "void encode ( byte [ ] b, int off, int len ) { if ( off < 0 || len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid position: \" + off ) ; } if ( len < 0 || len > b. length ) { throw new IllegalArgumentException ( \"Invalid length: \" + len ) ; } System. arraycopy ( b, off, _buffer, _offset, len ) ; _offset += len ; }",
        "void encode ( byte [ ] b, int off, int len ) { if ( b == null ) { throw new NullPointerException ( ) ; } if ( off < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, Math. max ( len, buf. length ) ) ; } System. arraycopy ( b, off, buf, 0, len ) ; }",
        "void encode ( byte [ ] b, int off, int len ) { if ( b == null ) { throw new NullPointerException ( ) ; } if ( off < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len ) ; } System. arraycopy ( b, off, buf, 0, len ) ; }",
        "void encode ( byte [ ] b, int off, int len ) { if ( b == null ) { throw new NullPointerException ( ) ; } if ( off < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len ) ; } System. arraycopy ( b, off, buf, 0, len ) ; buf [ len ] = b ; }",
        "void encode ( byte [ ] b, int off, int len ) { if ( b == null ) { throw new NullPointerException ( ) ; } if ( off < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, len ) ; } System. arraycopy ( b, off, buf, len, buf. length ) ; }",
        "void encode ( byte [ ] b, int off, int len ) { if ( b == null ) { throw new NullPointerException ( ) ; } if ( off < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len > buf. length ) { buf = Arrays. copyOf ( buf, Math. max ( len, buf. length ) ) ; } System. arraycopy ( b, off, buf, len, buf. length ) ; }",
        "IoBuffer encode ( IoBuffer in, byte [ ] b, int off, int len ) { return IoBuffer. wrap ( in, b, off, len ) ; }",
        "void encode ( ByteBuffer buffer, byte [ ] value, int offset, int length ) { buffer. position ( offset ) ; buffer. put ( value ) ; buffer. position ( offset + length ) ; }",
        "void encode ( byte [ ] buffer, int offset, int length ) { for ( int i = offset ; i < offset + length ; i ++ ) { buffer [ i ] = ( byte ) ( length & 0xFF ) ; } }",
        "IoBuffer encode ( IoBuffer in, byte [ ] b, int off, int len ) { return IoBuffer. allocate ( len ). put ( b, off, len ) ; }",
        "void encode ( ByteBuffer buffer, byte [ ] data, int offset, int length ) { buffer. position ( offset ) ; buffer. put ( data ) ; buffer. position ( offset + length ) ; }",
        "void encode ( byte [ ] buf, int off, int len ) { System. arraycopy ( buf, off, buf, off + len, len ) ; }",
        "void encode ( byte [ ] buffer, int offset, int length ) { System. arraycopy ( buffer, offset, data, 0, length ) ; }",
        "void encode ( byte [ ] buffer, int offset, int length ) { System. arraycopy ( buffer, offset, data, offset, length ) ; }",
        "void encode ( byte [ ] buffer, int offset, int length ) { System. arraycopy ( buffer, offset, buffer, offset, length ) ; }",
        "void encode ( byte [ ] buffer, int offset, int length ) { System. arraycopy ( buffer, offset, buffer, offset + length, length ) ; }"
      ]
    },
    "Codec_3_/src/java/org/apache/commons/codec/language/DoubleMetaphone.java_455-456": {
      "loc": "455-456",
      "input": "private int handleG(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) { if (charAt(value, index + 1) == 'H') { index = handleGH(value, result, index); } else if (charAt(value, index + 1) == 'N') { if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) { result.append(\"KN\", \"N\"); } else if (!contains(value, index + 2, 2, \"EY\") && charAt(value, index + 1) != 'Y' && !slavoGermanic) { result.append(\"N\", \"KN\"); } else { result.append(\"KN\"); } index = index + 2; } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) { result.append(\"KL\", \"L\"); index += 2; } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) { result.append('K', 'J'); index += 2; } else if ((contains(value, index + 1, 2, \"ER\") || charAt(value, index + 1) == 'Y') && !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") && !contains(value, index - 1, 1, \"E\", \"I\") && !contains(value, index - 1, 3, \"RGY\", \"OGY\")) { result.append('K', 'J'); index += 2; } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) { if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) { result.append('K'); } else if (contains(value, index + 1, 4, \"IER\")) { result.append('J'); } else { result.append('J', 'K'); } index += 2; } else if (charAt(value, index + 1) == 'G') { index += 2; result.append('K'); } else { index++; result.append('K'); } return index; }",
      "target": "private int handleG(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) { if (charAt(value, index + 1) == 'H') { index = handleGH(value, result, index); } else if (charAt(value, index + 1) == 'N') { if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) { result.append(\"KN\", \"N\"); } else if (!contains(value, index + 2, 2, \"EY\") && charAt(value, index + 1) != 'Y' && !slavoGermanic) { result.append(\"N\", \"KN\"); } else { result.append(\"KN\"); } index = index + 2; } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) { result.append(\"KL\", \"L\"); index += 2; } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) { result.append('K', 'J'); index += 2; } else if ((contains(value, index + 1, 2, \"ER\") || charAt(value, index + 1) == 'Y') && !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") && !contains(value, index - 1, 1, \"E\", \"I\") && !contains(value, index - 1, 3, \"RGY\", \"OGY\")) { result.append('K', 'J'); index += 2; } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) { if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) { result.append('K'); } else if (contains(value, index + 1, 3, \"IER\")) { result.append('J'); } else { result.append('J', 'K'); } index += 2; } else if (charAt(value, index + 1) == 'G') { index += 2; result.append('K'); } else { index++; result.append('K'); } return index; }",
      "function range": "418,5-469,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Codec_4_/src/java/org/apache/commons/codec/binary/Base64.java_225-226": {
      "loc": "225-226",
      "input": "public Base64() { this(false); }",
      "target": "public Base64() { this(0); }",
      "function range": "224,5-226,5",
      "raw_output": [
        "public void setBase64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void setBase64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void setBase64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; return ; } this. base64 = Base64. encodeBase64 ( base64 ) ; }",
        "public void setBase64 ( String base64 ) { if ( base64 == null ) { throw new IllegalArgumentException ( \"base64 cannot be null\" ) ; } this. base64 = Base64. encodeBase64 ( base64 ) ; }",
        "public void setBase64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. decodeBase64 ( base64 ) ; } }",
        "public void setBase64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void setBase64 ( String base64 ) { if ( base64 == null || base64. length ( ) == 0 ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void setBase64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. decodeBase64 ( base64 ) ; } }",
        "public void setBase64 ( String base64 ) { if ( base64 == null || base64. length ( ) == 0 ) { this. base64 = null ; return ; } this. base64 = Base64. encodeBase64 ( base64 ) ; }",
        "public void setBase64 ( String base64 ) { if ( base64 == null || base64. length ( ) == 0 ) { this. base64 = null ; } else { this. base64 = Base64. decodeBase64 ( base64 ) ; } }",
        "public void setBase64 ( byte [ ] base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void setBase64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void setBase64 ( byte [ ] base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encode ( base64 ) ; } }",
        "public void setBase64 ( String base64 ) { if ( base64 == null || base64. length ( ) == 0 ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void setBase64 ( byte [ ] base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. wrap ( base64 ) ; } }",
        "public void set ( byte [ ] b, int off, int len ) { this. base64 = Base64. encodeBase64 ( b, off, len ) ; }",
        "public void set ( byte [ ] b, int off, int len ) { super. set ( b, off, len ) ; }",
        "public void set ( byte [ ] b, int off, int len ) { this. base64 = Base64. encode ( b, off, len ) ; }",
        "public void set ( byte [ ] value ) { if ( value == null ) { this. value = null ; } else { this. value = Base64. encode ( value ) ; } }",
        "public void set ( byte [ ] value ) { if ( value == null ) { this. value = null ; return ; } this. value = Base64. encode ( value ) ; }",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; return ; } if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else { setValue ( value. toString ( ) ) ; } }",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; return ; } if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof byte [ ] ) { setValue ( ( byte [ ] ) value ) ; } else { setValue ( value. toString ( ) ) ; } }",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; } else { setValue ( Base64. encodeBase64 ( value. toString ( ) ) ) ; } }",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; return ; } if ( value instanceof String ) { setValue ( ( String ) value ) ; } else { setValue ( value. toString ( ) ) ; } }",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; return ; } if ( value instanceof String ) { setValue ( ( String ) value ) ; return ; } super. setValue ( value ) ; }"
      ],
      "mid_translation": [
        "Sets this object to be a base64 value.",
        "Sets this to be a base64 value.",
        "Sets this object to be a base 64 value.",
        "Sets this object to a base64 value.",
        "Sets this object to be a Base64 value."
      ],
      "output": [
        "public void Base64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void Base64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void Base64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; return ; } this. base64 = Base64. encodeBase64 ( base64 ) ; }",
        "public void Base64 ( String base64 ) { if ( base64 == null ) { throw new IllegalArgumentException ( \"base64 cannot be null\" ) ; } this. base64 = Base64. encodeBase64 ( base64 ) ; }",
        "public void Base64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. decodeBase64 ( base64 ) ; } }",
        "public void Base64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void Base64 ( String base64 ) { if ( base64 == null || base64. length ( ) == 0 ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void Base64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. decodeBase64 ( base64 ) ; } }",
        "public void Base64 ( String base64 ) { if ( base64 == null || base64. length ( ) == 0 ) { this. base64 = null ; return ; } this. base64 = Base64. encodeBase64 ( base64 ) ; }",
        "public void Base64 ( String base64 ) { if ( base64 == null || base64. length ( ) == 0 ) { this. base64 = null ; } else { this. base64 = Base64. decodeBase64 ( base64 ) ; } }",
        "public void Base64 ( byte [ ] base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void Base64 ( String base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void Base64 ( byte [ ] base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. encode ( base64 ) ; } }",
        "public void Base64 ( String base64 ) { if ( base64 == null || base64. length ( ) == 0 ) { this. base64 = null ; } else { this. base64 = Base64. encodeBase64 ( base64 ) ; } }",
        "public void Base64 ( byte [ ] base64 ) { if ( base64 == null ) { this. base64 = null ; } else { this. base64 = Base64. wrap ( base64 ) ; } }",
        "public void Base64 ( byte [ ] b, int off, int len ) { this. base64 = Base64. encodeBase64 ( b, off, len ) ; }",
        "public void Base64 ( byte [ ] b, int off, int len ) { super. set ( b, off, len ) ; }",
        "public void Base64 ( byte [ ] b, int off, int len ) { this. base64 = Base64. encode ( b, off, len ) ; }",
        "public void Base64 ( byte [ ] value ) { if ( value == null ) { this. value = null ; } else { this. value = Base64. encode ( value ) ; } }",
        "public void Base64 ( byte [ ] value ) { if ( value == null ) { this. value = null ; return ; } this. value = Base64. encode ( value ) ; }",
        "public void Base64 ( Object value ) { if ( value == null ) { setValue ( null ) ; return ; } if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else { setValue ( value. toString ( ) ) ; } }",
        "public void Base64 ( Object value ) { if ( value == null ) { setValue ( null ) ; return ; } if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof byte [ ] ) { setValue ( ( byte [ ] ) value ) ; } else { setValue ( value. toString ( ) ) ; } }",
        "public void Base64 ( Object value ) { if ( value == null ) { setValue ( null ) ; } else { setValue ( Base64. encodeBase64 ( value. toString ( ) ) ) ; } }",
        "public void Base64 ( Object value ) { if ( value == null ) { setValue ( null ) ; return ; } if ( value instanceof String ) { setValue ( ( String ) value ) ; } else { setValue ( value. toString ( ) ) ; } }",
        "public void Base64 ( Object value ) { if ( value == null ) { setValue ( null ) ; return ; } if ( value instanceof String ) { setValue ( ( String ) value ) ; return ; } super. setValue ( value ) ; }"
      ]
    },
    "Codec_7_/src/java/org/apache/commons/codec/binary/Base64.java_670-671": {
      "loc": "670-671",
      "input": "public static String encodeBase64String(byte[] binaryData) { return StringUtils.newStringUtf8(encodeBase64(binaryData, true)); }",
      "target": "public static String encodeBase64String(byte[] binaryData) { return StringUtils.newStringUtf8(encodeBase64(binaryData, false)); }",
      "function range": "669,5-671,5",
      "raw_output": [
        "public static String base64Encode ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "public static String base64Encode ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ), \"UTF-8\" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "public static String encodeBase64 ( byte [ ] data ) { try { return new String ( encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "public static String base64Encode ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { throw new IllegalArgumentException ( e ) ; } }",
        "public static String base64Encode ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { return null ; } }",
        "public static String encodeBase64 ( byte [ ] data ) { return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; }",
        "@ Nonnull public static String encodeBinary ( @ Nonnull final byte [ ] aData ) { ValueEnforcer. notNull ( aData, \"Data\" ) ; ValueEnforcer. notNull ( aData. length, \"Data\" ) ; return encodeBinary ( aData, 0, aData. length ) ; }",
        "@ Nonnull public static String encodeBinary ( @ Nonnull final byte [ ] aData ) { ValueEnforcer. notNull ( aData, \"Data\" ) ; ValueEnforcer. notNull ( aData. length, \"Data\" ) ; return encode ( aData, 0, aData. length ) ; }",
        "@ Nonnull public static String encodeBinary ( @ Nonnull final byte [ ] aData ) { ValueEnforcer. notNull ( aData, \"Data\" ) ; ValueEnforcer. isGE0 ( aData. length, \"Data\" ) ; return encodeBinary ( aData, 0, aData. length ) ; }",
        "@ Nonnull public static String encodeBinary ( @ Nonnull final byte [ ] aData ) { ValueEnforcer. notNull ( aData, \"Data\" ) ; ValueEnforcer. notNull ( aData. length, \"Data\" ) ; return encodeBase64 ( aData ) ; }",
        "@ Nonnull public static String encodeBinary ( @ Nonnull final byte [ ] aData ) { ValueEnforcer. notNull ( aData, \"Data\" ) ; ValueEnforcer. isGE0 ( aData. length, \"Data\" ) ; return encodeBase64 ( aData ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "public static String encodeBase64 ( byte [ ] data ) { return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encodeBase64 ( data, baos ) ; return new String ( baos. toByteArray ( ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }"
      ],
      "mid_translation": [
        "Encode binary data to base64 string.",
        "Encodes binary data to base64 string.",
        "Encode binary data as UTF - 8 string.",
        "Encodes binary data into base64 string.",
        "Encode binary data into base64 string."
      ],
      "output": [
        "public static String encodeBase64String ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "public static String encodeBase64String ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ), \"UTF-8\" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "public static String encodeBase64String ( byte [ ] data ) { try { return new String ( encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "public static String encodeBase64String ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { throw new IllegalArgumentException ( e ) ; } }",
        "public static String encodeBase64String ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { return null ; } }",
        "public static String encodeBase64String ( byte [ ] data ) { return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; }",
        "public static String encodeBase64String ( @ Nonnull final byte [ ] aData ) { ValueEnforcer. notNull ( aData, \"Data\" ) ; ValueEnforcer. notNull ( aData. length, \"Data\" ) ; return encodeBinary ( aData, 0, aData. length ) ; }",
        "public static String encodeBase64String ( @ Nonnull final byte [ ] aData ) { ValueEnforcer. notNull ( aData, \"Data\" ) ; ValueEnforcer. notNull ( aData. length, \"Data\" ) ; return encode ( aData, 0, aData. length ) ; }",
        "public static String encodeBase64String ( @ Nonnull final byte [ ] aData ) { ValueEnforcer. notNull ( aData, \"Data\" ) ; ValueEnforcer. isGE0 ( aData. length, \"Data\" ) ; return encodeBinary ( aData, 0, aData. length ) ; }",
        "public static String encodeBase64String ( @ Nonnull final byte [ ] aData ) { ValueEnforcer. notNull ( aData, \"Data\" ) ; ValueEnforcer. notNull ( aData. length, \"Data\" ) ; return encodeBase64 ( aData ) ; }",
        "public static String encodeBase64String ( @ Nonnull final byte [ ] aData ) { ValueEnforcer. notNull ( aData, \"Data\" ) ; ValueEnforcer. isGE0 ( aData. length, \"Data\" ) ; return encodeBase64 ( aData ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "public static String encodeBase64String ( byte [ ] data ) { return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encodeBase64 ( data, baos ) ; return new String ( baos. toByteArray ( ) ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }",
        "public static String encodeBase64String ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }"
      ]
    },
    "Codec_9_/src/java/org/apache/commons/codec/binary/Base64.java_827-828": {
      "loc": "827-828",
      "input": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); }",
      "target": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); }",
      "function range": "822,5-837,5",
      "raw_output": [
        "public static String encodeBinary ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( encodeBinary ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBinary ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { sb. append ('' ) ; } sb. append ( encode ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBinary ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( encodeBinary ( data [ i ] ) ) ; if ( i < data. length - 1 ) sb. append ('' ) ; } return sb. toString ( ) ; }",
        "public static String encodeBinary ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( data [ i ] ) ; } return sb. toString ( ) ; }",
        "public static byte [ ] encode ( byte [ ] data ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encode ( byte [ ] data ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; DataOutputStream dos = new DataOutputStream ( baos ) ; dos. write ( data ) ; return baos. toByteArray ( ) ; }",
        "public byte [ ] encode ( byte [ ] data ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; }",
        "public byte [ ] encode ( byte [ ] data ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; DataOutputStream dos = new DataOutputStream ( baos ) ; dos. write ( data ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encode ( byte [ ] data ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encode ( byte [ ] data ) throws IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( data. length ) ; DataOutputStream dos = new DataOutputStream ( bos ) ; dos. write ( data ) ; return bos. toByteArray ( ) ; }",
        "public static byte [ ] encode ( byte [ ] data ) { if ( data == null ) { return null ; } try { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "public static byte [ ] encode ( byte [ ] data ) { if ( data == null ) { return null ; } ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encode ( byte [ ] data ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encode ( byte [ ] data ) { if ( data == null ) { return null ; } try { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; } catch ( IOException e ) { return null ; } }",
        "public static byte [ ] encode ( byte [ ] data ) { if ( data == null ) { return null ; } ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; try { encode ( data, baos ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return baos. toByteArray ( ) ; }",
        "public static String encodeBinary ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { sb. append ('' ) ; } sb. append ( encodeBinary ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBinary ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( Base64. encodeBase64 ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBinary ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( encodeBinary ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBinary ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { sb. append ('' ) ; } sb. append ( encode ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBinary ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { char c = data [ i ] ; if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "public static String encodeBase64 ( byte [ ] data ) { return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }"
      ],
      "mid_translation": [
        "Encodes binary data into Base64.",
        "Encodes binary data to base64.",
        "Encode binary data.",
        "Encodes binary data into base64.",
        "Encodes binary data to base64"
      ],
      "output": [
        "public static String encodeBase64 ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( encodeBinary ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { sb. append ('' ) ; } sb. append ( encode ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( encodeBinary ( data [ i ] ) ) ; if ( i < data. length - 1 ) sb. append ('' ) ; } return sb. toString ( ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( data [ i ] ) ; } return sb. toString ( ) ; }",
        "public static byte [ ] encodeBase64 ( byte [ ] data ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encodeBase64 ( byte [ ] data ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; DataOutputStream dos = new DataOutputStream ( baos ) ; dos. write ( data ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encodeBase64 ( byte [ ] data ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encodeBase64 ( byte [ ] data ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; DataOutputStream dos = new DataOutputStream ( baos ) ; dos. write ( data ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encodeBase64 ( byte [ ] data ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encodeBase64 ( byte [ ] data ) throws IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( data. length ) ; DataOutputStream dos = new DataOutputStream ( bos ) ; dos. write ( data ) ; return bos. toByteArray ( ) ; }",
        "public static byte [ ] encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } try { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "public static byte [ ] encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encodeBase64 ( byte [ ] data ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; }",
        "public static byte [ ] encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } try { ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; encode ( data, baos ) ; return baos. toByteArray ( ) ; } catch ( IOException e ) { return null ; } }",
        "public static byte [ ] encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } ByteArrayOutputStream baos = new ByteArrayOutputStream ( data. length ) ; try { encode ( data, baos ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return baos. toByteArray ( ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { sb. append ('' ) ; } sb. append ( encodeBinary ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( Base64. encodeBase64 ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( encodeBinary ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { sb. append ('' ) ; } sb. append ( encode ( data [ i ] ) ) ; } return sb. toString ( ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { char c = data [ i ] ; if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { try { return new String ( Base64. encodeBase64 ( data ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "public static String encodeBase64 ( byte [ ] data ) { return new String ( Base64. encodeBase64 ( data ), Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { return new String ( Base64. encodeBase64 ( data ), StandardCharsets. UTF_8 ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }",
        "public static String encodeBase64 ( byte [ ] data ) { if ( data == null ) { return null ; } return new String ( Base64. encodeBase64 ( data ) ) ; }"
      ]
    },
    "Codec_10_/src/java/org/apache/commons/codec/language/Caverphone.java_76-77": {
      "loc": "76-77",
      "input": "public String caverphone(String txt) { if( txt == null || txt.length() == 0 ) { return \"1111111111\"; } txt = txt.toLowerCase(java.util.Locale.ENGLISH); txt = txt.replaceAll(\"[^a-z]\", \"\"); txt = txt.replaceAll(\"e$\", \"\"); txt = txt.replaceAll(\"^cough\", \"cou2f\"); txt = txt.replaceAll(\"^rough\", \"rou2f\"); txt = txt.replaceAll(\"^tough\", \"tou2f\"); txt = txt.replaceAll(\"^enough\", \"enou2f\"); txt = txt.replaceAll(\"^trough\", \"trou2f\"); txt = txt.replaceAll(\"^gn\", \"2n\"); txt = txt.replaceAll(\"^mb\", \"m2\"); txt = txt.replaceAll(\"cq\", \"2q\"); txt = txt.replaceAll(\"ci\", \"si\"); txt = txt.replaceAll(\"ce\", \"se\"); txt = txt.replaceAll(\"cy\", \"sy\"); txt = txt.replaceAll(\"tch\", \"2ch\"); txt = txt.replaceAll(\"c\", \"k\"); txt = txt.replaceAll(\"q\", \"k\"); txt = txt.replaceAll(\"x\", \"k\"); txt = txt.replaceAll(\"v\", \"f\"); txt = txt.replaceAll(\"dg\", \"2g\"); txt = txt.replaceAll(\"tio\", \"sio\"); txt = txt.replaceAll(\"tia\", \"sia\"); txt = txt.replaceAll(\"d\", \"t\"); txt = txt.replaceAll(\"ph\", \"fh\"); txt = txt.replaceAll(\"b\", \"p\"); txt = txt.replaceAll(\"sh\", \"s2\"); txt = txt.replaceAll(\"z\", \"s\"); txt = txt.replaceAll(\"^[aeiou]\", \"A\"); txt = txt.replaceAll(\"[aeiou]\", \"3\"); txt = txt.replaceAll(\"j\", \"y\"); txt = txt.replaceAll(\"^y3\", \"Y3\"); txt = txt.replaceAll(\"^y\", \"A\"); txt = txt.replaceAll(\"y\", \"3\"); txt = txt.replaceAll(\"3gh3\", \"3kh3\"); txt = txt.replaceAll(\"gh\", \"22\"); txt = txt.replaceAll(\"g\", \"k\"); txt = txt.replaceAll(\"s+\", \"S\"); txt = txt.replaceAll(\"t+\", \"T\"); txt = txt.replaceAll(\"p+\", \"P\"); txt = txt.replaceAll(\"k+\", \"K\"); txt = txt.replaceAll(\"f+\", \"F\"); txt = txt.replaceAll(\"m+\", \"M\"); txt = txt.replaceAll(\"n+\", \"N\"); txt = txt.replaceAll(\"w3\", \"W3\"); txt = txt.replaceAll(\"wh3\", \"Wh3\"); txt = txt.replaceAll(\"w$\", \"3\"); txt = txt.replaceAll(\"w\", \"2\"); txt = txt.replaceAll(\"^h\", \"A\"); txt = txt.replaceAll(\"h\", \"2\"); txt = txt.replaceAll(\"r3\", \"R3\"); txt = txt.replaceAll(\"r$\", \"3\"); txt = txt.replaceAll(\"r\", \"2\"); txt = txt.replaceAll(\"l3\", \"L3\"); txt = txt.replaceAll(\"l$\", \"3\"); txt = txt.replaceAll(\"l\", \"2\"); txt = txt.replaceAll(\"2\", \"\"); txt = txt.replaceAll(\"3$\", \"A\"); txt = txt.replaceAll(\"3\", \"\"); txt = txt + \"111111\" + \"1111\"; return txt.substring(0, 10); }",
      "target": "public String caverphone(String txt) { if( txt == null || txt.length() == 0 ) { return \"1111111111\"; } txt = txt.toLowerCase(java.util.Locale.ENGLISH); txt = txt.replaceAll(\"[^a-z]\", \"\"); txt = txt.replaceAll(\"e$\", \"\"); txt = txt.replaceAll(\"^cough\", \"cou2f\"); txt = txt.replaceAll(\"^rough\", \"rou2f\"); txt = txt.replaceAll(\"^tough\", \"tou2f\"); txt = txt.replaceAll(\"^enough\", \"enou2f\"); txt = txt.replaceAll(\"^trough\", \"trou2f\"); txt = txt.replaceAll(\"^gn\", \"2n\"); txt = txt.replaceAll(\"mb$\", \"m2\"); txt = txt.replaceAll(\"cq\", \"2q\"); txt = txt.replaceAll(\"ci\", \"si\"); txt = txt.replaceAll(\"ce\", \"se\"); txt = txt.replaceAll(\"cy\", \"sy\"); txt = txt.replaceAll(\"tch\", \"2ch\"); txt = txt.replaceAll(\"c\", \"k\"); txt = txt.replaceAll(\"q\", \"k\"); txt = txt.replaceAll(\"x\", \"k\"); txt = txt.replaceAll(\"v\", \"f\"); txt = txt.replaceAll(\"dg\", \"2g\"); txt = txt.replaceAll(\"tio\", \"sio\"); txt = txt.replaceAll(\"tia\", \"sia\"); txt = txt.replaceAll(\"d\", \"t\"); txt = txt.replaceAll(\"ph\", \"fh\"); txt = txt.replaceAll(\"b\", \"p\"); txt = txt.replaceAll(\"sh\", \"s2\"); txt = txt.replaceAll(\"z\", \"s\"); txt = txt.replaceAll(\"^[aeiou]\", \"A\"); txt = txt.replaceAll(\"[aeiou]\", \"3\"); txt = txt.replaceAll(\"j\", \"y\"); txt = txt.replaceAll(\"^y3\", \"Y3\"); txt = txt.replaceAll(\"^y\", \"A\"); txt = txt.replaceAll(\"y\", \"3\"); txt = txt.replaceAll(\"3gh3\", \"3kh3\"); txt = txt.replaceAll(\"gh\", \"22\"); txt = txt.replaceAll(\"g\", \"k\"); txt = txt.replaceAll(\"s+\", \"S\"); txt = txt.replaceAll(\"t+\", \"T\"); txt = txt.replaceAll(\"p+\", \"P\"); txt = txt.replaceAll(\"k+\", \"K\"); txt = txt.replaceAll(\"f+\", \"F\"); txt = txt.replaceAll(\"m+\", \"M\"); txt = txt.replaceAll(\"n+\", \"N\"); txt = txt.replaceAll(\"w3\", \"W3\"); txt = txt.replaceAll(\"wh3\", \"Wh3\"); txt = txt.replaceAll(\"w$\", \"3\"); txt = txt.replaceAll(\"w\", \"2\"); txt = txt.replaceAll(\"^h\", \"A\"); txt = txt.replaceAll(\"h\", \"2\"); txt = txt.replaceAll(\"r3\", \"R3\"); txt = txt.replaceAll(\"r$\", \"3\"); txt = txt.replaceAll(\"r\", \"2\"); txt = txt.replaceAll(\"l3\", \"L3\"); txt = txt.replaceAll(\"l$\", \"3\"); txt = txt.replaceAll(\"l\", \"2\"); txt = txt.replaceAll(\"2\", \"\"); txt = txt.replaceAll(\"3$\", \"A\"); txt = txt.replaceAll(\"3\", \"\"); txt = txt + \"111111\" + \"1111\"; return txt.substring(0, 10); }",
      "function range": "50,5-142,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Codec_17_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_339-340": {
      "loc": "339-340",
      "input": "public static String newStringIso8859_1(final byte[] bytes) { return new String(bytes, Charsets.ISO_8859_1); }",
      "target": "public static String newStringIso8859_1(final byte[] bytes) { return newString(bytes, Charsets.ISO_8859_1); }",
      "function range": "338,5-340,5",
      "raw_output": [
        "public static String toISO1String ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ('' ) ; } } return builder. toString ( ) ; }",
        "public static String toISO1String ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String toISO1String ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String toISO1String ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ( \" \" ) ; } } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ('' ) ; } } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ( \" \" ) ; } } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ('' ) ; } } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String toISO1String ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ( \" \" ) ; } } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String toISO1String ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String fromBytes ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { sb. append ( bytes [ i ] ) ; } return sb. toString ( ) ; }",
        "public static String toISO1String ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ('' ) ; } } return builder. toString ( ) ; }",
        "public static String toISO1String ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ('' ) ; } } return builder. toString ( ) ; }",
        "public static String toISO1String ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { sb. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { sb. append ('' ) ; } } return sb. toString ( ) ; }",
        "public static String toISO1String ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { sb. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { sb. append ('' ) ; } } return sb. toString ( ) ; }",
        "public static String toISO1String ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ( \" \" ) ; } } return builder. toString ( ) ; }"
      ],
      "mid_translation": [
        "Creates a ISO - 8859 - 1 string from the given byte array.",
        "Constructs a ISO - 8859 - 1 string from a byte array.",
        "Creates a ISO - 8859 - 1 string from a byte array.",
        "Create a ISO - 8859 - 1 string from a byte array.",
        "Creates a ISO - 8859 - 1 string for the given byte array."
      ],
      "output": [
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ('' ) ; } } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ( \" \" ) ; } } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ('' ) ; } } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ( \" \" ) ; } } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ('' ) ; } } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ( \" \" ) ; } } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { sb. append ( bytes [ i ] ) ; } return sb. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ('' ) ; } } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ('' ) ; } } return builder. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { sb. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { sb. append ('' ) ; } } return sb. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null || bytes. length == 0 ) { return \"\" ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { sb. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { sb. append ('' ) ; } } return sb. toString ( ) ; }",
        "public static String newStringIso8859_1 ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { builder. append ( bytes [ i ] ) ; if ( i < bytes. length - 1 ) { builder. append ( \" \" ) ; } } return builder. toString ( ) ; }"
      ]
    },
    "Codec_18_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_81-82": {
      "loc": "81-82",
      "input": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); } return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length())); }",
      "target": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); } return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length()); }",
      "function range": "71,5-82,5",
      "raw_output": [
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! equal ( s1. charAt ( i ), s2. charAt ( i ) ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. get ( i ). equals ( s2. get ( i ) ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. get ( i ). equals ( s2. get ( i ) ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean compare ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null && s2 == null ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean compare ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean areEqual ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean areEqual ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equal ( CharSequence s1, CharSequence s2 ) { if ( s1 == null && s2 == null ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }"
      ],
      "mid_translation": [
        "Determines whether two CharSequences are equal.",
        "Determines if two CharSequences are equal.",
        "Checks if two CharSequences are equal.",
        "Checks that two CharSequences are equal.",
        "Determines whether two character sequences are equal."
      ],
      "output": [
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! equal ( s1. charAt ( i ), s2. charAt ( i ) ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. get ( i ). equals ( s2. get ( i ) ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. get ( i ). equals ( s2. get ( i ) ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null && s2 == null ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == s2 ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if ( s1. charAt ( i )!= s2. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean equals ( CharSequence s1, CharSequence s2 ) { if ( s1 == null && s2 == null ) { return true ; } if ( s1 == null || s2 == null ) { return false ; } if ( s1. length ( )!= s2. length ( ) ) { return false ; } for ( int i = 0 ; i < s1. length ( ) ; i ++ ) { if (! s1. charAt ( i ) == s2. charAt ( i ) ) { return false ; } } return true ; }"
      ]
    },
    "Collections_26_/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java_277-278": {
      "loc": "277-278",
      "input": "private Object readResolve() { <mask> calculateHashCode(keys); return this; }",
      "target": "protected Object readResolve() { <mask> calculateHashCode(keys); return this; }",
      "function range": "277,5-280,5",
      "raw_output": [
        "public static int hash ( Object... keys ) { if ( keys == null || keys. length == 0 ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < keys. length ; i ++ ) { hash = 31 * hash + ( ( Object ) keys [ i ] ). hashCode ( ) ; } return hash ; }",
        "public static int hash ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + key [ i ] ; } return hash ; }",
        "public static int hash ( Object... keys ) { if ( keys == null || keys. length == 0 ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < keys. length ; i ++ ) { hash += hash ( keys [ i ] ) ; } return hash ; }",
        "public static int hash ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { if ( key [ i ]!= 0 ) { hash = 31 * hash + key [ i ] ; } } return hash ; }",
        "public static int hash ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + ( key [ i ] & 0xff ) ; } return hash ; }",
        "private int readResolveHashCode ( ) { intHashCode = 0 ; try { Method readResolveMethod = this. getClass ( ). getMethod ( \"readResolveHashCode\" ) ; readResolveMethod. setAccessible ( true ) ;HashCode = ( int ) readResolveMethod. invoke ( this ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } returnHashCode ; }",
        "private int readResolveHashCode ( ) { intHashCode = 0 ; try { Method readResolveMethod = this. getClass ( ). getMethod ( \"readResolveHashCode\" ) ; readResolveMethod. setAccessible ( true ) ;HashCode = ( int ) readResolveMethod. invoke ( this ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } returnHashCode ; }",
        "private int readResolveHashCode ( ) { intHashCode = 0 ; try { Method readResolveMethod = this. getClass ( ). getMethod ( \"readResolveHashCode\" ) ; readResolveMethod. setAccessible ( true ) ;HashCode = readResolveMethod. invoke ( this ). hashCode ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } returnHashCode ; }",
        "private int readResolveHashCode ( ) { intHashCode = 0 ; try { Method readResolveMethod = this. getClass ( ). getMethod ( \"readResolveHashCode\" ) ; readResolveMethod. setAccessible ( true ) ;HashCode = ( int ) readResolveMethod. invoke ( this ) ; } catch ( IllegalAccessException | InvocationTargetException e ) { throw new RuntimeException ( e ) ; } returnHashCode ; }",
        "private int readResolveHashCode ( ) { intHashCode = 0 ; try { Method readResolveMethod = this. getClass ( ). getMethod ( \"readResolveHashCode\" ) ; readResolveMethod. invoke ( this, new Object [ ] { this } ) ;HashCode = readResolveMethod. getInt ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } returnHashCode ; }",
        "public static int hash ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + key [ i ] ; } return hash ; }",
        "public static int hash ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { if ( key [ i ]!= 0 ) { hash = 31 * hash + key [ i ] ; } } return hash ; }",
        "public static int hash ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + ( key [ i ] & 0xff ) ; } return hash ; }",
        "public static int hash ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + ( key [ i ] & 0xFF ) ; } return hash ; }",
        "public static int hash ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { byte b = key [ i ] ; hash = 31 * hash + b ; } return hash ; }",
        "public static int hash ( Key... keys ) { int hash = 0 ; for ( Key k : keys ) { hash = 31 * hash + k. hashCode ( ) ; } return hash ; }",
        "public static int hash ( byte [ ] key ) { int hash = 0 ; for ( byte b : key ) { hash = 31 * hash + b ; } return hash ; }",
        "public static int hash ( Object... keys ) { if ( keys == null || keys. length == 0 ) { return 0 ; } int hash = 0 ; for ( Object key : keys ) { hash = 31 * hash + key. hashCode ( ) ; } return hash ; }",
        "public static int hash ( Object... keys ) { if ( keys == null || keys. length == 0 ) { return 0 ; } int hash = 0 ; for ( Object k : keys ) { hash = 31 * hash + k. hashCode ( ) ; } return hash ; }",
        "public static int hash ( Object... keys ) { if ( keys == null || keys. length == 0 ) { return 0 ; } int hash = 0 ; for ( Object key : keys ) { hash = hash ( hash, key ) ; } return hash ; }",
        "public static int hash ( byte [ ] key ) { int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + key [ i ] ; } return hash ; }",
        "public static int hash ( byte [ ] key ) { int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = hash ( key [ i ] ) ; } return hash ; }",
        "public static int hash ( byte [ ] key ) { int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash += hash ( key [ i ] ) ; } return hash ; }",
        "public static int hash ( byte [ ] key ) { int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + ( key [ i ] & 0xff ) ; } return hash ; }",
        "public static int hash ( byte [ ] key ) { int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + ( key [ i ] & 0xFF ) ; } return hash ; }"
      ],
      "mid_translation": [
        "Resolves the hash code of the keys.",
        "Resolves theHashCode field from the readResolve method.",
        "Resolves the hash code for the keys.",
        "Resolves the hash code for the given keys.",
        "Resolves the hash code of the keys"
      ],
      "output": [
        "private int readResolve ( Object... keys ) { if ( keys == null || keys. length == 0 ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < keys. length ; i ++ ) { hash = 31 * hash + ( ( Object ) keys [ i ] ). hashCode ( ) ; } return hash ; }",
        "private int readResolve ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + key [ i ] ; } return hash ; }",
        "private int readResolve ( Object... keys ) { if ( keys == null || keys. length == 0 ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < keys. length ; i ++ ) { hash += hash ( keys [ i ] ) ; } return hash ; }",
        "private int readResolve ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { if ( key [ i ]!= 0 ) { hash = 31 * hash + key [ i ] ; } } return hash ; }",
        "private int readResolve ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + ( key [ i ] & 0xff ) ; } return hash ; }",
        "private int readResolve ( ) { intHashCode = 0 ; try { Method readResolveMethod = this. getClass ( ). getMethod ( \"readResolveHashCode\" ) ; readResolveMethod. setAccessible ( true ) ;HashCode = ( int ) readResolveMethod. invoke ( this ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } returnHashCode ; }",
        "private int readResolve ( ) { intHashCode = 0 ; try { Method readResolveMethod = this. getClass ( ). getMethod ( \"readResolveHashCode\" ) ; readResolveMethod. setAccessible ( true ) ;HashCode = ( int ) readResolveMethod. invoke ( this ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } returnHashCode ; }",
        "private int readResolve ( ) { intHashCode = 0 ; try { Method readResolveMethod = this. getClass ( ). getMethod ( \"readResolveHashCode\" ) ; readResolveMethod. setAccessible ( true ) ;HashCode = readResolveMethod. invoke ( this ). hashCode ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } returnHashCode ; }",
        "private int readResolve ( ) { intHashCode = 0 ; try { Method readResolveMethod = this. getClass ( ). getMethod ( \"readResolveHashCode\" ) ; readResolveMethod. setAccessible ( true ) ;HashCode = ( int ) readResolveMethod. invoke ( this ) ; } catch ( IllegalAccessException | InvocationTargetException e ) { throw new RuntimeException ( e ) ; } returnHashCode ; }",
        "private int readResolve ( ) { intHashCode = 0 ; try { Method readResolveMethod = this. getClass ( ). getMethod ( \"readResolveHashCode\" ) ; readResolveMethod. invoke ( this, new Object [ ] { this } ) ;HashCode = readResolveMethod. getInt ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } returnHashCode ; }",
        "private int readResolve ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + key [ i ] ; } return hash ; }",
        "private int readResolve ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { if ( key [ i ]!= 0 ) { hash = 31 * hash + key [ i ] ; } } return hash ; }",
        "private int readResolve ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + ( key [ i ] & 0xff ) ; } return hash ; }",
        "private int readResolve ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + ( key [ i ] & 0xFF ) ; } return hash ; }",
        "private int readResolve ( byte [ ] key ) { if ( key == null ) { return 0 ; } int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { byte b = key [ i ] ; hash = 31 * hash + b ; } return hash ; }",
        "private int readResolve ( Key... keys ) { int hash = 0 ; for ( Key k : keys ) { hash = 31 * hash + k. hashCode ( ) ; } return hash ; }",
        "private int readResolve ( byte [ ] key ) { int hash = 0 ; for ( byte b : key ) { hash = 31 * hash + b ; } return hash ; }",
        "private int readResolve ( Object... keys ) { if ( keys == null || keys. length == 0 ) { return 0 ; } int hash = 0 ; for ( Object key : keys ) { hash = 31 * hash + key. hashCode ( ) ; } return hash ; }",
        "private int readResolve ( Object... keys ) { if ( keys == null || keys. length == 0 ) { return 0 ; } int hash = 0 ; for ( Object k : keys ) { hash = 31 * hash + k. hashCode ( ) ; } return hash ; }",
        "private int readResolve ( Object... keys ) { if ( keys == null || keys. length == 0 ) { return 0 ; } int hash = 0 ; for ( Object key : keys ) { hash = hash ( hash, key ) ; } return hash ; }",
        "private int readResolve ( byte [ ] key ) { int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + key [ i ] ; } return hash ; }",
        "private int readResolve ( byte [ ] key ) { int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = hash ( key [ i ] ) ; } return hash ; }",
        "private int readResolve ( byte [ ] key ) { int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash += hash ( key [ i ] ) ; } return hash ; }",
        "private int readResolve ( byte [ ] key ) { int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + ( key [ i ] & 0xff ) ; } return hash ; }",
        "private int readResolve ( byte [ ] key ) { int hash = 0 ; for ( int i = 0 ; i < key. length ; i ++ ) { hash = 31 * hash + ( key [ i ] & 0xFF ) ; } return hash ; }"
      ]
    },
    "Compress_5_/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java_239-241": {
      "loc": "239-241",
      "input": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0 && inf.finished()) { return -1; } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); }",
      "target": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0) { if (inf.finished()) { return -1; } else if (lengthOfLastRead == -1) { throw new IOException(\"Truncated ZIP file\"); } } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); }",
      "function range": "191,5-246,5",
      "raw_output": [
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } return",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len",
        "public int read ( byte [ ] buffer, int offset, int length ) throws IOException { if ( _is. read ( buffer, offset, length )!= length ) { throw new EOFException ( ) ; } return _is. read ( buffer, offset, length ) ; }",
        "public int read ( byte [ ] buffer, int offset, int length ) throws IOException { if ( _is == null ) { _is = new ByteArrayInputStream ( buffer, offset, length ) ; } return _is. read ( buffer, offset, length ) ; }",
        "public int read ( byte [ ] buffer, int offset, int length ) throws IOException { if ( _is == null ) { _is = new ByteArrayInputStream ( buffer, offset, length ) ; } _is. read ( buffer, offset, length ) ; return length ; }",
        "public int read ( byte [ ] buffer, int offset, int length ) throws IOException { if ( _is. read ( buffer, offset, length )!= length ) throw new EOFException ( ) ; return _is. read ( buffer, offset, length ) ; }",
        "public int read ( byte [ ] buffer, int offset, int length ) throws IOException { int result = super. read ( buffer, offset, length ) ; if ( result == - 1 ) { throw new EOFException ( ) ; } return result ; }",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ;",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) {",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) {",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBounds",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBounds",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } return super. read ( b, off, len ) ; }",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } return super. read ( b, off, len ) ; }",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } int n = super. read ( b, off, len ) ; if ( n < 0 ) { throw new IOException ( ) ; } return n ; }",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } int n = super. read ( b, off, len ) ; if ( n < 0 ) { throw new IndexOutOfBoundsException ( ) ; } return n ; }",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } int n = super. read ( b, off, len ) ; if ( n < 0 ) { throw new IOException ( ) ; } return n ; }",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ;",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ;",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ;",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ;",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ("
      ],
      "mid_translation": [
        "Reads a byte buffer into the current ZIP archive.",
        "Reads data from the current stream into the given buffer.",
        "Reads a byte buffer into the current ZIP stream.",
        "Reads a byte array into the current ZIP archive buffer.",
        "Reads bytes into the current ZIP archive buffer."
      ],
      "output": [
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } return",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len",
        "public int read ( byte [ ] buffer, int offset, int length ) throws IOException { if ( _is. read ( buffer, offset, length )!= length ) { throw new EOFException ( ) ; } return _is. read ( buffer, offset, length ) ; }",
        "public int read ( byte [ ] buffer, int offset, int length ) throws IOException { if ( _is == null ) { _is = new ByteArrayInputStream ( buffer, offset, length ) ; } return _is. read ( buffer, offset, length ) ; }",
        "public int read ( byte [ ] buffer, int offset, int length ) throws IOException { if ( _is == null ) { _is = new ByteArrayInputStream ( buffer, offset, length ) ; } _is. read ( buffer, offset, length ) ; return length ; }",
        "public int read ( byte [ ] buffer, int offset, int length ) throws IOException { if ( _is. read ( buffer, offset, length )!= length ) throw new EOFException ( ) ; return _is. read ( buffer, offset, length ) ; }",
        "public int read ( byte [ ] buffer, int offset, int length ) throws IOException { int result = super. read ( buffer, offset, length ) ; if ( result == - 1 ) { throw new EOFException ( ) ; } return result ; }",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ;",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) {",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) {",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBounds",
        "public int read ( byte [ ] buf, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > buf. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 ) { throw new IndexOutOfBounds",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } return super. read ( b, off, len ) ; }",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } return super. read ( b, off, len ) ; }",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } int n = super. read ( b, off, len ) ; if ( n < 0 ) { throw new IOException ( ) ; } return n ; }",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } int n = super. read ( b, off, len ) ; if ( n < 0 ) { throw new IndexOutOfBoundsException ( ) ; } return n ; }",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length - off ) { throw new IndexOutOfBoundsException ( ) ; } int n = super. read ( b, off, len ) ; if ( n < 0 ) { throw new IOException ( ) ; } return n ; }",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ;",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ;",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ;",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ;",
        "public int read ( byte [ ] b, int off, int len ) throws IOException { ensureOpen ( ) ; if ( off < 0 || len < 0 || off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( off + len > b. length ) { throw new IndexOutOfBoundsException ( ) ; } if ( len < 0 || len > b. length ) { throw new IndexOutOfBoundsException ("
      ]
    },
    "Compress_12_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java_198-199": {
      "loc": "198-199",
      "input": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry != null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; } currEntry = new TarArchiveEntry(headerBuf); entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; }",
      "target": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry != null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; } try { currEntry = new TarArchiveEntry(headerBuf); } catch (IllegalArgumentException e) { IOException ioe = new IOException(\"Error detected parsing the header\"); ioe.initCause(e); throw ioe; } entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; }",
      "function range": "172,5-238,5",
      "raw_output": [
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } throw new NoSuchElementException ( ) ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) return entry ; entry = getNextEntry ( ) ; if ( entry!= null ) return entry ; throw new NoSuchElementException ( ) ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = this. getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = new TarEntry ( this ) ; this. getNextEntry ( ) ; return entry ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = this. getNextEntry ( ) ; if ( entry!= null ) return entry ; entry = new TarEntry ( this ) ; this. getNextEntry ( ) ; return entry ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } throw new NoSuchElementException ( ) ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) return entry ; entry = getNextEntry ( ) ; if ( entry!= null ) return entry ; throw new NoSuchElementException ( ) ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { closeEntry ( entry ) ; } return null ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } throw new EOFException ( ) ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } throw new NoSuchElementException ( ) ; }",
        "public TarEntry nextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } throw new EOFException ( ) ; }",
        "public TarEntry getNextEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { closeEntry ( entry ) ; } return entry ; }",
        "public TarEntry readEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry readEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; readEntry ( ) ; return entry ; }",
        "public TarEntry readEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) return entry ; entry = readEntry ( ) ; readEntry ( ) ; return entry ; }",
        "public TarEntry readEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } throw new EOFException ( ) ; }",
        "public TarEntry readEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { closeEntry ( entry ) ; } return entry ; }",
        "public TarEntry readEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry readEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; readEntry ( ) ; return entry ; }",
        "public TarEntry readEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) return entry ; entry = readEntry ( ) ; if ( entry!= null ) return entry ; entry = readEntry ( ) ; if ( entry!= null ) return entry ; return null ; }",
        "private TarEntry readEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; readEntry ( ) ; return entry ; }",
        "public TarEntry readEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; readEntry ( ) ; return entry ; }"
      ],
      "mid_translation": [
        "Gets the next tar entry.",
        "Gets the next tar entry from the archive.",
        "Returns the next tar entry.",
        "Reads the next tar entry and returns it.",
        "Reads the next tar entry."
      ],
      "output": [
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } throw new NoSuchElementException ( ) ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) return entry ; entry = getNextEntry ( ) ; if ( entry!= null ) return entry ; throw new NoSuchElementException ( ) ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = this. getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = new TarEntry ( this ) ; this. getNextEntry ( ) ; return entry ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = this. getNextEntry ( ) ; if ( entry!= null ) return entry ; entry = new TarEntry ( this ) ; this. getNextEntry ( ) ; return entry ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } throw new NoSuchElementException ( ) ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) return entry ; entry = getNextEntry ( ) ; if ( entry!= null ) return entry ; throw new NoSuchElementException ( ) ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { closeEntry ( entry ) ; } return null ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } throw new EOFException ( ) ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } throw new NoSuchElementException ( ) ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } throw new EOFException ( ) ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = getNextEntry ( ) ; if ( entry!= null ) { return entry ; } entry = getNextEntry ( ) ; if ( entry!= null ) { closeEntry ( entry ) ; } return entry ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; readEntry ( ) ; return entry ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) return entry ; entry = readEntry ( ) ; readEntry ( ) ; return entry ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } throw new EOFException ( ) ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { closeEntry ( entry ) ; } return entry ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } return null ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; readEntry ( ) ; return entry ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) return entry ; entry = readEntry ( ) ; if ( entry!= null ) return entry ; entry = readEntry ( ) ; if ( entry!= null ) return entry ; return null ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; readEntry ( ) ; return entry ; }",
        "public TarEntry getNextTarEntry ( ) throws IOException { TarEntry entry = readEntry ( ) ; if ( entry!= null ) { return entry ; } entry = readEntry ( ) ; readEntry ( ) ; return entry ; }"
      ]
    },
    "Compress_14_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_65-67": {
      "loc": "65-67",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); } trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
      "target": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); } trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
      "function range": "56,5-112,5",
      "raw_output": [
        "public static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buffer, i, offset + length - i - 1 ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i + offset, length - i ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i, offset + length - i - 1 ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i + offset, length - i - 1 ) ; } return result ; }",
        "public static long fromOctalBytes ( byte [ ] bytes ) { long result = 0 ; for ( int i = 0 ; i < bytes. length ; i ++ ) { result <<= 8 ; result |= ( bytes [ i ] & 0xff ) ; } return result ; }",
        "public static byte [ ] parseOctalBytes ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = buffer [ offset + i ] ; } return result ; }",
        "public static byte [ ] parseOctalBytes ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buffer [ i ] ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = buffer [ offset + i ] ; } return result ; }",
        "public static byte [ ] getOctalBytes ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buffer [ i ] ; } return result ; }",
        "public static byte [ ] getOctalBytes ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buf [ i ] ; } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long getOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result |= buffer [ i ] << getOctal ( buffer, i + offset ) ; } return result ; }",
        "public static long getOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= buffer [ i ] & 0xff ; } return result ; }",
        "public static long getOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= buffer [ i ] & 0xFF ; } return result ; }",
        "public static long getOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= ( buf [ i ] & 0xFF ) << 8 ; } return result ; }",
        "public static long getOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= ( buf [ i ] & 0xff ) << 8 ; } return result ; }"
      ],
      "mid_translation": [
        "Parse an octal sequence of bytes into a long.",
        "Parse an octal sequence of bytes from a buffer.",
        "Parse an octal string into a long.",
        "Parses an octal string into a long.",
        "Parse the octal of a buffer into a long."
      ],
      "output": [
        "public static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buffer, i, offset + length - i - 1 ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i + offset, length - i ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i, offset + length - i - 1 ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i + offset, length - i - 1 ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] bytes ) { long result = 0 ; for ( int i = 0 ; i < bytes. length ; i ++ ) { result <<= 8 ; result |= ( bytes [ i ] & 0xff ) ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = buffer [ offset + i ] ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buffer [ i ] ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = buffer [ offset + i ] ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buffer [ i ] ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buf [ i ] ; } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result |= buffer [ i ] << getOctal ( buffer, i + offset ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= buffer [ i ] & 0xff ; } return result ; }",
        "public static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= buffer [ i ] & 0xFF ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= ( buf [ i ] & 0xFF ) << 8 ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= ( buf [ i ] & 0xff ) << 8 ; } return result ; }"
      ]
    },
    "Compress_19_/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java_259-260": {
      "loc": "259-260",
      "input": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData != null) { int expectedLength = (hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); if (rawCentralDirectoryData.length != expectedLength) { throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } } }",
      "target": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData != null) { int expectedLength = (hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); if (rawCentralDirectoryData.length < expectedLength) { throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } } }",
      "function range": "249,5-287,5",
      "raw_output": [
        "private void parseData ( ) throws IOException { if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { parseData ( file ) ; } } } }",
        "private void parseData ( ) throws IOException { if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { parseData ( file ) ; } } } else { if ( file. isDirectory ( ) ) { parseData ( ) ; } } }",
        "private void parseData ( ) throws IOException { if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { parseData ( f ) ; } } } }",
        "private void parseData ( ) throws IOException { if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { parseData ( file ) ; } } } if ( file. isDirectory ( ) ) { parseData ( ) ; } }",
        "private void parseData ( ) throws IOException { if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { parseData ( file ) ; } } } else { if ( file. isDirectory ( ) ) { parseData ( file ) ; } } }",
        "private void parseEndDirData ( ) throws IOException { if ( endDirData == null ) { endDirData = ByteBuffer. allocate ( endDirData. length ) ; endDirData. order ( ByteOrder. BIG_ENDIAN ) ; endDirData. limit ( endDirData. position ( ) + endDirData. length ) ; endDirData. position ( endDirData. position ( ) + endDirData. length ) ; } }",
        "private void parseEndDirData ( ) throws IOException { if ( endDirData == null ) { endDirData = ByteBuffer. allocate ( endDirData. capacity ( ) ) ; endDirData. order ( ByteOrder. BIG_ENDIAN ) ; endDirData. limit ( endDirData. capacity ( ) ) ; endDirData. position ( endDirData. position ( ) + endDirData. limit ( ) ) ; } }",
        "private void parseEndDirData ( ) throws IOException { if ( endDirData == null ) { endDirData = ByteBuffer. allocate ( endDirData. capacity ( ) ) ; endDirData. order ( ByteOrder. BIG_ENDIAN ) ; endDirData. limit ( endDirData. capacity ( ) ) ; endDirData. position ( endDirData. position ( ) + endDirData. position ( ) ) ; } }",
        "private void parseEndDirData ( ) throws IOException { if ( endDirData == null ) { endDirData = ByteBuffer. allocate ( endDirData. capacity ( ) ) ; endDirData. order ( ByteOrder. BIG_ENDIAN ) ; endDirData. limit ( endDirData. capacity ( ) ) ; endDirData. position ( endDirData. position ( ) ) ; } }",
        "private void parseEndDirData ( ) throws IOException { if ( endDirData == null ) { endDirData = ByteBuffer. allocate ( endDirData. length ) ; endDirData. order ( ByteOrder. BIG_ENDIAN ) ; endDirData. limit ( endDirData. position ( ) + endDirData. length ) ; endDirData. position ( endDirData. position ( ) ) ; } }",
        "private void parseEndDirData ( ) throws IOException { if ( endDirData == null ) { throw new IOException ( \"EndDirData is null\" ) ; } if ( endDirData. length ( ) == 0 ) { throw new IOException ( \"EndDirData is empty\" ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } }",
        "private void parseEndDirData ( ) throws IOException { if ( endDirData == null ) { throw new IOException ( \"EndDirData is null\" ) ; } if ( endDirData. length ( ) == 0 ) { throw new IOException ( \"EndDirData is empty\" ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( endDirData. length ( ) - 1 ) ; } }",
        "private void parseEndDirData ( ) throws IOException { if ( endDirData == null ) { throw new IOException ( \"EndDirData is null\" ) ; } if ( endDirData. length ( ) == 0 ) { throw new IOException ( \"EndDirData is empty\" ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( endDirData. length ( ) - 1, endDirData. length ( ) - 1 ) ; } }",
        "private void parseEndDirData ( ) throws IOException { if ( endDirData == null ) { throw new IOException ( \"EndDirData is null\" ) ; } if ( endDirData. length ( ) == 0 ) { throw new IOException ( \"EndDirData is empty\" ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { throw new IOException ( \"EndDirData is invalid\" ) ; } }",
        "private void parseEndDirData ( ) throws IOException { if ( endDirData == null ) { throw new IOException ( \"EndDirData is null\" ) ; } if ( endDirData. length ( ) == 0 ) { throw new IOException ( \"EndDirData is empty\" ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; }",
        "public void close ( ) throws IOException { if ( file. exists ( ) ) { file. delete ( ) ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( int i = 0 ; i < files. length ; i ++ ) { close ( files [ i ] ) ; } } } }",
        "public void close ( ) throws IOException { if ( file. exists ( ) ) { file. delete ( ) ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( int i = 0 ; i < files. length ; i ++ ) { delete ( files [ i ] ) ; } } } }",
        "public void close ( ) throws IOException { if ( file. exists ( ) ) { file. delete ( ) ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { close ( file ) ; } } } }",
        "public void close ( ) throws IOException { if ( this. file. exists ( ) ) { this. file. delete ( ) ; } if ( this. file. isDirectory ( ) ) { File [ ] files = this. file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { close ( file ) ; } } } }",
        "public void close ( ) throws IOException { if ( file. exists ( ) ) { file. delete ( ) ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { if ( file. isDirectory ( ) ) { close ( file ) ; } } } } }",
        "private void parseData ( ) { if ( data == null ) { return ; } for ( int i = 0 ; i < data. length ; i ++ ) { char c = data [ i ] ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void parseData ( ) { if ( data!= null ) { for ( int i = 0 ; i < data. length ; i ++ ) { char c = data [ i ] ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "private void parseData ( ) { if ( data == null ) { return ; } for ( int i = 0 ; i < data. length ; i ++ ) { char ch = data [ i ] ; switch ( ch ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "private void parseData ( ) { if ( data == null ) { return ; } for ( int i = 0 ; i < data. length ; i ++ ) { char c = data [ i ] ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' :",
        "private void parseData ( ) { if ( data == null ) { return ; } for ( int i = 0 ; i < data. length ; i ++ ) { char c = data [ i ] ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' :"
      ],
      "mid_translation": [
        "Recursively parses the central directory data.",
        "Parses the central directory data.",
        "Parses the central directory data into the archive data structure.",
        "Recreates the central directory data.",
        "Recursively parse the central directory data."
      ],
      "output": [
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { parseData ( file ) ; } } } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { parseData ( file ) ; } } } else { if ( file. isDirectory ( ) ) { parseData ( ) ; } } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { parseData ( f ) ; } } } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { parseData ( file ) ; } } } if ( file. isDirectory ( ) ) { parseData ( ) ; } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { parseData ( file ) ; } } } else { if ( file. isDirectory ( ) ) { parseData ( file ) ; } } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( endDirData == null ) { endDirData = ByteBuffer. allocate ( endDirData. length ) ; endDirData. order ( ByteOrder. BIG_ENDIAN ) ; endDirData. limit ( endDirData. position ( ) + endDirData. length ) ; endDirData. position ( endDirData. position ( ) + endDirData. length ) ; } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( endDirData == null ) { endDirData = ByteBuffer. allocate ( endDirData. capacity ( ) ) ; endDirData. order ( ByteOrder. BIG_ENDIAN ) ; endDirData. limit ( endDirData. capacity ( ) ) ; endDirData. position ( endDirData. position ( ) + endDirData. limit ( ) ) ; } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( endDirData == null ) { endDirData = ByteBuffer. allocate ( endDirData. capacity ( ) ) ; endDirData. order ( ByteOrder. BIG_ENDIAN ) ; endDirData. limit ( endDirData. capacity ( ) ) ; endDirData. position ( endDirData. position ( ) + endDirData. position ( ) ) ; } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( endDirData == null ) { endDirData = ByteBuffer. allocate ( endDirData. capacity ( ) ) ; endDirData. order ( ByteOrder. BIG_ENDIAN ) ; endDirData. limit ( endDirData. capacity ( ) ) ; endDirData. position ( endDirData. position ( ) ) ; } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( endDirData == null ) { endDirData = ByteBuffer. allocate ( endDirData. length ) ; endDirData. order ( ByteOrder. BIG_ENDIAN ) ; endDirData. limit ( endDirData. position ( ) + endDirData. length ) ; endDirData. position ( endDirData. position ( ) ) ; } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( endDirData == null ) { throw new IOException ( \"EndDirData is null\" ) ; } if ( endDirData. length ( ) == 0 ) { throw new IOException ( \"EndDirData is empty\" ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( endDirData == null ) { throw new IOException ( \"EndDirData is null\" ) ; } if ( endDirData. length ( ) == 0 ) { throw new IOException ( \"EndDirData is empty\" ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( endDirData. length ( ) - 1 ) ; } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( endDirData == null ) { throw new IOException ( \"EndDirData is null\" ) ; } if ( endDirData. length ( ) == 0 ) { throw new IOException ( \"EndDirData is empty\" ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( endDirData. length ( ) - 1, endDirData. length ( ) - 1 ) ; } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( endDirData == null ) { throw new IOException ( \"EndDirData is null\" ) ; } if ( endDirData. length ( ) == 0 ) { throw new IOException ( \"EndDirData is empty\" ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { throw new IOException ( \"EndDirData is invalid\" ) ; } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( endDirData == null ) { throw new IOException ( \"EndDirData is null\" ) ; } if ( endDirData. length ( ) == 0 ) { throw new IOException ( \"EndDirData is empty\" ) ; } if ( endDirData. charAt ( endDirData. length ( ) - 1 ) =='' ) { endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; } endDirData = endDirData. substring ( 0, endDirData. length ( ) - 1 ) ; }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( file. exists ( ) ) { file. delete ( ) ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( int i = 0 ; i < files. length ; i ++ ) { close ( files [ i ] ) ; } } } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( file. exists ( ) ) { file. delete ( ) ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( int i = 0 ; i < files. length ; i ++ ) { delete ( files [ i ] ) ; } } } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( file. exists ( ) ) { file. delete ( ) ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { close ( file ) ; } } } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( this. file. exists ( ) ) { this. file. delete ( ) ; } if ( this. file. isDirectory ( ) ) { File [ ] files = this. file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { close ( file ) ; } } } }",
        "public void reparseCentralDirectoryData ( ) throws IOException { if ( file. exists ( ) ) { file. delete ( ) ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file : files ) { if ( file. isDirectory ( ) ) { close ( file ) ; } } } } }",
        "public void reparseCentralDirectoryData ( ) { if ( data == null ) { return ; } for ( int i = 0 ; i < data. length ; i ++ ) { char c = data [ i ] ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "public void reparseCentralDirectoryData ( ) { if ( data!= null ) { for ( int i = 0 ; i < data. length ; i ++ ) { char c = data [ i ] ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case '",
        "public void reparseCentralDirectoryData ( ) { if ( data == null ) { return ; } for ( int i = 0 ; i < data. length ; i ++ ) { char ch = data [ i ] ; switch ( ch ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case''",
        "public void reparseCentralDirectoryData ( ) { if ( data == null ) { return ; } for ( int i = 0 ; i < data. length ; i ++ ) { char c = data [ i ] ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' :",
        "public void reparseCentralDirectoryData ( ) { if ( data == null ) { return ; } for ( int i = 0 ; i < data. length ; i ++ ) { char c = data [ i ] ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' :"
      ]
    },
    "Compress_23_/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java_112-113": {
      "loc": "112-113",
      "input": "@Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) { dictSize |= (coder.properties[i + 1] << (8 * i)); } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); }",
      "target": "@Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) { dictSize |= (coder.properties[i + 1] & 0xffl) << (8 * i); } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); }",
      "function range": "106,9-118,9",
      "raw_output": [
        "public static Map < String, String > decodeLZMADictionary ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } LZMADictionary dictionary = new LZMADictionary ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { dictionary. data [ i ] = decodeLZMADictionary ( data [ i ] ) ; } return dictionary ; }",
        "public static Map < String, String > decodeLZMADictionary ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } LZMADictionary dictionary = new LZMADictionary ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { dictionary. data [ i ] = decodeLZMA ( data [ i ] ) ; } return dictionary ; }",
        "public static Map < String, String > decodeLZMADictionary ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } LZMADictionary dictionary = new LZMADictionary ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { dictionary. data [ i ] = decode ( data [ i ] ) ; } return dictionary ; }",
        "public static Map < String, String > decodeLZMADictionary ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } LZMADictionary dictionary = new LZMADictionary ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { dictionary. data [ i ] = decodeLZMADictionary ( data [ i ] ) ; } } return dictionary ; }",
        "public static Map < String, String > decodeLZMADictionary ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } LZMADictionary dictionary = new LZMADictionary ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { dictionary. data [ i ] = LZMA. decode ( data [ i ] ) ; } } return dictionary ; }",
        "public static PdfDictionary decodeStream ( InputStream is ) throws IOException { PdfDictionary dict = new PdfDictionary ( ) ; InputStreamReader reader = new InputStreamReader ( is ) ; reader. close ( ) ; reader = new InputStreamReader ( is ) ; reader. close ( ) ; return dict ; }",
        "public static PdfDictionary decodeStream ( InputStream is ) throws IOException { PdfDictionary dictionary = new PdfDictionary ( ) ; InputStreamReader reader = new InputStreamReader ( is ) ; reader. close ( ) ; reader = new InputStreamReader ( is ) ; reader. close ( ) ; return dictionary ; }",
        "public static PdfDictionary decodeStream ( InputStream is ) throws IOException { PdfDictionary dict = new PdfDictionary ( ) ; InputStreamReader reader = new InputStreamReader ( is ) ; reader. close ( ) ; reader = new InputStreamReader ( reader ) ; reader. close ( ) ; return dict ; }",
        "public static PdfDictionary decodeStream ( InputStream is ) throws IOException { PdfDictionary dictionary = new PdfDictionary ( ) ; InputStreamReader reader = new InputStreamReader ( is ) ; reader. close ( ) ; reader = new InputStreamReader ( reader ) ; reader. close ( ) ; return dictionary ; }",
        "public static PdfDictionary decodeStream ( InputStream is ) throws IOException { PdfDictionary dictionary = new PdfDictionary ( ) ; PdfReader reader = new PdfReader ( is ) ; reader. read ( dictionary ) ; return dictionary ; }",
        "public InputStream decodeStream ( ) throws IOException { InputStream is = null ; try { is = new ByteArrayInputStream ( ) ; return decodeStream ( is ) ; } finally { if ( is!= null ) { try { is. close ( ) ; } catch ( IOException e ) { } } } }",
        "public InputStream getInputStream ( ) throws IOException { InputStream is = null ; try { is = new ByteArrayInputStream ( data ) ; return is ; } finally { if ( is!= null ) { try { is. close ( ) ; } catch ( IOException e ) { } } } }",
        "public InputStream decodeStream ( ) throws IOException { InputStream is = null ; try { is = new ByteArrayInputStream ( ) ; return decodeStream ( is ) ; } finally { if ( is!= null ) { try { is. close ( ) ; } catch ( IOException ignore ) { } } } }",
        "public InputStream decodeStream ( ) throws IOException { InputStream is = null ; try { is = new ByteArrayInputStream ( ) ; return decodeStream ( is ) ; } finally { if ( is!= null ) { is. close ( ) ; } } }",
        "public InputStream getInputStream ( ) throws IOException { InputStream is = null ; try { is = new ByteArrayInputStream ( data ) ; return is ; } finally { if ( is!= null ) { try { is. close ( ) ; } catch ( IOException e ) { // ignore } } } }",
        "public static LZMADictionary decode ( InputStream in ) throws IOException { LZMADictionary dictionary = new LZMADictionary ( ) ; try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ) { String line = null ; while ( ( line = reader. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) { continue ; } String [ ] parts = line. split ( \"=\" ) ; if ( parts. length!= 2 ) { throw new IOException ( \"Invalid line: \" + line ) ; } String key = parts [ 0 ] ; String value = parts [ 1 ] ; dictionary. setKey ( key ) ; dictionary. setValue ( value ) ; } } return dictionary ; }",
        "public static LZMADictionary decode ( InputStream in ) throws IOException { LZMADictionary dictionary = new LZMADictionary ( ) ; try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ) { String line = null ; while ( ( line = reader. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) { continue ; } String [ ] parts = line. split ( \"=\" ) ; if ( parts. length!= 2 ) { throw new IOException ( \"Invalid line: \" + line ) ; } String key = parts [ 0 ] ; String value = parts [ 1 ] ; dictionary. put ( key, value ) ; } } return dictionary ; }",
        "public static LZMADictionary decode ( InputStream in ) throws IOException { LZMADictionary dictionary = new LZMADictionary ( ) ; try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ) { String line = null ; while ( ( line = reader. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. isEmpty ( ) ) { continue ; } String [ ] parts = line. split ( \"=\" ) ; if ( parts. length!= 2 ) { throw new IllegalArgumentException ( \"Invalid line: \" + line ) ; } String key = parts [ 0 ] ; String value = parts [ 1 ] ; dictionary. put ( key, value ) ; } } return dictionary ; }",
        "public static LZMADictionary decode ( InputStream in ) throws IOException { LZMADictionary dictionary = new LZMADictionary ( ) ; try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ) { String line = null ; while ( ( line = reader. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) { continue ; } String [ ] parts = line. split ( \"=\" ) ; if ( parts. length!= 2 ) { throw new IllegalArgumentException ( \"Invalid line: \" + line ) ; } String key = parts [ 0 ] ; String value = parts [ 1 ] ; dictionary. put ( key, value ) ; } } return dictionary ; }",
        "public static LZMADictionary decode ( InputStream in ) throws IOException { LZMADictionary dictionary = new LZMADictionary ( ) ; try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ) { String line = null ; while ( ( line = reader. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) { continue ; } String [ ] parts = line. split ( \"=\" ) ; if ( parts. length == 2 ) { String key = parts [ 0 ] ; String value = parts [ 1 ] ; dictionary. put ( key, value ) ; } } } return dictionary ; }",
        "public static InputStream decodeStream ( final InputStream is ) throws IOException { if ( is == null ) { throw new IllegalArgumentException ( \"inputStream must not be null\" ) ; } if ( is. available ( ) == 0 ) { throw new IllegalArgumentException ( \"inputStream must not be empty\" ) ; } if ( is. read ( ) < 0 ) { throw new IOException ( \"Invalid input stream\" ) ; } return new ByteArrayInputStream ( IOUtils. toByteArray ( is ) ) ; }",
        "public static InputStream decodeStream ( final InputStream is ) throws IOException { if ( is == null ) { throw new IllegalArgumentException ( \"inputStream must not be null\" ) ; } if ( is. available ( ) == 0 ) { throw new IllegalArgumentException ( \"inputStream must not be empty\" ) ; } return new ByteArrayInputStream ( IOUtils. toByteArray ( is ) ) ; }",
        "public static InputStream decodeStream ( final InputStream is ) throws IOException { if ( is == null ) { throw new IllegalArgumentException ( \"inputStream must not be null\" ) ; } if ( is. available ( ) == 0 ) { throw new IllegalArgumentException ( \"inputStream must not be empty\" ) ; } if ( is. read ( ) < 0 ) { throw new IOException ( \"Invalid input stream\" ) ; } return new ByteArrayInputStream ( is. read ( ) ) ; }",
        "public static InputStream decodeStream ( final InputStream is ) throws IOException { if ( is == null ) { throw new IllegalArgumentException ( \"inputStream must not be null\" ) ; } if ( is. available ( ) == 0 ) { throw new IllegalArgumentException ( \"inputStream must not be empty\" ) ; } if ( is. read ( )!='' ) { throw new IOException ( \"Invalid input stream\" ) ; } return new ByteArrayInputStream ( is. read ( ) ) ; }",
        "public static InputStream decodeStream ( final InputStream is ) throws IOException { if ( is == null ) { throw new IllegalArgumentException ( \"inputStream cannot be null\" ) ; } return new ByteArrayInputStream ( IOUtils. toByteArray ( is ) ) ; }"
      ],
      "mid_translation": [
        "Decode LZMA dictionary.",
        "Decodes and returns an input stream to a LZMA dictionary.",
        "Decodes and returns an InputStream for a LZMA dictionary.",
        "Decodes and returns an InputStream to a LZMA dictionary.",
        "Decodes and returns an input stream for a LZMA dictionary."
      ],
      "output": [
        "Map < String, String > decode ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } LZMADictionary dictionary = new LZMADictionary ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { dictionary. data [ i ] = decodeLZMADictionary ( data [ i ] ) ; } return dictionary ; }",
        "Map < String, String > decode ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } LZMADictionary dictionary = new LZMADictionary ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { dictionary. data [ i ] = decodeLZMA ( data [ i ] ) ; } return dictionary ; }",
        "Map < String, String > decode ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } LZMADictionary dictionary = new LZMADictionary ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { dictionary. data [ i ] = decode ( data [ i ] ) ; } return dictionary ; }",
        "Map < String, String > decode ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } LZMADictionary dictionary = new LZMADictionary ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { dictionary. data [ i ] = decodeLZMADictionary ( data [ i ] ) ; } } return dictionary ; }",
        "Map < String, String > decode ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return null ; } LZMADictionary dictionary = new LZMADictionary ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { dictionary. data [ i ] = LZMA. decode ( data [ i ] ) ; } } return dictionary ; }",
        "PdfDictionary decode ( InputStream is ) throws IOException { PdfDictionary dict = new PdfDictionary ( ) ; InputStreamReader reader = new InputStreamReader ( is ) ; reader. close ( ) ; reader = new InputStreamReader ( is ) ; reader. close ( ) ; return dict ; }",
        "PdfDictionary decode ( InputStream is ) throws IOException { PdfDictionary dictionary = new PdfDictionary ( ) ; InputStreamReader reader = new InputStreamReader ( is ) ; reader. close ( ) ; reader = new InputStreamReader ( is ) ; reader. close ( ) ; return dictionary ; }",
        "PdfDictionary decode ( InputStream is ) throws IOException { PdfDictionary dict = new PdfDictionary ( ) ; InputStreamReader reader = new InputStreamReader ( is ) ; reader. close ( ) ; reader = new InputStreamReader ( reader ) ; reader. close ( ) ; return dict ; }",
        "PdfDictionary decode ( InputStream is ) throws IOException { PdfDictionary dictionary = new PdfDictionary ( ) ; InputStreamReader reader = new InputStreamReader ( is ) ; reader. close ( ) ; reader = new InputStreamReader ( reader ) ; reader. close ( ) ; return dictionary ; }",
        "PdfDictionary decode ( InputStream is ) throws IOException { PdfDictionary dictionary = new PdfDictionary ( ) ; PdfReader reader = new PdfReader ( is ) ; reader. read ( dictionary ) ; return dictionary ; }",
        "InputStream decode ( ) throws IOException { InputStream is = null ; try { is = new ByteArrayInputStream ( ) ; return decodeStream ( is ) ; } finally { if ( is!= null ) { try { is. close ( ) ; } catch ( IOException e ) { } } } }",
        "InputStream decode ( ) throws IOException { InputStream is = null ; try { is = new ByteArrayInputStream ( data ) ; return is ; } finally { if ( is!= null ) { try { is. close ( ) ; } catch ( IOException e ) { } } } }",
        "InputStream decode ( ) throws IOException { InputStream is = null ; try { is = new ByteArrayInputStream ( ) ; return decodeStream ( is ) ; } finally { if ( is!= null ) { try { is. close ( ) ; } catch ( IOException ignore ) { } } } }",
        "InputStream decode ( ) throws IOException { InputStream is = null ; try { is = new ByteArrayInputStream ( ) ; return decodeStream ( is ) ; } finally { if ( is!= null ) { is. close ( ) ; } } }",
        "InputStream decode ( ) throws IOException { InputStream is = null ; try { is = new ByteArrayInputStream ( data ) ; return is ; } finally { if ( is!= null ) { try { is. close ( ) ; } catch ( IOException e ) { // ignore } } } }",
        "LZMADictionary decode ( InputStream in ) throws IOException { LZMADictionary dictionary = new LZMADictionary ( ) ; try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ) { String line = null ; while ( ( line = reader. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) { continue ; } String [ ] parts = line. split ( \"=\" ) ; if ( parts. length!= 2 ) { throw new IOException ( \"Invalid line: \" + line ) ; } String key = parts [ 0 ] ; String value = parts [ 1 ] ; dictionary. setKey ( key ) ; dictionary. setValue ( value ) ; } } return dictionary ; }",
        "LZMADictionary decode ( InputStream in ) throws IOException { LZMADictionary dictionary = new LZMADictionary ( ) ; try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ) { String line = null ; while ( ( line = reader. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) { continue ; } String [ ] parts = line. split ( \"=\" ) ; if ( parts. length!= 2 ) { throw new IOException ( \"Invalid line: \" + line ) ; } String key = parts [ 0 ] ; String value = parts [ 1 ] ; dictionary. put ( key, value ) ; } } return dictionary ; }",
        "LZMADictionary decode ( InputStream in ) throws IOException { LZMADictionary dictionary = new LZMADictionary ( ) ; try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ) { String line = null ; while ( ( line = reader. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. isEmpty ( ) ) { continue ; } String [ ] parts = line. split ( \"=\" ) ; if ( parts. length!= 2 ) { throw new IllegalArgumentException ( \"Invalid line: \" + line ) ; } String key = parts [ 0 ] ; String value = parts [ 1 ] ; dictionary. put ( key, value ) ; } } return dictionary ; }",
        "LZMADictionary decode ( InputStream in ) throws IOException { LZMADictionary dictionary = new LZMADictionary ( ) ; try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ) { String line = null ; while ( ( line = reader. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) { continue ; } String [ ] parts = line. split ( \"=\" ) ; if ( parts. length!= 2 ) { throw new IllegalArgumentException ( \"Invalid line: \" + line ) ; } String key = parts [ 0 ] ; String value = parts [ 1 ] ; dictionary. put ( key, value ) ; } } return dictionary ; }",
        "LZMADictionary decode ( InputStream in ) throws IOException { LZMADictionary dictionary = new LZMADictionary ( ) ; try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ) { String line = null ; while ( ( line = reader. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) { continue ; } String [ ] parts = line. split ( \"=\" ) ; if ( parts. length == 2 ) { String key = parts [ 0 ] ; String value = parts [ 1 ] ; dictionary. put ( key, value ) ; } } } return dictionary ; }",
        "InputStream decode ( final InputStream is ) throws IOException { if ( is == null ) { throw new IllegalArgumentException ( \"inputStream must not be null\" ) ; } if ( is. available ( ) == 0 ) { throw new IllegalArgumentException ( \"inputStream must not be empty\" ) ; } if ( is. read ( ) < 0 ) { throw new IOException ( \"Invalid input stream\" ) ; } return new ByteArrayInputStream ( IOUtils. toByteArray ( is ) ) ; }",
        "InputStream decode ( final InputStream is ) throws IOException { if ( is == null ) { throw new IllegalArgumentException ( \"inputStream must not be null\" ) ; } if ( is. available ( ) == 0 ) { throw new IllegalArgumentException ( \"inputStream must not be empty\" ) ; } return new ByteArrayInputStream ( IOUtils. toByteArray ( is ) ) ; }",
        "InputStream decode ( final InputStream is ) throws IOException { if ( is == null ) { throw new IllegalArgumentException ( \"inputStream must not be null\" ) ; } if ( is. available ( ) == 0 ) { throw new IllegalArgumentException ( \"inputStream must not be empty\" ) ; } if ( is. read ( ) < 0 ) { throw new IOException ( \"Invalid input stream\" ) ; } return new ByteArrayInputStream ( is. read ( ) ) ; }",
        "InputStream decode ( final InputStream is ) throws IOException { if ( is == null ) { throw new IllegalArgumentException ( \"inputStream must not be null\" ) ; } if ( is. available ( ) == 0 ) { throw new IllegalArgumentException ( \"inputStream must not be empty\" ) ; } if ( is. read ( )!='' ) { throw new IOException ( \"Invalid input stream\" ) ; } return new ByteArrayInputStream ( is. read ( ) ) ; }",
        "InputStream decode ( final InputStream is ) throws IOException { if ( is == null ) { throw new IllegalArgumentException ( \"inputStream cannot be null\" ) ; } return new ByteArrayInputStream ( IOUtils. toByteArray ( is ) ) ; }"
      ]
    },
    "Compress_27_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_133-134": {
      "loc": "133-134",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } if (start == end) { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
      "target": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } <mask> for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
      "function range": "102,5-150,5",
      "raw_output": [
        "public static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buffer, i, offset + length - i - 1 ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i + offset, length - i ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i, offset + length - i - 1 ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i + offset, length - i - 1 ) ; } return result ; }",
        "public static long fromOctalBytes ( byte [ ] bytes ) { long result = 0 ; for ( int i = 0 ; i < bytes. length ; i ++ ) { result <<= 8 ; result |= ( bytes [ i ] & 0xff ) ; } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( CharSequence s ) { long result = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( CharSequence s ) { long result = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( CharSequence s ) { long result = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( CharSequence s ) { long result = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( CharSequence s ) { long result = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static byte [ ] getOctalBytes ( String s ) { byte [ ] result = new byte [ s. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = ( byte ) Integer. parseInt ( s. substring ( i, i + 1 ), 16 ) ; } return result ; }",
        "public static byte [ ] parseOctal ( String s ) { byte [ ] result = new byte [ s. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = ( byte ) Integer. parseInt ( s. substring ( i, i + 1 ), 16 ) ; } return result ; }",
        "public static byte [ ] getOctalBytes ( String s ) { byte [ ] result = new byte [ s. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = getOctalByte ( s. charAt ( i ) ) ; } return result ; }",
        "public static byte [ ] getOctalBytes ( String s ) { byte [ ] result = new byte [ s. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = ( byte ) Integer. parseInt ( s. substring ( i, i + 3 ), 16 ) ; } return result ; }",
        "public static byte [ ] parseOctal ( String s ) { byte [ ] result = new byte [ s. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = ( byte ) parseOctal ( s. charAt ( i ) ) ; } return result ; }"
      ],
      "mid_translation": [
        "Parse an octal sequence of bytes into a long.",
        "Parse an octal string into a long.",
        "Parses an octal string into a long.",
        "Parse an octal sequence into a long.",
        "Parse an octal string into a number of bytes."
      ],
      "output": [
        "public static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buffer, i, offset + length - i - 1 ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i + offset, length - i ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i, offset + length - i - 1 ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result <<= 8 ; result |= parseOctal ( buf, i + offset, length - i - 1 ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] bytes ) { long result = 0 ; for ( int i = 0 ; i < bytes. length ; i ++ ) { result <<= 8 ; result |= ( bytes [ i ] & 0xff ) ; } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( CharSequence s ) { long result = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( CharSequence s ) { long result = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( CharSequence s ) { long result = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( CharSequence s ) { long result = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( CharSequence s ) { long result = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static byte [ ] parseOctal ( String s ) { byte [ ] result = new byte [ s. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = ( byte ) Integer. parseInt ( s. substring ( i, i + 1 ), 16 ) ; } return result ; }",
        "public static byte [ ] parseOctal ( String s ) { byte [ ] result = new byte [ s. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = ( byte ) Integer. parseInt ( s. substring ( i, i + 1 ), 16 ) ; } return result ; }",
        "public static byte [ ] parseOctal ( String s ) { byte [ ] result = new byte [ s. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = getOctalByte ( s. charAt ( i ) ) ; } return result ; }",
        "public static byte [ ] parseOctal ( String s ) { byte [ ] result = new byte [ s. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = ( byte ) Integer. parseInt ( s. substring ( i, i + 3 ), 16 ) ; } return result ; }",
        "public static byte [ ] parseOctal ( String s ) { byte [ ] result = new byte [ s. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = ( byte ) parseOctal ( s. charAt ( i ) ) ; } return result ; }"
      ]
    },
    "Compress_31_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_134-135": {
      "loc": "134-135",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; } if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
      "target": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
      "function range": "101,5-148,5",
      "raw_output": [
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long getOctalLong ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static byte [ ] getOctalBytes ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buffer [ i ] ; } return result ; }",
        "public static byte [ ] getOctal ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = buf [ offset + i ] ; } return result ; }",
        "public static byte [ ] getOctalBytes ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buf [ i ] ; } return result ; }",
        "public static byte [ ] getOctal ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { byte b = buf [ i ] ; result [ i ] = b ; } return result ; }",
        "public static byte [ ] getOctal ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buf [ i ] ; } return result ; }",
        "public static byte [ ] getOctalBytes ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = buffer [ offset + i ] ; } return result ; }",
        "public static byte [ ] getOctalBytes ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buffer [ i ] ; } return result ; }",
        "public static byte [ ] getOctalBytes ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = ( byte ) ( buf [ offset + i ] & 0xff ) ; } return result ; }",
        "public static byte [ ] getOctalBytes ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = ( byte ) ( buf [ offset + i ] & 0xFF ) ; } return result ; }",
        "public static byte [ ] getOctalBytes ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = ( byte ) ( buf [ i ] & 0xff ) ; } return result ; }",
        "private static long parseOctal ( byte [ ] buffer ) { long result = 0 ; for ( int i = 0 ; i < buffer. length ; i ++ ) { result = result << 8 | buffer [ i ] ; } return result ; }",
        "private static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result = result << 8 ; result |= buffer [ i ] ; } return result ; }",
        "private static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result = result << 8 ; result |= ( buf [ i ] & 0xff ) ; } return result ; }",
        "private static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result = result << 8 ; result |= ( buffer [ i ] & 0xff ) ; } return result ; }",
        "private static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result = result << 8 ; result |= buffer [ i ] & 0xff ; } return result ; }"
      ],
      "mid_translation": [
        "Parse an octal string into a long.",
        "Parses an octal string into a long.",
        "Parse an octal string from a buffer.",
        "Parse an octal string from a byte buffer.",
        "Parse the octal version of the given buffer."
      ],
      "output": [
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result = result << 8 ; break ; } } return result ; }",
        "public static long parseOctal ( String str ) { if ( str == null || str. length ( ) == 0 ) { return 0 ; } long result = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : result ++ ; break ; } } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buffer [ i ] ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = buf [ offset + i ] ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buf [ i ] ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { byte b = buf [ i ] ; result [ i ] = b ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buf [ i ] ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = buffer [ offset + i ] ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buffer, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = buffer [ i ] ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = ( byte ) ( buf [ offset + i ] & 0xff ) ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = ( byte ) ( buf [ offset + i ] & 0xFF ) ; } return result ; }",
        "public static byte [ ] parseOctal ( byte [ ] buf, int offset, int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = ( byte ) ( buf [ i ] & 0xff ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buffer ) { long result = 0 ; for ( int i = 0 ; i < buffer. length ; i ++ ) { result = result << 8 | buffer [ i ] ; } return result ; }",
        "public static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result = result << 8 ; result |= buffer [ i ] ; } return result ; }",
        "public static long parseOctal ( byte [ ] buf, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result = result << 8 ; result |= ( buf [ i ] & 0xff ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result = result << 8 ; result |= ( buffer [ i ] & 0xff ) ; } return result ; }",
        "public static long parseOctal ( byte [ ] buffer, int offset, int length ) { long result = 0 ; for ( int i = offset ; i < offset + length ; i ++ ) { result = result << 8 ; result |= buffer [ i ] & 0xff ; } return result ; }"
      ]
    },
    "Compress_38_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java_859-860": {
      "loc": "859-860",
      "input": "@Override public boolean isDirectory() { if (file != null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; } if (getName().endsWith(\"/\")) { return true; } return false; }",
      "target": "@Override public boolean isDirectory() { if (file != null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; } if (!isPaxHeader() && !isGlobalPaxHeader() && getName().endsWith(\"/\")) { return true; } return false; }",
      "function range": "849,5-864,5",
      "raw_output": [
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } return false ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; return files!= null && files. length > 0 ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) return true ; } } return false ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { return true ; } return false ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files == null ) return false ; for ( File file2 : files ) if ( file2. isDirectory ( ) ) return true ; return false ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } return false ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; return files!= null && files. length > 0 ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { return true ; } return false ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files == null ) return false ; for ( File file2 : files ) { if ( file2. isDirectory ( ) ) return true ; } return false ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) return true ; } } return false ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file2 : files ) { if ( file2. isDirectory ( ) ) { return true ; } } } return false ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } return false ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } File parent = file. getParentFile ( ) ; if ( parent == null ) { return false ; } return parent. isDirectory ( file ) ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; return files!= null && files. length > 0 ; } return false ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } File parent = file. getParentFile ( ) ; if ( parent!= null ) { return parent. isDirectory ( file ) ; } return false ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } } return false ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file2 : files ) { if ( file2. isDirectory ( ) ) { return true ; } } } } return false ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File child : files ) { if ( child. isDirectory ( ) ) { return true ; } } } } return false ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; for ( File file2 : files ) { if ( file2. isDirectory ( ) ) { return true ; } } } return false ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file2 : files ) { if ( file2. isDirectory ( ) ) { return true ; } } } return false ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file2 : files ) { if ( file2. isDirectory ( ) ) { return true ; } } } return false ; }",
        "public static boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } return false ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; return files!= null && files. length > 0 ; } return false ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } return false ; }",
        "public static boolean isDirectory ( File file ) { if ( file == null ) { return false ; } File parent = file. getParentFile ( ) ; if ( parent == null ) { return false ; } return parent. isDirectory ( file ) ; }"
      ],
      "mid_translation": [
        "Returns true if the file is a directory ; false otherwise.",
        "Return true if the file is a directory ; false otherwise.",
        "Determines whether the file is a directory or not.",
        "Checks whether the file is a directory.",
        "Determines whether the file is a directory."
      ],
      "output": [
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; return files!= null && files. length > 0 ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) return true ; } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { return true ; } return false ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files == null ) return false ; for ( File file2 : files ) if ( file2. isDirectory ( ) ) return true ; return false ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; return files!= null && files. length > 0 ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { return true ; } return false ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files == null ) return false ; for ( File file2 : files ) { if ( file2. isDirectory ( ) ) return true ; } return false ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) return true ; } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file2 : files ) { if ( file2. isDirectory ( ) ) { return true ; } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } File parent = file. getParentFile ( ) ; if ( parent == null ) { return false ; } return parent. isDirectory ( file ) ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; return files!= null && files. length > 0 ; } return false ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } File parent = file. getParentFile ( ) ; if ( parent!= null ) { return parent. isDirectory ( file ) ; } return false ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file2 : files ) { if ( file2. isDirectory ( ) ) { return true ; } } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File child : files ) { if ( child. isDirectory ( ) ) { return true ; } } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; for ( File file2 : files ) { if ( file2. isDirectory ( ) ) { return true ; } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file2 : files ) { if ( file2. isDirectory ( ) ) { return true ; } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File file2 : files ) { if ( file2. isDirectory ( ) ) { return true ; } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { File [ ] files = file. listFiles ( ) ; if ( files!= null ) { for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; return files!= null && files. length > 0 ; } return false ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } if ( file. isDirectory ( ) ) { File [ ] files = file. listFiles ( ) ; for ( File f : files ) { if ( f. isDirectory ( ) ) { return true ; } } } return false ; }",
        "@Override public boolean isDirectory ( File file ) { if ( file == null ) { return false ; } File parent = file. getParentFile ( ) ; if ( parent == null ) { return false ; } return parent. isDirectory ( file ) ; }"
      ]
    },
    "Compress_46_/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java_529-531": {
      "loc": "529-531",
      "input": "private static ZipLong unixTimeToZipLong(long l) { final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
      "target": "private static ZipLong unixTimeToZipLong(long l) { if (l < Integer.MIN_VALUE || l > Integer.MAX_VALUE) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
      "function range": "528,5-534,5",
      "raw_output": [
        "public static ZipLong toZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } if ( time < MIN_TIME ) { throw new IllegalArgumentException ( \"time cannot be less than MIN_TIME\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } ZipLong z = new ZipLong ( ) ; z. setTime ( time ) ; z. setZ ( z ) ; return z ; }",
        "public static ZipLong toZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } if ( time < MIN_TIME ) { throw new IllegalArgumentException ( \"time cannot be less than MIN_TIME\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } ZipLong z = new ZipLong ( time ) ; z. setZ ( z ) ; return z ; }",
        "public static ZipLong toZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } if ( time < MIN_TIME ) { throw new IllegalArgumentException ( \"time cannot be less than MIN_TIME\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } return new ZipLong ( time ) ; }",
        "public static ZipLong toZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } if ( time < MIN_TIME ) { throw new IllegalArgumentException ( \"time cannot be less than MIN_TIME\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } ZipLong z = new ZipLong ( ) ; z. setTime ( time ) ; return z ; }",
        "public static ZipLong toZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } return new ZipLong ( time ) ; }",
        "public static long [ ] toZipLong ( double time ) { long [ ] z = new long [ 2 ] ; z [ 0 ] = time ; z [ 1 ] = time ; z [ 2 ] = time ; z [ 3 ] = time ; return z ; }",
        "public static long [ ] toZipLong ( double time ) { long [ ] z = new long [ 2 ] ; z [ 0 ] = time ; z [ 1 ] = time ; z [ 2 ] = time ; z [ 3 ] = time ; z [ 4 ] = time ; return z ; }",
        "public static long [ ] toZipLong ( double time ) { long [ ] z = new long [ 2 ] ; z [ 0 ] = time ; z [ 1 ] = time ; z [ 2 ] = 0 ; z [ 3 ] = 0 ; z [ 4 ] = 0 ; return z ; }",
        "public static long [ ] toZipLong ( double time ) { long [ ] z = new long [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { z [ i ] = Math. round ( time * i ) ; } return z ; }",
        "public static long [ ] toZipLong ( double time ) { long [ ] z = new long [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { z [ i ] = toZipLong ( time ) ; } return z ; }",
        "public static ZipLong valueOf ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } return new ZipLong ( time ) ; }",
        "public static ZipLong valueOf ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } return new ZipLong ( time ) ; }",
        "public static ZipLong valueOf ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } return new ZipLong ( time ) ; }",
        "public static ZipLong valueOf ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } return new ZipLong ( time ) ; }",
        "public static ZipLong valueOf ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than \" + MAX_TIME ) ; } if ( time < MIN_TIME ) { throw new IllegalArgumentException ( \"time cannot be less than \" + MIN_TIME ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than \" + MAX_TIME ) ; } return new ZipLong ( time ) ; }",
        "public static ZipLong valueOf ( long time ) { if ( time < 0 ) { return null ; } if ( time > 0 ) { return new ZipLong ( time ) ; } return new ZipLong ( ) ; }",
        "@ SuppressWarnings ( \"deprecation\" ) public static ZipLong toZipLong ( long time ) { return new ZipLong ( System. currentTimeMillis ( ) + time ) ; }",
        "public static ZipLong valueOf ( long time ) { if ( time < 0 ) { return null ; } if ( time > 0 ) { return new ZipLong ( time ) ; } return null ; }",
        "@ SuppressWarnings ( \"deprecation\" ) public static ZipLong toZipLong ( long time ) { return new ZipLong ( System. currentTimeMillis ( ) / 1000L ) ; }",
        "@ SuppressWarnings ( \"deprecation\" ) public static ZipLong toZipLong ( long time ) { return new ZipLong ( System. currentTimeMillis ( ) / 1000 + time ) ; }",
        "public static long [ ] toZipLong ( double [ ] time ) { long [ ] z = new long [ time. length ] ; for ( int i = 0 ; i < z. length ; i ++ ) { z [ i ] = toZipLong ( time [ i ] ) ; } return z ; }",
        "public static long [ ] toZipLong ( double [ ] time ) { long [ ] z = new long [ time. length ] ; for ( int i = 0 ; i < time. length ; i ++ ) { z [ i ] = toZipLong ( time [ i ] ) ; } return z ; }",
        "public static long [ ] toZipLong ( double [ ] time ) { long [ ] z = new long [ time. length ] ; for ( int i = 0 ; i < z. length ; i ++ ) { z [ i ] = Math. round ( time [ i ] ) ; } return z ; }",
        "public static long [ ] toZipLong ( double [ ] time ) { long [ ] z = new long [ time. length ] ; for ( int i = 0 ; i < z. length ; i ++ ) { z [ i ] = time [ i ] ; } return z ; }",
        "public static long [ ] toZipLong ( double time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( time ) ; return toZipLong ( c. getTimeInMillis ( ) ) ; }"
      ],
      "mid_translation": [
        "Converts a unix time to a ZipLong.",
        "Converts a unix time to a zip long.",
        "Converts a unix time into a ZipLong.",
        "Converts a unix time to a ZipLong object.",
        "Converts a unix time into a zip long."
      ],
      "output": [
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } if ( time < MIN_TIME ) { throw new IllegalArgumentException ( \"time cannot be less than MIN_TIME\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } ZipLong z = new ZipLong ( ) ; z. setTime ( time ) ; z. setZ ( z ) ; return z ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } if ( time < MIN_TIME ) { throw new IllegalArgumentException ( \"time cannot be less than MIN_TIME\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } ZipLong z = new ZipLong ( time ) ; z. setZ ( z ) ; return z ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } if ( time < MIN_TIME ) { throw new IllegalArgumentException ( \"time cannot be less than MIN_TIME\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } return new ZipLong ( time ) ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } if ( time < MIN_TIME ) { throw new IllegalArgumentException ( \"time cannot be less than MIN_TIME\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than MAX_TIME\" ) ; } ZipLong z = new ZipLong ( ) ; z. setTime ( time ) ; return z ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } return new ZipLong ( time ) ; }",
        "private static long [ ] unixTimeToZipLong ( double time ) { long [ ] z = new long [ 2 ] ; z [ 0 ] = time ; z [ 1 ] = time ; z [ 2 ] = time ; z [ 3 ] = time ; return z ; }",
        "private static long [ ] unixTimeToZipLong ( double time ) { long [ ] z = new long [ 2 ] ; z [ 0 ] = time ; z [ 1 ] = time ; z [ 2 ] = time ; z [ 3 ] = time ; z [ 4 ] = time ; return z ; }",
        "private static long [ ] unixTimeToZipLong ( double time ) { long [ ] z = new long [ 2 ] ; z [ 0 ] = time ; z [ 1 ] = time ; z [ 2 ] = 0 ; z [ 3 ] = 0 ; z [ 4 ] = 0 ; return z ; }",
        "private static long [ ] unixTimeToZipLong ( double time ) { long [ ] z = new long [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { z [ i ] = Math. round ( time * i ) ; } return z ; }",
        "private static long [ ] unixTimeToZipLong ( double time ) { long [ ] z = new long [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { z [ i ] = toZipLong ( time ) ; } return z ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } return new ZipLong ( time ) ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } return new ZipLong ( time ) ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } return new ZipLong ( time ) ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MIN_VALUE ) { return new ZipLong ( time ) ; } if ( time == Long. MAX_VALUE ) { return new ZipLong ( time ) ; } return new ZipLong ( time ) ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { throw new IllegalArgumentException ( \"time cannot be negative\" ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than \" + MAX_TIME ) ; } if ( time < MIN_TIME ) { throw new IllegalArgumentException ( \"time cannot be less than \" + MIN_TIME ) ; } if ( time > MAX_TIME ) { throw new IllegalArgumentException ( \"time cannot be greater than \" + MAX_TIME ) ; } return new ZipLong ( time ) ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { return null ; } if ( time > 0 ) { return new ZipLong ( time ) ; } return new ZipLong ( ) ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { return new ZipLong ( System. currentTimeMillis ( ) + time ) ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { if ( time < 0 ) { return null ; } if ( time > 0 ) { return new ZipLong ( time ) ; } return null ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { return new ZipLong ( System. currentTimeMillis ( ) / 1000L ) ; }",
        "private static ZipLong unixTimeToZipLong ( long time ) { return new ZipLong ( System. currentTimeMillis ( ) / 1000 + time ) ; }",
        "private static long [ ] unixTimeToZipLong ( double [ ] time ) { long [ ] z = new long [ time. length ] ; for ( int i = 0 ; i < z. length ; i ++ ) { z [ i ] = toZipLong ( time [ i ] ) ; } return z ; }",
        "private static long [ ] unixTimeToZipLong ( double [ ] time ) { long [ ] z = new long [ time. length ] ; for ( int i = 0 ; i < time. length ; i ++ ) { z [ i ] = toZipLong ( time [ i ] ) ; } return z ; }",
        "private static long [ ] unixTimeToZipLong ( double [ ] time ) { long [ ] z = new long [ time. length ] ; for ( int i = 0 ; i < z. length ; i ++ ) { z [ i ] = Math. round ( time [ i ] ) ; } return z ; }",
        "private static long [ ] unixTimeToZipLong ( double [ ] time ) { long [ ] z = new long [ time. length ] ; for ( int i = 0 ; i < z. length ; i ++ ) { z [ i ] = time [ i ] ; } return z ; }",
        "private static long [ ] unixTimeToZipLong ( double time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( time ) ; return toZipLong ( c. getTimeInMillis ( ) ) ; }"
      ]
    },
    "Csv_1_/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java_58-59": {
      "loc": "58-59",
      "input": "@Override public int read() throws IOException { int current = super.read(); if (current == '\\n') { lineCounter++; } lastChar = current; return lastChar; }",
      "target": "@Override public int read() throws IOException { int current = super.read(); if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) { lineCounter++; } lastChar = current; return lastChar; }",
      "function range": "55,5-63,5",
      "raw_output": [
        "public String readLine ( ) throws IOException { if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; return null ; }",
        "public String readLine ( ) throws IOException { if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; if ( _is. ready ( ) ) { return _is. readLine ( ) ; } return _is. readLine ( ) ; }",
        "public String readLine ( ) throws IOException { if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; return \"\" ; }",
        "public String readLine ( ) throws IOException { if ( _is. hasNext ( ) ) _is. next ( ) ; if ( _is. hasNext ( ) ) _is. next ( ) ; _is. close ( ) ; return _is. toString ( ) ; }",
        "public String readLine ( ) throws IOException { if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; if ( _is. ready ( ) ) { return _is. readLine ( ) ; } return null ; }",
        "public int readLine ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "public int readLine ( ) throws IOException { int c = in. read ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "public int readLine ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "@ Override public int read ( ) throws IOException { int c = super. read ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "public int readLine ( ) throws IOException { int c = in. read ( ) ; if ( c == - 1 ) throw new EOFException ( ) ; return c ; }",
        "protected char readLine ( ) throws IOException { char c = super. readLine ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "protected char readLine ( ) throws IOException { char c = super. readLine ( ) ; if ( c =='' ) c = super. read ( ) ; if ( c =='' ) c = super. read ( ) ; if ( c =='' ) c = super. read ( ) ; return c ; }",
        "protected char readLine ( ) throws IOException { char c = super. readLine ( ) ; if ( c =='' ) { c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } } } return c ; }",
        "private char readLine ( ) throws IOException { char c = super. readLine ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "protected char readLine ( ) throws IOException { char c = super. readLine ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "private char readNextChar ( ) throws IOException { char c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "private char readNextChar ( ) throws IOException { char c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } } } return c ; }",
        "private char readNextChar ( ) throws IOException { char c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } } return c ; }",
        "private char readNextChar ( ) throws IOException { char c = nextChar ( ) ; if ( c =='' ) { c = readChar ( ) ; } if ( c =='' ) { c = readChar ( ) ; } if ( c =='' ) { c = readChar ( ) ; } return c ; }",
        "private char readNextChar ( ) throws IOException { char c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "public int readLine ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "public int readLine ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { c = super. readLine ( ) ; } if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "public int readLine ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { c = super. read ( ) ; } if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "public int readLine ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "public char read ( ) throws IOException { int c = in. read ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }"
      ],
      "mid_translation": [
        "Reads the next line.",
        "Reads a line and returns the last character read.",
        "Reads the next line and returns the current character.",
        "Reads the next line and returns the last character.",
        "Reads a line and returns the current character."
      ],
      "output": [
        "@Override public String read ( ) throws IOException { if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; return null ; }",
        "@Override public String read ( ) throws IOException { if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; if ( _is. ready ( ) ) { return _is. readLine ( ) ; } return _is. readLine ( ) ; }",
        "@Override public String read ( ) throws IOException { if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; return \"\" ; }",
        "@Override public String read ( ) throws IOException { if ( _is. hasNext ( ) ) _is. next ( ) ; if ( _is. hasNext ( ) ) _is. next ( ) ; _is. close ( ) ; return _is. toString ( ) ; }",
        "@Override public String read ( ) throws IOException { if ( _is. ready ( ) ) { return _is. readLine ( ) ; } _is. ready ( ) ; if ( _is. ready ( ) ) { return _is. readLine ( ) ; } return null ; }",
        "@Override public int read ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "@Override public int read ( ) throws IOException { int c = in. read ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "@Override public int read ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "@Override public int read ( ) throws IOException { int c = super. read ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "@Override public int read ( ) throws IOException { int c = in. read ( ) ; if ( c == - 1 ) throw new EOFException ( ) ; return c ; }",
        "@Override public char read ( ) throws IOException { char c = super. readLine ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "@Override public char read ( ) throws IOException { char c = super. readLine ( ) ; if ( c =='' ) c = super. read ( ) ; if ( c =='' ) c = super. read ( ) ; if ( c =='' ) c = super. read ( ) ; return c ; }",
        "@Override public char read ( ) throws IOException { char c = super. readLine ( ) ; if ( c =='' ) { c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } } } return c ; }",
        "@Override public char read ( ) throws IOException { char c = super. readLine ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "@Override public char read ( ) throws IOException { char c = super. readLine ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "@Override public char read ( ) throws IOException { char c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "@Override public char read ( ) throws IOException { char c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } } } return c ; }",
        "@Override public char read ( ) throws IOException { char c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } } return c ; }",
        "@Override public char read ( ) throws IOException { char c = nextChar ( ) ; if ( c =='' ) { c = readChar ( ) ; } if ( c =='' ) { c = readChar ( ) ; } if ( c =='' ) { c = readChar ( ) ; } return c ; }",
        "@Override public char read ( ) throws IOException { char c = super. read ( ) ; if ( c =='' ) { c = super. read ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "@Override public int read ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "@Override public int read ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { c = super. readLine ( ) ; } if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "@Override public int read ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { c = super. read ( ) ; } if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }",
        "@Override public int read ( ) throws IOException { int c = super. readLine ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } if ( c =='' ) { c = super. read ( ) ; } return c ; }",
        "@Override public char read ( ) throws IOException { int c = in. read ( ) ; if ( c == - 1 ) { throw new EOFException ( ) ; } return c ; }"
      ]
    },
    "Csv_4_/src/main/java/org/apache/commons/csv/CSVParser.java_288-289": {
      "loc": "288-289",
      "input": "public Map<String, Integer> getHeaderMap() { return new LinkedHashMap<String, Integer>(this.headerMap); }",
      "target": "public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap); }",
      "function range": "287,5-289,5",
      "raw_output": [
        "public Map < String, List < String > > getHeaderMap ( ) { if ( headerMap == null ) { headerMap = new HashMap < String, List < String > > ( ) ; } return headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( _headerMap == null ) { _headerMap = new HashMap < String, String > ( ) ; } return _headerMap ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { if ( _headerMap == null ) { _headerMap = new HashMap < String, List < String > > ( ) ; } return _headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headerMap == null ) { headerMap = new HashMap < String, String > ( ) ; } return headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headers == null ) { headers = new HashMap < String, String > ( ) ; } return headers ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headerMap == null ) { headerMap = new HashMap < String, String > ( ) ; } return headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( _headerMap == null ) { _headerMap = new HashMap < String, String > ( ) ; } return _headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headers == null ) { headers = new HashMap < String, String > ( ) ; } return headers ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headersMap == null ) { headersMap = new HashMap < String, String > ( ) ; } return headersMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headerMap == null ) { headerMap = new HashMap <> ( ) ; } return headerMap ; }",
        "public Map < String, String > getHeaders ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } Map < String, String > copy = new HashMap <> ( ) ; copy. putAll ( headers ) ; return copy ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { if ( headerMap == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( headerMap ) ; }",
        "public Map < String, String > getHeaders ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } Map < String, String > copy = new HashMap < String, String > ( ) ; copy. putAll ( headers ) ; return copy ; }",
        "public Map < String, String > getHeaders ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( new HashMap < String, String > ( headers ) ) ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { Map < String, List < String > > map = new HashMap < String, List < String > > ( ) ; map. put ( \"Content-Type\", contentType ) ; map. put ( \"Content-Length\", contentLength ) ; return map ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { Map < String, List < String > > map = new HashMap <> ( ) ; for ( Entry < String, List < String > > entry : headers. entrySet ( ) ) { map. put ( entry. getKey ( ), entry. getValue ( ) ) ; } return map ; }",
        "public Map < String, String > getHeaderMap ( ) { Map < String, String > map = new HashMap < String, String > ( ) ; for ( Entry < String, String > entry : headers. entrySet ( ) ) { map. put ( entry. getKey ( ), entry. getValue ( ) ) ; } return map ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { Map < String, List < String > > map = new HashMap <> ( ) ; for ( Entry < String, List < String > > header : headers. entrySet ( ) ) { map. put ( header. getKey ( ), header. getValue ( ) ) ; } return map ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { if ( headerMap == null ) { headerMap = new HashMap < String, List < String > > ( ) ; } return headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( m_headerMap == null ) { m_headerMap = new HashMap < String, String > ( ) ; } return m_headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( headers ) ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headerMap == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( headerMap ) ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( headers ) ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } else { return Collections. unmodifiableMap ( headers ) ; } }",
        "public Map < String, List < String > > getHeaderMap ( ) { if ( headerMap == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( headerMap ) ; }"
      ],
      "mid_translation": [
        "Gets the header map.",
        "Returns the header map.",
        "Returns a copy of the header map.",
        "Get the header map.",
        "Gets header map."
      ],
      "output": [
        "public Map < String, List < String > > getHeaderMap ( ) { if ( headerMap == null ) { headerMap = new HashMap < String, List < String > > ( ) ; } return headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( _headerMap == null ) { _headerMap = new HashMap < String, String > ( ) ; } return _headerMap ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { if ( _headerMap == null ) { _headerMap = new HashMap < String, List < String > > ( ) ; } return _headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headerMap == null ) { headerMap = new HashMap < String, String > ( ) ; } return headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headers == null ) { headers = new HashMap < String, String > ( ) ; } return headers ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headerMap == null ) { headerMap = new HashMap < String, String > ( ) ; } return headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( _headerMap == null ) { _headerMap = new HashMap < String, String > ( ) ; } return _headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headers == null ) { headers = new HashMap < String, String > ( ) ; } return headers ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headersMap == null ) { headersMap = new HashMap < String, String > ( ) ; } return headersMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headerMap == null ) { headerMap = new HashMap <> ( ) ; } return headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } Map < String, String > copy = new HashMap <> ( ) ; copy. putAll ( headers ) ; return copy ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { if ( headerMap == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( headerMap ) ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } Map < String, String > copy = new HashMap < String, String > ( ) ; copy. putAll ( headers ) ; return copy ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( new HashMap < String, String > ( headers ) ) ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { Map < String, List < String > > map = new HashMap < String, List < String > > ( ) ; map. put ( \"Content-Type\", contentType ) ; map. put ( \"Content-Length\", contentLength ) ; return map ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { Map < String, List < String > > map = new HashMap <> ( ) ; for ( Entry < String, List < String > > entry : headers. entrySet ( ) ) { map. put ( entry. getKey ( ), entry. getValue ( ) ) ; } return map ; }",
        "public Map < String, String > getHeaderMap ( ) { Map < String, String > map = new HashMap < String, String > ( ) ; for ( Entry < String, String > entry : headers. entrySet ( ) ) { map. put ( entry. getKey ( ), entry. getValue ( ) ) ; } return map ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { Map < String, List < String > > map = new HashMap <> ( ) ; for ( Entry < String, List < String > > header : headers. entrySet ( ) ) { map. put ( header. getKey ( ), header. getValue ( ) ) ; } return map ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { if ( headerMap == null ) { headerMap = new HashMap < String, List < String > > ( ) ; } return headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( m_headerMap == null ) { m_headerMap = new HashMap < String, String > ( ) ; } return m_headerMap ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( headers ) ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headerMap == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( headerMap ) ; }",
        "public Map < String, List < String > > getHeaderMap ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( headers ) ; }",
        "public Map < String, String > getHeaderMap ( ) { if ( headers == null ) { return Collections. emptyMap ( ) ; } else { return Collections. unmodifiableMap ( headers ) ; } }",
        "public Map < String, List < String > > getHeaderMap ( ) { if ( headerMap == null ) { return Collections. emptyMap ( ) ; } return Collections. unmodifiableMap ( headerMap ) ; }"
      ]
    },
    "Csv_11_/src/main/java/org/apache/commons/csv/CSVParser.java_384-385": {
      "loc": "384-385",
      "input": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader != null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord != null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord != null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header); final boolean emptyHeader = header.trim().isEmpty(); if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
      "target": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader != null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord != null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord != null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header); final boolean emptyHeader = header == null || header.trim().isEmpty(); if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
      "function range": "359,5-394,5",
      "raw_output": [
        "private void initializeCSVHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Value\" ) ; }",
        "private void initializeCSVHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; }",
        "private void initializeCSVHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initializeCSVHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; }",
        "private void initializeCSVHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( this, tc, \"initializeHeader\" ) ; header = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( this, tc, \"initializeHeader\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"initializeHeader\" ) ; header = new Header ( ) ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"initializeHeader\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( this, tc, \"initializeHeader\" ) ; header = new Header ( ) ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( this, tc, \"initializeHeader\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( this, tc, \"initializeHeader\" ) ; header = new Header ( this ) ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( this, tc, \"initializeHeader\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( this, tc, \"initializeHeader\" ) ; header = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( this, tc, \"initializeHeader\", header ) ; }",
        "private void initCSVHeader ( ) { csvHeader = new StringBuilder ( ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; }",
        "private void initCSVHeader ( ) { csvHeader = new StringBuilder ( ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; }",
        "private void initCSVHeader ( ) { csvHeader = new StringBuilder ( ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; }",
        "private void initCSVHeader ( ) { csvHeader = new StringBuilder ( ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; System. out. println ( csvHeader ) ; }",
        "private void initCSVHeader ( ) { csvHeader = new StringBuilder ( ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; }",
        "private void initHeaderMap ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"initHeaderMap\" ) ; _headerMap = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"initHeaderMap\" ) ; }",
        "private void initializeHeaderMap ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"initializeHeaderMap\" ) ; _headerMap = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"initializeHeaderMap\" ) ; }",
        "private void initHeaderMap ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( this, tc, \"initHeaderMap\" ) ; _headerMap = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( this, tc, \"initHeaderMap\" ) ; }",
        "private void initHeaderMap ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"initHeaderMap\" ) ; _headerMap = new HashMap ( ) ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"initHeaderMap\" ) ; }",
        "private void initializeHeaderMap ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"initializeHeaderMap\" ) ; headerMap = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"initializeHeaderMap\" ) ; }",
        "private void initCSVHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initCSVHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Time\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Time\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initCSVHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initCSVHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initCSVHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Time\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }"
      ],
      "mid_translation": [
        "Method to initialize the header of the CSV file.",
        "Method to initialize the header.",
        "Initializes the header of the CSV file.",
        "Method to initialize the header map.",
        "Method to initialize the header of a CSV file."
      ],
      "output": [
        "private void initializeHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Value\" ) ; }",
        "private void initializeHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; }",
        "private void initializeHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initializeHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Value\" ) ; }",
        "private void initializeHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( this, tc, \"initializeHeader\" ) ; header = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( this, tc, \"initializeHeader\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"initializeHeader\" ) ; header = new Header ( ) ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"initializeHeader\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( this, tc, \"initializeHeader\" ) ; header = new Header ( ) ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( this, tc, \"initializeHeader\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( this, tc, \"initializeHeader\" ) ; header = new Header ( this ) ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( this, tc, \"initializeHeader\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( this, tc, \"initializeHeader\" ) ; header = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( this, tc, \"initializeHeader\", header ) ; }",
        "private void initializeHeader ( ) { csvHeader = new StringBuilder ( ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; }",
        "private void initializeHeader ( ) { csvHeader = new StringBuilder ( ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; }",
        "private void initializeHeader ( ) { csvHeader = new StringBuilder ( ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; }",
        "private void initializeHeader ( ) { csvHeader = new StringBuilder ( ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; System. out. println ( csvHeader ) ; }",
        "private void initializeHeader ( ) { csvHeader = new StringBuilder ( ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; csvHeader. append ('' ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"initHeaderMap\" ) ; _headerMap = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"initHeaderMap\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"initializeHeaderMap\" ) ; _headerMap = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"initializeHeaderMap\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( this, tc, \"initHeaderMap\" ) ; _headerMap = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( this, tc, \"initHeaderMap\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"initHeaderMap\" ) ; _headerMap = new HashMap ( ) ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"initHeaderMap\" ) ; }",
        "private void initializeHeader ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"initializeHeaderMap\" ) ; headerMap = null ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"initializeHeaderMap\" ) ; }",
        "private void initializeHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initializeHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Time\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Time\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initializeHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initializeHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }",
        "private void initializeHeader ( ) { csvHeader = new ArrayList < String > ( ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Time\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; csvHeader. add ( \"Date\" ) ; csvHeader. add ( \"Description\" ) ; }"
      ]
    },
    "Csv_14_/src/main/java/org/apache/commons/csv/CSVFormat.java_1039-1040": {
      "loc": "1039-1040",
      "input": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote = !(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos); if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
      "target": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote = !(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos); if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
      "function range": "1001,5-1106,5",
      "raw_output": [
        "private static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. getClass ( ). getName ( ) ) ; out. append ('' ) ; out. append ( quote ( out, object ) ) ; out. append ('' ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else if ( object instanceof String ) { out. append ( \"'\" ). append ( ( String ) object ). append ( \"'\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else if ( object instanceof String ) { out. append ( quote ( ( String ) object ) ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object, object. getClass ( ) ) ; } }",
        "public static void quote ( Appendable appendable, Object object ) throws IOException { if ( object == null ) { appendable. append ( \"null\" ) ; } else { quote ( appendable, object ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object. toString ( ) ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object. getClass ( ) ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "public static < T > Appendable quote ( Appendable out, T object, quotePolicy ) throws IOException { return quote ( out, object, quotePolicy, null ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, quotePolicy ) { return quote ( out, object, quotePolicy, null ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, quotePolicy ) throws IOException { return quote ( out, object, quotePolicy, false ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, quotePolicy ) { return quote ( out, object, quotePolicy, false ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, quotePolicy ) throws IOException { return quote ( out, object, quotePolicy, ( Appendable ) null ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, Appendable quoteMode ) throws IOException { return quote ( out, object, quoteMode, false ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, Appendable quoteMode ) throws IOException { return quote ( out, object, quoteMode, null ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, Appendable quoteMode ) { return quote ( out, object, quoteMode, false ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, Appendable quoteMode ) { return quote ( out, object, quoteMode, null ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, Appendable quoteMode ) throws IOException { return quote ( out, object, quoteMode, 0 ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, quoteMode ) { return quote ( out, object, quoteMode, null ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, Appendable quoteMode ) throws IOException { return quote ( out, object, quoteMode, null ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object,QuoteMode quoteMode ) { return quote ( out, object, quoteMode, null ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, quoteMode ) throws IOException { return quote ( out, object, quoteMode, null ) ; }",
        "public static < T > Appendable quote ( Appendable out, T object, Appendable quoteMode ) throws IOException { return quote ( out, object, quoteMode, false ) ; }"
      ],
      "mid_translation": [
        "Prints the quote of the given object into the given Appendable.",
        "Prints the quote of the given object into the given appendable.",
        "Prints the quote of the given object into the given Appendable using the given quote policy.",
        "Prints the quote of the given object into the given Appendable using the given quoteMode.",
        "Prints the quote of the given object into the given Appendable using the given quote mode."
      ],
      "output": [
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. getClass ( ). getName ( ) ) ; out. append ('' ) ; out. append ( quote ( out, object ) ) ; out. append ('' ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else if ( object instanceof String ) { out. append ( \"'\" ). append ( ( String ) object ). append ( \"'\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else if ( object instanceof String ) { out. append ( quote ( ( String ) object ) ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object, object. getClass ( ) ) ; } }",
        "private void printAndQuote ( Appendable appendable, Object object ) throws IOException { if ( object == null ) { appendable. append ( \"null\" ) ; } else { quote ( appendable, object ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object. toString ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object. getClass ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, quotePolicy ) throws IOException { return quote ( out, object, quotePolicy, null ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, quotePolicy ) { return quote ( out, object, quotePolicy, null ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, quotePolicy ) throws IOException { return quote ( out, object, quotePolicy, false ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, quotePolicy ) { return quote ( out, object, quotePolicy, false ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, quotePolicy ) throws IOException { return quote ( out, object, quotePolicy, ( Appendable ) null ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, Appendable quoteMode ) throws IOException { return quote ( out, object, quoteMode, false ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, Appendable quoteMode ) throws IOException { return quote ( out, object, quoteMode, null ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, Appendable quoteMode ) { return quote ( out, object, quoteMode, false ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, Appendable quoteMode ) { return quote ( out, object, quoteMode, null ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, Appendable quoteMode ) throws IOException { return quote ( out, object, quoteMode, 0 ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, quoteMode ) { return quote ( out, object, quoteMode, null ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, Appendable quoteMode ) throws IOException { return quote ( out, object, quoteMode, null ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object,QuoteMode quoteMode ) { return quote ( out, object, quoteMode, null ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, quoteMode ) throws IOException { return quote ( out, object, quoteMode, null ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object, Appendable quoteMode ) throws IOException { return quote ( out, object, quoteMode, false ) ; }"
      ]
    },
    "Csv_15_/src/main/java/org/apache/commons/csv/CSVFormat.java_1189-1190": {
      "loc": "1189-1190",
      "input": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote = !(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos); if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
      "target": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote = !(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos); if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
      "function range": "1151,5-1256,5",
      "raw_output": [
        "private static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. getClass ( ). getName ( ) ) ; out. append ('' ) ; out. append ( quote ( out, object ) ) ; out. append ('' ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else if ( object instanceof String ) { out. append ( \"'\" ). append ( ( String ) object ). append ( \"'\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else if ( object instanceof String ) { out. append ( quote ( ( String ) object ) ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object, object. getClass ( ) ) ; } }",
        "public static void quote ( Appendable appendable, Object object ) throws IOException { if ( object == null ) { appendable. append ( \"null\" ) ; } else { quote ( appendable, object ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object. toString ( ) ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object. getClass ( ) ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "public static void quote ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( object, out ) ; } }",
        "static void quote ( Appendable out, Object object ) throws IOException { out. append ('' ) ; quote ( out, object ) ; out. append ('' ) ; }",
        "public static void quote ( Appendable out, Object object ) throws IOException { quote ( out, object, false ) ; }",
        "public static void quote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( quote ( object ) ) ; } }",
        "public static void print ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "public static void print ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { print ( object, out ) ; } }",
        "public static void print ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { print ( object. getClass ( ), out ) ; } }",
        "public static void print ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { print ( object. toString ( ), out ) ; } }",
        "public static void print ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( NULL_STRING ) ; } else { print ( object, out ) ; } }",
        "private static void print ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private static void print ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. getClass ( ). getName ( ) ) ; out. append ('' ) ; out. append ( quote ( object ) ) ; } }",
        "public static void print ( Appendable out, Object object, String quote ) throws IOException { print ( out, object, quote, false ) ; }",
        "private static void print ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } out. append ('' ) ; }",
        "public static < T > Appendable print ( Appendable out, T object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } return append ( out, quote ( object ) ) ; }"
      ],
      "mid_translation": [
        "Prints the quote of the given object into the given Appendable.",
        "Prints the quote of the given object into the given appendable.",
        "Prints the quote of the given object into the given output appendable.",
        "Prints the contents of the given object into the given Appendable.",
        "Prints the contents of the given object into the given Appendable with a quote."
      ],
      "output": [
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. getClass ( ). getName ( ) ) ; out. append ('' ) ; out. append ( quote ( out, object ) ) ; out. append ('' ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else if ( object instanceof String ) { out. append ( \"'\" ). append ( ( String ) object ). append ( \"'\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else if ( object instanceof String ) { out. append ( quote ( ( String ) object ) ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object, object. getClass ( ) ) ; } }",
        "private void printAndQuote ( Appendable appendable, Object object ) throws IOException { if ( object == null ) { appendable. append ( \"null\" ) ; } else { quote ( appendable, object ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object. toString ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( out, object. getClass ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private void printAndQuote ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { quote ( object, out ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { out. append ('' ) ; quote ( out, object ) ; out. append ('' ) ; }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { quote ( out, object, false ) ; }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( quote ( object ) ) ; } }",
        "private void printAndQuote ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private void printAndQuote ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { print ( object, out ) ; } }",
        "private void printAndQuote ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { print ( object. getClass ( ), out ) ; } }",
        "private void printAndQuote ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { print ( object. toString ( ), out ) ; } }",
        "private void printAndQuote ( Object object, Appendable out ) throws IOException { if ( object == null ) { out. append ( NULL_STRING ) ; } else { print ( object, out ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. getClass ( ). getName ( ) ) ; out. append ('' ) ; out. append ( quote ( object ) ) ; } }",
        "private void printAndQuote ( Appendable out, Object object, String quote ) throws IOException { print ( out, object, quote, false ) ; }",
        "private void printAndQuote ( Appendable out, Object object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } out. append ('' ) ; }",
        "private < T > Appendable printAndQuote ( Appendable out, T object ) throws IOException { if ( object == null ) { out. append ( \"null\" ) ; } else { out. append ( object. toString ( ) ) ; } return append ( out, quote ( object ) ) ; }"
      ]
    },
    "Gson_10_/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java_122-124": {
      "loc": "122-124",
      "input": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException { Object fieldValue = field.get(value); TypeAdapter t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType()); t.write(writer, fieldValue); }",
      "target": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException { Object fieldValue = field.get(value); TypeAdapter t = jsonAdapterPresent ? typeAdapter : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType()); t.write(writer, fieldValue); }",
      "function range": "118,7-125,7",
      "raw_output": [
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeNumber ( ( Boolean ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeNumber ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeNumber ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeNumber ( ( Float ) value ) ; } else { jsonGenerator. writeNumber ( value ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeNumber ( ( Boolean ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeNumber ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeNumber ( ( Long ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeNumber ( ( Double ) value ) ; } else { jsonGenerator. writeNumber ( value. toString ( ) ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeNumber ( ( Boolean ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeNumber ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeNumber ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeNumber ( ( Float ) value ) ; } else { jsonGenerator. writeNumber ( value. toString ( ) ) ; } }",
        "private void writeValue ( JsonWriter writer, Object value ) throws IOException { if ( value == null ) { writer. write ( NULL ) ; } else { writer. write ( value. toString ( ) ) ; } }",
        "private void write ( JsonWriter writer, Object value ) throws IOException { if ( value == null ) { writer. write ( NULL ) ; } else { writer. write ( value. toString ( ) ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeInt ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeLong ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeFloat ( ( Float ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeDouble ( ( Double ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeBoolean ( ( Boolean ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else { jsonGenerator. writeNull ( ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeInt ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeLong ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeFloat ( ( Float ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeDouble ( ( Double ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeBoolean ( ( Boolean ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else { jsonGenerator. writeNull ( ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeString ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeString ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeString ( ( Float ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeString ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeString ( ( Boolean ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeString ( ( Date ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeString ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeString ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeString ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeString ( ( Date ) value ) ; } else { jsonGenerator. writeString ( value. toString ( ) ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeInt ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeLong ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeFloat ( ( Float ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeDouble ( ( Double ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeBoolean ( ( Boolean ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeInt ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeLong ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeFloat ( ( Float ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeDouble ( ( Double ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeBoolean ( ( Boolean ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else { jsonGenerator. writeNull ( ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeObject ( null ) ; } else { jsonGenerator. writeObject ( value. toString ( ) ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( value. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. write ( value. toString ( ) ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeNumber ( value. toString ( ) ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeNumber ( value. toString ( ) ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( value. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeString ( value. toString ( ) ) ; } jsonGenerator. writeEndObject ( ) ; }",
        "private static void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( value. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( value. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "private void writeValue ( JsonGenerator jsonGenerator, Object value ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( value. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Byte ) { setValue ( ( Byte ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Byte ) { setValue ( ( Byte ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else { throw new IllegalArgumentException ( \"Unsupported value type: \" + value. getClass ( ) ) ; } }",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Byte ) { setValue ( ( Byte ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Byte ) { setValue ( ( Byte ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "public void setValue ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Byte ) { setValue ( ( Byte ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )"
      ],
      "mid_translation": [
        "Writes the value to the JSON writer as a type wrapper.",
        "Writes the value of the field to the JSON writer.",
        "Writes the value to the JSON writer as the type wrapper.",
        "Writes the value to the JSON writer.",
        "Writes the value of the field as a type wrapper."
      ],
      "output": [
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeNumber ( ( Boolean ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeNumber ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeNumber ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeNumber ( ( Float ) value ) ; } else { jsonGenerator. writeNumber ( value ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeNumber ( ( Boolean ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeNumber ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeNumber ( ( Long ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeNumber ( ( Double ) value ) ; } else { jsonGenerator. writeNumber ( value. toString ( ) ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeNumber ( ( Boolean ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeNumber ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeNumber ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeNumber ( ( Float ) value ) ; } else { jsonGenerator. writeNumber ( value. toString ( ) ) ; } }",
        "void @SuppressWarnings ( JsonWriter writer, Object value ) throws IOException { if ( value == null ) { writer. write ( NULL ) ; } else { writer. write ( value. toString ( ) ) ; } }",
        "void @SuppressWarnings ( JsonWriter writer, Object value ) throws IOException { if ( value == null ) { writer. write ( NULL ) ; } else { writer. write ( value. toString ( ) ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeInt ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeLong ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeFloat ( ( Float ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeDouble ( ( Double ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeBoolean ( ( Boolean ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else { jsonGenerator. writeNull ( ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeInt ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeLong ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeFloat ( ( Float ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeDouble ( ( Double ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeBoolean ( ( Boolean ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else { jsonGenerator. writeNull ( ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeString ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeString ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeString ( ( Float ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeString ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeString ( ( Boolean ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeString ( ( Date ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeString ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeString ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeString ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeString ( ( Date ) value ) ; } else { jsonGenerator. writeString ( value. toString ( ) ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeInt ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeLong ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeFloat ( ( Float ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeDouble ( ( Double ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeBoolean ( ( Boolean ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Integer ) { jsonGenerator. writeInt ( ( Integer ) value ) ; } else if ( value instanceof Long ) { jsonGenerator. writeLong ( ( Long ) value ) ; } else if ( value instanceof Float ) { jsonGenerator. writeFloat ( ( Float ) value ) ; } else if ( value instanceof Double ) { jsonGenerator. writeDouble ( ( Double ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Boolean ) { jsonGenerator. writeBoolean ( ( Boolean ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof String ) { jsonGenerator. writeString ( ( String ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else if ( value instanceof Date ) { jsonGenerator. writeDate ( ( Date ) value ) ; } else { jsonGenerator. writeNull ( ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeObject ( null ) ; } else { jsonGenerator. writeObject ( value. toString ( ) ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( value. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. write ( value. toString ( ) ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeNumber ( value. toString ( ) ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeNumber ( value. toString ( ) ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( value. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeString ( value. toString ( ) ) ; } jsonGenerator. writeEndObject ( ) ; }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( value. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { if ( value == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( value. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "void @SuppressWarnings ( JsonGenerator jsonGenerator, Object value ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( value. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "void @SuppressWarnings ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Byte ) { setValue ( ( Byte ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "void @SuppressWarnings ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Byte ) { setValue ( ( Byte ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else { throw new IllegalArgumentException ( \"Unsupported value type: \" + value. getClass ( ) ) ; } }",
        "void @SuppressWarnings ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Byte ) { setValue ( ( Byte ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "void @SuppressWarnings ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Byte ) { setValue ( ( Byte ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )",
        "void @SuppressWarnings ( Object value ) { if ( value == null ) { setValue ( null ) ; } else if ( value instanceof String ) { setValue ( ( String ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Byte ) { setValue ( ( Byte ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Boolean ) { setValue ( ( Boolean ) value ) ; } else if ( value instanceof Short ) { setValue ( ( Short ) value ) ; } else if ( value instanceof Integer ) { setValue ( ( Integer ) value ) ; } else if ( value instanceof Long ) { setValue ( ( Long ) value ) ; } else if ( value instanceof Float ) { setValue ( ( Float ) value ) ; } else if ( value instanceof Double ) { setValue ( ( Double ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigInteger ) { setValue ( ( BigInteger ) value ) ; } else if ( value instanceof BigDecimal ) { setValue ( ( BigDecimal ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date ) value ) ; } else if ( value instanceof Date ) { setValue ( ( Date )"
      ]
    },
    "Gson_13_/gson/src/main/java/com/google/gson/stream/JsonReader.java_731-732": {
      "loc": "731-732",
      "input": "private int peekNumber() throws IOException { char[] buffer = this.buffer; int p = pos; int l = limit; long value = 0; boolean negative = false; boolean fitsInLong = true; int last = NUMBER_CHAR_NONE; int i = 0; charactersOfNumber: for (; true; i++) { if (p + i == l) { if (i == buffer.length) { return PEEKED_NONE; } if (!fillBuffer(i + 1)) { break; } p = pos; l = limit; } char c = buffer[p + i]; switch (c) { case '-': if (last == NUMBER_CHAR_NONE) { negative = true; last = NUMBER_CHAR_SIGN; continue; } else if (last == NUMBER_CHAR_EXP_E) { last = NUMBER_CHAR_EXP_SIGN; continue; } return PEEKED_NONE; case '+': if (last == NUMBER_CHAR_EXP_E) { last = NUMBER_CHAR_EXP_SIGN; continue; } return PEEKED_NONE; case 'e': case 'E': if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) { last = NUMBER_CHAR_EXP_E; continue; } return PEEKED_NONE; case '.': if (last == NUMBER_CHAR_DIGIT) { last = NUMBER_CHAR_DECIMAL; continue; } return PEEKED_NONE; default: if (c < '0' || c > '9') { if (!isLiteral(c)) { break charactersOfNumber; } return PEEKED_NONE; } if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) { value = -(c - '0'); last = NUMBER_CHAR_DIGIT; } else if (last == NUMBER_CHAR_DIGIT) { if (value == 0) { return PEEKED_NONE; } long newValue = value * 10 - (c - '0'); fitsInLong &= value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value); value = newValue; } else if (last == NUMBER_CHAR_DECIMAL) { last = NUMBER_CHAR_FRACTION_DIGIT; } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) { last = NUMBER_CHAR_EXP_DIGIT; } } } if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) { peekedLong = negative ? value : -value; pos += i; return peeked = PEEKED_LONG; } else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT) { peekedNumberLength = i; return peeked = PEEKED_NUMBER; } else { return PEEKED_NONE; } }",
      "target": "private int peekNumber() throws IOException { char[] buffer = this.buffer; int p = pos; int l = limit; long value = 0; boolean negative = false; boolean fitsInLong = true; int last = NUMBER_CHAR_NONE; int i = 0; charactersOfNumber: for (; true; i++) { if (p + i == l) { if (i == buffer.length) { return PEEKED_NONE; } if (!fillBuffer(i + 1)) { break; } p = pos; l = limit; } char c = buffer[p + i]; switch (c) { case '-': if (last == NUMBER_CHAR_NONE) { negative = true; last = NUMBER_CHAR_SIGN; continue; } else if (last == NUMBER_CHAR_EXP_E) { last = NUMBER_CHAR_EXP_SIGN; continue; } return PEEKED_NONE; case '+': if (last == NUMBER_CHAR_EXP_E) { last = NUMBER_CHAR_EXP_SIGN; continue; } return PEEKED_NONE; case 'e': case 'E': if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) { last = NUMBER_CHAR_EXP_E; continue; } return PEEKED_NONE; case '.': if (last == NUMBER_CHAR_DIGIT) { last = NUMBER_CHAR_DECIMAL; continue; } return PEEKED_NONE; default: if (c < '0' || c > '9') { if (!isLiteral(c)) { break charactersOfNumber; } return PEEKED_NONE; } if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) { value = -(c - '0'); last = NUMBER_CHAR_DIGIT; } else if (last == NUMBER_CHAR_DIGIT) { if (value == 0) { return PEEKED_NONE; } long newValue = value * 10 - (c - '0'); fitsInLong &= value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value); value = newValue; } else if (last == NUMBER_CHAR_DECIMAL) { last = NUMBER_CHAR_FRACTION_DIGIT; } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) { last = NUMBER_CHAR_EXP_DIGIT; } } } if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative) && (value!=0 || false==negative)) { peekedLong = negative ? value : -value; pos += i; return peeked = PEEKED_LONG; } else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT) { peekedNumberLength = i; return peeked = PEEKED_NUMBER; } else { return PEEKED_NONE; } }",
      "function range": "641,3-742,3",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Gson_15_/gson/src/main/java/com/google/gson/stream/JsonWriter.java_495-496": {
      "loc": "495-496",
      "input": "public JsonWriter value(double value) throws IOException { writeDeferredName(); if (Double.isNaN(value) || Double.isInfinite(value)) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; }",
      "target": "public JsonWriter value(double value) throws IOException { writeDeferredName(); if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; }",
      "function range": "493,3-501,3",
      "raw_output": [
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. write ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } finally { endValue ( ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. writeDouble ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. write ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. writeDouble ( value ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. write ( value ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } finally { endValue ( ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. writeDouble ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. writeDouble ( value ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. write ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } finally { endValue ( ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. write ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. writeDouble ( value ) ; } finally { endValue ( ) ; } return this ; }",
        "public void writeDouble ( double value, JBBPByteOrder byteOrder ) throws IOException { if ( byteOrder == JBBPByteOrder. BIG_ENDIAN ) { writeInt ( ( int ) value, byteOrder ) ; } else { writeInt ( ( int ) value, byteOrder ) ; } }",
        "public void writeDouble ( double value, JBBPByteOrder byteOrder ) throws IOException { if ( byteOrder == JBBPByteOrder. BIG_ENDIAN ) { writeInt ( value, byteOrder ) ; } else { writeInt ( value, byteOrder ) ; } }",
        "public void writeDouble ( final double value, final JBBPByteOrder byteOrder ) throws IOException { if ( byteOrder == JBBPByteOrder. BIG_ENDIAN ) { this. writeDouble ( value, byteOrder ) ; } else { this. writeDouble ( value, byteOrder ) ; } }",
        "public void writeDouble ( double value, JBBPByteOrder byteOrder ) throws IOException { if ( byteOrder == JBBPByteOrder. BIG_ENDIAN ) { this. writeInt ( ( int ) value, byteOrder ) ; } else { this. writeInt ( ( int ) value, byteOrder ) ; } }",
        "public void writeDouble ( final double value, final JBBPByteOrder byteOrder ) throws IOException { if ( byteOrder == JBBPByteOrder. BIG_ENDIAN ) { this. writeInt ( ( int ) value, byteOrder ) ; } else { this. writeInt ( ( int ) value, byteOrder ) ; } }",
        "public JBBPOut Double ( final double value ) throws IOException { assertNotEnded ( ) ; if ( this. processCommands ) { this. outStream. writeDouble ( value ) ; } else { this. outStream. writeDouble ( value ) ; } return this ; }",
        "public JBBPOutDouble ( final double value ) throws IOException { assertNotEnded ( ) ; if ( this. processCommands ) { this. outStream. writeDouble ( value ) ; } else { this. outStream. writeDouble ( value ) ; } return this ; }",
        "public JBBPTextWriter Double ( final double value ) throws IOException { assertNotEnded ( ) ; if ( this. processCommands ) { this. outStream. writeDouble ( value ) ; } else { this. outStream. writeDouble ( value ) ; } return this ; }",
        "public JBBPOut Double ( final double value ) throws IOException { assertNotEnded ( ) ; if ( this. processCommands ) { this. outStream. writeDouble ( value ) ; } return this ; }",
        "public JBBPTextWriter Double ( final double value ) throws IOException { assertNotEnded ( ) ; if ( this. processCommands ) { this. outStream. writeDouble ( value ) ; } return this ; }",
        "private void writeDouble ( JsonGenerator jsonGenerator, double value ) throws IOException { jsonGenerator. writeNumber ( value ) ; }",
        "private void writeDouble ( JsonGenerator jsonGenerator, Number value ) throws IOException { jsonGenerator. writeNumber ( value. doubleValue ( ) ) ; }",
        "private void writeDouble ( double value, JsonGenerator jsonGenerator ) throws IOException { jsonGenerator. writeDouble ( value ) ; }",
        "private void writeDouble ( double value, JsonGenerator jsonGenerator ) throws IOException { jsonGenerator. writeNumber ( value ) ; }",
        "private void writeDouble ( JsonGenerator jsonGenerator, double value ) throws IOException { jsonGenerator. writeDouble ( value ) ; }"
      ],
      "mid_translation": [
        "Writes a double value.",
        "Writes a double value",
        "Writes a double value to the output stream.",
        "Writes a double value to the stream.",
        "Writes a double value to the JSON stream."
      ],
      "output": [
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. write ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } finally { endValue ( ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. writeDouble ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. write ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. writeDouble ( value ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. write ( value ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } finally { endValue ( ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. writeDouble ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. writeDouble ( value ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. write ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } finally { endValue ( ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. write ( value ) ; } catch ( IOException e ) { throw new JsonException ( e ) ; } return this ; }",
        "public JsonWriter value ( double value ) { startValue ( ) ; try { writer. writeDouble ( value ) ; } finally { endValue ( ) ; } return this ; }",
        "public void value ( double value, JBBPByteOrder byteOrder ) throws IOException { if ( byteOrder == JBBPByteOrder. BIG_ENDIAN ) { writeInt ( ( int ) value, byteOrder ) ; } else { writeInt ( ( int ) value, byteOrder ) ; } }",
        "public void value ( double value, JBBPByteOrder byteOrder ) throws IOException { if ( byteOrder == JBBPByteOrder. BIG_ENDIAN ) { writeInt ( value, byteOrder ) ; } else { writeInt ( value, byteOrder ) ; } }",
        "public void value ( final double value, final JBBPByteOrder byteOrder ) throws IOException { if ( byteOrder == JBBPByteOrder. BIG_ENDIAN ) { this. writeDouble ( value, byteOrder ) ; } else { this. writeDouble ( value, byteOrder ) ; } }",
        "public void value ( double value, JBBPByteOrder byteOrder ) throws IOException { if ( byteOrder == JBBPByteOrder. BIG_ENDIAN ) { this. writeInt ( ( int ) value, byteOrder ) ; } else { this. writeInt ( ( int ) value, byteOrder ) ; } }",
        "public void value ( final double value, final JBBPByteOrder byteOrder ) throws IOException { if ( byteOrder == JBBPByteOrder. BIG_ENDIAN ) { this. writeInt ( ( int ) value, byteOrder ) ; } else { this. writeInt ( ( int ) value, byteOrder ) ; } }",
        "public JBBPOut value ( final double value ) throws IOException { assertNotEnded ( ) ; if ( this. processCommands ) { this. outStream. writeDouble ( value ) ; } else { this. outStream. writeDouble ( value ) ; } return this ; }",
        "",
        "public JBBPTextWriter value ( final double value ) throws IOException { assertNotEnded ( ) ; if ( this. processCommands ) { this. outStream. writeDouble ( value ) ; } else { this. outStream. writeDouble ( value ) ; } return this ; }",
        "public JBBPOut value ( final double value ) throws IOException { assertNotEnded ( ) ; if ( this. processCommands ) { this. outStream. writeDouble ( value ) ; } return this ; }",
        "public JBBPTextWriter value ( final double value ) throws IOException { assertNotEnded ( ) ; if ( this. processCommands ) { this. outStream. writeDouble ( value ) ; } return this ; }",
        "public void value ( JsonGenerator jsonGenerator, double value ) throws IOException { jsonGenerator. writeNumber ( value ) ; }",
        "public void value ( JsonGenerator jsonGenerator, Number value ) throws IOException { jsonGenerator. writeNumber ( value. doubleValue ( ) ) ; }",
        "public void value ( double value, JsonGenerator jsonGenerator ) throws IOException { jsonGenerator. writeDouble ( value ) ; }",
        "public void value ( double value, JsonGenerator jsonGenerator ) throws IOException { jsonGenerator. writeNumber ( value ) ; }",
        "public void value ( JsonGenerator jsonGenerator, double value ) throws IOException { jsonGenerator. writeDouble ( value ) ; }"
      ]
    },
    "Gson_17_/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java_99-101": {
      "loc": "99-101",
      "input": "@Override public Date read(JsonReader in) throws IOException { if (in.peek() != JsonToken.STRING) { throw new JsonParseException(\"The date should be a string value\"); } Date date = deserializeToDate(in.nextString()); if (dateType == Date.class) { return date; } else if (dateType == Timestamp.class) { return new Timestamp(date.getTime()); } else if (dateType == java.sql.Date.class) { return new java.sql.Date(date.getTime()); } else { throw new AssertionError(); } }",
      "target": "@Override public Date read(JsonReader in) throws IOException { if (in.peek() == JsonToken.NULL) { in.nextNull(); return null; } Date date = deserializeToDate(in.nextString()); if (dateType == Date.class) { return date; } else if (dateType == Timestamp.class) { return new Timestamp(date.getTime()); } else if (dateType == java.sql.Date.class) { return new java.sql.Date(date.getTime()); } else { throw new AssertionError(); } }",
      "function range": "97,3-113,3",
      "raw_output": [
        "public Date getDate ( ) throws IOException { int year = getInt ( ) ; int month = getInt ( ) ; int day = getInt ( ) ; int hour = getInt ( ) ; int minute = getInt ( ) ; int second = getInt ( ) ; return new Date ( year, month, day, hour, minute, second ) ; }",
        "public Date getDate ( ) throws IOException { int year = getInt ( ) ; int month = getInt ( ) ; int day = getInt ( ) ; return new Date ( year, month, day ) ; }",
        "public Date getDate ( ) throws IOException { int year = getInt ( ) ; int month = getInt ( ) ; int day = getInt ( ) ; int hour = getInt ( ) ; int minute = getInt ( ) ; int second = getInt ( ) ; return new Date ( year, month, day, hour, minute ) ; }",
        "public Date getDate ( ) throws IOException { int year = getInt ( ) ; int month = getInt ( ) ; int day = getInt ( ) ; int hour = getInt ( ) ; int minute = getInt ( ) ; return new Date ( year, month, day, hour, minute ) ; }",
        "public Date readDate ( ) throws IOException { int year = readInteger ( ) ; int month = readInteger ( ) ; int day = readInteger ( ) ; return new Date ( year, month, day ) ; }",
        "private Date readDate ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; return new Date ( year, month, day ) ; }",
        "private Date readDate ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; String hour = coronaSerializer. getText ( ) ; String minute = coronaSerializer. getText ( ) ; String second = coronaSerializer. getText ( ) ; return new Date ( year, month, day, hour, minute ) ; }",
        "private Date readDate ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new SimpleDateFormat ( \"yyyy-MM-dd\" ). parse ( year ). getTime ( ) ; } catch ( ParseException e ) { throw new IOException ( e ) ; } }",
        "private Date readDate ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; String year2 = coronaSerializer. getText ( ) ; String month2 = coronaSerializer. getText ( ) ; String day2 = coronaSerializer. getText ( ) ; return new Date ( year, month, day2 ) ; }",
        "private Date readDate ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new Date ( year, month, day ) ; } catch ( IllegalArgumentException e ) { throw new IOException ( e ) ; } }",
        "private Date readDate ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; return new Date ( year, month, day ) ; }",
        "private Date readDate ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new Date ( year, month, day ) ; } catch ( IOException e ) { throw new IOException ( e ) ; } }",
        "private Date readDate ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new Date ( year, month, day ) ; } catch ( IllegalArgumentException e ) { throw new IOException ( \"Invalid date: \" + e. getMessage ( ) ) ; } }",
        "private Date readDate ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new Date ( year, month, day ) ; } catch ( IllegalArgumentException e ) { throw new IOException ( e ) ; } }",
        "private Date readDate ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new Date ( year, month, day ) ; } catch ( JsonParseException e ) { throw new IOException ( \"Failed to parse date: \" + e. getMessage ( ) ) ; } }",
        "private Date readDate ( JsonReader reader ) throws IOException { String text = reader. readLine ( ) ; if ( text == null ) { return null ; } return new Date ( Long. parseLong ( text ) ) ; }",
        "private Date readDate ( JsonReader reader ) throws IOException { String text = reader. readLine ( ) ; if ( text!= null ) { return parseDate ( text ) ; } return null ; }",
        "private Date readDate ( JsonReader reader ) throws IOException { String text = reader. readLine ( ) ; if ( text == null ) { return null ; } return parseDate ( text ) ; }",
        "public Date readDate ( InputStream in ) throws IOException, ParseException { return readDate ( new InputStreamReader ( in ) ) ; }",
        "private Date readDate ( JsonReader reader ) throws IOException { String text = reader. readLine ( ) ; if ( text == null ) { return null ; } return new Date ( text ) ; }",
        "public Date parseDate ( Document document ) { try { return parseDateInternal ( document ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }",
        "public Date readDate ( InputStream in ) throws IOException, ParseException { return readDate ( new InputStreamReader ( in ) ) ; }",
        "public Date parseDate ( Document document ) { try { return parseDateInternal ( document, null ) ; } catch ( Exception e ) { return null ; } }",
        "public Date parseDate ( Document document ) { try { return parseDateInternal ( document ) ; } catch ( Exception e ) { return null ; } }",
        "public Date readDate ( InputStream in ) throws IOException, ParseException { return readDate ( new InputStreamReader ( in, \"UTF-8\" ) ) ; }"
      ],
      "mid_translation": [
        "Reads a date from the input stream.",
        "Reads a date from a JSON stream.",
        "Reads a date from the given JSON stream.",
        "Reads a JSON document into a Date instance.",
        "Reads a JSON document into a Date."
      ],
      "output": [
        "@Override public Date read ( ) throws IOException { int year = getInt ( ) ; int month = getInt ( ) ; int day = getInt ( ) ; int hour = getInt ( ) ; int minute = getInt ( ) ; int second = getInt ( ) ; return new Date ( year, month, day, hour, minute, second ) ; }",
        "@Override public Date read ( ) throws IOException { int year = getInt ( ) ; int month = getInt ( ) ; int day = getInt ( ) ; return new Date ( year, month, day ) ; }",
        "@Override public Date read ( ) throws IOException { int year = getInt ( ) ; int month = getInt ( ) ; int day = getInt ( ) ; int hour = getInt ( ) ; int minute = getInt ( ) ; int second = getInt ( ) ; return new Date ( year, month, day, hour, minute ) ; }",
        "@Override public Date read ( ) throws IOException { int year = getInt ( ) ; int month = getInt ( ) ; int day = getInt ( ) ; int hour = getInt ( ) ; int minute = getInt ( ) ; return new Date ( year, month, day, hour, minute ) ; }",
        "@Override public Date read ( ) throws IOException { int year = readInteger ( ) ; int month = readInteger ( ) ; int day = readInteger ( ) ; return new Date ( year, month, day ) ; }",
        "@Override public Date read ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; return new Date ( year, month, day ) ; }",
        "@Override public Date read ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; String hour = coronaSerializer. getText ( ) ; String minute = coronaSerializer. getText ( ) ; String second = coronaSerializer. getText ( ) ; return new Date ( year, month, day, hour, minute ) ; }",
        "@Override public Date read ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new SimpleDateFormat ( \"yyyy-MM-dd\" ). parse ( year ). getTime ( ) ; } catch ( ParseException e ) { throw new IOException ( e ) ; } }",
        "@Override public Date read ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; String year2 = coronaSerializer. getText ( ) ; String month2 = coronaSerializer. getText ( ) ; String day2 = coronaSerializer. getText ( ) ; return new Date ( year, month, day2 ) ; }",
        "@Override public Date read ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new Date ( year, month, day ) ; } catch ( IllegalArgumentException e ) { throw new IOException ( e ) ; } }",
        "@Override public Date read ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; return new Date ( year, month, day ) ; }",
        "@Override public Date read ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new Date ( year, month, day ) ; } catch ( IOException e ) { throw new IOException ( e ) ; } }",
        "@Override public Date read ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new Date ( year, month, day ) ; } catch ( IllegalArgumentException e ) { throw new IOException ( \"Invalid date: \" + e. getMessage ( ) ) ; } }",
        "@Override public Date read ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new Date ( year, month, day ) ; } catch ( IllegalArgumentException e ) { throw new IOException ( e ) ; } }",
        "@Override public Date read ( CoronaSerializer coronaSerializer ) throws IOException { JsonToken token = coronaSerializer. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { return null ; } String year = coronaSerializer. getText ( ) ; String month = coronaSerializer. getText ( ) ; String day = coronaSerializer. getText ( ) ; try { return new Date ( year, month, day ) ; } catch ( JsonParseException e ) { throw new IOException ( \"Failed to parse date: \" + e. getMessage ( ) ) ; } }",
        "@Override public Date read ( JsonReader reader ) throws IOException { String text = reader. readLine ( ) ; if ( text == null ) { return null ; } return new Date ( Long. parseLong ( text ) ) ; }",
        "@Override public Date read ( JsonReader reader ) throws IOException { String text = reader. readLine ( ) ; if ( text!= null ) { return parseDate ( text ) ; } return null ; }",
        "@Override public Date read ( JsonReader reader ) throws IOException { String text = reader. readLine ( ) ; if ( text == null ) { return null ; } return parseDate ( text ) ; }",
        "@Override public Date read ( InputStream in ) throws IOException, ParseException { return readDate ( new InputStreamReader ( in ) ) ; }",
        "@Override public Date read ( JsonReader reader ) throws IOException { String text = reader. readLine ( ) ; if ( text == null ) { return null ; } return new Date ( text ) ; }",
        "@Override public Date read ( Document document ) { try { return parseDateInternal ( document ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }",
        "@Override public Date read ( InputStream in ) throws IOException, ParseException { return readDate ( new InputStreamReader ( in ) ) ; }",
        "@Override public Date read ( Document document ) { try { return parseDateInternal ( document, null ) ; } catch ( Exception e ) { return null ; } }",
        "@Override public Date read ( Document document ) { try { return parseDateInternal ( document ) ; } catch ( Exception e ) { return null ; } }",
        "@Override public Date read ( InputStream in ) throws IOException, ParseException { return readDate ( new InputStreamReader ( in, \"UTF-8\" ) ) ; }"
      ]
    },
    "JacksonCore_5_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-194": {
      "loc": "193-194",
      "input": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) { char c = str.charAt(i++); if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); }",
      "target": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) { char c = str.charAt(i); if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); }",
      "function range": "185,5-205,5",
      "raw_output": [
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int indexOf ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int indexOf ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 2 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' && text. charAt ( 9 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 2 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } else { return - 1 ; } }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } else { return - 1 ; } }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }"
      ],
      "mid_translation": [
        "Returns the parse index of the given string.",
        "Returns the parse index of the specified string.",
        "Returns the specified parse index for the given string.",
        "Returns the parse index for the given string.",
        "Returns the parse index for the specified string."
      ],
      "output": [
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 2 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' && text. charAt ( 9 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 2 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } else { return - 1 ; } }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } else { return - 1 ; } }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { text = text. substring ( 0, text. length ( ) - 1 ) ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }"
      ]
    },
    "JacksonCore_6_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-195": {
      "loc": "193-195",
      "input": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) { char c = str.charAt(i); if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); }",
      "target": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } char c = str.charAt(0); if (c <= '0') { return (len == 1 && c == '0') ? 0 : -1; } if (c > '9') { return -1; } for (int i = 1; i < len; ++i) { c = str.charAt(i); if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); }",
      "function range": "185,5-206,5",
      "raw_output": [
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 2 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' && text. charAt ( 9 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 2 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int indexOf ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int indexOf ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } return text. charAt ( 0 ) ; }",
        "public int getIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "public int indexOf ( String string ) { if ( string == null ) { return - 1 ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String str ) { if ( str == null ) { return - 1 ; } int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String str ) { if ( str == null ) return - 1 ; int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( i ) ) return i ; } return - 1 ; }",
        "public int indexOf ( String string ) { if ( string == null ) { return - 1 ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char c = string. charAt ( i ) ; if ( c =='' ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String str ) { if ( str == null ) { return - 1 ; } int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. charAt ( i )!= str. charAt ( i ) ) { return i ; } } return - 1 ; }"
      ],
      "mid_translation": [
        "Returns the specified parse index for the given string.",
        "Returns the parse index of the given string.",
        "Returns the parse index of the specified string.",
        "Returns the specified parse index for the specified string.",
        "Returns the index of the given string for parsing."
      ],
      "output": [
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 2 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' && text. charAt ( 9 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' && text. charAt ( 8 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( 1 ) =='' && text. charAt ( 2 ) =='' && text. charAt ( 3 ) =='' && text. charAt ( 4 ) =='' && text. charAt ( 5 ) =='' && text. charAt ( 6 ) =='' && text. charAt ( 7 ) =='' ) { return 2 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null || text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { return - 1 ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } return text. charAt ( 0 ) ; }",
        "private final int _parseIndex ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( \"text cannot be null\" ) ; } if ( text. length ( ) == 0 ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } if ( text. charAt ( 0 ) =='' && text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } if ( text. charAt ( text. length ( ) - 1 ) =='' ) { return text. length ( ) - 1 ; } return - 1 ; }",
        "private final int _parseIndex ( String string ) { if ( string == null ) { return - 1 ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "private final int _parseIndex ( String str ) { if ( str == null ) { return - 1 ; } int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "private final int _parseIndex ( String str ) { if ( str == null ) return - 1 ; int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( i ) ) return i ; } return - 1 ; }",
        "private final int _parseIndex ( String string ) { if ( string == null ) { return - 1 ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char c = string. charAt ( i ) ; if ( c =='' ) { return i ; } } return - 1 ; }",
        "private final int _parseIndex ( String str ) { if ( str == null ) { return - 1 ; } int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. charAt ( i )!= str. charAt ( i ) ) { return i ; } } return - 1 ; }"
      ]
    },
    "JacksonCore_8_/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java_307-308": {
      "loc": "307-308",
      "input": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray != null) return _resultArray; if (_resultString != null) { return (_resultArray = _resultString.toCharArray()); } if (!_hasSegments) return _currentSegment; return contentsAsArray(); }",
      "target": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray != null) return _resultArray; if (_resultString != null) { return (_resultArray = _resultString.toCharArray()); } if (!_hasSegments && _currentSegment != null) return _currentSegment; return contentsAsArray(); }",
      "function range": "298,5-310,5",
      "raw_output": [
        "public char [ ] toCharArray ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; int i = 0 ; while ( i < buf. length ) { buf [ i ++ ] = ( char ) buffer [ i ] ; } return buf ; }",
        "public char [ ] toCharArray ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; System. arraycopy ( buffer, 0, buf, 0, buf. length ) ; return buf ; }",
        "public char [ ] toCharArray ( ) throws IOException { char [ ] buf = new char [ bufSize ] ; int i = 0 ; while ( i < buf. length ) { buf [ i ++ ] = ( char ) buf [ i ] ; } return buf ; }",
        "public char [ ] toCharArray ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; int i = 0 ; while ( i < buf. length ) { buf [ i ] = ( char ) buffer [ i ] ; i ++ ; } return buf ; }",
        "public char [ ] toCharArray ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; int i = 0 ; for ( ; i < buf. length ; i ++ ) { buf [ i ] = buffer [ i ] ; } return buf ; }",
        "public char [ ] toCharArray ( ) throws IOException { char [ ] buf = new char [ bufLen ] ; int i = 0 ; while ( i < bufLen ) { buf [ i ++ ] = ( char ) read ( ) ; } return buf ; }",
        "public char [ ] toCharArray ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; int i = 0 ; while ( i < buf. length ) { buf [ i ++ ] = buffer [ i ] ; } return buf ; }",
        "public char [ ] toCharArray ( ) throws IOException { char [ ] buf = new char [ bufLen ] ; int i = 0 ; while ( i < bufLen ) { buf [ i ++ ] = ( char ) buf [ i ] ; } return buf ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( this, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( buffer, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oout = new ObjectOutputStream ( baos ) ; oout. writeObject ( this ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( this, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( _in, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; writeTo ( baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( input, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; System. arraycopy ( buffer, 0, buf, 0, buf. length ) ; return buf ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oout = new ObjectOutputStream ( baos ) ; oout. writeObject ( this ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; oos. writeObject ( this ) ; oos. close ( ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; buffer = new char [ buffer. length ] ; System. arraycopy ( buffer, 0, buf, 0, buf. length ) ; return buf ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; oos. writeObject ( buffer ) ; oos. close ( ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oout = new ObjectOutputStream ( baos ) ; oout. writeObject ( this ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( this, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( _in, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( this. in, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] toCharArray ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( _stream, baos ) ; return baos. toByteArray ( ) ; }"
      ],
      "mid_translation": [
        "Returns the contents of the input stream as a char array.",
        "Returns the contents of the input stream as a character array.",
        "Returns the input stream s contents as a char array.",
        "Returns the current input stream s contents as a char array.",
        "Returns the input stream s contents as a character array."
      ],
      "output": [
        "public char [ ] getTextBuffer ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; int i = 0 ; while ( i < buf. length ) { buf [ i ++ ] = ( char ) buffer [ i ] ; } return buf ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; System. arraycopy ( buffer, 0, buf, 0, buf. length ) ; return buf ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { char [ ] buf = new char [ bufSize ] ; int i = 0 ; while ( i < buf. length ) { buf [ i ++ ] = ( char ) buf [ i ] ; } return buf ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; int i = 0 ; while ( i < buf. length ) { buf [ i ] = ( char ) buffer [ i ] ; i ++ ; } return buf ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; int i = 0 ; for ( ; i < buf. length ; i ++ ) { buf [ i ] = buffer [ i ] ; } return buf ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { char [ ] buf = new char [ bufLen ] ; int i = 0 ; while ( i < bufLen ) { buf [ i ++ ] = ( char ) read ( ) ; } return buf ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; int i = 0 ; while ( i < buf. length ) { buf [ i ++ ] = buffer [ i ] ; } return buf ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { char [ ] buf = new char [ bufLen ] ; int i = 0 ; while ( i < bufLen ) { buf [ i ++ ] = ( char ) buf [ i ] ; } return buf ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( this, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( buffer, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oout = new ObjectOutputStream ( baos ) ; oout. writeObject ( this ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( this, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( _in, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; writeTo ( baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( input, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; System. arraycopy ( buffer, 0, buf, 0, buf. length ) ; return buf ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oout = new ObjectOutputStream ( baos ) ; oout. writeObject ( this ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; oos. writeObject ( this ) ; oos. close ( ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { char [ ] buf = new char [ buffer. length ] ; buffer = new char [ buffer. length ] ; System. arraycopy ( buffer, 0, buf, 0, buf. length ) ; return buf ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; oos. writeObject ( buffer ) ; oos. close ( ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oout = new ObjectOutputStream ( baos ) ; oout. writeObject ( this ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( this, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( _in, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( this. in, baos ) ; return baos. toByteArray ( ) ; }",
        "public char [ ] getTextBuffer ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; copy ( _stream, baos ) ; return baos. toByteArray ( ) ; }"
      ]
    },
    "JacksonCore_20_/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java_1330-1331": {
      "loc": "1330-1331",
      "input": "public void writeEmbeddedObject(Object object) throws IOException { throw new JsonGenerationException(\"No native support for writing embedded objects\", this); }",
      "target": "public void writeEmbeddedObject(Object object) throws IOException { if (object == null) { writeNull(); return; } if (object instanceof byte[]) { writeBinary((byte[]) object); return; } throw new JsonGenerationException(\"No native support for writing embedded objects of type \" +object.getClass().getName(), this); }",
      "function range": "1328,5-1332,5",
      "raw_output": [
        "private static void writeEmbedded ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"id\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"class\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"value\", embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "private static void writeEmbedded ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"id\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"class\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "private static void writeEmbedded ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"id\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"value\", embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "private static void writeEmbedded ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"id\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"class\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"class\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "private static void writeEmbedded ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"id\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"class\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "private void writeObject ( Object obj ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; oos. writeObject ( obj ) ; oos. close ( ) ; }",
        "private void writeObject ( Object obj ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream out = new ObjectOutputStream ( baos ) ; out. writeObject ( obj ) ; out. close ( ) ; }",
        "private void writeObject ( Object obj ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream os = new ObjectOutputStream ( baos ) ; os. writeObject ( obj ) ; os. close ( ) ; }",
        "private void writeObject ( Object obj ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream out = new ObjectOutputStream ( baos ) ; out. writeObject ( obj ) ; out. flush ( ) ; }",
        "private void writeObject ( Object obj ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; oos. writeObject ( obj ) ; oos. flush ( ) ; }",
        "public static void writeEmbedded ( Connection conn, Object embeddedObject ) throws SQLException { if ( embeddedObject == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } if ( conn == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } PreparedStatement stmt = null ; try { stmt = conn. prepareStatement ( insertEmbeddedSQL ) ; stmt. setString ( 1, embeddedObject. toString ( ) ) ; stmt. setLong ( 2, embeddedObject. hashCode ( ) ) ; stmt. executeUpdate ( ) ; } finally { close ( stmt ) ; } }",
        "public static void writeEmbedded ( Connection conn, Object embeddedObject ) throws SQLException { if ( embeddedObject == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } if ( conn == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } PreparedStatement stmt = null ; try { stmt = conn. prepareStatement ( insertEmbeddedSQL ) ; stmt. setString ( 1, embeddedObject. toString ( ) ) ; stmt. executeUpdate ( ) ; } finally { close ( stmt ) ; } }",
        "public static void writeEmbedded ( Connection conn, Object embeddedObject ) throws SQLException { if ( embeddedObject == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } if ( conn == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } PreparedStatement stmt = null ; try { stmt = conn. prepareStatement ( insertEmbeddedSQL ) ; stmt. setLong ( 1, embeddedObject. hashCode ( ) ) ; stmt. executeUpdate ( ) ; } finally { close ( stmt ) ; } }",
        "public static void writeEmbedded ( Connection conn, Object embeddedObject ) throws SQLException { if ( embeddedObject == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } if ( conn == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } PreparedStatement stmt = null ; try { stmt = conn. prepareStatement ( insertEmbeddedSQL ) ; stmt. setString ( 1, embeddedObject. toString ( ) ) ; stmt. executeUpdate ( ) ; } finally { if ( stmt!= null ) { stmt. close ( ) ; } } }",
        "public static void writeEmbedded ( Connection conn, Object embeddedObject ) throws SQLException { if ( embeddedObject == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } if ( conn == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } PreparedStatement stmt = null ; try { stmt = conn. prepareStatement ( insertEmbeddedSQL ) ; stmt. setLong ( 1, embeddedObject. hashCode ( ) ) ; stmt. executeUpdate ( ) ; } finally { if ( stmt!= null ) { stmt. close ( ) ; } } }",
        "private static void writeEmbedded ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeString ( embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "private static void writeEmbedded ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( embedded. getClass ( ). getName ( ), embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "private static void writeEmbedded ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "private static void writeEmbedded ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { if ( embedded == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "private static void writeEmbedded ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { if ( embedded == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeObject ( embedded ) ; } }",
        "private void writeObject ( ObjectOutputStream out ) throws IOException { out. writeInt ( embedded. length ) ; for ( int i = 0 ; i < embedded. length ; i ++ ) { out. writeObject ( embedded [ i ] ) ; } }",
        "private void writeObject ( ObjectOutputStream out ) throws IOException { out. writeInt ( embedded. length ) ; for ( int i = 0 ; i < embedded. length ; i ++ ) { out. writeObject ( embedded [ i ] ) ; } out. flush ( ) ; }",
        "private void writeObject ( ObjectOutputStream out ) throws IOException { out. writeInt ( embedded. length ) ; for ( int i = 0 ; i < embedded. length ; i ++ ) { out. writeObject ( embedded [ i ] ) ; } out. close ( ) ; }",
        "private void writeObject ( ObjectOutputStream out ) throws IOException { out. writeInt ( embedded. length ) ; for ( int i = 0 ; i < embedded. length ; i ++ ) { out. writeInt ( embedded [ i ] ) ; } }",
        "private void writeObject ( ObjectOutputStream out ) throws IOException { out. writeInt ( size ) ; for ( int i = 0 ; i < size ; i ++ ) { out. writeObject ( data [ i ] ) ; } }"
      ],
      "mid_translation": [
        "Writes the given embedded object to the generated JSON.",
        "Writes the given embedded object.",
        "Writes the given embedded object to the database.",
        "Writes the given embedded object to the JSON stream.",
        "Writes the given embedded object to the underlying stream."
      ],
      "output": [
        "public void writeEmbeddedObject ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"id\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"class\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"value\", embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void writeEmbeddedObject ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"id\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"class\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void writeEmbeddedObject ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"id\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"value\", embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void writeEmbeddedObject ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"id\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"class\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"class\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void writeEmbeddedObject ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"id\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"class\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void writeEmbeddedObject ( Object obj ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; oos. writeObject ( obj ) ; oos. close ( ) ; }",
        "public void writeEmbeddedObject ( Object obj ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream out = new ObjectOutputStream ( baos ) ; out. writeObject ( obj ) ; out. close ( ) ; }",
        "public void writeEmbeddedObject ( Object obj ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream os = new ObjectOutputStream ( baos ) ; os. writeObject ( obj ) ; os. close ( ) ; }",
        "public void writeEmbeddedObject ( Object obj ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream out = new ObjectOutputStream ( baos ) ; out. writeObject ( obj ) ; out. flush ( ) ; }",
        "public void writeEmbeddedObject ( Object obj ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; oos. writeObject ( obj ) ; oos. flush ( ) ; }",
        "public void writeEmbeddedObject ( Connection conn, Object embeddedObject ) throws SQLException { if ( embeddedObject == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } if ( conn == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } PreparedStatement stmt = null ; try { stmt = conn. prepareStatement ( insertEmbeddedSQL ) ; stmt. setString ( 1, embeddedObject. toString ( ) ) ; stmt. setLong ( 2, embeddedObject. hashCode ( ) ) ; stmt. executeUpdate ( ) ; } finally { close ( stmt ) ; } }",
        "public void writeEmbeddedObject ( Connection conn, Object embeddedObject ) throws SQLException { if ( embeddedObject == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } if ( conn == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } PreparedStatement stmt = null ; try { stmt = conn. prepareStatement ( insertEmbeddedSQL ) ; stmt. setString ( 1, embeddedObject. toString ( ) ) ; stmt. executeUpdate ( ) ; } finally { close ( stmt ) ; } }",
        "public void writeEmbeddedObject ( Connection conn, Object embeddedObject ) throws SQLException { if ( embeddedObject == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } if ( conn == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } PreparedStatement stmt = null ; try { stmt = conn. prepareStatement ( insertEmbeddedSQL ) ; stmt. setLong ( 1, embeddedObject. hashCode ( ) ) ; stmt. executeUpdate ( ) ; } finally { close ( stmt ) ; } }",
        "public void writeEmbeddedObject ( Connection conn, Object embeddedObject ) throws SQLException { if ( embeddedObject == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } if ( conn == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } PreparedStatement stmt = null ; try { stmt = conn. prepareStatement ( insertEmbeddedSQL ) ; stmt. setString ( 1, embeddedObject. toString ( ) ) ; stmt. executeUpdate ( ) ; } finally { if ( stmt!= null ) { stmt. close ( ) ; } } }",
        "public void writeEmbeddedObject ( Connection conn, Object embeddedObject ) throws SQLException { if ( embeddedObject == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } if ( conn == null ) { throw new IllegalArgumentException ( \"Embedded object cannot be null\" ) ; } PreparedStatement stmt = null ; try { stmt = conn. prepareStatement ( insertEmbeddedSQL ) ; stmt. setLong ( 1, embeddedObject. hashCode ( ) ) ; stmt. executeUpdate ( ) ; } finally { if ( stmt!= null ) { stmt. close ( ) ; } } }",
        "public void writeEmbeddedObject ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( embedded. getClass ( ). getName ( ) ) ; jsonGenerator. writeString ( embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void writeEmbeddedObject ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( embedded. getClass ( ). getName ( ), embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void writeEmbeddedObject ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void writeEmbeddedObject ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { if ( embedded == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeString ( embedded. toString ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "public void writeEmbeddedObject ( JsonGenerator jsonGenerator, Object embedded ) throws IOException { if ( embedded == null ) { jsonGenerator. writeNull ( ) ; } else { jsonGenerator. writeObject ( embedded ) ; } }",
        "public void writeEmbeddedObject ( ObjectOutputStream out ) throws IOException { out. writeInt ( embedded. length ) ; for ( int i = 0 ; i < embedded. length ; i ++ ) { out. writeObject ( embedded [ i ] ) ; } }",
        "public void writeEmbeddedObject ( ObjectOutputStream out ) throws IOException { out. writeInt ( embedded. length ) ; for ( int i = 0 ; i < embedded. length ; i ++ ) { out. writeObject ( embedded [ i ] ) ; } out. flush ( ) ; }",
        "public void writeEmbeddedObject ( ObjectOutputStream out ) throws IOException { out. writeInt ( embedded. length ) ; for ( int i = 0 ; i < embedded. length ; i ++ ) { out. writeObject ( embedded [ i ] ) ; } out. close ( ) ; }",
        "public void writeEmbeddedObject ( ObjectOutputStream out ) throws IOException { out. writeInt ( embedded. length ) ; for ( int i = 0 ; i < embedded. length ; i ++ ) { out. writeInt ( embedded [ i ] ) ; } }",
        "public void writeEmbeddedObject ( ObjectOutputStream out ) throws IOException { out. writeInt ( size ) ; for ( int i = 0 ; i < size ; i ++ ) { out. writeObject ( data [ i ] ) ; } }"
      ]
    },
    "JacksonCore_25_/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java_1963-1964": {
      "loc": "1963-1964",
      "input": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c; if (i <= maxCode) { if (codes[i] != 0) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } }",
      "target": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c; if (i < maxCode) { if (codes[i] != 0) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } }",
      "function range": "1948,5-1990,5",
      "raw_output": [
        "private boolean oddName ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' && name. charAt ( 2 ) =='' && name. charAt ( 3 ) =='' && name. charAt ( 4 ) =='' ) { return true ; } return false ; }",
        "private boolean oddName ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return true ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return true ; } return false ; }",
        "private boolean oddName ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return false ; } return true ; }",
        "private boolean oddName ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' && name. charAt ( 2 ) =='' && name. charAt ( 3 ) =='' ) { return true ; } return false ; }",
        "private static String oddName ( String name ) { if ( name. length ( ) % 2 == 0 ) { return name. substring ( 0, 1 ) + name. substring ( 1, name. length ( ) - 1 ) ; } else { return name ; } }",
        "private static String oddName ( String name ) { if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1 ) ; if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1 ) ; if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1 ) ; return name ; }",
        "private static String oddName ( String name ) { if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1, name. length ( ) - 1 ) ; if ( name. charAt ( name. length ( ) - 1 ) =='' ) name = name. substring ( 0, name. length ( ) - 1 ) ; return name ; }",
        "private static String oddName ( String name ) { if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1, name. length ( ) - 1 ) ; if ( name. charAt ( name. length ( ) - 1 ) =='' ) name = name. substring ( 1, name. length ( ) - 1 ) ; return name ; }",
        "private static String oddName ( String name ) { if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1, name. length ( ) - 1 ) ; if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1, name. length ( ) - 1 ) ; return name ; }",
        "private static String oddName ( String name ) { if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1 ) ; if ( name. charAt ( name. length ( ) - 1 ) =='' ) name = name. substring ( 0, name. length ( ) - 1 ) ; return name ; }",
        "private static boolean odd ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. length ( ) % 2!= 0 ) { return false ; } return true ; }",
        "private static boolean odd ( String x, String y ) { if ( x. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } return true ; }",
        "private static boolean odd ( String x, String y ) { if ( x. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } return true ; }",
        "private static boolean odd ( String x, String y ) { if ( x. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } return true ; }",
        "private static boolean odd ( String s ) { if ( s. length ( ) % 2!= 0 ) { return false ; } if ( s. length ( ) % 2!= 0 ) { return false ; } if ( s. length ( ) % 2!= 0 ) { return false ; } if ( s. length ( ) % 2!= 0 ) { return false ; } if ( s. length ( ) % 2!= 0 ) { return false ; } if ( s. length ( ) % 2!= 0 ) { return false ; } return true ; }",
        "private void oddNames ( ) { for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i + 1 ] ; } for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i ] ; } }",
        "private void oddNames ( ) { for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i + 1 ] ; names [ i + 2 ] = names [ i + 3 ] ; names [ i + 4 ] = names [ i + 5 ] ; } }",
        "private void oddNames ( ) { for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i + 1 ] ; } names [ names. length - 1 ] = names [ names. length - 1 ] ; }",
        "private void oddNames ( ) { for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i + 1 ] ; names [ i + 2 ] = names [ i + 3 ] ; } }",
        "private void oddNames ( ) { for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i + 1 ] ; names [ i + 1 ] = names [ i + 2 ] ; } }",
        "private static boolean oddName ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' && name. charAt ( 2 ) =='' && name. charAt ( 3 ) =='' && name. charAt ( 4 ) =='' && name. charAt ( 5 ) =='' && name. charAt ( 6 ) =='' && name. charAt ( 7 ) =='' ) { return true ; } return false ; }",
        "private boolean oddName ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' && name. charAt ( 2 ) =='' && name. charAt ( 3 ) =='' && name. charAt ( 4 ) =='' && name. charAt ( 5 ) =='' && name. charAt ( 6 ) =='' && name. charAt ( 7 ) =='' ) { return true ; } return false ; }",
        "private static boolean oddName ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' && name. charAt ( 2 ) =='' && name. charAt ( 3 ) =='' && name. charAt ( 4 ) =='' && name. charAt ( 5 ) =='' && name. charAt ( 6 ) =='' && name. charAt ( 7 ) =='' ) { return false ; } return true ; }",
        "private static boolean oddName ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return true ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return true ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return true ; } return false ; }",
        "private static boolean oddName ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return false ; } return true ; }"
      ],
      "mid_translation": [
        "Handle a odd Name.",
        "Handle a odd name.",
        "Handle the odd names.",
        "handle odd names.",
        "Handle an odd Name."
      ],
      "output": [
        "private boolean _handleOddName2 ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' && name. charAt ( 2 ) =='' && name. charAt ( 3 ) =='' && name. charAt ( 4 ) =='' ) { return true ; } return false ; }",
        "private boolean _handleOddName2 ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return true ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return true ; } return false ; }",
        "private boolean _handleOddName2 ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return false ; } return true ; }",
        "private boolean _handleOddName2 ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' && name. charAt ( 2 ) =='' && name. charAt ( 3 ) =='' ) { return true ; } return false ; }",
        "private String _handleOddName2 ( String name ) { if ( name. length ( ) % 2 == 0 ) { return name. substring ( 0, 1 ) + name. substring ( 1, name. length ( ) - 1 ) ; } else { return name ; } }",
        "private String _handleOddName2 ( String name ) { if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1 ) ; if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1 ) ; if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1 ) ; return name ; }",
        "private String _handleOddName2 ( String name ) { if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1, name. length ( ) - 1 ) ; if ( name. charAt ( name. length ( ) - 1 ) =='' ) name = name. substring ( 0, name. length ( ) - 1 ) ; return name ; }",
        "private String _handleOddName2 ( String name ) { if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1, name. length ( ) - 1 ) ; if ( name. charAt ( name. length ( ) - 1 ) =='' ) name = name. substring ( 1, name. length ( ) - 1 ) ; return name ; }",
        "private String _handleOddName2 ( String name ) { if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1, name. length ( ) - 1 ) ; if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1, name. length ( ) - 1 ) ; return name ; }",
        "private String _handleOddName2 ( String name ) { if ( name. charAt ( 0 ) =='' ) name = name. substring ( 1 ) ; if ( name. charAt ( name. length ( ) - 1 ) =='' ) name = name. substring ( 0, name. length ( ) - 1 ) ; return name ; }",
        "private boolean _handleOddName2 ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. length ( ) % 2!= 0 ) { return false ; } return true ; }",
        "private boolean _handleOddName2 ( String x, String y ) { if ( x. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } return true ; }",
        "private boolean _handleOddName2 ( String x, String y ) { if ( x. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } return true ; }",
        "private boolean _handleOddName2 ( String x, String y ) { if ( x. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( x. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } if ( y. length ( ) % 2!= 0 ) { return false ; } return true ; }",
        "private boolean _handleOddName2 ( String s ) { if ( s. length ( ) % 2!= 0 ) { return false ; } if ( s. length ( ) % 2!= 0 ) { return false ; } if ( s. length ( ) % 2!= 0 ) { return false ; } if ( s. length ( ) % 2!= 0 ) { return false ; } if ( s. length ( ) % 2!= 0 ) { return false ; } if ( s. length ( ) % 2!= 0 ) { return false ; } return true ; }",
        "private void _handleOddName2 ( ) { for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i + 1 ] ; } for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i ] ; } }",
        "private void _handleOddName2 ( ) { for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i + 1 ] ; names [ i + 2 ] = names [ i + 3 ] ; names [ i + 4 ] = names [ i + 5 ] ; } }",
        "private void _handleOddName2 ( ) { for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i + 1 ] ; } names [ names. length - 1 ] = names [ names. length - 1 ] ; }",
        "private void _handleOddName2 ( ) { for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i + 1 ] ; names [ i + 2 ] = names [ i + 3 ] ; } }",
        "private void _handleOddName2 ( ) { for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = names [ i + 1 ] ; names [ i + 1 ] = names [ i + 2 ] ; } }",
        "private boolean _handleOddName2 ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' && name. charAt ( 2 ) =='' && name. charAt ( 3 ) =='' && name. charAt ( 4 ) =='' && name. charAt ( 5 ) =='' && name. charAt ( 6 ) =='' && name. charAt ( 7 ) =='' ) { return true ; } return false ; }",
        "private boolean _handleOddName2 ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' && name. charAt ( 2 ) =='' && name. charAt ( 3 ) =='' && name. charAt ( 4 ) =='' && name. charAt ( 5 ) =='' && name. charAt ( 6 ) =='' && name. charAt ( 7 ) =='' ) { return true ; } return false ; }",
        "private boolean _handleOddName2 ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' && name. charAt ( 2 ) =='' && name. charAt ( 3 ) =='' && name. charAt ( 4 ) =='' && name. charAt ( 5 ) =='' && name. charAt ( 6 ) =='' && name. charAt ( 7 ) =='' ) { return false ; } return true ; }",
        "private boolean _handleOddName2 ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return true ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return true ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return true ; } return false ; }",
        "private boolean _handleOddName2 ( String name ) { if ( name. length ( ) % 2!= 0 ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return false ; } if ( name. charAt ( 0 ) =='' && name. charAt ( 1 ) =='' ) { return false ; } return true ; }"
      ]
    },
    "JacksonDatabind_12_/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java_303-304": {
      "loc": "303-304",
      "input": "@Override public boolean isCachable() { return (_valueTypeDeserializer == null) && (_ignorableProperties == null); }",
      "target": "@Override public boolean isCachable() { return (_valueDeserializer == null) && (_keyDeserializer == null) && (_valueTypeDeserializer == null) && (_ignorableProperties == null); }",
      "function range": "298,5-305,5",
      "raw_output": [
        "public boolean hasField ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } else { return false ; } }",
        "public boolean hasField ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } return false ; }",
        "public boolean hasField ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( ) ; } else { return false ; } }",
        "public boolean hasField ( Field field ) { return hasField ( field. getName ( ), field. getSignature ( ), field. isStatic ( ) ) ; }",
        "public boolean hasField ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( ) ; } return false ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public boolean isReachable ( ) { if ( isReachable. getAndSet ( true ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return false ; } if ( isReachable. getAndSet ( true ) ) { return true ; } return false ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public boolean isReachable ( ) { if ( isReachable. getAndSet ( true ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return true ; } return false ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public boolean isReachable ( ) { if ( isReachable. getAndSet ( true ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return true ; } if ( isReachable. getAndSet ( true ) ) { return true ; } return false ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public boolean isReachable ( ) { if ( isReachable. getAndSet ( true ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return false ; } return true ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public boolean isReachable ( ) { if ( isReachable. getAndSet ( true ) ) { return true ; } try { if ( isReachable. getAndSet ( false ) ) { return true ; } } catch ( Exception e ) { return false ; } return false ; }",
        "public boolean hasField ( String fieldName ) { for ( Field field : fields ) { if ( field. getName ( ). equals ( fieldName ) ) { return true ; } } return false ; }",
        "public boolean hasField ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } return false ; }",
        "public boolean hasField ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } else { return false ; } }",
        "public boolean hasField ( String fieldName ) { for ( Field field : fields ) { if ( field. getName ( ). equalsIgnoreCase ( fieldName ) ) { return true ; } } return false ; }",
        "public boolean hasField ( String fieldName ) { if ( hasField ( fieldName ) ) { return hasField ( fieldName ) ; } return false ; }",
        "public boolean hasField ( String fieldName ) { for ( Field field : fields ) { if ( field. getName ( ). equals ( fieldName ) ) { return true ; } } return false ; }",
        "public boolean hasField ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } return false ; }",
        "public boolean hasField ( String fieldName ) { for ( Field f : fields ) { if ( f. hasField ( fieldName ) ) { return true ; } } return false ; }",
        "public boolean hasField ( String fieldName ) { for ( Field field : fields ) { if ( field. getName ( ). equals ( fieldName ) ) return true ; } return false ; }",
        "public boolean hasField ( String fieldName ) { for ( Field f : fields ) { if ( f. hasField ( fieldName ) ) return true ; } return false ; }",
        "public boolean hasField ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } else { return false ; } }",
        "public boolean hasField ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } return false ; }",
        "public boolean hasField ( String name ) { if ( name == null || name. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < fields. length ; i ++ ) { fields [ i ]. hasField ( name ) ; } return true ; }",
        "public boolean hasField ( String name ) { if ( name == null || name. length ( ) == 0 ) { return false ; } return hasField ( name ) ; }",
        "public boolean hasField ( String name ) { if ( name == null || name. length ( ) == 0 ) { return false ; } if ( fields. containsKey ( name ) ) { return true ; } return false ; }"
      ],
      "mid_translation": [
        "Returns true if the field is reachable.",
        "Returns true if the configuration is reachable.",
        "Returns true if the field is reachable otherwise returns false.",
        "Returns true if the field is reachable otherwise false.",
        "Returns true if this field is reachable."
      ],
      "output": [
        "@Override public boolean isCachable ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } else { return false ; } }",
        "@Override public boolean isCachable ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } return false ; }",
        "@Override public boolean isCachable ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( ) ; } else { return false ; } }",
        "@Override public boolean isCachable ( Field field ) { return hasField ( field. getName ( ), field. getSignature ( ), field. isStatic ( ) ) ; }",
        "@Override public boolean isCachable ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( ) ; } return false ; }",
        "@Override public boolean isCachable ( ) { if ( isReachable. getAndSet ( true ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return false ; } if ( isReachable. getAndSet ( true ) ) { return true ; } return false ; }",
        "@Override public boolean isCachable ( ) { if ( isReachable. getAndSet ( true ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return true ; } return false ; }",
        "@Override public boolean isCachable ( ) { if ( isReachable. getAndSet ( true ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return true ; } if ( isReachable. getAndSet ( true ) ) { return true ; } return false ; }",
        "@Override public boolean isCachable ( ) { if ( isReachable. getAndSet ( true ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return true ; } if ( isReachable. getAndSet ( false ) ) { return false ; } return true ; }",
        "@Override public boolean isCachable ( ) { if ( isReachable. getAndSet ( true ) ) { return true ; } try { if ( isReachable. getAndSet ( false ) ) { return true ; } } catch ( Exception e ) { return false ; } return false ; }",
        "@Override public boolean isCachable ( String fieldName ) { for ( Field field : fields ) { if ( field. getName ( ). equals ( fieldName ) ) { return true ; } } return false ; }",
        "@Override public boolean isCachable ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } return false ; }",
        "@Override public boolean isCachable ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } else { return false ; } }",
        "@Override public boolean isCachable ( String fieldName ) { for ( Field field : fields ) { if ( field. getName ( ). equalsIgnoreCase ( fieldName ) ) { return true ; } } return false ; }",
        "@Override public boolean isCachable ( String fieldName ) { if ( hasField ( fieldName ) ) { return hasField ( fieldName ) ; } return false ; }",
        "@Override public boolean isCachable ( String fieldName ) { for ( Field field : fields ) { if ( field. getName ( ). equals ( fieldName ) ) { return true ; } } return false ; }",
        "@Override public boolean isCachable ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } return false ; }",
        "@Override public boolean isCachable ( String fieldName ) { for ( Field f : fields ) { if ( f. hasField ( fieldName ) ) { return true ; } } return false ; }",
        "@Override public boolean isCachable ( String fieldName ) { for ( Field field : fields ) { if ( field. getName ( ). equals ( fieldName ) ) return true ; } return false ; }",
        "@Override public boolean isCachable ( String fieldName ) { for ( Field f : fields ) { if ( f. hasField ( fieldName ) ) return true ; } return false ; }",
        "@Override public boolean isCachable ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } else { return false ; } }",
        "@Override public boolean isCachable ( String fieldName ) { if ( fields. containsKey ( fieldName ) ) { return fields. get ( fieldName ). hasField ( fieldName ) ; } return false ; }",
        "@Override public boolean isCachable ( String name ) { if ( name == null || name. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < fields. length ; i ++ ) { fields [ i ]. hasField ( name ) ; } return true ; }",
        "@Override public boolean isCachable ( String name ) { if ( name == null || name. length ( ) == 0 ) { return false ; } return hasField ( name ) ; }",
        "@Override public boolean isCachable ( String name ) { if ( name == null || name. length ( ) == 0 ) { return false ; } if ( fields. containsKey ( name ) ) { return true ; } return false ; }"
      ]
    },
    "JacksonDatabind_16_/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java_112-113": {
      "loc": "112-113",
      "input": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann); return (previous != null) && previous.equals(ann); }",
      "target": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann); return (previous == null) || !previous.equals(ann); }",
      "function range": "107,5-113,5",
      "raw_output": [
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotationMap == null ) { this. annotationMap = new HashMap < Annotation, Annotation > ( ) ; } this. annotationMap. put ( annotation, annotation ) ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap < Annotation, Annotation > ( ) ; } this. annotations. put ( annotation, annotation ) ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotationMap == null ) { this. annotationMap = new HashMap <> ( ) ; } this. annotationMap. put ( annotation. annotationType ( ). getName ( ), annotation ) ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap <> ( ) ; } this. annotations. put ( annotation. annotationType ( ). getName ( ), annotation ) ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; }",
        "public Annotation addAnnotation ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; return this ; }",
        "public Annotation add ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; return this ; }",
        "public Annotation addAnnotation ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; return this ; }",
        "public Annotation addAnnotation ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap < Annotation, Annotation > ( ) ; } this. annotations. put ( annotation, annotation ) ; return this ; }",
        "public Annotation addAnnotation ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; return annotation ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotationMap == null ) { this. annotationMap = new HashMap < Annotation, Annotation > ( ) ; } this. annotationMap. put ( annotation, annotation ) ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap < Annotation, Annotation > ( ) ; } this. annotations. put ( annotation, annotation ) ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotationMap == null ) { this. annotationMap = new HashMap <> ( ) ; } this. annotationMap. put ( annotation. annotationType ( ). getName ( ), annotation ) ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap <> ( ) ; } this. annotations. put ( annotation. annotationType ( ). getName ( ), annotation ) ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotationMap == null ) { this. annotationMap = new HashMap <> ( ) ; } this. annotationMap. put ( annotation. getName ( ), annotation ) ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap < Annotation, Annotation > ( ) ; } this. annotations. put ( annotation, annotation ) ; }",
        "public void addAnnotation ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashSet < Annotation > ( ) ; } this. annotations. add ( annotation ) ; }",
        "public void addAnnotation ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( annotations == null ) { annotations = new HashMap < Annotation, Annotation > ( ) ; } annotations. put ( annotation, annotation ) ; }",
        "public AnnotationSet addAnnotation ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( annotations == null ) { annotations = new ArrayList < Annotation > ( ) ; } annotations. add ( annotation ) ; return this ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T addAnnotation ( String annotation ) { if ( this. annotations == null ) { this. annotations = new ArrayList <> ( ) ; } this. annotations. add ( annotation ) ; return ( T ) this ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T addAnnotation ( Class <? extends Annotation > annotation ) { if ( this. annotations == null ) { this. annotations = new ArrayList <> ( ) ; } this. annotations. add ( annotation ) ; return ( T ) this ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T addAnnotation ( String annotation ) { if ( this. annotations == null ) { this. annotations = new HashMap <> ( ) ; } this. annotations. put ( annotation, this ) ; return ( T ) this ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T addAnnotation ( String annotation ) { if ( this. annotations == null ) { this. annotations = new ArrayList < String > ( ) ; } this. annotations. add ( annotation ) ; return ( T ) this ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T addAnnotation ( String annotation ) { if ( this. annotations == null ) { this. annotations = new HashMap <> ( ) ; } this. annotations. put ( annotation, this. annotations ) ; return ( T ) this ; }"
      ],
      "mid_translation": [
        "Adds an annotation to the annotation map.",
        "Adds an annotation to this annotation instance.",
        "Add an annotation to the annotation map.",
        "Adds an annotation to the annotation set.",
        "Adds an annotation."
      ],
      "output": [
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotationMap == null ) { this. annotationMap = new HashMap < Annotation, Annotation > ( ) ; } this. annotationMap. put ( annotation, annotation ) ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap < Annotation, Annotation > ( ) ; } this. annotations. put ( annotation, annotation ) ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotationMap == null ) { this. annotationMap = new HashMap <> ( ) ; } this. annotationMap. put ( annotation. annotationType ( ). getName ( ), annotation ) ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap <> ( ) ; } this. annotations. put ( annotation. annotationType ( ). getName ( ), annotation ) ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; }",
        "protected final Annotation _add ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; return this ; }",
        "protected final Annotation _add ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; return this ; }",
        "protected final Annotation _add ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; return this ; }",
        "protected final Annotation _add ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap < Annotation, Annotation > ( ) ; } this. annotations. put ( annotation, annotation ) ; return this ; }",
        "protected final Annotation _add ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; return annotation ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotationMap == null ) { this. annotationMap = new HashMap < Annotation, Annotation > ( ) ; } this. annotationMap. put ( annotation, annotation ) ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap < Annotation, Annotation > ( ) ; } this. annotations. put ( annotation, annotation ) ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotationMap == null ) { this. annotationMap = new HashMap <> ( ) ; } this. annotationMap. put ( annotation. annotationType ( ). getName ( ), annotation ) ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap <> ( ) ; } this. annotations. put ( annotation. annotationType ( ). getName ( ), annotation ) ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotationMap == null ) { this. annotationMap = new HashMap <> ( ) ; } this. annotationMap. put ( annotation. getName ( ), annotation ) ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new ArrayList < Annotation > ( ) ; } this. annotations. add ( annotation ) ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashMap < Annotation, Annotation > ( ) ; } this. annotations. put ( annotation, annotation ) ; }",
        "protected final void _add ( final Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( this. annotations == null ) { this. annotations = new HashSet < Annotation > ( ) ; } this. annotations. add ( annotation ) ; }",
        "protected final void _add ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( annotations == null ) { annotations = new HashMap < Annotation, Annotation > ( ) ; } annotations. put ( annotation, annotation ) ; }",
        "protected final AnnotationSet _add ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( \"Annotation cannot be null\" ) ; } if ( annotations == null ) { annotations = new ArrayList < Annotation > ( ) ; } annotations. add ( annotation ) ; return this ; }",
        "protected final T _add ( String annotation ) { if ( this. annotations == null ) { this. annotations = new ArrayList <> ( ) ; } this. annotations. add ( annotation ) ; return ( T ) this ; }",
        "protected final T _add ( Class <? extends Annotation > annotation ) { if ( this. annotations == null ) { this. annotations = new ArrayList <> ( ) ; } this. annotations. add ( annotation ) ; return ( T ) this ; }",
        "protected final T _add ( String annotation ) { if ( this. annotations == null ) { this. annotations = new HashMap <> ( ) ; } this. annotations. put ( annotation, this ) ; return ( T ) this ; }",
        "protected final T _add ( String annotation ) { if ( this. annotations == null ) { this. annotations = new ArrayList < String > ( ) ; } this. annotations. add ( annotation ) ; return ( T ) this ; }",
        "protected final T _add ( String annotation ) { if ( this. annotations == null ) { this. annotations = new HashMap <> ( ) ; } this. annotations. put ( annotation, this. annotations ) ; return ( T ) this ; }"
      ]
    },
    "JacksonDatabind_17_/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java_180-181": {
      "loc": "180-181",
      "input": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete() || TreeNode.class.isAssignableFrom(t.getRawClass())); case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } }",
      "target": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete() && !TreeNode.class.isAssignableFrom(t.getRawClass())); case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } }",
      "function range": "167,9-193,9",
      "raw_output": [
        "public static boolean use ( JavaType type ) { if ( type instanceof Class <? > ) { return use ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return use ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public static boolean use ( JavaType type ) { if ( type instanceof Class <? > ) { return use ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return use ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } return false ; }",
        "public static boolean use ( JavaType type ) { if ( type instanceof Class <? > ) { return use ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return use ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public static boolean use ( JavaType type ) { if ( type instanceof Class <? > ) { return use ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return use ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public static boolean use ( JavaType type ) { if ( type instanceof Class <? > ) { return use ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return use ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } return false ; }",
        "public static boolean isApplicable ( JavaType type ) { if ( type instanceof Class <? > ) { return isApplicable ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return isApplicable ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } return false ; }",
        "public static boolean isApplicable ( JavaType type ) { if ( type instanceof Class <? > ) { return isApplicable ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return isApplicable ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public static boolean isApplicable ( JavaType type ) { if ( type instanceof Class <? > ) { return isApplicable ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return isApplicable ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public static boolean isApplicable ( JavaType type ) { if ( type instanceof Class <? > ) { return isApplicable ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return isApplicable ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } return false ; }",
        "public static boolean isApplicable ( JavaType type ) { if ( type instanceof GenericArrayType ) { return isApplicable ( ( ( GenericArrayType ) type ). getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( ( GenericArrayType ) type ). getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( ( GenericArrayType ) type ). getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( ( GenericArrayType ) type ). getGenericComponentType ( ) ) ; } else { return false ; } }",
        "public static boolean shouldUse ( Node node, JavaType javaType ) { if ( javaType == null ) { return false ; } switch ( javaType. getSort ( ) ) { case TypeKind. BOOLEAN : case TypeKind. BYTE : case TypeKind. SHORT : case TypeKind. INT : case TypeKind. LONG : case TypeKind. FLOAT : case TypeKind. DOUBLE : case TypeKind. BOOLEAN : return true ; default : return false ; } }",
        "public static boolean shouldUse ( Node node, JavaType javaType ) { if ( javaType == null ) { return false ; } switch ( javaType. getSort ( ) ) { case TypeKind. BOOLEAN : case TypeKind. BYTE : case TypeKind. SHORT : case TypeKind. CHAR : case TypeKind. INT : case TypeKind. LONG : case TypeKind. FLOAT : case TypeKind. DOUBLE : case TypeKind. BOOLEAN : return true ; default : return false ; } }",
        "public static boolean shouldUse ( Node node, JavaType javaType ) { if ( javaType == null ) { return false ; } switch ( javaType. getSort ( ) ) { case TypeKind. BOOLEAN : case TypeKind. BYTE : case TypeKind. CHAR : case TypeKind. SHORT : case TypeKind. INT : case TypeKind. LONG : case TypeKind. FLOAT : case TypeKind. DOUBLE : case TypeKind. BOOLEAN : return true ; default : return false ; } }",
        "public static boolean use ( Node node, JavaType javaType ) { if ( javaType == null ) { return false ; } return use ( node, javaType. getRawType ( ) ) ; }",
        "public static boolean shouldUse ( Node node, JavaType javaType ) { if ( javaType == null ) { return false ; } return shouldUse ( node, javaType. getRawType ( ) ) ; }",
        "public static boolean is appropriate ( JavaType type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return is appropriateFor ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriateFor ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriateFor ( genericArrayType. getGenericComponentType ( ) ) ; } return false ; }",
        "public static boolean is appropriate ( JavaType type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return is appropriate ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriate ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriate ( genericArrayType. getGenericComponentType ( ) ) ; } else { return false ; } }",
        "public static boolean is appropriate ( JavaType type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return is appropriate ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriate ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriate ( genericArrayType. getGenericComponentType ( ) ) ; } return false ; }",
        "public static boolean is appropriate ( JavaType type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return is appropriateFor ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) type ; return is appropriateFor ( clazz ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriateFor ( genericArrayType. getGenericComponentType ( ) ) ; } return false ; }",
        "public static boolean is appropriate ( JavaType type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return is appropriateFor ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) type ; return is appropriateFor ( clazz ) ; } else if ( type instanceof ParameterizedType ) { Class <? > clazz = ( Class <? > ) type ; return is appropriateFor ( clazz ) ; } return false ; }",
        "public static boolean canAccept ( JavaType type ) { if ( type instanceof Class <? > ) { return canAccept ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return canAccept ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } return false ; }",
        "public static boolean isValid ( JavaType type ) { if ( type instanceof Class <? > ) { return isValid ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return isValid ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } return false ; }",
        "public static boolean canAccept ( JavaType type ) { if ( type instanceof Class <? > ) { return canAccept ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return canAccept ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public static boolean canAccept ( JavaType type ) { if ( type instanceof Class <? > ) { return canAccept ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return canAccept ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } return false ; }",
        "public static boolean canAccept ( JavaType type ) { if ( type instanceof Class <? > ) { return canAccept ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return canAccept ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else { return false ; } }"
      ],
      "mid_translation": [
        "Determines whether the given JavaType should be used for the given JavaType.",
        "Determines whether the given JavaType is applicable for the given JavaType.",
        "Determines whether the given JavaType should be used for the given node.",
        "Determines whether the given JavaType is appropriate for the given JavaType.",
        "Determines whether the given JavaType can be used for the given JavaType."
      ],
      "output": [
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return use ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return use ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return use ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return use ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } return false ; }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return use ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return use ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return use ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return use ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return use ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return use ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return use ( ( GenericArrayType ) type ) ; } return false ; }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return isApplicable ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return isApplicable ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } return false ; }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return isApplicable ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return isApplicable ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return isApplicable ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return isApplicable ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return isApplicable ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return isApplicable ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( GenericArrayType ) type ) ; } return false ; }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof GenericArrayType ) { return isApplicable ( ( ( GenericArrayType ) type ). getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( ( GenericArrayType ) type ). getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( ( GenericArrayType ) type ). getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { return isApplicable ( ( ( GenericArrayType ) type ). getGenericComponentType ( ) ) ; } else { return false ; } }",
        "public boolean useForType ( Node node, JavaType javaType ) { if ( javaType == null ) { return false ; } switch ( javaType. getSort ( ) ) { case TypeKind. BOOLEAN : case TypeKind. BYTE : case TypeKind. SHORT : case TypeKind. INT : case TypeKind. LONG : case TypeKind. FLOAT : case TypeKind. DOUBLE : case TypeKind. BOOLEAN : return true ; default : return false ; } }",
        "public boolean useForType ( Node node, JavaType javaType ) { if ( javaType == null ) { return false ; } switch ( javaType. getSort ( ) ) { case TypeKind. BOOLEAN : case TypeKind. BYTE : case TypeKind. SHORT : case TypeKind. CHAR : case TypeKind. INT : case TypeKind. LONG : case TypeKind. FLOAT : case TypeKind. DOUBLE : case TypeKind. BOOLEAN : return true ; default : return false ; } }",
        "public boolean useForType ( Node node, JavaType javaType ) { if ( javaType == null ) { return false ; } switch ( javaType. getSort ( ) ) { case TypeKind. BOOLEAN : case TypeKind. BYTE : case TypeKind. CHAR : case TypeKind. SHORT : case TypeKind. INT : case TypeKind. LONG : case TypeKind. FLOAT : case TypeKind. DOUBLE : case TypeKind. BOOLEAN : return true ; default : return false ; } }",
        "public boolean useForType ( Node node, JavaType javaType ) { if ( javaType == null ) { return false ; } return use ( node, javaType. getRawType ( ) ) ; }",
        "public boolean useForType ( Node node, JavaType javaType ) { if ( javaType == null ) { return false ; } return shouldUse ( node, javaType. getRawType ( ) ) ; }",
        "public boolean is useForType ( JavaType type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return is appropriateFor ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriateFor ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriateFor ( genericArrayType. getGenericComponentType ( ) ) ; } return false ; }",
        "public boolean is useForType ( JavaType type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return is appropriate ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriate ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriate ( genericArrayType. getGenericComponentType ( ) ) ; } else { return false ; } }",
        "public boolean is useForType ( JavaType type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return is appropriate ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriate ( genericArrayType. getGenericComponentType ( ) ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriate ( genericArrayType. getGenericComponentType ( ) ) ; } return false ; }",
        "public boolean is useForType ( JavaType type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return is appropriateFor ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) type ; return is appropriateFor ( clazz ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) type ; return is appropriateFor ( genericArrayType. getGenericComponentType ( ) ) ; } return false ; }",
        "public boolean is useForType ( JavaType type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return is appropriateFor ( parameterizedType. getRawType ( ) ) ; } else if ( type instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) type ; return is appropriateFor ( clazz ) ; } else if ( type instanceof ParameterizedType ) { Class <? > clazz = ( Class <? > ) type ; return is appropriateFor ( clazz ) ; } return false ; }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return canAccept ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return canAccept ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } return false ; }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return isValid ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return isValid ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return isValid ( ( GenericArrayType ) type ) ; } return false ; }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return canAccept ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return canAccept ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else { return false ; } }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return canAccept ( ( Class <? > ) type ) ; } if ( type instanceof ParameterizedType ) { return canAccept ( ( ParameterizedType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } return false ; }",
        "public boolean useForType ( JavaType type ) { if ( type instanceof Class <? > ) { return canAccept ( ( Class <? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return canAccept ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else if ( type instanceof GenericArrayType ) { return canAccept ( ( GenericArrayType ) type ) ; } else { return false ; } }"
      ]
    },
    "JacksonDatabind_27_/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java_794-795": {
      "loc": "794-795",
      "input": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException { final ExternalTypeHandler ext = _externalTypeIdHandler.start(); final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp != null) { if (ext.handlePropertyValue(p, ctxt, propName, buffer)) { ; } else { if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) { t = p.nextToken(); Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt); continue; } while (t == JsonToken.FIELD_NAME) { p.nextToken(); tokens.copyCurrentStructure(p); t = p.nextToken(); } if (bean.getClass() != _beanType.getRawClass()) { throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\"); } return ext.complete(p, ctxt, bean); } } continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop != null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (ext.handlePropertyValue(p, ctxt, propName, null)) { continue; } if (_ignorableProps != null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } if (_anySetter != null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } try { return ext.complete(p, ctxt, buffer, creator); } catch (Exception e) { wrapInstantiationProblem(e, ctxt); return null; } }",
      "target": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException { final ExternalTypeHandler ext = _externalTypeIdHandler.start(); final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp != null) { if (ext.handlePropertyValue(p, ctxt, propName, null)) { ; } else { if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) { t = p.nextToken(); Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt); continue; } while (t == JsonToken.FIELD_NAME) { p.nextToken(); tokens.copyCurrentStructure(p); t = p.nextToken(); } if (bean.getClass() != _beanType.getRawClass()) { throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\"); } return ext.complete(p, ctxt, bean); } } continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop != null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (ext.handlePropertyValue(p, ctxt, propName, null)) { continue; } if (_ignorableProps != null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } if (_anySetter != null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } try { return ext.complete(p, ctxt, buffer, creator); } catch (Exception e) { wrapInstantiationProblem(e, ctxt); return null; } }",
      "function range": "773,5-857,5",
      "raw_output": [
        "public static < T > T readJson ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser. isJsonArray ( ) ) { return readJsonArray ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } return null ; }",
        "public static < T > T readJson ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser. isJsonArray ( ) ) { return readJsonArray ( jsonParser, type ) ; } if ( jsonParser. isJsonArray ( ) ) { return readJsonArray ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } return null ; }",
        "public static < T > T readJson ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser. isJsonArray ( ) ) { return readJsonArray ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } return null ; }",
        "public static < T > T readJson ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser. isJsonArray ( ) ) { return readJsonArray ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } return null ; }",
        "public static < T > T readJson ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } return readJson ( jsonParser, type. getName ( ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T readJson ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } try { return jsonParser. read ( jsonParser ) ; } catch ( JsonParseException e ) { throw new IllegalArgumentException ( e. getMessage ( ), e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T readJson ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } try { return jsonParser. read ( jsonParser ) ; } catch ( JsonParseException e ) { throw new IllegalArgumentException ( e. getMessage ( ), e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T readJson ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } try { return jsonParser. read ( jsonParser ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T readJson ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } try { return jsonParser. read ( jsonParser ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T readJson ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } try { return ( T ) jsonParser. parse ( jsonParser ) ; } catch ( JsonParseException e ) { throw new IllegalArgumentException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserializeJson ( JsonParser jsonParser, Class < T > type ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new JsonMappingException ( \"Type cannot be null\" ) ; } ObjectMapper mapper = new ObjectMapper ( ) ; return mapper. readValue ( jsonParser, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserializeJson ( JsonParser jsonParser, Class < T > type ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserializeJson ( JsonParser jsonParser, Class < T > type ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T readJson ( JsonParser jsonParser, Class < T > id ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( id == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } try { return jsonParser. read ( id ) ; } finally { jsonParser. close ( ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T readJson ( JsonParser jsonParser, Class < T > id ) throws JsonParseException, JsonMappingException, IOException { return ( T ) jsonParser. read ( jsonParser, id ) ; }",
        "private < T > T deserialize ( JsonParser jsonParser, Class < T > idClass ) throws IOException { if ( idClass == null ) { jsonParser. nextToken ( ) ; } JsonToken token = jsonParser. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; }",
        "private < T > T deserialize ( JsonParser jsonParser, Class < T > idClass ) throws IOException { if ( idClass == null ) { jsonParser. nextToken ( ) ; } JsonToken token = jsonParser. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; }",
        "private < T > T deserialize ( JsonParser jsonParser, Class < T > idClass ) throws IOException { if ( idClass == null ) { jsonParser. nextToken ( ) ; } JsonToken token = jsonParser. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; }",
        "private < T > T deserialize ( JsonParser jsonParser, Class < T > idClass ) throws IOException { if ( idClass == null ) { jsonParser. nextToken ( ) ; } JsonToken token = jsonParser. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; }",
        "private < T > T deserialize ( JsonParser jsonParser, Class < T > idClass ) throws IOException { if ( idClass == null ) { jsonParser. nextToken ( ) ; } JsonToken token = jsonParser. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserializeJson ( JsonParser jsonParser, String id ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonParseException ( \"JsonParser cannot be null\" ) ; } if ( id == null ) { throw new JsonMappingException ( \"JsonParser id cannot be null\" ) ; } try { return jsonParser. read ( id ) ; } catch ( IOException e ) { throw new JsonMappingException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserializeJson ( JsonParser jsonParser, String id ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonParseException ( \"JsonParser must not be null\" ) ; } if ( id == null ) { throw new JsonMappingException ( \"JsonParser must not be null\" ) ; } try { return jsonParser. read ( id ) ; } catch ( IOException e ) { throw new JsonMappingException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserializeJson ( JsonParser jsonParser, String id ) throws JsonParseException, JsonMappingException, IOException { if ( id == null ) { throw new JsonMappingException ( \"A id must be provided.\" ) ; } if ( jsonParser == null ) { throw new JsonMappingException ( \"A json parser must be provided.\" ) ; } try { return jsonParser. read ( id ) ; } catch ( IOException e ) { throw new JsonMappingException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, String id ) throws JsonParseException, JsonMappingException, IOException { if ( id == null ) { throw new JsonMappingException ( \"A id must be provided.\" ) ; } if ( jsonParser == null ) { throw new JsonMappingException ( \"A json parser must be provided.\" ) ; } try { return jsonParser. read ( id ) ; } catch ( IOException e ) { throw new JsonMappingException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserializeJson ( JsonParser jsonParser, String id ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonParseException ( \"JsonParser cannot be null\" ) ; } if ( id == null ) { throw new JsonMappingException ( \"JsonParser id cannot be null\" ) ; } try { return jsonParser. read ( id ) ; } catch ( JsonParseException e ) { throw new JsonMappingException ( e ) ; } }"
      ],
      "mid_translation": [
        "Deserialize the given JsonParser using a property based on the external type id.",
        "Deserialize the given JsonParser using a property based on the external id.",
        "Deserialize the contents of a JsonParser using a property based on the external id.",
        "Deserialize the given JSON parser using a property based on the external type id.",
        "Deserialize the contents of a JsonParser using a property based on an external id."
      ],
      "output": [
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser. isJsonArray ( ) ) { return readJsonArray ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } return null ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser. isJsonArray ( ) ) { return readJsonArray ( jsonParser, type ) ; } if ( jsonParser. isJsonArray ( ) ) { return readJsonArray ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } return null ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser. isJsonArray ( ) ) { return readJsonArray ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } return null ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser. isJsonArray ( ) ) { return readJsonArray ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } if ( jsonParser. isJsonPrimitive ( ) ) { return readJsonPrimitive ( jsonParser, type ) ; } return null ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } return readJson ( jsonParser, type. getName ( ) ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } try { return jsonParser. read ( jsonParser ) ; } catch ( JsonParseException e ) { throw new IllegalArgumentException ( e. getMessage ( ), e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } try { return jsonParser. read ( jsonParser ) ; } catch ( JsonParseException e ) { throw new IllegalArgumentException ( e. getMessage ( ), e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } try { return jsonParser. read ( jsonParser ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } try { return jsonParser. read ( jsonParser ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"JsonParser cannot be null\" ) ; } try { return ( T ) jsonParser. parse ( jsonParser ) ; } catch ( JsonParseException e ) { throw new IllegalArgumentException ( e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new JsonMappingException ( \"Type cannot be null\" ) ; } ObjectMapper mapper = new ObjectMapper ( ) ; return mapper. readValue ( jsonParser, type ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > type ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( type == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > id ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } if ( id == null ) { throw new JsonMappingException ( \"JsonParser cannot be null\" ) ; } try { return jsonParser. read ( id ) ; } finally { jsonParser. close ( ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > id ) throws JsonParseException, JsonMappingException, IOException { return ( T ) jsonParser. read ( jsonParser, id ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > idClass ) throws IOException { if ( idClass == null ) { jsonParser. nextToken ( ) ; } JsonToken token = jsonParser. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > idClass ) throws IOException { if ( idClass == null ) { jsonParser. nextToken ( ) ; } JsonToken token = jsonParser. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > idClass ) throws IOException { if ( idClass == null ) { jsonParser. nextToken ( ) ; } JsonToken token = jsonParser. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > idClass ) throws IOException { if ( idClass == null ) { jsonParser. nextToken ( ) ; } JsonToken token = jsonParser. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, Class < T > idClass ) throws IOException { if ( idClass == null ) { jsonParser. nextToken ( ) ; } JsonToken token = jsonParser. nextToken ( ) ; if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NUMBER ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_STRING ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; } else if ( token == JsonToken. VALUE_NULL ) { jsonParser. nextToken ( ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, String id ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonParseException ( \"JsonParser cannot be null\" ) ; } if ( id == null ) { throw new JsonMappingException ( \"JsonParser id cannot be null\" ) ; } try { return jsonParser. read ( id ) ; } catch ( IOException e ) { throw new JsonMappingException ( e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, String id ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonParseException ( \"JsonParser must not be null\" ) ; } if ( id == null ) { throw new JsonMappingException ( \"JsonParser must not be null\" ) ; } try { return jsonParser. read ( id ) ; } catch ( IOException e ) { throw new JsonMappingException ( e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, String id ) throws JsonParseException, JsonMappingException, IOException { if ( id == null ) { throw new JsonMappingException ( \"A id must be provided.\" ) ; } if ( jsonParser == null ) { throw new JsonMappingException ( \"A json parser must be provided.\" ) ; } try { return jsonParser. read ( id ) ; } catch ( IOException e ) { throw new JsonMappingException ( e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, String id ) throws JsonParseException, JsonMappingException, IOException { if ( id == null ) { throw new JsonMappingException ( \"A id must be provided.\" ) ; } if ( jsonParser == null ) { throw new JsonMappingException ( \"A json parser must be provided.\" ) ; } try { return jsonParser. read ( id ) ; } catch ( IOException e ) { throw new JsonMappingException ( e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithExternalTypeId ( JsonParser jsonParser, String id ) throws JsonParseException, JsonMappingException, IOException { if ( jsonParser == null ) { throw new JsonParseException ( \"JsonParser cannot be null\" ) ; } if ( id == null ) { throw new JsonMappingException ( \"JsonParser id cannot be null\" ) ; } try { return jsonParser. read ( id ) ; } catch ( JsonParseException e ) { throw new JsonMappingException ( e ) ; } }"
      ]
    },
    "JacksonDatabind_33_/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java_748-749": {
      "loc": "748-749",
      "input": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg != null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann != null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class) || _hasAnnotation(a, JsonRawValue.class)) { name = \"\"; } else { return null; } } return PropertyName.construct(name); }",
      "target": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg != null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann != null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class) || _hasAnnotation(a, JsonRawValue.class) || _hasAnnotation(a, JsonUnwrapped.class) || _hasAnnotation(a, JsonBackReference.class) || _hasAnnotation(a, JsonManagedReference.class)) { name = \"\"; } else { return null; } } return PropertyName.construct(name); }",
      "function range": "730,5-755,5",
      "raw_output": [
        "public static String findSerializerPropertyName ( Class <? > clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. isAnnotationPresent ( Serialization. class ) ) { return method. getName ( ) ; } } return null ; }",
        "public static String getSerializerPropertyName ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( Serialization. class ) ) { return getSerializerPropertyName ( clazz. getAnnotation ( Serialization. class ) ) ; } return getSerializerPropertyName ( clazz. getName ( ) ) ; }",
        "public static String getSerializerPropertyName ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( Serialization. class ) ) { return getSerializerPropertyName ( clazz. getAnnotation ( Serialization. class ) ) ; } else { return clazz. getName ( ) ; } }",
        "public static String findSerializerPropertyName ( Class <? > clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. isAnnotationPresent ( Serialization. class ) ) { return method. getName ( ) ; } } return clazz. getName ( ) ; }",
        "public static String getSerializerPropertyName ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( Serialization. class ) ) { return getSerializerPropertyName ( clazz. getAnnotation ( Serialization. class ) ) ; } return getSerializerPropertyName ( clazz. getSuperclass ( ) ) ; }",
        "public static String findProperty ( String property ) { if ( property == null || property. length ( ) == 0 ) { return property ; } for ( int i = 0 ; i < property. length ( ) ; i ++ ) { char c = property. charAt ( i ) ; if ( c =='' || c =='' ) { return property. substring ( 0, i ) + property. substring ( i + 1 ) ; } } return property ; }",
        "public static String findProperty ( String property ) { if ( property == null || property. length ( ) == 0 ) { return property ; } for ( int i = 0 ; i < property. length ( ) ; i ++ ) { char c = property. charAt ( i ) ; if ( c =='' || c =='' ) { return property. substring ( 0, i ) + property. substring ( i + 1 ) ; } } return null ; }",
        "public static String findProperty ( String property ) { if ( property == null || property. length ( ) == 0 ) { return property ; } for ( int i = 0 ; i < property. length ( ) ; i ++ ) { char c = property. charAt ( i ) ; if ( c =='' || c =='' ) { return property. substring ( 0, i ) ; } } return property ; }",
        "public static String findProperty ( String property ) { if ( property == null || property. length ( ) == 0 ) { return property ; } for ( int i = 0 ; i < property. length ( ) ; i ++ ) { char c = property. charAt ( i ) ; if ( c =='' || c =='' || c =='' ) { return property. substring ( 0, i ) ; } } return property ; }",
        "public static String findProperty ( String property ) { if ( property == null || property. length ( ) == 0 ) { return property ; } for ( int i = 0 ; i < property. length ( ) ; i ++ ) { if ( property. charAt ( i ) == property. charAt ( i ) ) { return property. substring ( i + 1 ) ; } } return null ; }",
        "public String getName ( ) { StringBuffer buf = new StringBuffer ( ) ; buf. append ( _property. getName ( ) ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "public String getName ( ) { StringBuffer buf = new StringBuffer ( ) ; buf. append ( _property. getName ( ) ) ; buf. append ( \" \" ) ; buf. append ( _value. getName ( ) ) ; return buf. toString ( ) ; }",
        "public String getName ( ) { StringBuffer buf = new StringBuffer ( ) ; buf. append ( _property. getName ( ) ) ; buf. append ('' ) ; buf. append ( _property. getType ( ) ) ; return buf. toString ( ) ; }",
        "public String getName ( ) { StringBuffer buf = new StringBuffer ( ) ; buf. append ( this. name ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "public String getName ( ) { StringBuffer buf = new StringBuffer ( ) ; buf. append ( this. name ) ; buf. append ('' ) ; buf. append ( this. type ) ; return buf. toString ( ) ; }",
        "public static String findSerializerName ( Class <? > clazz ) { String name = null ; for ( Method method : clazz. getMethods ( ) ) { if ( method. getName ( ). equals ( \"getSerializerName\" ) ) { name = method. getName ( ) ; break ; } } return name ; }",
        "public static String findSerializerName ( Class <? > clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. getName ( ). equals ( \"getSerializerName\" ) ) { return method. getName ( ) ; } } return null ; }",
        "public static String findSerializerName ( Class <? > cls ) { String name = null ; for ( Method method : cls. getMethods ( ) ) { if ( method. getName ( ). equals ( \"getSerializerName\" ) ) { name = method. getName ( ) ; break ; } } return name ; }",
        "public static String findSerializerName ( Class <? > cls ) { for ( Method method : cls. getMethods ( ) ) { if ( method. getName ( ). equals ( \"getSerializerName\" ) ) { return method. getName ( ) ; } } return null ; }",
        "public static String findSerializerName ( Class <? > clazz ) { String name = null ; for ( Method method : clazz. getMethods ( ) ) { if ( method. getName ( ). equals ( \"getSerializerName\" ) ) { name = method. getName ( ) ; } } return name ; }",
        "private PropertyName findPropertyName ( Class clazz ) { for ( Field field : clazz. getDeclaredFields ( ) ) { if ( field. isAnnotationPresent ( PropertyName. class ) ) { return ( PropertyName ) field. getAnnotation ( PropertyName. class ) ; } } return null ; }",
        "private PropertyName findPropertyName ( Class clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. isAnnotationPresent ( PropertyName. class ) ) { return method. getAnnotation ( PropertyName. class ) ; } } return null ; }",
        "private PropertyName findPropertyName ( Class clazz ) { for ( Field field : clazz. getDeclaredFields ( ) ) { if ( field. isAnnotationPresent ( PropertyName. class ) ) { return field. getAnnotation ( PropertyName. class ) ; } } return null ; }",
        "private PropertyName findPropertyName ( Class clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. getName ( ). equals ( \"get\" ) ) { return ( PropertyName ) method. invoke ( null ) ; } } return null ; }",
        "private PropertyName findPropertyName ( Class clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. isAnnotationPresent ( PropertyName. class ) ) { return ( PropertyName ) method. invoke ( null ) ; } } return null ; }"
      ],
      "mid_translation": [
        "Finds the property name for serialization.",
        "Finds the name of a property for serialization.",
        "Returns the property name for serialization.",
        "Finds the name of the property for serialization.",
        "Finds the PropertyName for serialization."
      ],
      "output": [
        "@Override public String findNameForSerialization ( Class <? > clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. isAnnotationPresent ( Serialization. class ) ) { return method. getName ( ) ; } } return null ; }",
        "@Override public String findNameForSerialization ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( Serialization. class ) ) { return getSerializerPropertyName ( clazz. getAnnotation ( Serialization. class ) ) ; } return getSerializerPropertyName ( clazz. getName ( ) ) ; }",
        "@Override public String findNameForSerialization ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( Serialization. class ) ) { return getSerializerPropertyName ( clazz. getAnnotation ( Serialization. class ) ) ; } else { return clazz. getName ( ) ; } }",
        "@Override public String findNameForSerialization ( Class <? > clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. isAnnotationPresent ( Serialization. class ) ) { return method. getName ( ) ; } } return clazz. getName ( ) ; }",
        "@Override public String findNameForSerialization ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( Serialization. class ) ) { return getSerializerPropertyName ( clazz. getAnnotation ( Serialization. class ) ) ; } return getSerializerPropertyName ( clazz. getSuperclass ( ) ) ; }",
        "@Override public String findNameForSerialization ( String property ) { if ( property == null || property. length ( ) == 0 ) { return property ; } for ( int i = 0 ; i < property. length ( ) ; i ++ ) { char c = property. charAt ( i ) ; if ( c =='' || c =='' ) { return property. substring ( 0, i ) + property. substring ( i + 1 ) ; } } return property ; }",
        "@Override public String findNameForSerialization ( String property ) { if ( property == null || property. length ( ) == 0 ) { return property ; } for ( int i = 0 ; i < property. length ( ) ; i ++ ) { char c = property. charAt ( i ) ; if ( c =='' || c =='' ) { return property. substring ( 0, i ) + property. substring ( i + 1 ) ; } } return null ; }",
        "@Override public String findNameForSerialization ( String property ) { if ( property == null || property. length ( ) == 0 ) { return property ; } for ( int i = 0 ; i < property. length ( ) ; i ++ ) { char c = property. charAt ( i ) ; if ( c =='' || c =='' ) { return property. substring ( 0, i ) ; } } return property ; }",
        "@Override public String findNameForSerialization ( String property ) { if ( property == null || property. length ( ) == 0 ) { return property ; } for ( int i = 0 ; i < property. length ( ) ; i ++ ) { char c = property. charAt ( i ) ; if ( c =='' || c =='' || c =='' ) { return property. substring ( 0, i ) ; } } return property ; }",
        "@Override public String findNameForSerialization ( String property ) { if ( property == null || property. length ( ) == 0 ) { return property ; } for ( int i = 0 ; i < property. length ( ) ; i ++ ) { if ( property. charAt ( i ) == property. charAt ( i ) ) { return property. substring ( i + 1 ) ; } } return null ; }",
        "@Override public String findNameForSerialization ( ) { StringBuffer buf = new StringBuffer ( ) ; buf. append ( _property. getName ( ) ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "@Override public String findNameForSerialization ( ) { StringBuffer buf = new StringBuffer ( ) ; buf. append ( _property. getName ( ) ) ; buf. append ( \" \" ) ; buf. append ( _value. getName ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String findNameForSerialization ( ) { StringBuffer buf = new StringBuffer ( ) ; buf. append ( _property. getName ( ) ) ; buf. append ('' ) ; buf. append ( _property. getType ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String findNameForSerialization ( ) { StringBuffer buf = new StringBuffer ( ) ; buf. append ( this. name ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "@Override public String findNameForSerialization ( ) { StringBuffer buf = new StringBuffer ( ) ; buf. append ( this. name ) ; buf. append ('' ) ; buf. append ( this. type ) ; return buf. toString ( ) ; }",
        "@Override public String findNameForSerialization ( Class <? > clazz ) { String name = null ; for ( Method method : clazz. getMethods ( ) ) { if ( method. getName ( ). equals ( \"getSerializerName\" ) ) { name = method. getName ( ) ; break ; } } return name ; }",
        "@Override public String findNameForSerialization ( Class <? > clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. getName ( ). equals ( \"getSerializerName\" ) ) { return method. getName ( ) ; } } return null ; }",
        "@Override public String findNameForSerialization ( Class <? > cls ) { String name = null ; for ( Method method : cls. getMethods ( ) ) { if ( method. getName ( ). equals ( \"getSerializerName\" ) ) { name = method. getName ( ) ; break ; } } return name ; }",
        "@Override public String findNameForSerialization ( Class <? > cls ) { for ( Method method : cls. getMethods ( ) ) { if ( method. getName ( ). equals ( \"getSerializerName\" ) ) { return method. getName ( ) ; } } return null ; }",
        "@Override public String findNameForSerialization ( Class <? > clazz ) { String name = null ; for ( Method method : clazz. getMethods ( ) ) { if ( method. getName ( ). equals ( \"getSerializerName\" ) ) { name = method. getName ( ) ; } } return name ; }",
        "@Override public PropertyName findNameForSerialization ( Class clazz ) { for ( Field field : clazz. getDeclaredFields ( ) ) { if ( field. isAnnotationPresent ( PropertyName. class ) ) { return ( PropertyName ) field. getAnnotation ( PropertyName. class ) ; } } return null ; }",
        "@Override public PropertyName findNameForSerialization ( Class clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. isAnnotationPresent ( PropertyName. class ) ) { return method. getAnnotation ( PropertyName. class ) ; } } return null ; }",
        "@Override public PropertyName findNameForSerialization ( Class clazz ) { for ( Field field : clazz. getDeclaredFields ( ) ) { if ( field. isAnnotationPresent ( PropertyName. class ) ) { return field. getAnnotation ( PropertyName. class ) ; } } return null ; }",
        "@Override public PropertyName findNameForSerialization ( Class clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. getName ( ). equals ( \"get\" ) ) { return ( PropertyName ) method. invoke ( null ) ; } } return null ; }",
        "@Override public PropertyName findNameForSerialization ( Class clazz ) { for ( Method method : clazz. getMethods ( ) ) { if ( method. isAnnotationPresent ( PropertyName. class ) ) { return ( PropertyName ) method. invoke ( null ) ; } } return null ; }"
      ]
    },
    "JacksonDatabind_34_/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java_81-82": {
      "loc": "81-82",
      "input": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) { visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { visitor.expectNumberFormat(typeHint); } } }",
      "target": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) { visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL); } else { visitor.expectNumberFormat(typeHint); } } }",
      "function range": "73,5-87,5",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T jsonToString ( final String json, final JsonVisitor < T > visitor ) { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } if ( visitor == null ) { throw new IllegalArgumentException ( \" visitor cannot be null\" ) ; } if ( json. isEmpty ( ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } return visitor. visit ( json ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T jsonToString ( final String json, final JsonVisitor < T > visitor ) { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } if ( visitor == null ) { throw new IllegalArgumentException ( \" visitor cannot be null\" ) ; } if ( json. isEmpty ( ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } return visitor ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T jsonToString ( final String json, final JsonVisitor < T > visitor ) { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } if ( visitor == null ) { throw new IllegalArgumentException ( \" visitor cannot be null\" ) ; } if ( json. isEmpty ( ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } return visitor. visit ( json ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T jsonToString ( final String json, final JsonVisitor < T > visitor ) { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } if ( visitor == null ) { throw new IllegalArgumentException ( \" visitor cannot be null\" ) ; } if ( json. isEmpty ( ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } return visitor ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T jsonToString ( final String json, final JsonVisitor < T > visitor ) { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } if ( visitor == null ) { throw new IllegalArgumentException ( \" visitor cannot be null\" ) ; } if ( json. isEmpty ( ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } return visitor. visit ( json ) ; }",
        "public static void writeJson ( Writer writer, String json ) throws IOException { try ( JsonWriter jsonWriter = new JsonWriter ( writer ) ) { jsonWriter. write ( json ) ; jsonWriter. close ( ) ; } }",
        "public static void writeJson ( Writer writer, String json ) throws IOException { try ( JsonWriter jsonWriter = new JsonWriter ( writer ) ) { jsonWriter. writeObject ( json ) ; jsonWriter. close ( ) ; } }",
        "public static void writeJson ( Writer writer, String json ) throws IOException { try ( JsonWriter jsonWriter = new JsonWriter ( writer ) ) { jsonWriter. write ( json ) ; } }",
        "public static void writeJson ( Writer writer, String json ) throws IOException { try ( JsonWriter jsonWriter = new JsonWriter ( writer ) ) { jsonWriter. writeObject ( json ) ; jsonWriter. flush ( ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static void writeJson ( final Writer writer, final String json ) { try { writer. write ( json ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "public static void writeJson ( Writer out, String json ) throws IOException { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } try { out. write ( json. getBytes ( \"UTF-8\" ) ) ; } catch ( UnsupportedEncodingException e ) { throw new IOException ( e ) ; } }",
        "public static void writeJson ( Writer out, String json ) throws IOException { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } try { out. write ( json. getBytes ( \"UTF-8\" ) ) ; } catch ( UnsupportedEncodingException e ) { throw new IOException ( e ) ; } finally { out. close ( ) ; } }",
        "public static void writeJson ( Writer out, String json ) throws IOException { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } try { out. write ( json. getBytes ( \"UTF-8\" ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "public static void writeJson ( Writer out, String json ) throws IOException { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } try { out. write ( json. getBytes ( ) ) ; } catch ( UnsupportedEncodingException e ) { throw new IOException ( e ) ; } }",
        "public static void writeJson ( Writer out, String json ) throws IOException { ObjectMapper mapper = new ObjectMapper ( ) ; mapper. configure ( SerializationFeature. INDENT_OUTPUT, true ) ; mapper. configure ( SerializationFeature. INDENT_OUTPUT, true ) ; out. write ( mapper. writeValueAsString ( out ) ) ; }",
        "private static void writeJson ( Writer out, String json ) throws IOException { if ( json == null ) { out. write ( \"null\" ) ; } else { out. write ( json ) ; } }",
        "private static void writeJson ( Writer out, String json ) throws IOException { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } out. write ( json. getBytes ( ) ) ; }",
        "private static void writeJson ( JsonVisitor visitor, String json ) { try { visitor. visit ( json ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "private static void writeJson ( Writer out, String json ) throws IOException { if ( json == null ) { out. write ( \"null\" ) ; } else { out. write ( json ) ; } out. flush ( ) ; }",
        "private static void writeJson ( Writer out, String json ) throws IOException { if ( json == null ) { out. write ( \"null\" ) ; } else { out. write ( json. getBytes ( ) ) ; } }",
        "private static void writeJson ( final Writer writer, final String json ) throws IOException { try { writer. write ( json ) ; } finally { writer. close ( ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T json ( String json, JsonVisitor < T > visitor ) { return json ( json, visitor, null ) ; }",
        "private static void writeJson ( final Writer writer, final String json ) throws IOException { try { writer. write ( json ) ; } catch ( JsonException e ) { throw new IOException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T json ( String json, JsonVisitor < T > visitor ) { return json ( json, null, visitor ) ; }",
        "private static void writeJson ( final Writer writer, final String json ) throws IOException { writer. write ( json ) ; writer. close ( ) ; }"
      ],
      "mid_translation": [
        "Writes out a JSON formatted string as a string to the given visitor.",
        "Writes a JSON formatted string as a string to the given visitor.",
        "Writes out a JSON formatted string as the given visitor.",
        "Writes out a JSON formatted string as a string to the given JSON visitor.",
        "Writes a JSON formatted string as a string to the given JSON visitor."
      ],
      "output": [
        "@Override public < T > T acceptJsonFormatVisitor ( final String json, final JsonVisitor < T > visitor ) { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } if ( visitor == null ) { throw new IllegalArgumentException ( \" visitor cannot be null\" ) ; } if ( json. isEmpty ( ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } return visitor. visit ( json ) ; }",
        "@Override public < T > T acceptJsonFormatVisitor ( final String json, final JsonVisitor < T > visitor ) { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } if ( visitor == null ) { throw new IllegalArgumentException ( \" visitor cannot be null\" ) ; } if ( json. isEmpty ( ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } return visitor ; }",
        "@Override public < T > T acceptJsonFormatVisitor ( final String json, final JsonVisitor < T > visitor ) { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } if ( visitor == null ) { throw new IllegalArgumentException ( \" visitor cannot be null\" ) ; } if ( json. isEmpty ( ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } return visitor. visit ( json ) ; }",
        "@Override public < T > T acceptJsonFormatVisitor ( final String json, final JsonVisitor < T > visitor ) { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } if ( visitor == null ) { throw new IllegalArgumentException ( \" visitor cannot be null\" ) ; } if ( json. isEmpty ( ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } return visitor ; }",
        "@Override public < T > T acceptJsonFormatVisitor ( final String json, final JsonVisitor < T > visitor ) { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } if ( visitor == null ) { throw new IllegalArgumentException ( \" visitor cannot be null\" ) ; } if ( json. isEmpty ( ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } if ( json. equals ( \"null\" ) ) { throw new IllegalArgumentException ( \"json cannot be empty\" ) ; } return visitor. visit ( json ) ; }",
        "@Override public void acceptJsonFormatVisitor ( Writer writer, String json ) throws IOException { try ( JsonWriter jsonWriter = new JsonWriter ( writer ) ) { jsonWriter. write ( json ) ; jsonWriter. close ( ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( Writer writer, String json ) throws IOException { try ( JsonWriter jsonWriter = new JsonWriter ( writer ) ) { jsonWriter. writeObject ( json ) ; jsonWriter. close ( ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( Writer writer, String json ) throws IOException { try ( JsonWriter jsonWriter = new JsonWriter ( writer ) ) { jsonWriter. write ( json ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( Writer writer, String json ) throws IOException { try ( JsonWriter jsonWriter = new JsonWriter ( writer ) ) { jsonWriter. writeObject ( json ) ; jsonWriter. flush ( ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( final Writer writer, final String json ) { try { writer. write ( json ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( Writer out, String json ) throws IOException { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } try { out. write ( json. getBytes ( \"UTF-8\" ) ) ; } catch ( UnsupportedEncodingException e ) { throw new IOException ( e ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( Writer out, String json ) throws IOException { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } try { out. write ( json. getBytes ( \"UTF-8\" ) ) ; } catch ( UnsupportedEncodingException e ) { throw new IOException ( e ) ; } finally { out. close ( ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( Writer out, String json ) throws IOException { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } try { out. write ( json. getBytes ( \"UTF-8\" ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( Writer out, String json ) throws IOException { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } try { out. write ( json. getBytes ( ) ) ; } catch ( UnsupportedEncodingException e ) { throw new IOException ( e ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( Writer out, String json ) throws IOException { ObjectMapper mapper = new ObjectMapper ( ) ; mapper. configure ( SerializationFeature. INDENT_OUTPUT, true ) ; mapper. configure ( SerializationFeature. INDENT_OUTPUT, true ) ; out. write ( mapper. writeValueAsString ( out ) ) ; }",
        "@Override public void acceptJsonFormatVisitor ( Writer out, String json ) throws IOException { if ( json == null ) { out. write ( \"null\" ) ; } else { out. write ( json ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( Writer out, String json ) throws IOException { if ( json == null ) { throw new IllegalArgumentException ( \"json cannot be null\" ) ; } out. write ( json. getBytes ( ) ) ; }",
        "@Override public void acceptJsonFormatVisitor ( JsonVisitor visitor, String json ) { try { visitor. visit ( json ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( Writer out, String json ) throws IOException { if ( json == null ) { out. write ( \"null\" ) ; } else { out. write ( json ) ; } out. flush ( ) ; }",
        "@Override public void acceptJsonFormatVisitor ( Writer out, String json ) throws IOException { if ( json == null ) { out. write ( \"null\" ) ; } else { out. write ( json. getBytes ( ) ) ; } }",
        "@Override public void acceptJsonFormatVisitor ( final Writer writer, final String json ) throws IOException { try { writer. write ( json ) ; } finally { writer. close ( ) ; } }",
        "@Override public < T > T acceptJsonFormatVisitor ( String json, JsonVisitor < T > visitor ) { return json ( json, visitor, null ) ; }",
        "@Override public void acceptJsonFormatVisitor ( final Writer writer, final String json ) throws IOException { try { writer. write ( json ) ; } catch ( JsonException e ) { throw new IOException ( e ) ; } }",
        "@Override public < T > T acceptJsonFormatVisitor ( String json, JsonVisitor < T > visitor ) { return json ( json, null, visitor ) ; }",
        "@Override public void acceptJsonFormatVisitor ( final Writer writer, final String json ) throws IOException { writer. write ( json ) ; writer. close ( ) ; }"
      ]
    },
    "JacksonDatabind_37_/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java_135-136": {
      "loc": "135-136",
      "input": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; } return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic); }",
      "target": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; } return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic); }",
      "function range": "119,5-137,5",
      "raw_output": [
        "public static JavaType create ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ), subclass ) ; }",
        "public static JavaType create ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ) ) ; }",
        "public JavaType create ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ), subclass ) ; }",
        "public static JavaType create ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass ) ; }",
        "public static JavaType create ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ), subclass. getClassLoader ( ) ) ; }",
        "public static JavaType newInstance ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } return new JavaType ( clazz ) ; }",
        "public static JavaType newInstance ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } return new JavaType ( clazz ) ; }",
        "public static JavaType newInstance ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } return new JavaType ( clazz ) ; }",
        "public static JavaType getInstance ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isInterface ( ) ) { throw new IllegalArgumentException ( \"clazz.isInterface() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } return new JavaType ( clazz ) ; }",
        "public static JavaType getInstance ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isInterface ( ) ) { throw new IllegalArgumentException ( \"clazz.isInterface() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } return new JavaType ( clazz ) ; }",
        "public static JavaType getInstance ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } return getInstance ( subclass. getName ( ) ) ; }",
        "public static JavaType getInstance ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass. newInstance ( ) ; } return result ; }",
        "public static JavaType getInstance ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } if ( subclass. isInterface ( ) ) { throw new IllegalArgumentException ( \"class must not be an interface\" ) ; } return getInstance ( subclass. getName ( ) ) ; }",
        "public static JavaType getInstance ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass ; } return result ; }",
        "public static JavaType getInstance ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } return getInstance ( subclass. getClassLoader ( ) ) ; }",
        "public JavaType createJavaType ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ), subclass ) ; }",
        "public JavaType createJavaType ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass, this ) ; }",
        "public JavaType createJavaType ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType type = super. createJavaType ( subclass ) ; if ( type!= null ) { return type ; } else { return new JavaType ( subclass ) ; } }",
        "public JavaType createJavaType ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ), subclass. getClassLoader ( ) ) ; }",
        "public JavaType createJavaType ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType type = super. createJavaType ( subclass ) ; if ( type!= null ) { return type ; } return new JavaType ( subclass ) ; }",
        "public static JavaType getInstance ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass. newInstance ( ) ; } return result ; }",
        "public static JavaType getInstance ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } return getInstance ( subclass. getName ( ) ) ; }",
        "public static JavaType getInstance ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass. newInstance ( ) ; } return result ; }",
        "public static JavaType getInstance ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass ; } return result ; }",
        "public static JavaType getInstance ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass ; } return result ; }"
      ],
      "mid_translation": [
        "Creates a new JavaType for a given subclass.",
        "Creates a new instance of JavaType with the specified sub - class.",
        "Creates a new instance of JavaType with the specified subclass.",
        "Creates a new JavaType for the given subclass.",
        "Creates a new instance of JavaType with the given subclass."
      ],
      "output": [
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ), subclass ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ) ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ), subclass ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ), subclass. getClassLoader ( ) ) ; }",
        "@Override protected JavaType _narrow ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } return new JavaType ( clazz ) ; }",
        "@Override protected JavaType _narrow ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } return new JavaType ( clazz ) ; }",
        "@Override protected JavaType _narrow ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } return new JavaType ( clazz ) ; }",
        "@Override protected JavaType _narrow ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isInterface ( ) ) { throw new IllegalArgumentException ( \"clazz.isInterface() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } return new JavaType ( clazz ) ; }",
        "@Override protected JavaType _narrow ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isInterface ( ) ) { throw new IllegalArgumentException ( \"clazz.isInterface() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } return new JavaType ( clazz ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } return getInstance ( subclass. getName ( ) ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass. newInstance ( ) ; } return result ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } if ( subclass. isInterface ( ) ) { throw new IllegalArgumentException ( \"class must not be an interface\" ) ; } return getInstance ( subclass. getName ( ) ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass ; } return result ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } return getInstance ( subclass. getClassLoader ( ) ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ), subclass ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass, this ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType type = super. createJavaType ( subclass ) ; if ( type!= null ) { return type ; } else { return new JavaType ( subclass ) ; } }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } return new JavaType ( subclass. getName ( ), subclass. getClassLoader ( ) ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType type = super. createJavaType ( subclass ) ; if ( type!= null ) { return type ; } return new JavaType ( subclass ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass. newInstance ( ) ; } return result ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } return getInstance ( subclass. getName ( ) ) ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass. newInstance ( ) ; } return result ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"class must not be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass ; } return result ; }",
        "@Override protected JavaType _narrow ( Class <? > subclass ) { if ( subclass == null ) { throw new IllegalArgumentException ( \"Subclass cannot be null\" ) ; } JavaType result = getInstance ( subclass. getName ( ) ) ; if ( result == null ) { result = subclass ; } return result ; }"
      ]
    },
    "JacksonDatabind_45_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_63-64": {
      "loc": "63-64",
      "input": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property != null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format != null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.getShape() == JsonFormat.Shape.STRING) { TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } } return this; }",
      "target": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property != null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format != null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if ((shape == JsonFormat.Shape.STRING) || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) { TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } } return this; }",
      "function range": "49,5-81,5",
      "raw_output": [
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } return new ContextualSerializer < T > ( property ) ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { } ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class <? > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class < T > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { } ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class <? > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class < T > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property. getType ( ), property. getBean ( ) ) ; }",
        "public static < T > ContextualSerializer < T > getContextualSerializer ( BeanProperty < T > property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } return new ContextualSerializer < T > ( property ) ; }",
        "public static < T > ContextualSerializer < T > getContextualSerializer ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class < T > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "public static < T > ContextualSerializer < T > getContextualSerializer ( BeanProperty < T > property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } return new ContextualSerializer < T > ( property. getType ( ), property. getBean ( ) ) ; }",
        "public static < T > ContextualSerializer < T > getContextualSerializer ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class <? > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "public static < T > ContextualSerializer < T > getContextualSerializer ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property. getType ( ), property. getValue ( ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > ContextualSerializer < T > getContextualSerializer ( Class < T > type ) { return ( ContextualSerializer < T > ) serializerCache. get ( type ) ; }",
        "public < T > ContextualSerializer < T > getContextualSerializer ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } return new ContextualSerializer < T > ( type ) ; }",
        "public < T > ContextualSerializer < T > getContextualSerializer ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return new ContextualSerializer < T > ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > ContextualSerializer < T > getContextualSerializer ( Class < T > type ) { return ( ContextualSerializer < T > ) serializerMap. get ( type ) ; }",
        "public < T > ContextualSerializer < T > getContextualSerializer ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return new ContextualSerializer < T > ( this, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > TypeSerializer < T > createSerializer ( Class < T > type ) { TypeSerializer < T > serializer = serializerCache. get ( type ) ; if ( serializer == null ) { serializer = createSerializer ( type ) ; serializerCache. put ( type, serializer ) ; } return serializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > TypeSerializer < T > createSerializer ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerMap. get ( type ) ; if ( serializer == null ) { serializer = typeSerializerMap. get ( type ). createSerializer ( ) ; typeSerializerMap. put ( type, serializer ) ; } return serializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > TypeSerializer < T > createSerializer ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerMap. get ( type ) ; if ( serializer == null ) { serializer = new ContextualSerializer < T > ( type ) ; typeSerializerMap. put ( type, serializer ) ; } return serializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > TypeSerializer < T > createSerializer ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerCache. get ( type ) ; if ( serializer == null ) { serializer = createSerializer ( type ) ; typeSerializerCache. put ( type, serializer ) ; } return serializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > TypeSerializer < T > createSerializer ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerMap. get ( type ) ; if ( serializer == null ) { serializer = createSerializer ( type ) ; typeSerializerMap. put ( type, serializer ) ; } return serializer ; }"
      ],
      "mid_translation": [
        "Creates a contextual serializer for the given bean property.",
        "Creates a contextual serializer for the given bean property",
        "Creates the contextual serializer for the given bean property.",
        "Creates a contextual serializer for the given property.",
        "Creates the contextual serializer for the given property."
      ],
      "output": [
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } return new ContextualSerializer < T > ( property ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { } ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class <? > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class < T > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { } ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class <? > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class < T > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property. getType ( ), property. getBean ( ) ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } return new ContextualSerializer < T > ( property ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class < T > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } return new ContextualSerializer < T > ( property. getType ( ), property. getBean ( ) ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class <? > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property. getType ( ), property. getValue ( ) ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( Class < T > type ) { return ( ContextualSerializer < T > ) serializerCache. get ( type ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } return new ContextualSerializer < T > ( type ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return new ContextualSerializer < T > ( type ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( Class < T > type ) { return ( ContextualSerializer < T > ) serializerMap. get ( type ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return new ContextualSerializer < T > ( this, type ) ; }",
        "@Override public < T > TypeSerializer < T > createContextual ( Class < T > type ) { TypeSerializer < T > serializer = serializerCache. get ( type ) ; if ( serializer == null ) { serializer = createSerializer ( type ) ; serializerCache. put ( type, serializer ) ; } return serializer ; }",
        "@Override public < T > TypeSerializer < T > createContextual ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerMap. get ( type ) ; if ( serializer == null ) { serializer = typeSerializerMap. get ( type ). createSerializer ( ) ; typeSerializerMap. put ( type, serializer ) ; } return serializer ; }",
        "@Override public < T > TypeSerializer < T > createContextual ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerMap. get ( type ) ; if ( serializer == null ) { serializer = new ContextualSerializer < T > ( type ) ; typeSerializerMap. put ( type, serializer ) ; } return serializer ; }",
        "@Override public < T > TypeSerializer < T > createContextual ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerCache. get ( type ) ; if ( serializer == null ) { serializer = createSerializer ( type ) ; typeSerializerCache. put ( type, serializer ) ; } return serializer ; }",
        "@Override public < T > TypeSerializer < T > createContextual ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerMap. get ( type ) ; if ( serializer == null ) { serializer = createSerializer ( type ) ; typeSerializerMap. put ( type, serializer ) ; } return serializer ; }"
      ]
    },
    "JacksonDatabind_46_/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java_156-157": {
      "loc": "156-157",
      "input": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb); sb.append(';'); return sb; }",
      "target": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb); sb.append(\">;\"); return sb; }",
      "function range": "150,5-158,5",
      "raw_output": [
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ( \"(\" ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ( \")\" ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "public String getTypeSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ( \"(\" ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ( \")\" ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getType ( ). getSignature ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getSignature ( ) ) ; return buf. toString ( ) ; }",
        "public static String getTypeSignature ( Type type ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getTypeSignature ( type ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( type ) ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getSignature ( ) ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( this. getClass ( ). getName ( ) ) ; sb. append ('' ) ; sb. append ( this. getName ( ) ) ; sb. append ('' ) ; sb. append ( this. getName ( ) ) ; sb. append ('' ) ; sb. append ( this. getSignature ( ) ) ; return sb. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( this. getClass ( ). getName ( ) ) ; buf. append ( \"(\" ) ; buf. append ( this. getName ( ) ) ; buf. append ( \")\" ) ; return buf. toString ( ) ; }",
        "public static String getSignature ( Class <? > clazz ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( clazz. getName ( ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( clazz ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( clazz ) ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getSignature ( ) ) ; return buf. toString ( ) ; }",
        "public static String getSignature ( Class <? > clazz ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( clazz. getName ( ) ) ; buf. append ('' ) ; buf. append ( clazz. getGenericSuperclass ( ) ) ; buf. append ('' ) ; buf. append ( clazz. getName ( ) ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "public static String getSignature ( Class <? > clazz ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( clazz. getName ( ) ) ; buf. append ('' ) ; buf. append ( clazz. getGenericSuperclass ( ) ) ; buf. append ('' ) ; buf. append ( clazz. getName ( ) ) ; return buf. toString ( ) ; }",
        "public static String getSignature ( Class <? > clazz ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( clazz. getName ( ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( clazz ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( clazz ) ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( this. getClass ( ). getName ( ) ) ; buf. append ( \"(\" ) ; buf. append ( this. getName ( ) ) ; buf. append ( \")\" ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( this. getClass ( ). getName ( ) ) ; sb. append ( \"(\" ) ; sb. append ( this. getName ( ) ) ; sb. append ( \")\" ) ; return sb. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( this. getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( this. getName ( ) ) ; buf. append ('' ) ; buf. append ( this. getSignature ( ) ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( this. getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( this. getName ( ) ) ; buf. append ('' ) ; buf. append ( this. getName ( ) ) ; return buf. toString ( ) ; }",
        "public String getSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getName ( ) ) ; buf. append ( \"(\" ) ; buf. append ( getType ( ) ) ; buf. append ( \")\" ) ; return buf. toString ( ) ; }"
      ],
      "mid_translation": [
        "Returns the generic signature of the class.",
        "Returns the generic signature of the referenced type.",
        "Returns the generic signature of this class.",
        "Returns the generic signature of the referenced class.",
        "Gets the generic signature of this class."
      ],
      "output": [
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ( \"(\" ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ( \")\" ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ( \"(\" ) ; buf. append ( getTypeSignature ( ) ) ; buf. append ( \")\" ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getType ( ). getSignature ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getSignature ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( Type type ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getTypeSignature ( type ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( type ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getSignature ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( this. getClass ( ). getName ( ) ) ; sb. append ('' ) ; sb. append ( this. getName ( ) ) ; sb. append ('' ) ; sb. append ( this. getName ( ) ) ; sb. append ('' ) ; sb. append ( this. getSignature ( ) ) ; return sb. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( this. getClass ( ). getName ( ) ) ; buf. append ( \"(\" ) ; buf. append ( this. getName ( ) ) ; buf. append ( \")\" ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( Class <? > clazz ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( clazz. getName ( ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( clazz ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( clazz ) ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getName ( ) ) ; buf. append ('' ) ; buf. append ( getType ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( getSignature ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( Class <? > clazz ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( clazz. getName ( ) ) ; buf. append ('' ) ; buf. append ( clazz. getGenericSuperclass ( ) ) ; buf. append ('' ) ; buf. append ( clazz. getName ( ) ) ; buf. append ('' ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( Class <? > clazz ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( clazz. getName ( ) ) ; buf. append ('' ) ; buf. append ( clazz. getGenericSuperclass ( ) ) ; buf. append ('' ) ; buf. append ( clazz. getName ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( Class <? > clazz ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( clazz. getName ( ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( clazz ) ) ; buf. append ('' ) ; buf. append ( getTypeSignature ( clazz ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( this. getClass ( ). getName ( ) ) ; buf. append ( \"(\" ) ; buf. append ( this. getName ( ) ) ; buf. append ( \")\" ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( this. getClass ( ). getName ( ) ) ; sb. append ( \"(\" ) ; sb. append ( this. getName ( ) ) ; sb. append ( \")\" ) ; return sb. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( this. getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( this. getName ( ) ) ; buf. append ('' ) ; buf. append ( this. getSignature ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( this. getClass ( ). getName ( ) ) ; buf. append ('' ) ; buf. append ( this. getName ( ) ) ; buf. append ('' ) ; buf. append ( this. getName ( ) ) ; return buf. toString ( ) ; }",
        "@Override public String getGenericSignature ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( getName ( ) ) ; buf. append ( \"(\" ) ; buf. append ( getType ( ) ) ; buf. append ( \")\" ) ; return buf. toString ( ) ; }"
      ]
    },
    "JacksonDatabind_57_/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java_1441-1442": {
      "loc": "1441-1442",
      "input": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); } return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true)); }",
      "target": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); } return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), true)); }",
      "function range": "1435,5-1443,5",
      "raw_output": [
        "public long [ ] readRange ( long format, long from, long to ) throws IOException { if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format",
        "public long [ ] readRange ( long format, long from, long to ) throws IOException { if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format",
        "public long [ ] readRange ( long format, long from, long to ) throws IOException { if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format",
        "public long [ ] readRange ( long format, long from, long to ) throws IOException { if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( from < 0 || from > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid from: \" + from ) ; } if ( to < 0 || to > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid to: \" + to ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } long start = from ; long end = to ; if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN",
        "public long [ ] readRange ( long format, long from, long to ) throws IOException { if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( from < 0 || from > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid from: \" + from ) ; } if ( to < 0 || to > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid to: \" + to ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } long start = from ; long end = to ; if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } long start = from ;",
        "private Map < String, String > readMapping ( BufferedReader reader ) throws IOException { Map < String, String > mapping = new HashMap <> ( ) ; String line = reader. readLine ( ) ; while ( line!= null ) { mapping. put ( line, line ) ; line = reader. readLine ( ) ; } return mapping ; }",
        "private Map < String, String > readMapping ( BufferedReader reader ) throws IOException { Map < String, String > mapping = new HashMap <> ( ) ; String line = reader. readLine ( ) ; while ( line!= null ) { mapping. put ( line. trim ( ), line ) ; line = reader. readLine ( ) ; } return mapping ; }",
        "private Map < String, String > readMapping ( BufferedReader reader ) throws IOException { Map < String, String > mapping = new HashMap <> ( ) ; String line = reader. readLine ( ) ; while ( line!= null ) { mapping. put ( line, line ) ; line = reader. readLine ( ) ; } reader. close ( ) ; return mapping ; }",
        "private Map < String, String > readMapping ( BufferedReader reader ) throws IOException { Map < String, String > mapping = new HashMap <> ( ) ; String line ; while ( ( line = reader. readLine ( ) )!= null ) { mapping. put ( line, line ) ; } return mapping ; }",
        "private Map < String, String > readMapping ( BufferedReader reader ) throws IOException { Map < String, String > mapping = new HashMap <> ( ) ; String line = reader. readLine ( ) ; while ( line!= null ) { mapping. put ( line. trim ( ), line ) ; line = reader. readLine ( ) ; } reader. close ( ) ; return mapping ; }",
        "public void read ( File file ) throws IOException { BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; String line ; while ( ( line = in. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith",
        "public void read ( File file ) throws IOException { BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; String line ; while ( ( line = in. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith",
        "public void read ( File file ) throws IOException { BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; String line ; while ( ( line = in. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith",
        "public void read ( File file ) throws IOException { BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; String line ; while ( ( line = in. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith",
        "public void read ( File file ) throws IOException { BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; String line ; while ( ( line = in. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith",
        "public void readRange ( int start, int end ) throws IOException { if ( start < 0 || end < 0 || start >= end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } if ( start >= end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } this. start = start ; this. end = end ; }",
        "public void readRange ( int start, int end ) throws IOException { if ( start < 0 || end < 0 || start >= end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } this. start = start ; this. end = end ; read ( ) ; }",
        "public void readRange ( int start, int end ) throws IOException { if ( start < 0 || end < 0 || start > end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } this. start = start ; this. end = end ; read ( ) ; }",
        "public void readRange ( int start, int end ) { if ( start < 0 || end < 0 || start >= end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } this. start = start ; this. end = end ; }",
        "public void readRange ( int start, int end ) { if ( start < 0 || end < 0 || start >= end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } this. start = start ; this. end = end ; read ( ) ; }",
        "public void read ( long start, long length ) throws IOException { if ( start < 0 || start > length ) { throw new IllegalArgumentException ( \"Invalid start: \" + start ) ; } if ( length < 0 || length > length ) { throw new IllegalArgumentException ( \"Invalid length: \" + length ) ; } this. start = start ; this. length = length ; read ( ) ; }",
        "public void read ( long start, long length ) throws IOException { if ( start < 0 || start > length ) { throw new IllegalArgumentException ( \"Invalid start: \" + start ) ; } if ( length < 0 || length > length ) { throw new IllegalArgumentException ( \"Invalid length: \" + length ) ; } this. start = start ; this. length = length ; this. length = length ; read ( ) ; }",
        "public void read ( long start, long length ) throws IOException { if ( start < 0 || start > length ) { throw new IllegalArgumentException ( \"Invalid start: \" + start ) ; } if ( length < 0 || length > length ) { throw new IllegalArgumentException ( \"Invalid length: \" + length ) ; } read ( start, length ) ; }",
        "public void read ( long start, long length ) throws IOException { if ( start < 0 || start > length ) { throw new IllegalArgumentException ( \"Invalid start: \" + start ) ; } if ( length < 0 || length > length ) { throw new IllegalArgumentException ( \"Invalid length: \" + length ) ; } this. start = start ; this. length = length ; read ( start ) ; }",
        "public void read ( long start, long length ) throws IOException { if ( start < 0 || start > length ) { throw new IllegalArgumentException ( \"Invalid start: \" + start ) ; } if ( length < 0 || length > length ) { throw new IllegalArgumentException ( \"Invalid length: \" + length ) ; } this. start = start ; this. end = end ; this. length = length ; read ( ) ; }"
      ],
      "mid_translation": [
        "Reads a range of values from a format.",
        "Reads a mapping from a single source line.",
        "Reads a mapping from a JSON file.",
        "Reads a range of JSON data format and its values.",
        "Reads a range of JSON data format and its contents."
      ],
      "output": [
        "public long [ ] readValues ( long format, long from, long to ) throws IOException { if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format",
        "public long [ ] readValues ( long format, long from, long to ) throws IOException { if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format",
        "public long [ ] readValues ( long format, long from, long to ) throws IOException { if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format > MAX_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format",
        "public long [ ] readValues ( long format, long from, long to ) throws IOException { if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( from < 0 || from > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid from: \" + from ) ; } if ( to < 0 || to > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid to: \" + to ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } long start = from ; long end = to ; if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN",
        "public long [ ] readValues ( long format, long from, long to ) throws IOException { if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( from < 0 || from > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid from: \" + from ) ; } if ( to < 0 || to > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid to: \" + to ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } long start = from ; long end = to ; if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } if ( format < MIN_FORMAT || format > MAX_FORMAT ) { throw new IllegalArgumentException ( \"Invalid format: \" + format ) ; } long start = from ;",
        "public Map < String, String > readValues ( BufferedReader reader ) throws IOException { Map < String, String > mapping = new HashMap <> ( ) ; String line = reader. readLine ( ) ; while ( line!= null ) { mapping. put ( line, line ) ; line = reader. readLine ( ) ; } return mapping ; }",
        "public Map < String, String > readValues ( BufferedReader reader ) throws IOException { Map < String, String > mapping = new HashMap <> ( ) ; String line = reader. readLine ( ) ; while ( line!= null ) { mapping. put ( line. trim ( ), line ) ; line = reader. readLine ( ) ; } return mapping ; }",
        "public Map < String, String > readValues ( BufferedReader reader ) throws IOException { Map < String, String > mapping = new HashMap <> ( ) ; String line = reader. readLine ( ) ; while ( line!= null ) { mapping. put ( line, line ) ; line = reader. readLine ( ) ; } reader. close ( ) ; return mapping ; }",
        "public Map < String, String > readValues ( BufferedReader reader ) throws IOException { Map < String, String > mapping = new HashMap <> ( ) ; String line ; while ( ( line = reader. readLine ( ) )!= null ) { mapping. put ( line, line ) ; } return mapping ; }",
        "public Map < String, String > readValues ( BufferedReader reader ) throws IOException { Map < String, String > mapping = new HashMap <> ( ) ; String line = reader. readLine ( ) ; while ( line!= null ) { mapping. put ( line. trim ( ), line ) ; line = reader. readLine ( ) ; } reader. close ( ) ; return mapping ; }",
        "public void readValues ( File file ) throws IOException { BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; String line ; while ( ( line = in. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith",
        "public void readValues ( File file ) throws IOException { BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; String line ; while ( ( line = in. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith",
        "public void readValues ( File file ) throws IOException { BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; String line ; while ( ( line = in. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith",
        "public void readValues ( File file ) throws IOException { BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; String line ; while ( ( line = in. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith",
        "public void readValues ( File file ) throws IOException { BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; String line ; while ( ( line = in. readLine ( ) )!= null ) { line = line. trim ( ) ; if ( line. startsWith ( \"#\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith ( \"}\" ) ) continue ; if ( line. startsWith ( \"{\" ) ) continue ; if ( line. startsWith",
        "public void readValues ( int start, int end ) throws IOException { if ( start < 0 || end < 0 || start >= end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } if ( start >= end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } this. start = start ; this. end = end ; }",
        "public void readValues ( int start, int end ) throws IOException { if ( start < 0 || end < 0 || start >= end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } this. start = start ; this. end = end ; read ( ) ; }",
        "public void readValues ( int start, int end ) throws IOException { if ( start < 0 || end < 0 || start > end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } this. start = start ; this. end = end ; read ( ) ; }",
        "public void readValues ( int start, int end ) { if ( start < 0 || end < 0 || start >= end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } this. start = start ; this. end = end ; }",
        "public void readValues ( int start, int end ) { if ( start < 0 || end < 0 || start >= end ) { throw new IllegalArgumentException ( \"Invalid range: start=\" + start + \", end=\" + end ) ; } this. start = start ; this. end = end ; read ( ) ; }",
        "public void readValues ( long start, long length ) throws IOException { if ( start < 0 || start > length ) { throw new IllegalArgumentException ( \"Invalid start: \" + start ) ; } if ( length < 0 || length > length ) { throw new IllegalArgumentException ( \"Invalid length: \" + length ) ; } this. start = start ; this. length = length ; read ( ) ; }",
        "public void readValues ( long start, long length ) throws IOException { if ( start < 0 || start > length ) { throw new IllegalArgumentException ( \"Invalid start: \" + start ) ; } if ( length < 0 || length > length ) { throw new IllegalArgumentException ( \"Invalid length: \" + length ) ; } this. start = start ; this. length = length ; this. length = length ; read ( ) ; }",
        "public void readValues ( long start, long length ) throws IOException { if ( start < 0 || start > length ) { throw new IllegalArgumentException ( \"Invalid start: \" + start ) ; } if ( length < 0 || length > length ) { throw new IllegalArgumentException ( \"Invalid length: \" + length ) ; } read ( start, length ) ; }",
        "public void readValues ( long start, long length ) throws IOException { if ( start < 0 || start > length ) { throw new IllegalArgumentException ( \"Invalid start: \" + start ) ; } if ( length < 0 || length > length ) { throw new IllegalArgumentException ( \"Invalid length: \" + length ) ; } this. start = start ; this. length = length ; read ( start ) ; }",
        "public void readValues ( long start, long length ) throws IOException { if ( start < 0 || start > length ) { throw new IllegalArgumentException ( \"Invalid start: \" + start ) ; } if ( length < 0 || length > length ) { throw new IllegalArgumentException ( \"Invalid length: \" + length ) ; } this. start = start ; this. end = end ; this. length = length ; read ( ) ; }"
      ]
    },
    "JacksonDatabind_70_/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java_440-441": {
      "loc": "440-441",
      "input": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) { found = key.equals(prop.getName()); if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init(props); }",
      "target": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) { found = key.equals(_hashArea[i-1]); if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init(props); }",
      "function range": "426,5-453,5",
      "raw_output": [
        "private void removeEntry ( int index ) { Entry entry = entries [ index ] ; if ( entry!= null ) { entries [ index ] = null ; entries [ index ] = null ; entries [ index ] = null ; } }",
        "private void removeEntry ( int index ) { Entry entry = entries [ index ] ; if ( entry!= null ) { entries [ index ] = null ; entries [ index ] = null ; } }",
        "protected void removeEntry ( int index ) { Entry entry = entries [ index ] ; if ( entry!= null ) { entries [ index ] = null ; entries [ index ] = null ; entries [ index ] = null ; } }",
        "private void removeEntry ( int index ) { Entry entry = entries [ index ] ; if ( entry!= null ) { entries [ index ] = null ; entries [ index ] = null ; size -- ; } }",
        "private void removeEntry ( int index ) { Entry entry = entries [ index ] ; entries [ index ] = null ; entries [ index ] = null ; entries [ index + 1 ] = null ; size -- ; }",
        "private void removeEntry ( Entry < K, V > e ) { Entry < K, V > [ ] tab = table ; int i = tab. length - 1 ; while ( i >= 0 ) { Entry < K, V > c = tab [ i ] ; if ( c == e ) { tab [ i ] = null ; break ; } i -- ; } tab [ i ] = null ; }",
        "private void removeEntry ( Entry < K, V > e ) { Entry < K, V > [ ] tab = table ; int i = tab. length - 1 ; while ( i >= 0 ) { Entry < K, V > c = tab [ i ] ; if ( c == e ) { tab [ i ] = null ; break ; } i -- ; } tab [ i ] = e ; }",
        "private void removeEntry ( Entry < K, V > e ) { Entry < K, V > [ ] tab = table ; int i = tab. length - 1 ; while ( i >= 0 ) { Entry < K, V > c = tab [ i ] ; if ( c == e ) { tab [ i ] = null ; tab [ i + 1 ] = null ; break ; } i -- ; } }",
        "private void removeEntry ( Entry < K, V > e ) { Entry < K, V > [ ] tab = table ; int i = tab. length - 1 ; while ( i >= 0 ) { Entry < K, V > e2 = tab [ i ] ; if ( e == e2 ) { tab [ i ] = null ; break ; } i -- ; } tab [ i ] = e ; }",
        "private void removeEntry ( Entry < K, V > e ) { Entry < K, V > [ ] tab = table ; int i = tab. length - 1 ; while ( i >= 0 ) { Entry < K, V > c = tab [ i ] ; if ( c == e ) { tab [ i ] = null ; break ; } i -- ; } }",
        "public void removeBeanProperty ( Object bean, String propertyName ) { if ( bean == null ) { throw new IllegalArgumentException ( \"Bean cannot be null\" ) ; } if ( propertyName == null ) { throw new IllegalArgumentException ( \"Property name cannot be null\" ) ; } if ( bean. getClass ( ). getName ( ). equals ( propertyName ) ) { removeBeanProperty ( bean, propertyName ) ; } }",
        "public void removeBeanProperty ( Object bean, String propertyName ) { if ( bean == null ) { throw new IllegalArgumentException ( \" bean cannot be null\" ) ; } if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( bean. getClass ( ). getName ( ). equals ( propertyName ) ) { removeBeanProperty ( bean, propertyName ) ; } }",
        "public void removeBeanProperty ( Object bean, String propertyName ) { if ( bean == null ) { throw new IllegalArgumentException ( \" bean cannot be null\" ) ; } if ( propertyName == null ) { throw new IllegalArgumentException ( \"property name cannot be null\" ) ; } if ( bean. getClass ( ). getName ( ). equals ( propertyName ) ) { removeBeanProperty ( bean, propertyName ) ; } }",
        "public void removeBeanProperty ( Object bean, String propertyName ) { if ( bean == null ) { throw new IllegalArgumentException ( \"null bean\" ) ; } if ( propertyName == null ) { throw new IllegalArgumentException ( \"null propertyName\" ) ; } if ( bean. getClass ( ). getName ( ). equals ( propertyName ) ) { removeBeanProperty ( bean, propertyName ) ; } }",
        "public void removeBeanProperty ( Object bean, String propertyName ) { if ( bean == null ) { throw new IllegalArgumentException ( \"Bean cannot be null\" ) ; } if ( propertyName == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } if ( bean. getClass ( ). getName ( ). equals ( propertyName ) ) { removeBeanProperty ( bean, propertyName ) ; } }",
        "public void removeProperties ( Set < String > properties ) { for ( String property : properties ) { removeProperty ( property ) ; } }",
        "public void removeProperties ( Set < String > properties ) { for ( String property : properties ) { properties. remove ( property ) ; } }",
        "public void removeProperties ( Collection < String > properties ) { for ( String property : properties ) { removeProperty ( property ) ; } }",
        "public void removeProperties ( final Set < String > properties ) { for ( String property : properties ) { removeProperty ( property ) ; } }",
        "public void removeProperties ( Set < String > properties ) { for ( String property : properties ) { removeProperty ( property ) ; } this. properties. clear ( ) ; }",
        "public void removeSetProperty ( SettableBeanProperty property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } if ( mProperties == null ) { mProperties = new HashMap < SettableBeanProperty, SettableBeanProperty > ( ) ; } mProperties. remove ( property ) ; }",
        "public void removeSetProperty ( SettableBeanProperty property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } if ( property. getName ( ) == null ) { throw new IllegalArgumentException ( \"Property name cannot be null\" ) ; } removeProperty ( property. getName ( ) ) ; }",
        "public boolean removeSetProperty ( SettableBeanProperty property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } if ( property. getName ( ) == null ) { throw new IllegalArgumentException ( \"Property name cannot be null\" ) ; } return removeProperty ( property. getName ( ) ) ; }",
        "public void removeSetProperty ( SettableBeanProperty property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } if ( property. getName ( ) == null ) { throw new IllegalArgumentException ( \"Property name cannot be null\" ) ; } removeSetProperty ( property. getName ( ) ) ; }",
        "public void removeSetProperty ( SettableBeanProperty property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } removeSetProperty ( property. getName ( ), property ) ; }"
      ],
      "mid_translation": [
        "Removes the specified entry from the hash area.",
        "Removes the given entry from the hash area.",
        "Removes a settable bean property from the hash area.",
        "Removes a set of properties from the hash area.",
        "Removes the specified SettableBeanProperty from the set."
      ],
      "output": [
        "public void remove ( int index ) { Entry entry = entries [ index ] ; if ( entry!= null ) { entries [ index ] = null ; entries [ index ] = null ; entries [ index ] = null ; } }",
        "public void remove ( int index ) { Entry entry = entries [ index ] ; if ( entry!= null ) { entries [ index ] = null ; entries [ index ] = null ; } }",
        "public void remove ( int index ) { Entry entry = entries [ index ] ; if ( entry!= null ) { entries [ index ] = null ; entries [ index ] = null ; entries [ index ] = null ; } }",
        "public void remove ( int index ) { Entry entry = entries [ index ] ; if ( entry!= null ) { entries [ index ] = null ; entries [ index ] = null ; size -- ; } }",
        "public void remove ( int index ) { Entry entry = entries [ index ] ; entries [ index ] = null ; entries [ index ] = null ; entries [ index + 1 ] = null ; size -- ; }",
        "public void remove ( Entry < K, V > e ) { Entry < K, V > [ ] tab = table ; int i = tab. length - 1 ; while ( i >= 0 ) { Entry < K, V > c = tab [ i ] ; if ( c == e ) { tab [ i ] = null ; break ; } i -- ; } tab [ i ] = null ; }",
        "public void remove ( Entry < K, V > e ) { Entry < K, V > [ ] tab = table ; int i = tab. length - 1 ; while ( i >= 0 ) { Entry < K, V > c = tab [ i ] ; if ( c == e ) { tab [ i ] = null ; break ; } i -- ; } tab [ i ] = e ; }",
        "public void remove ( Entry < K, V > e ) { Entry < K, V > [ ] tab = table ; int i = tab. length - 1 ; while ( i >= 0 ) { Entry < K, V > c = tab [ i ] ; if ( c == e ) { tab [ i ] = null ; tab [ i + 1 ] = null ; break ; } i -- ; } }",
        "public void remove ( Entry < K, V > e ) { Entry < K, V > [ ] tab = table ; int i = tab. length - 1 ; while ( i >= 0 ) { Entry < K, V > e2 = tab [ i ] ; if ( e == e2 ) { tab [ i ] = null ; break ; } i -- ; } tab [ i ] = e ; }",
        "public void remove ( Entry < K, V > e ) { Entry < K, V > [ ] tab = table ; int i = tab. length - 1 ; while ( i >= 0 ) { Entry < K, V > c = tab [ i ] ; if ( c == e ) { tab [ i ] = null ; break ; } i -- ; } }",
        "public void remove ( Object bean, String propertyName ) { if ( bean == null ) { throw new IllegalArgumentException ( \"Bean cannot be null\" ) ; } if ( propertyName == null ) { throw new IllegalArgumentException ( \"Property name cannot be null\" ) ; } if ( bean. getClass ( ). getName ( ). equals ( propertyName ) ) { removeBeanProperty ( bean, propertyName ) ; } }",
        "public void remove ( Object bean, String propertyName ) { if ( bean == null ) { throw new IllegalArgumentException ( \" bean cannot be null\" ) ; } if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( bean. getClass ( ). getName ( ). equals ( propertyName ) ) { removeBeanProperty ( bean, propertyName ) ; } }",
        "public void remove ( Object bean, String propertyName ) { if ( bean == null ) { throw new IllegalArgumentException ( \" bean cannot be null\" ) ; } if ( propertyName == null ) { throw new IllegalArgumentException ( \"property name cannot be null\" ) ; } if ( bean. getClass ( ). getName ( ). equals ( propertyName ) ) { removeBeanProperty ( bean, propertyName ) ; } }",
        "public void remove ( Object bean, String propertyName ) { if ( bean == null ) { throw new IllegalArgumentException ( \"null bean\" ) ; } if ( propertyName == null ) { throw new IllegalArgumentException ( \"null propertyName\" ) ; } if ( bean. getClass ( ). getName ( ). equals ( propertyName ) ) { removeBeanProperty ( bean, propertyName ) ; } }",
        "public void remove ( Object bean, String propertyName ) { if ( bean == null ) { throw new IllegalArgumentException ( \"Bean cannot be null\" ) ; } if ( propertyName == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } if ( bean. getClass ( ). getName ( ). equals ( propertyName ) ) { removeBeanProperty ( bean, propertyName ) ; } }",
        "public void remove ( Set < String > properties ) { for ( String property : properties ) { removeProperty ( property ) ; } }",
        "public void remove ( Set < String > properties ) { for ( String property : properties ) { properties. remove ( property ) ; } }",
        "public void remove ( Collection < String > properties ) { for ( String property : properties ) { removeProperty ( property ) ; } }",
        "public void remove ( final Set < String > properties ) { for ( String property : properties ) { removeProperty ( property ) ; } }",
        "public void remove ( Set < String > properties ) { for ( String property : properties ) { removeProperty ( property ) ; } this. properties. clear ( ) ; }",
        "public void remove ( SettableBeanProperty property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } if ( mProperties == null ) { mProperties = new HashMap < SettableBeanProperty, SettableBeanProperty > ( ) ; } mProperties. remove ( property ) ; }",
        "public void remove ( SettableBeanProperty property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } if ( property. getName ( ) == null ) { throw new IllegalArgumentException ( \"Property name cannot be null\" ) ; } removeProperty ( property. getName ( ) ) ; }",
        "public boolean remove ( SettableBeanProperty property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } if ( property. getName ( ) == null ) { throw new IllegalArgumentException ( \"Property name cannot be null\" ) ; } return removeProperty ( property. getName ( ) ) ; }",
        "public void remove ( SettableBeanProperty property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } if ( property. getName ( ) == null ) { throw new IllegalArgumentException ( \"Property name cannot be null\" ) ; } removeSetProperty ( property. getName ( ) ) ; }",
        "public void remove ( SettableBeanProperty property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } removeSetProperty ( property. getName ( ), property ) ; }"
      ]
    },
    "JacksonDatabind_71_/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java_75-76": {
      "loc": "75-76",
      "input": "public static StdKeyDeserializer forType(Class<?> raw) { int kind; if (raw == String.class || raw == Object.class) { return StringKD.forType(raw); } else if (raw == UUID.class) { kind = TYPE_UUID; } else if (raw == Integer.class) { kind = TYPE_INT; } else if (raw == Long.class) { kind = TYPE_LONG; } else if (raw == Date.class) { kind = TYPE_DATE; } else if (raw == Calendar.class) { kind = TYPE_CALENDAR; } else if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Character.class) { kind = TYPE_CHAR; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == Float.class) { kind = TYPE_FLOAT; } else if (raw == Double.class) { kind = TYPE_DOUBLE; } else if (raw == URI.class) { kind = TYPE_URI; } else if (raw == URL.class) { kind = TYPE_URL; } else if (raw == Class.class) { kind = TYPE_CLASS; } else if (raw == Locale.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class); return new StdKeyDeserializer(TYPE_LOCALE, raw, deser); } else if (raw == Currency.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class); return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser); } else { return null; } return new StdKeyDeserializer(kind, raw); }",
      "target": "public static StdKeyDeserializer forType(Class<?> raw) { int kind; if (raw == String.class || raw == Object.class || raw == CharSequence.class) { return StringKD.forType(raw); } else if (raw == UUID.class) { kind = TYPE_UUID; } else if (raw == Integer.class) { kind = TYPE_INT; } else if (raw == Long.class) { kind = TYPE_LONG; } else if (raw == Date.class) { kind = TYPE_DATE; } else if (raw == Calendar.class) { kind = TYPE_CALENDAR; } else if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Character.class) { kind = TYPE_CHAR; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == Float.class) { kind = TYPE_FLOAT; } else if (raw == Double.class) { kind = TYPE_DOUBLE; } else if (raw == URI.class) { kind = TYPE_URI; } else if (raw == URL.class) { kind = TYPE_URL; } else if (raw == Class.class) { kind = TYPE_CLASS; } else if (raw == Locale.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class); return new StdKeyDeserializer(TYPE_LOCALE, raw, deser); } else if (raw == Currency.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class); return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser); } else { return null; } return new StdKeyDeserializer(kind, raw); }",
      "function range": "70,5-116,5",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getClass ( ). equals ( type ) ) { return ( T ) deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getDeserializer ( Class < T > keyType ) { if ( keyType == null ) { throw new IllegalArgumentException ( \"KeyType cannot be null\" ) ; } if ( keyType == null ) { throw new IllegalArgumentException ( \"KeyType cannot be null\" ) ; } if ( deserializerMap. containsKey ( keyType ) ) { return deserializerMap. get ( keyType ) ; } else { return null ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getDeserializer ( Class < T > keyType ) { if ( keyType == null ) { throw new IllegalArgumentException ( \"KeyType cannot be null\" ) ; } if ( keyType == null ) { throw new IllegalArgumentException ( \"KeyType cannot be null\" ) ; } if ( deserializerMap. containsKey ( keyType ) ) { return deserializerMap. get ( keyType ) ; } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getClass ( ). equals ( type ) ) { return deserializer. newInstance ( ) ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getClass ( ). equals ( type ) ) { return deserializer. newInstance ( type ) ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getDeserializer ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( deserializer == null ) { throw new IllegalArgumentException ( \"Deserializer cannot be null\" ) ; } return deserializer. getDeserializer ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getDeserializer ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( deserializer == null ) { throw new IllegalArgumentException ( \"Deserializer cannot be null\" ) ; } return deserializer. deserialize ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T findDeserializer ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } Class <? > rawType = getRawType ( type ) ; if ( rawType == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return findDeserializer ( rawType ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Deserializer < T > findDeserializer ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } Class <? > rawType = getRawType ( type ) ; if ( rawType == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) rawType. newInstance ( ) ; return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T findDeserializer ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } Class <? > rawType = getRawType ( type ) ; if ( rawType == null ) { throw new IllegalArgumentException ( \"Raw type cannot be null\" ) ; } return findDeserializer ( rawType ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( String rawString, Class < T > type ) { if ( rawString == null ) { throw new IllegalArgumentException ( \"RawString cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" )",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( String rawString, Class < T > type ) { if ( rawString == null ) { throw new IllegalArgumentException ( \"RawString cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" )",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( String rawString, Class < T > type ) { if ( rawString == null ) { throw new IllegalArgumentException ( \"RawString cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" )",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( String rawString, Class < T > type ) { if ( rawString == null ) { throw new IllegalArgumentException ( \"RawString cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" )",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( String rawString, Class < T > type ) { if ( rawString == null ) { throw new IllegalArgumentException ( \"RawString cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" )",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( String rawString, Class < T > clazz ) { if ( rawString == null ) { return null ; } if ( clazz == null ) { return null ; } if ( clazz. isAssignableFrom ( String. class ) ) { return ( T ) new StringDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Byte. class ) ) { return ( T ) new ByteDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( String rawString, Class < T > clazz ) { if ( rawString == null ) { return null ; } if ( clazz == null ) { return null ; } if ( clazz. isAssignableFrom ( String. class ) ) { return ( T ) new StringDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Byte. class ) ) { return ( T ) new ByteDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( String rawString, Class < T > clazz ) { if ( rawString == null ) { return null ; } if ( clazz == null ) { return null ; } if ( clazz. isAssignableFrom ( String. class ) ) { return ( T ) new StringDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( String rawString, Class < T > clazz ) { if ( rawString == null ) { return null ; } if ( clazz == null ) { return null ; } if ( clazz. isAssignableFrom ( String. class ) ) { return ( T ) new StringDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Byte. class ) ) { return ( T ) new ByteDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( String rawString, Class < T > clazz ) { if ( rawString == null ) { return null ; } if ( clazz == null ) { return null ; } if ( clazz. isAssignableFrom ( String. class ) ) { return ( T ) new StringDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Byte. class ) ) { return ( T ) new ByteDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Deserializer < T > findDeserializer ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) findDeserializer ( clazz ) ; if ( deserializer == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Deserializer < T > findDeserializer ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) findDeserializer ( clazz. getName ( ) ) ; if ( deserializer == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Deserializer < T > findDeserializer ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) findDeserializerMap. get ( clazz ) ; if ( deserializer == null ) { deserializer = findDeserializerMap. get ( clazz ) ; if ( deserializer == null ) { deserializer = findDeserializerMap. get ( clazz ) ; } } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Deserializer < T > findDeserializer ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) findDeserializerMap. get ( clazz ) ; if ( deserializer == null ) { throw new IllegalArgumentException ( \"No deserializer for \" + clazz ) ; } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Deserializer < T > findDeserializer ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) map. get ( type ) ; if ( deserializer == null ) { throw new IllegalArgumentException ( \"No deserializer for type: \" + type ) ; } return deserializer ; }"
      ],
      "mid_translation": [
        "Tries to find a deserializer for the given type of key.",
        "Tries to find a deserializer for the given type.",
        "Tries to find a deserializer for the type of the given raw string.",
        "Tries to find a deserializer for a type of the given raw string.",
        "Tries to find a deserializer for the given type of class."
      ],
      "output": [
        "public static < T > T forType ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getClass ( ). equals ( type ) ) { return ( T ) deserializer ; } } return null ; }",
        "public static < T > T forType ( Class < T > keyType ) { if ( keyType == null ) { throw new IllegalArgumentException ( \"KeyType cannot be null\" ) ; } if ( keyType == null ) { throw new IllegalArgumentException ( \"KeyType cannot be null\" ) ; } if ( deserializerMap. containsKey ( keyType ) ) { return deserializerMap. get ( keyType ) ; } else { return null ; } }",
        "public static < T > T forType ( Class < T > keyType ) { if ( keyType == null ) { throw new IllegalArgumentException ( \"KeyType cannot be null\" ) ; } if ( keyType == null ) { throw new IllegalArgumentException ( \"KeyType cannot be null\" ) ; } if ( deserializerMap. containsKey ( keyType ) ) { return deserializerMap. get ( keyType ) ; } return null ; }",
        "public static < T > T forType ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getClass ( ). equals ( type ) ) { return deserializer. newInstance ( ) ; } } return null ; }",
        "public static < T > T forType ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getClass ( ). equals ( type ) ) { return deserializer. newInstance ( type ) ; } } return null ; }",
        "public static < T > T forType ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( deserializer == null ) { throw new IllegalArgumentException ( \"Deserializer cannot be null\" ) ; } return deserializer. getDeserializer ( type ) ; }",
        "public static < T > T forType ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( deserializer == null ) { throw new IllegalArgumentException ( \"Deserializer cannot be null\" ) ; } return deserializer. deserialize ( type ) ; }",
        "public static < T > T forType ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } Class <? > rawType = getRawType ( type ) ; if ( rawType == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return findDeserializer ( rawType ) ; }",
        "public static < T > Deserializer < T > forType ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } Class <? > rawType = getRawType ( type ) ; if ( rawType == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) rawType. newInstance ( ) ; return deserializer ; }",
        "public static < T > T forType ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } Class <? > rawType = getRawType ( type ) ; if ( rawType == null ) { throw new IllegalArgumentException ( \"Raw type cannot be null\" ) ; } return findDeserializer ( rawType ) ; }",
        "public static < T > T forType ( String rawString, Class < T > type ) { if ( rawString == null ) { throw new IllegalArgumentException ( \"RawString cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" )",
        "public static < T > T forType ( String rawString, Class < T > type ) { if ( rawString == null ) { throw new IllegalArgumentException ( \"RawString cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" )",
        "public static < T > T forType ( String rawString, Class < T > type ) { if ( rawString == null ) { throw new IllegalArgumentException ( \"RawString cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" )",
        "public static < T > T forType ( String rawString, Class < T > type ) { if ( rawString == null ) { throw new IllegalArgumentException ( \"RawString cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" )",
        "public static < T > T forType ( String rawString, Class < T > type ) { if ( rawString == null ) { throw new IllegalArgumentException ( \"RawString cannot be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 1, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"]\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"{\" ) && rawString. endsWith ( \"}\" ) ) { rawString = rawString. substring ( 0, rawString. length ( ) - 1 ) ; } if ( rawString. startsWith ( \"[\" ) && rawString. endsWith ( \"]\" )",
        "public static < T > T forType ( String rawString, Class < T > clazz ) { if ( rawString == null ) { return null ; } if ( clazz == null ) { return null ; } if ( clazz. isAssignableFrom ( String. class ) ) { return ( T ) new StringDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Byte. class ) ) { return ( T ) new ByteDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class",
        "public static < T > T forType ( String rawString, Class < T > clazz ) { if ( rawString == null ) { return null ; } if ( clazz == null ) { return null ; } if ( clazz. isAssignableFrom ( String. class ) ) { return ( T ) new StringDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Byte. class ) ) { return ( T ) new ByteDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class",
        "public static < T > T forType ( String rawString, Class < T > clazz ) { if ( rawString == null ) { return null ; } if ( clazz == null ) { return null ; } if ( clazz. isAssignableFrom ( String. class ) ) { return ( T ) new StringDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class",
        "public static < T > T forType ( String rawString, Class < T > clazz ) { if ( rawString == null ) { return null ; } if ( clazz == null ) { return null ; } if ( clazz. isAssignableFrom ( String. class ) ) { return ( T ) new StringDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Byte. class ) ) { return ( T ) new ByteDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class",
        "public static < T > T forType ( String rawString, Class < T > clazz ) { if ( rawString == null ) { return null ; } if ( clazz == null ) { return null ; } if ( clazz. isAssignableFrom ( String. class ) ) { return ( T ) new StringDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Byte. class ) ) { return ( T ) new ByteDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Double. class ) ) { return ( T ) new DoubleDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class ) ) { return ( T ) new FloatDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Integer. class ) ) { return ( T ) new IntegerDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Long. class ) ) { return ( T ) new LongDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Short. class ) ) { return ( T ) new ShortDeserializer ( ). deserialize ( rawString ) ; } if ( clazz. isAssignableFrom ( Float. class",
        "public static < T > Deserializer < T > forType ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) findDeserializer ( clazz ) ; if ( deserializer == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return deserializer ; }",
        "public static < T > Deserializer < T > forType ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) findDeserializer ( clazz. getName ( ) ) ; if ( deserializer == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return deserializer ; }",
        "public static < T > Deserializer < T > forType ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) findDeserializerMap. get ( clazz ) ; if ( deserializer == null ) { deserializer = findDeserializerMap. get ( clazz ) ; if ( deserializer == null ) { deserializer = findDeserializerMap. get ( clazz ) ; } } return deserializer ; }",
        "public static < T > Deserializer < T > forType ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) findDeserializerMap. get ( clazz ) ; if ( deserializer == null ) { throw new IllegalArgumentException ( \"No deserializer for \" + clazz ) ; } return deserializer ; }",
        "public static < T > Deserializer < T > forType ( Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } Deserializer < T > deserializer = ( Deserializer < T > ) map. get ( type ) ; if ( deserializer == null ) { throw new IllegalArgumentException ( \"No deserializer for type: \" + type ) ; } return deserializer ; }"
      ]
    },
    "JacksonDatabind_76_/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java_583-585": {
      "loc": "583-585",
      "input": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp != null) { if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) { t = p.nextToken(); Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt); continue; } while (t == JsonToken.FIELD_NAME) { p.nextToken(); tokens.copyCurrentStructure(p); t = p.nextToken(); } tokens.writeEndObject(); if (bean.getClass() != _beanType.getRawClass()) { ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\"); return null; } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); } continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop != null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps != null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter != null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); }",
      "target": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp != null) { buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt)); continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop != null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps != null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter != null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); }",
      "function range": "565,5-637,5",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T withUnwrapped ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return ( T ) this. clazz. cast ( this ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T withUnwrapped ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return ( T ) this. clazz. cast ( this. clazz ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T withUnwrapped ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return ( T ) this. clazz. newInstance ( ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T withUnwrapped ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } return ( T ) this. clazz. cast ( this ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T withUnwrapped ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return ( T ) this. clazz. cast ( this. clazz. cast ( clazz ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser must not be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser must not be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, Class < T > type ) throws JsonParseException, JsonMappingException, IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, Class < T > type ) throws IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "public static < T > T deserialize ( JsonParser jsonParser, Class < T > type ) throws IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser must not be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser must not be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, Class < T > type ) throws JsonParseException, JsonMappingException, IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, Class < T > type ) throws IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, String property ) throws IOException { return ( T ) jsonParser. parse ( property ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( Object obj, Class < T > clazz ) { if ( obj == null ) { throw new IllegalArgumentException ( \"obj cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } try { return clazz. cast ( obj ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( e. getMessage ( ) ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( Object obj, Class < T > clazz ) { if ( obj == null ) { throw new IllegalArgumentException ( \"Object cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } try { return clazz. cast ( obj ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( e. getMessage ( ), e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( Object obj, Class < T > clazz ) { if ( obj == null ) { throw new IllegalArgumentException ( \"Object cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } try { return clazz. cast ( obj ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( e. getMessage ( ) ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( Object obj, Class < T > clazz ) { if ( obj == null ) { throw new IllegalArgumentException ( \"obj cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } try { return clazz. cast ( obj ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( Object obj, Class < T > clazz ) { if ( obj == null ) { throw new IllegalArgumentException ( \"Object cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } try { return clazz. cast ( obj ) ; } catch ( IllegalArgumentException e ) { throw new IllegalArgumentException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, String property ) throws IOException { return ( T ) jsonParser. parse ( property ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, String property ) throws JsonParseException, JsonMappingException, IOException { return ( T ) jsonParser. parse ( jsonParser, property ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, Class < T > type ) throws IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, String property ) throws JsonParseException, JsonMappingException, IOException { return ( T ) jsonParser. parse ( property ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T deserialize ( JsonParser jsonParser, Class < T > clazz ) throws IOException { return ( T ) jsonParser. parse ( jsonParser, clazz ) ; }"
      ],
      "mid_translation": [
        "Deserialize using property based with unwrapped.",
        "Deserialize the contents of a JsonParser using a property based for unwrapped instances.",
        "Deserialize the contents of a JsonParser using a property based and unwrapped value.",
        "Deserialize using property based and unwrapped.",
        "Deserialize the contents of a JsonParser using a property based for unwrapped values."
      ],
      "output": [
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return ( T ) this. clazz. cast ( this ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return ( T ) this. clazz. cast ( this. clazz ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return ( T ) this. clazz. newInstance ( ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } return ( T ) this. clazz. cast ( this ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( this. clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return ( T ) this. clazz. cast ( this. clazz. cast ( clazz ) ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser must not be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser must not be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, Class < T > type ) throws JsonParseException, JsonMappingException, IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, Class < T > type ) throws IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, Class < T > type ) throws IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser must not be null\" ) ; } if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, Class < T > type ) { if ( jsonParser == null ) { throw new IllegalArgumentException ( \"JsonParser must not be null\" ) ; } return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, Class < T > type ) throws JsonParseException, JsonMappingException, IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, Class < T > type ) throws IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, String property ) throws IOException { return ( T ) jsonParser. parse ( property ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( Object obj, Class < T > clazz ) { if ( obj == null ) { throw new IllegalArgumentException ( \"obj cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } try { return clazz. cast ( obj ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( e. getMessage ( ) ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( Object obj, Class < T > clazz ) { if ( obj == null ) { throw new IllegalArgumentException ( \"Object cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } try { return clazz. cast ( obj ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( e. getMessage ( ), e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( Object obj, Class < T > clazz ) { if ( obj == null ) { throw new IllegalArgumentException ( \"Object cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } try { return clazz. cast ( obj ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( e. getMessage ( ) ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( Object obj, Class < T > clazz ) { if ( obj == null ) { throw new IllegalArgumentException ( \"obj cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } try { return clazz. cast ( obj ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( Object obj, Class < T > clazz ) { if ( obj == null ) { throw new IllegalArgumentException ( \"Object cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } if ( clazz == null ) { throw new IllegalArgumentException ( \"Class cannot be null\" ) ; } try { return clazz. cast ( obj ) ; } catch ( IllegalArgumentException e ) { throw new IllegalArgumentException ( e ) ; } }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, String property ) throws IOException { return ( T ) jsonParser. parse ( property ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, String property ) throws JsonParseException, JsonMappingException, IOException { return ( T ) jsonParser. parse ( jsonParser, property ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, Class < T > type ) throws IOException { return ( T ) jsonParser. parse ( jsonParser, type ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, String property ) throws JsonParseException, JsonMappingException, IOException { return ( T ) jsonParser. parse ( property ) ; }",
        "@SuppressWarnings(\"resource\") protected < T > T deserializeUsingPropertyBasedWithUnwrapped ( JsonParser jsonParser, Class < T > clazz ) throws IOException { return ( T ) jsonParser. parse ( jsonParser, clazz ) ; }"
      ]
    },
    "JacksonDatabind_82_/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java_495-496": {
      "loc": "495-496",
      "input": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { final boolean isConcrete = !beanDesc.getType().isAbstract(); final SettableBeanProperty[] creatorProps = isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null; final boolean hasCreatorProps = (creatorProps != null); JsonIgnoreProperties.Value ignorals = ctxt.getConfig() .getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo()); Set<String> ignored; if (ignorals != null) { boolean ignoreAny = ignorals.getIgnoreUnknown(); builder.setIgnoreUnknownProperties(ignoreAny); ignored = ignorals.getIgnored(); for (String propName : ignored) { builder.addIgnorable(propName); } } else { ignored = Collections.emptySet(); } AnnotatedMethod anySetterMethod = beanDesc.findAnySetter(); AnnotatedMember anySetterField = null; if (anySetterMethod != null) { builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod)); } else { anySetterField = beanDesc.findAnySetterField(); if(anySetterField != null) { builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField)); } } if (anySetterMethod == null && anySetterField == null) { Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames(); if (ignored2 != null) { for (String propName : ignored2) { builder.addIgnorable(propName); } } } final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS); List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs); } } for (BeanPropertyDefinition propDef : propDefs) { SettableBeanProperty prop = null; if (propDef.hasSetter()) { JavaType propertyType = propDef.getSetter().getParameterType(0); prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); } else if (propDef.hasField()) { JavaType propertyType = propDef.getField().getType(); prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); } else if (useGettersAsSetters && propDef.hasGetter()) { AnnotatedMethod getter = propDef.getGetter(); Class<?> rawPropertyType = getter.getRawType(); if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) { prop = constructSetterlessProperty(ctxt, beanDesc, propDef); } } if (hasCreatorProps && propDef.hasConstructorParameter()) { final String name = propDef.getName(); CreatorProperty cprop = null; if (creatorProps != null) { for (SettableBeanProperty cp : creatorProps) { if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) { cprop = (CreatorProperty) cp; break; } } } if (cprop == null) { List<String> n = new ArrayList<>(); for (SettableBeanProperty cp : creatorProps) { n.add(cp.getName()); } ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name '%s' (known Creator properties: %s)\", name, n); continue; } if (prop != null) { cprop.setFallbackSetter(prop); } prop = cprop; builder.addCreatorProperty(cprop); continue; } if (prop != null) { Class<?>[] views = propDef.findViews(); if (views == null) { if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) { views = NO_VIEWS; } } prop.setViews(views); builder.addProperty(prop); } } }",
      "target": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { final boolean isConcrete = !beanDesc.getType().isAbstract(); final SettableBeanProperty[] creatorProps = isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null; final boolean hasCreatorProps = (creatorProps != null); JsonIgnoreProperties.Value ignorals = ctxt.getConfig() .getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo()); Set<String> ignored; if (ignorals != null) { boolean ignoreAny = ignorals.getIgnoreUnknown(); builder.setIgnoreUnknownProperties(ignoreAny); ignored = ignorals.findIgnoredForDeserialization(); for (String propName : ignored) { builder.addIgnorable(propName); } } else { ignored = Collections.emptySet(); } AnnotatedMethod anySetterMethod = beanDesc.findAnySetter(); AnnotatedMember anySetterField = null; if (anySetterMethod != null) { builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod)); } else { anySetterField = beanDesc.findAnySetterField(); if(anySetterField != null) { builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField)); } } if (anySetterMethod == null && anySetterField == null) { Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames(); if (ignored2 != null) { for (String propName : ignored2) { builder.addIgnorable(propName); } } } final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS); List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs); } } for (BeanPropertyDefinition propDef : propDefs) { SettableBeanProperty prop = null; if (propDef.hasSetter()) { JavaType propertyType = propDef.getSetter().getParameterType(0); prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); } else if (propDef.hasField()) { JavaType propertyType = propDef.getField().getType(); prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); } else if (useGettersAsSetters && propDef.hasGetter()) { AnnotatedMethod getter = propDef.getGetter(); Class<?> rawPropertyType = getter.getRawType(); if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) { prop = constructSetterlessProperty(ctxt, beanDesc, propDef); } } if (hasCreatorProps && propDef.hasConstructorParameter()) { final String name = propDef.getName(); CreatorProperty cprop = null; if (creatorProps != null) { for (SettableBeanProperty cp : creatorProps) { if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) { cprop = (CreatorProperty) cp; break; } } } if (cprop == null) { List<String> n = new ArrayList<>(); for (SettableBeanProperty cp : creatorProps) { n.add(cp.getName()); } ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name '%s' (known Creator properties: %s)\", name, n); continue; } if (prop != null) { cprop.setFallbackSetter(prop); } prop = cprop; builder.addCreatorProperty(cprop); continue; } if (prop != null) { Class<?>[] views = propDef.findViews(); if (views == null) { if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) { views = NO_VIEWS; } } prop.setViews(views); builder.addProperty(prop); } } }",
      "function range": "472,5-615,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "JacksonDatabind_93_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java_83-85": {
      "loc": "83-85",
      "input": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; } if (full.startsWith(PREFIX_STRING)) { for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) { String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } } return; } while (false); throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full)); }",
      "target": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; } if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) { for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) { String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } } return; } while (false); throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full)); }",
      "function range": "67,5-99,5",
      "raw_output": [
        "private void validateSubType ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( SubType. class ) ) { Class <? > subType = clazz. getAnnotation ( SubType. class ) ; if ( subType == null ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } if (! subType. isAssignableFrom ( clazz ) ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } } }",
        "private void validateSubType ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( SubType. class ) ) { Class <? > subType = clazz. getAnnotation ( SubType. class ) ; if ( subType == null ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + clazz ) ; } if (! subType. isAnnotationPresent ( SubType. class ) ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } } }",
        "private void validateSubType ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( SubType. class ) ) { Class <? > subType = clazz. getAnnotation ( SubType. class ) ; if ( subType == null ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } if (! subType. isAssignableFrom ( clazz ) ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not implement sub-type\" ) ; } } }",
        "private void validateSubType ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( SubType. class ) ) { Class <? > subType = clazz. getAnnotation ( SubType. class ) ; if ( subType == null ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } if (! subType. isAssignableFrom ( clazz ) ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not implement \" + subType ) ; } } }",
        "private void validateSubType ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( SubType. class ) ) { SubType subType = clazz. getAnnotation ( SubType. class ) ; if ( subType == null ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } if ( subType. isEnum ( ) ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T extends SubType > T validate ( Class < T > subType ) { if ( subType == null ) { return null ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } throw new IllegalArgumentException ( \"Unsupported sub-type: \" + subType ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T extends SubType > T validate ( Class < T > subType ) { if ( subType == null ) { return null ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) subType ; return validate ( genericArrayType. getGenericComponentType ( ) ) ; } if ( subType instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) subType ; return validate ( genericArrayType. getGenericComponentType ( ) ) ; } if ( subType instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) subType ; return validate ( genericArrayType. getGenericComponentType ( ) ) ; } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T extends SubType > T validate ( Class < T > subType ) { if ( subType == null ) { return null ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T extends SubType > T validate ( Class < T > subType ) { if ( subType == null ) { return null ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } throw new IllegalArgumentException ( \"Unsupported sub-type: \" + subType. getName ( ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T extends SubType > T validate ( Class < T > subType ) { if ( subType == null ) { return null ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } return null ; }",
        "protected void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + subType ) ; } if (! subType. isAssignableFrom ( clazz ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + clazz ) ; } }",
        "protected void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + subType ) ; } if (! subType. equals ( clazz ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + subType ) ; } }",
        "protected void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + subType ) ; } }",
        "protected void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz must be of type \" + subType. getName ( ) ) ; } }",
        "protected void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz cannot be assignable to \" + subType ) ; } }",
        "protected void validate ( ) { super. validate ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } }",
        "protected void validate ( ) { super. validate ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isMap ( ) ) { super. validateMap ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } }",
        "protected void validate ( ) { super. validate ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } } }",
        "protected void validate ( ) { super. validate ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isMap ( ) ) { super. validateMap ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } }",
        "protected void validate ( ) { super. validate ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; } else if ( isCollection ( ) ) { super. validateCollection ( ) ; } else if ( isCollection ( ) ) { super. validateCollection ( ) ; } else { super. validateCollection ( ) ; } }",
        "protected void validateSubType ( Class <? > subType ) { if ( subType == null ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } if (! subType. isArray ( ) ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } if (! subType. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } }",
        "protected void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + subType ) ; } }",
        "protected void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz cannot be assignable to \" + subType ) ; } }",
        "protected void validateSubType ( Class <? > subType ) { if ( subType == null ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } if (! subType. isAssignableFrom ( getClass ( ) ) ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } }",
        "protected void validateSubType ( Class <? > subType ) { if ( subType == null ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } if (! subType. isAssignableFrom ( this. getClass ( ) ) ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } }"
      ],
      "mid_translation": [
        "Validate the sub - type.",
        "Validates a sub - type.",
        "Validate sub - type.",
        "Validates the sub - type.",
        "Validate a sub - type."
      ],
      "output": [
        "public void validateSubType ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( SubType. class ) ) { Class <? > subType = clazz. getAnnotation ( SubType. class ) ; if ( subType == null ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } if (! subType. isAssignableFrom ( clazz ) ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } } }",
        "public void validateSubType ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( SubType. class ) ) { Class <? > subType = clazz. getAnnotation ( SubType. class ) ; if ( subType == null ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + clazz ) ; } if (! subType. isAnnotationPresent ( SubType. class ) ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } } }",
        "public void validateSubType ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( SubType. class ) ) { Class <? > subType = clazz. getAnnotation ( SubType. class ) ; if ( subType == null ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } if (! subType. isAssignableFrom ( clazz ) ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not implement sub-type\" ) ; } } }",
        "public void validateSubType ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( SubType. class ) ) { Class <? > subType = clazz. getAnnotation ( SubType. class ) ; if ( subType == null ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } if (! subType. isAssignableFrom ( clazz ) ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not implement \" + subType ) ; } } }",
        "public void validateSubType ( Class <? > clazz ) { if ( clazz. isAnnotationPresent ( SubType. class ) ) { SubType subType = clazz. getAnnotation ( SubType. class ) ; if ( subType == null ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } if ( subType. isEnum ( ) ) { throw new IllegalArgumentException ( \"Class \" + clazz. getName ( ) + \" does not have a sub-type\" ) ; } } }",
        "public < T extends SubType > T validateSubType ( Class < T > subType ) { if ( subType == null ) { return null ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } throw new IllegalArgumentException ( \"Unsupported sub-type: \" + subType ) ; }",
        "public < T extends SubType > T validateSubType ( Class < T > subType ) { if ( subType == null ) { return null ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) subType ; return validate ( genericArrayType. getGenericComponentType ( ) ) ; } if ( subType instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) subType ; return validate ( genericArrayType. getGenericComponentType ( ) ) ; } if ( subType instanceof GenericArrayType ) { GenericArrayType genericArrayType = ( GenericArrayType ) subType ; return validate ( genericArrayType. getGenericComponentType ( ) ) ; } return null ; }",
        "public < T extends SubType > T validateSubType ( Class < T > subType ) { if ( subType == null ) { return null ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; }",
        "public < T extends SubType > T validateSubType ( Class < T > subType ) { if ( subType == null ) { return null ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } throw new IllegalArgumentException ( \"Unsupported sub-type: \" + subType. getName ( ) ) ; }",
        "public < T extends SubType > T validateSubType ( Class < T > subType ) { if ( subType == null ) { return null ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) subType ; return validate ( parameterizedType. getRawType ( ) ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } if ( subType instanceof Class <? > ) { Class <? > clazz = ( Class <? > ) subType ; return validate ( clazz ) ; } return null ; }",
        "public void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + subType ) ; } if (! subType. isAssignableFrom ( clazz ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + clazz ) ; } }",
        "public void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + subType ) ; } if (! subType. equals ( clazz ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + subType ) ; } }",
        "public void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + subType ) ; } }",
        "public void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz must be of type \" + subType. getName ( ) ) ; } }",
        "public void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz cannot be assignable to \" + subType ) ; } }",
        "public void validateSubType ( ) { super. validate ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } }",
        "public void validateSubType ( ) { super. validate ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isMap ( ) ) { super. validateMap ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } }",
        "public void validateSubType ( ) { super. validate ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } } }",
        "public void validateSubType ( ) { super. validate ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } if ( isMap ( ) ) { super. validateMap ( ) ; } if ( isCollection ( ) ) { super. validateCollection ( ) ; } }",
        "public void validateSubType ( ) { super. validate ( ) ; if ( isCollection ( ) ) { super. validateCollection ( ) ; } else if ( isCollection ( ) ) { super. validateCollection ( ) ; } else if ( isCollection ( ) ) { super. validateCollection ( ) ; } else { super. validateCollection ( ) ; } }",
        "public void validateSubType ( Class <? > subType ) { if ( subType == null ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } if (! subType. isArray ( ) ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } if (! subType. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } }",
        "public void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz is not assignable to \" + subType ) ; } }",
        "public void validateSubType ( Class <? > clazz, Class <? > subType ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( subType == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if (! clazz. isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( \"clazz cannot be assignable to \" + subType ) ; } }",
        "public void validateSubType ( Class <? > subType ) { if ( subType == null ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } if (! subType. isAssignableFrom ( getClass ( ) ) ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } }",
        "public void validateSubType ( Class <? > subType ) { if ( subType == null ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } if (! subType. isAssignableFrom ( this. getClass ( ) ) ) { throw new IllegalArgumentException ( \"Invalid sub-type: \" + subType ) ; } }"
      ]
    },
    "JacksonDatabind_96_/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java_735-736": {
      "loc": "735-736",
      "input": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1 != candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName != null) || (injectId != null); if (!useProps && (paramDef != null)) { paramName = candidate.findImplicitParamName(0); useProps = (paramName != null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef != null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
      "target": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1 != candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName != null) || (injectId != null); if (!useProps && (paramDef != null)) { paramName = candidate.paramName(0); useProps = (paramName != null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef != null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
      "function range": "701,5-752,5",
      "raw_output": [
        "public void addCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. put ( candidate, candidate ) ; } else { creatorMap. put ( candidate, candidate ) ; } }",
        "public void addCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. put ( candidate, creatorMap. get ( candidate ) ) ; } }",
        "public void addCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. put ( candidate, candidate ) == null ) { creatorMap. put ( candidate, candidate ) ; } }",
        "public void addCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creator == null ) { creator = candidate ; } else { creator. add ( candidate ) ; } }",
        "public void addCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. put ( candidate, creatorMap. get ( candidate ) ) ; } }",
        "private static void addCreator ( Class <? > candidate, Constructor <? > constructor ) { try { constructor. setAccessible ( true ) ; constructor. newInstance ( candidate ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } catch ( InvocationTargetException e ) { throw new RuntimeException ( e ) ; } }",
        "private static void addCreator ( Class <? > candidate, Constructor <? > constructor ) { try { constructor. setAccessible ( true ) ; constructor. newInstance ( candidate ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalArgumentException e ) { throw new RuntimeException ( e ) ; } }",
        "private static void addCreator ( Class <? > candidate, Constructor <? > constructor ) { try { constructor. setAccessible ( true ) ; constructor. newInstance ( candidate ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } }",
        "private static void addCreator ( Class <? > candidate, Constructor <? > constructor ) { try { constructor. setAccessible ( true ) ; constructor. newInstance ( candidate ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } catch ( ClassCastException e ) { throw new RuntimeException ( e ) ; } }",
        "private static void addCreator ( Class <? > candidate, Constructor <? > constructor ) { try { constructor. setAccessible ( true ) ; constructor. newInstance ( candidate ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( e ) ; } }",
        "public void addCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. put ( candidate, candidate ) == null ) { creatorMap. put ( candidate, candidate ) ; } }",
        "public void addCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { return ; } creatorMap. put ( candidate, candidate ) ; }",
        "public void addCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. put ( candidate, creatorMap. get ( candidate ) ) ; } }",
        "public void addCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. put ( candidate, candidate ) ; } }",
        "public void addCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. get ( candidate ). addCreator ( candidate ) ; } }",
        "public void addFieldCreator ( Class <? > clazz, FieldCreator creator ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; Assert. notNull ( creator, \" creator must not be null\" ) ; fields. put ( clazz, creator ) ; }",
        "public void addFieldCreator ( Class <? > clazz, FieldCreator creator ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; Assert. notNull ( creator, \" creator must not be null\" ) ; this. fields. put ( clazz, creator ) ; }",
        "public void addFieldCreator ( Class <? > clazz, FieldCreator creator ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; Assert. notNull ( creator, \"Creator must not be null\" ) ; fields. put ( clazz, creator ) ; }",
        "public void addFieldCreator ( Class <? > clazz, FieldCreator creator ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; Assert. notNull ( creator, \" creator must not be null\" ) ; addFieldCreator ( clazz, creator ) ; }",
        "public void addFieldCreator ( Class <? > clazz, FieldCreator creator ) { Assert. notNull ( clazz, \"clazz\" ) ; Assert. notNull ( creator, \" creator\" ) ; fields. put ( clazz, creator ) ; }",
        "private static void addCreator ( Class <? > candidate, Constructor <? > constructor ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( constructor == null ) { throw new IllegalArgumentException ( \"Constructor cannot be null\" ) ; } Class <? > [ ] params = candidate. getParameterTypes ( ) ; for ( int i = 0 ; i < params. length ; i ++ ) { params [ i ] = constructor. newInstance ( params [ i ] ) ; } }",
        "private static void addCreator ( Class <? > candidate, Constructor <? > constructor ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( constructor == null ) { throw new IllegalArgumentException ( \"Constructor cannot be null\" ) ; } Class <? > [ ] types = candidate. getGenericInterfaces ( ) ; for ( int i = 0 ; i < types. length ; i ++ ) { addCreator ( types [ i ], constructor ) ; } }",
        "private static void addCreator ( Class <? > candidate, Constructor <? > constructor ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( constructor == null ) { throw new IllegalArgumentException ( \"Constructor cannot be null\" ) ; } Class <? > [ ] paramTypes = candidate. getParameterTypes ( ) ; for ( int i = 0 ; i < paramTypes. length ; i ++ ) { Class <? > paramType = paramTypes [ i ] ; if (! constructor. isAssignableFrom ( paramType ) ) { constructor. newInstance ( paramType ) ; } } }",
        "private static void addCreator ( Class <? > candidate, Constructor <? > constructor ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( constructor == null ) { throw new IllegalArgumentException ( \"Constructor cannot be null\" ) ; } Class <? > [ ] paramTypes = candidate. getParameterTypes ( ) ; for ( int i = 0 ; i < paramTypes. length ; i ++ ) { Class <? > paramType = paramTypes [ i ] ; if ( constructor. isAnnotationPresent ( paramType ) ) { constructor. addAnnotation ( paramType ) ; } } }",
        "private static void addCreator ( Class <? > candidate, Constructor <? > constructor ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( constructor == null ) { throw new IllegalArgumentException ( \"Constructor cannot be null\" ) ; } Class <? > [ ] paramTypes = candidate. getParameterTypes ( ) ; for ( int i = 0 ; i < paramTypes. length ; i ++ ) { Class <? > paramType = paramTypes [ i ] ; if (! constructor. isAssignableFrom ( paramType ) ) { constructor. addConstructor ( paramType ) ; } } }"
      ],
      "mid_translation": [
        "Add an explicit creator for the given candidate.",
        "Add an explicitCreator for the given candidate.",
        "explicitly add a creator for the given candidate.",
        "Add an explicit creator for a given field.",
        "Add an explicitCreator for a given candidate."
      ],
      "output": [
        "protected void _addExplicitAnyCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. put ( candidate, candidate ) ; } else { creatorMap. put ( candidate, candidate ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. put ( candidate, creatorMap. get ( candidate ) ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. put ( candidate, candidate ) == null ) { creatorMap. put ( candidate, candidate ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creator == null ) { creator = candidate ; } else { creator. add ( candidate ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. put ( candidate, creatorMap. get ( candidate ) ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate, Constructor <? > constructor ) { try { constructor. setAccessible ( true ) ; constructor. newInstance ( candidate ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } catch ( InvocationTargetException e ) { throw new RuntimeException ( e ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate, Constructor <? > constructor ) { try { constructor. setAccessible ( true ) ; constructor. newInstance ( candidate ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalArgumentException e ) { throw new RuntimeException ( e ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate, Constructor <? > constructor ) { try { constructor. setAccessible ( true ) ; constructor. newInstance ( candidate ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate, Constructor <? > constructor ) { try { constructor. setAccessible ( true ) ; constructor. newInstance ( candidate ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } catch ( ClassCastException e ) { throw new RuntimeException ( e ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate, Constructor <? > constructor ) { try { constructor. setAccessible ( true ) ; constructor. newInstance ( candidate ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( e ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. put ( candidate, candidate ) == null ) { creatorMap. put ( candidate, candidate ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { return ; } creatorMap. put ( candidate, candidate ) ; }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. put ( candidate, creatorMap. get ( candidate ) ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. put ( candidate, candidate ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate ) { if ( candidate == null ) { throw new IllegalArgumentException ( \" candidate cannot be null\" ) ; } if ( creatorMap. containsKey ( candidate ) ) { creatorMap. get ( candidate ). addCreator ( candidate ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > clazz, FieldCreator creator ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; Assert. notNull ( creator, \" creator must not be null\" ) ; fields. put ( clazz, creator ) ; }",
        "protected void _addExplicitAnyCreator ( Class <? > clazz, FieldCreator creator ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; Assert. notNull ( creator, \" creator must not be null\" ) ; this. fields. put ( clazz, creator ) ; }",
        "protected void _addExplicitAnyCreator ( Class <? > clazz, FieldCreator creator ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; Assert. notNull ( creator, \"Creator must not be null\" ) ; fields. put ( clazz, creator ) ; }",
        "protected void _addExplicitAnyCreator ( Class <? > clazz, FieldCreator creator ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; Assert. notNull ( creator, \" creator must not be null\" ) ; addFieldCreator ( clazz, creator ) ; }",
        "protected void _addExplicitAnyCreator ( Class <? > clazz, FieldCreator creator ) { Assert. notNull ( clazz, \"clazz\" ) ; Assert. notNull ( creator, \" creator\" ) ; fields. put ( clazz, creator ) ; }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate, Constructor <? > constructor ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( constructor == null ) { throw new IllegalArgumentException ( \"Constructor cannot be null\" ) ; } Class <? > [ ] params = candidate. getParameterTypes ( ) ; for ( int i = 0 ; i < params. length ; i ++ ) { params [ i ] = constructor. newInstance ( params [ i ] ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate, Constructor <? > constructor ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( constructor == null ) { throw new IllegalArgumentException ( \"Constructor cannot be null\" ) ; } Class <? > [ ] types = candidate. getGenericInterfaces ( ) ; for ( int i = 0 ; i < types. length ; i ++ ) { addCreator ( types [ i ], constructor ) ; } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate, Constructor <? > constructor ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( constructor == null ) { throw new IllegalArgumentException ( \"Constructor cannot be null\" ) ; } Class <? > [ ] paramTypes = candidate. getParameterTypes ( ) ; for ( int i = 0 ; i < paramTypes. length ; i ++ ) { Class <? > paramType = paramTypes [ i ] ; if (! constructor. isAssignableFrom ( paramType ) ) { constructor. newInstance ( paramType ) ; } } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate, Constructor <? > constructor ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( constructor == null ) { throw new IllegalArgumentException ( \"Constructor cannot be null\" ) ; } Class <? > [ ] paramTypes = candidate. getParameterTypes ( ) ; for ( int i = 0 ; i < paramTypes. length ; i ++ ) { Class <? > paramType = paramTypes [ i ] ; if ( constructor. isAnnotationPresent ( paramType ) ) { constructor. addAnnotation ( paramType ) ; } } }",
        "protected void _addExplicitAnyCreator ( Class <? > candidate, Constructor <? > constructor ) { if ( candidate == null ) { throw new IllegalArgumentException ( \"Candidate cannot be null\" ) ; } if ( constructor == null ) { throw new IllegalArgumentException ( \"Constructor cannot be null\" ) ; } Class <? > [ ] paramTypes = candidate. getParameterTypes ( ) ; for ( int i = 0 ; i < paramTypes. length ; i ++ ) { Class <? > paramType = paramTypes [ i ] ; if (! constructor. isAssignableFrom ( paramType ) ) { constructor. addConstructor ( paramType ) ; } } }"
      ]
    },
    "JacksonDatabind_97_/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java_114-115": {
      "loc": "114-115",
      "input": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else { gen.writeObject(_value); } }",
      "target": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else { ctxt.defaultSerializeValue(_value, gen); } }",
      "function range": "104,5-116,5",
      "raw_output": [
        "private void serialize ( SerializerProvider provider, JsonGenerator jsonGenerator ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { provider. serialize ( jsonGenerator ) ; } jsonGenerator. writeEndObject ( ) ; }",
        "private void serialize ( SerializerProvider provider, JsonGenerator jsonGenerator ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { provider. serialize ( jsonGenerator ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "private void serialize ( SerializerProvider provider, JsonGenerator jsonGenerator ) throws IOException { if ( provider == null ) { jsonGenerator. writeObject ( this ) ; } else { provider. serialize ( jsonGenerator ) ; } }",
        "private void serialize ( SerializerProvider provider, JsonGenerator jsonGenerator ) throws IOException { if ( provider == null ) { jsonGenerator. writeObject ( this ) ; } else { provider. serialize ( this, jsonGenerator ) ; } }",
        "private static void serialize ( SerializerProvider provider, JsonGenerator jsonGenerator ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { Serializer. serialize ( provider, jsonGenerator ) ; } }",
        "public JsonGenerator to ( SerializerProvider provider ) { return new JsonGenerator ( ) { @ Override public void writeStartObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEndObject ( ) ; } @ Override public void writeEnd ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEndObject ( ) ; } } ; }",
        "public JsonGenerator to ( SerializerProvider provider ) { return new JsonGenerator ( ) { @ Override public void writeStartObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEndObject ( ) ; } @ Override public void writeEndObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEnd ( ) ; } } ; }",
        "public JsonGenerator to ( SerializerProvider provider ) { return new JsonGenerator ( ) { @ Override public void writeStartObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEndObject ( ) ; } @ Override public void writeEnd ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEnd ( ) ; } } ; }",
        "public JsonGenerator to ( SerializerProvider provider ) { return new JsonGenerator ( ) { @ Override public void writeStartObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEndObject ( ) ; } @ Override public void writeEndObject ( ) throws IOException { jgen. writeEndObject ( ) ; } } ; }",
        "public JsonGenerator to ( SerializerProvider provider ) { return new JsonGenerator ( ) { @ Override public void writeStartObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeStartObject ( ) ; JsonGenerator jgen = provider. to ( jgen ) ; jgen. writeEndObject ( ) ; } } ; }",
        "public void serializeTo ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void serializeTo ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void serializeTo ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void serializeTo ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { jsonGenerator. writeStartObject ( ) ; serializeTo ( jsonGenerator, provider ) ; jsonGenerator. writeEndObject ( ) ; }",
        "public void serializeTo ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"version\", getVersion ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "private JsonGenerator createGenerator ( SerializerProvider provider ) throws IOException { JsonGenerator jsonGenerator = provider. createGenerator ( ) ; jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; return jsonGenerator ; }",
        "private JsonGenerator createGenerator ( SerializerProvider provider ) throws IOException { JsonGenerator jsonGenerator = provider. createGenerator ( ) ; jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; jsonGenerator. writeEndObject ( ) ; return jsonGenerator ; }",
        "private JsonGenerator createGenerator ( SerializerProvider provider ) { JsonGenerator jsonGenerator = provider. createGenerator ( ) ; jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; return jsonGenerator ; }",
        "private JsonGenerator createGenerator ( SerializerProvider provider ) throws IOException { JsonGenerator jsonGenerator = provider. createGenerator ( ) ; jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"description\", getDescription ( ) ) ; jsonGenerator. writeEndObject ( ) ; jsonGenerator. writeEndObject ( ) ; return jsonGenerator ; }",
        "private JsonGenerator createGenerator ( SerializerProvider provider ) throws IOException { JsonGenerator jsonGenerator = provider. createGenerator ( ) ; jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", type. getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", name ) ; jsonGenerator. writeStringField ( \"type\", type. getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; return jsonGenerator ; }",
        "private void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeStringField ( \"type\", provider. getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", provider. getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", provider. getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "private void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeStringField ( \"type\", provider. getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", provider. getName ( ) ) ; jsonGenerator. writeStringField ( \"description\", provider. getDescription ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "private void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeStringField ( \"type\", provider. getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", provider. getName ( ) ) ; jsonGenerator. writeStringField ( \"version\", provider. getVersion ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "private void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeStringField ( \"type\", provider. getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", provider. getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "private void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeStartObject ( ) ; serialize ( jsonGenerator, provider ) ; jsonGenerator. writeEndObject ( ) ; } }"
      ],
      "mid_translation": [
        "Serialize this object into the given JSONGenerator using the given SerializerProvider.",
        "Serialize this object to the given JSONGenerator using the given SerializerProvider.",
        "Serialize this object to the given JSON generator using the given SerializerProvider.",
        "Serialize this object into the given JsonGenerator using the given SerializerProvider.",
        "Serialize this object into the given JSON generator using the given SerializerProvider."
      ],
      "output": [
        "@Override public final void serialize ( SerializerProvider provider, JsonGenerator jsonGenerator ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { provider. serialize ( jsonGenerator ) ; } jsonGenerator. writeEndObject ( ) ; }",
        "@Override public final void serialize ( SerializerProvider provider, JsonGenerator jsonGenerator ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { provider. serialize ( jsonGenerator ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "@Override public final void serialize ( SerializerProvider provider, JsonGenerator jsonGenerator ) throws IOException { if ( provider == null ) { jsonGenerator. writeObject ( this ) ; } else { provider. serialize ( jsonGenerator ) ; } }",
        "@Override public final void serialize ( SerializerProvider provider, JsonGenerator jsonGenerator ) throws IOException { if ( provider == null ) { jsonGenerator. writeObject ( this ) ; } else { provider. serialize ( this, jsonGenerator ) ; } }",
        "@Override public final void serialize ( SerializerProvider provider, JsonGenerator jsonGenerator ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { Serializer. serialize ( provider, jsonGenerator ) ; } }",
        "@Override public final JsonGeneraserializer to ( SerializerProvider provider ) { return new JsonGenerator ( ) { @ Override public void writeStartObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEndObject ( ) ; } @ Override public void writeEnd ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEndObject ( ) ; } } ; }",
        "@Override public final JsonGeneraserializer to ( SerializerProvider provider ) { return new JsonGenerator ( ) { @ Override public void writeStartObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEndObject ( ) ; } @ Override public void writeEndObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEnd ( ) ; } } ; }",
        "@Override public final JsonGeneraserializer to ( SerializerProvider provider ) { return new JsonGenerator ( ) { @ Override public void writeStartObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEndObject ( ) ; } @ Override public void writeEnd ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEnd ( ) ; } } ; }",
        "@Override public final JsonGeneraserializer to ( SerializerProvider provider ) { return new JsonGenerator ( ) { @ Override public void writeStartObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeEndObject ( ) ; } @ Override public void writeEndObject ( ) throws IOException { jgen. writeEndObject ( ) ; } } ; }",
        "@Override public final JsonGeneraserializer to ( SerializerProvider provider ) { return new JsonGenerator ( ) { @ Override public void writeStartObject ( ) throws IOException { JsonGenerator jgen = provider. to ( this ) ; jgen. writeStartObject ( ) ; JsonGenerator jgen = provider. to ( jgen ) ; jgen. writeEndObject ( ) ; } } ; }",
        "@Override public final void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "@Override public final void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "@Override public final void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "@Override public final void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { jsonGenerator. writeStartObject ( ) ; serializeTo ( jsonGenerator, provider ) ; jsonGenerator. writeEndObject ( ) ; }",
        "@Override public final void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"version\", getVersion ( ) ) ; jsonGenerator. writeEndObject ( ) ; }",
        "@Override public final JsonGenerator serialize ( SerializerProvider provider ) throws IOException { JsonGenerator jsonGenerator = provider. createGenerator ( ) ; jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; return jsonGenerator ; }",
        "@Override public final JsonGenerator serialize ( SerializerProvider provider ) throws IOException { JsonGenerator jsonGenerator = provider. createGenerator ( ) ; jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; jsonGenerator. writeEndObject ( ) ; return jsonGenerator ; }",
        "@Override public final JsonGenerator serialize ( SerializerProvider provider ) { JsonGenerator jsonGenerator = provider. createGenerator ( ) ; jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; return jsonGenerator ; }",
        "@Override public final JsonGenerator serialize ( SerializerProvider provider ) throws IOException { JsonGenerator jsonGenerator = provider. createGenerator ( ) ; jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", getName ( ) ) ; jsonGenerator. writeStringField ( \"description\", getDescription ( ) ) ; jsonGenerator. writeEndObject ( ) ; jsonGenerator. writeEndObject ( ) ; return jsonGenerator ; }",
        "@Override public final JsonGenerator serialize ( SerializerProvider provider ) throws IOException { JsonGenerator jsonGenerator = provider. createGenerator ( ) ; jsonGenerator. writeStartObject ( ) ; jsonGenerator. writeStringField ( \"type\", type. getName ( ) ) ; jsonGenerator. writeStringField ( \"name\", name ) ; jsonGenerator. writeStringField ( \"type\", type. getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; return jsonGenerator ; }",
        "@Override public final void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeStringField ( \"type\", provider. getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", provider. getName ( ) ) ; jsonGenerator. writeStringField ( \"type\", provider. getType ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "@Override public final void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeStringField ( \"type\", provider. getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", provider. getName ( ) ) ; jsonGenerator. writeStringField ( \"description\", provider. getDescription ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "@Override public final void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeStringField ( \"type\", provider. getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", provider. getName ( ) ) ; jsonGenerator. writeStringField ( \"version\", provider. getVersion ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "@Override public final void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeStringField ( \"type\", provider. getType ( ) ) ; jsonGenerator. writeStringField ( \"name\", provider. getName ( ) ) ; jsonGenerator. writeEndObject ( ) ; } }",
        "@Override public final void serialize ( JsonGenerator jsonGenerator, SerializerProvider provider ) throws IOException { if ( provider == null ) { jsonGenerator. writeStartObject ( ) ; } else { jsonGenerator. writeStartObject ( ) ; serialize ( jsonGenerator, provider ) ; jsonGenerator. writeEndObject ( ) ; } }"
      ]
    },
    "JacksonDatabind_98_/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java_298-299": {
      "loc": "298-299",
      "input": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) { buffer.assignParameter(typeProp, typeId); } } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; }",
      "target": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) { final Object v; if (typeProp.getType().hasRawClass(String.class)) { v = typeId; } else { TokenBuffer tb = new TokenBuffer(p, ctxt); tb.writeString(typeId); v = typeProp.getValueDeserializer().deserialize(tb.asParserOnFirstToken(), ctxt); tb.close(); } buffer.assignParameter(typeProp, v); } } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; }",
      "function range": "255,5-311,5",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public T toBean ( ) { try { return ( T ) mapper. readValue ( json, this. getClass ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public T toBean ( ) { try { return ( T ) mapper. readValue ( json, type ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public T toBean ( ) { T bean = beanBuilder. build ( ) ; beanBuilder = ( T ) beanBuilder. build ( ) ; return bean ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T toBean ( ) { try { return ( T ) mapper. readValue ( json, type ) ; } catch ( IOException e ) { throw new CitrusRuntimeException ( e ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public T toBean ( ) { T bean = beanBuilder. build ( ) ; beanBuilder = beanBuilder. build ( ) ; return bean ; }",
        "public T deserialize ( ) throws IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( buf ) ; ObjectInputStream ois = new ObjectInputStream ( bais ) ; T obj = ( T ) ois. readObject ( ) ; ois. close ( ) ; return obj ; }",
        "public T deserialize ( ) throws IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( data ) ; ObjectInputStream ois = new ObjectInputStream ( bais ) ; T obj = ( T ) ois. readObject ( ) ; ois. close ( ) ; return obj ; }",
        "public T deserialize ( ) throws IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( data ) ; ObjectInputStream ois = new ObjectInputStream ( bais ) ; Object obj = ois. readObject ( ) ; ois. close ( ) ; return ( T ) obj ; }",
        "public T deserialize ( ) throws IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( buf ) ; ObjectInputStream ois = new ObjectInputStream ( bais ) ; Object obj = ois. readObject ( ) ; ois. close ( ) ; return ( T ) obj ; }",
        "public T deserialize ( ) throws IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( buf ) ; ObjectInputStream ois = new ObjectInputStream ( bais ) ; Object obj = ois. readObject ( ) ; ois. close ( ) ; return obj ; }",
        "private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; if ( this. parsedProperties!= null ) { this. parsedProperties. clear ( ) ; this. parsedProperties. putAll ( this. parsedProperties ) ; } if ( this. parsedProperties!= null ) { this. parsedProperties. putAll ( in ) ; } }",
        "private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; if ( this. parsedProperties == null ) { this. parsedProperties = new Properties ( ) ; } this. parsedProperties. load ( in ) ; this. parsedProperties. putAll ( this. parsedProperties ) ; }",
        "private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; if ( this. parsedProperties!= null ) { this. parsedProperties. putAll ( this. parsedProperties ) ; } if ( this. parsedProperties!= null ) { this. parsedProperties. putAll ( this. parsedProperties ) ; } }",
        "private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; if ( this. parsedProperties == null ) { this. parsedProperties = new HashMap <> ( ) ; } this. parsedProperties. putAll ( this. parsedProperties ) ; this. parsedProperties. clear ( ) ; this. parsedProperties. putAll ( in ) ; }",
        "private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; if ( this. parsedProperties == null ) { this. parsedProperties = new HashMap <> ( ) ; } this. parsedProperties. putAll ( this. parsedProperties ) ; this. parsedProperties. clear ( ) ; }",
        "private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; buffer = ( byte [ ] ) in. read ( buffer, 0, buffer. length ) ; }",
        "private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; buffer = ( byte [ ] ) in. readObject ( ) ; }",
        "private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; buffer = ( byte [ ] ) in. read ( buffer ) ; }",
        "private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; data = ( byte [ ] ) in. readObject ( ) ; length = ( int ) in. readInt ( ) ; }",
        "private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; buffer = ( byte [ ] ) in. readObject ( ) ; bufferLength = buffer. length ; }",
        "private void readObject ( final ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; final int size = in. readInt ( ) ; for ( int i = 0 ; i < size ; i ++ ) { data [ i ] = in. readObject ( ) ; } }",
        "private void readObject ( final ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; final int size = in. readInt ( ) ; for ( int i = 0 ; i < size ; i ++ ) { put ( ( String ) in. readObject ( ) ) ; } }",
        "private void readObject ( final ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; final int size = in. readInt ( ) ; for ( int i = 0 ; i < size ; i ++ ) { final Object value = in. readObject ( ) ; if ( value == null ) { throw new IllegalArgumentException ( \"null value\" ) ; } out. write ( value. toString ( ) ) ; } }",
        "private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; name = in. readObject ( ) ; value = in. readObject ( ) ; }",
        "private void readObject ( final ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; final int size = in. readInt ( ) ; for ( int i = 0 ; i < size ; i ++ ) { final Object value = in. readObject ( ) ; if ( value == null ) { throw new IllegalArgumentException ( \"null value\" ) ; } if ( value instanceof String ) { ( ( String ) value ). trim ( ) ; } } }"
      ],
      "mid_translation": [
        "Deserialize the contents of this builder into a bean.",
        "Deserialize the contents of this builder into an object.",
        "Called to complete the parsing of the bean.",
        "Deserialize the contents of this builder into the buffer.",
        "Deserialize this bean into the given buffer."
      ],
      "output": [
        "public T complete ( ) { try { return ( T ) mapper. readValue ( json, this. getClass ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "public T complete ( ) { try { return ( T ) mapper. readValue ( json, type ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }",
        "public T complete ( ) { T bean = beanBuilder. build ( ) ; beanBuilder = ( T ) beanBuilder. build ( ) ; return bean ; }",
        "public T complete ( ) { try { return ( T ) mapper. readValue ( json, type ) ; } catch ( IOException e ) { throw new CitrusRuntimeException ( e ) ; } }",
        "public T complete ( ) { T bean = beanBuilder. build ( ) ; beanBuilder = beanBuilder. build ( ) ; return bean ; }",
        "public T complete ( ) throws IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( buf ) ; ObjectInputStream ois = new ObjectInputStream ( bais ) ; T obj = ( T ) ois. readObject ( ) ; ois. close ( ) ; return obj ; }",
        "public T complete ( ) throws IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( data ) ; ObjectInputStream ois = new ObjectInputStream ( bais ) ; T obj = ( T ) ois. readObject ( ) ; ois. close ( ) ; return obj ; }",
        "public T complete ( ) throws IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( data ) ; ObjectInputStream ois = new ObjectInputStream ( bais ) ; Object obj = ois. readObject ( ) ; ois. close ( ) ; return ( T ) obj ; }",
        "public T complete ( ) throws IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( buf ) ; ObjectInputStream ois = new ObjectInputStream ( bais ) ; Object obj = ois. readObject ( ) ; ois. close ( ) ; return ( T ) obj ; }",
        "public T complete ( ) throws IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( buf ) ; ObjectInputStream ois = new ObjectInputStream ( bais ) ; Object obj = ois. readObject ( ) ; ois. close ( ) ; return obj ; }",
        "public void complete ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; if ( this. parsedProperties!= null ) { this. parsedProperties. clear ( ) ; this. parsedProperties. putAll ( this. parsedProperties ) ; } if ( this. parsedProperties!= null ) { this. parsedProperties. putAll ( in ) ; } }",
        "public void complete ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; if ( this. parsedProperties == null ) { this. parsedProperties = new Properties ( ) ; } this. parsedProperties. load ( in ) ; this. parsedProperties. putAll ( this. parsedProperties ) ; }",
        "public void complete ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; if ( this. parsedProperties!= null ) { this. parsedProperties. putAll ( this. parsedProperties ) ; } if ( this. parsedProperties!= null ) { this. parsedProperties. putAll ( this. parsedProperties ) ; } }",
        "public void complete ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; if ( this. parsedProperties == null ) { this. parsedProperties = new HashMap <> ( ) ; } this. parsedProperties. putAll ( this. parsedProperties ) ; this. parsedProperties. clear ( ) ; this. parsedProperties. putAll ( in ) ; }",
        "public void complete ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; if ( this. parsedProperties == null ) { this. parsedProperties = new HashMap <> ( ) ; } this. parsedProperties. putAll ( this. parsedProperties ) ; this. parsedProperties. clear ( ) ; }",
        "public void complete ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; buffer = ( byte [ ] ) in. read ( buffer, 0, buffer. length ) ; }",
        "public void complete ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; buffer = ( byte [ ] ) in. readObject ( ) ; }",
        "public void complete ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; buffer = ( byte [ ] ) in. read ( buffer ) ; }",
        "public void complete ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; data = ( byte [ ] ) in. readObject ( ) ; length = ( int ) in. readInt ( ) ; }",
        "public void complete ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; buffer = ( byte [ ] ) in. readObject ( ) ; bufferLength = buffer. length ; }",
        "public void complete ( final ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; final int size = in. readInt ( ) ; for ( int i = 0 ; i < size ; i ++ ) { data [ i ] = in. readObject ( ) ; } }",
        "public void complete ( final ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; final int size = in. readInt ( ) ; for ( int i = 0 ; i < size ; i ++ ) { put ( ( String ) in. readObject ( ) ) ; } }",
        "public void complete ( final ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; final int size = in. readInt ( ) ; for ( int i = 0 ; i < size ; i ++ ) { final Object value = in. readObject ( ) ; if ( value == null ) { throw new IllegalArgumentException ( \"null value\" ) ; } out. write ( value. toString ( ) ) ; } }",
        "public void complete ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; name = in. readObject ( ) ; value = in. readObject ( ) ; }",
        "public void complete ( final ObjectInputStream in ) throws IOException, ClassNotFoundException { in. defaultReadObject ( ) ; final int size = in. readInt ( ) ; for ( int i = 0 ; i < size ; i ++ ) { final Object value = in. readObject ( ) ; if ( value == null ) { throw new IllegalArgumentException ( \"null value\" ) ; } if ( value instanceof String ) { ( ( String ) value ). trim ( ) ; } } }"
      ]
    },
    "JacksonDatabind_102_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_67-70": {
      "loc": "67-70",
      "input": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property == null) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !hasTZ && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportBadDefinition(handledType(), String.format( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\", df0.getClass().getName())); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }",
      "target": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !hasTZ && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportBadDefinition(handledType(), String.format( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\", df0.getClass().getName())); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }",
      "function range": "61,5-136,5",
      "raw_output": [
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } return new ContextualSerializer < T > ( property ) ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { } ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class <? > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "public static < T > ContextualSerializer < T > forProperty ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class < T > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > TypeSerializer < T > getSerializer ( Class < T > propertyType ) { TypeSerializer < T > serializer = serializerCache. get ( propertyType ) ; if ( serializer == null ) { serializer = createSerializer ( propertyType ) ; serializerCache. put ( propertyType, serializer ) ; } return serializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > TypeSerializer < T > getSerializer ( Class < T > propertyType ) { TypeSerializer < T > serializer = serializerCache. get ( propertyType ) ; if ( serializer == null ) { serializer = new TypeSerializer < T > ( propertyType ) ; serializerCache. put ( propertyType, serializer ) ; } return serializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > TypeSerializer < T > getSerializer ( Class < T > type ) { TypeSerializer < T > serializer = serializerCache. get ( type ) ; if ( serializer == null ) { serializer = createSerializer ( type ) ; serializerCache. put ( type, serializer ) ; } return serializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > TypeSerializer < T > getSerializer ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerMap. get ( type ) ; if ( serializer == null ) { serializer = new TypeSerializer < T > ( type ) ; typeSerializerMap. put ( type, serializer ) ; } return serializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > TypeSerializer < T > getSerializer ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerCache. get ( type ) ; if ( serializer == null ) { serializer = new TypeSerializer < T > ( type ) ; typeSerializerCache. put ( type, serializer ) ; } return serializer ; }",
        "public JsonSerializer forProperty ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( this. properties == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } this. properties. put ( propertyName, this ) ; return this ; }",
        "public JsonSerializer forProperty ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( this. properties == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } return this. properties. get ( propertyName ) ; }",
        "public JsonSerializer forProperty ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName must not be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName must not be empty\" ) ; } if ( this. properties == null ) { this. properties = new HashMap < String, JsonSerializer > ( ) ; } return this ; }",
        "public JsonSerializer forProperty ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName must not be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName must not be empty\" ) ; } if ( this. properties. get ( propertyName ) == null ) { throw new IllegalArgumentException ( \"propertyName must not be null\" ) ; } return this ; }",
        "public JsonSerializer forProperty ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName must not be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName must not be empty\" ) ; } if ( this. properties. get ( propertyName ) == null ) { throw new IllegalArgumentException ( \"propertyName must not be empty\" ) ; } return this ; }",
        "public TypeSerializer forProperty ( Property property ) { TypeSerializer serializer = serializerCache. get ( property ) ; if ( serializer == null ) { serializer = create ( property ) ; serializerCache. put ( property, serializer ) ; } return serializer ; }",
        "public TypeSerializer forProperty ( Property property ) { TypeSerializer serializer = serializerCache. get ( property ) ; if ( serializer == null ) { serializer = createContextualSerializer ( property ) ; serializerCache. put ( property, serializer ) ; } return serializer ; }",
        "public TypeSerializer forProperty ( Property property ) { TypeSerializer serializer = serializerCache. get ( property ) ; if ( serializer!= null ) { return serializer ; } serializer = serializerCache. get ( property ) ; if ( serializer == null ) { serializer = create ( property ) ; serializerCache. put ( property, serializer ) ; } return serializer ; }",
        "public TypeSerializer forProperty ( Property property ) { TypeSerializer serializer = serializerCache. get ( property ) ; if ( serializer == null ) { serializer = new TypeSerializer ( property ) ; serializerCache. put ( property, serializer ) ; } return serializer ; }",
        "public TypeSerializer forProperty ( Property property ) { TypeSerializer serializer = serializerCache. get ( property ) ; if ( serializer!= null ) { return serializer ; } serializer = createContextualSerializer ( property ) ; serializerCache. put ( property, serializer ) ; return serializer ; }",
        "public JsonSerializer forProperty ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName cannot be empty\" ) ; } if ( propertyName. charAt ( 0 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' ; return this ; }",
        "public JsonSerializer forProperty ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName cannot be empty\" ) ; } if ( propertyName. charAt ( 0 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' ; return new JsonSerializer ( propertyName ) ; }",
        "public JsonSerializer forProperty ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName cannot be empty\" ) ; } if ( propertyName. charAt ( 0 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' ; return this ; }",
        "public JsonSerializer forProperty ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName cannot be empty\" ) ; } if ( propertyName. charAt ( 0 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' ; return new JsonSerializer ( propertyName, this ) ; }",
        "public JsonSerializer forProperty ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName cannot be empty\" ) ; } if ( propertyName. charAt ( 0 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' ; return new JsonSerializer ( propertyName ) ; }"
      ],
      "mid_translation": [
        "Creates a contextual serializer for the given bean property.",
        "Creates a contextual representation of this serializer for the given property.",
        "Creates a contextual version of this serializer for a bean property.",
        "Creates a contextual version of this serializer for the given bean property",
        "Creates a contextual representation of this serializer for a bean property."
      ],
      "output": [
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { if ( property == null ) { throw new IllegalArgumentException ( \"Property cannot be null\" ) ; } return new ContextualSerializer < T > ( property ) ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { } ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class <? > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "@Override public < T > ContextualSerializer < T > createContextual ( BeanProperty < T > property ) { return new ContextualSerializer < T > ( property ) { @ Override public Class < T > getType ( ) { return property. getPropertyType ( ) ; } } ; }",
        "@Override public < T > TypeSerializer < T > createContextual ( Class < T > propertyType ) { TypeSerializer < T > serializer = serializerCache. get ( propertyType ) ; if ( serializer == null ) { serializer = createSerializer ( propertyType ) ; serializerCache. put ( propertyType, serializer ) ; } return serializer ; }",
        "@Override public < T > TypeSerializer < T > createContextual ( Class < T > propertyType ) { TypeSerializer < T > serializer = serializerCache. get ( propertyType ) ; if ( serializer == null ) { serializer = new TypeSerializer < T > ( propertyType ) ; serializerCache. put ( propertyType, serializer ) ; } return serializer ; }",
        "@Override public < T > TypeSerializer < T > createContextual ( Class < T > type ) { TypeSerializer < T > serializer = serializerCache. get ( type ) ; if ( serializer == null ) { serializer = createSerializer ( type ) ; serializerCache. put ( type, serializer ) ; } return serializer ; }",
        "@Override public < T > TypeSerializer < T > createContextual ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerMap. get ( type ) ; if ( serializer == null ) { serializer = new TypeSerializer < T > ( type ) ; typeSerializerMap. put ( type, serializer ) ; } return serializer ; }",
        "@Override public < T > TypeSerializer < T > createContextual ( Class < T > type ) { TypeSerializer < T > serializer = typeSerializerCache. get ( type ) ; if ( serializer == null ) { serializer = new TypeSerializer < T > ( type ) ; typeSerializerCache. put ( type, serializer ) ; } return serializer ; }",
        "@Override public JsonSerializer createContextual ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( this. properties == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } this. properties. put ( propertyName, this ) ; return this ; }",
        "@Override public JsonSerializer createContextual ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( this. properties == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } return this. properties. get ( propertyName ) ; }",
        "@Override public JsonSerializer createContextual ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName must not be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName must not be empty\" ) ; } if ( this. properties == null ) { this. properties = new HashMap < String, JsonSerializer > ( ) ; } return this ; }",
        "@Override public JsonSerializer createContextual ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName must not be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName must not be empty\" ) ; } if ( this. properties. get ( propertyName ) == null ) { throw new IllegalArgumentException ( \"propertyName must not be null\" ) ; } return this ; }",
        "@Override public JsonSerializer createContextual ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName must not be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName must not be empty\" ) ; } if ( this. properties. get ( propertyName ) == null ) { throw new IllegalArgumentException ( \"propertyName must not be empty\" ) ; } return this ; }",
        "@Override public TypeSerializer createContextual ( Property property ) { TypeSerializer serializer = serializerCache. get ( property ) ; if ( serializer == null ) { serializer = create ( property ) ; serializerCache. put ( property, serializer ) ; } return serializer ; }",
        "@Override public TypeSerializer createContextual ( Property property ) { TypeSerializer serializer = serializerCache. get ( property ) ; if ( serializer == null ) { serializer = createContextualSerializer ( property ) ; serializerCache. put ( property, serializer ) ; } return serializer ; }",
        "@Override public TypeSerializer createContextual ( Property property ) { TypeSerializer serializer = serializerCache. get ( property ) ; if ( serializer!= null ) { return serializer ; } serializer = serializerCache. get ( property ) ; if ( serializer == null ) { serializer = create ( property ) ; serializerCache. put ( property, serializer ) ; } return serializer ; }",
        "@Override public TypeSerializer createContextual ( Property property ) { TypeSerializer serializer = serializerCache. get ( property ) ; if ( serializer == null ) { serializer = new TypeSerializer ( property ) ; serializerCache. put ( property, serializer ) ; } return serializer ; }",
        "@Override public TypeSerializer createContextual ( Property property ) { TypeSerializer serializer = serializerCache. get ( property ) ; if ( serializer!= null ) { return serializer ; } serializer = createContextualSerializer ( property ) ; serializerCache. put ( property, serializer ) ; return serializer ; }",
        "@Override public JsonSerializer createContextual ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName cannot be empty\" ) ; } if ( propertyName. charAt ( 0 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' ; return this ; }",
        "@Override public JsonSerializer createContextual ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName cannot be empty\" ) ; } if ( propertyName. charAt ( 0 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' ; return new JsonSerializer ( propertyName ) ; }",
        "@Override public JsonSerializer createContextual ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName cannot be empty\" ) ; } if ( propertyName. charAt ( 0 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' ; return this ; }",
        "@Override public JsonSerializer createContextual ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName cannot be empty\" ) ; } if ( propertyName. charAt ( 0 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' ; return new JsonSerializer ( propertyName, this ) ; }",
        "@Override public JsonSerializer createContextual ( String propertyName ) { if ( propertyName == null ) { throw new IllegalArgumentException ( \"propertyName cannot be null\" ) ; } if ( propertyName. length ( ) == 0 ) { throw new IllegalArgumentException ( \"propertyName cannot be empty\" ) ; } if ( propertyName. charAt ( 0 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' && propertyName. charAt ( propertyName. length ( ) - 1 )!='' ; return new JsonSerializer ( propertyName ) ; }"
      ]
    },
    "JacksonDatabind_107_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java_165-166": {
      "loc": "165-166",
      "input": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) { return null; } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType != null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; }",
      "target": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) { return NullifyingDeserializer.instance; } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType != null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; }",
      "function range": "146,5-199,5",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer < T > deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer < T > ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer < T > ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return ( Deserializer < T > ) deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer!= null ) { _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer < T > deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = ( Deserializer < T > ) Class. forName ( type. getName ( ) ). newInstance ( ) ; _DeserializerMap. put ( type, deserializer ) ; } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer < T > deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer < T > ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } throw new IllegalArgumentException ( \"No deserializer for \" + type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer < T > ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = createDeserializer ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer < T > ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer!= null ) { _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { Deserializer < T > deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = ( Deserializer < T > ) _DeserializerMap. get ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } return deserializer ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). isAssignableFrom ( type ) ) { return deserializer ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > Deserializer < T > getDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getClass ( ). equals ( type ) ) { return deserializer ; } } return null ; }"
      ],
      "mid_translation": [
        "Finds the deserializer for the given type id.",
        "Find the deserializer for the given type id.",
        "Finds a deserializer for the given type id.",
        "Finds a deserializer for a given type id.",
        "Find a deserializer for the given type id."
      ],
      "output": [
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer < T > deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer < T > ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer < T > ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return ( Deserializer < T > ) deserializer ; } } return null ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer!= null ) { _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer < T > deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = ( Deserializer < T > ) Class. forName ( type. getName ( ) ). newInstance ( ) ; _DeserializerMap. put ( type, deserializer ) ; } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer < T > deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer < T > ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } throw new IllegalArgumentException ( \"No deserializer for \" + type ) ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer < T > ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = createDeserializer ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer < T > ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = new Deserializer ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = _DeserializerMap. get ( type ) ; if ( deserializer!= null ) { _DeserializerMap. put ( type, deserializer ) ; } } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). equals ( type ) ) { return deserializer ; } } return null ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { Deserializer < T > deserializer = _DeserializerMap. get ( type ) ; if ( deserializer == null ) { deserializer = ( Deserializer < T > ) _DeserializerMap. get ( type ) ; _DeserializerMap. put ( type, deserializer ) ; } return deserializer ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getType ( ). isAssignableFrom ( type ) ) { return deserializer ; } } return null ; }",
        "protected final < T > Deserializer < T > _findDeserializer ( Class < T > type ) { for ( Deserializer deserializer : deserializers ) { if ( deserializer. getClass ( ). equals ( type ) ) { return deserializer ; } } return null ; }"
      ]
    },
    "JacksonXml_5_/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java_59-60": {
      "loc": "59-60",
      "input": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src); _rootNameLookup = src._rootNameLookup; }",
      "target": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src); _rootNameLookup = new XmlRootNameLookup(); }",
      "function range": "55,5-60,5",
      "raw_output": [
        "@ SuppressWarnings ( \"rawtypes\" ) public void configure ( SerializerProvider provider ) { if ( provider == null ) { throw new IllegalArgumentException ( \"Provider must not be null\" ) ; } if ( provider. getRootName ( ) == null ) { throw new IllegalArgumentException ( \"Provider root name must not be null\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider root name must not be empty\" ) ; } if ( provider. getRootName ( ). length ( ) > 0 ) { provider. setRootName ( provider. getRootName ( ) ) ; } }",
        "@ SuppressWarnings ( \"rawtypes\" ) public void configure ( SerializerProvider provider ) { if ( provider == null ) { throw new IllegalArgumentException ( \"Provider cannot be null\" ) ; } if ( provider. getRootName ( ) == null ) { throw new IllegalArgumentException ( \"Provider root name cannot be null\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider root name cannot be empty\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider root name cannot be empty\" ) ; } }",
        "@ SuppressWarnings ( \"rawtypes\" ) public void configure ( SerializerProvider provider ) { if ( provider == null ) { throw new IllegalArgumentException ( \"Provider must not be null\" ) ; } if ( provider. getRootName ( ) == null ) { throw new IllegalArgumentException ( \"Provider root name must not be null\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider root name must not be empty\" ) ; } if (! provider. getRootName ( ). equals ( rootName ) ) { provider. setRootName ( rootName ) ; } }",
        "@ SuppressWarnings ( \"rawtypes\" ) public void configure ( SerializerProvider provider ) { if ( provider == null ) { throw new IllegalArgumentException ( \"Provider must not be null\" ) ; } if ( provider. getRootName ( ) == null ) { throw new IllegalArgumentException ( \"Provider root name must not be null\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider root name must not be empty\" ) ; } }",
        "@ SuppressWarnings ( \"rawtypes\" ) public void configure ( SerializerProvider provider ) { if ( provider == null ) { throw new IllegalArgumentException ( \"Provider must not be null\" ) ; } if ( provider. getRootName ( ) == null ) { throw new IllegalArgumentException ( \"Provider rootName must not be null\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider rootName must not be empty\" ) ; } }",
        "public void configure ( Object source ) { configure ( source. getClass ( ). getName ( ) ) ; configure ( source. getClass ( ). getName ( ) ) ; configure ( source. getClass ( ). getName ( ) ) ; }",
        "public void configure ( Object source ) { configure ( source. getClass ( ). getName ( ), source ) ; configureRootName ( source. getClass ( ). getName ( ) ) ; }",
        "public void configure ( Object source ) { configure ( source. getClass ( ). getName ( ), source ) ; configureRoot ( source. getClass ( ). getName ( ) ) ; }",
        "@ SuppressWarnings ( \"rawtypes\" ) public static SerializerProvider configure ( Object source ) { if ( source == null ) { throw new IllegalArgumentException ( \"Source cannot be null\" ) ; } return configure ( source. getClass ( ) ) ; }",
        "@ SuppressWarnings ( \"rawtypes\" ) public static SerializerProvider configure ( Object source ) { if ( source == null ) { throw new IllegalArgumentException ( \"source cannot be null\" ) ; } return configure ( source. getClass ( ) ) ; }",
        "public static SerializerProvider configure ( Source source ) { SerializerProvider provider = new SerializerProvider ( ) ; provider. configure ( source ) ; return provider ; }",
        "public static SerializerProvider configure ( Source source ) { SerializerProvider provider = new SerializerProvider ( ) ; provider. configure ( source ) ; provider. configure ( ) ; return provider ; }",
        "public static SerializerProvider configure ( Source source ) { if ( source == null ) { throw new IllegalArgumentException ( \"source cannot be null\" ) ; } return configure ( source. root ( ) ) ; }",
        "public static SerializerProvider configure ( Source source ) { if ( source == null ) throw new IllegalArgumentException ( \"source cannot be null\" ) ; return configure ( source. root ( ) ) ; }",
        "public static SerializerProvider configure ( Source source ) { if ( source == null ) { throw new IllegalArgumentException ( \"source cannot be null\" ) ; } return configure ( source. getLocation ( ) ) ; }",
        "@ Override public String lookupRoot ( ) { if ( super. lookupRoot ( ) ) return super. lookupRoot ( ) ; if ( super. lookupRoot ( ) ) return super. lookupRoot ( ) ; return super. lookupRoot ( ) ; }",
        "@ Override public String lookupRoot ( ) { if ( super. lookupRoot ( ) ) return super. lookupRoot ( ) ; return super. lookupRoot ( )? super. lookupRoot ( ) : super. lookupRoot ( ) ; }",
        "@ Override public String lookupRoot ( ) { if ( super. lookupRoot ( ) ) return super. lookupRoot ( )? super. lookupRoot ( ) : super. lookupRoot ( ) ; return super. lookupRoot ( ) ; }",
        "@ Override public String lookupRoot ( ) { String result = super. lookupRoot ( ) ; if ( result == null ) result = super. lookupRoot ( ) ; if ( result == null ) result = super. lookupRoot ( ) ; return result ; }",
        "@ Override public String lookupRoot ( ) { if ( super. lookupRoot ( ) ) return super. lookupRoot ( ) ; if ( super. lookupRoot ( ) ) return super. lookupRoot ( ) ; else return super. lookupRoot ( ) ; }",
        "@ Override public void setRootName ( String name ) { super. setRootName ( name ) ; if ( name == null ) { rootName = null ; } else { rootName = name ; } }",
        "@ Override public void setRootName ( String name ) { super. setRootName ( name ) ; if ( name. startsWith ( \"/\" ) ) { rootName = name. substring ( 1 ) ; } }",
        "@ Override public void setRootName ( String name ) { super. setRootName ( name ) ; if ( name!= null ) { rootName = name ; } }",
        "@ Override public void setRootName ( String rootName ) { super. setRootName ( rootName ) ; m_rootName = rootName ; }",
        "@ Override public void setRootName ( String name ) { super. setRootName ( name ) ; if ( name!= null ) { rootName = name ; } else { rootName = null ; } }"
      ],
      "mid_translation": [
        "Configures the serializer provider with the root name lookup from the source.",
        "Configures the serializer provider with the root name lookup from the source object.",
        "Configures the serializer provider with the root name lookup from the given source.",
        "Override this method to change the root name lookup.",
        "Overrides the superclass method to set the root name lookup."
      ],
      "output": [
        "protected void XmlSerializerProvider ( SerializerProvider provider ) { if ( provider == null ) { throw new IllegalArgumentException ( \"Provider must not be null\" ) ; } if ( provider. getRootName ( ) == null ) { throw new IllegalArgumentException ( \"Provider root name must not be null\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider root name must not be empty\" ) ; } if ( provider. getRootName ( ). length ( ) > 0 ) { provider. setRootName ( provider. getRootName ( ) ) ; } }",
        "protected void XmlSerializerProvider ( SerializerProvider provider ) { if ( provider == null ) { throw new IllegalArgumentException ( \"Provider cannot be null\" ) ; } if ( provider. getRootName ( ) == null ) { throw new IllegalArgumentException ( \"Provider root name cannot be null\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider root name cannot be empty\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider root name cannot be empty\" ) ; } }",
        "protected void XmlSerializerProvider ( SerializerProvider provider ) { if ( provider == null ) { throw new IllegalArgumentException ( \"Provider must not be null\" ) ; } if ( provider. getRootName ( ) == null ) { throw new IllegalArgumentException ( \"Provider root name must not be null\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider root name must not be empty\" ) ; } if (! provider. getRootName ( ). equals ( rootName ) ) { provider. setRootName ( rootName ) ; } }",
        "protected void XmlSerializerProvider ( SerializerProvider provider ) { if ( provider == null ) { throw new IllegalArgumentException ( \"Provider must not be null\" ) ; } if ( provider. getRootName ( ) == null ) { throw new IllegalArgumentException ( \"Provider root name must not be null\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider root name must not be empty\" ) ; } }",
        "protected void XmlSerializerProvider ( SerializerProvider provider ) { if ( provider == null ) { throw new IllegalArgumentException ( \"Provider must not be null\" ) ; } if ( provider. getRootName ( ) == null ) { throw new IllegalArgumentException ( \"Provider rootName must not be null\" ) ; } if ( provider. getRootName ( ). length ( ) == 0 ) { throw new IllegalArgumentException ( \"Provider rootName must not be empty\" ) ; } }",
        "protected void XmlSerializerProvider ( Object source ) { configure ( source. getClass ( ). getName ( ) ) ; configure ( source. getClass ( ). getName ( ) ) ; configure ( source. getClass ( ). getName ( ) ) ; }",
        "protected void XmlSerializerProvider ( Object source ) { configure ( source. getClass ( ). getName ( ), source ) ; configureRootName ( source. getClass ( ). getName ( ) ) ; }",
        "protected void XmlSerializerProvider ( Object source ) { configure ( source. getClass ( ). getName ( ), source ) ; configureRoot ( source. getClass ( ). getName ( ) ) ; }",
        "protected SerializerProvider XmlSerializerProvider ( Object source ) { if ( source == null ) { throw new IllegalArgumentException ( \"Source cannot be null\" ) ; } return configure ( source. getClass ( ) ) ; }",
        "protected SerializerProvider XmlSerializerProvider ( Object source ) { if ( source == null ) { throw new IllegalArgumentException ( \"source cannot be null\" ) ; } return configure ( source. getClass ( ) ) ; }",
        "protected SerializerProvider XmlSerializerProvider ( Source source ) { SerializerProvider provider = new SerializerProvider ( ) ; provider. configure ( source ) ; return provider ; }",
        "protected SerializerProvider XmlSerializerProvider ( Source source ) { SerializerProvider provider = new SerializerProvider ( ) ; provider. configure ( source ) ; provider. configure ( ) ; return provider ; }",
        "protected SerializerProvider XmlSerializerProvider ( Source source ) { if ( source == null ) { throw new IllegalArgumentException ( \"source cannot be null\" ) ; } return configure ( source. root ( ) ) ; }",
        "protected SerializerProvider XmlSerializerProvider ( Source source ) { if ( source == null ) throw new IllegalArgumentException ( \"source cannot be null\" ) ; return configure ( source. root ( ) ) ; }",
        "protected SerializerProvider XmlSerializerProvider ( Source source ) { if ( source == null ) { throw new IllegalArgumentException ( \"source cannot be null\" ) ; } return configure ( source. getLocation ( ) ) ; }",
        "protected String XmlSerializerProvider ( ) { if ( super. lookupRoot ( ) ) return super. lookupRoot ( ) ; if ( super. lookupRoot ( ) ) return super. lookupRoot ( ) ; return super. lookupRoot ( ) ; }",
        "protected String XmlSerializerProvider ( ) { if ( super. lookupRoot ( ) ) return super. lookupRoot ( ) ; return super. lookupRoot ( )? super. lookupRoot ( ) : super. lookupRoot ( ) ; }",
        "protected String XmlSerializerProvider ( ) { if ( super. lookupRoot ( ) ) return super. lookupRoot ( )? super. lookupRoot ( ) : super. lookupRoot ( ) ; return super. lookupRoot ( ) ; }",
        "protected String XmlSerializerProvider ( ) { String result = super. lookupRoot ( ) ; if ( result == null ) result = super. lookupRoot ( ) ; if ( result == null ) result = super. lookupRoot ( ) ; return result ; }",
        "protected String XmlSerializerProvider ( ) { if ( super. lookupRoot ( ) ) return super. lookupRoot ( ) ; if ( super. lookupRoot ( ) ) return super. lookupRoot ( ) ; else return super. lookupRoot ( ) ; }",
        "protected void XmlSerializerProvider ( String name ) { super. setRootName ( name ) ; if ( name == null ) { rootName = null ; } else { rootName = name ; } }",
        "protected void XmlSerializerProvider ( String name ) { super. setRootName ( name ) ; if ( name. startsWith ( \"/\" ) ) { rootName = name. substring ( 1 ) ; } }",
        "protected void XmlSerializerProvider ( String name ) { super. setRootName ( name ) ; if ( name!= null ) { rootName = name ; } }",
        "protected void XmlSerializerProvider ( String rootName ) { super. setRootName ( rootName ) ; m_rootName = rootName ; }",
        "protected void XmlSerializerProvider ( String name ) { super. setRootName ( name ) ; if ( name!= null ) { rootName = name ; } else { rootName = null ; } }"
      ]
    },
    "Jsoup_1_/src/main/java/org/jsoup/nodes/Document.java_125-127": {
      "loc": "125-127",
      "input": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node); body().appendChild(new TextNode(\" \", \"\")); body().appendChild(node); } }",
      "target": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node); body().prependChild(node); body().prependChild(new TextNode(\" \", \"\")); } }",
      "function range": "113,5-128,5",
      "raw_output": [
        "public static void removeBody ( Node body ) { if ( body == null ) { return ; } Node node = body. getFirstChild ( ) ; while ( node!= null ) { removeBody ( node ) ; node = node. getNextSibling ( ) ; } }",
        "public static void removeBody ( Node body ) { if ( body == null ) { return ; } Node node = body. getFirstChild ( ) ; while ( node!= null ) { removeBody ( node ) ; node = node. getNext ( ) ; } }",
        "private void removeBody ( Node node ) { if ( node. getNodeType ( ) == Node. TEXT_NODE ) { node. getParentNode ( ). removeChild ( node ) ; } }",
        "public void removeBody ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } }",
        "private void removeBody ( Node node ) { if ( node. getNodeType ( ) == Node. TEXT_NODE ) { ( ( Text ) node ). removeChild ( node ) ; } }",
        "public void clearBody ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } }",
        "public void clear ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } }",
        "public void clearBody ( ) { for ( int i = 0 ; i < body. size ( ) ; i ++ ) { body. get ( i ). clearBody ( ) ; } }",
        "public void clearBody ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } body = null ; }",
        "private void removeBody ( Node node ) { if ( node. getNodeType ( ) == Node. TEXT_NODE ) { node. getParentNode ( ). removeChild ( node ) ; } }",
        "public void setBody ( Node body ) { if ( body == null ) { throw new IllegalArgumentException ( \"null body\" ) ; } this. body = body ; if ( body. getNodeType ( ) == Node. ELEMENT_NODE ) { this. body = ( Element ) body ; } else if ( body. getNodeType ( ) == Node. TEXT_NODE ) { this. body = ( Text ) body ; } else if ( body. getNodeType ( ) == Node. CDATA_SECTION_NODE ) { this. body = ( Text ) body ; } else if ( body. getNodeType ( ) == Node. COMMENT_NODE ) { this. body = ( Text ) body ; } else if ( body. getNodeType ( ) == Node. COMMENT_NODE ) { this. body = ( Text ) body ; } }",
        "public void setBody ( Node body ) { if ( body == null ) { throw new IllegalArgumentException ( \"body cannot be null\" ) ; } this. body = body ; if ( body. getNodeType ( ) == Node. ELEMENT_NODE ) { this. body = ( Element ) body ; } else if ( body. getNodeType ( ) == Node. TEXT_NODE ) { this. body = ( Text ) body ; } }",
        "public void setBody ( Node body ) { if ( body == null ) { throw new IllegalArgumentException ( \"null body\" ) ; } this. body = body ; if ( body. getNodeType ( ) == Node. ELEMENT_NODE ) { this. body = ( Element ) body ; } else if ( body. getNodeType ( ) == Node. TEXT_NODE ) { this. body = ( Text ) body ; } }",
        "public void setBody ( Node body ) { if ( body == null ) { throw new IllegalArgumentException ( \"Null body\" ) ; } this. body = body ; if ( body. getNodeType ( ) == Node. ELEMENT_NODE ) { this. body = ( Element ) body ; } else if ( body. getNodeType ( ) == Node. TEXT_NODE ) { this. body = ( Text ) body ; } }",
        "public void setBody ( Node body ) { if ( body == null ) { throw new IllegalArgumentException ( \"body cannot be null\" ) ; } this. body = body ; if ( body. getNodeType ( ) == Node. ELEMENT_NODE ) { this. body = ( Element ) body ; } }",
        "public void clearBody ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } }",
        "public void removeBody ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } }",
        "public void clearBody ( ) { for ( int i = 0 ; i < mBody. length ; i ++ ) { mBody [ i ] = null ; } }",
        "public void clearBody ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } body = null ; }",
        "public void removeBody ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } body = null ; }",
        "private void moveTextNodesToBody ( List < Node > nodes ) { for ( int i = 0 ; i < nodes. size ( ) ; i ++ ) { Node node = nodes. get ( i ) ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) { nodes. remove ( i ) ; } else if ( node. getNodeType ( ) == Node. COMMENT_NODE ) { nodes. remove ( i ) ; } } }",
        "private void moveTextNodesToBody ( List < Node > nodes ) { for ( int i = 0 ; i < nodes. size ( ) ; i ++ ) { Node node = nodes. get ( i ) ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) { nodes. remove ( i ) ; } else if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { nodes. remove ( i ) ; } } }",
        "private void moveTextNodesToBody ( List < Node > nodes ) { for ( int i = 0 ; i < nodes. size ( ) ; i ++ ) { Node node = nodes. get ( i ) ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) { nodes. set ( i, node. getNodeValue ( ) ) ; } else { nodes. set ( i, node. getNodeValue ( ) ) ; } } }",
        "private void moveTextNodesToBody ( List < Node > nodes ) { for ( int i = 0 ; i < nodes. size ( ) ; i ++ ) { Node node = nodes. get ( i ) ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) { nodes. set ( i, node. getNodeValue ( ) ) ; } } }",
        "private void moveTextNodesToBody ( List < Node > nodes ) { for ( int i = 0 ; i < nodes. size ( ) ; i ++ ) { Node node = nodes. get ( i ) ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) { nodes. remove ( i ) ; } } }"
      ],
      "mid_translation": [
        "Remove text nodes from body.",
        "Removes text nodes from body.",
        "Normalise body node.",
        "Remove text nodes from the body.",
        "Moves text nodes to body."
      ],
      "output": [
        "private void normalise ( Node body ) { if ( body == null ) { return ; } Node node = body. getFirstChild ( ) ; while ( node!= null ) { removeBody ( node ) ; node = node. getNextSibling ( ) ; } }",
        "private void normalise ( Node body ) { if ( body == null ) { return ; } Node node = body. getFirstChild ( ) ; while ( node!= null ) { removeBody ( node ) ; node = node. getNext ( ) ; } }",
        "private void normalise ( Node node ) { if ( node. getNodeType ( ) == Node. TEXT_NODE ) { node. getParentNode ( ). removeChild ( node ) ; } }",
        "private void normalise ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } }",
        "private void normalise ( Node node ) { if ( node. getNodeType ( ) == Node. TEXT_NODE ) { ( ( Text ) node ). removeChild ( node ) ; } }",
        "private void normalise ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } }",
        "private void normalise ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } }",
        "private void normalise ( ) { for ( int i = 0 ; i < body. size ( ) ; i ++ ) { body. get ( i ). clearBody ( ) ; } }",
        "private void normalise ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } body = null ; }",
        "private void normalise ( Node node ) { if ( node. getNodeType ( ) == Node. TEXT_NODE ) { node. getParentNode ( ). removeChild ( node ) ; } }",
        "private void normalise ( Node body ) { if ( body == null ) { throw new IllegalArgumentException ( \"null body\" ) ; } this. body = body ; if ( body. getNodeType ( ) == Node. ELEMENT_NODE ) { this. body = ( Element ) body ; } else if ( body. getNodeType ( ) == Node. TEXT_NODE ) { this. body = ( Text ) body ; } else if ( body. getNodeType ( ) == Node. CDATA_SECTION_NODE ) { this. body = ( Text ) body ; } else if ( body. getNodeType ( ) == Node. COMMENT_NODE ) { this. body = ( Text ) body ; } else if ( body. getNodeType ( ) == Node. COMMENT_NODE ) { this. body = ( Text ) body ; } }",
        "private void normalise ( Node body ) { if ( body == null ) { throw new IllegalArgumentException ( \"body cannot be null\" ) ; } this. body = body ; if ( body. getNodeType ( ) == Node. ELEMENT_NODE ) { this. body = ( Element ) body ; } else if ( body. getNodeType ( ) == Node. TEXT_NODE ) { this. body = ( Text ) body ; } }",
        "private void normalise ( Node body ) { if ( body == null ) { throw new IllegalArgumentException ( \"null body\" ) ; } this. body = body ; if ( body. getNodeType ( ) == Node. ELEMENT_NODE ) { this. body = ( Element ) body ; } else if ( body. getNodeType ( ) == Node. TEXT_NODE ) { this. body = ( Text ) body ; } }",
        "private void normalise ( Node body ) { if ( body == null ) { throw new IllegalArgumentException ( \"Null body\" ) ; } this. body = body ; if ( body. getNodeType ( ) == Node. ELEMENT_NODE ) { this. body = ( Element ) body ; } else if ( body. getNodeType ( ) == Node. TEXT_NODE ) { this. body = ( Text ) body ; } }",
        "private void normalise ( Node body ) { if ( body == null ) { throw new IllegalArgumentException ( \"body cannot be null\" ) ; } this. body = body ; if ( body. getNodeType ( ) == Node. ELEMENT_NODE ) { this. body = ( Element ) body ; } }",
        "private void normalise ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } }",
        "private void normalise ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } }",
        "private void normalise ( ) { for ( int i = 0 ; i < mBody. length ; i ++ ) { mBody [ i ] = null ; } }",
        "private void normalise ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } body = null ; }",
        "private void normalise ( ) { for ( int i = 0 ; i < body. length ; i ++ ) { body [ i ] = null ; } body = null ; }",
        "private void normalise ( List < Node > nodes ) { for ( int i = 0 ; i < nodes. size ( ) ; i ++ ) { Node node = nodes. get ( i ) ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) { nodes. remove ( i ) ; } else if ( node. getNodeType ( ) == Node. COMMENT_NODE ) { nodes. remove ( i ) ; } } }",
        "private void normalise ( List < Node > nodes ) { for ( int i = 0 ; i < nodes. size ( ) ; i ++ ) { Node node = nodes. get ( i ) ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) { nodes. remove ( i ) ; } else if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { nodes. remove ( i ) ; } } }",
        "private void normalise ( List < Node > nodes ) { for ( int i = 0 ; i < nodes. size ( ) ; i ++ ) { Node node = nodes. get ( i ) ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) { nodes. set ( i, node. getNodeValue ( ) ) ; } else { nodes. set ( i, node. getNodeValue ( ) ) ; } } }",
        "private void normalise ( List < Node > nodes ) { for ( int i = 0 ; i < nodes. size ( ) ; i ++ ) { Node node = nodes. get ( i ) ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) { nodes. set ( i, node. getNodeValue ( ) ) ; } } }",
        "private void normalise ( List < Node > nodes ) { for ( int i = 0 ; i < nodes. size ( ) ; i ++ ) { Node node = nodes. get ( i ) ; if ( node. getNodeType ( ) == Node. TEXT_NODE ) { nodes. remove ( i ) ; } } }"
      ]
    },
    "Jsoup_15_/src/main/java/org/jsoup/parser/TreeBuilderState.java_283-284": {
      "loc": "283-284",
      "input": "boolean process(Token t, TreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (isWhitespace(c)) { tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.name(); if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().getFirst(); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); LinkedList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); LinkedList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; } else if (!tb.framesetOk()) { return false; } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.removeLast(); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.in(name, \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.in(name, \"pre\", \"listing\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } Element form = tb.insert(startTag); tb.setFormElement(form); } else if (name.equals(\"li\")) { tb.framesetOk(false); LinkedList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.process(new Token.EndTag(\"li\")); break; } if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\")) break; } if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); } else if (StringUtil.in(name, \"dd\", \"dt\")) { tb.framesetOk(false); LinkedList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) { tb.process(new Token.EndTag(el.nodeName())); break; } if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\")) break; } if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.process(new Token.EndTag(\"button\")); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.process(new Token.EndTag(\"a\")); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.in(name, \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.process(new Token.EndTag(\"nobr\")); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { startTag.name(\"img\"); return tb.process(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.tokeniser.acknowledgeSelfClosingFlag(); tb.process(new Token.StartTag(\"form\")); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.process(new Token.StartTag(\"hr\")); tb.process(new Token.StartTag(\"label\")); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\")) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.process(new Token.StartTag(\"input\", inputAttribs)); tb.process(new Token.EndTag(\"label\")); tb.process(new Token.StartTag(\"hr\")); tb.process(new Token.EndTag(\"form\")); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); TreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.in(\"optgroup\", \"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.process(new Token.EndTag(\"option\")); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.in(\"rp\", \"rt\")) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.tokeniser.acknowledgeSelfClosingFlag(); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.tokeniser.acknowledgeSelfClosingFlag(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.name(); if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.process(new Token.EndTag(\"body\")); if (notIgnored) return tb.process(endTag); } else if (StringUtil.in(name, \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.process(new Token.StartTag(name)); return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.in(name, \"dd\", \"dt\")) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) { if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.in(name, \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) { OUTER: for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; LinkedList<Element> stack = tb.getStack(); for (int si = 0; si < stack.size(); si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; INNER: for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { tb.removeFromStack(node); continue INNER; } else if (node == formatEl) break INNER; Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.process(new Token.StartTag(\"br\")); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true; }",
      "target": "boolean process(Token t, TreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (isWhitespace(c)) { tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.name(); if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().getFirst(); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); LinkedList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); LinkedList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; } else if (!tb.framesetOk()) { return false; } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.removeLast(); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.in(name, \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.in(name, \"pre\", \"listing\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } Element form = tb.insert(startTag); tb.setFormElement(form); } else if (name.equals(\"li\")) { tb.framesetOk(false); LinkedList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.process(new Token.EndTag(\"li\")); break; } if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\")) break; } if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); } else if (StringUtil.in(name, \"dd\", \"dt\")) { tb.framesetOk(false); LinkedList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) { tb.process(new Token.EndTag(el.nodeName())); break; } if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\")) break; } if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.process(new Token.EndTag(\"button\")); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.process(new Token.EndTag(\"a\")); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.in(name, \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.process(new Token.EndTag(\"nobr\")); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { startTag.name(\"img\"); return tb.process(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.tokeniser.acknowledgeSelfClosingFlag(); tb.process(new Token.StartTag(\"form\")); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.process(new Token.StartTag(\"hr\")); tb.process(new Token.StartTag(\"label\")); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\")) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.process(new Token.StartTag(\"input\", inputAttribs)); tb.process(new Token.EndTag(\"label\")); tb.process(new Token.StartTag(\"hr\")); tb.process(new Token.EndTag(\"form\")); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.process(new Token.EndTag(\"p\")); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); TreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.in(\"optgroup\", \"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.process(new Token.EndTag(\"option\")); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.in(\"rp\", \"rt\")) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.tokeniser.acknowledgeSelfClosingFlag(); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.tokeniser.acknowledgeSelfClosingFlag(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.name(); if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.process(new Token.EndTag(\"body\")); if (notIgnored) return tb.process(endTag); } else if (StringUtil.in(name, \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.process(new Token.StartTag(name)); return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.in(name, \"dd\", \"dt\")) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) { if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.in(name, \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) { OUTER: for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; LinkedList<Element> stack = tb.getStack(); for (int si = 0; si < stack.size(); si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; INNER: for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { tb.removeFromStack(node); continue INNER; } else if (node == formatEl) break INNER; Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.process(new Token.StartTag(\"br\")); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true; }",
      "function range": "246,9-761,9",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Jsoup_24_/src/main/java/org/jsoup/parser/TokeniserState.java_558-559": {
      "loc": "558-559",
      "input": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else { anythingElse(t, r); } }",
      "target": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else { anythingElse(t, r); } }",
      "function range": "553,9-586,9",
      "raw_output": [
        "private void readTokeniser ( char [ ] buf, int off, int len ) throws IOException { char c = buf [ off + len ] ; if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } }",
        "private void readTokeniser ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "private void readTokeniser ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else { cbuf [ off + len ] = ( char )'' ; } }",
        "private void readTokeniser ( char [ ] buf, int off, int len ) throws IOException { char c = buf [ off + len ] ; if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } }",
        "private void readTokeniser ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "private void readTokeniser ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else { cbuf [ off + len ] = ( char )'' ; } }",
        "private void readTokeniser ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "private void readTokeniser ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else { cbuf [ off + len ] = ( char )'' ; } }",
        "private void readTokeniser ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } }",
        "private void readTokeniser ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "private void readTokeniser ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "private void readTokeniser ( char [ ] buf, int off, int len ) throws IOException { char c = buf [ off + len ] ; if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } }",
        "private void readTokeniser ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "private void readTokeniser ( char [ ] buf, int off, int len ) throws IOException { char c = buf [ off + len ] ; if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } }",
        "private void readTokeniser ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "private void readTokeniser ( ) throws IOException { char c = reader. read ( ) ; if ( c =='' ) { reader. unread ( c ) ; } else if ( c =='' ) { reader. unread ( c ) ; } else if ( c =='' ) { reader. unread ( c ) ; } }",
        "private void readTokeniser ( ) throws IOException { char c = reader. read ( ) ; if ( c =='' ) { reader. unread ( c ) ; } else if ( c =='' ) { reader. unread ( c ) ; } else { reader. unread ( c ) ; } }",
        "private void readTokeniser ( ) throws IOException { char c = reader. read ( ) ; if ( c =='' ) { reader. unread ( c ) ; reader. unread ( c ) ; } else if ( c =='' ) { reader. unread ( c ) ; reader. unread ( c ) ; } }",
        "private void readTokeniser ( ) throws IOException { char c = reader. read ( ) ; if ( c =='' ) { reader. unread ( c ) ; } else { reader. unread ( c ) ; } }",
        "private void readTokeniser ( ) throws IOException { char c = reader. read ( ) ; if ( c =='' ) { reader. unread ( c ) ; } else if ( c =='' ) { reader. unread ( c ) ; } }",
        "private void readTokeniser ( ) throws IOException { char c ; while ( ( c = reader. read ( ) )!= - 1 ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' :",
        "private void readTokeniser ( ) throws IOException { char c ; while ( ( c = reader. read ( ) )!= - 1 ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void readTokeniser ( ) throws IOException { char c ; while ( ( c = reader. read ( ) )!= - 1 ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void readTokeniser ( ) throws IOException { char c ; while ( ( c = reader. read ( ) )!= - 1 ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "private void readTokeniser ( ) throws IOException { char c ; while ( ( c = reader. read ( ) )!= - 1 ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case"
      ],
      "mid_translation": [
        "Reads a tokeniser and adds it to the CharacterReader.",
        "Reads a tokeniser and writes it into the CharacterReader.",
        "Reads a tokeniser and writes it to the CharacterReader.",
        "Reads a tokeniser and adds it to the character reader.",
        "Reads a tokeniser and writes it to the character reader."
      ],
      "output": [
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] buf, int off, int len ) throws IOException { char c = buf [ off + len ] ; if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else { cbuf [ off + len ] = ( char )'' ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] buf, int off, int len ) throws IOException { char c = buf [ off + len ] ; if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else { cbuf [ off + len ] = ( char )'' ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else { cbuf [ off + len ] = ( char )'' ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } else if ( c =='' ) { cbuf [ off + len ] = ( char )'' ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] buf, int off, int len ) throws IOException { char c = buf [ off + len ] ; if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] buf, int off, int len ) throws IOException { char c = buf [ off + len ] ; if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } else if ( c =='' ) { readChar ( buf, off, len ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( char [ ] cbuf, int off, int len ) throws IOException { char c = cbuf [ off + len ] ; if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } else if ( c =='' ) { readChar ( cbuf, off, len ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( ) throws IOException { char c = reader. read ( ) ; if ( c =='' ) { reader. unread ( c ) ; } else if ( c =='' ) { reader. unread ( c ) ; } else if ( c =='' ) { reader. unread ( c ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( ) throws IOException { char c = reader. read ( ) ; if ( c =='' ) { reader. unread ( c ) ; } else if ( c =='' ) { reader. unread ( c ) ; } else { reader. unread ( c ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( ) throws IOException { char c = reader. read ( ) ; if ( c =='' ) { reader. unread ( c ) ; reader. unread ( c ) ; } else if ( c =='' ) { reader. unread ( c ) ; reader. unread ( c ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( ) throws IOException { char c = reader. read ( ) ; if ( c =='' ) { reader. unread ( c ) ; } else { reader. unread ( c ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( ) throws IOException { char c = reader. read ( ) ; if ( c =='' ) { reader. unread ( c ) ; } else if ( c =='' ) { reader. unread ( c ) ; } }",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( ) throws IOException { char c ; while ( ( c = reader. read ( ) )!= - 1 ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' :",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( ) throws IOException { char c ; while ( ( c = reader. read ( ) )!= - 1 ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( ) throws IOException { char c ; while ( ( c = reader. read ( ) )!= - 1 ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( ) throws IOException { char c ; while ( ( c = reader. read ( ) )!= - 1 ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case",
        "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); r.advance(); return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default:void t.dataBuffer.append ( ) throws IOException { char c ; while ( ( c = reader. read ( ) )!= - 1 ) { switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case': case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case"
      ]
    },
    "Jsoup_34_/src/main/java/org/jsoup/parser/CharacterReader.java_91-92": {
      "loc": "91-92",
      "input": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar != input[offset]) while(++offset < length && startChar != input[offset]); int i = offset + 1; int last = i + seq.length()-1; if (offset < length) { for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } } return -1; }",
      "target": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar != input[offset]) while(++offset < length && startChar != input[offset]); int i = offset + 1; int last = i + seq.length()-1; if (offset < length && last <= length) { for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } } return -1; }",
      "function range": "82,5-98,5",
      "raw_output": [
        "public static int indexOf ( CharSequence s ) { char c = s. charAt ( 0 ) ; for ( int i = 1 ; i < s. length ( ) ; i ++ ) { if ( c == s. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if ( s. charAt ( i ) =='' ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if ( s. charAt ( i ) == null ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if ( s. charAt ( i )!='' ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) == null ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if ( Character. isWhitespace ( s. charAt ( i ) ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) =='' ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i )!= null ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if ( s. charAt ( i ) =='' ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) return i ; } return - 1 ; }",
        "public static int indexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; ++ i ) { if ( self. charAt ( i ) == c ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence s, char c ) { if ( s == null ) { return - 1 ; } int i = 0 ; for ( ; i < s. length ( ) ; i ++ ) { if ( c == s. charAt ( i ) ) { return i ; } } }",
        "public static int indexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) { return i ; } } throw new IllegalArgumentException ( ) ; }",
        "public static int indexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) { return i ; } } return - 1 ; }",
        "public static int find ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) return i ; } return - 1 ; }",
        "public static int indexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; ++ i ) { if ( self. charAt ( i ) == c ) { return i ; } } return - 1 ; }",
        "public static int find ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) return i ; } return - 1 ; }",
        "public static int findNext ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) == seq. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public static int findNextIndex ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) == seq. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public static int findNext ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) == seq. charAt ( i + 1 ) ) { return i ; } } return - 1 ; }",
        "public static int findNext ( CharSequence seq ) { for ( int i = seq. length ( ) - 1 ; i >= 0 ; i -- ) { if ( seq. charAt ( i ) == seq. charAt ( i + 1 ) ) { return i ; } } return - 1 ; }",
        "public static int findNextIndex ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) == seq. charAt ( i + 1 ) ) { return i ; } } return - 1 ; }"
      ],
      "mid_translation": [
        "Returns the index of the next non - null char in the given CharSequence.",
        "Returns the index of the next non - null char in the given sequence.",
        "Returns the next index of the given char in the given CharSequence.",
        "Find the next index of the given char in the given CharSequence.",
        "Find the next index of the given char sequence."
      ],
      "output": [
        "int nextIndexOf ( CharSequence s ) { char c = s. charAt ( 0 ) ; for ( int i = 1 ; i < s. length ( ) ; i ++ ) { if ( c == s. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if ( s. charAt ( i ) =='' ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if ( s. charAt ( i ) == null ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if ( s. charAt ( i )!='' ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) == null ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if ( Character. isWhitespace ( s. charAt ( i ) ) ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) =='' ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i )!= null ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if ( s. charAt ( i ) =='' ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) return i ; } return - 1 ; }",
        "int nextIndexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; ++ i ) { if ( self. charAt ( i ) == c ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence s, char c ) { if ( s == null ) { return - 1 ; } int i = 0 ; for ( ; i < s. length ( ) ; i ++ ) { if ( c == s. charAt ( i ) ) { return i ; } } }",
        "int nextIndexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) { return i ; } } throw new IllegalArgumentException ( ) ; }",
        "int nextIndexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) return i ; } return - 1 ; }",
        "int nextIndexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; ++ i ) { if ( self. charAt ( i ) == c ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence self, char c ) { for ( int i = 0 ; i < self. length ( ) ; i ++ ) { if ( self. charAt ( i ) == c ) return i ; } return - 1 ; }",
        "int nextIndexOf ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) == seq. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) == seq. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) == seq. charAt ( i + 1 ) ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence seq ) { for ( int i = seq. length ( ) - 1 ; i >= 0 ; i -- ) { if ( seq. charAt ( i ) == seq. charAt ( i + 1 ) ) { return i ; } } return - 1 ; }",
        "int nextIndexOf ( CharSequence seq ) { for ( int i = 0 ; i < seq. length ( ) ; i ++ ) { if ( seq. charAt ( i ) == seq. charAt ( i + 1 ) ) { return i ; } } return - 1 ; }"
      ]
    },
    "Jsoup_37_/src/main/java/org/jsoup/nodes/Element.java_1101-1102": {
      "loc": "1101-1102",
      "input": "public String html() { StringBuilder accum = new StringBuilder(); html(accum); return accum.toString().trim(); }",
      "target": "public String html() { StringBuilder accum = new StringBuilder(); html(accum); return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString(); }",
      "function range": "1098,5-1102,5",
      "raw_output": [
        "public String toHtml ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; pw. println ( toHtml ( ) ) ; pw. close ( ) ; return sw. toString ( ) ; }",
        "public String toHTML ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; pw. println ( toHTML ( ) ) ; pw. close ( ) ; return sw. toString ( ) ; }",
        "public String toHtml ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; pw. println ( toHtml ( ) ) ; pw. flush ( ) ; return sw. toString ( ) ; }",
        "public String toHTML ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; pw. println ( toHTML ( ) ) ; pw. flush ( ) ; return sw. toString ( ) ; }",
        "public String toHTML ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; pw. print ( toHTML ( ) ) ; pw. flush ( ) ; return sw. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. html ( ) ) ; } return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toHtml ( ) ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < content. length ; i ++ ) { sb. append ( content [ i ] ) ; } return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < content. length ; i ++ ) { sb. append ( content [ i ] ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < content. length ; i ++ ) { sb. append ( content [ i ] ) ; if ( i < content. length - 1 ) sb. append ( \", \" ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. html ( ) ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { sb. append ( elements. get ( i ). html ( ) ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < content. length ; i ++ ) { sb. append ( content [ i ] ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < contents. length ; i ++ ) { sb. append ( contents [ i ]. html ( ) ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < content. length ; i ++ ) { sb. append ( content [ i ] ). append ( \"\\n\" ) ; } return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<html>\\n\" ) ; sb. append ( \"<head>\\n\" ) ; sb. append ( \"<body>\\n\" ) ; sb. append ( \"</body>\\n\" ) ; sb. append ( \"</html>\\n\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<html>\\n\" ) ; sb. append ( \"<head>\\n\" ) ; sb. append ( \"<title>\" ) ; sb. append ( title ) ; sb. append ( \"</title>\\n\" ) ; sb. append ( \"</body>\\n\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<html>\\n\" ) ; sb. append ( \"<head>\\n\" ) ; sb. append ( \"<title>\" ) ; sb. append ( title ) ; sb. append ( \"</title>\\n\" ) ; sb. append ( \"</head>\\n\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<div>\" ) ; sb. append ( name ) ; sb. append ( \"</div>\" ) ; sb. append ( \"</div>\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<html>\\n\" ) ; sb. append ( \"<head>\\n\" ) ; sb. append ( \"<body>\\n\" ) ; sb. append ( \"</body>\\n\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\"\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\"\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\"\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\"\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\"\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }"
      ],
      "mid_translation": [
        "Returns the HTML representation of the document.",
        "Returns the HTML content of the page.",
        "Returns the HTML content of this page.",
        "Returns the HTML form of this page.",
        "Returns the HTML representation of this page."
      ],
      "output": [
        "public String html ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; pw. println ( toHtml ( ) ) ; pw. close ( ) ; return sw. toString ( ) ; }",
        "public String html ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; pw. println ( toHTML ( ) ) ; pw. close ( ) ; return sw. toString ( ) ; }",
        "public String html ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; pw. println ( toHtml ( ) ) ; pw. flush ( ) ; return sw. toString ( ) ; }",
        "public String html ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; pw. println ( toHTML ( ) ) ; pw. flush ( ) ; return sw. toString ( ) ; }",
        "public String html ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; pw. print ( toHTML ( ) ) ; pw. flush ( ) ; return sw. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. html ( ) ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toHtml ( ) ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < content. length ; i ++ ) { sb. append ( content [ i ] ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < content. length ; i ++ ) { sb. append ( content [ i ] ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < content. length ; i ++ ) { sb. append ( content [ i ] ) ; if ( i < content. length - 1 ) sb. append ( \", \" ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. html ( ) ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { sb. append ( elements. get ( i ). html ( ) ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < content. length ; i ++ ) { sb. append ( content [ i ] ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < contents. length ; i ++ ) { sb. append ( contents [ i ]. html ( ) ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < content. length ; i ++ ) { sb. append ( content [ i ] ). append ( \"\\n\" ) ; } return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<html>\\n\" ) ; sb. append ( \"<head>\\n\" ) ; sb. append ( \"<body>\\n\" ) ; sb. append ( \"</body>\\n\" ) ; sb. append ( \"</html>\\n\" ) ; return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<html>\\n\" ) ; sb. append ( \"<head>\\n\" ) ; sb. append ( \"<title>\" ) ; sb. append ( title ) ; sb. append ( \"</title>\\n\" ) ; sb. append ( \"</body>\\n\" ) ; return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<html>\\n\" ) ; sb. append ( \"<head>\\n\" ) ; sb. append ( \"<title>\" ) ; sb. append ( title ) ; sb. append ( \"</title>\\n\" ) ; sb. append ( \"</head>\\n\" ) ; return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<div>\" ) ; sb. append ( name ) ; sb. append ( \"</div>\" ) ; sb. append ( \"</div>\" ) ; return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<html>\\n\" ) ; sb. append ( \"<head>\\n\" ) ; sb. append ( \"<body>\\n\" ) ; sb. append ( \"</body>\\n\" ) ; return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\"\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\"\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\"\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\"\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "public String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\" cellpadding=\\\"0\\\"\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }"
      ]
    },
    "Jsoup_40_/src/main/java/org/jsoup/nodes/DocumentType.java_22-23": {
      "loc": "22-23",
      "input": "public DocumentType(String name, String publicId, String systemId, String baseUri) { super(baseUri); Validate.notEmpty(name); attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId); }",
      "target": "public DocumentType(String name, String publicId, String systemId, String baseUri) { super(baseUri); attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId); }",
      "function range": "19,5-26,5",
      "raw_output": [
        "public void setDocType ( String docType ) { if ( docType == null || docType. trim ( ). length ( ) == 0 ) { this. docType = null ; } else { this. docType = docType ; } }",
        "public void setDocType ( String docType ) { if ( docType == null || docType. length ( ) == 0 ) { this. docType = null ; } else { this. docType = docType ; } }",
        "public void setDocType ( DocumentType docType ) { if ( docType == null ) { this. docType = null ; } else { this. docType = docType ; } }",
        "public void setDocType ( String docType ) { if ( docType == null || docType. trim ( ). length ( ) == 0 ) { docType = \"\" ; } this. docType = docType ; }",
        "public void setDocType ( String docType ) { if ( docType == null || docType. trim ( ). length ( ) == 0 ) { this. docType = null ; return ; } this. docType = docType ; }",
        "public DocumentType createDocumentType ( String name, String content, Map < String, Object > parameters ) { return new DocumentType ( name, content, parameters ) ; }",
        "public DocumentType createDocumentType ( String name, String content, Map < String, Object > parameters ) { return createDocumentType ( name, content, parameters, null ) ; }",
        "public DocumentType createDocumentType ( String name, String content, Map < String, String > parameters ) { return new DocumentType ( name, content, parameters ) ; }",
        "public DocumentType createDocumentType ( String name, String content, Map < String, String > parameters ) { return createDocumentType ( name, content, parameters, null ) ; }",
        "public DocumentType createDocumentType ( String name, String content, Map < String, Object > parameters ) { return createDocumentType ( name, content, parameters, false ) ; }",
        "public static DocumentType of ( String name, String version, String type ) { return new DocumentType ( name, version, type ) ; }",
        "public DocumentType with ( String name, String value ) { return with ( name, value, null ) ; }",
        "public DocumentType createDocumentType ( String name, String value, String description ) { return new DocumentType ( name, value, description ) ; }",
        "public DocumentType with ( String name, String value ) { return with ( name, value, null, null ) ; }",
        "public DocumentType with ( String name, String value ) { return new DocumentType ( name, value, null, null ) ; }",
        "public void setDocType ( String docType ) { if ( docType == null || docType. length ( ) == 0 ) { this. docType = null ; return ; } this. docType = docType ; }",
        "public void setDocType ( String docType ) { if ( docType == null || docType. trim ( ). length ( ) == 0 ) { this. docType = null ; return ; } this. docType = docType ; }",
        "public void setDocumentType ( String docType ) { if ( docType == null || docType. length ( ) == 0 ) { this. docType = null ; return ; } this. docType = docType ; }",
        "public void setDocumentType ( String docType ) { if ( docType == null || docType. trim ( ). length ( ) == 0 ) { this. docType = null ; return ; } this. docType = docType ; }",
        "public void setDocumentType ( String documentType ) { if ( documentType == null || documentType. length ( ) == 0 ) { this. documentType = null ; return ; } this. documentType = documentType. trim ( ) ; }",
        "public DocumentType createDocumentType ( String name, String value ) { return createDocumentType ( name, value, null ) ; }",
        "public static DocumentType create ( String name, String value ) { return new DocumentType ( name, value, null ) ; }",
        "protected DocumentType createDocumentType ( String name, String value ) { DocumentType documentType = new DocumentType ( name ) ; documentType. value = value ; return documentType ; }",
        "protected DocumentType createDocumentType ( String name, String value ) { return new DocumentType ( name, value ) ; }",
        "public static DocumentType create ( String name, String value ) { return new DocumentType ( name, value ) ; }"
      ],
      "mid_translation": [
        "Sets the DocumentType attributes.",
        "Creates a DocumentType with the specified parameters.",
        "Creates a new DocumentType with the specified parameters.",
        "Sets the DocumentType attribute.",
        "Creates a DocumentType with the specified attributes."
      ],
      "output": [
        "public void DocumentType ( String docType ) { if ( docType == null || docType. trim ( ). length ( ) == 0 ) { this. docType = null ; } else { this. docType = docType ; } }",
        "public void DocumentType ( String docType ) { if ( docType == null || docType. length ( ) == 0 ) { this. docType = null ; } else { this. docType = docType ; } }",
        "public void DocumentType ( DocumentType docType ) { if ( docType == null ) { this. docType = null ; } else { this. docType = docType ; } }",
        "public void DocumentType ( String docType ) { if ( docType == null || docType. trim ( ). length ( ) == 0 ) { docType = \"\" ; } this. docType = docType ; }",
        "public void DocumentType ( String docType ) { if ( docType == null || docType. trim ( ). length ( ) == 0 ) { this. docType = null ; return ; } this. docType = docType ; }",
        "public DocumentType DocumentType ( String name, String content, Map < String, Object > parameters ) { return new DocumentType ( name, content, parameters ) ; }",
        "public DocumentType DocumentType ( String name, String content, Map < String, Object > parameters ) { return createDocumentType ( name, content, parameters, null ) ; }",
        "public DocumentType DocumentType ( String name, String content, Map < String, String > parameters ) { return new DocumentType ( name, content, parameters ) ; }",
        "public DocumentType DocumentType ( String name, String content, Map < String, String > parameters ) { return createDocumentType ( name, content, parameters, null ) ; }",
        "public DocumentType DocumentType ( String name, String content, Map < String, Object > parameters ) { return createDocumentType ( name, content, parameters, false ) ; }",
        "public DocumentType DocumentType ( String name, String version, String type ) { return new DocumentType ( name, version, type ) ; }",
        "public DocumentType DocumentType ( String name, String value ) { return with ( name, value, null ) ; }",
        "public DocumentType DocumentType ( String name, String value, String description ) { return new DocumentType ( name, value, description ) ; }",
        "public DocumentType DocumentType ( String name, String value ) { return with ( name, value, null, null ) ; }",
        "public DocumentType DocumentType ( String name, String value ) { return new DocumentType ( name, value, null, null ) ; }",
        "public void DocumentType ( String docType ) { if ( docType == null || docType. length ( ) == 0 ) { this. docType = null ; return ; } this. docType = docType ; }",
        "public void DocumentType ( String docType ) { if ( docType == null || docType. trim ( ). length ( ) == 0 ) { this. docType = null ; return ; } this. docType = docType ; }",
        "public void DocumentType ( String docType ) { if ( docType == null || docType. length ( ) == 0 ) { this. docType = null ; return ; } this. docType = docType ; }",
        "public void DocumentType ( String docType ) { if ( docType == null || docType. trim ( ). length ( ) == 0 ) { this. docType = null ; return ; } this. docType = docType ; }",
        "public void DocumentType ( String documentType ) { if ( documentType == null || documentType. length ( ) == 0 ) { this. documentType = null ; return ; } this. documentType = documentType. trim ( ) ; }",
        "public DocumentType DocumentType ( String name, String value ) { return createDocumentType ( name, value, null ) ; }",
        "public DocumentType DocumentType ( String name, String value ) { return new DocumentType ( name, value, null ) ; }",
        "public DocumentType DocumentType ( String name, String value ) { DocumentType documentType = new DocumentType ( name ) ; documentType. value = value ; return documentType ; }",
        "public DocumentType DocumentType ( String name, String value ) { return new DocumentType ( name, value ) ; }",
        "public DocumentType DocumentType ( String name, String value ) { return new DocumentType ( name, value ) ; }"
      ]
    },
    "Jsoup_41_/src/main/java/org/jsoup/nodes/Element.java_1175-1176": {
      "loc": "1175-1176",
      "input": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o; return this == o; }",
      "target": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o; return tag.equals(element.tag); }",
      "function range": "1167,5-1176,5",
      "raw_output": [
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean contains ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } for ( int i = 0 ; i < length ; i ++ ) { if ( data [ i ] == element ) { return false ; } } return true ; }",
        "public boolean contains ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } for ( int i = 0 ; i < length ; i ++ ) { if ( data [ i ] == element ) { return true ; } } return false ; }",
        "public boolean contains ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } for ( int i = 0 ; i < size ; i ++ ) { if ( data [ i ] == element ) { return false ; } } return true ; }",
        "public boolean contains ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } for ( int i = 0 ; i < size ; i ++ ) { if ( data [ i ] == element ) { return true ; } } return false ; }",
        "public boolean contains ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } return contains ( element ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean contains ( int element ) { if ( element < this. element ) { return false ; } if ( element > this. element ) { return false ; } if ( element < this. element ) { return false ; } if ( element > this. element ) { return false ; } return true ; }",
        "public boolean contains ( int element ) { if ( element < this. element ) { return true ; } if ( element > this. element ) { return false ; } if ( element < this. element ) { return false ; } if ( element > this. element ) { return false ; } return true ; }",
        "public boolean contains ( int element ) { if ( element < this. element ) { return false ; } if ( element > this. element ) { return false ; } if ( element < this. element ) { return false ; } return true ; }",
        "public boolean contains ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } return contains ( element ) ; }",
        "public boolean contains ( int element ) { if ( element < 0 ) { return false ; } if ( element > size ) { return false ; } if ( element < 0 ) { return false ; } if ( element > size ) { return false ; } return contains ( element ) ; }",
        "public boolean contains ( Object o ) { if ( o == null ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } for ( int i = 0 ; i < elements. length ; i ++ ) { if ( elements [ i ] == o ) { return true ; } } return false ; }",
        "public boolean contains ( Object o ) { if ( o == null ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } for ( int i = 0 ; i < elements. length ; i ++ ) { if ( elements [ i ] == o ) { return false ; } } return true ; }",
        "public boolean contains ( Object o ) { if ( o == null ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } return contains ( o ) ; }",
        "public boolean contains ( Object o ) { if ( o == null ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } if (! super. contains ( o ) ) { return false ; } return true ; }",
        "public boolean contains ( Object o ) { if ( o == null ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } return super. contains ( o ) ; }"
      ],
      "mid_translation": [
        "Returns true if the specified object is the same as this object.",
        "Returns true if the specified element is equal to this element.",
        "Returns true if the given object is the same as this object.",
        "Returns true if the specified element is equal to this one.",
        "Returns true if the specified element is equal to this object."
      ],
      "output": [
        "@Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "@Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "@Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "@Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "@Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "@Override public boolean equals ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } for ( int i = 0 ; i < length ; i ++ ) { if ( data [ i ] == element ) { return false ; } } return true ; }",
        "@Override public boolean equals ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } for ( int i = 0 ; i < length ; i ++ ) { if ( data [ i ] == element ) { return true ; } } return false ; }",
        "@Override public boolean equals ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } for ( int i = 0 ; i < size ; i ++ ) { if ( data [ i ] == element ) { return false ; } } return true ; }",
        "@Override public boolean equals ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } for ( int i = 0 ; i < size ; i ++ ) { if ( data [ i ] == element ) { return true ; } } return false ; }",
        "@Override public boolean equals ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } return contains ( element ) ; }",
        "@Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "@Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "@Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "@Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "@Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "@Override public boolean equals ( int element ) { if ( element < this. element ) { return false ; } if ( element > this. element ) { return false ; } if ( element < this. element ) { return false ; } if ( element > this. element ) { return false ; } return true ; }",
        "@Override public boolean equals ( int element ) { if ( element < this. element ) { return true ; } if ( element > this. element ) { return false ; } if ( element < this. element ) { return false ; } if ( element > this. element ) { return false ; } return true ; }",
        "@Override public boolean equals ( int element ) { if ( element < this. element ) { return false ; } if ( element > this. element ) { return false ; } if ( element < this. element ) { return false ; } return true ; }",
        "@Override public boolean equals ( E element ) { if ( element == this ) { return true ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } if ( element == null ) { throw new IllegalArgumentException ( \"element cannot be null\" ) ; } return contains ( element ) ; }",
        "@Override public boolean equals ( int element ) { if ( element < 0 ) { return false ; } if ( element > size ) { return false ; } if ( element < 0 ) { return false ; } if ( element > size ) { return false ; } return contains ( element ) ; }",
        "@Override public boolean equals ( Object o ) { if ( o == null ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } for ( int i = 0 ; i < elements. length ; i ++ ) { if ( elements [ i ] == o ) { return true ; } } return false ; }",
        "@Override public boolean equals ( Object o ) { if ( o == null ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } for ( int i = 0 ; i < elements. length ; i ++ ) { if ( elements [ i ] == o ) { return false ; } } return true ; }",
        "@Override public boolean equals ( Object o ) { if ( o == null ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } return contains ( o ) ; }",
        "@Override public boolean equals ( Object o ) { if ( o == null ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } if (! super. contains ( o ) ) { return false ; } return true ; }",
        "@Override public boolean equals ( Object o ) { if ( o == null ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } if (! getClass ( ). equals ( o. getClass ( ) ) ) { return false ; } return super. contains ( o ) ; }"
      ]
    },
    "Jsoup_43_/src/main/java/org/jsoup/nodes/Element.java_574-575": {
      "loc": "574-575",
      "input": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i); if (element.equals(search)) return i; } return null; }",
      "target": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i); if (element == search) return i; } return null; }",
      "function range": "568,5-578,5",
      "raw_output": [
        "public static int indexOf ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equals ( elements. get ( i ). toString ( ) ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equals ( elements. get ( i ) ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { String element = elements. get ( i ) ; if ( searchString. equals ( element ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equalsIgnoreCase ( elements. get ( i ). toString ( ) ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equals ( elements. get ( i ) ) ) return i ; } return - 1 ; }",
        "public static int indexOf ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element. toString ( ) ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "public static int indexOf ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < E > int indexOf ( String search, Iterable < E > elements ) { for ( E element : elements ) { if ( search. equals ( element ) ) { return 0 ; } } return - 1 ; }",
        "public static int indexOf ( String search, Iterable <? > elements ) { for ( Object element : elements ) { if ( search. equals ( element ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "public static int indexOf ( String search, Iterable <? > elements ) { for ( Object element : elements ) { if ( search. equals ( element ) ) { return 0 ; } } return - 1 ; }",
        "public static int indexOf ( String search, Iterable <? > elements ) { if ( elements == null ) { throw new IllegalArgumentException ( \"Elements cannot be null\" ) ; } if ( search == null ) { throw new IllegalArgumentException ( \"Search cannot be null\" ) ; } int count = 0 ; for ( Object element : elements ) { if ( search. equals ( element ) ) { count ++ ; } } return count ; }",
        "public static int indexOf ( String searchString, Iterable <? > elements ) { if ( elements == null ) { throw new IllegalArgumentException ( \"Elements cannot be null\" ) ; } if ( searchString == null ) { throw new IllegalArgumentException ( \"SearchString cannot be null\" ) ; } for ( Object element : elements ) { if ( searchString. equals ( element. toString ( ) ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "public static int indexOf ( String search, Iterable <? > elements ) { if ( elements == null ) { throw new IllegalArgumentException ( \"Elements cannot be null\" ) ; } if ( search == null ) { throw new IllegalArgumentException ( \"Search cannot be null\" ) ; } for ( Object element : elements ) { if ( search. equals ( element ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "public static int indexOf ( String search, Iterable <? > elements ) { if ( elements == null ) { throw new IllegalArgumentException ( \"Elements cannot be null\" ) ; } if ( search == null ) { throw new IllegalArgumentException ( \"Search cannot be null\" ) ; } return indexOf ( search, elements. iterator ( ) ) ; }",
        "public static int indexOf ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element. toString ( ) ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "private static int indexOf ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equals ( elements. get ( i ). toString ( ) ) ) { return i ; } } return - 1 ; }",
        "private static int indexOf ( String search, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( search. equals ( elements. get ( i ). toString ( ) ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equals ( elements. get ( i ). toString ( ) ) ) { return i ; } } return - 1 ; }",
        "private static int indexOf ( String search, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( search. equals ( elements. get ( i ) ) ) { return i ; } } return - 1 ; }",
        "private static int indexOf ( String search, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { Object element = elements. get ( i ) ; if ( search. equals ( element ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element. toString ( ) ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "public static int indexOf ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "public static int indexOf ( String search, Iterable <? > elements ) { for ( Object element : elements ) { if ( search. equals ( element ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < E > int indexOf ( String search, Iterable < E > elements ) { for ( E element : elements ) { if ( search. equals ( element ) ) { return 0 ; } } return - 1 ; }",
        "public static int indexOf ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element. toString ( ) ) ) { return element ; } } return - 1 ; }"
      ],
      "mid_translation": [
        "Searches for the first occurrence of the given search string in the given list of elements and returns the index of the first occurrence.",
        "Searches for the first occurrence of the given search string in the given list of elements and returns the index of the first occurrence of the given element.",
        "Searches for the first occurrence of the given search string in the given list of elements. Returns the index of the first occurrence.",
        "Returns the index of the first occurrence of the given search string in the given list of elements or null if the search string is not found.",
        "Searches for the first occurrence of the given search string in the given list of elements. Returns the index of the first occurrence of the given element."
      ],
      "output": [
        "private static int indexInList ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equals ( elements. get ( i ). toString ( ) ) ) { return i ; } } return - 1 ; }",
        "private static int indexInList ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equals ( elements. get ( i ) ) ) { return i ; } } return - 1 ; }",
        "private static int indexInList ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { String element = elements. get ( i ) ; if ( searchString. equals ( element ) ) { return i ; } } return - 1 ; }",
        "private static int indexInList ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equalsIgnoreCase ( elements. get ( i ). toString ( ) ) ) { return i ; } } return - 1 ; }",
        "private static int indexInList ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equals ( elements. get ( i ) ) ) return i ; } return - 1 ; }",
        "private static int indexInList ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element. toString ( ) ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "private static int indexInList ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "private static < E > int indexInList ( String search, Iterable < E > elements ) { for ( E element : elements ) { if ( search. equals ( element ) ) { return 0 ; } } return - 1 ; }",
        "private static int indexInList ( String search, Iterable <? > elements ) { for ( Object element : elements ) { if ( search. equals ( element ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "private static int indexInList ( String search, Iterable <? > elements ) { for ( Object element : elements ) { if ( search. equals ( element ) ) { return 0 ; } } return - 1 ; }",
        "private static int indexInList ( String search, Iterable <? > elements ) { if ( elements == null ) { throw new IllegalArgumentException ( \"Elements cannot be null\" ) ; } if ( search == null ) { throw new IllegalArgumentException ( \"Search cannot be null\" ) ; } int count = 0 ; for ( Object element : elements ) { if ( search. equals ( element ) ) { count ++ ; } } return count ; }",
        "private static int indexInList ( String searchString, Iterable <? > elements ) { if ( elements == null ) { throw new IllegalArgumentException ( \"Elements cannot be null\" ) ; } if ( searchString == null ) { throw new IllegalArgumentException ( \"SearchString cannot be null\" ) ; } for ( Object element : elements ) { if ( searchString. equals ( element. toString ( ) ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "private static int indexInList ( String search, Iterable <? > elements ) { if ( elements == null ) { throw new IllegalArgumentException ( \"Elements cannot be null\" ) ; } if ( search == null ) { throw new IllegalArgumentException ( \"Search cannot be null\" ) ; } for ( Object element : elements ) { if ( search. equals ( element ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "private static int indexInList ( String search, Iterable <? > elements ) { if ( elements == null ) { throw new IllegalArgumentException ( \"Elements cannot be null\" ) ; } if ( search == null ) { throw new IllegalArgumentException ( \"Search cannot be null\" ) ; } return indexOf ( search, elements. iterator ( ) ) ; }",
        "private static int indexInList ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element. toString ( ) ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "private static int indexInList ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equals ( elements. get ( i ). toString ( ) ) ) { return i ; } } return - 1 ; }",
        "private static int indexInList ( String search, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( search. equals ( elements. get ( i ). toString ( ) ) ) { return i ; } } return - 1 ; }",
        "private static int indexInList ( String searchString, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( searchString. equals ( elements. get ( i ). toString ( ) ) ) { return i ; } } return - 1 ; }",
        "private static int indexInList ( String search, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { if ( search. equals ( elements. get ( i ) ) ) { return i ; } } return - 1 ; }",
        "private static int indexInList ( String search, List <? > elements ) { for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { Object element = elements. get ( i ) ; if ( search. equals ( element ) ) { return i ; } } return - 1 ; }",
        "private static int indexInList ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element. toString ( ) ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "private static int indexInList ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "private static int indexInList ( String search, Iterable <? > elements ) { for ( Object element : elements ) { if ( search. equals ( element ) ) { return indexOf ( element ) ; } } return - 1 ; }",
        "private static < E > int indexInList ( String search, Iterable < E > elements ) { for ( E element : elements ) { if ( search. equals ( element ) ) { return 0 ; } } return - 1 ; }",
        "private static int indexInList ( String searchString, Iterable <? > elements ) { for ( Object element : elements ) { if ( searchString. equals ( element. toString ( ) ) ) { return element ; } } return - 1 ; }"
      ]
    },
    "Jsoup_45_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_394-395": {
      "loc": "394-395",
      "input": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; } else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } }",
      "target": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } }",
      "function range": "382,5-429,5",
      "raw_output": [
        "public void reset ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ]. reset ( ) ; } }",
        "public void reset ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ] = 0 ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ] = 0 ; } }",
        "public void reset ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ]. reset ( ) ; } reset ( ) ; }",
        "public void reset ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ] = 0 ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ] = 0 ; } reset ( ) ; }",
        "public void reset ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } }",
        "public void reset ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ]. reset ( ) ; } }",
        "public void reset ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } }",
        "public void reset ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < row. length ; i ++ ) { row [ i ]. reset ( ) ; } }",
        "public void reset ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ] = null ; } }",
        "public void reset ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } rows = 0 ; columns = 0 ; }",
        "public void setInsertMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { this. insertMode = InsertMode. NONE ; } else { this. insertMode = insertMode ; } }",
        "public void setInsertMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { this. insertMode = InsertMode. NONE ; } else { this. insertMode. reset ( ) ; } }",
        "public void setInsertMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. UPDATE || insertMode == InsertMode. DELETE ) { this. insertMode = InsertMode. UPDATE ; } }",
        "public void setInsertMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. UPDATE || insertMode == InsertMode. UPDATE ) { update ( ) ; } }",
        "public void setInsertMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. UPDATE || insertMode == InsertMode. UPDATE ) { this. insertMode = InsertMode. UPDATE ; } }",
        "public void setInsertMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { reset ( ) ; } else { this. insertMode = insertMode ; } }",
        "public void setInsertMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { reset ( ) ; } else { this. insertMode. reset ( ) ; } }",
        "public void setInsertMode ( InsertMode insertMode ) { this. insertMode = insertMode ; this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { reset ( ) ; } }",
        "public void setInsertMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { reset ( ) ; } }",
        "public void setInsertMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { this. insertMode = InsertMode. NONE ; } }",
        "private void insert ( int [ ] row, int [ ] col ) { for ( int i = 0 ; i < col. length ; i ++ ) { row [ i ] = col [ i ] ; } }",
        "private void insert ( int [ ] row, int [ ] col ) { for ( int i = 0 ; i < col. length ; i ++ ) { insert ( row, col [ i ] ) ; } }",
        "private void insert ( int [ ] row, int [ ] col ) { for ( int i = 0 ; i < row. length ; i ++ ) { col [ i ] = row [ i ] ; } }",
        "private void insert ( int [ ] row, int [ ] col ) { for ( int i = 0 ; i < row. length ; i ++ ) { row [ i ] = col [ i ] ; } }",
        "private void insert ( int [ ] row, int [ ] col ) { for ( int i = 0 ; i < row. length ; i ++ ) { insert ( row [ i ], col ) ; } }"
      ],
      "mid_translation": [
        "reset to insertion mode.",
        "reset to the insertion mode.",
        "reset insertion mode.",
        "Reset insertion mode.",
        "in insertion mode."
      ],
      "output": [
        "void resetInsertionMode ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ]. reset ( ) ; } }",
        "void resetInsertionMode ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ] = 0 ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ] = 0 ; } }",
        "void resetInsertionMode ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ]. reset ( ) ; } reset ( ) ; }",
        "void resetInsertionMode ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ] = 0 ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ] = 0 ; } reset ( ) ; }",
        "void resetInsertionMode ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } }",
        "void resetInsertionMode ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ]. reset ( ) ; } }",
        "void resetInsertionMode ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } }",
        "void resetInsertionMode ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < row. length ; i ++ ) { row [ i ]. reset ( ) ; } }",
        "void resetInsertionMode ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } for ( int i = 0 ; i < rows. length ; i ++ ) { rows [ i ] = null ; } }",
        "void resetInsertionMode ( ) { for ( int i = 0 ; i < columns. length ; i ++ ) { columns [ i ]. reset ( ) ; } rows = 0 ; columns = 0 ; }",
        "void resetInsertionMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { this. insertMode = InsertMode. NONE ; } else { this. insertMode = insertMode ; } }",
        "void resetInsertionMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { this. insertMode = InsertMode. NONE ; } else { this. insertMode. reset ( ) ; } }",
        "void resetInsertionMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. UPDATE || insertMode == InsertMode. DELETE ) { this. insertMode = InsertMode. UPDATE ; } }",
        "void resetInsertionMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. UPDATE || insertMode == InsertMode. UPDATE ) { update ( ) ; } }",
        "void resetInsertionMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. UPDATE || insertMode == InsertMode. UPDATE ) { this. insertMode = InsertMode. UPDATE ; } }",
        "void resetInsertionMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { reset ( ) ; } else { this. insertMode = insertMode ; } }",
        "void resetInsertionMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { reset ( ) ; } else { this. insertMode. reset ( ) ; } }",
        "void resetInsertionMode ( InsertMode insertMode ) { this. insertMode = insertMode ; this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { reset ( ) ; } }",
        "void resetInsertionMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { reset ( ) ; } }",
        "void resetInsertionMode ( InsertMode insertMode ) { this. insertMode = insertMode ; if ( insertMode == InsertMode. NONE ) { this. insertMode = InsertMode. NONE ; } }",
        "void resetInsertionMode ( int [ ] row, int [ ] col ) { for ( int i = 0 ; i < col. length ; i ++ ) { row [ i ] = col [ i ] ; } }",
        "void resetInsertionMode ( int [ ] row, int [ ] col ) { for ( int i = 0 ; i < col. length ; i ++ ) { insert ( row, col [ i ] ) ; } }",
        "void resetInsertionMode ( int [ ] row, int [ ] col ) { for ( int i = 0 ; i < row. length ; i ++ ) { col [ i ] = row [ i ] ; } }",
        "void resetInsertionMode ( int [ ] row, int [ ] col ) { for ( int i = 0 ; i < row. length ; i ++ ) { row [ i ] = col [ i ] ; } }",
        "void resetInsertionMode ( int [ ] row, int [ ] col ) { for ( int i = 0 ; i < row. length ; i ++ ) { insert ( row [ i ], col ) ; } }"
      ]
    },
    "Jsoup_46_/src/main/java/org/jsoup/nodes/Entities.java_118-119": {
      "loc": "118-119",
      "input": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode != EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(c); break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
      "target": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode != EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(\"&#xa0;\"); break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
      "function range": "79,5-154,5",
      "raw_output": [
        "public void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "public void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "public void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "public void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "public void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "public static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "public static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; default : sb. append ( ch ) ; } } return sb ; }",
        "public static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "public static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "public static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; default : break ; } } return sb ; }",
        "private static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder ; }",
        "private static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return new StringBuilder ( settings ) ; }",
        "private static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ( settings ) ; }",
        "private static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ( settings ). append ('' ) ; }",
        "private static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ('' ) ; }",
        "public static String escape ( final StringBuilder builder, final DocumentSettings settings ) { if ( builder == null ) { return \"\" ; } if ( settings == null ) { return builder. toString ( ) ; } return Escaping. escape ( builder. toString ( ), settings ) ; }",
        "public static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { for ( int i = 0 ; i < settings. getLength ( ) ; i ++ ) { sb. append ( settings. getValue ( i ) ) ; } } }",
        "public static String escape ( final StringBuilder builder, final DocumentSettings settings ) { if ( builder == null ) { return null ; } if ( settings == null ) { return builder. toString ( ) ; } return Escaping. escape ( builder. toString ( ), settings ) ; }",
        "public static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { for ( int i = 0 ; i < settings. getLength ( ) ; i ++ ) { sb. append ( settings. get ( i ) ) ; } } }",
        "public static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { sb. append ( settings. escape ( sb ) ) ; } }",
        "public static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ) ; builder. append ('' ) ; builder. append ( property. getValue ( ) ) ; builder. append ('' ) ; } return builder ; }",
        "public static StringBuilder escape ( StringBuilder builder, Map < String, Object > properties ) { for ( Entry < String, Object > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ) ; builder. append ('' ) ; builder. append ( property. getValue ( ) ) ; builder. append ('' ) ; } return builder ; }",
        "public static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }",
        "public static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Map. Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }",
        "public static StringBuilder escape ( StringBuilder builder, Map < String, Object > properties ) { for ( Entry < String, Object > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }"
      ],
      "mid_translation": [
        "Escapes the given string builder with the current settings.",
        "Escapes the given string builder with the given settings.",
        "Escapes the given string builder according to the given settings.",
        "Escapes the given string builder with the given document settings.",
        "Escapes the given string builder with the given properties."
      ],
      "output": [
        "static void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "static void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "static void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "static void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "static void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; default : sb. append ( ch ) ; } } return sb ; }",
        "static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; default : break ; } } return sb ; }",
        "static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder ; }",
        "static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return new StringBuilder ( settings ) ; }",
        "static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ( settings ) ; }",
        "static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ( settings ). append ('' ) ; }",
        "static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ('' ) ; }",
        "static String escape ( final StringBuilder builder, final DocumentSettings settings ) { if ( builder == null ) { return \"\" ; } if ( settings == null ) { return builder. toString ( ) ; } return Escaping. escape ( builder. toString ( ), settings ) ; }",
        "static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { for ( int i = 0 ; i < settings. getLength ( ) ; i ++ ) { sb. append ( settings. getValue ( i ) ) ; } } }",
        "static String escape ( final StringBuilder builder, final DocumentSettings settings ) { if ( builder == null ) { return null ; } if ( settings == null ) { return builder. toString ( ) ; } return Escaping. escape ( builder. toString ( ), settings ) ; }",
        "static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { for ( int i = 0 ; i < settings. getLength ( ) ; i ++ ) { sb. append ( settings. get ( i ) ) ; } } }",
        "static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { sb. append ( settings. escape ( sb ) ) ; } }",
        "static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ) ; builder. append ('' ) ; builder. append ( property. getValue ( ) ) ; builder. append ('' ) ; } return builder ; }",
        "static StringBuilder escape ( StringBuilder builder, Map < String, Object > properties ) { for ( Entry < String, Object > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ) ; builder. append ('' ) ; builder. append ( property. getValue ( ) ) ; builder. append ('' ) ; } return builder ; }",
        "static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }",
        "static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Map. Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }",
        "static StringBuilder escape ( StringBuilder builder, Map < String, Object > properties ) { for ( Entry < String, Object > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }"
      ]
    },
    "Jsoup_47_/src/main/java/org/jsoup/nodes/Entities.java_122-123": {
      "loc": "122-123",
      "input": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode != EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(\"&#xa0;\"); break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
      "target": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode != EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(\"&#xa0;\"); break; case '<': if (!inAttribute || escapeMode == EscapeMode.xhtml) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
      "function range": "79,5-155,5",
      "raw_output": [
        "public void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "public void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "public void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "public void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "public void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "public static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "public static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; default : sb. append ( ch ) ; } } return sb ; }",
        "public static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "public static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "public static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; default : break ; } } return sb ; }",
        "private static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder ; }",
        "private static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return new StringBuilder ( settings ) ; }",
        "private static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ( settings ) ; }",
        "private static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ( settings ). append ('' ) ; }",
        "private static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ('' ) ; }",
        "public static String escape ( final StringBuilder builder, final DocumentSettings settings ) { if ( builder == null ) { return \"\" ; } if ( settings == null ) { return builder. toString ( ) ; } return Escaping. escape ( builder. toString ( ), settings ) ; }",
        "public static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { for ( int i = 0 ; i < settings. getLength ( ) ; i ++ ) { sb. append ( settings. getValue ( i ) ) ; } } }",
        "public static String escape ( final StringBuilder builder, final DocumentSettings settings ) { if ( builder == null ) { return null ; } if ( settings == null ) { return builder. toString ( ) ; } return Escaping. escape ( builder. toString ( ), settings ) ; }",
        "public static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { for ( int i = 0 ; i < settings. getLength ( ) ; i ++ ) { sb. append ( settings. get ( i ) ) ; } } }",
        "public static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { sb. append ( settings. escape ( sb ) ) ; } }",
        "public static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ) ; builder. append ('' ) ; builder. append ( property. getValue ( ) ) ; builder. append ('' ) ; } return builder ; }",
        "public static StringBuilder escape ( StringBuilder builder, Map < String, Object > properties ) { for ( Entry < String, Object > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ) ; builder. append ('' ) ; builder. append ( property. getValue ( ) ) ; builder. append ('' ) ; } return builder ; }",
        "public static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }",
        "public static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Map. Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }",
        "public static StringBuilder escape ( StringBuilder builder, Map < String, Object > properties ) { for ( Entry < String, Object > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }"
      ],
      "mid_translation": [
        "Escapes the given string builder with the current settings.",
        "Escapes the given string builder with the given settings.",
        "Escapes the given string builder according to the given settings.",
        "Escapes the given string builder with the given document settings.",
        "Escapes the given string builder with the given properties."
      ],
      "output": [
        "static void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "static void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "static void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "static void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "static void escape ( StringBuilder sb ) { for ( int i = 0 ; i < sb. length ( ) ; i ++ ) { char c = sb. charAt ( i ) ; switch ( c ) { case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : case'' : sb. append ( c ) ; break ; } } }",
        "static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; default : sb. append ( ch ) ; } } return sb ; }",
        "static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; } } return sb ; }",
        "static StringBuilder escape ( StringBuilder sb, int settings ) { if ( sb == null ) { return sb ; } int length = sb. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char ch = sb. charAt ( i ) ; switch ( ch ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; default : break ; } } return sb ; }",
        "static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder ; }",
        "static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return new StringBuilder ( settings ) ; }",
        "static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ( settings ) ; }",
        "static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ( settings ). append ('' ) ; }",
        "static StringBuilder escape ( StringBuilder builder, int settings ) { if ( settings == 0 ) { return builder ; } if ( settings == 1 ) { return builder. append ('' ) ; } if ( settings == 2 ) { return builder. append ('' ) ; } if ( settings == 3 ) { return builder. append ('' ) ; } if ( settings == 4 ) { return builder. append ('' ) ; } if ( settings == 5 ) { return builder. append ('' ) ; } if ( settings == 6 ) { return builder. append ('' ) ; } return builder. append ('' ) ; }",
        "static String escape ( final StringBuilder builder, final DocumentSettings settings ) { if ( builder == null ) { return \"\" ; } if ( settings == null ) { return builder. toString ( ) ; } return Escaping. escape ( builder. toString ( ), settings ) ; }",
        "static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { for ( int i = 0 ; i < settings. getLength ( ) ; i ++ ) { sb. append ( settings. getValue ( i ) ) ; } } }",
        "static String escape ( final StringBuilder builder, final DocumentSettings settings ) { if ( builder == null ) { return null ; } if ( settings == null ) { return builder. toString ( ) ; } return Escaping. escape ( builder. toString ( ), settings ) ; }",
        "static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { for ( int i = 0 ; i < settings. getLength ( ) ; i ++ ) { sb. append ( settings. get ( i ) ) ; } } }",
        "static void escape ( StringBuilder sb, DocumentSettings settings ) { if ( sb == null ) { sb = new StringBuilder ( ) ; } if ( settings == null ) { sb. append ( \"null\" ) ; } else { sb. append ( settings. escape ( sb ) ) ; } }",
        "static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ) ; builder. append ('' ) ; builder. append ( property. getValue ( ) ) ; builder. append ('' ) ; } return builder ; }",
        "static StringBuilder escape ( StringBuilder builder, Map < String, Object > properties ) { for ( Entry < String, Object > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ) ; builder. append ('' ) ; builder. append ( property. getValue ( ) ) ; builder. append ('' ) ; } return builder ; }",
        "static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }",
        "static StringBuilder escape ( StringBuilder builder, Map < String,? > properties ) { for ( Map. Entry < String,? > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }",
        "static StringBuilder escape ( StringBuilder builder, Map < String, Object > properties ) { for ( Entry < String, Object > property : properties. entrySet ( ) ) { builder. append ( property. getKey ( ) ). append ('' ). append ( property. getValue ( ) ). append ('' ) ; } return builder ; }"
      ]
    },
    "Jsoup_51_/src/main/java/org/jsoup/parser/CharacterReader.java_300-301": {
      "loc": "300-301",
      "input": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos]; return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); }",
      "target": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos]; return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c); }",
      "function range": "296,5-301,5",
      "raw_output": [
        "public static boolean isLetter ( String string ) { if ( string == null ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { char c = string. charAt ( i ) ; if (! Character. isLetter ( c ) ) { return false ; } } return true ; }",
        "public static boolean isLetter ( String s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if (! Character. isLetter ( s. charAt ( i ) ) ) { return false ; } } return true ; }",
        "public static boolean isLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if (! Character. isLetter ( c ) ) return false ; } return true ; }",
        "public static boolean isLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if (! Character. isLetter ( str. charAt ( i ) ) ) return false ; } return true ; }",
        "public static boolean isLetter ( String s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if (! Character. isLetter ( c ) ) { return false ; } } return true ; }",
        "public static boolean isLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if (! Character. isLetter ( str. charAt ( i ) ) ) return false ; } return true ; }",
        "public static boolean isLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if (! Character. isLetter ( c ) ) return false ; } return true ; }",
        "public static boolean isLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) return true ; } return false ; }",
        "public static boolean isLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) return true ; } return false ; }",
        "public static boolean isLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) return false ; } return true ; }",
        "public boolean hasNext ( ) { if (! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } next ( ) ; if ( Character. isLetter ( next ( ) ) ) { return true ; } return false ; }",
        "public boolean hasNext ( ) { if (! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } next ( ) ; if ( Character. isLetter ( next ( ) ) ) return true ; return false ; }",
        "public boolean hasNext ( ) { if (! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } next = getNext ( ) ; if ( next == null ) { return false ; } return next. hasNext ( ) ; }",
        "public boolean hasNext ( ) { if (! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } next = getNext ( ) ; if ( next == null ) { return false ; } return hasNext ( ) ; }",
        "public boolean hasNext ( ) { if (! hasNext ( ) ) return false ; next ( ) ; if ( Character. isLetter ( ( char ) position ) ) return true ; return false ; }",
        "public static boolean isLetter ( String s ) { if ( s == null || s. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if (! Character. isLetter ( c ) ) { return false ; } } return true ; }",
        "public static boolean isLetter ( String string ) { if ( string == null ) { return false ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char c = string. charAt ( i ) ; if (! Character. isLetter ( c ) ) { return false ; } } return true ; }",
        "public static boolean isLetter ( String s ) { if ( s == null || s. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if (! Character. isLetter ( s. charAt ( i ) ) ) { return false ; } } return true ; }",
        "public static boolean isLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if (! Character. isLetter ( c ) ) return false ; } return true ; }",
        "public static boolean isLetter ( String s ) { if ( s == null || s. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if (! isLetter ( c ) ) { return false ; } } return true ; }",
        "public static boolean isLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean isLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) return true ; } return false ; }",
        "public static boolean isLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( Character. isLetter ( c ) ) return true ; } return false ; }",
        "public static boolean isLetter ( String str ) { if ( str == null ) return false ; if ( str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) return true ; } return false ; }",
        "public static boolean isLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) if ( Character. isLetter ( str. charAt ( i ) ) ) return true ; return false ; }"
      ],
      "mid_translation": [
        "Returns true if the string is not a valid letter.",
        "Returns true if the string is not a letter.",
        "Returns true iff the current position is not a letter.",
        "Returns true iff the string is not a valid letter.",
        "Checks if the string is a letter."
      ],
      "output": [
        "boolean matchesLetter ( String string ) { if ( string == null ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { char c = string. charAt ( i ) ; if (! Character. isLetter ( c ) ) { return false ; } } return true ; }",
        "boolean matchesLetter ( String s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if (! Character. isLetter ( s. charAt ( i ) ) ) { return false ; } } return true ; }",
        "boolean matchesLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if (! Character. isLetter ( c ) ) return false ; } return true ; }",
        "boolean matchesLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if (! Character. isLetter ( str. charAt ( i ) ) ) return false ; } return true ; }",
        "boolean matchesLetter ( String s ) { for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if (! Character. isLetter ( c ) ) { return false ; } } return true ; }",
        "boolean matchesLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if (! Character. isLetter ( str. charAt ( i ) ) ) return false ; } return true ; }",
        "boolean matchesLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if (! Character. isLetter ( c ) ) return false ; } return true ; }",
        "boolean matchesLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) return true ; } return false ; }",
        "boolean matchesLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) return true ; } return false ; }",
        "boolean matchesLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) return false ; } return true ; }",
        "boolean matchesLetter ( ) { if (! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } next ( ) ; if ( Character. isLetter ( next ( ) ) ) { return true ; } return false ; }",
        "boolean matchesLetter ( ) { if (! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } next ( ) ; if ( Character. isLetter ( next ( ) ) ) return true ; return false ; }",
        "boolean matchesLetter ( ) { if (! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } next = getNext ( ) ; if ( next == null ) { return false ; } return next. hasNext ( ) ; }",
        "boolean matchesLetter ( ) { if (! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } next = getNext ( ) ; if ( next == null ) { return false ; } return hasNext ( ) ; }",
        "boolean matchesLetter ( ) { if (! hasNext ( ) ) return false ; next ( ) ; if ( Character. isLetter ( ( char ) position ) ) return true ; return false ; }",
        "boolean matchesLetter ( String s ) { if ( s == null || s. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if (! Character. isLetter ( c ) ) { return false ; } } return true ; }",
        "boolean matchesLetter ( String string ) { if ( string == null ) { return false ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char c = string. charAt ( i ) ; if (! Character. isLetter ( c ) ) { return false ; } } return true ; }",
        "boolean matchesLetter ( String s ) { if ( s == null || s. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < s. length ( ) ; i ++ ) { if (! Character. isLetter ( s. charAt ( i ) ) ) { return false ; } } return true ; }",
        "boolean matchesLetter ( String str ) { if ( str == null ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if (! Character. isLetter ( c ) ) return false ; } return true ; }",
        "boolean matchesLetter ( String s ) { if ( s == null || s. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if (! isLetter ( c ) ) { return false ; } } return true ; }",
        "boolean matchesLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) { return true ; } } return false ; }",
        "boolean matchesLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) return true ; } return false ; }",
        "boolean matchesLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( Character. isLetter ( c ) ) return true ; } return false ; }",
        "boolean matchesLetter ( String str ) { if ( str == null ) return false ; if ( str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( Character. isLetter ( str. charAt ( i ) ) ) return true ; } return false ; }",
        "boolean matchesLetter ( String str ) { if ( str == null || str. length ( ) == 0 ) return false ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) if ( Character. isLetter ( str. charAt ( i ) ) ) return true ; return false ; }"
      ]
    },
    "Jsoup_57_/src/main/java/org/jsoup/nodes/Attributes.java_125-126": {
      "loc": "125-126",
      "input": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key)) attributes.remove(attrKey); } }",
      "target": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key)) it.remove(); } }",
      "function range": "118,5-127,5",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T removeIgnoreCase ( String key ) { for ( Map. Entry < String, String > entry : attributes. entrySet ( ) ) { if ( entry. getKey ( ). equalsIgnoreCase ( key ) ) { return ( T ) entry. getValue ( ) ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T removeIgnoreCase ( String key ) { for ( Map. Entry < String, String > entry : attributes. entrySet ( ) ) { if ( entry. getValue ( ). equalsIgnoreCase ( key ) ) { return ( T ) entry. getKey ( ) ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T removeIgnoreCase ( String key ) { for ( Map. Entry < String, String > entry : attributes. entrySet ( ) ) { if ( key. equalsIgnoreCase ( entry. getKey ( ) ) ) { return ( T ) entry. getValue ( ) ; } } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T removeIgnoreCase ( String key ) { for ( Map. Entry < String, String > entry : attributes. entrySet ( ) ) { if ( entry. getKey ( ). equalsIgnoreCase ( key ) ) { return ( T ) this ; } } return null ; }",
        "public String removeIgnoreCase ( String key ) { if ( ( key == null ) || ( key. length ( ) == 0 ) ) { return null ; } String value = attributes. remove ( key ) ; if ( value == null ) { return null ; } return value ; }",
        "public String removeAttributeIgnoreCase ( String name ) { if ( name == null ) { return null ; } for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. getName ( ). equalsIgnoreCase ( name ) ) { return attributes [ i ]. getValue ( ) ; } } return null ; }",
        "public String removeIgnoreCase ( String name ) { if ( name == null ) { return null ; } for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. getName ( ). equalsIgnoreCase ( name ) ) { return attributes [ i ]. getValue ( ) ; } } return null ; }",
        "public String removeAttributeIgnoreCase ( String name ) { if ( name == null ) { return null ; } for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. name. equalsIgnoreCase ( name ) ) { return attributes [ i ]. value ; } } return null ; }",
        "public String removeIgnoreCase ( String name ) { if ( name == null ) { return null ; } for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. name. equalsIgnoreCase ( name ) ) { return attributes [ i ]. value ; } } return null ; }",
        "public String removeIgnoreCase ( String name ) { if ( name == null ) { return null ; } for ( int i = 0 ; i < names. length ; i ++ ) { if ( names [ i ]. equalsIgnoreCase ( name ) ) { return names [ i ] ; } } return null ; }",
        "public void removeAttributeIgnoreCase ( String key ) { for ( int i = 0 ; i < attributes. size ( ) ; i ++ ) { Attribute attribute = attributes. get ( i ) ; if ( attribute. getKey ( ). equalsIgnoreCase ( key ) ) { attributes. remove ( i ) ; } } }",
        "public void removeAttributeIgnoreCase ( String key ) { for ( int i = 0 ; i < attributes. size ( ) ; i ++ ) { Attribute attr = attributes. get ( i ) ; if ( attr. getKey ( ). equalsIgnoreCase ( key ) ) { attributes. remove ( i ) ; } } }",
        "public void removeAttributeIgnoreCase ( String key ) { for ( int i = 0 ; i < _attributes. length ; i ++ ) { if ( _attributes [ i ]. equalsIgnoreCase ( key ) ) { _attributes [ i ] = null ; return ; } } }",
        "public void removeAttributeIgnoreCase ( String key ) { for ( int i = 0 ; i < _attributes. length ; i ++ ) { if ( _attributes [ i ]. equalsIgnoreCase ( key ) ) { _attributes [ i ] = null ; break ; } } }",
        "public void removeAttributeIgnoreCase ( String key ) { for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. getKey ( ). equalsIgnoreCase ( key ) ) { attributes [ i ]. removeAttribute ( key ) ; return ; } } }",
        "public void removeAttributeIgnoreCase ( String key ) { for ( int i = 0 ; i < _attributes. length ; i ++ ) { if ( _attributes [ i ]. equalsIgnoreCase ( key ) ) { _attributes [ i ] = null ; return ; } } }",
        "public void removeAttributeIgnoreCase ( String key ) { for ( int i = 0 ; i < _attributes. length ; i ++ ) { if ( _attributes [ i ]. equalsIgnoreCase ( key ) ) { _attributes [ i ] = null ; break ; } } }",
        "public void removeAttributeIgnoreCase ( String key ) { for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. equalsIgnoreCase ( key ) ) { attributes [ i ] = null ; return ; } } }",
        "public void removeAttributeIgnoreCase ( String key ) { if ( attributes. containsKey ( key ) ) { attributes. remove ( key ) ; } }",
        "public void removeAttribute ( String key ) { if ( attributes. containsKey ( key ) ) { attributes. remove ( key ) ; } }",
        "public < T > T removeIgnoreCase ( String key ) { return doWithJedis ( new JedisCallable < T > ( ) { @ Override public T call ( Jedis jedis ) { return jedis. removeIgnoreCase ( key ) ; } } ) ; }",
        "public < T > T removeIgnoreCase ( String key ) { return doWithJedis ( new JedisCallable < T > ( ) { @ Override public T call ( Jedis jedis ) { jedis. del ( key ) ; return jedis. get ( ) ; } } ) ; }",
        "public < T > T removeIgnoreCase ( String key ) { return doWithJedis ( new JedisCallable < T > ( ) { @ Override public T call ( Jedis jedis ) { return jedis. removeIgnoreCase ( getKey ( ), key ) ; } } ) ; }",
        "public < T > T removeIgnoreCase ( String key ) { return doWithJedis ( new JedisCallable < T > ( ) { @ Override public T call ( Jedis jedis ) { return jedis. delete ( getKey ( ), key ) ; } } ) ; }",
        "public < T > T removeIgnoreCase ( String key ) { return doWithJedis ( new JedisCallable < T > ( ) { @ Override public T call ( Jedis jedis ) { return jedis. remove ( getKey ( ), key ) ; } } ) ; }"
      ],
      "mid_translation": [
        "Remove the attribute with the given key ignoring case.",
        "Remove the attribute with the given name ignoring case.",
        "Removes an attribute by key ignoring case.",
        "Removes an attribute by its key ignoring case.",
        "Removes attribute by key ignoring case."
      ],
      "output": [
        "public < T > T removeIgnoreCase ( String key ) { for ( Map. Entry < String, String > entry : attributes. entrySet ( ) ) { if ( entry. getKey ( ). equalsIgnoreCase ( key ) ) { return ( T ) entry. getValue ( ) ; } } return null ; }",
        "public < T > T removeIgnoreCase ( String key ) { for ( Map. Entry < String, String > entry : attributes. entrySet ( ) ) { if ( entry. getValue ( ). equalsIgnoreCase ( key ) ) { return ( T ) entry. getKey ( ) ; } } return null ; }",
        "public < T > T removeIgnoreCase ( String key ) { for ( Map. Entry < String, String > entry : attributes. entrySet ( ) ) { if ( key. equalsIgnoreCase ( entry. getKey ( ) ) ) { return ( T ) entry. getValue ( ) ; } } return null ; }",
        "public < T > T removeIgnoreCase ( String key ) { for ( Map. Entry < String, String > entry : attributes. entrySet ( ) ) { if ( entry. getKey ( ). equalsIgnoreCase ( key ) ) { return ( T ) this ; } } return null ; }",
        "public String removeIgnoreCase ( String key ) { if ( ( key == null ) || ( key. length ( ) == 0 ) ) { return null ; } String value = attributes. remove ( key ) ; if ( value == null ) { return null ; } return value ; }",
        "public String removeIgnoreCase ( String name ) { if ( name == null ) { return null ; } for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. getName ( ). equalsIgnoreCase ( name ) ) { return attributes [ i ]. getValue ( ) ; } } return null ; }",
        "public String removeIgnoreCase ( String name ) { if ( name == null ) { return null ; } for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. getName ( ). equalsIgnoreCase ( name ) ) { return attributes [ i ]. getValue ( ) ; } } return null ; }",
        "public String removeIgnoreCase ( String name ) { if ( name == null ) { return null ; } for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. name. equalsIgnoreCase ( name ) ) { return attributes [ i ]. value ; } } return null ; }",
        "public String removeIgnoreCase ( String name ) { if ( name == null ) { return null ; } for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. name. equalsIgnoreCase ( name ) ) { return attributes [ i ]. value ; } } return null ; }",
        "public String removeIgnoreCase ( String name ) { if ( name == null ) { return null ; } for ( int i = 0 ; i < names. length ; i ++ ) { if ( names [ i ]. equalsIgnoreCase ( name ) ) { return names [ i ] ; } } return null ; }",
        "public void removeIgnoreCase ( String key ) { for ( int i = 0 ; i < attributes. size ( ) ; i ++ ) { Attribute attribute = attributes. get ( i ) ; if ( attribute. getKey ( ). equalsIgnoreCase ( key ) ) { attributes. remove ( i ) ; } } }",
        "public void removeIgnoreCase ( String key ) { for ( int i = 0 ; i < attributes. size ( ) ; i ++ ) { Attribute attr = attributes. get ( i ) ; if ( attr. getKey ( ). equalsIgnoreCase ( key ) ) { attributes. remove ( i ) ; } } }",
        "public void removeIgnoreCase ( String key ) { for ( int i = 0 ; i < _attributes. length ; i ++ ) { if ( _attributes [ i ]. equalsIgnoreCase ( key ) ) { _attributes [ i ] = null ; return ; } } }",
        "public void removeIgnoreCase ( String key ) { for ( int i = 0 ; i < _attributes. length ; i ++ ) { if ( _attributes [ i ]. equalsIgnoreCase ( key ) ) { _attributes [ i ] = null ; break ; } } }",
        "public void removeIgnoreCase ( String key ) { for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. getKey ( ). equalsIgnoreCase ( key ) ) { attributes [ i ]. removeAttribute ( key ) ; return ; } } }",
        "public void removeIgnoreCase ( String key ) { for ( int i = 0 ; i < _attributes. length ; i ++ ) { if ( _attributes [ i ]. equalsIgnoreCase ( key ) ) { _attributes [ i ] = null ; return ; } } }",
        "public void removeIgnoreCase ( String key ) { for ( int i = 0 ; i < _attributes. length ; i ++ ) { if ( _attributes [ i ]. equalsIgnoreCase ( key ) ) { _attributes [ i ] = null ; break ; } } }",
        "public void removeIgnoreCase ( String key ) { for ( int i = 0 ; i < attributes. length ; i ++ ) { if ( attributes [ i ]. equalsIgnoreCase ( key ) ) { attributes [ i ] = null ; return ; } } }",
        "public void removeIgnoreCase ( String key ) { if ( attributes. containsKey ( key ) ) { attributes. remove ( key ) ; } }",
        "public void removeIgnoreCase ( String key ) { if ( attributes. containsKey ( key ) ) { attributes. remove ( key ) ; } }",
        "public < T > T removeIgnoreCase ( String key ) { return doWithJedis ( new JedisCallable < T > ( ) { @ Override public T call ( Jedis jedis ) { return jedis. removeIgnoreCase ( key ) ; } } ) ; }",
        "public < T > T removeIgnoreCase ( String key ) { return doWithJedis ( new JedisCallable < T > ( ) { @ Override public T call ( Jedis jedis ) { jedis. del ( key ) ; return jedis. get ( ) ; } } ) ; }",
        "public < T > T removeIgnoreCase ( String key ) { return doWithJedis ( new JedisCallable < T > ( ) { @ Override public T call ( Jedis jedis ) { return jedis. removeIgnoreCase ( getKey ( ), key ) ; } } ) ; }",
        "public < T > T removeIgnoreCase ( String key ) { return doWithJedis ( new JedisCallable < T > ( ) { @ Override public T call ( Jedis jedis ) { return jedis. delete ( getKey ( ), key ) ; } } ) ; }",
        "public < T > T removeIgnoreCase ( String key ) { return doWithJedis ( new JedisCallable < T > ( ) { @ Override public T call ( Jedis jedis ) { return jedis. remove ( getKey ( ), key ) ; } } ) ; }"
      ]
    },
    "Jsoup_61_/src/main/java/org/jsoup/nodes/Element.java_1092-1093": {
      "loc": "1092-1093",
      "input": "public boolean hasClass(String className) { final String classAttr = attributes.get(\"class\"); final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }",
      "target": "public boolean hasClass(String className) { final String classAttr = attributes.getIgnoreCase(\"class\"); final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }",
      "function range": "1091,5-1132,5",
      "raw_output": [
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). getName ( ). equals ( attribute ) ; } return false ; }",
        "public boolean hasAttributeClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). getName ( ). equals ( attributeName ; } return false ; }",
        "public boolean hasAttributeClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } else { return false ; } }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). equals ( attribute ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). equals ( getClass ( attribute ) ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return true ; } return attributes. get ( attribute ). getClass ( )!= null ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). getName ( ). equals ( attributeName ; } return false ; }",
        "public boolean hasAttributeClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasAttributeClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } else { return false ; } }",
        "public boolean hasAttributeClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). getName ( ). equals ( attributeName ; } return false ; }",
        "public boolean hasAttribute ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasAttribute ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } else { return false ; } }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). getName ( ). equals ( attribute ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). equals ( attribute ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return true ; } return attributes. get ( attribute ). getClass ( )!= null ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). equals ( getClass ( attribute ) ) ; } return false ; }",
        "public boolean hasAttributeClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasAttribute ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasAttributeClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( )!= null ; } else { return false ; } }",
        "public boolean hasAttribute ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( )!= null ; } else { return false ; } }",
        "public boolean hasAttributeClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( )!= null ; } return false ; }"
      ],
      "mid_translation": [
        "Determines if the given attribute has a particular class.",
        "Checks if the given attribute has a particular class.",
        "Determines whether the given attribute has a particular class.",
        "Checks whether the given attribute has a particular class.",
        "Determines if an attribute has a particular class."
      ],
      "output": [
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). getName ( ). equals ( attribute ) ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). getName ( ). equals ( attributeName ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } else { return false ; } }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). equals ( attribute ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). equals ( getClass ( attribute ) ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return true ; } return attributes. get ( attribute ). getClass ( )!= null ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). getName ( ). equals ( attributeName ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } else { return false ; } }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). getName ( ). equals ( attributeName ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } else { return false ; } }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). getName ( ). equals ( attribute ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). equals ( attribute ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return true ; } return attributes. get ( attribute ). getClass ( )!= null ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attribute ) { if ( attributes. containsKey ( attribute ) ) { return attributes. get ( attribute ). getClass ( ). equals ( getClass ( attribute ) ) ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( ). equals ( attributeName ) ; } return false ; }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( )!= null ; } else { return false ; } }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( )!= null ; } else { return false ; } }",
        "public boolean hasClass ( String attributeName ) { if ( attributes. containsKey ( attributeName ) ) { return attributes. get ( attributeName ). getClass ( )!= null ; } return false ; }"
      ]
    },
    "Jsoup_68_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_468-469": {
      "loc": "468-469",
      "input": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { int bottom = stack.size() -1; if (bottom > MaxScopeSearchDepth) { bottom = MaxScopeSearchDepth; } final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; }",
      "target": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; }",
      "function range": "466,5-486,5",
      "raw_output": [
        "protected boolean inSpecificScope ( Class <? > scopeType, Class <? > [ ] baseTypes, Class <? > [ ] extraTypes ) { return inSpecificScope ( scopeType, baseTypes, extraTypes ) ; }",
        "public boolean inSpecificScope ( Class <? > [ ] baseTypes, Class <? > [ ] extraTypes ) { return inSpecificScope ( baseTypes, extraTypes, Collections. < Class <? > > emptyList ( ) ) ; }",
        "public boolean inSpecificScope ( Class <? > [ ] baseTypes, Class <? > [ ] extraTypes ) { return inSpecificScope ( null, baseTypes, extraTypes ) ; }",
        "public boolean inSpecificScope ( Class <? > [ ] baseTypes, Class <? > [ ] extraTypes ) { return inSpecificScope ( baseTypes, Collections. < Class <? > > emptyList ( ), extraTypes ) ; }",
        "public boolean inSpecificScope ( Class <? > [ ] baseTypes, Class <? > [ ] extraTypes ) { return inSpecificScope ( baseTypes, extraTypes, Collections. < Class <? > > emptySet ( ) ) ; }",
        "public static boolean isInSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. equals ( aScope ) ; }",
        "public static boolean isInSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. isSpecificScope ( ) ; }",
        "public static boolean isInSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. isSpecific ( ) ; }",
        "public static boolean isInSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; if ( aScope. equals ( aScope ) ) return true ; return false ; }",
        "public static boolean isInSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. equals ( aScope. getParent ( ) ) ; }",
        "public static boolean isInSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. equals ( aScope ) ; }",
        "public static boolean isInSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. isSpecificScope ( ) ; }",
        "public static boolean isInSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope. equals ( aScope ) ; }",
        "public static boolean isInSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. isSpecific ( ) ; }",
        "public static boolean isInSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. equals ( aScope. getParent ( ) ) ; }",
        "public boolean contains ( IScope scope ) { for ( int i = 0 ; i < scopes. length ; i ++ ) { if ( scopes [ i ]. equals ( scope ) ) { return true ; } } return false ; }",
        "public boolean contains ( IScope scope ) { for ( int i = 0 ; i < scopes. size ( ) ; i ++ ) { if ( scopes. get ( i ). equals ( scope ) ) { return true ; } } return false ; }",
        "public boolean contains ( IScope scope ) { for ( int i = 0 ; i < scopes. length ; i ++ ) { if ( scopes [ i ]. contains ( scope ) ) { return true ; } } return false ; }",
        "public boolean contains ( IScope scope ) { for ( int i = 0 ; i < scopes. size ( ) ; i ++ ) { if ( scopes. get ( i ). contains ( scope ) ) { return true ; } } return false ; }",
        "public boolean contains ( IScope scope ) { for ( int i = 0 ; i < scopes. size ( ) ; i ++ ) { if ( scopes. get ( i ). equals ( scope ) ) return true ; } return false ; }",
        "public boolean contains ( IScope scope ) { for ( IScope child : children ) { if ( child. equals ( scope ) ) { return true ; } } return false ; }",
        "public boolean contains ( IScope scope ) { for ( IScope child : children ) { if ( child. contains ( scope ) ) { return true ; } } return false ; }",
        "public static boolean isInSpecificScope ( @ Nullable final IScope aScope ) { if ( aScope == null ) return false ; return aScope. equals ( aScope. getParent ( ) ) ; }",
        "public static boolean isInSpecificScope ( @ Nullable final IScope aScope ) { if ( aScope == null ) return false ; return aScope. equals ( aScope ) ; }",
        "public static boolean isInSpecificScope ( @ Nullable final IScope aScope ) { if ( aScope == null ) { return false ; } return aScope. equals ( aScope ) ; }"
      ],
      "mid_translation": [
        "Determines if the scope is in the specific scope with the specified base types and extra types.",
        "Determines if the scope is in the specific scope.",
        "Determines whether the scope is in the specific scope.",
        "Determines if the scope is in a specific scope.",
        "Checks whether the scope is in the specific scope."
      ],
      "output": [
        "private boolean inSpecificScope ( Class <? > scopeType, Class <? > [ ] baseTypes, Class <? > [ ] extraTypes ) { return inSpecificScope ( scopeType, baseTypes, extraTypes ) ; }",
        "private boolean inSpecificScope ( Class <? > [ ] baseTypes, Class <? > [ ] extraTypes ) { return inSpecificScope ( baseTypes, extraTypes, Collections. < Class <? > > emptyList ( ) ) ; }",
        "private boolean inSpecificScope ( Class <? > [ ] baseTypes, Class <? > [ ] extraTypes ) { return inSpecificScope ( null, baseTypes, extraTypes ) ; }",
        "private boolean inSpecificScope ( Class <? > [ ] baseTypes, Class <? > [ ] extraTypes ) { return inSpecificScope ( baseTypes, Collections. < Class <? > > emptyList ( ), extraTypes ) ; }",
        "private boolean inSpecificScope ( Class <? > [ ] baseTypes, Class <? > [ ] extraTypes ) { return inSpecificScope ( baseTypes, extraTypes, Collections. < Class <? > > emptySet ( ) ) ; }",
        "private boolean inSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. equals ( aScope ) ; }",
        "private boolean inSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. isSpecificScope ( ) ; }",
        "private boolean inSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. isSpecific ( ) ; }",
        "private boolean inSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; if ( aScope. equals ( aScope ) ) return true ; return false ; }",
        "private boolean inSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. equals ( aScope. getParent ( ) ) ; }",
        "private boolean inSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. equals ( aScope ) ; }",
        "private boolean inSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. isSpecificScope ( ) ; }",
        "private boolean inSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope. equals ( aScope ) ; }",
        "private boolean inSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. isSpecific ( ) ; }",
        "private boolean inSpecificScope ( @ Nonnull final IScope aScope ) { ValueEnforcer. notNull ( aScope, \"Scope\" ) ; return aScope!= null && aScope. equals ( aScope. getParent ( ) ) ; }",
        "private boolean inSpecificScope ( IScope scope ) { for ( int i = 0 ; i < scopes. length ; i ++ ) { if ( scopes [ i ]. equals ( scope ) ) { return true ; } } return false ; }",
        "private boolean inSpecificScope ( IScope scope ) { for ( int i = 0 ; i < scopes. size ( ) ; i ++ ) { if ( scopes. get ( i ). equals ( scope ) ) { return true ; } } return false ; }",
        "private boolean inSpecificScope ( IScope scope ) { for ( int i = 0 ; i < scopes. length ; i ++ ) { if ( scopes [ i ]. contains ( scope ) ) { return true ; } } return false ; }",
        "private boolean inSpecificScope ( IScope scope ) { for ( int i = 0 ; i < scopes. size ( ) ; i ++ ) { if ( scopes. get ( i ). contains ( scope ) ) { return true ; } } return false ; }",
        "private boolean inSpecificScope ( IScope scope ) { for ( int i = 0 ; i < scopes. size ( ) ; i ++ ) { if ( scopes. get ( i ). equals ( scope ) ) return true ; } return false ; }",
        "private boolean inSpecificScope ( IScope scope ) { for ( IScope child : children ) { if ( child. equals ( scope ) ) { return true ; } } return false ; }",
        "private boolean inSpecificScope ( IScope scope ) { for ( IScope child : children ) { if ( child. contains ( scope ) ) { return true ; } } return false ; }",
        "private boolean inSpecificScope ( @ Nullable final IScope aScope ) { if ( aScope == null ) return false ; return aScope. equals ( aScope. getParent ( ) ) ; }",
        "private boolean inSpecificScope ( @ Nullable final IScope aScope ) { if ( aScope == null ) return false ; return aScope. equals ( aScope ) ; }",
        "private boolean inSpecificScope ( @ Nullable final IScope aScope ) { if ( aScope == null ) { return false ; } return aScope. equals ( aScope ) ; }"
      ]
    },
    "Jsoup_75_/src/main/java/org/jsoup/nodes/Attributes.java_319-321": {
      "loc": "319-321",
      "input": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key); if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) { accum.append(\"=\\\"\"); Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
      "target": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key); if (!Attribute.shouldCollapseAttribute(key, val, out)) { accum.append(\"=\\\"\"); Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
      "function range": "310,5-326,5",
      "raw_output": [
        "public static void write ( Document document, Appendable output ) throws IOException { if ( document == null ) { throw new IllegalArgumentException ( \"document cannot be null\" ) ; } write ( document, output, null ) ; }",
        "public static void write ( Document document, Appendable output ) throws IOException { try ( Writer writer = new OutputStreamWriter ( output, StandardCharsets. UTF_8 ) ) { write ( document, writer ) ; } }",
        "public static void write ( Document document, Appendable output ) throws IOException { try ( Writer writer = new OutputStreamWriter ( output, \"UTF-8\" ) ) { write ( document, writer ) ; } }",
        "public static void toHtml ( Document document, Appendable out ) throws IOException { toHtml ( document, out, null ) ; }",
        "public static void write ( Document document, Appendable output ) throws IOException { write ( document, output, false ) ; }",
        "public static Document toDocument ( String htmlString ) { DocumentBuilderFactory factory = DocumentBuilderFactory. newInstance ( ) ; factory. setNamespaceAware ( true ) ; DocumentBuilder builder = factory. newDocumentBuilder ( ) ; return builder. parse ( htmlString ) ; }",
        "public static Document toDocument ( String htmlString ) { DocumentBuilderFactory factory = DocumentBuilderFactory. newInstance ( ) ; factory. setNamespaceAware ( true ) ; DocumentBuilder builder = factory. newDocumentBuilder ( ) ; Document document = builder. parse ( htmlString ) ; return document ; }",
        "public static Document toDocument ( String htmlString ) throws Exception { DocumentBuilderFactory factory = DocumentBuilderFactory. newInstance ( ) ; factory. setNamespaceAware ( true ) ; DocumentBuilder builder = factory. newDocumentBuilder ( ) ; return builder. parse ( htmlString ) ; }",
        "public static Document toDocument ( String htmlString ) { DocumentBuilderFactory factory = DocumentBuilderFactory. newInstance ( ) ; factory. setNamespaceAware ( true ) ; DocumentBuilder builder = factory. newDocumentBuilder ( ) ; return builder. parse ( new StringReader ( htmlString ) ) ; }",
        "public static Document toDocument ( String htmlString ) throws IOException { DocumentBuilderFactory factory = DocumentBuilderFactory. newInstance ( ) ; factory. setNamespaceAware ( true ) ; DocumentBuilder builder = factory. newDocumentBuilder ( ) ; return builder. parse ( htmlString ) ; }",
        "public static < T > Appendable htmlToAppendable ( T html ) { return new Appendable ( ). append ( htmlToAppendable ( html ) ) ; }",
        "public static Appendable htmlToAppendable ( Document document, String encoding ) throws IOException { return htmlToAppendable ( new StreamSource ( document. getInputStream ( ) ), encoding ) ; }",
        "public static < T > Appendable htmlToAppendable ( T html ) { return new Appendable ( ). append ( htmlToAppendable ( html. toString ( ) ) ) ; }",
        "public static Appendable htmlToAppendable ( Document document, String encoding ) throws IOException { return htmlToAppendable ( document, encoding, false ) ; }",
        "public static Appendable htmlToAppendable ( Document document, String encoding ) throws IOException { return htmlToAppendable ( document. open ( encoding ) ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table>\" ) ; sb. append ( \"<tr>\" ) ; sb. append ( \"<th>\" ) ; sb. append ( \"</th>\" ) ; sb. append ( \"</tr>\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table>\" ) ; sb. append ( name ) ; sb. append ( \"</table>\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table>\" ) ; sb. append ( \"<tr>\" ) ; sb. append ( \"<th>\" ) ; sb. append ( \"</th>\" ) ; sb. append ( \"</tr>\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table>\" ) ; sb. append ( \"<tr>\" ) ; sb. append ( \"<th>\" ) ; sb. append ( \"</th>\" ) ; sb. append ( \"</tr>\" ) ; sb. append ( \"</tr>\" ) ; return sb. toString ( ) ; }",
        "public String toHtml ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table>\" ) ; sb. append ( \"<tr>\" ) ; sb. append ( \"<th>\" ) ; sb. append ( \"<th>\" ) ; sb. append ( \"</th>\" ) ; sb. append ( \"</tr>\" ) ; return sb. toString ( ) ; }",
        "public static StringBuilder buffer ( StringBuilder buffer ) { if ( buffer == null ) { throw new NullPointerException ( \"buffer\" ) ; } return buffer. append ( buffer. toString ( ) ) ; }",
        "public static StringBuilder buffer ( StringBuilder buffer ) { if ( buffer == null ) { return null ; } return buffer. append ( buffer. toString ( ) ) ; }",
        "public static StringBuilder buffer ( StringBuilder buffer ) { if ( buffer. length ( ) == 0 ) { return buffer ; } return new StringBuilder ( buffer. toString ( ) ) ; }",
        "public static StringBuilder buffer ( StringBuilder buffer ) { if ( buffer == null ) { return null ; } return buffer. append ( buffer. toString ( ) ). append ( \"\\n\" ) ; }",
        "public static StringBuilder buffer ( StringBuilder buffer ) { if ( buffer. length ( ) == 0 ) { return buffer ; } return buffer. append ( buffer. toString ( ) ) ; }"
      ],
      "mid_translation": [
        "Writes the HTML of the document into the given Appendable.",
        "Converts the contents of an HTML document into an HTML document.",
        "Converts the contents of an HTML document into an Appendable.",
        "Generates the HTML code for the document.",
        "Converts the contents of an HTML buffer into an HTML buffer."
      ],
      "output": [
        "final void html ( Document document, Appendable output ) throws IOException { if ( document == null ) { throw new IllegalArgumentException ( \"document cannot be null\" ) ; } write ( document, output, null ) ; }",
        "final void html ( Document document, Appendable output ) throws IOException { try ( Writer writer = new OutputStreamWriter ( output, StandardCharsets. UTF_8 ) ) { write ( document, writer ) ; } }",
        "final void html ( Document document, Appendable output ) throws IOException { try ( Writer writer = new OutputStreamWriter ( output, \"UTF-8\" ) ) { write ( document, writer ) ; } }",
        "final void html ( Document document, Appendable out ) throws IOException { toHtml ( document, out, null ) ; }",
        "final void html ( Document document, Appendable output ) throws IOException { write ( document, output, false ) ; }",
        "final Document html ( String htmlString ) { DocumentBuilderFactory factory = DocumentBuilderFactory. newInstance ( ) ; factory. setNamespaceAware ( true ) ; DocumentBuilder builder = factory. newDocumentBuilder ( ) ; return builder. parse ( htmlString ) ; }",
        "final Document html ( String htmlString ) { DocumentBuilderFactory factory = DocumentBuilderFactory. newInstance ( ) ; factory. setNamespaceAware ( true ) ; DocumentBuilder builder = factory. newDocumentBuilder ( ) ; Document document = builder. parse ( htmlString ) ; return document ; }",
        "final Document html ( String htmlString ) throws Exception { DocumentBuilderFactory factory = DocumentBuilderFactory. newInstance ( ) ; factory. setNamespaceAware ( true ) ; DocumentBuilder builder = factory. newDocumentBuilder ( ) ; return builder. parse ( htmlString ) ; }",
        "final Document html ( String htmlString ) { DocumentBuilderFactory factory = DocumentBuilderFactory. newInstance ( ) ; factory. setNamespaceAware ( true ) ; DocumentBuilder builder = factory. newDocumentBuilder ( ) ; return builder. parse ( new StringReader ( htmlString ) ) ; }",
        "final Document html ( String htmlString ) throws IOException { DocumentBuilderFactory factory = DocumentBuilderFactory. newInstance ( ) ; factory. setNamespaceAware ( true ) ; DocumentBuilder builder = factory. newDocumentBuilder ( ) ; return builder. parse ( htmlString ) ; }",
        "final < T > Appendable html ( T html ) { return new Appendable ( ). append ( htmlToAppendable ( html ) ) ; }",
        "final Appendable html ( Document document, String encoding ) throws IOException { return htmlToAppendable ( new StreamSource ( document. getInputStream ( ) ), encoding ) ; }",
        "final < T > Appendable html ( T html ) { return new Appendable ( ). append ( htmlToAppendable ( html. toString ( ) ) ) ; }",
        "final Appendable html ( Document document, String encoding ) throws IOException { return htmlToAppendable ( document, encoding, false ) ; }",
        "final Appendable html ( Document document, String encoding ) throws IOException { return htmlToAppendable ( document. open ( encoding ) ) ; }",
        "final String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table>\" ) ; sb. append ( \"<tr>\" ) ; sb. append ( \"<th>\" ) ; sb. append ( \"</th>\" ) ; sb. append ( \"</tr>\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "final String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table>\" ) ; sb. append ( name ) ; sb. append ( \"</table>\" ) ; sb. append ( \"</table>\" ) ; return sb. toString ( ) ; }",
        "final String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table>\" ) ; sb. append ( \"<tr>\" ) ; sb. append ( \"<th>\" ) ; sb. append ( \"</th>\" ) ; sb. append ( \"</tr>\" ) ; return sb. toString ( ) ; }",
        "final String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table>\" ) ; sb. append ( \"<tr>\" ) ; sb. append ( \"<th>\" ) ; sb. append ( \"</th>\" ) ; sb. append ( \"</tr>\" ) ; sb. append ( \"</tr>\" ) ; return sb. toString ( ) ; }",
        "final String html ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( \"<table>\" ) ; sb. append ( \"<tr>\" ) ; sb. append ( \"<th>\" ) ; sb. append ( \"<th>\" ) ; sb. append ( \"</th>\" ) ; sb. append ( \"</tr>\" ) ; return sb. toString ( ) ; }",
        "final StringBuilder html ( StringBuilder buffer ) { if ( buffer == null ) { throw new NullPointerException ( \"buffer\" ) ; } return buffer. append ( buffer. toString ( ) ) ; }",
        "final StringBuilder html ( StringBuilder buffer ) { if ( buffer == null ) { return null ; } return buffer. append ( buffer. toString ( ) ) ; }",
        "final StringBuilder html ( StringBuilder buffer ) { if ( buffer. length ( ) == 0 ) { return buffer ; } return new StringBuilder ( buffer. toString ( ) ) ; }",
        "final StringBuilder html ( StringBuilder buffer ) { if ( buffer == null ) { return null ; } return buffer. append ( buffer. toString ( ) ). append ( \"\\n\" ) ; }",
        "final StringBuilder html ( StringBuilder buffer ) { if ( buffer. length ( ) == 0 ) { return buffer ; } return buffer. append ( buffer. toString ( ) ) ; }"
      ]
    },
    "Jsoup_77_/src/main/java/org/jsoup/parser/XmlTreeBuilder.java_117-118": {
      "loc": "117-118",
      "input": "private void popStackToClose(Token.EndTag endTag) { String elName = endTag.name(); Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } }",
      "target": "private void popStackToClose(Token.EndTag endTag) { String elName = endTag.normalName(); Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } }",
      "function range": "116,5-136,5",
      "raw_output": [
        "private Stack <? > popStack ( ) { Stack <? > stack = stackStack. pop ( ) ; if ( stack!= null ) { stack. pop ( ) ; } return stack ; }",
        "private Stack popStack ( ) { Stack stack = stackStack. pop ( ) ; if ( stack!= null ) { stack. pop ( ) ; } return stack ; }",
        "private Stack <? > popStack ( ) { Stack <? > stack = stackStack. pop ( ) ; stack. pop ( ) ; stackStack. pop ( ) ; return stack ; }",
        "private Stack popStack ( ) { Stack stack = stackStack. pop ( ) ; stack. pop ( ) ; stackStack. pop ( ) ; return stack ; }",
        "private Stack <? > popStack ( ) { Stack <? > stack = stackStack. pop ( ) ; stack. pop ( ) ; return stack ; }",
        "private void popTag ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. close ( ) ; } }",
        "private void popToClose ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. close ( ) ; } }",
        "private void popCloseTag ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. close ( ) ; } }",
        "private void popTag ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. close ( ) ; } stack. pop ( ) ; }",
        "private void popToClose ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. popToClose ( ) ; } }",
        "private void popStack ( ) { if ( stack. isEmpty ( ) ) { return ; } stack. pop ( ) ; stack. remove ( stack. size ( ) - 1 ) ; }",
        "private void popStack ( ) { stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; }",
        "private void popStack ( ) { stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; }",
        "private void popStack ( ) { stack. pop ( ) ; if ( stack. isEmpty ( ) ) { stack. pop ( ) ; } else { stack. pop ( ) ; } }",
        "private void popStack ( ) { if ( stack. isEmpty ( ) ) { return ; } stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; }",
        "private void popStack ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. close ( ) ; } }",
        "private void popStack ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. pop ( ) ; } }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; stack. pop ( ) ; super. visitEnd ( ) ; super. visitEnd ( ) ; }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; stack. pop ( ) ; super. visitEnd ( ) ; }",
        "private void popStack ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( 0 ) ; item. pop ( ) ; } }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; for ( int i = 0 ; i < stack. size ( ) ; i ++ ) { stack. get ( i ). accept ( this ) ; } }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; for ( int i = 0 ; i < stack. size ( ) ; i ++ ) { stack. get ( i ). acceptEnd ( ) ; } }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; for ( int i = 0 ; i < stack. size ( ) ; i ++ ) { stack. get ( i ). visitEnd ( ) ; } }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; if ( stack. isEmpty ( ) ) { super. visitEnd ( ) ; } else { super. visitEnd ( ) ; } }",
        "@ Override public void visitEnd ( ) { super. visitEnd ( ) ; for ( int i = stack. size ( ) - 1 ; i >= 0 ; i -- ) { stack. remove ( i ) ; } }"
      ],
      "mid_translation": [
        "Pop stack to close.",
        "Pop the stack to the close tag.",
        "Pop the stack to close.",
        "pop stack to close.",
        "Closes the top of the stack."
      ],
      "output": [
        "private Stack <? > popStackToClose ( ) { Stack <? > stack = stackStack. pop ( ) ; if ( stack!= null ) { stack. pop ( ) ; } return stack ; }",
        "private Stack popStackToClose ( ) { Stack stack = stackStack. pop ( ) ; if ( stack!= null ) { stack. pop ( ) ; } return stack ; }",
        "private Stack <? > popStackToClose ( ) { Stack <? > stack = stackStack. pop ( ) ; stack. pop ( ) ; stackStack. pop ( ) ; return stack ; }",
        "private Stack popStackToClose ( ) { Stack stack = stackStack. pop ( ) ; stack. pop ( ) ; stackStack. pop ( ) ; return stack ; }",
        "private Stack <? > popStackToClose ( ) { Stack <? > stack = stackStack. pop ( ) ; stack. pop ( ) ; return stack ; }",
        "private void popStackToClose ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. close ( ) ; } }",
        "private void popStackToClose ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. close ( ) ; } }",
        "private void popStackToClose ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. close ( ) ; } }",
        "private void popStackToClose ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. close ( ) ; } stack. pop ( ) ; }",
        "private void popStackToClose ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. popToClose ( ) ; } }",
        "private void popStackToClose ( ) { if ( stack. isEmpty ( ) ) { return ; } stack. pop ( ) ; stack. remove ( stack. size ( ) - 1 ) ; }",
        "private void popStackToClose ( ) { stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; }",
        "private void popStackToClose ( ) { stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; }",
        "private void popStackToClose ( ) { stack. pop ( ) ; if ( stack. isEmpty ( ) ) { stack. pop ( ) ; } else { stack. pop ( ) ; } }",
        "private void popStackToClose ( ) { if ( stack. isEmpty ( ) ) { return ; } stack. pop ( ) ; stack. pop ( ) ; stack. pop ( ) ; }",
        "private void popStackToClose ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. close ( ) ; } }",
        "private void popStackToClose ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( stack. getStackDepth ( ) - 1 ) ; item. pop ( ) ; } }",
        "private void popStackToClose ( ) { super. visitEnd ( ) ; stack. pop ( ) ; super. visitEnd ( ) ; super. visitEnd ( ) ; }",
        "private void popStackToClose ( ) { super. visitEnd ( ) ; stack. pop ( ) ; super. visitEnd ( ) ; }",
        "private void popStackToClose ( ) { if ( stack. getStackDepth ( ) > 0 ) { OpcodeStack. Item item = stack. getStackItem ( 0 ) ; item. pop ( ) ; } }",
        "private void popStackToClose ( ) { super. visitEnd ( ) ; for ( int i = 0 ; i < stack. size ( ) ; i ++ ) { stack. get ( i ). accept ( this ) ; } }",
        "private void popStackToClose ( ) { super. visitEnd ( ) ; for ( int i = 0 ; i < stack. size ( ) ; i ++ ) { stack. get ( i ). acceptEnd ( ) ; } }",
        "private void popStackToClose ( ) { super. visitEnd ( ) ; for ( int i = 0 ; i < stack. size ( ) ; i ++ ) { stack. get ( i ). visitEnd ( ) ; } }",
        "private void popStackToClose ( ) { super. visitEnd ( ) ; if ( stack. isEmpty ( ) ) { super. visitEnd ( ) ; } else { super. visitEnd ( ) ; } }",
        "private void popStackToClose ( ) { super. visitEnd ( ) ; for ( int i = stack. size ( ) - 1 ; i >= 0 ; i -- ) { stack. remove ( i ) ; } }"
      ]
    },
    "Jsoup_86_/src/main/java/org/jsoup/nodes/Comment.java_78-79": {
      "loc": "78-79",
      "input": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null; if (doc.childNodeSize() > 0) { Element el = doc.child(0); decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\")); decl.attributes().addAll(el.attributes()); } return decl; }",
      "target": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null; if (doc.children().size() > 0) { Element el = doc.child(0); decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\")); decl.attributes().addAll(el.attributes()); } return decl; }",
      "function range": "74,5-84,5",
      "raw_output": [
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setValue ( getValue ( ) ) ; return declaration ; }",
        "public static XmlDeclaration asXmlDeclaration ( Node node ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setType ( node. getType ( ) ) ; declaration. setValue ( node. getValue ( ) ) ; return declaration ; }",
        "public static XmlDeclaration asXmlDeclaration ( Node node ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( node. getNodeName ( ) ) ; declaration. setValue ( node. getNodeValue ( ) ) ; return declaration ; }",
        "public static XmlDeclaration asXmlDeclaration ( Node node ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setType ( node. getNodeType ( ) ) ; declaration. setValue ( node. getNodeValue ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setType ( getType ( ) ) ; declaration. setValue ( getValue ( ) ) ; return declaration ; }",
        "public static XmlDeclaration create ( String content, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setContent ( content ) ; declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public static XmlDeclaration create ( String content, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setContent ( content ) ; declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public static XmlDeclaration create ( String content, Map < String, Object > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setContent ( content ) ; declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public static XmlDeclaration create ( String content, Map < String, Object > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setContent ( content ) ; declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public static XmlDeclaration create ( String content, Map < String, Object > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. content = content ; declaration. attributes = attributes ; return declaration ; }",
        "public static XMLDeclaration create ( String content, Map < String, String > attributes ) { return new XMLDeclaration ( content, attributes ) ; }",
        "public static XMLDeclaration create ( String content, Map < String, Object > attributes ) { return new XMLDeclaration ( content, attributes ) ; }",
        "public static XmlDeclaration create ( String content, Map < String, String > attributes ) { XmlDeclaration xmlDeclaration = new XmlDeclaration ( content ) ; xmlDeclaration. setAttributes ( attributes ) ; return xmlDeclaration ; }",
        "public static XmlDeclaration create ( String content, Map < String, Object > attributes ) { XmlDeclaration xmlDeclaration = new XmlDeclaration ( content ) ; xmlDeclaration. setAttributes ( attributes ) ; return xmlDeclaration ; }",
        "public static XmlDeclaration create ( String content, Map < String, Object > attributes ) { XmlDeclaration xmlDeclaration = new XmlDeclaration ( content ) ; addAttributes ( xmlDeclaration, attributes ) ; return xmlDeclaration ; }",
        "public static XmlDeclaration create ( Node node, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( node ) ; declaration. getAttributes ( ). putAll ( attributes ) ; return declaration ; }",
        "public static XmlDeclaration create ( Node node, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( node ) ; if ( attributes!= null ) declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public static XmlDeclaration create ( Node node, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( node ) ; declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public static XmlDeclaration create ( Node node, Map < String, Object > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( node ) ; if ( attributes!= null ) declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public static XmlDeclaration create ( Node node, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( node ) ; if ( attributes!= null ) { declaration. setAttributes ( attributes ) ; } return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setValue ( getValue ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setType ( getType ( ) ) ; declaration. setValue ( getValue ( ) ) ; return declaration ; }",
        "public static XmlDeclaration asXmlDeclaration ( Node node ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( node. getNodeName ( ) ) ; declaration. setValue ( node. getNodeValue ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setValue ( getValue ( ) ) ; declaration. setNamespaceContext ( getNamespaceContext ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setValue ( getValue ( ) ) ; declaration. setType ( getType ( ) ) ; return declaration ; }"
      ],
      "mid_translation": [
        "Returns this node as an XML declaration.",
        "Creates an XML declaration object with the given content and attributes.",
        "Creates an XMLDeclaration object with the given content and attributes.",
        "Creates an XML declaration object with the given node and attributes.",
        "Returns this node as an XML declaration object."
      ],
      "output": [
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setValue ( getValue ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( Node node ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setType ( node. getType ( ) ) ; declaration. setValue ( node. getValue ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( Node node ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( node. getNodeName ( ) ) ; declaration. setValue ( node. getNodeValue ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( Node node ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setType ( node. getNodeType ( ) ) ; declaration. setValue ( node. getNodeValue ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setType ( getType ( ) ) ; declaration. setValue ( getValue ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( String content, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setContent ( content ) ; declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( String content, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setContent ( content ) ; declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( String content, Map < String, Object > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setContent ( content ) ; declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( String content, Map < String, Object > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setContent ( content ) ; declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( String content, Map < String, Object > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. content = content ; declaration. attributes = attributes ; return declaration ; }",
        "public XMLDeclaration asXmlDeclaration ( String content, Map < String, String > attributes ) { return new XMLDeclaration ( content, attributes ) ; }",
        "public XMLDeclaration asXmlDeclaration ( String content, Map < String, Object > attributes ) { return new XMLDeclaration ( content, attributes ) ; }",
        "public XmlDeclaration asXmlDeclaration ( String content, Map < String, String > attributes ) { XmlDeclaration xmlDeclaration = new XmlDeclaration ( content ) ; xmlDeclaration. setAttributes ( attributes ) ; return xmlDeclaration ; }",
        "public XmlDeclaration asXmlDeclaration ( String content, Map < String, Object > attributes ) { XmlDeclaration xmlDeclaration = new XmlDeclaration ( content ) ; xmlDeclaration. setAttributes ( attributes ) ; return xmlDeclaration ; }",
        "public XmlDeclaration asXmlDeclaration ( String content, Map < String, Object > attributes ) { XmlDeclaration xmlDeclaration = new XmlDeclaration ( content ) ; addAttributes ( xmlDeclaration, attributes ) ; return xmlDeclaration ; }",
        "public XmlDeclaration asXmlDeclaration ( Node node, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( node ) ; declaration. getAttributes ( ). putAll ( attributes ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( Node node, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( node ) ; if ( attributes!= null ) declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( Node node, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( node ) ; declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( Node node, Map < String, Object > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( node ) ; if ( attributes!= null ) declaration. setAttributes ( attributes ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( Node node, Map < String, String > attributes ) { XmlDeclaration declaration = new XmlDeclaration ( node ) ; if ( attributes!= null ) { declaration. setAttributes ( attributes ) ; } return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setValue ( getValue ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setType ( getType ( ) ) ; declaration. setValue ( getValue ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( Node node ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( node. getNodeName ( ) ) ; declaration. setValue ( node. getNodeValue ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setValue ( getValue ( ) ) ; declaration. setNamespaceContext ( getNamespaceContext ( ) ) ; return declaration ; }",
        "public XmlDeclaration asXmlDeclaration ( ) { XmlDeclaration declaration = new XmlDeclaration ( ) ; declaration. setName ( getName ( ) ) ; declaration. setValue ( getValue ( ) ) ; declaration. setType ( getType ( ) ) ; return declaration ; }"
      ]
    },
    "Jsoup_88_/src/main/java/org/jsoup/nodes/Attribute.java_80-81": {
      "loc": "80-81",
      "input": "public String getValue() { return val; }",
      "target": "public String getValue() { return Attributes.checkNotNull(val); }",
      "function range": "79,5-81,5",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getValue ( ) { if ( value == null ) { return ( T ) null ; } return ( T ) value ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T get ( String name ) { return ( T ) properties. get ( name ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T get ( String name ) { return ( T ) model. get ( name ) ; }",
        "public String getProperty ( String name ) { if ( name == null ) { return null ; } return properties. getProperty ( name ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getValue ( ) { if ( value == null ) { return null ; } return ( T ) value ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getValue ( ) { if ( value == null ) { return ( T ) null ; } return ( T ) value ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T getValue ( ) { if ( value == null ) { return ( T ) null ; } else { return ( T ) value ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getValue ( ) { if ( value == null ) { value = ( T ) get ( ) ; } return value ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getValue ( ) { if ( value == null ) { return ( T ) null ; } else { return value ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getValue ( ) { if ( value == null ) { return null ; } return ( T ) value ; }",
        "public String getString ( String key ) { Object obj = getValue ( key ) ; return obj == null? null : obj. toString ( ) ; }",
        "public String getString ( String key ) { Object value = getValue ( key ) ; return value == null? null : value. toString ( ) ; }",
        "public String getString ( String key ) { Object value = getValue ( key ) ; if ( value == null ) { return null ; } return value. toString ( ) ; }",
        "public String getString ( String key ) { Object obj = getValue ( key ) ; if ( obj == null ) { return null ; } return obj. toString ( ) ; }",
        "public String getString ( String key ) { Object value = getValue ( key ) ; return value!= null? value. toString ( ) : null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public T get ( ) { lock. readLock ( ). lock ( ) ; try { return value ; } finally { lock. readLock ( ). unlock ( ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public T get ( ) { lock. readLock ( ). lock ( ) ; try { return ( T ) value ; } finally { lock. readLock ( ). unlock ( ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public T get ( ) { lock. readLock ( ). lock ( ) ; try { return ( T ) this. value ; } finally { lock. readLock ( ). unlock ( ) ; } }",
        "public double get ( double x ) { if ( Double. isNaN ( x ) ) { return Double. NaN ; } if ( Double. isInfinite ( x ) ) { return Double. NaN ; } return x ; }",
        "public double get ( double x ) { if ( Double. isNaN ( x ) ) { return Double. NaN ; } if ( Double. isInfinite ( x ) ) { return Double. NaN ; } if ( Double. isNaN ( x ) ) { return x ; } return x ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T get ( String name ) { return ( T ) attributes. get ( name ) ; }",
        "public Object get ( int index ) { if ( index < 0 || index >= length ) throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds\" ) ; return data [ index ] ; }",
        "public Object get ( int index ) { if ( index < 0 || index >= length ) throw new IndexOutOfBoundsException ( \"index=\" + index + \", length=\" + length ) ; return data [ index ] ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T get ( String key ) { return ( T ) attributes. get ( key ) ; }",
        "public Object get ( int index ) { if ( index < 0 || index >= length ) throw new IndexOutOfBoundsException ( \"index=\" + index + \", length=\" + length ) ; return attributes [ index ] ; }"
      ],
      "mid_translation": [
        "Returns the value of the property.",
        "Gets the value.",
        "Returns the value of the property as a string.",
        "Gets the current value.",
        "Returns the value of the attribute."
      ],
      "output": [
        "public < T > T getValue ( ) { if ( value == null ) { return ( T ) null ; } return ( T ) value ; }",
        "public < T > T getValue ( String name ) { return ( T ) properties. get ( name ) ; }",
        "public < T > T getValue ( String name ) { return ( T ) model. get ( name ) ; }",
        "public String getValue ( String name ) { if ( name == null ) { return null ; } return properties. getProperty ( name ) ; }",
        "public < T > T getValue ( ) { if ( value == null ) { return null ; } return ( T ) value ; }",
        "public < T > T getValue ( ) { if ( value == null ) { return ( T ) null ; } return ( T ) value ; }",
        "public T getValue ( ) { if ( value == null ) { return ( T ) null ; } else { return ( T ) value ; } }",
        "public < T > T getValue ( ) { if ( value == null ) { value = ( T ) get ( ) ; } return value ; }",
        "public < T > T getValue ( ) { if ( value == null ) { return ( T ) null ; } else { return value ; } }",
        "public < T > T getValue ( ) { if ( value == null ) { return null ; } return ( T ) value ; }",
        "public String getValue ( String key ) { Object obj = getValue ( key ) ; return obj == null? null : obj. toString ( ) ; }",
        "public String getValue ( String key ) { Object value = getValue ( key ) ; return value == null? null : value. toString ( ) ; }",
        "public String getValue ( String key ) { Object value = getValue ( key ) ; if ( value == null ) { return null ; } return value. toString ( ) ; }",
        "public String getValue ( String key ) { Object obj = getValue ( key ) ; if ( obj == null ) { return null ; } return obj. toString ( ) ; }",
        "public String getValue ( String key ) { Object value = getValue ( key ) ; return value!= null? value. toString ( ) : null ; }",
        "public T getValue ( ) { lock. readLock ( ). lock ( ) ; try { return value ; } finally { lock. readLock ( ). unlock ( ) ; } }",
        "public T getValue ( ) { lock. readLock ( ). lock ( ) ; try { return ( T ) value ; } finally { lock. readLock ( ). unlock ( ) ; } }",
        "public T getValue ( ) { lock. readLock ( ). lock ( ) ; try { return ( T ) this. value ; } finally { lock. readLock ( ). unlock ( ) ; } }",
        "public double getValue ( double x ) { if ( Double. isNaN ( x ) ) { return Double. NaN ; } if ( Double. isInfinite ( x ) ) { return Double. NaN ; } return x ; }",
        "public double getValue ( double x ) { if ( Double. isNaN ( x ) ) { return Double. NaN ; } if ( Double. isInfinite ( x ) ) { return Double. NaN ; } if ( Double. isNaN ( x ) ) { return x ; } return x ; }",
        "public < T > T getValue ( String name ) { return ( T ) attributes. get ( name ) ; }",
        "public Object getValue ( int index ) { if ( index < 0 || index >= length ) throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds\" ) ; return data [ index ] ; }",
        "public Object getValue ( int index ) { if ( index < 0 || index >= length ) throw new IndexOutOfBoundsException ( \"index=\" + index + \", length=\" + length ) ; return data [ index ] ; }",
        "public < T > T getValue ( String key ) { return ( T ) attributes. get ( key ) ; }",
        "public Object getValue ( int index ) { if ( index < 0 || index >= length ) throw new IndexOutOfBoundsException ( \"index=\" + index + \", length=\" + length ) ; return attributes [ index ] ; }"
      ]
    },
    "JxPath_5_/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java_665-668": {
      "loc": "665-668",
      "input": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0 ? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0 ? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1 != null && p1.equals(p2)) { return 0; } if (depth1 == 1) { throw new JXPathException( \"Cannot compare pointers that do not belong to the same tree: '\" + p1 + \"' and '\" + p2 + \"'\"); } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r != 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
      "target": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0 ? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0 ? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1 != null && p1.equals(p2)) { return 0; } if (depth1 == 1) { return 0; } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r != 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
      "function range": "642,5-675,5",
      "raw_output": [
        "private static boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private static boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) return false ; } for ( int i = 0 ; i < y. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) return false ; } return true ; }",
        "private static boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private static boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( y [ i ]!= x [ i ] ) { return false ; } } return true ; }",
        "private static boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private static boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private static boolean compare ( int [ ] x, int [ ] y ) { if ( x. length!= y. length ) { return false ; } for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private static boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) return false ; } for ( int i = 0 ; i < y. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) return false ; } return true ; }",
        "private static boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private static boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( y [ i ]!= x [ i ] ) { return false ; } } return true ; }",
        "private boolean compareDepth ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private boolean compareNodes ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private static boolean compareDepth ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private boolean compareDepth ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private boolean compareDepth ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } for ( int i = 0 ; i < node1. getDepth ( ) ; i ++ ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } } return true ; }",
        "private static boolean compareDepth ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return node1. getDepth ( ) == node2. getDepth ( ) ; }",
        "private static boolean compareDepth ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private static boolean compareDepth ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } for ( int i = 0 ; i < node1. getDepth ( ) ; i ++ ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } } return true ; }",
        "private boolean compareDepth ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private static boolean compareDepth ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return node1. getDepth ( ) == node2. getDepth ( ) ; }",
        "private boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private static boolean compare ( int [ ] x, int [ ] y ) { if ( x. length!= y. length ) { return false ; } for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private boolean compare ( int [ ] x, int [ ] y ) { if ( x. length!= y. length ) { return false ; } for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( y [ i ]!= x [ i ] ) { return false ; } } return true ; }",
        "private static boolean compare ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }"
      ],
      "mid_translation": [
        "Compares two node pointers in the same tree.",
        "Compares two node pointers of the same tree.",
        "Compares two node pointers at the same depth.",
        "Compare two node pointers at the same depth.",
        "Compare two node pointers in the same tree."
      ],
      "output": [
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) return false ; } for ( int i = 0 ; i < y. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) return false ; } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( y [ i ]!= x [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { if ( x. length!= y. length ) { return false ; } for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) return false ; } for ( int i = 0 ; i < y. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) return false ; } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( y [ i ]!= x [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private boolean compareNodePointers ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private boolean compareNodePointers ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private boolean compareNodePointers ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private boolean compareNodePointers ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } for ( int i = 0 ; i < node1. getDepth ( ) ; i ++ ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return node1. getDepth ( ) == node2. getDepth ( ) ; }",
        "private boolean compareNodePointers ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private boolean compareNodePointers ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } for ( int i = 0 ; i < node1. getDepth ( ) ; i ++ ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return true ; }",
        "private boolean compareNodePointers ( Node node1, Node node2 ) { if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } if ( node1. getDepth ( )!= node2. getDepth ( ) ) { return false ; } return node1. getDepth ( ) == node2. getDepth ( ) ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { if ( x. length!= y. length ) { return false ; } for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { if ( x. length!= y. length ) { return false ; } for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } for ( int i = 0 ; i < y. length ; i ++ ) { if ( y [ i ]!= x [ i ] ) { return false ; } } return true ; }",
        "private boolean compareNodePointers ( int [ ] x, int [ ] y ) { for ( int i = 0 ; i < x. length ; i ++ ) { if ( x [ i ]!= y [ i ] ) { return false ; } } return true ; }"
      ]
    },
    "JxPath_10_/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java_42-43": {
      "loc": "42-43",
      "input": "public final Object computeValue(EvalContext context) { return compute(args[0].computeValue(context), args[1].computeValue(context)) ? Boolean.TRUE : Boolean.FALSE; }",
      "target": "public final Object computeValue(EvalContext context) { return compute(args[0].compute(context), args[1].compute(context)) ? Boolean.TRUE : Boolean.FALSE; }",
      "function range": "41,5-44,5",
      "raw_output": [
        "public static double value ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) / Math. sqrt ( Math. pow ( x, 2 ) ) ; }",
        "private double value ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) / Math. sqrt ( Math. pow ( x, 2 ) ) ; }",
        "private double value ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) * Math. sqrt ( Math. pow ( x, 2 ) ) ; }",
        "public static double value ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) * Math. sqrt ( Math. pow ( x, 2 ) ) ; }",
        "public static double value ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getValue ( Class < T > type, Object value ) { if ( value == null ) { return null ; } if ( type == String. class ) { return ( T ) value ; } if ( type == Integer. class ) { return ( T ) Integer. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getValue ( Class < T > type, Object value ) { if ( value == null ) { return null ; } if ( type == String. class ) { return ( T ) value ; } if ( type == Integer. class ) { return ( T ) Integer. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getValue ( Class < T > type, Object value ) { if ( value == null ) { return null ; } if ( type == String. class ) { return ( T ) value ; } if ( type == Integer. class ) { return ( T ) Integer. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getValue ( Class < T > type, Object value ) { if ( value == null ) { return null ; } if ( type == String. class ) { return ( T ) value ; } if ( type == Integer. class ) { return ( T ) Integer. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } return null ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getValue ( Class < T > type, Object value ) { if ( value == null ) { return null ; } if ( type == String. class ) { return ( T ) value ; } if ( type == Integer. class ) { return ( T ) Integer. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } return value ; }",
        "private boolean computeBoolean ( int context ) { switch ( context ) { case 0 : return false ; case 1 : return true ; case 2 : return false ; case 3 : return false ; case 4 : return true ; case 5 : return false ; case 6 : return false ; case 7 : return false ; case 8 : return false ; case 9 : return false ; case 10 : return false ; case 11 : return false ; case 12 : return false ; case 13 : return false ; case 14 : return false ; case 15 : return false ; default : return false ; } }",
        "private boolean computeBoolean ( int context ) { switch ( context ) { case 0 : return false ; case 1 : return true ; case 2 : return false ; case 3 : return false ; case 4 : return true ; case 5 : return false ; case 6 : return false ; case 7 : return true ; case 8 : return false ; case 9 : return false ; case 10 : return false ; case 11 : return false ; case 12 : return false ; case 13 : return false ; case 14 : return false ; case 15 : return false ; default : return false ; } }",
        "private boolean computeBoolean ( int context ) { switch ( context ) { case 0 : return false ; case 1 : return true ; case 2 : return false ; case 3 : return false ; case 4 : return true ; case 5 : return false ; case 6 : return false ; case 7 : return false ; case 8 : return true ; case 9 : return false ; case 10 : return false ; case 11 : return false ; case 12 : return false ; case 13 : return false ; case 14 : return false ; case 15 : return false ; default : return false ; } }",
        "private boolean computeBoolean ( int context ) { switch ( context ) { case 0 : return false ; case 1 : return true ; case 2 : return false ; case 3 : return false ; case 4 : return true ; case 5 : return false ; case 6 : return false ; case 7 : return false ; case 8 : return false ; case 9 : return false ; case 10 : return false ; case 11 : return false ; case 12 : return false ; case 13 : return false ; case 14 : return false ; case 15 : return false ; } return false ; }",
        "private boolean computeBoolean ( int context ) { switch ( context ) { case 0 : return false ; case 1 : return true ; case 2 : return false ; case 3 : return false ; case 4 : return true ; case 5 : return false ; case 6 : return false ; case 7 : return true ; case 8 : return false ; default : throw new IllegalArgumentException ( \"Invalid context: \" + context ) ; } }",
        "public static boolean toBoolean ( Object value ) { if ( value == null ) { return false ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } if ( value instanceof Number ) { return ( ( Number ) value ). doubleValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } return false ; }",
        "public static boolean toBoolean ( Object value ) { if ( value == null ) { return false ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } if ( value instanceof Number ) { return ( ( Number ) value ). doubleValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } return value ; }",
        "public static boolean toBoolean ( Object value ) { if ( value == null ) { return false ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } if ( value instanceof Number ) { return ( ( Number ) value ). doubleValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } return false ; }",
        "public static boolean toBoolean ( Object value ) { if ( value == null ) { return false ; } if ( value instanceof Boolean ) { return ( Boolean ) value ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } if ( value instanceof Number ) { return ( ( Number ) value ). doubleValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } return false ; }",
        "public static boolean toBoolean ( Object value ) { if ( value == null ) { return false ; } if ( value instanceof Boolean ) { return ( Boolean ) value ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } if ( value instanceof Number ) { return Boolean. valueOf ( ( ( Number ) value ). doubleValue ( ) ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } return false ; }",
        "public static Object value ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof Boolean ) { return Boolean. valueOf ( ( ( Boolean ) value ). booleanValue ( ) ) ; } if ( value instanceof Character ) { return Character. valueOf ( ( ( Character ) value ). charValue ( ) ) ; } if ( value instanceof Double ) { return Double. valueOf ( ( ( Double ) value ). doubleValue ( ) ) ; } if ( value instanceof Float ) { return Float. valueOf ( ( ( Float ) value ). floatValue ( ) ) ; } if ( value instanceof Long ) { return Long. valueOf ( ( ( Long ) value ). longValue ( ) ) ; } return value ; }",
        "public static Object value ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof Boolean ) { return Boolean. valueOf ( ( ( Boolean ) value ). booleanValue ( ) ) ; } if ( value instanceof Number ) { return Number. valueOf ( ( ( Number ) value ). doubleValue ( ) ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( ( Date ) value ). getTime ( ) ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( ( Date ) value ). getTime ( ) ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( ( Date ) value ). getTime ( ) ) ; } return value ; }",
        "public static Object value ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof Boolean ) { return Boolean. valueOf ( ( ( Boolean ) value ). booleanValue ( ) ) ; } if ( value instanceof Number ) { return Number. valueOf ( ( ( Number ) value ). doubleValue ( ) ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( ( Date ) value ). getTime ( ) ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( ( Date ) value ). getTime ( ) ) ; } return value ; }",
        "public static Object value ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof Boolean ) { return Boolean. valueOf ( ( ( Boolean ) value ). booleanValue ( ) ) ; } if ( value instanceof Character ) { return Character. valueOf ( ( ( Character ) value ). charValue ( ) ) ; } if ( value instanceof Double ) { return Double. valueOf ( ( ( Double ) value ). doubleValue ( ) ) ; } if ( value instanceof Float ) { return Float. valueOf ( ( ( Float ) value ). floatValue ( ) ) ; } return value ; }",
        "public static Object value ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof Boolean ) { return Boolean. valueOf ( ( Boolean ) value ) ; } if ( value instanceof Number ) { return Number. valueOf ( ( Number ) value ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( Date ) value ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( Date ) value ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( Date ) value ) ; } return value ; }"
      ],
      "mid_translation": [
        "Compute value.",
        "Compute value object for the given context.",
        "Compute a boolean value from the given context.",
        "Compute a boolean value.",
        "Compute value object."
      ],
      "output": [
        "public final double computeValue ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) / Math. sqrt ( Math. pow ( x, 2 ) ) ; }",
        "public final double computeValue ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) / Math. sqrt ( Math. pow ( x, 2 ) ) ; }",
        "public final double computeValue ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) * Math. sqrt ( Math. pow ( x, 2 ) ) ; }",
        "public final double computeValue ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) * Math. sqrt ( Math. pow ( x, 2 ) ) ; }",
        "public final double computeValue ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) ; }",
        "public final < T > T computeValue ( Class < T > type, Object value ) { if ( value == null ) { return null ; } if ( type == String. class ) { return ( T ) value ; } if ( type == Integer. class ) { return ( T ) Integer. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } return null ; }",
        "public final < T > T computeValue ( Class < T > type, Object value ) { if ( value == null ) { return null ; } if ( type == String. class ) { return ( T ) value ; } if ( type == Integer. class ) { return ( T ) Integer. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } return null ; }",
        "public final < T > T computeValue ( Class < T > type, Object value ) { if ( value == null ) { return null ; } if ( type == String. class ) { return ( T ) value ; } if ( type == Integer. class ) { return ( T ) Integer. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } return null ; }",
        "public final < T > T computeValue ( Class < T > type, Object value ) { if ( value == null ) { return null ; } if ( type == String. class ) { return ( T ) value ; } if ( type == Integer. class ) { return ( T ) Integer. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } return null ; }",
        "public final < T > T computeValue ( Class < T > type, Object value ) { if ( value == null ) { return null ; } if ( type == String. class ) { return ( T ) value ; } if ( type == Integer. class ) { return ( T ) Integer. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Boolean. class ) { return ( T ) Boolean. valueOf ( value ) ; } if ( type == Long. class ) { return ( T ) Long. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } if ( type == Float. class ) { return ( T ) Float. valueOf ( value ) ; } if ( type == Double. class ) { return ( T ) Double. valueOf ( value ) ; } return value ; }",
        "public final boolean computeValue ( int context ) { switch ( context ) { case 0 : return false ; case 1 : return true ; case 2 : return false ; case 3 : return false ; case 4 : return true ; case 5 : return false ; case 6 : return false ; case 7 : return false ; case 8 : return false ; case 9 : return false ; case 10 : return false ; case 11 : return false ; case 12 : return false ; case 13 : return false ; case 14 : return false ; case 15 : return false ; default : return false ; } }",
        "public final boolean computeValue ( int context ) { switch ( context ) { case 0 : return false ; case 1 : return true ; case 2 : return false ; case 3 : return false ; case 4 : return true ; case 5 : return false ; case 6 : return false ; case 7 : return true ; case 8 : return false ; case 9 : return false ; case 10 : return false ; case 11 : return false ; case 12 : return false ; case 13 : return false ; case 14 : return false ; case 15 : return false ; default : return false ; } }",
        "public final boolean computeValue ( int context ) { switch ( context ) { case 0 : return false ; case 1 : return true ; case 2 : return false ; case 3 : return false ; case 4 : return true ; case 5 : return false ; case 6 : return false ; case 7 : return false ; case 8 : return true ; case 9 : return false ; case 10 : return false ; case 11 : return false ; case 12 : return false ; case 13 : return false ; case 14 : return false ; case 15 : return false ; default : return false ; } }",
        "public final boolean computeValue ( int context ) { switch ( context ) { case 0 : return false ; case 1 : return true ; case 2 : return false ; case 3 : return false ; case 4 : return true ; case 5 : return false ; case 6 : return false ; case 7 : return false ; case 8 : return false ; case 9 : return false ; case 10 : return false ; case 11 : return false ; case 12 : return false ; case 13 : return false ; case 14 : return false ; case 15 : return false ; } return false ; }",
        "public final boolean computeValue ( int context ) { switch ( context ) { case 0 : return false ; case 1 : return true ; case 2 : return false ; case 3 : return false ; case 4 : return true ; case 5 : return false ; case 6 : return false ; case 7 : return true ; case 8 : return false ; default : throw new IllegalArgumentException ( \"Invalid context: \" + context ) ; } }",
        "public final boolean computeValue ( Object value ) { if ( value == null ) { return false ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } if ( value instanceof Number ) { return ( ( Number ) value ). doubleValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } return false ; }",
        "public final boolean computeValue ( Object value ) { if ( value == null ) { return false ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } if ( value instanceof Number ) { return ( ( Number ) value ). doubleValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } return value ; }",
        "public final boolean computeValue ( Object value ) { if ( value == null ) { return false ; } if ( value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } if ( value instanceof Number ) { return ( ( Number ) value ). doubleValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ). booleanValue ( ) ; } return false ; }",
        "public final boolean computeValue ( Object value ) { if ( value == null ) { return false ; } if ( value instanceof Boolean ) { return ( Boolean ) value ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } if ( value instanceof Number ) { return ( ( Number ) value ). doubleValue ( ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } return false ; }",
        "public final boolean computeValue ( Object value ) { if ( value == null ) { return false ; } if ( value instanceof Boolean ) { return ( Boolean ) value ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } if ( value instanceof Number ) { return Boolean. valueOf ( ( ( Number ) value ). doubleValue ( ) ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } if ( value instanceof String ) { return Boolean. valueOf ( ( String ) value ) ; } return false ; }",
        "public final Object computeValue ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof Boolean ) { return Boolean. valueOf ( ( ( Boolean ) value ). booleanValue ( ) ) ; } if ( value instanceof Character ) { return Character. valueOf ( ( ( Character ) value ). charValue ( ) ) ; } if ( value instanceof Double ) { return Double. valueOf ( ( ( Double ) value ). doubleValue ( ) ) ; } if ( value instanceof Float ) { return Float. valueOf ( ( ( Float ) value ). floatValue ( ) ) ; } if ( value instanceof Long ) { return Long. valueOf ( ( ( Long ) value ). longValue ( ) ) ; } return value ; }",
        "public final Object computeValue ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof Boolean ) { return Boolean. valueOf ( ( ( Boolean ) value ). booleanValue ( ) ) ; } if ( value instanceof Number ) { return Number. valueOf ( ( ( Number ) value ). doubleValue ( ) ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( ( Date ) value ). getTime ( ) ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( ( Date ) value ). getTime ( ) ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( ( Date ) value ). getTime ( ) ) ; } return value ; }",
        "public final Object computeValue ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof Boolean ) { return Boolean. valueOf ( ( ( Boolean ) value ). booleanValue ( ) ) ; } if ( value instanceof Number ) { return Number. valueOf ( ( ( Number ) value ). doubleValue ( ) ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( ( Date ) value ). getTime ( ) ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( ( Date ) value ). getTime ( ) ) ; } return value ; }",
        "public final Object computeValue ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof Boolean ) { return Boolean. valueOf ( ( ( Boolean ) value ). booleanValue ( ) ) ; } if ( value instanceof Character ) { return Character. valueOf ( ( ( Character ) value ). charValue ( ) ) ; } if ( value instanceof Double ) { return Double. valueOf ( ( ( Double ) value ). doubleValue ( ) ) ; } if ( value instanceof Float ) { return Float. valueOf ( ( ( Float ) value ). floatValue ( ) ) ; } return value ; }",
        "public final Object computeValue ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof Boolean ) { return Boolean. valueOf ( ( Boolean ) value ) ; } if ( value instanceof Number ) { return Number. valueOf ( ( Number ) value ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( Date ) value ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( Date ) value ) ; } if ( value instanceof Date ) { return Date. valueOf ( ( Date ) value ) ; } return value ; }"
      ]
    },
    "JxPath_12_/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java_108-109": {
      "loc": "108-109",
      "input": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }",
      "target": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node)); } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }",
      "function range": "87,5-136,5",
      "raw_output": [
        "public static boolean isTest ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isComment ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; default : return false ; } }",
        "public static boolean isTest ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isComment ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; } return false ; }",
        "public static boolean isTest ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isComment ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; default : return false ; } }",
        "public static boolean isTest ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isComment ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; } return false ; }",
        "public static boolean isTest ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; default : return false ; } }",
        "public static boolean isSameType ( Node n, Class <? > c ) { if ( n == null ) { return false ; } if ( c == null ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } return true ; }",
        "public static boolean isSameType ( Node node, Class <? > testClass ) { if ( node == null ) { return testClass == null ; } if ( testClass == null ) { return testClass == null ; } if (! testClass. isAssignableFrom ( node. getClass ( ) ) ) { return testClass == null ; } if (! testClass. isAssignableFrom ( node. getClass ( ) ) ) { return testClass == null ; } return testClass. isAssignableFrom ( node. getClass ( ) ) ; }",
        "public static boolean isSameType ( Node n, Class <? > c ) { if ( n == null ) { return false ; } if ( c == null ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } return c. isAssignableFrom ( n. getClass ( ) ) ; }",
        "public static boolean isSameType ( Node node, Class <? > testClass ) { if ( node == null ) { return testClass == null ; } if ( testClass == null ) { return testClass == null ; } if ( testClass. isAssignableFrom ( node. getClass ( ) ) ) { return testClass. isAssignableFrom ( node. getClass ( ) ) ; } if ( testClass. isAssignableFrom ( node. getClass ( ) ) ) { return testClass. isAssignableFrom ( node. getClass ( ) ) ; } return false ; }",
        "public static boolean isSameType ( Node node, Class <? extends Test > testClass ) { if ( node == null ) { return testClass == null ; } if ( testClass == null ) { return testClass == null ; } if (! testClass. isAssignableFrom ( node. getClass ( ) ) ) { return false ; } if (! testClass. isAssignableFrom ( node. getClass ( ) ) ) { return false ; } return testClass. isAssignableFrom ( node. getClass ( ) ) ; }",
        "public static boolean isSameType ( Node n, Class <? > expected, Class <? > actual ) { if ( n == null ) { return false ; } if ( expected == null ) { return actual == null ; } if ( actual == null ) { return expected == null ; } if ( expected. equals ( actual ) ) { return true ; } if ( expected. equals ( actual ) ) { return true ; } return expected. equals ( actual ) ; }",
        "public static boolean isSameType ( Node n, Class <? > expected, Class <? > actual ) { if ( n == null ) { return false ; } if ( expected == null ) { return actual == null ; } if ( actual == null ) { return expected == null ; } if ( expected. isAssignableFrom ( actual ) ) { return expected == actual ; } if ( expected. isAssignableFrom ( actual ) ) { return expected == actual ; } return false ; }",
        "public static boolean isSameType ( Node n, Class <? > expected, Class <? > actual ) { if ( n == null ) { return false ; } if ( expected == null ) { return actual == null ; } if ( actual == null ) { return expected == null ; } if ( expected. isAssignableFrom ( actual ) ) { return expected. isAssignableFrom ( actual ) ; } return expected. isAssignableFrom ( actual ) ; }",
        "public static boolean isSameType ( Node n, Class <? > expected, Class <? > actual ) { if ( n == null ) { return false ; } if ( expected == null ) { return actual == null ; } if ( actual == null ) { return expected == null ; } if ( expected. equals ( actual ) ) { return true ; } return expected. equals ( actual ) ; }",
        "public static boolean isSameType ( Node n, Class <? > expected, Class <? > actual ) { if ( n == null ) { return false ; } if ( expected == null ) { return actual == null ; } if ( actual == null ) { return expected == null ; } if ( expected. getClass ( )!= actual. getClass ( ) ) { return false ; } return expected. equals ( actual ) ; }",
        "public static boolean nodeEquals ( Node node1, Node node2 ) { if ( node1 == node2 ) return true ; if ( node1 == null || node2 == null ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; return true ; }",
        "public static boolean nodeEquals ( Node node1, Node node2 ) { if ( node1 == node2 ) { return true ; } if ( node1 == null || node2 == null ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } return true ; }",
        "public static boolean nodeEquals ( Node node1, Node node2 ) { if ( node1 == node2 ) { return true ; } if ( node1 == null || node2 == null ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } if ( node2. getParentNode ( )!= node1 ) { return false ; } return true ; }",
        "public static boolean nodeEquals ( Node node1, Node node2 ) { if ( node1 == node2 ) return true ; if ( node1 == null || node2 == null ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; return true ; }",
        "public static boolean nodeEquals ( Node node1, Node node2 ) { if ( node1 == node2 ) return true ; if ( node1 == null || node2 == null ) return false ; if ( node1. getNodeType ( )!= node2. getNodeType ( ) ) return false ; if ( node1. getNodeType ( )!= node2. getNodeType ( ) ) return false ; if ( node1. getNodeType ( )!= node2. getNodeType ( ) ) return false ; if ( node1. getNodeType ( )!= node2. getNodeType ( ) ) return false ; return true ; }",
        "public static boolean isTest ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isTest ( ( Element ) node ) ; } if ( node. getNodeType ( ) == Node. COMMENT_NODE ) { return isTest ( ( Comment ) node ) ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isTest ( ( Element ) node ) ; } return false ; }",
        "public static boolean isTest ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isTest ( ( Element ) node ) ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return isText ( ( Text ) node ) ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isTest ( ( Element ) node ) ; } return false ; }",
        "public static boolean isTest ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isTest ( ( Element ) node ) ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return isText ( ( Text ) node ) ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isText ( ( Text ) node ) ; } return false ; }",
        "public static boolean isTest ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isTest ( ( Comment ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; default : return false ; } }",
        "public static boolean isTest ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; default : return false ; } }"
      ],
      "mid_translation": [
        "Determines if the specified node is a test.",
        "Determines if the specified node is a test of the same type",
        "Determines if the given node is a test of the same type",
        "Determines if two nodes are equal",
        "Determines if the specified node is a test"
      ],
      "output": [
        "public static boolean testNode ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isComment ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; default : return false ; } }",
        "public static boolean testNode ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isComment ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; } return false ; }",
        "public static boolean testNode ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isComment ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; default : return false ; } }",
        "public static boolean testNode ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isComment ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; } return false ; }",
        "public static boolean testNode ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; default : return false ; } }",
        "public static boolean testNode ( Node n, Class <? > c ) { if ( n == null ) { return false ; } if ( c == null ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } return true ; }",
        "public static boolean testNode ( Node node, Class <? > testClass ) { if ( node == null ) { return testClass == null ; } if ( testClass == null ) { return testClass == null ; } if (! testClass. isAssignableFrom ( node. getClass ( ) ) ) { return testClass == null ; } if (! testClass. isAssignableFrom ( node. getClass ( ) ) ) { return testClass == null ; } return testClass. isAssignableFrom ( node. getClass ( ) ) ; }",
        "public static boolean testNode ( Node n, Class <? > c ) { if ( n == null ) { return false ; } if ( c == null ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } if (! c. isAssignableFrom ( n. getClass ( ) ) ) { return false ; } return c. isAssignableFrom ( n. getClass ( ) ) ; }",
        "public static boolean testNode ( Node node, Class <? > testClass ) { if ( node == null ) { return testClass == null ; } if ( testClass == null ) { return testClass == null ; } if ( testClass. isAssignableFrom ( node. getClass ( ) ) ) { return testClass. isAssignableFrom ( node. getClass ( ) ) ; } if ( testClass. isAssignableFrom ( node. getClass ( ) ) ) { return testClass. isAssignableFrom ( node. getClass ( ) ) ; } return false ; }",
        "public static boolean testNode ( Node node, Class <? extends Test > testClass ) { if ( node == null ) { return testClass == null ; } if ( testClass == null ) { return testClass == null ; } if (! testClass. isAssignableFrom ( node. getClass ( ) ) ) { return false ; } if (! testClass. isAssignableFrom ( node. getClass ( ) ) ) { return false ; } return testClass. isAssignableFrom ( node. getClass ( ) ) ; }",
        "public static boolean testNode ( Node n, Class <? > expected, Class <? > actual ) { if ( n == null ) { return false ; } if ( expected == null ) { return actual == null ; } if ( actual == null ) { return expected == null ; } if ( expected. equals ( actual ) ) { return true ; } if ( expected. equals ( actual ) ) { return true ; } return expected. equals ( actual ) ; }",
        "public static boolean testNode ( Node n, Class <? > expected, Class <? > actual ) { if ( n == null ) { return false ; } if ( expected == null ) { return actual == null ; } if ( actual == null ) { return expected == null ; } if ( expected. isAssignableFrom ( actual ) ) { return expected == actual ; } if ( expected. isAssignableFrom ( actual ) ) { return expected == actual ; } return false ; }",
        "public static boolean testNode ( Node n, Class <? > expected, Class <? > actual ) { if ( n == null ) { return false ; } if ( expected == null ) { return actual == null ; } if ( actual == null ) { return expected == null ; } if ( expected. isAssignableFrom ( actual ) ) { return expected. isAssignableFrom ( actual ) ; } return expected. isAssignableFrom ( actual ) ; }",
        "public static boolean testNode ( Node n, Class <? > expected, Class <? > actual ) { if ( n == null ) { return false ; } if ( expected == null ) { return actual == null ; } if ( actual == null ) { return expected == null ; } if ( expected. equals ( actual ) ) { return true ; } return expected. equals ( actual ) ; }",
        "public static boolean testNode ( Node n, Class <? > expected, Class <? > actual ) { if ( n == null ) { return false ; } if ( expected == null ) { return actual == null ; } if ( actual == null ) { return expected == null ; } if ( expected. getClass ( )!= actual. getClass ( ) ) { return false ; } return expected. equals ( actual ) ; }",
        "public static boolean testNode ( Node node1, Node node2 ) { if ( node1 == node2 ) return true ; if ( node1 == null || node2 == null ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; return true ; }",
        "public static boolean testNode ( Node node1, Node node2 ) { if ( node1 == node2 ) { return true ; } if ( node1 == null || node2 == null ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } return true ; }",
        "public static boolean testNode ( Node node1, Node node2 ) { if ( node1 == node2 ) { return true ; } if ( node1 == null || node2 == null ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) { return false ; } if ( node2. getParentNode ( )!= node1 ) { return false ; } return true ; }",
        "public static boolean testNode ( Node node1, Node node2 ) { if ( node1 == node2 ) return true ; if ( node1 == null || node2 == null ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; if ( node1. getParentNode ( )!= node2. getParentNode ( ) ) return false ; return true ; }",
        "public static boolean testNode ( Node node1, Node node2 ) { if ( node1 == node2 ) return true ; if ( node1 == null || node2 == null ) return false ; if ( node1. getNodeType ( )!= node2. getNodeType ( ) ) return false ; if ( node1. getNodeType ( )!= node2. getNodeType ( ) ) return false ; if ( node1. getNodeType ( )!= node2. getNodeType ( ) ) return false ; if ( node1. getNodeType ( )!= node2. getNodeType ( ) ) return false ; return true ; }",
        "public static boolean testNode ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isTest ( ( Element ) node ) ; } if ( node. getNodeType ( ) == Node. COMMENT_NODE ) { return isTest ( ( Comment ) node ) ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isTest ( ( Element ) node ) ; } return false ; }",
        "public static boolean testNode ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isTest ( ( Element ) node ) ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return isText ( ( Text ) node ) ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isTest ( ( Element ) node ) ; } return false ; }",
        "public static boolean testNode ( Node node ) { if ( node == null ) { return false ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isTest ( ( Element ) node ) ; } if ( node. getNodeType ( ) == Node. TEXT_NODE ) { return isText ( ( Text ) node ) ; } if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) { return isText ( ( Text ) node ) ; } return false ; }",
        "public static boolean testNode ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isTest ( ( Comment ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; default : return false ; } }",
        "public static boolean testNode ( Node node ) { switch ( node. getNodeType ( ) ) { case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. COMMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; case Node. ELEMENT_NODE : return isTest ( ( Element ) node ) ; default : return false ; } }"
      ]
    },
    "JxPath_21_/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java_152-153": {
      "loc": "152-153",
      "input": "public int getLength() { return ValueUtils.getLength(getBaseValue()); }",
      "target": "public int getLength() { Object baseValue = getBaseValue(); return baseValue == null ? 1 : ValueUtils.getLength(baseValue); }",
      "function range": "151,5-153,5",
      "raw_output": [
        "public long getLength ( ) { long length = 0 ; for ( int i = 0 ; i < elements. length ; i ++ ) { length += elements [ i ]. getLength ( ) ; } return length ; }",
        "public long getLength ( ) { long length = 0 ; for ( int i = 0 ; i < this. elements. length ; i ++ ) { length += this. elements [ i ]. getLength ( ) ; } return length ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < elements. length ; i ++ ) { ret += elements [ i ]. getLength ( ) ; } return ret ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < this. elements. length ; i ++ ) { ret += this. elements [ i ]. getLength ( ) ; } return ret ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { ret += elements. get ( i ). getLength ( ) ; } return ret ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < properties. length ; i ++ ) { length += properties [ i ]. getLength ( ) ; } return length ; }",
        "public int getLength ( ) { int len = 0 ; for ( int i = 0 ; i < properties. length ; i ++ ) { len += properties [ i ]. getLength ( ) ; } return len ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < properties. length ; i ++ ) { length += properties [ i ]. length ( ) ; } return length ; }",
        "public int getLength ( ) { if ( properties. containsKey ( \"length\" ) ) { return Integer. parseInt ( properties. get ( \"length\" ) ) ; } return 0 ; }",
        "public int getLength ( ) { if ( properties. containsKey ( \"length\" ) ) { return properties. get ( \"length\" ). intValue ( ) ; } return 0 ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < elements. length ; i ++ ) { ret += elements [ i ]. getLength ( ) ; } return ret ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { length += data [ i ]. length ( ) ; } return length ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { ret += data [ i ]. length ( ) ; } return ret ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { ret += data [ i ] ; } return ret ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { length += data [ i ]. length ; } return length ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < attributes. length ; i ++ ) { length += attributes [ i ]. getLength ( ) ; } return length ; }",
        "public int getLength ( ) { int len = 0 ; for ( int i = 0 ; i < attributes. length ; i ++ ) { len += attributes [ i ]. getLength ( ) ; } return len ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < attributes. length ; i ++ ) { ret += attributes [ i ]. getLength ( ) ; } return ret ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { length += data [ i ]. getLength ( ) ; } return length ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { length += data [ i ]. length ( ) ; } return length ; }",
        "public int length ( ) { int length = 0 ; for ( int i = 0 ; i < elements. length ; i ++ ) { length += elements [ i ]. length ( ) ; } return length ; }",
        "public int length ( ) { int length = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { length += data [ i ]. length ( ) ; } return length ; }",
        "public int length ( ) { int length = 0 ; for ( int i = 0 ; i < array. length ; i ++ ) { length += array [ i ]. length ( ) ; } return length ; }",
        "public int length ( ) { int len = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { len += data [ i ]. length ( ) ; } return len ; }",
        "public static int length ( byte [ ] array ) { if ( array == null ) { return 0 ; } int length = 0 ; for ( byte b : array ) { length += b. length ; } return length ; }"
      ],
      "mid_translation": [
        "Gets the length.",
        "Gets the length of this property.",
        "Gets length.",
        "Gets the length of this attribute.",
        "Gets the length of the array."
      ],
      "output": [
        "public long getLength ( ) { long length = 0 ; for ( int i = 0 ; i < elements. length ; i ++ ) { length += elements [ i ]. getLength ( ) ; } return length ; }",
        "public long getLength ( ) { long length = 0 ; for ( int i = 0 ; i < this. elements. length ; i ++ ) { length += this. elements [ i ]. getLength ( ) ; } return length ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < elements. length ; i ++ ) { ret += elements [ i ]. getLength ( ) ; } return ret ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < this. elements. length ; i ++ ) { ret += this. elements [ i ]. getLength ( ) ; } return ret ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { ret += elements. get ( i ). getLength ( ) ; } return ret ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < properties. length ; i ++ ) { length += properties [ i ]. getLength ( ) ; } return length ; }",
        "public int getLength ( ) { int len = 0 ; for ( int i = 0 ; i < properties. length ; i ++ ) { len += properties [ i ]. getLength ( ) ; } return len ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < properties. length ; i ++ ) { length += properties [ i ]. length ( ) ; } return length ; }",
        "public int getLength ( ) { if ( properties. containsKey ( \"length\" ) ) { return Integer. parseInt ( properties. get ( \"length\" ) ) ; } return 0 ; }",
        "public int getLength ( ) { if ( properties. containsKey ( \"length\" ) ) { return properties. get ( \"length\" ). intValue ( ) ; } return 0 ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < elements. length ; i ++ ) { ret += elements [ i ]. getLength ( ) ; } return ret ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { length += data [ i ]. length ( ) ; } return length ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { ret += data [ i ]. length ( ) ; } return ret ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { ret += data [ i ] ; } return ret ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { length += data [ i ]. length ; } return length ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < attributes. length ; i ++ ) { length += attributes [ i ]. getLength ( ) ; } return length ; }",
        "public int getLength ( ) { int len = 0 ; for ( int i = 0 ; i < attributes. length ; i ++ ) { len += attributes [ i ]. getLength ( ) ; } return len ; }",
        "public int getLength ( ) { int ret = 0 ; for ( int i = 0 ; i < attributes. length ; i ++ ) { ret += attributes [ i ]. getLength ( ) ; } return ret ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { length += data [ i ]. getLength ( ) ; } return length ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { length += data [ i ]. length ( ) ; } return length ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < elements. length ; i ++ ) { length += elements [ i ]. length ( ) ; } return length ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { length += data [ i ]. length ( ) ; } return length ; }",
        "public int getLength ( ) { int length = 0 ; for ( int i = 0 ; i < array. length ; i ++ ) { length += array [ i ]. length ( ) ; } return length ; }",
        "public int getLength ( ) { int len = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { len += data [ i ]. length ( ) ; } return len ; }",
        "public int getLength ( byte [ ] array ) { if ( array == null ) { return 0 ; } int length = 0 ; for ( byte b : array ) { length += b. length ; } return length ; }"
      ]
    },
    "Lang_6_/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java_95-96": {
      "loc": "95-96",
      "input": "public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) { pos += Character.charCount(Character.codePointAt(input, pos)); } } }",
      "target": "public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) { pos += Character.charCount(Character.codePointAt(input, pt)); } } }",
      "function range": "75,5-98,5",
      "raw_output": [
        "public static void translate ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { throw new NullPointerException ( \"s == null\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w == null\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) { w. write ( c ) ; } else { w. write ( c ) ; } } }",
        "public static void translate ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { throw new NullPointerException ( \"s == null\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w == null\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; w. write ( c ) ; } w. flush ( ) ; }",
        "public static void translate ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { throw new NullPointerException ( \"s == null\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w == null\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; w. write ( c ) ; } }",
        "public static void translate ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { throw new NullPointerException ( \"s == null\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w == null\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char ch = s. charAt ( i ) ; w. write ( ch ) ; } }",
        "public static void translate ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { throw new NullPointerException ( \"s == null\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w == null\" ) ; } int len = s. length ( ) ; int i = 0 ; while ( i < len ) { char c = s. charAt ( i ) ; w. write ( c ) ; i ++ ; } }",
        "public static Writer toWriter ( CharSequence s, Writer w ) { if ( s == null ) { return w ; } return new OutputStreamWriter ( w, StandardCharsets. UTF_8 ) ; }",
        "public static Writer toWriter ( CharSequence s, Writer w ) throws IOException { return toWriter ( s. toString ( ), w ) ; }",
        "public static Writer toWriter ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { return w ; } return new OutputStreamWriter ( w, StandardCharsets. UTF_8. name ( ) ) ; }",
        "public static Writer toWriter ( CharSequence s, Writer w ) { if ( s == null ) { return w ; } return new OutputStreamWriter ( w, Charset. forName ( \"UTF-8\" ) ) ; }",
        "public static Writer toWriter ( CharSequence s, Writer w ) { if ( s == null ) { return w ; } return new OutputStreamWriter ( w, StandardCharsets. UTF_8. name ( ) ) ; }",
        "public static void transform ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public static void transform ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public static void transform ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public static void transform ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public static int copy ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } return copy ( input. toString ( ), output ) ; }",
        "public static void translate ( CharSequence s, Writer w ) { if ( s == null ) { throw new NullPointerException ( \"s\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; w. write ( c ) ; } }",
        "public static void translate ( CharSequence s, Writer w ) { if ( s == null ) { throw new NullPointerException ( ) ; } if ( w == null ) { throw new NullPointerException ( ) ; } int len = s. length ( ) ; char [ ] buf = new char [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { buf [ i ] = s. charAt ( i ) ; } w. write ( buf ) ; }",
        "public static void translate ( CharSequence s, Writer w ) { if ( s == null ) { throw new NullPointerException ( ) ; } if ( w == null ) { throw new NullPointerException ( ) ; } int len = s. length ( ) ; char [ ] buf = new char [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { buf [ i ] = ( char ) s. charAt ( i ) ; } w. write ( buf ) ; }",
        "public static void translate ( CharSequence s, Writer w ) { if ( s == null ) { throw new NullPointerException ( \"s\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; w. write ( c ) ; } w. flush ( ) ; }",
        "public static void translate ( CharSequence s, Writer w ) { if ( s == null ) { throw new NullPointerException ( \"s\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; w. append ( c ) ; } }",
        "public static void transform ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public static void transform ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public static void transform ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public static void transform ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( input. charAt ( 0 ) =='' ) { output. write ( input. toString ( ) ) ; } else { output. write ( input. toString ( ) ) ; } }",
        "public static void transform ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 ) =='' ) { output. write ( input. toString ( ) ) ; } else { output. write ( input. toString ( ) ) ; } }"
      ],
      "mid_translation": [
        "Translates the given CharSequence into the given Writer.",
        "Translates a CharSequence into a Writer.",
        "Translates the given input CharSequence into the given Writer.",
        "Translates the given char sequence into the given Writer.",
        "Translates the input CharSequence into the given Writer."
      ],
      "output": [
        "public final void translate ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { throw new NullPointerException ( \"s == null\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w == null\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) { w. write ( c ) ; } else { w. write ( c ) ; } } }",
        "public final void translate ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { throw new NullPointerException ( \"s == null\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w == null\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; w. write ( c ) ; } w. flush ( ) ; }",
        "public final void translate ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { throw new NullPointerException ( \"s == null\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w == null\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; w. write ( c ) ; } }",
        "public final void translate ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { throw new NullPointerException ( \"s == null\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w == null\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char ch = s. charAt ( i ) ; w. write ( ch ) ; } }",
        "public final void translate ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { throw new NullPointerException ( \"s == null\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w == null\" ) ; } int len = s. length ( ) ; int i = 0 ; while ( i < len ) { char c = s. charAt ( i ) ; w. write ( c ) ; i ++ ; } }",
        "public final Writer translate ( CharSequence s, Writer w ) { if ( s == null ) { return w ; } return new OutputStreamWriter ( w, StandardCharsets. UTF_8 ) ; }",
        "public final Writer translate ( CharSequence s, Writer w ) throws IOException { return toWriter ( s. toString ( ), w ) ; }",
        "public final Writer translate ( CharSequence s, Writer w ) throws IOException { if ( s == null ) { return w ; } return new OutputStreamWriter ( w, StandardCharsets. UTF_8. name ( ) ) ; }",
        "public final Writer translate ( CharSequence s, Writer w ) { if ( s == null ) { return w ; } return new OutputStreamWriter ( w, Charset. forName ( \"UTF-8\" ) ) ; }",
        "public final Writer translate ( CharSequence s, Writer w ) { if ( s == null ) { return w ; } return new OutputStreamWriter ( w, StandardCharsets. UTF_8. name ( ) ) ; }",
        "public final void translate ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public final void translate ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public final void translate ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public final void translate ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public final int translate ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } return copy ( input. toString ( ), output ) ; }",
        "public final void translate ( CharSequence s, Writer w ) { if ( s == null ) { throw new NullPointerException ( \"s\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; w. write ( c ) ; } }",
        "public final void translate ( CharSequence s, Writer w ) { if ( s == null ) { throw new NullPointerException ( ) ; } if ( w == null ) { throw new NullPointerException ( ) ; } int len = s. length ( ) ; char [ ] buf = new char [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { buf [ i ] = s. charAt ( i ) ; } w. write ( buf ) ; }",
        "public final void translate ( CharSequence s, Writer w ) { if ( s == null ) { throw new NullPointerException ( ) ; } if ( w == null ) { throw new NullPointerException ( ) ; } int len = s. length ( ) ; char [ ] buf = new char [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { buf [ i ] = ( char ) s. charAt ( i ) ; } w. write ( buf ) ; }",
        "public final void translate ( CharSequence s, Writer w ) { if ( s == null ) { throw new NullPointerException ( \"s\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; w. write ( c ) ; } w. flush ( ) ; }",
        "public final void translate ( CharSequence s, Writer w ) { if ( s == null ) { throw new NullPointerException ( \"s\" ) ; } if ( w == null ) { throw new NullPointerException ( \"w\" ) ; } int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; w. append ( c ) ; } }",
        "public final void translate ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public final void translate ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public final void translate ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' && input. charAt ( input. length ( ) - 1 )!='' ) { output. write ( input. toString ( ) ) ; } }",
        "public final void translate ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( input. charAt ( 0 ) =='' ) { output. write ( input. toString ( ) ) ; } else { output. write ( input. toString ( ) ) ; } }",
        "public final void translate ( CharSequence input, Writer output ) throws IOException { if ( input == null ) { throw new IllegalArgumentException ( \"input cannot be null\" ) ; } if ( output == null ) { throw new IllegalArgumentException ( \"output cannot be null\" ) ; } if ( input. length ( ) == 0 ) { throw new IllegalArgumentException ( \"input cannot be empty\" ) ; } if ( output. length ( ) == 0 ) { throw new IllegalArgumentException ( \"output cannot be empty\" ) ; } if ( input. charAt ( 0 ) =='' ) { output. write ( input. toString ( ) ) ; } else { output. write ( input. toString ( ) ) ; } }"
      ]
    },
    "Lang_16_/src/main/java/org/apache/commons/lang3/math/NumberUtils.java_458-459": {
      "loc": "458-459",
      "input": "public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException(\"A blank string is not a valid number\"); } if (str.startsWith(\"--\")) { return null; } if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos || expPos > str.length()) { throw new NumberFormatException(str + \" is not a valid number.\"); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { if (expPos > str.length()) { throw new NumberFormatException(str + \" is not a valid number.\"); } mant = str.substring(0, expPos); } else { mant = str; } dec = null; } if (!Character.isDigit(lastChar) && lastChar != '.') { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; } String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { } return createBigInteger(numeric); } throw new NumberFormatException(str + \" is not a valid number.\"); case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } case 'd' : case 'D' : try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } try { return createBigDecimal(numeric); } catch (NumberFormatException e) { } default : throw new NumberFormatException(str + \" is not a valid number.\"); } } else { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { exp = null; } if (dec == null && exp == null) { try { return createInteger(str); } catch (NumberFormatException nfe) { } try { return createLong(str); } catch (NumberFormatException nfe) { } return createBigInteger(str); } else { boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } return createBigDecimal(str); } } }",
      "target": "public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException(\"A blank string is not a valid number\"); } if (str.startsWith(\"--\")) { return null; } if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos || expPos > str.length()) { throw new NumberFormatException(str + \" is not a valid number.\"); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { if (expPos > str.length()) { throw new NumberFormatException(str + \" is not a valid number.\"); } mant = str.substring(0, expPos); } else { mant = str; } dec = null; } if (!Character.isDigit(lastChar) && lastChar != '.') { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; } String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { } return createBigInteger(numeric); } throw new NumberFormatException(str + \" is not a valid number.\"); case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } case 'd' : case 'D' : try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } try { return createBigDecimal(numeric); } catch (NumberFormatException e) { } default : throw new NumberFormatException(str + \" is not a valid number.\"); } } else { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { exp = null; } if (dec == null && exp == null) { try { return createInteger(str); } catch (NumberFormatException nfe) { } try { return createLong(str); } catch (NumberFormatException nfe) { } return createBigInteger(str); } else { boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } return createBigDecimal(str); } } }",
      "function range": "444,5-594,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Lang_21_/src/main/java/org/apache/commons/lang3/time/DateUtils.java_265-266": {
      "loc": "265-266",
      "input": "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); }",
      "target": "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); }",
      "function range": "258,5-270,5",
      "raw_output": [
        "public static boolean isSame ( Date date, Date time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; return c. equals ( time ) ; }",
        "public static boolean isSame ( Date date, Date time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; return c. equals ( c. getTime ( ) ) ; }",
        "public static boolean isSame ( Date date, Date time ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. equals ( time ) ; }",
        "public static boolean isSame ( Date date, Date time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; return c. compare ( time, c. getTime ( ) ) == 0 ; }",
        "public static boolean isSame ( Date date, Date time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, time. getHours ( ) ) ; c. set ( Calendar. MINUTE, time. getMinutes ( ) ) ; c. set ( Calendar. SECOND, time. getSeconds ( ) ) ; return c. equals ( c ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime date ) { if ( date == null ) { return false ; } final LocalDateTime localTime = date. toLocalDateTime ( ) ; if ( localTime == null ) { return false ; } return localTime. isAfter ( localTime ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime date ) { if ( date == null ) { return false ; } final LocalDateTime localDate = date. toLocalDateTime ( ) ; if ( localDate == null ) { return false ; } return localDate. isAfter ( localDate ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime date ) { if ( date == null ) { return false ; } final LocalDateTime localTime = date. toLocalDateTime ( ) ; if ( localTime == null ) { return false ; } return localTime. isBefore ( localTime ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime date ) { if ( date == null ) { return false ; } final LocalDateTime localTime = date. toLocalDateTime ( ) ; return localTime. isBefore ( localTime ) && localTime. isAfter ( localTime ) ; }",
        "public static boolean isSameLocalDateTime ( final LocalDateTime date ) { if ( date == null ) { return false ; } final LocalDateTime localDateTime = date. toLocalDateTime ( ) ; if ( localDateTime == null ) { return false ; } return localDateTime. isAfter ( localDateTime ) ; }",
        "public static boolean isSameTime ( Date date, Date time ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. getTimeInMillis ( ) == time. getTimeInMillis ( ) ; }",
        "public static boolean isSame ( Date date, Date time ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. get ( Calendar. SECOND ) == time. get ( Calendar. MILLISECOND ) ; }",
        "public static boolean isSameTime ( Date date, Date time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; return c. equals ( time ) ; }",
        "public static boolean isSameTime ( Date date, Date time ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. get ( Calendar. DATE ) == time. get ( Calendar. DATE ) ; }",
        "public static boolean isSame ( Date date, Date time ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. get ( Calendar. DATE ) == time. get ( Calendar. DATE ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime localTime ) { if ( localTime == null ) { return false ; } if ( localTime. isBefore ( localTime ) ) { return false ; } if ( localTime. isAfter ( localTime ) ) { return false ; } return localTime. isBefore ( localTime ) && localTime. isAfter ( localTime ) ; }",
        "public static boolean isSameLocal ( final LocalDate localDate ) { if ( localDate == null ) { return false ; } if ( localDate. isBefore ( localDate ) ) { return false ; } if ( localDate. isAfter ( localDate ) ) { return false ; } return localDate. isBefore ( localDate ) && localDate. isAfter ( localDate ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime localTime ) { if ( localTime == null ) { return false ; } if ( localTime. isBefore ( localTime ) ) { return false ; } if ( localTime. isAfter ( localTime ) ) { return false ; } return localTime. isBefore ( localTime ) || localTime. isAfter ( localTime ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime localTime ) { if ( localTime == null ) { return false ; } if ( localTime. isBefore ( localTime ) ) { return false ; } if ( localTime. isAfter ( localTime ) ) { return false ; } return localTime. isBefore ( localTime ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime localTime ) { if ( localTime == null ) { return false ; } if ( localTime. isBefore ( localTime ) ) { return localTime. isAfter ( localTime ) ; } if ( localTime. isAfter ( localTime ) ) { return localTime. isBefore ( localTime ) ; } return false ; }",
        "public static boolean isSameLocalTime ( Date date, Date localTime ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; return c. equals ( localTime ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date localTime ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. equals ( localTime ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date localTime ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. setTime ( localTime ) ; return cal. get ( Calendar. HOUR_OF_DAY ) == 0 && cal. get ( Calendar. MINUTE ) == 0 && cal. get ( Calendar. SECOND ) == 0 ; }",
        "public static boolean isSameLocalTime ( Date date, Date localTime ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return isSameLocalTime ( cal. getTime ( ) ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date localTime ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; return c. equals ( localTime ) ; }"
      ],
      "mid_translation": [
        "Returns true if the specified time component of the specified date is the same as the specified time component.",
        "Returns true if the specified date is the same local time as the specified date.",
        "Determines whether the specified time component of the specified date is the same as the specified time component.",
        "Returns true if the specified date is the same as the specified local time.",
        "Returns true if the specified time is the same as the local time of the specified date."
      ],
      "output": [
        "public static boolean isSameLocalTime ( Date date, Date time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; return c. equals ( time ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; return c. equals ( c. getTime ( ) ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date time ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. equals ( time ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; return c. compare ( time, c. getTime ( ) ) == 0 ; }",
        "public static boolean isSameLocalTime ( Date date, Date time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, time. getHours ( ) ) ; c. set ( Calendar. MINUTE, time. getMinutes ( ) ) ; c. set ( Calendar. SECOND, time. getSeconds ( ) ) ; return c. equals ( c ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime date ) { if ( date == null ) { return false ; } final LocalDateTime localTime = date. toLocalDateTime ( ) ; if ( localTime == null ) { return false ; } return localTime. isAfter ( localTime ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime date ) { if ( date == null ) { return false ; } final LocalDateTime localDate = date. toLocalDateTime ( ) ; if ( localDate == null ) { return false ; } return localDate. isAfter ( localDate ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime date ) { if ( date == null ) { return false ; } final LocalDateTime localTime = date. toLocalDateTime ( ) ; if ( localTime == null ) { return false ; } return localTime. isBefore ( localTime ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime date ) { if ( date == null ) { return false ; } final LocalDateTime localTime = date. toLocalDateTime ( ) ; return localTime. isBefore ( localTime ) && localTime. isAfter ( localTime ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime date ) { if ( date == null ) { return false ; } final LocalDateTime localDateTime = date. toLocalDateTime ( ) ; if ( localDateTime == null ) { return false ; } return localDateTime. isAfter ( localDateTime ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date time ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. getTimeInMillis ( ) == time. getTimeInMillis ( ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date time ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. get ( Calendar. SECOND ) == time. get ( Calendar. MILLISECOND ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date time ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; return c. equals ( time ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date time ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. get ( Calendar. DATE ) == time. get ( Calendar. DATE ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date time ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. get ( Calendar. DATE ) == time. get ( Calendar. DATE ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime localTime ) { if ( localTime == null ) { return false ; } if ( localTime. isBefore ( localTime ) ) { return false ; } if ( localTime. isAfter ( localTime ) ) { return false ; } return localTime. isBefore ( localTime ) && localTime. isAfter ( localTime ) ; }",
        "public static boolean isSameLocalTime ( final LocalDate localDate ) { if ( localDate == null ) { return false ; } if ( localDate. isBefore ( localDate ) ) { return false ; } if ( localDate. isAfter ( localDate ) ) { return false ; } return localDate. isBefore ( localDate ) && localDate. isAfter ( localDate ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime localTime ) { if ( localTime == null ) { return false ; } if ( localTime. isBefore ( localTime ) ) { return false ; } if ( localTime. isAfter ( localTime ) ) { return false ; } return localTime. isBefore ( localTime ) || localTime. isAfter ( localTime ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime localTime ) { if ( localTime == null ) { return false ; } if ( localTime. isBefore ( localTime ) ) { return false ; } if ( localTime. isAfter ( localTime ) ) { return false ; } return localTime. isBefore ( localTime ) ; }",
        "public static boolean isSameLocalTime ( final LocalDateTime localTime ) { if ( localTime == null ) { return false ; } if ( localTime. isBefore ( localTime ) ) { return localTime. isAfter ( localTime ) ; } if ( localTime. isAfter ( localTime ) ) { return localTime. isBefore ( localTime ) ; } return false ; }",
        "public static boolean isSameLocalTime ( Date date, Date localTime ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; return c. equals ( localTime ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date localTime ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. equals ( localTime ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date localTime ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. setTime ( localTime ) ; return cal. get ( Calendar. HOUR_OF_DAY ) == 0 && cal. get ( Calendar. MINUTE ) == 0 && cal. get ( Calendar. SECOND ) == 0 ; }",
        "public static boolean isSameLocalTime ( Date date, Date localTime ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return isSameLocalTime ( cal. getTime ( ) ) ; }",
        "public static boolean isSameLocalTime ( Date date, Date localTime ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; return c. equals ( localTime ) ; }"
      ]
    },
    "Lang_26_/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java_820-821": {
      "loc": "820-821",
      "input": "public String format(Date date) { Calendar c = new GregorianCalendar(mTimeZone); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
      "target": "public String format(Date date) { Calendar c = new GregorianCalendar(mTimeZone, mLocale); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
      "function range": "819,5-823,5",
      "raw_output": [
        "public static String getDateAsString ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. toString ( ) ; }",
        "public static String dateToString ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return dateToString ( cal ) ; }",
        "public static String getDateAsString ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return getDateAsString ( cal ) ; }",
        "public static String getDateAsString ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) + c. get ( Calendar. MINUTE ) ; }",
        "public static String getDateAsString ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return formatDate ( cal ) ; }",
        "public static String formatDate ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return formatDate ( cal ) ; }",
        "public static String formatDate ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return formatDate ( c ) ; }",
        "public static String dateToString ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return dateToString ( cal ) ; }",
        "public static String formatDate ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return formatDateTime ( cal ) ; }",
        "public static String formatDate ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return format ( cal ) ; }",
        "public static String getDateAsString ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. toString ( ) ; }",
        "public static String getDateAsString ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return getDateAsString ( cal ) ; }",
        "public static String getDateAsString ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. format ( c. getTime ( ) ) ; }",
        "public static String getDateAsString ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return format ( cal ) ; }",
        "public static String getDateAsString ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return formatDate ( cal ) ; }",
        "public static String format ( Date date ) { SimpleDateFormat sdf = new SimpleDateFormat ( \"yyyy-MM-dd\" ) ; sdf. setTimeZone ( TimeZone. getTimeZone ( \"GMT\" ) ) ; return sdf. format ( date ) ; }",
        "public static String format ( Date date, String format ) { SimpleDateFormat sdf = new SimpleDateFormat ( format ) ; sdf. setTimeZone ( TimeZone. getTimeZone ( \"GMT\" ) ) ; return sdf. format ( date ) ; }",
        "public static String format ( Date date ) { SimpleDateFormat formatter = new SimpleDateFormat ( \"yyyy-MM-dd\" ) ; formatter. setTimeZone ( TimeZone. getTimeZone ( \"GMT\" ) ) ; formatter. format ( date ) ; return formatter. toString ( ) ; }",
        "public static String format ( Date date ) { SimpleDateFormat formatter = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss\" ) ; formatter. setTimeZone ( TimeZone. getTimeZone ( \"GMT\" ) ) ; return formatter. format ( date ) ; }",
        "public static String format ( Date date ) { SimpleDateFormat formatter = new SimpleDateFormat ( \"yyyy-MM-dd\" ) ; formatter. setTimeZone ( TimeZone. getTimeZone ( \"GMT\" ) ) ; return formatter. format ( date ) ; }",
        "public String getAsText ( ) { DateFormat df = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ) ; return df. format ( new Date ( ) ) ; }",
        "public String getAsText ( ) { DateFormat df = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\" ) ; return df. format ( new Date ( ) ) ; }",
        "public String getAsText ( ) { DateFormat df = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ) ; return df. format ( getTime ( ) ) ; }",
        "public static String formatTime ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return formatTime ( cal ) ; }",
        "public String getAsText ( ) { DateFormat df = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ) ; return df. format ( this ) ; }"
      ],
      "mid_translation": [
        "Format the input date as a string.",
        "Format the input date to a string.",
        "Format the given date as a string.",
        "Format the given time as a string.",
        "Format the time as a string."
      ],
      "output": [
        "public String format ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. toString ( ) ; }",
        "public String format ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return dateToString ( cal ) ; }",
        "public String format ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return getDateAsString ( cal ) ; }",
        "public String format ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) + c. get ( Calendar. MINUTE ) ; }",
        "public String format ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return formatDate ( cal ) ; }",
        "public String format ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return formatDate ( cal ) ; }",
        "public String format ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return formatDate ( c ) ; }",
        "public String format ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return dateToString ( cal ) ; }",
        "public String format ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return formatDateTime ( cal ) ; }",
        "public String format ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return format ( cal ) ; }",
        "public String format ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. toString ( ) ; }",
        "public String format ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return getDateAsString ( cal ) ; }",
        "public String format ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. format ( c. getTime ( ) ) ; }",
        "public String format ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return format ( cal ) ; }",
        "public String format ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return formatDate ( cal ) ; }",
        "public String format ( Date date ) { SimpleDateFormat sdf = new SimpleDateFormat ( \"yyyy-MM-dd\" ) ; sdf. setTimeZone ( TimeZone. getTimeZone ( \"GMT\" ) ) ; return sdf. format ( date ) ; }",
        "public String format ( Date date, String format ) { SimpleDateFormat sdf = new SimpleDateFormat ( format ) ; sdf. setTimeZone ( TimeZone. getTimeZone ( \"GMT\" ) ) ; return sdf. format ( date ) ; }",
        "public String format ( Date date ) { SimpleDateFormat formatter = new SimpleDateFormat ( \"yyyy-MM-dd\" ) ; formatter. setTimeZone ( TimeZone. getTimeZone ( \"GMT\" ) ) ; formatter. format ( date ) ; return formatter. toString ( ) ; }",
        "public String format ( Date date ) { SimpleDateFormat formatter = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss\" ) ; formatter. setTimeZone ( TimeZone. getTimeZone ( \"GMT\" ) ) ; return formatter. format ( date ) ; }",
        "public String format ( Date date ) { SimpleDateFormat formatter = new SimpleDateFormat ( \"yyyy-MM-dd\" ) ; formatter. setTimeZone ( TimeZone. getTimeZone ( \"GMT\" ) ) ; return formatter. format ( date ) ; }",
        "public String format ( ) { DateFormat df = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ) ; return df. format ( new Date ( ) ) ; }",
        "public String format ( ) { DateFormat df = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\" ) ; return df. format ( new Date ( ) ) ; }",
        "public String format ( ) { DateFormat df = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ) ; return df. format ( getTime ( ) ) ; }",
        "public String format ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return formatTime ( cal ) ; }",
        "public String format ( ) { DateFormat df = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ) ; return df. format ( this ) ; }"
      ]
    },
    "Lang_29_/src/main/java/org/apache/commons/lang3/SystemUtils.java_1672-1673": {
      "loc": "1672-1673",
      "input": "static float toJavaVersionInt(String version) { <mask> return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE)); }",
      "target": "static int toJavaVersionInt(String version) { <mask> return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE)); }",
      "function range": "1672,5-1674,5",
      "raw_output": [
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major * 100 + minor * 100 + patch * 100 ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length < 2 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length < 2 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major * 100 + minor * 100 + patch * 100 ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return 0 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return 0 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } Matcher matcher = JAVA_VERSION_PATTERN. matcher ( version ) ; if ( matcher. find ( ) ) { return matcher. group ( 1 ) ; } else { return - 1 ; } }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version ) ; int minor = Integer. parseInt ( version ) ; int patch = Integer. parseInt ( version ) ; return major + minor + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } Matcher matcher = JAVA_VERSION_PATTERN. matcher ( version ) ; if ( matcher. matches ( ) ) { return matcher. group ( 1 ) ; } else { return - 1 ; } }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } Matcher matcher = JAVA_VERSION_PATTERN. matcher ( version ) ; if ( matcher. find ( ) ) { return matcher. group ( 1 ) ; } return - 1 ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } Matcher matcher = JAVA_VERSION_PATTERN. matcher ( version ) ; if ( matcher. matches ( ) ) { return Integer. parseInt ( matcher. group ( 1 ) ) ; } return - 1 ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length < 2 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 2 ) { return Integer. parseInt ( parts [ 0 ] ) ; } else if ( parts. length == 3 ) { return Integer. parseInt ( parts [ 1 ] ) ; } else { return - 1 ; } }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 1 ) { return Integer. parseInt ( parts [ 0 ] ) ; } else if ( parts. length == 2 ) { return Integer. parseInt ( parts [ 0 ] ) ; } else { return - 1 ; } }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 1 ) { return Integer. parseInt ( parts [ 0 ] ) ; } else if ( parts. length == 2 ) { return Integer. parseInt ( parts [ 1 ] ) ; } else { return - 1 ; } }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major * 16 + minor * 16 + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major * 16 + minor * 8 + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major - minor + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version. substring ( 0, 4 ) ) ; int minor = Integer. parseInt ( version. substring ( 4, 5 ) ) ; int patch = Integer. parseInt ( version. substring ( 5, 6 ) ) ; return major + minor + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version. substring ( 0, 4 ) ) ; int minor = Integer. parseInt ( version. substring ( 4 ) ) ; int patch = Integer. parseInt ( version. substring ( 4 ) ) ; return major + minor + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version. substring ( 0, 4 ) ) ; int minor = Integer. parseInt ( version. substring ( 4, 5 ) ) ; int patch = Integer. parseInt ( version. substring ( 5, 6 ) ) ; return major - minor + patch ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version ) ; int minor = Integer. parseInt ( version ) ; int patch = Integer. parseInt ( version ) ; return major * 100 + minor * 100 + patch * 100 ; }",
        "public static int toJavaVersion ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version. substring ( 0, 4 ) ) ; int minor = Integer. parseInt ( version. substring ( 4, 5 ) ) ; int patch = Integer. parseInt ( version. substring ( 5, 6 ) ) ; return major * 10 + minor + patch ; }"
      ],
      "mid_translation": [
        "Converts a Java version string to a Java version int.",
        "Converts Java version string to Java version int.",
        "Converts Java version to Java version int.",
        "Converts a Java version to a Java version int.",
        "Converts a Java version string to a Java version number."
      ],
      "output": [
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major * 100 + minor * 100 + patch * 100 ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length < 2 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length < 2 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major * 100 + minor * 100 + patch * 100 ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return 0 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return 0 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } Matcher matcher = JAVA_VERSION_PATTERN. matcher ( version ) ; if ( matcher. find ( ) ) { return matcher. group ( 1 ) ; } else { return - 1 ; } }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version ) ; int minor = Integer. parseInt ( version ) ; int patch = Integer. parseInt ( version ) ; return major + minor + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } Matcher matcher = JAVA_VERSION_PATTERN. matcher ( version ) ; if ( matcher. matches ( ) ) { return matcher. group ( 1 ) ; } else { return - 1 ; } }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } Matcher matcher = JAVA_VERSION_PATTERN. matcher ( version ) ; if ( matcher. find ( ) ) { return matcher. group ( 1 ) ; } return - 1 ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } Matcher matcher = JAVA_VERSION_PATTERN. matcher ( version ) ; if ( matcher. matches ( ) ) { return Integer. parseInt ( matcher. group ( 1 ) ) ; } return - 1 ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length < 2 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 2 ) { return Integer. parseInt ( parts [ 0 ] ) ; } else if ( parts. length == 3 ) { return Integer. parseInt ( parts [ 1 ] ) ; } else { return - 1 ; } }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 1 ) { return Integer. parseInt ( parts [ 0 ] ) ; } else if ( parts. length == 2 ) { return Integer. parseInt ( parts [ 0 ] ) ; } else { return - 1 ; } }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 1 ) { return Integer. parseInt ( parts [ 0 ] ) ; } else if ( parts. length == 2 ) { return Integer. parseInt ( parts [ 1 ] ) ; } else { return - 1 ; } }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major + minor + patch + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major * 16 + minor * 16 + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major * 16 + minor * 8 + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } String [ ] parts = version. split ( \"\\\\.\" ) ; if ( parts. length == 0 ) { return - 1 ; } int major = Integer. parseInt ( parts [ 0 ] ) ; int minor = Integer. parseInt ( parts [ 1 ] ) ; int patch = Integer. parseInt ( parts [ 2 ] ) ; return major - minor + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version. substring ( 0, 4 ) ) ; int minor = Integer. parseInt ( version. substring ( 4, 5 ) ) ; int patch = Integer. parseInt ( version. substring ( 5, 6 ) ) ; return major + minor + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version. substring ( 0, 4 ) ) ; int minor = Integer. parseInt ( version. substring ( 4 ) ) ; int patch = Integer. parseInt ( version. substring ( 4 ) ) ; return major + minor + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version. substring ( 0, 4 ) ) ; int minor = Integer. parseInt ( version. substring ( 4, 5 ) ) ; int patch = Integer. parseInt ( version. substring ( 5, 6 ) ) ; return major - minor + patch ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version ) ; int minor = Integer. parseInt ( version ) ; int patch = Integer. parseInt ( version ) ; return major * 100 + minor * 100 + patch * 100 ; }",
        "static int toJavaVersionInt ( String version ) { if ( version == null ) { return - 1 ; } int major = Integer. parseInt ( version. substring ( 0, 4 ) ) ; int minor = Integer. parseInt ( version. substring ( 4, 5 ) ) ; int patch = Integer. parseInt ( version. substring ( 5, 6 ) ) ; return major * 10 + minor + patch ; }"
      ]
    },
    "Lang_33_/src/main/java/org/apache/commons/lang3/ClassUtils.java_910-911": {
      "loc": "910-911",
      "input": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) { classes[i] = array[i].getClass(); } return classes; }",
      "target": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) { classes[i] = array[i] == null ? null : array[i].getClass(); } return classes; }",
      "function range": "902,5-913,5",
      "raw_output": [
        "public static Class <? > [ ] toClassArray ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClassArray ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClassArray ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClassArray ( Object [ ] array ) { Class <? > [ ] ret = new Class <? > [ array. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = array [ i ]. getClass ( ) ; } return ret ; }",
        "public static Class <? > [ ] asClassArray ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClassArray ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClassArray ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toArray ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toArray ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] getClassArray ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] getClassArray ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClassArray ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toArray ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClassArray ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toArray ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClassArray ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClassArray ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] asClassArray ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] asClassArray ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClassArray ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClassArray ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClassArray ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClassArray ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toArray ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toArray ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }"
      ],
      "mid_translation": [
        "Converts an object array to a class array.",
        "Converts an Object array to a Class array.",
        "Converts an Object array into a Class array.",
        "Converts an object array into a class array.",
        "Converts an object array to a Class array."
      ],
      "output": [
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClass ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] ret = new Class <? > [ array. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = array [ i ]. getClass ( ) ; } return ret ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClass ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClass ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClass ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClass ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClass ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClass ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class [ ] toClass ( Object [ ] array ) { Class [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }",
        "public static Class <? > [ ] toClass ( Object [ ] array ) { Class <? > [ ] result = new Class <? > [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = array [ i ]. getClass ( ) ; } return result ; }"
      ]
    },
    "Lang_39_/src/java/org/apache/commons/lang3/StringUtils.java_3676-3677": {
      "loc": "3676-3677",
      "input": "private static String replaceEach(String text, String[] searchList, String[] replacementList, boolean repeat, int timeToLive) { if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) { return text; } if (timeToLive < 0) { throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text); } int searchLength = searchList.length; int replacementLength = replacementList.length; if (searchLength != replacementLength) { throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \" + replacementLength); } boolean[] noMoreMatchesForReplIndex = new boolean[searchLength]; int textIndex = -1; int replaceIndex = -1; int tempIndex = -1; for (int i = 0; i < searchLength; i++) { if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) { continue; } tempIndex = text.indexOf(searchList[i]); if (tempIndex == -1) { noMoreMatchesForReplIndex[i] = true; } else { if (textIndex == -1 || tempIndex < textIndex) { textIndex = tempIndex; replaceIndex = i; } } } if (textIndex == -1) { return text; } int start = 0; int increase = 0; for (int i = 0; i < searchList.length; i++) { int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; } } increase = Math.min(increase, text.length() / 5); StringBuilder buf = new StringBuilder(text.length() + increase); while (textIndex != -1) { for (int i = start; i < textIndex; i++) { buf.append(text.charAt(i)); } buf.append(replacementList[replaceIndex]); start = textIndex + searchList[replaceIndex].length(); textIndex = -1; replaceIndex = -1; tempIndex = -1; for (int i = 0; i < searchLength; i++) { if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) { continue; } tempIndex = text.indexOf(searchList[i], start); if (tempIndex == -1) { noMoreMatchesForReplIndex[i] = true; } else { if (textIndex == -1 || tempIndex < textIndex) { textIndex = tempIndex; replaceIndex = i; } } } } int textLength = text.length(); for (int i = start; i < textLength; i++) { buf.append(text.charAt(i)); } String result = buf.toString(); if (!repeat) { return result; } return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1); }",
      "target": "private static String replaceEach(String text, String[] searchList, String[] replacementList, boolean repeat, int timeToLive) { if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) { return text; } if (timeToLive < 0) { throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text); } int searchLength = searchList.length; int replacementLength = replacementList.length; if (searchLength != replacementLength) { throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \" + replacementLength); } boolean[] noMoreMatchesForReplIndex = new boolean[searchLength]; int textIndex = -1; int replaceIndex = -1; int tempIndex = -1; for (int i = 0; i < searchLength; i++) { if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) { continue; } tempIndex = text.indexOf(searchList[i]); if (tempIndex == -1) { noMoreMatchesForReplIndex[i] = true; } else { if (textIndex == -1 || tempIndex < textIndex) { textIndex = tempIndex; replaceIndex = i; } } } if (textIndex == -1) { return text; } int start = 0; int increase = 0; for (int i = 0; i < searchList.length; i++) { if (searchList[i] == null || replacementList[i] == null) { continue; } int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; } } increase = Math.min(increase, text.length() / 5); StringBuilder buf = new StringBuilder(text.length() + increase); while (textIndex != -1) { for (int i = start; i < textIndex; i++) { buf.append(text.charAt(i)); } buf.append(replacementList[replaceIndex]); start = textIndex + searchList[replaceIndex].length(); textIndex = -1; replaceIndex = -1; tempIndex = -1; for (int i = 0; i < searchLength; i++) { if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) { continue; } tempIndex = text.indexOf(searchList[i], start); if (tempIndex == -1) { noMoreMatchesForReplIndex[i] = true; } else { if (textIndex == -1 || tempIndex < textIndex) { textIndex = tempIndex; replaceIndex = i; } } } } int textLength = text.length(); for (int i = start; i < textLength; i++) { buf.append(text.charAt(i)); } String result = buf.toString(); if (!repeat) { return result; } return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1); }",
      "function range": "3605,5-3731,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Lang_40_/src/java/org/apache/commons/lang/StringUtils.java_1048-1049": {
      "loc": "1048-1049",
      "input": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; } return contains(str.toUpperCase(), searchStr.toUpperCase()); }",
      "target": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; } int len = searchStr.length(); int max = str.length() - len; for (int i = 0; i <= max; i++) { if (str.regionMatches(true, i, searchStr, 0, len)) { return true; } } return false; }",
      "function range": "1044,5-1049,5",
      "raw_output": [
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( string. equalsIgnoreCase ( string. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( string. equalsIgnoreCase ( string. substring ( i, i + 1 ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( string. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( string. substring ( i, i + 1 ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } return str. toLowerCase ( ). contains ( search. toLowerCase ( ) ) ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. equalsIgnoreCase ( str. substring ( i, i + search. length ( ) ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. equalsIgnoreCase ( str. substring ( i, i + search. length ( ) ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String name ) { if ( str == null ) { return false ; } if ( name == null ) { return false ; } if ( name. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < name. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( name. charAt ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < search. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( search. charAt ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < search. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( search. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( string. equalsIgnoreCase ( string. substring ( i, i + 1 ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( string. equalsIgnoreCase ( string. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { char c = string. charAt ( i ) ; if ( c == string. charAt ( i ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( string. substring ( i, i + 1 ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( final String string, final String search ) { if ( string == null ) { return false ; } if ( search == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < search. length ( ) ; i ++ ) { if ( string. equalsIgnoreCase ( search. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. equalsIgnoreCase ( str. substring ( i, i + search. length ( ) ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == search. charAt ( i ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < search. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( search. charAt ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i )!= search. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < search. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( search. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( ) == 0 || search. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == search. charAt ( i ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( )!= search. length ( ) ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == search. charAt ( i ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( ) == search. length ( ) ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == search. charAt ( i ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } return str. toLowerCase ( ). contains ( search. toLowerCase ( ) ) ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( ) == 0 || search. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i )!= search. charAt ( i ) ) { return false ; } } return true ; }"
      ],
      "mid_translation": [
        "Determines whether the given string contains the given string ignoring case.",
        "Returns true if the given string contains the given string ignoring case.",
        "Determines if the given string contains the given string ignoring case.",
        "Tests if the given string contains the given string ignoring case.",
        "Returns true if the given string contains the given search string ignoring case."
      ],
      "output": [
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( string. equalsIgnoreCase ( string. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( string. equalsIgnoreCase ( string. substring ( i, i + 1 ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( string. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( string. substring ( i, i + 1 ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } return str. toLowerCase ( ). contains ( search. toLowerCase ( ) ) ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. equalsIgnoreCase ( str. substring ( i, i + search. length ( ) ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. equalsIgnoreCase ( str. substring ( i, i + search. length ( ) ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String name ) { if ( str == null ) { return false ; } if ( name == null ) { return false ; } if ( name. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < name. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( name. charAt ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < search. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( search. charAt ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < search. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( search. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( string. equalsIgnoreCase ( string. substring ( i, i + 1 ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( string. equalsIgnoreCase ( string. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { char c = string. charAt ( i ) ; if ( c == string. charAt ( i ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String string ) { if ( str == null ) { return false ; } if ( string == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( string. substring ( i, i + 1 ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( final String string, final String search ) { if ( string == null ) { return false ; } if ( search == null ) { return false ; } if ( string. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < search. length ( ) ; i ++ ) { if ( string. equalsIgnoreCase ( search. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. equalsIgnoreCase ( str. substring ( i, i + search. length ( ) ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == search. charAt ( i ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < search. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( search. charAt ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i )!= search. charAt ( i ) ) { return false ; } } return true ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null ) { return false ; } if ( search == null ) { return false ; } if ( str. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < search. length ( ) ; i ++ ) { if ( str. equalsIgnoreCase ( search. substring ( i ) ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( ) == 0 || search. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == search. charAt ( i ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( )!= search. length ( ) ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == search. charAt ( i ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( ) == search. length ( ) ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == search. charAt ( i ) ) { return true ; } } return false ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } return str. toLowerCase ( ). contains ( search. toLowerCase ( ) ) ; }",
        "public static boolean containsIgnoreCase ( String str, String search ) { if ( str == null || search == null ) { return false ; } if ( str. length ( ) == 0 || search. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i )!= search. charAt ( i ) ) { return false ; } } return true ; }"
      ]
    },
    "Lang_43_/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java_422-423": {
      "loc": "422-423",
      "input": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start); }",
      "target": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { next(pos); return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start); }",
      "function range": "417,5-444,5",
      "raw_output": [
        "public JSONWriter appendQuoted ( CharSequence s ) { if ( s == null ) { append ( NULL_STRING ) ; } else { append ( s. toString ( ) ) ; } return this ; }",
        "public JsonWriter appendQuoted ( CharSequence s ) { if ( s == null ) { appendNull ( ) ; } else { append ( s. toString ( ) ) ; } return this ; }",
        "public JSONWriter appendQuoted ( CharSequence s ) { if ( s == null ) { appendNull ( ) ; } else { append ( s. toString ( ) ) ; } return this ; }",
        "public JsonWriter appendQuoted ( CharSequence s ) { if ( s == null ) { append ( JsonNull. INSTANCE ) ; } else { append ( s ) ; } return this ; }",
        "public JSONWriter appendQuoted ( CharSequence s ) { if ( s == null ) { append ( NULL_STRING ) ; return this ; } append ( s. toString ( ) ) ; return this ; }",
        "private void appendQuotedString ( int pos ) throws IOException { if ( pos < str. length ( ) ) { append ( str. charAt ( pos ) ) ; } else { append ( str. charAt ( pos ) ) ; } }",
        "private void appendQuotedString ( int pos ) throws IOException { if ( pos < str. length ( ) ) { append ( str. charAt ( pos ) ) ; } else { append ( str. charAt ( pos + 1 ) ) ; } }",
        "private void appendQuotedString ( int pos ) throws IOException { if ( pos < str. length ( ) ) { append ( str. charAt ( pos ) ) ; } else { append ( str. charAt ( pos - 1 ) ) ; } }",
        "private void appendQuotedString ( int pos, String str ) { if ( pos < str. length ( ) ) { append ( str. charAt ( pos ) ) ; } else { append ( str. charAt ( pos ) ) ; } }",
        "private void appendQuotedString ( int pos, String str ) { if ( pos < str. length ( ) ) { append ( str. substring ( 0, pos ) ) ; } else { append ( str ) ; } }",
        "public void appendQuoted ( CharSequence text, ParsePosition pos ) { appendQuoted ( text, pos, text. length ( ) ) ; }",
        "public void append ( String text, ParsePosition pos ) { append ( text, pos, text. length ( ) ) ; }",
        "public void appendQuoted ( CharSequence text, ParsePosition pos ) { append ( text, pos, text. length ( ) ) ; }",
        "public void appendQuoted ( CharSequence text, ParsePosition pos ) { append ( text, pos, false ) ; }",
        "public void append ( String text, ParsePosition pos ) { append ( text, pos, false ) ; }",
        "private static void appendQuoted ( StringBuilder buf, String str ) { buf. append ('' ) ; buf. append ( str ) ; buf. append ('' ) ; }",
        "private static void appendQuoted ( StringBuilder buf, String s ) { buf. append ('' ) ; buf. append ( s ) ; buf. append ('' ) ; }",
        "private static void appendQuotedString ( StringBuilder buf, String str ) { buf. append ('' ) ; buf. append ( str ) ; buf. append ('' ) ; }",
        "private static void appendQuotedString ( StringBuilder buffer, String str ) { buffer. append ('' ) ; buffer. append ( str ) ; buffer. append ('' ) ; }",
        "private static void appendQuotedString ( StringBuilder buf, String s ) { buf. append ('' ) ; buf. append ( s ) ; buf. append ('' ) ; }",
        "public static String quote ( String s ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String quote ( String s ) { if ( s == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String quote ( String s ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) { builder. append ('' ) ; } else if ( c =='' ) { builder. append ('' ) ; } else { builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String quote ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; if ( c =='' ) { builder. append ('' ) ; } else if ( c =='' ) { builder. append ('' ) ; } else { builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "public static String quote ( String s ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }"
      ],
      "mid_translation": [
        "Appends a quoted string.",
        "Appends a quoted string at the given parse position.",
        "Appends a quoted string at the given ParsePosition.",
        "Appends a quoted string to the given buffer.",
        "Append quoted string."
      ],
      "output": [
        "private JSONWriter appendQuotedString ( CharSequence s ) { if ( s == null ) { append ( NULL_STRING ) ; } else { append ( s. toString ( ) ) ; } return this ; }",
        "private JsonWriter appendQuotedString ( CharSequence s ) { if ( s == null ) { appendNull ( ) ; } else { append ( s. toString ( ) ) ; } return this ; }",
        "private JSONWriter appendQuotedString ( CharSequence s ) { if ( s == null ) { appendNull ( ) ; } else { append ( s. toString ( ) ) ; } return this ; }",
        "private JsonWriter appendQuotedString ( CharSequence s ) { if ( s == null ) { append ( JsonNull. INSTANCE ) ; } else { append ( s ) ; } return this ; }",
        "private JSONWriter appendQuotedString ( CharSequence s ) { if ( s == null ) { append ( NULL_STRING ) ; return this ; } append ( s. toString ( ) ) ; return this ; }",
        "private void appendQuotedString ( int pos ) throws IOException { if ( pos < str. length ( ) ) { append ( str. charAt ( pos ) ) ; } else { append ( str. charAt ( pos ) ) ; } }",
        "private void appendQuotedString ( int pos ) throws IOException { if ( pos < str. length ( ) ) { append ( str. charAt ( pos ) ) ; } else { append ( str. charAt ( pos + 1 ) ) ; } }",
        "private void appendQuotedString ( int pos ) throws IOException { if ( pos < str. length ( ) ) { append ( str. charAt ( pos ) ) ; } else { append ( str. charAt ( pos - 1 ) ) ; } }",
        "private void appendQuotedString ( int pos, String str ) { if ( pos < str. length ( ) ) { append ( str. charAt ( pos ) ) ; } else { append ( str. charAt ( pos ) ) ; } }",
        "private void appendQuotedString ( int pos, String str ) { if ( pos < str. length ( ) ) { append ( str. substring ( 0, pos ) ) ; } else { append ( str ) ; } }",
        "private void appendQuotedString ( CharSequence text, ParsePosition pos ) { appendQuoted ( text, pos, text. length ( ) ) ; }",
        "private void appendQuotedString ( String text, ParsePosition pos ) { append ( text, pos, text. length ( ) ) ; }",
        "private void appendQuotedString ( CharSequence text, ParsePosition pos ) { append ( text, pos, text. length ( ) ) ; }",
        "private void appendQuotedString ( CharSequence text, ParsePosition pos ) { append ( text, pos, false ) ; }",
        "private void appendQuotedString ( String text, ParsePosition pos ) { append ( text, pos, false ) ; }",
        "private void appendQuotedString ( StringBuilder buf, String str ) { buf. append ('' ) ; buf. append ( str ) ; buf. append ('' ) ; }",
        "private void appendQuotedString ( StringBuilder buf, String s ) { buf. append ('' ) ; buf. append ( s ) ; buf. append ('' ) ; }",
        "private void appendQuotedString ( StringBuilder buf, String str ) { buf. append ('' ) ; buf. append ( str ) ; buf. append ('' ) ; }",
        "private void appendQuotedString ( StringBuilder buffer, String str ) { buffer. append ('' ) ; buffer. append ( str ) ; buffer. append ('' ) ; }",
        "private void appendQuotedString ( StringBuilder buf, String s ) { buf. append ('' ) ; buf. append ( s ) ; buf. append ('' ) ; }",
        "private String appendQuotedString ( String s ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "private String appendQuotedString ( String s ) { if ( s == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "private String appendQuotedString ( String s ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) { builder. append ('' ) ; } else if ( c =='' ) { builder. append ('' ) ; } else { builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "private String appendQuotedString ( String value ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; if ( c =='' ) { builder. append ('' ) ; } else if ( c =='' ) { builder. append ('' ) ; } else { builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "private String appendQuotedString ( String s ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; switch ( c ) { case'' : builder. append ('' ) ; break ; case'' : builder. append ('' ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }"
      ]
    },
    "Lang_45_/src/java/org/apache/commons/lang/WordUtils.java_613-614": {
      "loc": "613-614",
      "input": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) { if (str == null) { return null; } if (str.length() == 0) { return StringUtils.EMPTY; } <mask> if (upper == -1 || upper > str.length()) { upper = str.length(); } if (upper < lower) { upper = lower; } StringBuffer result = new StringBuffer(); int index = StringUtils.indexOf(str, \" \", lower); if (index == -1) { result.append(str.substring(0, upper)); if (upper != str.length()) { result.append(StringUtils.defaultString(appendToEnd)); } } else if (index > upper) { result.append(str.substring(0, upper)); result.append(StringUtils.defaultString(appendToEnd)); } else { result.append(str.substring(0, index)); result.append(StringUtils.defaultString(appendToEnd)); } return result.toString(); }",
      "target": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) { if (str == null) { return null; } if (str.length() == 0) { return StringUtils.EMPTY; } <mask> if (lower > str.length()) { lower = str.length(); } if (upper == -1 || upper > str.length()) { upper = str.length(); } if (upper < lower) { upper = lower; } StringBuffer result = new StringBuffer(); int index = StringUtils.indexOf(str, \" \", lower); if (index == -1) { result.append(str.substring(0, upper)); if (upper != str.length()) { result.append(StringUtils.defaultString(appendToEnd)); } } else if (index > upper) { result.append(str.substring(0, upper)); result.append(StringUtils.defaultString(appendToEnd)); } else { result.append(str.substring(0, index)); result.append(StringUtils.defaultString(appendToEnd)); } return result.toString(); }",
      "function range": "605,5-642,5",
      "raw_output": [
        "public static String abbreviate ( String source ) { if ( source == null || source. length ( ) == 0 ) { return source ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { source = source. substring ( 0, source. length ( ) - 1 ) ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { source = source. substring ( 0, source. length ( ) - 1 ) ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { source = source. substring ( 0, source. length ( ) - 1 ) ; } return source ; }",
        "public static String abbreviate ( String source ) { if ( source == null ) { return null ; } if ( source. length ( ) == 0 ) { return source ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } return source ; }",
        "public static String abbreviate ( String source ) { if ( source == null ) { return null ; } if ( source. length ( ) == 0 ) { return source ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { return source. substring ( 0, source. length ( ) - 1 ) ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { return source. substring ( 0, source. length ( ) - 1 ) ; } return source. substring ( 0, source. length ( ) - 1 ) ; }",
        "public static String abbreviate ( String source ) { if ( source == null ) { return null ; } if ( source. length ( ) == 0 ) { return source ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { source = source. substring ( 0, source. length ( ) - 1 ) ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { source = source. substring ( 0, source. length ( ) - 1 ) ; } return source +'' + source ; }",
        "public static String abbreviate ( String source ) { if ( source == null ) { return null ; } if ( source. length ( ) == 0 ) { return source ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { return source. substring ( 0, source. length ( ) - 1 ) ; } return source ; }",
        "public static String getString ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' && str. charAt ( str. length ( ) - 1 ) =='' ) return str. substring ( 1, str. length ( ) - 1 ) ; return str ; }",
        "public static String getString ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; } return sb. toString ( ) ; }",
        "public static String getString ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; return str ; }",
        "private static String getString ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; return str ; }",
        "public static String getString ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1, str. length ( ) - 1 ) ; return str. substring ( 1, str. length ( ) - 1 ) ; }",
        "public static Stringiation ( String s ) { if ( s == null ) { return null ; } if ( s. length ( ) == 0 ) { return s ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String abbreviation ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) sb. append ('' ) ; else sb. append ( c ) ; } return sb. toString ( ) ; }",
        "public static Stringiation ( String s ) { if ( s == null ) { return null ; } if ( s. length ( ) == 0 ) { return s ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { sb. append ( s. charAt ( i ) ) ; } return sb. toString ( ) ; }",
        "public static String abbreviation ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; return str ; }",
        "public static String abbreviation ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { buf. append ( str. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "public static String abbreviate ( String s ) { if ( s == null || s. length ( ) == 0 ) return s ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) sb. append ('' ) ; else sb. append ( c ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) sb. append ('' ) ; else sb. append ( c ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) sb. append ('' ) ; else sb. append ( c ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String s ) { if ( s == null || s. length ( ) == 0 ) return s ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' || c =='' ) sb. append ( c ) ; else sb. append ( c ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String s ) { if ( s == null || s. length ( ) == 0 ) return s ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String abbreviate ( String source, int length ) { if ( source == null || source. length ( ) == 0 ) { return source ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( i > 0 ) { sb. append ('' ) ; } sb. append ( source. substring ( i ) ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String source, int length ) { if ( source == null || source. length ( ) == 0 ) { return source ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( sb. length ( ) > 0 ) { sb. append ('' ) ; } sb. append ( source ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String source, int length ) { if ( source == null || source. length ( ) == 0 ) { return source ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( i > 0 ) { sb. append ('' ) ; } sb. append ( source ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String source, int length ) { if ( source == null || source. length ( ) == 0 ) { return source ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { sb. append ( source. substring ( i, i + length ) ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String source, int length ) { if ( source == null || source. length ( ) == 0 ) { return source ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char c = source. charAt ( i ) ; sb. append ( c ) ; } return sb. toString ( ) ; }"
      ],
      "mid_translation": [
        "abbreviate string.",
        "abbreviated string.",
        "abbreviation of a string.",
        "abbreviates a string.",
        "Method to abbreviate string."
      ],
      "output": [
        "public static String abbreviate ( String source ) { if ( source == null || source. length ( ) == 0 ) { return source ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { source = source. substring ( 0, source. length ( ) - 1 ) ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { source = source. substring ( 0, source. length ( ) - 1 ) ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { source = source. substring ( 0, source. length ( ) - 1 ) ; } return source ; }",
        "public static String abbreviate ( String source ) { if ( source == null ) { return null ; } if ( source. length ( ) == 0 ) { return source ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } return source ; }",
        "public static String abbreviate ( String source ) { if ( source == null ) { return null ; } if ( source. length ( ) == 0 ) { return source ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { return source. substring ( 0, source. length ( ) - 1 ) ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { return source. substring ( 0, source. length ( ) - 1 ) ; } return source. substring ( 0, source. length ( ) - 1 ) ; }",
        "public static String abbreviate ( String source ) { if ( source == null ) { return null ; } if ( source. length ( ) == 0 ) { return source ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { source = source. substring ( 0, source. length ( ) - 1 ) ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { source = source. substring ( 0, source. length ( ) - 1 ) ; } return source +'' + source ; }",
        "public static String abbreviate ( String source ) { if ( source == null ) { return null ; } if ( source. length ( ) == 0 ) { return source ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } if ( source. charAt ( 0 ) =='' ) { return source. substring ( 1 ) ; } if ( source. charAt ( source. length ( ) - 1 ) =='' ) { return source. substring ( 0, source. length ( ) - 1 ) ; } return source ; }",
        "public static String abbreviate ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' && str. charAt ( str. length ( ) - 1 ) =='' ) return str. substring ( 1, str. length ( ) - 1 ) ; return str ; }",
        "public static String abbreviate ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; return str ; }",
        "public static String abbreviate ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; return str ; }",
        "public static String abbreviate ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1, str. length ( ) - 1 ) ; return str. substring ( 1, str. length ( ) - 1 ) ; }",
        "",
        "public static String abbreviate ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) sb. append ('' ) ; else sb. append ( c ) ; } return sb. toString ( ) ; }",
        "",
        "public static String abbreviate ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; if ( str. charAt ( 0 ) =='' ) return str. substring ( 1 ) ; return str ; }",
        "public static String abbreviate ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { buf. append ( str. charAt ( i ) ) ; } return buf. toString ( ) ; }",
        "public static String abbreviate ( String s ) { if ( s == null || s. length ( ) == 0 ) return s ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) sb. append ('' ) ; else sb. append ( c ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String str ) { if ( str == null ) return null ; if ( str. length ( ) == 0 ) return str ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) sb. append ('' ) ; else sb. append ( c ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) sb. append ('' ) ; else sb. append ( c ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String s ) { if ( s == null || s. length ( ) == 0 ) return s ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' || c =='' ) sb. append ( c ) ; else sb. append ( c ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String s ) { if ( s == null || s. length ( ) == 0 ) return s ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String abbreviate ( String source, int length ) { if ( source == null || source. length ( ) == 0 ) { return source ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( i > 0 ) { sb. append ('' ) ; } sb. append ( source. substring ( i ) ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String source, int length ) { if ( source == null || source. length ( ) == 0 ) { return source ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( sb. length ( ) > 0 ) { sb. append ('' ) ; } sb. append ( source ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String source, int length ) { if ( source == null || source. length ( ) == 0 ) { return source ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( i > 0 ) { sb. append ('' ) ; } sb. append ( source ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String source, int length ) { if ( source == null || source. length ( ) == 0 ) { return source ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { sb. append ( source. substring ( i, i + length ) ) ; } return sb. toString ( ) ; }",
        "public static String abbreviate ( String source, int length ) { if ( source == null || source. length ( ) == 0 ) { return source ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char c = source. charAt ( i ) ; sb. append ( c ) ; } return sb. toString ( ) ; }"
      ]
    },
    "Lang_51_/src/java/org/apache/commons/lang/BooleanUtils.java_682-683": {
      "loc": "682-683",
      "input": "public static boolean toBoolean(String str) { if (str == \"true\") { return true; } if (str == null) { return false; } switch (str.length()) { case 2: { char ch0 = str.charAt(0); char ch1 = str.charAt(1); return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N'); } case 3: { char ch = str.charAt(0); if (ch == 'y') { return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } if (ch == 'Y') { return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's'); } } case 4: { char ch = str.charAt(0); if (ch == 't') { return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E'); } if (ch == 'T') { return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e'); } } } return false; }",
      "target": "public static boolean toBoolean(String str) { if (str == \"true\") { return true; } if (str == null) { return false; } switch (str.length()) { case 2: { char ch0 = str.charAt(0); char ch1 = str.charAt(1); return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N'); } case 3: { char ch = str.charAt(0); if (ch == 'y') { return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } if (ch == 'Y') { return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's'); } return false; } case 4: { char ch = str.charAt(0); if (ch == 't') { return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E'); } if (ch == 'T') { return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e'); } } } return false; }",
      "function range": "649,5-700,5",
      "raw_output": [
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"false\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"false\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"true\" ) ) return def ; return def ; }",
        "public static boolean parseBoolean ( final String value, final boolean defaultValue ) { if ( value == null ) { return defaultValue ; } return Boolean. parseBoolean ( value ) ; }",
        "public static boolean parseBoolean ( final String value, final boolean defaultValue ) { if ( value == null ) { return defaultValue ; } return Boolean. valueOf ( value ) ; }",
        "public static boolean parseBoolean ( final String value, final boolean defaultValue ) { if ( value == null ) return defaultValue ; return Boolean. parseBoolean ( value ) ; }",
        "public static boolean parseBoolean ( String value, boolean defaultValue ) { if ( value == null ) return defaultValue ; return Boolean. parseBoolean ( value ) ; }",
        "public static boolean parseBoolean ( final String value, final boolean defaultValue ) { if ( value == null ) { return defaultValue ; } return Boolean. parseBoolean ( value. trim ( ) ) ; }",
        "public static boolean toBoolean ( String value, boolean def ) { if ( value == null ) return def ; if ( value. equals ( \"1\" ) ) return def ; if ( value. equals ( \"0\" ) ) return def ; if ( value. equals ( \"1\" ) ) return def ; if ( value. equals ( \"0\" ) ) return def ; if ( value. equals ( \"1\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String value, boolean def ) { if ( value == null ) return def ; if ( value. equals ( \"1\" ) ) return def ; if ( value. equals ( \"0\" ) ) return def ; if ( value. equals ( \"1\" ) ) return def ; if ( value. equals ( \"1\" ) ) return def ; if ( value. equals ( \"0\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean defaultValue ) { if ( str == null ) return defaultValue ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; if ( str. equals ( \"true\" ) ) return true ; if ( str. equals ( \"false\" ) ) return false ; return defaultValue ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"true\" ) ) return def ; if ( str. equals ( \"false\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str ) { if ( str == null ) return false ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; if ( str. equals ( \"true\" ) ) return true ; if ( str. equals ( \"false\" ) ) return false ; return false ; }",
        "public static boolean toBoolean ( String str ) { if ( str == null ) return false ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; if ( str. equals ( \"1\" ) ) return true ; return false ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str ) { if ( str == null ) return false ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; return false ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. length ( ) == 0 ) return def ; char c = str. charAt ( 0 ) ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. length ( ) == 0 ) return def ; if ( str. charAt ( 0 ) =='' ) return def ; if ( str. charAt ( 1 ) =='' ) return def ; if ( str. charAt ( 2 ) =='' ) return def ; if ( str. charAt ( 3 ) =='' ) return def ; if ( str. charAt ( 4 ) =='' ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. length ( ) == 0 ) return def ; char c = str. charAt ( 0 ) ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; return false ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. length ( ) == 0 ) return def ; char c = str. charAt ( 0 ) ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. length ( ) == 0 ) return def ; if ( str. charAt ( 0 ) =='' ) return def ; if ( str. charAt ( 1 ) =='' ) return def ; if ( str. charAt ( 2 ) =='' ) return def ; if ( str. charAt ( 3 ) =='' ) return def ; if ( str. charAt ( 4 ) =='' ) return def ; return false ; }"
      ],
      "mid_translation": [
        "casts a string to a boolean.",
        "Converts a string to a boolean.",
        "casts the specified string to a boolean.",
        "casts a string to a boolean",
        "cast a string to a boolean."
      ],
      "output": [
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"false\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"false\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"true\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( final String value, final boolean defaultValue ) { if ( value == null ) { return defaultValue ; } return Boolean. parseBoolean ( value ) ; }",
        "public static boolean toBoolean ( final String value, final boolean defaultValue ) { if ( value == null ) { return defaultValue ; } return Boolean. valueOf ( value ) ; }",
        "public static boolean toBoolean ( final String value, final boolean defaultValue ) { if ( value == null ) return defaultValue ; return Boolean. parseBoolean ( value ) ; }",
        "public static boolean toBoolean ( String value, boolean defaultValue ) { if ( value == null ) return defaultValue ; return Boolean. parseBoolean ( value ) ; }",
        "public static boolean toBoolean ( final String value, final boolean defaultValue ) { if ( value == null ) { return defaultValue ; } return Boolean. parseBoolean ( value. trim ( ) ) ; }",
        "public static boolean toBoolean ( String value, boolean def ) { if ( value == null ) return def ; if ( value. equals ( \"1\" ) ) return def ; if ( value. equals ( \"0\" ) ) return def ; if ( value. equals ( \"1\" ) ) return def ; if ( value. equals ( \"0\" ) ) return def ; if ( value. equals ( \"1\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String value, boolean def ) { if ( value == null ) return def ; if ( value. equals ( \"1\" ) ) return def ; if ( value. equals ( \"0\" ) ) return def ; if ( value. equals ( \"1\" ) ) return def ; if ( value. equals ( \"1\" ) ) return def ; if ( value. equals ( \"0\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean defaultValue ) { if ( str == null ) return defaultValue ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; if ( str. equals ( \"true\" ) ) return true ; if ( str. equals ( \"false\" ) ) return false ; return defaultValue ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"true\" ) ) return def ; if ( str. equals ( \"false\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str ) { if ( str == null ) return false ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; if ( str. equals ( \"true\" ) ) return true ; if ( str. equals ( \"false\" ) ) return false ; return false ; }",
        "public static boolean toBoolean ( String str ) { if ( str == null ) return false ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; if ( str. equals ( \"1\" ) ) return true ; return false ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; if ( str. equals ( \"1\" ) ) return def ; if ( str. equals ( \"0\" ) ) return def ; return def ; }",
        "public static boolean toBoolean ( String str ) { if ( str == null ) return false ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; if ( str. equals ( \"1\" ) ) return true ; if ( str. equals ( \"0\" ) ) return false ; return false ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. length ( ) == 0 ) return def ; char c = str. charAt ( 0 ) ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. length ( ) == 0 ) return def ; if ( str. charAt ( 0 ) =='' ) return def ; if ( str. charAt ( 1 ) =='' ) return def ; if ( str. charAt ( 2 ) =='' ) return def ; if ( str. charAt ( 3 ) =='' ) return def ; if ( str. charAt ( 4 ) =='' ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. length ( ) == 0 ) return def ; char c = str. charAt ( 0 ) ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; return false ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. length ( ) == 0 ) return def ; char c = str. charAt ( 0 ) ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; if ( c =='' ) return def ; return def ; }",
        "public static boolean toBoolean ( String str, boolean def ) { if ( str == null ) return def ; if ( str. length ( ) == 0 ) return def ; if ( str. charAt ( 0 ) =='' ) return def ; if ( str. charAt ( 1 ) =='' ) return def ; if ( str. charAt ( 2 ) =='' ) return def ; if ( str. charAt ( 3 ) =='' ) return def ; if ( str. charAt ( 4 ) =='' ) return def ; return false ; }"
      ]
    },
    "Lang_57_/src/java/org/apache/commons/lang/LocaleUtils.java_223-224": {
      "loc": "223-224",
      "input": "public static boolean isAvailableLocale(Locale locale) { return cAvailableLocaleSet.contains(locale); }",
      "target": "public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); }",
      "function range": "222,5-224,5",
      "raw_output": [
        "public static boolean isLocaleAvailable ( String locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return isLocaleAvailable ( locale ) ; }",
        "public static boolean isLocaleAvailable ( String locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return locale. equals ( locale ) ; }",
        "public static boolean isLocaleAvailable ( String locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return ( locale == null ) ; }",
        "public static boolean isLocaleAvailable ( String locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return isLocaleAvailable ( locale ) ; }",
        "public static boolean isLocaleAvailable ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) { return false ; } for ( Locale availableLocale : getAvailableLocales ( ) ) { if ( availableLocale. equals ( locale ) ) { return true ; } } return false ; }",
        "public static boolean isAvailable ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available ( locale ) ; }",
        "public static boolean isAvailable ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available. contains ( locale ) ; }",
        "public static boolean isAvailable ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if (! available. contains ( locale ) ) available. add ( locale ) ; return true ; }",
        "public static boolean isAvailable ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if (! available. contains ( locale ) ) available. add ( locale ) ; return available. contains ( locale ) ; }",
        "public static boolean isAvailable ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available. contains ( locale ) ; }",
        "public static boolean isAvailable ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available ( locale ) ; }",
        "public static boolean isAvailable ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if (! available. contains ( locale ) ) available. add ( locale ) ; return true ; }",
        "public static boolean isAvailable ( Locale locale ) { if ( locale == null ) { locale = Locale. getDefault ( ) ; } if ( locale == null ) { locale = Locale. getDefault ( ) ; } if (! available. contains ( locale ) ) { available. add ( locale ) ; } return available. contains ( locale ) ; }",
        "public static boolean isAvailable ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available ( locale ) ; }",
        "public static boolean isAvailable ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available. contains ( locale ) ; }",
        "public boolean hasLocale ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < availableLocale. length ; i ++ ) { if ( availableLocale [ i ]. equals ( locale ) ) { return true ; } } return false ; }",
        "public boolean hasLocale ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < available. size ( ) ; i ++ ) { if ( available. get ( i ). locale. equals ( locale ) ) { return true ; } } return false ; }",
        "public boolean hasLocale ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) return false ; for ( int i = 0 ; i < availableLocale. length ; i ++ ) { if ( availableLocale [ i ]. equals ( locale ) ) return true ; } return false ; }",
        "public boolean hasLocale ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < availableLocale. size ( ) ; i ++ ) { if ( availableLocale. get ( i ). equals ( locale ) ) { return true ; } } return false ; }",
        "public boolean hasLocale ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < availableLocale. length ; i ++ ) { if ( availableLocale [ i ]. locale. equals ( locale ) ) { return true ; } } return false ; }",
        "public boolean isAvailable ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( available. contains ( locale ) ) return true ; available. add ( locale ) ; return false ; }",
        "public boolean hasLocale ( Locale locale ) { if ( locale == null ) { return false ; } if ( available. contains ( locale ) ) { return true ; } available. add ( locale ) ; return false ; }",
        "public boolean hasLocale ( Locale locale ) { if ( locale == null ) { return false ; } if ( available. contains ( locale ) ) { return true ; } if ( available. contains ( locale ) ) { return true ; } return false ; }",
        "public boolean hasLocale ( Locale locale ) { if ( locale == null ) { return false ; } if ( available. contains ( locale ) ) { return true ; } return available. contains ( locale ) ; }",
        "public boolean isAvailable ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( available. contains ( locale ) ) return true ; available. add ( locale ) ; return available. contains ( locale ) ; }"
      ],
      "mid_translation": [
        "Returns true if the specified locale is available.",
        "Returns true if the given locale is available.",
        "Returns true if the specified locale is available in the system.",
        "Returns true if the specified locale is available in the available set.",
        "Returns true if the given locale is available in the available set."
      ],
      "output": [
        "public static boolean isAvailableLocale ( String locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return isLocaleAvailable ( locale ) ; }",
        "public static boolean isAvailableLocale ( String locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return locale. equals ( locale ) ; }",
        "public static boolean isAvailableLocale ( String locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return ( locale == null ) ; }",
        "public static boolean isAvailableLocale ( String locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return isLocaleAvailable ( locale ) ; }",
        "public static boolean isAvailableLocale ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) { return false ; } for ( Locale availableLocale : getAvailableLocales ( ) ) { if ( availableLocale. equals ( locale ) ) { return true ; } } return false ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available ( locale ) ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available. contains ( locale ) ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if (! available. contains ( locale ) ) available. add ( locale ) ; return true ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if (! available. contains ( locale ) ) available. add ( locale ) ; return available. contains ( locale ) ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available. contains ( locale ) ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available ( locale ) ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if (! available. contains ( locale ) ) available. add ( locale ) ; return true ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) { locale = Locale. getDefault ( ) ; } if ( locale == null ) { locale = Locale. getDefault ( ) ; } if (! available. contains ( locale ) ) { available. add ( locale ) ; } return available. contains ( locale ) ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available ( locale ) ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; if ( locale == null ) locale = Locale. getDefault ( ) ; return available. contains ( locale ) ; }",
        "public static boolean isAvailableLocale ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < availableLocale. length ; i ++ ) { if ( availableLocale [ i ]. equals ( locale ) ) { return true ; } } return false ; }",
        "public static boolean isAvailableLocale ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < available. size ( ) ; i ++ ) { if ( available. get ( i ). locale. equals ( locale ) ) { return true ; } } return false ; }",
        "public static boolean isAvailableLocale ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) return false ; for ( int i = 0 ; i < availableLocale. length ; i ++ ) { if ( availableLocale [ i ]. equals ( locale ) ) return true ; } return false ; }",
        "public static boolean isAvailableLocale ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < availableLocale. size ( ) ; i ++ ) { if ( availableLocale. get ( i ). equals ( locale ) ) { return true ; } } return false ; }",
        "public static boolean isAvailableLocale ( String locale ) { if ( locale == null || locale. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < availableLocale. length ; i ++ ) { if ( availableLocale [ i ]. locale. equals ( locale ) ) { return true ; } } return false ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( available. contains ( locale ) ) return true ; available. add ( locale ) ; return false ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) { return false ; } if ( available. contains ( locale ) ) { return true ; } available. add ( locale ) ; return false ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) { return false ; } if ( available. contains ( locale ) ) { return true ; } if ( available. contains ( locale ) ) { return true ; } return false ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) { return false ; } if ( available. contains ( locale ) ) { return true ; } return available. contains ( locale ) ; }",
        "public static boolean isAvailableLocale ( Locale locale ) { if ( locale == null ) locale = Locale. getDefault ( ) ; if ( available. contains ( locale ) ) return true ; available. add ( locale ) ; return available. contains ( locale ) ; }"
      ]
    },
    "Lang_58_/src/java/org/apache/commons/lang/math/NumberUtils.java_454-456": {
      "loc": "454-456",
      "input": "public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException(\"A blank string is not a valid number\"); } if (str.startsWith(\"--\")) { return null; } if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(str + \" is not a valid number.\"); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { mant = str.substring(0, expPos); } else { mant = str; } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; } String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { } return createBigInteger(numeric); } throw new NumberFormatException(str + \" is not a valid number.\"); case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } case 'd' : case 'D' : try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } try { return createBigDecimal(numeric); } catch (NumberFormatException e) { } default : throw new NumberFormatException(str + \" is not a valid number.\"); } } else { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { exp = null; } if (dec == null && exp == null) { try { return createInteger(str); } catch (NumberFormatException nfe) { } try { return createLong(str); } catch (NumberFormatException nfe) { } return createBigInteger(str); } else { boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } return createBigDecimal(str); } } }",
      "target": "public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException(\"A blank string is not a valid number\"); } if (str.startsWith(\"--\")) { return null; } if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(str + \" is not a valid number.\"); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { mant = str.substring(0, expPos); } else { mant = str; } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; } String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { } return createBigInteger(numeric); } throw new NumberFormatException(str + \" is not a valid number.\"); case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } case 'd' : case 'D' : try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } try { return createBigDecimal(numeric); } catch (NumberFormatException e) { } default : throw new NumberFormatException(str + \" is not a valid number.\"); } } else { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { exp = null; } if (dec == null && exp == null) { try { return createInteger(str); } catch (NumberFormatException nfe) { } try { return createLong(str); } catch (NumberFormatException nfe) { } return createBigInteger(str); } else { boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } return createBigDecimal(str); } } }",
      "function range": "397,5-545,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Lang_59_/src/java/org/apache/commons/lang/text/StrBuilder.java_884-885": {
      "loc": "884-885",
      "input": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { str.getChars(0, strLen, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this; }",
      "target": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { str.getChars(0, width, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this; }",
      "function range": "878,5-895,5",
      "raw_output": [
        "public StrBuilder appendPadding ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = pad ; } return this ; }",
        "public StrBuilder appendPadding ( int width ) { ensureCapacity ( size + width ) ; ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = pad ; } return this ; }",
        "public StrBuilder appendPadding ( final int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = pad ; } return this ; }",
        "public StrBuilder appendPadding ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ size + i ] = pad ; } return this ; }",
        "public StrBuilder appendPadding ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder pad ( int width ) { ensureCapacity ( width ) ; for ( int i = 0 ; i < width ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder pad ( int width ) { ensureCapacity ( size ) ; for ( int i = 0 ; i < width ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder append ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = ( char ) width ; } return this ; }",
        "public StrBuilder pad ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder append ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder paddingRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] = paddingRight ( i ) ; } return this ; }",
        "public StrBuilder paddingRight ( int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] = paddingRight ( i ) ; } return this ; }",
        "public StrBuilder paddingRight ( int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size + width ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] = paddingRight ( i ) ; } return this ; }",
        "public StrBuilder paddingRight ( int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] ='' ; } size = width ; return this ; }",
        "public StrBuilder paddingRight ( int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] = paddingRight ( ) ; } return this ; }",
        "public StrBuilder appendPadding ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = pad ; } return this ; }",
        "public StrBuilder appendPadding ( int width ) { ensureCapacity ( size + width ) ; ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = pad ; } return this ; }",
        "public StrBuilder appendPadding ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ size + i ] = pad ; } return this ; }",
        "public StrBuilder appendPadding ( int width ) { ensureCapacity ( size + width ) ; ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ size + i ] = pad ; } return this ; }",
        "public StrBuilder appendPadding ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i + width ] ='' ; } return this ; }",
        "public StrBuilder padRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder padRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size + width ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder padRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size + width ) ; for ( int i = size ; i < size ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder padRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] = padRight ( i ) ; } return this ; }",
        "public StrBuilder padRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] ='' ; } return this ; }"
      ],
      "mid_translation": [
        "Appends a fixed width pad character to the right of the string builder.",
        "Appends a fixed width pad to the right of the string builder.",
        "Appends a fixed width padding to the right of the string builder.",
        "Appends a fixed width pad character to the end of the string builder.",
        "Appends a fixed width pad to the right of the string in the builder."
      ],
      "output": [
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = pad ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = pad ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( final int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = pad ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ size + i ] = pad ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( width ) ; for ( int i = 0 ; i < width ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size ) ; for ( int i = 0 ; i < width ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = ( char ) width ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] = paddingRight ( i ) ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] = paddingRight ( i ) ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size + width ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] = paddingRight ( i ) ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] ='' ; } size = width ; return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] = paddingRight ( ) ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = pad ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] = pad ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ size + i ] = pad ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ size + i ] = pad ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( int width ) { ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i + width ] ='' ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size + width ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size + width ) ; for ( int i = size ; i < size ; i ++ ) { buffer [ i ] ='' ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) { buffer [ i ] = padRight ( i ) ; } return this ; }",
        "public StrBuilder appendFixedWidthPadRight ( final int width ) { if ( width <= 0 ) { throw new IllegalArgumentException ( width ) ; } ensureCapacity ( size + width ) ; for ( int i = 0 ; i < size ; i ++ ) { buffer [ i ] ='' ; } return this ; }"
      ]
    },
    "Lang_61_/src/java/org/apache/commons/lang/text/StrBuilder.java_1776-1777": {
      "loc": "1776-1777",
      "input": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0 ? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer; int len = thisBuf.length - strLen; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j) != thisBuf[i + j]) { continue outer; } } return i; } return -1; }",
      "target": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0 ? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer; int len = size - strLen + 1; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j) != thisBuf[i + j]) { continue outer; } } return i; } return -1; }",
      "function range": "1760,5-1787,5",
      "raw_output": [
        "public int indexOf ( String string, int start ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( start < 0 ) { throw new IllegalArgumentException ( \"start cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } int length = string. length ( ) ; for ( int i = start ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int start ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( start < 0 ) { throw new IllegalArgumentException ( \"start cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( start ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int start ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( start < 0 ) { throw new IllegalArgumentException ( \"start cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( start ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int start ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( start < 0 ) { throw new IllegalArgumentException ( \"start cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } int length = string. length ( ) ; for ( int i = start ; i < length ; i ++ ) { if ( string. charAt ( i )!= string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int start ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( start < 0 ) { throw new IllegalArgumentException ( \"start cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } for ( int i = start ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = startIndex ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = startIndex ; i < length ; i ++ ) { if ( string. charAt ( i )!= string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < data. length ; i ++ ) { if ( data [ i ]. equals ( string ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( String str, int start ) { if ( str == null ) { return - 1 ; } if ( start < 0 || start > str. length ( ) ) { return - 1 ; } for ( int i = start ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( String str, int start ) { if ( str == null ) { return - 1 ; } if ( start < 0 || start > str. length ( ) ) { return - 1 ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( start ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( String str, int start ) { if ( str == null ) { return - 1 ; } if ( start < 0 || start > str. length ( ) ) { return - 1 ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( String str, int start ) { if ( str == null ) { return - 1 ; } if ( start < 0 || start > str. length ( ) ) { return - 1 ; } for ( int i = start ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i )!= str. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public static int indexOf ( String str, int start ) { if ( str == null ) { return - 1 ; } if ( start < 0 || start > str. length ( ) ) { return - 1 ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( start + i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = startIndex ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = startIndex ; i < length ; i ++ ) { if ( string. charAt ( i )!= string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = startIndex ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( startIndex ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < string. length ( ) ; i ++ ) { char c = string. charAt ( i ) ; if ( c == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } throw new IndexOutOfBoundsException ( ) ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( string. charAt ( startIndex )!= string. charAt ( string. length ( ) - 1 ) ) { return - 1 ; } return string. indexOf ( string, startIndex ) ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } throw new IndexOutOfBoundsException ( \"Index out of range\" ) ; }"
      ],
      "mid_translation": [
        "Returns the index of the first occurrence of the specified string in this buffer starting at the specified index.",
        "Returns the index of the first occurrence of the specified string in this buffer starting at the specified index. Returns - 1 if the string is not found.",
        "Returns the index of the first occurrence of the specified string in the specified string starting at the specified index.",
        "Returns the index of the first occurrence of the specified string in the buffer starting at the specified index. Returns - 1 if the string is not found.",
        "Returns the index of the first occurrence of the specified string in this string starting at the specified index. Returns - 1 if the string is not found."
      ],
      "output": [
        "public int indexOf ( String string, int start ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( start < 0 ) { throw new IllegalArgumentException ( \"start cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } int length = string. length ( ) ; for ( int i = start ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int start ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( start < 0 ) { throw new IllegalArgumentException ( \"start cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( start ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int start ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( start < 0 ) { throw new IllegalArgumentException ( \"start cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( start ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int start ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( start < 0 ) { throw new IllegalArgumentException ( \"start cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } int length = string. length ( ) ; for ( int i = start ; i < length ; i ++ ) { if ( string. charAt ( i )!= string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int start ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( start < 0 ) { throw new IllegalArgumentException ( \"start cannot be null\" ) ; } if ( string. length ( ) == 0 ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } for ( int i = start ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = startIndex ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = startIndex ; i < length ; i ++ ) { if ( string. charAt ( i )!= string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < data. length ; i ++ ) { if ( data [ i ]. equals ( string ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String str, int start ) { if ( str == null ) { return - 1 ; } if ( start < 0 || start > str. length ( ) ) { return - 1 ; } for ( int i = start ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String str, int start ) { if ( str == null ) { return - 1 ; } if ( start < 0 || start > str. length ( ) ) { return - 1 ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( start ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String str, int start ) { if ( str == null ) { return - 1 ; } if ( start < 0 || start > str. length ( ) ) { return - 1 ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String str, int start ) { if ( str == null ) { return - 1 ; } if ( start < 0 || start > str. length ( ) ) { return - 1 ; } for ( int i = start ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i )!= str. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String str, int start ) { if ( str == null ) { return - 1 ; } if ( start < 0 || start > str. length ( ) ) { return - 1 ; } for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == str. charAt ( start + i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = startIndex ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = startIndex ; i < length ; i ++ ) { if ( string. charAt ( i )!= string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = startIndex ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } int length = string. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( startIndex ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < string. length ( ) ; i ++ ) { char c = string. charAt ( i ) ; if ( c == string. charAt ( i ) ) { return i ; } } return - 1 ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } throw new IndexOutOfBoundsException ( ) ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( string. charAt ( startIndex )!= string. charAt ( string. length ( ) - 1 ) ) { return - 1 ; } return string. indexOf ( string, startIndex ) ; }",
        "public int indexOf ( String string, int startIndex ) { if ( string == null ) { throw new IllegalArgumentException ( \"string cannot be null\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } if ( startIndex < 0 || startIndex > string. length ( ) ) { throw new IllegalArgumentException ( \"Index out of range\" ) ; } for ( int i = startIndex ; i < string. length ( ) ; i ++ ) { if ( string. charAt ( i ) == string. charAt ( i ) ) { return i ; } } throw new IndexOutOfBoundsException ( \"Index out of range\" ) ; }"
      ]
    },
    "Math_2_/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java_268-269": {
      "loc": "268-269",
      "input": "public double getNumericalMean() { return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize(); }",
      "target": "public double getNumericalMean() { return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize()); }",
      "function range": "267,5-269,5",
      "raw_output": [
        "public double mean ( ) { double sum = 0 ; for ( int i = 0 ; i < trainingData. length ; i ++ ) { sum += trainingData [ i ]. mean ( ) ; } return sum / trainingData. length ; }",
        "public double mean ( ) { double sum = 0 ; for ( int i = 0 ; i < trainingData. length ; i ++ ) { sum += trainingData [ i ]. mean ( ) ; } return sum ; }",
        "public double mean ( ) { double sum = 0.0 ; for ( int i = 0 ; i < trainingData. length ; i ++ ) { sum += trainingData [ i ]. mean ( ) ; } return sum / trainingData. length ; }",
        "public double mean ( ) { double sum = 0 ; for ( int i = 0 ; i < trainingData. size ( ) ; i ++ ) { sum += trainingData. get ( i ). mean ( ) ; } return sum ; }",
        "public double mean ( ) { double sum = 0 ; for ( int i = 0 ; i < trainingData. length ; i ++ ) { sum += trainingData [ i ]. sum ( ) ; } return sum / trainingData. length ; }",
        "public double actualMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "protected double actualMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public static double actualMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "protected double actualMean ( double [ ] x ) { double sum = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public double actualMean ( double [ ] x ) { double sum = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public static double mean ( FlatDataCollection flatDataCollection ) { double sum = 0 ; Iterator < Double > it = flatDataCollection. iteratorDouble ( ) ; while ( it. hasNext ( ) ) { sum += it. next ( ) ; } return sum / flatDataCollection. size ( ) ; }",
        "public static double mean ( FlatDataCollection flatDataCollection ) { double sum = 0 ; Iterator < Double > it = flatDataCollection. iteratorDouble ( ) ; while ( it. hasNext ( ) ) { sum += it. next ( ) ; } return sum / ( double ) flatDataCollection. size ( ) ; }",
        "public static double mean ( FlatDataCollection flatDataCollection ) { double sum = 0 ; Iterator < Double > it = flatDataCollection. iteratorDouble ( ) ; while ( it. hasNext ( ) ) { sum += it. next ( ). doubleValue ( ) ; } return sum / flatDataCollection. size ( ) ; }",
        "public static double mean ( FlatDataCollection flatDataCollection ) { double sum = 0 ; Iterator < Double > it = flatDataCollection. iteratorDouble ( ) ; while ( it. hasNext ( ) ) { Double v = it. next ( ) ; sum += v * v ; } return sum / flatDataCollection. size ( ) ; }",
        "public static double mean ( FlatDataCollection flatDataCollection ) { double sum = 0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { sum += iterator. next ( ) ; iterator. remove ( ) ; } return sum / flatDataCollection. size ( ) ; }",
        "public static double mean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] ; } return sum / x. length ; }",
        "public static double mean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "protected double mean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public static double mean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += Math. abs ( x [ i ] ) ; } return sum / x. length ; }",
        "public double mean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public static double mean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] ; } return sum / x. length ; }",
        "public static double mean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public static double mean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += Math. abs ( x [ i ] ) ; } return sum / x. length ; }",
        "public static double mean ( double [ ] data ) { double sum = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { sum += data [ i ] ; } return sum / data. length ; }",
        "public static double mean ( double [ ] x ) { double sum = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] ; } return sum / x. length ; }"
      ],
      "mid_translation": [
        "Convenience method to compute the mean of the training data",
        "Computes the actual mean of the training data",
        "Computes the numerical mean",
        "Computes the numerical mean for the training data",
        "Computes the numerical mean for the data"
      ],
      "output": [
        "public double getNumericalMean ( ) { double sum = 0 ; for ( int i = 0 ; i < trainingData. length ; i ++ ) { sum += trainingData [ i ]. mean ( ) ; } return sum / trainingData. length ; }",
        "public double getNumericalMean ( ) { double sum = 0 ; for ( int i = 0 ; i < trainingData. length ; i ++ ) { sum += trainingData [ i ]. mean ( ) ; } return sum ; }",
        "public double getNumericalMean ( ) { double sum = 0.0 ; for ( int i = 0 ; i < trainingData. length ; i ++ ) { sum += trainingData [ i ]. mean ( ) ; } return sum / trainingData. length ; }",
        "public double getNumericalMean ( ) { double sum = 0 ; for ( int i = 0 ; i < trainingData. size ( ) ; i ++ ) { sum += trainingData. get ( i ). mean ( ) ; } return sum ; }",
        "public double getNumericalMean ( ) { double sum = 0 ; for ( int i = 0 ; i < trainingData. length ; i ++ ) { sum += trainingData [ i ]. sum ( ) ; } return sum / trainingData. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public double getNumericalMean ( FlatDataCollection flatDataCollection ) { double sum = 0 ; Iterator < Double > it = flatDataCollection. iteratorDouble ( ) ; while ( it. hasNext ( ) ) { sum += it. next ( ) ; } return sum / flatDataCollection. size ( ) ; }",
        "public double getNumericalMean ( FlatDataCollection flatDataCollection ) { double sum = 0 ; Iterator < Double > it = flatDataCollection. iteratorDouble ( ) ; while ( it. hasNext ( ) ) { sum += it. next ( ) ; } return sum / ( double ) flatDataCollection. size ( ) ; }",
        "public double getNumericalMean ( FlatDataCollection flatDataCollection ) { double sum = 0 ; Iterator < Double > it = flatDataCollection. iteratorDouble ( ) ; while ( it. hasNext ( ) ) { sum += it. next ( ). doubleValue ( ) ; } return sum / flatDataCollection. size ( ) ; }",
        "public double getNumericalMean ( FlatDataCollection flatDataCollection ) { double sum = 0 ; Iterator < Double > it = flatDataCollection. iteratorDouble ( ) ; while ( it. hasNext ( ) ) { Double v = it. next ( ) ; sum += v * v ; } return sum / flatDataCollection. size ( ) ; }",
        "public double getNumericalMean ( FlatDataCollection flatDataCollection ) { double sum = 0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { sum += iterator. next ( ) ; iterator. remove ( ) ; } return sum / flatDataCollection. size ( ) ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += Math. abs ( x [ i ] ) ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * x [ i ] ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += Math. abs ( x [ i ] ) ; } return sum / x. length ; }",
        "public double getNumericalMean ( double [ ] data ) { double sum = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { sum += data [ i ] ; } return sum / data. length ; }",
        "public double getNumericalMean ( double [ ] x ) { double sum = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] ; } return sum / x. length ; }"
      ]
    },
    "Math_5_/src/main/java/org/apache/commons/math3/complex/Complex.java_305-306": {
      "loc": "305-306",
      "input": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) { return NaN; } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
      "target": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) { return INF; } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
      "function range": "299,5-321,5",
      "raw_output": [
        "public static ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( Math. exp ( z. real ), Math. exp ( z. imag ) ) ; }",
        "public static ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real * z. imaginary, z. imaginary * z. real ) ; }",
        "public static ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real, z. imaginary ) ; }",
        "public static ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real - z. real, z. imag - z. imag ) ; }",
        "public static ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real * z. real, z. imag * z. imag ) ; }",
        "public BigComplex reciprocal ( ) { BigComplex c = new BigComplex ( real, imag ) ; return c ; }",
        "public BigComplex reciprocal ( ) { BigComplex ret = new BigComplex ( real, imag ) ; return ret ; }",
        "public BigComplex reciprocal ( ) { BigComplex c = new BigComplex ( this. real, this. imag ) ; return c ; }",
        "public Complex reciprocal ( ) { return new Complex ( Math. exp ( real ), Math. exp ( imag ) ) ; }",
        "public Complex reciprocal ( ) { Complex ret = new Complex ( real, imag ) ; return ret ; }",
        "public static ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real, z. imaginary ) ; }",
        "public static ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( Math. exp ( z. real ), Math. exp ( z. imag ) ) ; }",
        "public static ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real * z. imaginary, z. imaginary * z. real ) ; }",
        "public static ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( Math. exp ( z. real ), Math. exp ( z. imaginary ) ) ; }",
        "public static ComplexNumber reciprocal ( ComplexNumber z1 ) { return new ComplexNumber ( z1. real * z1. imaginary, z1. imaginary * z1. real ) ; }",
        "public BigComplex getReciprocal ( ) { BigComplex reciprocal = new BigComplex ( real, imag ) ; return reciprocal ; }",
        "public BigComplex getReciprocal ( ) { BigComplex reciprocal = new BigComplex ( this. real, this. imag ) ; return reciprocal ; }",
        "public BigComplex getReciprocal ( ) { BigComplex ret = new BigComplex ( real, imag ) ; return ret ; }",
        "public BigComplex getReciprocal ( ) { BigComplex c = new BigComplex ( real, imag ) ; return c ; }",
        "public BigComplex getReciprocal ( ) { BigComplex result = new BigComplex ( real, imag ) ; result. re = re * result. re ; result. im = im * result. im ; return result ; }",
        "public static ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real, z. imaginary ) ; }",
        "public BigComplex reciprocal ( ) { BigComplex c = new BigComplex ( real, imag ) ; return c ; }",
        "public ComplexNumber reciprocal ( ) { ComplexNumber ret = new ComplexNumber ( real, imag ) ; return ret ; }",
        "public BigComplex reciprocal ( ) { BigComplex ret = new BigComplex ( real, imag ) ; return ret ; }",
        "public BigComplex reciprocal ( ) { BigComplex result = new BigComplex ( real, imag ) ; return result ; }"
      ],
      "mid_translation": [
        "Returns the reciprocal of this complex number.",
        "Returns the reciprocal of this complex value.",
        "Gets the reciprocal of this complex number.",
        "Gets the reciprocal of this complex value.",
        "Returns the reciprocal value of this complex number."
      ],
      "output": [
        "public ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( Math. exp ( z. real ), Math. exp ( z. imag ) ) ; }",
        "public ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real * z. imaginary, z. imaginary * z. real ) ; }",
        "public ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real, z. imaginary ) ; }",
        "public ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real - z. real, z. imag - z. imag ) ; }",
        "public ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real * z. real, z. imag * z. imag ) ; }",
        "public BigComplex reciprocal ( ) { BigComplex c = new BigComplex ( real, imag ) ; return c ; }",
        "public BigComplex reciprocal ( ) { BigComplex ret = new BigComplex ( real, imag ) ; return ret ; }",
        "public BigComplex reciprocal ( ) { BigComplex c = new BigComplex ( this. real, this. imag ) ; return c ; }",
        "public Complex reciprocal ( ) { return new Complex ( Math. exp ( real ), Math. exp ( imag ) ) ; }",
        "public Complex reciprocal ( ) { Complex ret = new Complex ( real, imag ) ; return ret ; }",
        "public ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real, z. imaginary ) ; }",
        "public ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( Math. exp ( z. real ), Math. exp ( z. imag ) ) ; }",
        "public ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real * z. imaginary, z. imaginary * z. real ) ; }",
        "public ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( Math. exp ( z. real ), Math. exp ( z. imaginary ) ) ; }",
        "public ComplexNumber reciprocal ( ComplexNumber z1 ) { return new ComplexNumber ( z1. real * z1. imaginary, z1. imaginary * z1. real ) ; }",
        "public BigComplex reciprocal ( ) { BigComplex reciprocal = new BigComplex ( real, imag ) ; return reciprocal ; }",
        "public BigComplex reciprocal ( ) { BigComplex reciprocal = new BigComplex ( this. real, this. imag ) ; return reciprocal ; }",
        "public BigComplex reciprocal ( ) { BigComplex ret = new BigComplex ( real, imag ) ; return ret ; }",
        "public BigComplex reciprocal ( ) { BigComplex c = new BigComplex ( real, imag ) ; return c ; }",
        "public BigComplex reciprocal ( ) { BigComplex result = new BigComplex ( real, imag ) ; result. re = re * result. re ; result. im = im * result. im ; return result ; }",
        "public ComplexNumber reciprocal ( ComplexNumber z ) { return new ComplexNumber ( z. real, z. imaginary ) ; }",
        "public BigComplex reciprocal ( ) { BigComplex c = new BigComplex ( real, imag ) ; return c ; }",
        "public ComplexNumber reciprocal ( ) { ComplexNumber ret = new ComplexNumber ( real, imag ) ; return ret ; }",
        "public BigComplex reciprocal ( ) { BigComplex ret = new BigComplex ( real, imag ) ; return ret ; }",
        "public BigComplex reciprocal ( ) { BigComplex result = new BigComplex ( real, imag ) ; return result ; }"
      ]
    },
    "Math_9_/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java_87-88": {
      "loc": "87-88",
      "input": "public Line revert() { final Line reverted = new Line(zero, zero.subtract(direction)); return reverted; }",
      "target": "public Line revert() { final Line reverted = new Line(this); reverted.direction = reverted.direction.negate(); return reverted; }",
      "function range": "86,5-89,5",
      "raw_output": [
        "public static String toRevertedLine ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } else if ( c =='' ) { output. append ('' ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String toRevertedLine ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; switch ( c ) { case'' : output. append ('' ) ; break ; case'' : output. append ('' ) ; break ; default : output. append ( c ) ; } } return output. toString ( ) ; }",
        "public static String toRevertedLine ( String input ) { if ( input == null ) { return null ; } if ( input. length ( ) == 0 ) { return input ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String toRevertedLine ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder buffer = new StringBuilder ( input. length ( ) ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { buffer. append ('' ) ; } else { buffer. append ( c ) ; } } return buffer. toString ( ) ; }",
        "public static String toRevertedLine ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { if ( input. charAt ( i )!='' ) { output. append ( input. charAt ( i ) ) ; } else { output. append ( input. charAt ( i ) ) ; } } return output. toString ( ) ; }",
        "public static String toRevertLine ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String convertRevertLine ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String convertRevertLine ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; switch ( c ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String toRevertLine ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { output. append ( input. charAt ( i ) ) ; if ( i < input. length ( ) - 1 ) { output. append ('' ) ; } output. append ( input. substring ( i + 1 ) ) ; } return output. toString ( ) ; }",
        "public static String toRevertLine ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { if ( input. charAt ( i ) =='' ) { output. append ( input. substring ( i, i + 1 ) ) ; } else { output. append ( input. substring ( i, i + 1 ) ) ; } } return output. toString ( ) ; }",
        "public String getRevertLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( String line : getRevertLines ( ) ) { sb. append ( line ). append ( \"\\n\" ) ; } return sb. toString ( ) ; }",
        "public String getRevertLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( String line : getRevertLines ( ) ) { sb. append ( line ) ; sb. append ( \"\\n\" ) ; } return sb. toString ( ) ; }",
        "public String getRevertLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( String line : getRevertLines ( ) ) { buf. append ( line ). append ( \"\\n\" ) ; } return buf. toString ( ) ; }",
        "public String getRevertLine ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( String line : getRevertLines ( ) ) { buf. append ( line ) ; } return buf. toString ( ) ; }",
        "public String getRevertLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( String line : getRevertLines ( ) ) { sb. append ( line ) ; } return sb. toString ( ) ; }",
        "public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ; i ++ ) { sb. append ( line [ i ] ) ; } return sb. toString ( ) ; }",
        "public String toString ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ; i ++ ) { buf. append ( line [ i ] ) ; } return buf. toString ( ) ; }",
        "public String get ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ; i ++ ) { sb. append ( line [ i ] ) ; } return sb. toString ( ) ; }",
        "public String get ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ; i ++ ) { buf. append ( line [ i ] ) ; } return buf. toString ( ) ; }",
        "public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ( ) ; i ++ ) { sb. append ( line. charAt ( i ) ) ; } return sb. toString ( ) ; }",
        "public String getRevertedLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < lines. length ; i ++ ) { if ( i > 0 ) { sb. append ('' ) ; } sb. append ( lines [ i ] ) ; } return sb. toString ( ) ; }",
        "public String getRevertedLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( data [ i ] ) ; if ( i < data. length - 1 ) { sb. append ('' ) ; } } return sb. toString ( ) ; }",
        "public String getRevertedLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( i > 0 ) { sb. append ('' ) ; } sb. append ( data [ i ] ) ; } return sb. toString ( ) ; }",
        "public String getRevertedLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( data [ i ] ) ; if ( i < data. length - 1 ) { sb. append ( \" \" ) ; } } return sb. toString ( ) ; }",
        "public String getRevertedLine ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( data [ i ] ) ; if ( i < data. length - 1 ) { sb. append ( \", \" ) ; } } return sb. toString ( ) ; }"
      ],
      "mid_translation": [
        "Converts the input to a reverted line.",
        "Converts the input to a revert line.",
        "Returns a copy of the revert line.",
        "Returns a copy of the input line with the changes made.",
        "Gets the reverted line."
      ],
      "output": [
        "public String revert ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { output. append ('' ) ; } else if ( c =='' ) { output. append ('' ) ; } else { output. append ( c ) ; } } return output. toString ( ) ; }",
        "public String revert ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; switch ( c ) { case'' : output. append ('' ) ; break ; case'' : output. append ('' ) ; break ; default : output. append ( c ) ; } } return output. toString ( ) ; }",
        "public String revert ( String input ) { if ( input == null ) { return null ; } if ( input. length ( ) == 0 ) { return input ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public String revert ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder buffer = new StringBuilder ( input. length ( ) ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { buffer. append ('' ) ; } else { buffer. append ( c ) ; } } return buffer. toString ( ) ; }",
        "public String revert ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { if ( input. charAt ( i )!='' ) { output. append ( input. charAt ( i ) ) ; } else { output. append ( input. charAt ( i ) ) ; } } return output. toString ( ) ; }",
        "public String revert ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public String revert ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public String revert ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { char c = input. charAt ( i ) ; switch ( c ) { case'' : sb. append ('' ) ; break ; case'' : sb. append ('' ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public String revert ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { output. append ( input. charAt ( i ) ) ; if ( i < input. length ( ) - 1 ) { output. append ('' ) ; } output. append ( input. substring ( i + 1 ) ) ; } return output. toString ( ) ; }",
        "public String revert ( String input ) { if ( input == null || input. length ( ) == 0 ) { return input ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { if ( input. charAt ( i ) =='' ) { output. append ( input. substring ( i, i + 1 ) ) ; } else { output. append ( input. substring ( i, i + 1 ) ) ; } } return output. toString ( ) ; }",
        "public String revert ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( String line : getRevertLines ( ) ) { sb. append ( line ). append ( \"\\n\" ) ; } return sb. toString ( ) ; }",
        "public String revert ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( String line : getRevertLines ( ) ) { sb. append ( line ) ; sb. append ( \"\\n\" ) ; } return sb. toString ( ) ; }",
        "public String revert ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( String line : getRevertLines ( ) ) { buf. append ( line ). append ( \"\\n\" ) ; } return buf. toString ( ) ; }",
        "public String revert ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( String line : getRevertLines ( ) ) { buf. append ( line ) ; } return buf. toString ( ) ; }",
        "public String revert ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( String line : getRevertLines ( ) ) { sb. append ( line ) ; } return sb. toString ( ) ; }",
        "public String revert ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ; i ++ ) { sb. append ( line [ i ] ) ; } return sb. toString ( ) ; }",
        "public String revert ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ; i ++ ) { buf. append ( line [ i ] ) ; } return buf. toString ( ) ; }",
        "public String revert ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ; i ++ ) { sb. append ( line [ i ] ) ; } return sb. toString ( ) ; }",
        "public String revert ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ; i ++ ) { buf. append ( line [ i ] ) ; } return buf. toString ( ) ; }",
        "public String revert ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < line. length ( ) ; i ++ ) { sb. append ( line. charAt ( i ) ) ; } return sb. toString ( ) ; }",
        "public String revert ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < lines. length ; i ++ ) { if ( i > 0 ) { sb. append ('' ) ; } sb. append ( lines [ i ] ) ; } return sb. toString ( ) ; }",
        "public String revert ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( data [ i ] ) ; if ( i < data. length - 1 ) { sb. append ('' ) ; } } return sb. toString ( ) ; }",
        "public String revert ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( i > 0 ) { sb. append ('' ) ; } sb. append ( data [ i ] ) ; } return sb. toString ( ) ; }",
        "public String revert ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( data [ i ] ) ; if ( i < data. length - 1 ) { sb. append ( \" \" ) ; } } return sb. toString ( ) ; }",
        "public String revert ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( data [ i ] ) ; if ( i < data. length - 1 ) { sb. append ( \", \" ) ; } } return sb. toString ( ) ; }"
      ]
    },
    "Math_11_/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java_183-184": {
      "loc": "183-184",
      "input": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
      "target": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } return FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
      "function range": "177,5-186,5",
      "raw_output": [
        "public static double density ( double x, double y ) { return Math. sqrt ( x * x + y * y ) / Math. sqrt ( x * x + y * y ) ; }",
        "public double density ( double x, double y ) { return Math. sqrt ( x * x + y * y ) / Math. sqrt ( x * x + y * y ) ; }",
        "public double density ( double x, double y, double z ) { return Math. sqrt ( x * x + y * y + z * z ) ; }",
        "public double density ( double x, double y ) { return Math. sqrt ( x * x + y * y ) / ( Math. sqrt ( x * x + y * y ) ) ; }",
        "public double density ( double x, double y, double z ) { return Math. sqrt ( x * x + y * y ) / Math. sqrt ( z * z ) ; }",
        "public static double density ( double [ ] [ ] matrix ) { double density = 0.0 ; for ( int i = 0 ; i < matrix. length ; i ++ ) { for ( int j = 0 ; j < matrix [ i ]. length ; j ++ ) { density += matrix [ i ] [ j ] * matrix [ i ] [ j ] ; } } return density ; }",
        "public static double density ( double [ ] [ ] matrix ) { double density = 0.0 ; for ( int i = 0 ; i < matrix. length ; i ++ ) { for ( int j = 0 ; j < matrix [ i ]. length ; j ++ ) { density += matrix [ i ] [ j ] / matrix [ i ] [ j ] ; } } return density ; }",
        "public static double density ( double [ ] [ ] x ) { double density = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] [ j ] * x [ j ] ; } } return density ; }",
        "public static double density ( double [ ] [ ] x ) { double density = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] [ j ] ; } } return density ; }",
        "public static double density ( double [ ] [ ] x ) { double density = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] [ j ] ; } } return density ; }",
        "public double density ( DMatrixRMaj A ) { if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numRows ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numRows ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A",
        "public double density ( DMatrixRMaj A ) { if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numRows ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numRows ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A",
        "public double density ( DMatrixRMaj A ) { if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numRows ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numRows ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A",
        "public double density ( DMatrixRMaj A ) { if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numRows ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numRows ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A",
        "public double density ( DMatrixRMaj A ) { if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numRows ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numRows ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A",
        "public double density ( double [ ] x ) { double density = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] * x [ j ] ; } } return density ; }",
        "public double density ( double [ ] x ) { double density = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] * y [ j ] ; } } return density ; }",
        "public double density ( double [ ] x ) { double density = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] [ j ] ; } } return density ; }",
        "public double density ( ) { double density = 0 ; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < columns ; j ++ ) { density += density ( i, j ) ; } } return density ; }",
        "public double density ( ) { double density = 0.0 ; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < columns ; j ++ ) { density += density ( i, j ) ; } } return density ; }",
        "public static double density ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) / Math. sqrt ( Math. pow ( x, 2 ) ) ; }",
        "public static double density ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) / Math. sqrt ( Math. pow ( x, 2 ) ) / Math. sqrt ( Math. pow ( y, 2 ) ) ; }",
        "public static double density ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) / Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) ; }",
        "public static double density ( double x, double y ) { if ( Double. isNaN ( x ) || Double. isInfinite ( x ) || Double. isNaN ( y ) ) { return 0.0 ; } return Math. sqrt ( x * x + y * y ) ; }",
        "public static double density ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) ; }"
      ],
      "mid_translation": [
        "density function.",
        "Method to calculate the density value of a matrix.",
        "Method to compute the density value of a matrix.",
        "Method to calculate the density value of the matrix.",
        "Calculates the density value of the given values."
      ],
      "output": [
        "public double density ( double x, double y ) { return Math. sqrt ( x * x + y * y ) / Math. sqrt ( x * x + y * y ) ; }",
        "public double density ( double x, double y ) { return Math. sqrt ( x * x + y * y ) / Math. sqrt ( x * x + y * y ) ; }",
        "public double density ( double x, double y, double z ) { return Math. sqrt ( x * x + y * y + z * z ) ; }",
        "public double density ( double x, double y ) { return Math. sqrt ( x * x + y * y ) / ( Math. sqrt ( x * x + y * y ) ) ; }",
        "public double density ( double x, double y, double z ) { return Math. sqrt ( x * x + y * y ) / Math. sqrt ( z * z ) ; }",
        "public double density ( double [ ] [ ] matrix ) { double density = 0.0 ; for ( int i = 0 ; i < matrix. length ; i ++ ) { for ( int j = 0 ; j < matrix [ i ]. length ; j ++ ) { density += matrix [ i ] [ j ] * matrix [ i ] [ j ] ; } } return density ; }",
        "public double density ( double [ ] [ ] matrix ) { double density = 0.0 ; for ( int i = 0 ; i < matrix. length ; i ++ ) { for ( int j = 0 ; j < matrix [ i ]. length ; j ++ ) { density += matrix [ i ] [ j ] / matrix [ i ] [ j ] ; } } return density ; }",
        "public double density ( double [ ] [ ] x ) { double density = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] [ j ] * x [ j ] ; } } return density ; }",
        "public double density ( double [ ] [ ] x ) { double density = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] [ j ] ; } } return density ; }",
        "public double density ( double [ ] [ ] x ) { double density = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] [ j ] ; } } return density ; }",
        "public double density ( DMatrixRMaj A ) { if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numRows ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numRows ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A",
        "public double density ( DMatrixRMaj A ) { if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numRows ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numRows ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A",
        "public double density ( DMatrixRMaj A ) { if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numRows ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numRows ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A",
        "public double density ( DMatrixRMaj A ) { if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numRows ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numRows ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A",
        "public double density ( DMatrixRMaj A ) { if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numRows ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numRows ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numRows ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numRows ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A. numCols ( ) ) ; } else if ( A. numCols ( )!= A. numCols ( ) ) { throw new IllegalArgumentException ( A. numCols ( ) + \"!= \" + A",
        "public double density ( double [ ] x ) { double density = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] * x [ j ] ; } } return density ; }",
        "public double density ( double [ ] x ) { double density = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] * y [ j ] ; } } return density ; }",
        "public double density ( double [ ] x ) { double density = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { density += x [ i ] [ j ] ; } } return density ; }",
        "public double density ( ) { double density = 0 ; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < columns ; j ++ ) { density += density ( i, j ) ; } } return density ; }",
        "public double density ( ) { double density = 0.0 ; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < columns ; j ++ ) { density += density ( i, j ) ; } } return density ; }",
        "public double density ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) / Math. sqrt ( Math. pow ( x, 2 ) ) ; }",
        "public double density ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) / Math. sqrt ( Math. pow ( x, 2 ) ) / Math. sqrt ( Math. pow ( y, 2 ) ) ; }",
        "public double density ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) / Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) ; }",
        "public double density ( double x, double y ) { if ( Double. isNaN ( x ) || Double. isInfinite ( x ) || Double. isNaN ( y ) ) { return 0.0 ; } return Math. sqrt ( x * x + y * y ) ; }",
        "public double density ( double x, double y ) { return Math. sqrt ( Math. pow ( x, 2 ) + Math. pow ( y, 2 ) ) ; }"
      ]
    },
    "Math_20_/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java_921-922": {
      "loc": "921-922",
      "input": "public double[] repairAndDecode(final double[] x) { return decode(x); }",
      "target": "public double[] repairAndDecode(final double[] x) { return boundaries != null && isRepairMode ? decode(repair(x)) : decode(x); }",
      "function range": "920,9-923,9",
      "raw_output": [
        "public static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { if ( data == null || offset + length > data. length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, data. length ) ; return result ; }",
        "public static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { if ( data == null || offset + length > data. length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, length ) ; return result ; }",
        "public static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; decodeDoubleArray ( data, offset, length, result ) ; return result ; }",
        "public static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { if ( data == null || offset + length > data. length ) { return null ; } double [ ] result = new double [ length ] ; decodeDoubleArray ( data, offset, length, result ) ; return result ; }",
        "public static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; decodeDoubleArray ( data, offset, result ) ; return result ; }",
        "private static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { double [ ] result = new double [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = Double. parseDouble ( data [ i ] ) ; } return result ; }",
        "private static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { double [ ] result = new double [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = Double. parseDouble ( data [ offset + i ] ) ; } return result ; }",
        "private static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { double [ ] result = new double [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = decodeDouble ( data [ offset + i ] ) ; } return result ; }",
        "private static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { double [ ] result = new double [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = decodeDouble ( data [ i ] ) ; } return result ; }",
        "private static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { double [ ] result = new double [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = decodeDouble ( data, offset, i ) ; } return result ; }",
        "public static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, length ) ; return result ; }",
        "public static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, data. length ) ; return result ; }",
        "public static double [ ] decode ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, length ) ; return result ; }",
        "public static double [ ] decodeDoubleArray ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = decodeDouble ( data, i ) ; } return result ; }",
        "public static double [ ] decode ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, data. length ) ; return result ; }",
        "public static List < Double > decode ( byte [ ] data, int offset, int length ) { List < Double > result = new ArrayList <> ( ) ; for ( int i = offset ; i < offset + length ; i ++ ) { result. add ( decode ( data [ i ] ) ) ; } return result ; }",
        "public static List < Double > decode ( byte [ ] data, int offset, int length ) { List < Double > result = new ArrayList <> ( ) ; for ( int i = 0 ; i < length ; i ++ ) { result. add ( decode ( data [ offset + i ] ) ) ; } return result ; }",
        "public static List < Double > decode ( byte [ ] data, int offset, int length ) { List < Double > result = new ArrayList <> ( length ) ; for ( int i = offset ; i < offset + length ; i ++ ) { result. add ( decode ( data [ i ] ) ) ; } return result ; }",
        "public static List < Double > decode ( byte [ ] data, int offset, int length ) { List < Double > result = new ArrayList <> ( ) ; for ( int i = offset ; i < offset + length ; i ++ ) { result. add ( decode ( data, i ) ) ; } return result ; }",
        "public static List < Double > decode ( byte [ ] data, int offset, int length ) { List < Double > result = new ArrayList <> ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { result. add ( decode ( data [ offset + i ] ) ) ; } return result ; }",
        "public static double [ ] decodeDoubleArray ( double [ ] array ) { if ( array == null ) { return null ; } if ( array. length == 0 ) { return array ; } double [ ] result = new double [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = decodeDouble ( array [ i ] ) ; } return result ; }",
        "public static double [ ] decodeDoubleArray ( double [ ] array ) { if ( array == null ) { return null ; } if ( array. length == 0 ) { return array ; } double [ ] result = new double [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = decodeDoubleArray ( array [ i ] ) ; } return result ; }",
        "public static double [ ] decodeDoubleArray ( double [ ] array ) { if ( array == null ) { return null ; } if ( array. length == 0 ) { return array ; } double [ ] result = new double [ array. length ] ; for ( int i = 0 ; i < array. length ; i ++ ) { result [ i ] = decodeDouble ( array [ i ] ) ; } return result ; }",
        "public static double [ ] decodeDoubleArray ( double [ ] array ) { if ( array == null ) { return null ; } if ( array. length == 0 ) { return array ; } double [ ] result = new double [ array. length ] ; for ( int i = 0 ; i < array. length ; i ++ ) { result [ i ] = decodeDoubleArray ( array [ i ] ) ; } return result ; }",
        "public static double [ ] decodeDoubleArray ( double [ ] array ) { if ( array == null ) { return null ; } if ( array. length == 0 ) { return array ; } double [ ] result = new double [ array. length ] ; System. arraycopy ( array, 0, result, 0, array. length ) ; return result ; }"
      ],
      "mid_translation": [
        "Convenience method to repair and decode a double array.",
        "repair and decode double array.",
        "Convenience function to repair and decode a double array.",
        "Convenience method to repair and decode double arrays.",
        "Convenience method to repair and decode double array."
      ],
      "output": [
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { if ( data == null || offset + length > data. length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, data. length ) ; return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { if ( data == null || offset + length > data. length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, length ) ; return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; decodeDoubleArray ( data, offset, length, result ) ; return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { if ( data == null || offset + length > data. length ) { return null ; } double [ ] result = new double [ length ] ; decodeDoubleArray ( data, offset, length, result ) ; return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; decodeDoubleArray ( data, offset, result ) ; return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { double [ ] result = new double [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = Double. parseDouble ( data [ i ] ) ; } return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { double [ ] result = new double [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = Double. parseDouble ( data [ offset + i ] ) ; } return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { double [ ] result = new double [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = decodeDouble ( data [ offset + i ] ) ; } return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { double [ ] result = new double [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = decodeDouble ( data [ i ] ) ; } return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { double [ ] result = new double [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = decodeDouble ( data, offset, i ) ; } return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, length ) ; return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, data. length ) ; return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, length ) ; return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; for ( int i = offset ; i < offset + length ; i ++ ) { result [ i ] = decodeDouble ( data, i ) ; } return result ; }",
        "public double [ ] repairAndDecode ( byte [ ] data, int offset, int length ) { if ( data == null ) { return null ; } if ( length < 0 || data. length < offset + length ) { return null ; } double [ ] result = new double [ length ] ; System. arraycopy ( data, offset, result, 0, data. length ) ; return result ; }",
        "public List < Double > repairAndDecode ( byte [ ] data, int offset, int length ) { List < Double > result = new ArrayList <> ( ) ; for ( int i = offset ; i < offset + length ; i ++ ) { result. add ( decode ( data [ i ] ) ) ; } return result ; }",
        "public List < Double > repairAndDecode ( byte [ ] data, int offset, int length ) { List < Double > result = new ArrayList <> ( ) ; for ( int i = 0 ; i < length ; i ++ ) { result. add ( decode ( data [ offset + i ] ) ) ; } return result ; }",
        "public List < Double > repairAndDecode ( byte [ ] data, int offset, int length ) { List < Double > result = new ArrayList <> ( length ) ; for ( int i = offset ; i < offset + length ; i ++ ) { result. add ( decode ( data [ i ] ) ) ; } return result ; }",
        "public List < Double > repairAndDecode ( byte [ ] data, int offset, int length ) { List < Double > result = new ArrayList <> ( ) ; for ( int i = offset ; i < offset + length ; i ++ ) { result. add ( decode ( data, i ) ) ; } return result ; }",
        "public List < Double > repairAndDecode ( byte [ ] data, int offset, int length ) { List < Double > result = new ArrayList <> ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { result. add ( decode ( data [ offset + i ] ) ) ; } return result ; }",
        "public double [ ] repairAndDecode ( double [ ] array ) { if ( array == null ) { return null ; } if ( array. length == 0 ) { return array ; } double [ ] result = new double [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = decodeDouble ( array [ i ] ) ; } return result ; }",
        "public double [ ] repairAndDecode ( double [ ] array ) { if ( array == null ) { return null ; } if ( array. length == 0 ) { return array ; } double [ ] result = new double [ array. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = decodeDoubleArray ( array [ i ] ) ; } return result ; }",
        "public double [ ] repairAndDecode ( double [ ] array ) { if ( array == null ) { return null ; } if ( array. length == 0 ) { return array ; } double [ ] result = new double [ array. length ] ; for ( int i = 0 ; i < array. length ; i ++ ) { result [ i ] = decodeDouble ( array [ i ] ) ; } return result ; }",
        "public double [ ] repairAndDecode ( double [ ] array ) { if ( array == null ) { return null ; } if ( array. length == 0 ) { return array ; } double [ ] result = new double [ array. length ] ; for ( int i = 0 ; i < array. length ; i ++ ) { result [ i ] = decodeDoubleArray ( array [ i ] ) ; } return result ; }",
        "public double [ ] repairAndDecode ( double [ ] array ) { if ( array == null ) { return null ; } if ( array. length == 0 ) { return array ; } double [ ] result = new double [ array. length ] ; System. arraycopy ( array, 0, result, 0, array. length ) ; return result ; }"
      ]
    },
    "Math_27_/src/main/java/org/apache/commons/math3/fraction/Fraction.java_597-598": {
      "loc": "597-598",
      "input": "public double percentageValue() { return multiply(100).doubleValue(); }",
      "target": "public double percentageValue() { return 100 * doubleValue(); }",
      "function range": "596,5-598,5",
      "raw_output": [
        "public static double getPercentage ( double percentage ) { if ( percentage < 0 ) { return 0 ; } if ( percentage > 100 ) { return 100 ; } if ( percentage > 100 ) { return 100 ; } return percentage / 100 ; }",
        "public static double getPercentage ( double percentage ) { if ( percentage < 0 || percentage > 100 ) { throw new IllegalArgumentException ( \"Invalid percentage: \" + percentage ) ; } return percentage / 100 ; }",
        "public static double getPercentage ( double percentage ) { if ( percentage < 0 || percentage > 100 ) { throw new IllegalArgumentException ( \"Invalid percentage value: \" + percentage ) ; } return percentage / 100 ; }",
        "public static double getPercentage ( double percentage ) { if ( percentage < 0 || percentage > 100 ) { throw new IllegalArgumentException ( \"Invalid percentage: \" + percentage ) ; } return ( percentage / 100 ) * 100 ; }",
        "public static double getPercentage ( double percentage ) { if ( percentage < 0 ) { return 0 ; } if ( percentage > 100 ) { return 100 ; } if ( percentage == 0 ) { return 0 ; } return ( percentage / 100 ) * 100 ; }",
        "public static Double getPercentage ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100 ) ; }",
        "public static Double getPercentage ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100.0 ) ; }",
        "public static Double getPercentage ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) * 100 ) ; }",
        "public static Double getPercentage ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100d ) ; }",
        "public static Double getPercentage ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) * 100.0 ) ; }",
        "public static double getPercentage ( FlatDataCollection flatDataCollection ) { double percentage = 0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { Double value = iterator. next ( ) ; if ( value!= null ) { percentage += value ; } } return percentage ; }",
        "public static double getPercentage ( FlatDataCollection flatDataCollection ) { double percentage = 0.0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { Double value = iterator. next ( ) ; if ( value!= null ) { percentage += value ; } } return percentage ; }",
        "public static double getPercentage ( FlatDataCollection flatDataCollection ) { double percentage = 0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { Double d = iterator. next ( ) ; if ( d!= null ) { percentage += d ; } } return percentage ; }",
        "public static double getPercentage ( FlatDataCollection flatDataCollection ) { double percentage = 0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { Double v = iterator. next ( ) ; if ( v!= null ) { percentage += v ; } } return percentage ; }",
        "public static double getPercentage ( FlatDataCollection flatDataCollection ) { double percentage = 0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { Double value = iterator. next ( ) ; if ( value!= null ) percentage += value ; } return percentage ; }",
        "public static double getPercentage ( double value ) { if ( Double. isInfinite ( value ) || Double. isNaN ( value ) ) { return 0 ; } return value / 100 ; }",
        "public static double getPercentage ( double value ) { if ( Double. isNaN ( value ) || Double. isInfinite ( value ) ) { return 0 ; } return value / 100 ; }",
        "public static double getPercentage ( double value ) { if ( Double. isInfinite ( value ) || Double. isNaN ( value ) ) { return 0 ; } return ( value / 100 ) * 100 ; }",
        "public static double getPercentage ( double value ) { if ( Double. isInfinite ( value ) || Double. isNaN ( value ) ) { return 0 ; } return value * 100 ; }",
        "public static double getPercentage ( double value ) { if ( Double. isInfinite ( value ) || Double. isNaN ( value ) ) { return 0 ; } return value / 100d ; }",
        "public static Double getPercentage ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100 ) ; }",
        "public static Double getPercentage ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100.0 ) ; }",
        "public static Double getPercentage ( Number value ) { if ( value == null ) { return null ; } return Double. valueOf ( value. doubleValue ( ) / 100 ) ; }",
        "public static Double getPercentage ( Number value ) { if ( value == null ) { return null ; } return Double. valueOf ( value. doubleValue ( ) / 100d ) ; }",
        "public static Double getPercentage ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100d ) ; }"
      ],
      "mid_translation": [
        "Returns the given percentage as a double.",
        "Returns the given percentage value.",
        "Returns the value of a percentage.",
        "Returns a percentage value.",
        "Returns the given value as a percentage."
      ],
      "output": [
        "public double percentageValue ( double percentage ) { if ( percentage < 0 ) { return 0 ; } if ( percentage > 100 ) { return 100 ; } if ( percentage > 100 ) { return 100 ; } return percentage / 100 ; }",
        "public double percentageValue ( double percentage ) { if ( percentage < 0 || percentage > 100 ) { throw new IllegalArgumentException ( \"Invalid percentage: \" + percentage ) ; } return percentage / 100 ; }",
        "public double percentageValue ( double percentage ) { if ( percentage < 0 || percentage > 100 ) { throw new IllegalArgumentException ( \"Invalid percentage value: \" + percentage ) ; } return percentage / 100 ; }",
        "public double percentageValue ( double percentage ) { if ( percentage < 0 || percentage > 100 ) { throw new IllegalArgumentException ( \"Invalid percentage: \" + percentage ) ; } return ( percentage / 100 ) * 100 ; }",
        "public double percentageValue ( double percentage ) { if ( percentage < 0 ) { return 0 ; } if ( percentage > 100 ) { return 100 ; } if ( percentage == 0 ) { return 0 ; } return ( percentage / 100 ) * 100 ; }",
        "public Double percentageValue ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100 ) ; }",
        "public Double percentageValue ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100.0 ) ; }",
        "public Double percentageValue ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) * 100 ) ; }",
        "public Double percentageValue ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100d ) ; }",
        "public Double percentageValue ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) * 100.0 ) ; }",
        "public double percentageValue ( FlatDataCollection flatDataCollection ) { double percentage = 0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { Double value = iterator. next ( ) ; if ( value!= null ) { percentage += value ; } } return percentage ; }",
        "public double percentageValue ( FlatDataCollection flatDataCollection ) { double percentage = 0.0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { Double value = iterator. next ( ) ; if ( value!= null ) { percentage += value ; } } return percentage ; }",
        "public double percentageValue ( FlatDataCollection flatDataCollection ) { double percentage = 0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { Double d = iterator. next ( ) ; if ( d!= null ) { percentage += d ; } } return percentage ; }",
        "public double percentageValue ( FlatDataCollection flatDataCollection ) { double percentage = 0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { Double v = iterator. next ( ) ; if ( v!= null ) { percentage += v ; } } return percentage ; }",
        "public double percentageValue ( FlatDataCollection flatDataCollection ) { double percentage = 0 ; Iterator < Double > iterator = flatDataCollection. iteratorDouble ( ) ; while ( iterator. hasNext ( ) ) { Double value = iterator. next ( ) ; if ( value!= null ) percentage += value ; } return percentage ; }",
        "public double percentageValue ( double value ) { if ( Double. isInfinite ( value ) || Double. isNaN ( value ) ) { return 0 ; } return value / 100 ; }",
        "public double percentageValue ( double value ) { if ( Double. isNaN ( value ) || Double. isInfinite ( value ) ) { return 0 ; } return value / 100 ; }",
        "public double percentageValue ( double value ) { if ( Double. isInfinite ( value ) || Double. isNaN ( value ) ) { return 0 ; } return ( value / 100 ) * 100 ; }",
        "public double percentageValue ( double value ) { if ( Double. isInfinite ( value ) || Double. isNaN ( value ) ) { return 0 ; } return value * 100 ; }",
        "public double percentageValue ( double value ) { if ( Double. isInfinite ( value ) || Double. isNaN ( value ) ) { return 0 ; } return value / 100d ; }",
        "public Double percentageValue ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100 ) ; }",
        "public Double percentageValue ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100.0 ) ; }",
        "public Double percentageValue ( Number value ) { if ( value == null ) { return null ; } return Double. valueOf ( value. doubleValue ( ) / 100 ) ; }",
        "public Double percentageValue ( Number value ) { if ( value == null ) { return null ; } return Double. valueOf ( value. doubleValue ( ) / 100d ) ; }",
        "public Double percentageValue ( Number value ) { return value == null? null : Double. valueOf ( value. doubleValue ( ) / 100d ) ; }"
      ]
    },
    "Math_30_/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java_173-174": {
      "loc": "173-174",
      "input": "private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException { final int n1n2prod = n1 * n2; final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z); }",
      "target": "private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException { final double n1n2prod = n1 * n2; final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z); }",
      "function range": "168,5-184,5",
      "raw_output": [
        "public static double asymptoticP ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < flatDataCollection. size ( ) ; i ++ ) { flatDataCollection. get ( i ) ; sum += asymptoticP ( flatDataCollection. get ( i ) ) ; } return sum / flatDataCollection. size ( ) ; }",
        "public static double asymptoticP ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < flatDataCollection. size ( ) ; i ++ ) { flatDataCollection. get ( i ). asymptoticP ( flatDataCollection. get ( i ) ) ; sum += asymptoticP ( flatDataCollection. get ( i ) ) ; } return sum ; }",
        "public static double asymptoticP ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < flatDataCollection. size ( ) ; i ++ ) { sum += asymptoticP ( flatDataCollection. get ( i ) ) ; } return sum / flatDataCollection. size ( ) ; }",
        "public static double asymptoticP ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < flatDataCollection. size ( ) ; i ++ ) { flatDataCollection. get ( i ) ; sum += asymptoticP ( flatDataCollection. get ( i ) ) ; } return sum ; }",
        "public static double asymptoticP ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < flatDataCollection. size ( ) ; i ++ ) { sum += asymptoticP ( flatDataCollection. get ( i ) ) ; } return sum ; }",
        "public static double asymptoticP ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } return asymptoticP ( flatDataCollection. iterator ( ) ) ; }",
        "public static double asymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null ) { throw new IllegalArgumentException ( \" flatDataCollection cannot be null\" ) ; } return asymptoticPValue ( flatDataCollection. toArray ( ) ) ; }",
        "public static double asymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null ) { throw new IllegalArgumentException ( \"The flatDataCollection cannot be null\" ) ; } return asymptoticPValue ( flatDataCollection. toArray ( ) ) ; }",
        "public static double asymptoticP ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } return asymptoticP ( flatDataCollection. stream ( ). collect ( Collectors. toList ( ) ) ) ; }",
        "public static double asymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null ) { throw new IllegalArgumentException ( \"The flatDataCollection can not be null\" ) ; } return asymptoticPValue ( flatDataCollection. toArray ( ) ) ; }",
        "public static double asymptoticPValue ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } double result = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { result += x [ i ] * y [ i ] ; } return result ; }",
        "public static double asymptoticPValue ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "public static double asymptoticPValue ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "public static double asymptoticPValue ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "public static double asymptoticPValue ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "public static double asymptoticPValue ( double a, double b, double c ) { return asymptoticPValue ( a, b, c, Math. abs ( a ), Math. abs ( b ), Math. abs ( c ) ) ; }",
        "public static double asymptoticPValue ( double a, double b, double c ) { return asymptoticPValue ( a, b, c, Math. abs ( a ), Math. abs ( b ) ) ; }",
        "public static double asymptoticPValue ( double a, double b, double c ) { return asymptoticPValue ( a, b, c, Math. sqrt ( a ), Math. sqrt ( b ) ) ; }",
        "public static double asymptoticPValue ( double a, double b, double c ) { return asymptoticPValue ( a, b, c, 1.0 ) ; }",
        "public static double asymptoticPValue ( double a, double b, double c ) { return asymptoticPValue ( a, b, c, 0 ) ; }",
        "public static double asymptoticP ( double a, double b ) { if ( a <= 0.0 || b <= 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + a ) ; } if ( a == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } if ( b == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } return asymptoticP ( a, b, 1.0 ) ; }",
        "public static double asymptoticP ( double a, double b ) { if ( a <= 0.0 || b <= 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + a ) ; } if ( a == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } if ( b == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } return asymptoticP ( a, b, a ) ; }",
        "public static double asymptoticP ( double a, double b ) { if ( a <= 0.0 || b <= 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + a ) ; } if ( a == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } if ( a == b ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } return asymptoticP ( a, b, 1.0 ) ; }",
        "public static double asymptoticP ( double a, double b ) { if ( a <= 0.0 || b <= 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + a ) ; } if ( a == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } if ( a == b ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + a ) ; } return asymptoticP ( a, b, 1.0 ) ; }",
        "public static double asymptoticP ( double a, double b ) { if ( Math. abs ( a ) > Math. abs ( b ) ) { throw new IllegalArgumentException ( a + \" > \" + b ) ; } if ( Math. abs ( a ) < Math. abs ( b ) ) { throw new IllegalArgumentException ( b + \" > \" + a ) ; } return a / b ; }"
      ],
      "mid_translation": [
        "Calculates asymptotic P value.",
        "Calculates asymptotic P - value.",
        "Calculates asymptotic p - value.",
        "Calculates the asymptotic p - value of a normal distribution.",
        "Calculates the asymptotic P - value of a normal distribution."
      ],
      "output": [
        "private double calculateAsymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < flatDataCollection. size ( ) ; i ++ ) { flatDataCollection. get ( i ) ; sum += asymptoticP ( flatDataCollection. get ( i ) ) ; } return sum / flatDataCollection. size ( ) ; }",
        "private double calculateAsymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < flatDataCollection. size ( ) ; i ++ ) { flatDataCollection. get ( i ). asymptoticP ( flatDataCollection. get ( i ) ) ; sum += asymptoticP ( flatDataCollection. get ( i ) ) ; } return sum ; }",
        "private double calculateAsymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < flatDataCollection. size ( ) ; i ++ ) { sum += asymptoticP ( flatDataCollection. get ( i ) ) ; } return sum / flatDataCollection. size ( ) ; }",
        "private double calculateAsymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < flatDataCollection. size ( ) ; i ++ ) { flatDataCollection. get ( i ) ; sum += asymptoticP ( flatDataCollection. get ( i ) ) ; } return sum ; }",
        "private double calculateAsymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < flatDataCollection. size ( ) ; i ++ ) { sum += asymptoticP ( flatDataCollection. get ( i ) ) ; } return sum ; }",
        "private double calculateAsymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } return asymptoticP ( flatDataCollection. iterator ( ) ) ; }",
        "private double calculateAsymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null ) { throw new IllegalArgumentException ( \" flatDataCollection cannot be null\" ) ; } return asymptoticPValue ( flatDataCollection. toArray ( ) ) ; }",
        "private double calculateAsymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null ) { throw new IllegalArgumentException ( \"The flatDataCollection cannot be null\" ) ; } return asymptoticPValue ( flatDataCollection. toArray ( ) ) ; }",
        "private double calculateAsymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null || flatDataCollection. isEmpty ( ) ) { throw new IllegalArgumentException ( \"The flatDataCollection can't be null or empty.\" ) ; } return asymptoticP ( flatDataCollection. stream ( ). collect ( Collectors. toList ( ) ) ) ; }",
        "private double calculateAsymptoticPValue ( FlatDataCollection flatDataCollection ) { if ( flatDataCollection == null ) { throw new IllegalArgumentException ( \"The flatDataCollection can not be null\" ) ; } return asymptoticPValue ( flatDataCollection. toArray ( ) ) ; }",
        "private double calculateAsymptoticPValue ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } double result = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { result += x [ i ] * y [ i ] ; } return result ; }",
        "private double calculateAsymptoticPValue ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "private double calculateAsymptoticPValue ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "private double calculateAsymptoticPValue ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } double sum = 0.0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "private double calculateAsymptoticPValue ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( \"All arrays must be of the same length\" ) ; } double sum = 0 ; for ( int i = 0 ; i < x. length ; i ++ ) { sum += x [ i ] * y [ i ] ; } return sum ; }",
        "private double calculateAsymptoticPValue ( double a, double b, double c ) { return asymptoticPValue ( a, b, c, Math. abs ( a ), Math. abs ( b ), Math. abs ( c ) ) ; }",
        "private double calculateAsymptoticPValue ( double a, double b, double c ) { return asymptoticPValue ( a, b, c, Math. abs ( a ), Math. abs ( b ) ) ; }",
        "private double calculateAsymptoticPValue ( double a, double b, double c ) { return asymptoticPValue ( a, b, c, Math. sqrt ( a ), Math. sqrt ( b ) ) ; }",
        "private double calculateAsymptoticPValue ( double a, double b, double c ) { return asymptoticPValue ( a, b, c, 1.0 ) ; }",
        "private double calculateAsymptoticPValue ( double a, double b, double c ) { return asymptoticPValue ( a, b, c, 0 ) ; }",
        "private double calculateAsymptoticPValue ( double a, double b ) { if ( a <= 0.0 || b <= 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + a ) ; } if ( a == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } if ( b == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } return asymptoticP ( a, b, 1.0 ) ; }",
        "private double calculateAsymptoticPValue ( double a, double b ) { if ( a <= 0.0 || b <= 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + a ) ; } if ( a == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } if ( b == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } return asymptoticP ( a, b, a ) ; }",
        "private double calculateAsymptoticPValue ( double a, double b ) { if ( a <= 0.0 || b <= 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + a ) ; } if ( a == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } if ( a == b ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } return asymptoticP ( a, b, 1.0 ) ; }",
        "private double calculateAsymptoticPValue ( double a, double b ) { if ( a <= 0.0 || b <= 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + a ) ; } if ( a == 0.0 ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + b ) ; } if ( a == b ) { throw new IllegalArgumentException ( \"Invalid value for normal distribution: \" + a ) ; } return asymptoticP ( a, b, 1.0 ) ; }",
        "private double calculateAsymptoticPValue ( double a, double b ) { if ( Math. abs ( a ) > Math. abs ( b ) ) { throw new IllegalArgumentException ( a + \" > \" + b ) ; } if ( Math. abs ( a ) < Math. abs ( b ) ) { throw new IllegalArgumentException ( b + \" > \" + a ) ; } return a / b ; }"
      ]
    },
    "Math_32_/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java_136-137": {
      "loc": "136-137",
      "input": "@Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); if ((Boolean) tree.getAttribute()) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } } else if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { double sum = 0; double sumX = 0; double sumY = 0; for (Vector2D[] loop : v) { double x1 = loop[loop.length - 1].getX(); double y1 = loop[loop.length - 1].getY(); for (final Vector2D point : loop) { final double x0 = x1; final double y0 = y1; x1 = point.getX(); y1 = point.getY(); final double factor = x0 * y1 - y0 * x1; sum += factor; sumX += factor * (x0 + x1); sumY += factor * (y0 + y1); } } if (sum < 0) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(sum / 2); setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum))); } } }",
      "target": "@Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); if (tree.getCut() == null && (Boolean) tree.getAttribute()) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } } else if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { double sum = 0; double sumX = 0; double sumY = 0; for (Vector2D[] loop : v) { double x1 = loop[loop.length - 1].getX(); double y1 = loop[loop.length - 1].getY(); for (final Vector2D point : loop) { final double x0 = x1; final double y0 = y1; x1 = point.getX(); y1 = point.getY(); final double factor = x0 * y1 - y0 * x1; sum += factor; sumX += factor * (x0 + x1); sumY += factor * (y0 + y1); } } if (sum < 0) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(sum / 2); setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum))); } } }",
      "function range": "129,5-181,5",
      "raw_output": [
        "public static GeometryProperties getGeometryProperties ( BoundingBox boundingBox ) { if ( boundingBox == null ) { throw new IllegalArgumentException ( \"BoundingBox is null\" ) ; } return getGeometryProperties ( boundingBox. getMinX ( ), boundingBox. getMinY ( ), boundingBox. getMaxX ( ), boundingBox. getMaxY ( ) ) ; }",
        "public static GeometryProperties getEnvelopeProperties ( BoundingBox boundingBox ) { if ( boundingBox == null ) { throw new IllegalArgumentException ( \"BoundingBox is null\" ) ; } return getEnvelopeProperties ( boundingBox. getMinX ( ), boundingBox. getMinY ( ), boundingBox. getMaxX ( ), boundingBox. getMaxY ( ) ) ; }",
        "public static GeometryProperties getGeometryProperties ( BoundingBox boundingBox ) { if ( boundingBox == null ) { throw new IllegalArgumentException ( \"BoundingBox is null\" ) ; } return getGeometryProperties ( boundingBox. getMinLongitude ( ), boundingBox. getMinLatitude ( ), boundingBox. getMaxLongitude ( ), boundingBox. getMaxLatitude ( ) ) ; }",
        "public static GeometryProperties getEnvelopeProperties ( BoundingBox boundingBox ) { if ( boundingBox == null ) { throw new IllegalArgumentException ( \"BoundingBox is null\" ) ; } return getEnvelopeProperties ( boundingBox. getMinLongitude ( ), boundingBox. getMinLatitude ( ), boundingBox. getMaxLongitude ( ), boundingBox. getMaxLatitude ( ) ) ; }",
        "public static GeometryProperties getGeometryProperties ( BoundingBox boundingBox ) { if ( boundingBox == null ) { throw new IllegalArgumentException ( \"BoundingBox is null\" ) ; } return getGeometryProperties ( boundingBox. getMinLongitude ( ), boundingBox. getMinLatitude ( ), boundingBox. getMaxLongitude ( ) ) ; }",
        "private void computeProperties ( ) { for ( int i = 0 ; i < coordinates. length ; i ++ ) { coordinates [ i ] = Math. min ( coordinates [ i ], coordinates [ i ] ) ; } for ( int i = 0 ; i < coordinates. length ; i ++ ) { coordinates [ i ] = Math. max ( coordinates [ i ], coordinates [ i ] ) ; } }",
        "private void computeProperties ( ) { for ( int i = 0 ; i < properties. length ; i ++ ) { properties [ i ] = Math. min ( properties [ i ], properties [ i ] ) ; } for ( int i = 0 ; i < properties. length ; i ++ ) { properties [ i ] = Math. max ( properties [ i ], properties [ i ] ) ; } }",
        "private void calcProperties ( ) { for ( int i = 0 ; i < properties. length ; i ++ ) { properties [ i ] = Math. min ( properties [ i ], properties [ i ] ) ; } for ( int i = 0 ; i < properties. length ; i ++ ) { properties [ i ] = Math. max ( properties [ i ], properties [ i ] ) ; } }",
        "private void computeProperties ( ) { for ( int i = 0 ; i < coordinates. length ; i ++ ) { coordinates [ i ] = Math. min ( coordinates [ i ], coordinates [ i ] ) ; } for ( int i = 0 ; i < coordinates. length ; i ++ ) { coordinates [ i ] = Math. min ( coordinates [ i ], coordinates [ i ] ) ; } }",
        "private void computeProperties ( ) { for ( int i = 0 ; i < coordinates. length ; i ++ ) { coordinates [ i ] = Math. min ( coordinates [ i ], coordinates [ i ] ) ; } }",
        "public static < T extends Number & Comparable <? super T > > Map < T, Map < T, Set < T > > > calcProperties ( T input ) { Map < T, Map < T, Set < T > > > properties = new HashMap < T, Map < T, Set < T > > > ( ) ; properties. put ( input, new HashMap < T, Set < T > > ( ) ) ; properties. put ( input, new HashMap < T, Set < T > > ( ) ) ; return properties ; }",
        "public static < T extends Number & Comparable <? super T > > Map < T, Map < T, Set < T > > > calcProperties ( T input ) { Map < T, Map < T, Set < T > > > properties = new HashMap <> ( ) ; for ( Map. Entry < T, Map < T, Set < T > > > entry : input. entrySet ( ) ) { properties. put ( entry. getKey ( ), entry. getValue ( ) ) ; } return properties ; }",
        "public static < T extends Number & Comparable <? super T > > Map < T, Map < T, Set < T > > > calcProperties ( T input ) { Map < T, Map < T, Set < T > > > properties = new HashMap < T, Map < T, Set < T > > > ( ) ; properties. put ( input, new HashMap < T, Set < T > > ( ) ) ; properties. put ( output, new HashMap < T, Set < T > > ( ) ) ; return properties ; }",
        "public static < T extends Number & Comparable <? super T > > Map < T, Map < T, Set < T > > > compute ( Class < T > clazz ) { Map < T, Map < T, Set < T > > > map = new HashMap <> ( ) ; for ( Map. Entry < T, Map < T, Set < T > > > entry : map. entrySet ( ) ) { map. put ( entry. getKey ( ), entry. getValue ( ) ) ; } return map ; }",
        "public static < T extends Number & Comparable <? super T > > Map < T, Map < T, Set < T > > > calcProperties ( T input ) { Map < T, Map < T, Set < T > > > properties = new HashMap <> ( ) ; properties. put ( input, new HashMap < T, Set < T > > ( ) ) ; properties. put ( input, new HashMap < T, Set < T > > ( ) ) ; return properties ; }",
        "public void process ( double x, double y, double z ) { this. x = x ; this. y = y ; this. z = z ; process ( x, y, z ) ; }",
        "public void calc ( double x, double y, double z ) { this. x = x ; this. y = y ; this. z = z ; calcG ( ) ; calcG ( ) ; }",
        "public void calc ( double x, double y, double z ) { this. x = x ; this. y = y ; this. z = z ; calc ( ) ; }",
        "public void compute ( double x, double y, double z ) { this. x = x ; this. y = y ; this. z = z ; compute ( x, y, z ) ; }",
        "public void calc ( double x, double y, double z ) { this. x = x ; this. y = y ; this. z = z ; calcG ( ) ; }",
        "private IAtomContainer getAtomContainer ( IBond bond ) throws CDKException { IAtomContainer result = bond. getBuilder ( ). newInstance ( IAtomContainer. class ) ; for ( int i = 0 ; i < bond. getBegin ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getBegin ( ). getAtom ( i ) ; result. addAtom ( atom ) ; } for ( int i = 0 ; i < bond. getEnd ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getEnd ( ). getAtom ( i ) ; result. addAtom ( atom ) ; } return result ; }",
        "private IAtomContainer getAtomContainer ( IBond bond ) throws CDKException { IAtomContainer result = bond. getBuilder ( ). newInstance ( IAtomContainer. class ) ; for ( int i = 0 ; i < bond. getBegin ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getBegin ( ). getAtom ( i ) ; result. add ( atom ) ; } for ( int i = 0 ; i < bond. getEnd ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getEnd ( ). getAtom ( i ) ; result. add ( atom ) ; } return result ; }",
        "private IAtomContainer getAtomContainer ( IBond bond ) throws CDKException { IAtomContainer result = bond. getBuilder ( ). newInstance ( IAtomContainer. class ) ; for ( int i = 0 ; i < bond. getBegin ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getBegin ( ). getAtom ( i ) ; result. addAtom ( atom ) ; } for ( int i = 0 ; i < bond. getEnd ( ). getAtomCount ( ) ; i ++ ) { IAtom bond = bond. getEnd ( ). getAtom ( i ) ; result. addAtom ( bond ) ; } return result ; }",
        "private IAtomContainer getAtomContainer ( IBond bond ) throws CDKException { IAtomContainer result = bond. getBuilder ( ). newInstance ( IAtomContainer. class ) ; for ( int i = 0 ; i < bond. getBegin ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getBegin ( ). getAtom ( i ) ; result. addAtom ( atom ) ; } for ( int i = 0 ; i < bond. getEnd ( ). getAtomCount ( ) ; i ++ ) { IAtom end = bond. getEnd ( ). getAtom ( i ) ; result. addAtom ( end ) ; } return result ; }",
        "private IAtomContainer getAtomContainer ( IBond bond ) throws CDKException { IAtomContainer result = bond. getBuilder ( ). newInstance ( IAtomContainer. class ) ; for ( int i = 0 ; i < bond. getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getAtom ( i ) ; if (! atom. getFlag ( CDKConstants. ISPLACED ) &&! atom. getFlag ( CDKConstants. ISPLACED ) ) { result. addAtom ( atom ) ; } } return result ; }"
      ],
      "mid_translation": [
        "Computes the geometrical properties of the bounding box.",
        "Compute the geometrical properties.",
        "Computes the geometrical properties of the algorithm.",
        "Computes the geometrical properties.",
        "Computes the geometrical properties of the bonds."
      ],
      "output": [
        "@Override protected GeometryProperties computeGeometricalProperties ( BoundingBox boundingBox ) { if ( boundingBox == null ) { throw new IllegalArgumentException ( \"BoundingBox is null\" ) ; } return getGeometryProperties ( boundingBox. getMinX ( ), boundingBox. getMinY ( ), boundingBox. getMaxX ( ), boundingBox. getMaxY ( ) ) ; }",
        "@Override protected GeometryProperties computeGeometricalProperties ( BoundingBox boundingBox ) { if ( boundingBox == null ) { throw new IllegalArgumentException ( \"BoundingBox is null\" ) ; } return getEnvelopeProperties ( boundingBox. getMinX ( ), boundingBox. getMinY ( ), boundingBox. getMaxX ( ), boundingBox. getMaxY ( ) ) ; }",
        "@Override protected GeometryProperties computeGeometricalProperties ( BoundingBox boundingBox ) { if ( boundingBox == null ) { throw new IllegalArgumentException ( \"BoundingBox is null\" ) ; } return getGeometryProperties ( boundingBox. getMinLongitude ( ), boundingBox. getMinLatitude ( ), boundingBox. getMaxLongitude ( ), boundingBox. getMaxLatitude ( ) ) ; }",
        "@Override protected GeometryProperties computeGeometricalProperties ( BoundingBox boundingBox ) { if ( boundingBox == null ) { throw new IllegalArgumentException ( \"BoundingBox is null\" ) ; } return getEnvelopeProperties ( boundingBox. getMinLongitude ( ), boundingBox. getMinLatitude ( ), boundingBox. getMaxLongitude ( ), boundingBox. getMaxLatitude ( ) ) ; }",
        "@Override protected GeometryProperties computeGeometricalProperties ( BoundingBox boundingBox ) { if ( boundingBox == null ) { throw new IllegalArgumentException ( \"BoundingBox is null\" ) ; } return getGeometryProperties ( boundingBox. getMinLongitude ( ), boundingBox. getMinLatitude ( ), boundingBox. getMaxLongitude ( ) ) ; }",
        "@Override protected void computeGeometricalProperties ( ) { for ( int i = 0 ; i < coordinates. length ; i ++ ) { coordinates [ i ] = Math. min ( coordinates [ i ], coordinates [ i ] ) ; } for ( int i = 0 ; i < coordinates. length ; i ++ ) { coordinates [ i ] = Math. max ( coordinates [ i ], coordinates [ i ] ) ; } }",
        "@Override protected void computeGeometricalProperties ( ) { for ( int i = 0 ; i < properties. length ; i ++ ) { properties [ i ] = Math. min ( properties [ i ], properties [ i ] ) ; } for ( int i = 0 ; i < properties. length ; i ++ ) { properties [ i ] = Math. max ( properties [ i ], properties [ i ] ) ; } }",
        "@Override protected void computeGeometricalProperties ( ) { for ( int i = 0 ; i < properties. length ; i ++ ) { properties [ i ] = Math. min ( properties [ i ], properties [ i ] ) ; } for ( int i = 0 ; i < properties. length ; i ++ ) { properties [ i ] = Math. max ( properties [ i ], properties [ i ] ) ; } }",
        "@Override protected void computeGeometricalProperties ( ) { for ( int i = 0 ; i < coordinates. length ; i ++ ) { coordinates [ i ] = Math. min ( coordinates [ i ], coordinates [ i ] ) ; } for ( int i = 0 ; i < coordinates. length ; i ++ ) { coordinates [ i ] = Math. min ( coordinates [ i ], coordinates [ i ] ) ; } }",
        "@Override protected void computeGeometricalProperties ( ) { for ( int i = 0 ; i < coordinates. length ; i ++ ) { coordinates [ i ] = Math. min ( coordinates [ i ], coordinates [ i ] ) ; } }",
        "@Override protected < T extends Number & Comparable <? super T > > Map < T, Map < T, Set < T > > > computeGeometricalProperties ( T input ) { Map < T, Map < T, Set < T > > > properties = new HashMap < T, Map < T, Set < T > > > ( ) ; properties. put ( input, new HashMap < T, Set < T > > ( ) ) ; properties. put ( input, new HashMap < T, Set < T > > ( ) ) ; return properties ; }",
        "@Override protected < T extends Number & Comparable <? super T > > Map < T, Map < T, Set < T > > > computeGeometricalProperties ( T input ) { Map < T, Map < T, Set < T > > > properties = new HashMap <> ( ) ; for ( Map. Entry < T, Map < T, Set < T > > > entry : input. entrySet ( ) ) { properties. put ( entry. getKey ( ), entry. getValue ( ) ) ; } return properties ; }",
        "@Override protected < T extends Number & Comparable <? super T > > Map < T, Map < T, Set < T > > > computeGeometricalProperties ( T input ) { Map < T, Map < T, Set < T > > > properties = new HashMap < T, Map < T, Set < T > > > ( ) ; properties. put ( input, new HashMap < T, Set < T > > ( ) ) ; properties. put ( output, new HashMap < T, Set < T > > ( ) ) ; return properties ; }",
        "@Override protected < T extends Number & Comparable <? super T > > Map < T, Map < T, Set < T > > > computeGeometricalProperties ( Class < T > clazz ) { Map < T, Map < T, Set < T > > > map = new HashMap <> ( ) ; for ( Map. Entry < T, Map < T, Set < T > > > entry : map. entrySet ( ) ) { map. put ( entry. getKey ( ), entry. getValue ( ) ) ; } return map ; }",
        "@Override protected < T extends Number & Comparable <? super T > > Map < T, Map < T, Set < T > > > computeGeometricalProperties ( T input ) { Map < T, Map < T, Set < T > > > properties = new HashMap <> ( ) ; properties. put ( input, new HashMap < T, Set < T > > ( ) ) ; properties. put ( input, new HashMap < T, Set < T > > ( ) ) ; return properties ; }",
        "@Override protected void computeGeometricalProperties ( double x, double y, double z ) { this. x = x ; this. y = y ; this. z = z ; process ( x, y, z ) ; }",
        "@Override protected void computeGeometricalProperties ( double x, double y, double z ) { this. x = x ; this. y = y ; this. z = z ; calcG ( ) ; calcG ( ) ; }",
        "@Override protected void computeGeometricalProperties ( double x, double y, double z ) { this. x = x ; this. y = y ; this. z = z ; calc ( ) ; }",
        "@Override protected void computeGeometricalProperties ( double x, double y, double z ) { this. x = x ; this. y = y ; this. z = z ; compute ( x, y, z ) ; }",
        "@Override protected void computeGeometricalProperties ( double x, double y, double z ) { this. x = x ; this. y = y ; this. z = z ; calcG ( ) ; }",
        "@Override protected IAtomContainer computeGeometricalProperties ( IBond bond ) throws CDKException { IAtomContainer result = bond. getBuilder ( ). newInstance ( IAtomContainer. class ) ; for ( int i = 0 ; i < bond. getBegin ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getBegin ( ). getAtom ( i ) ; result. addAtom ( atom ) ; } for ( int i = 0 ; i < bond. getEnd ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getEnd ( ). getAtom ( i ) ; result. addAtom ( atom ) ; } return result ; }",
        "@Override protected IAtomContainer computeGeometricalProperties ( IBond bond ) throws CDKException { IAtomContainer result = bond. getBuilder ( ). newInstance ( IAtomContainer. class ) ; for ( int i = 0 ; i < bond. getBegin ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getBegin ( ). getAtom ( i ) ; result. add ( atom ) ; } for ( int i = 0 ; i < bond. getEnd ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getEnd ( ). getAtom ( i ) ; result. add ( atom ) ; } return result ; }",
        "@Override protected IAtomContainer computeGeometricalProperties ( IBond bond ) throws CDKException { IAtomContainer result = bond. getBuilder ( ). newInstance ( IAtomContainer. class ) ; for ( int i = 0 ; i < bond. getBegin ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getBegin ( ). getAtom ( i ) ; result. addAtom ( atom ) ; } for ( int i = 0 ; i < bond. getEnd ( ). getAtomCount ( ) ; i ++ ) { IAtom bond = bond. getEnd ( ). getAtom ( i ) ; result. addAtom ( bond ) ; } return result ; }",
        "@Override protected IAtomContainer computeGeometricalProperties ( IBond bond ) throws CDKException { IAtomContainer result = bond. getBuilder ( ). newInstance ( IAtomContainer. class ) ; for ( int i = 0 ; i < bond. getBegin ( ). getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getBegin ( ). getAtom ( i ) ; result. addAtom ( atom ) ; } for ( int i = 0 ; i < bond. getEnd ( ). getAtomCount ( ) ; i ++ ) { IAtom end = bond. getEnd ( ). getAtom ( i ) ; result. addAtom ( end ) ; } return result ; }",
        "@Override protected IAtomContainer computeGeometricalProperties ( IBond bond ) throws CDKException { IAtomContainer result = bond. getBuilder ( ). newInstance ( IAtomContainer. class ) ; for ( int i = 0 ; i < bond. getAtomCount ( ) ; i ++ ) { IAtom atom = bond. getAtom ( i ) ; if (! atom. getFlag ( CDKConstants. ISPLACED ) &&! atom. getFlag ( CDKConstants. ISPLACED ) ) { result. addAtom ( atom ) ; } } return result ; }"
      ]
    },
    "Math_33_/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java_338-339": {
      "loc": "338-339",
      "input": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } } for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; }",
      "target": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) > 0) { columnsToDrop.add(i); } } for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; }",
      "function range": "327,5-367,5",
      "raw_output": [
        "public static double [ ] [ ] dropPhase1 ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 1 ] = x [ i ] ; } return ret ; }",
        "public static double [ ] [ ] dropPhase1 ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = new double [ x [ i ]. length ] ; for ( int j = 0 ; j < x. length ; j ++ ) { ret [ i ] [ j ] = x [ i ] [ j ] ; } } return ret ; }",
        "public static double [ ] [ ] dropPhase1 ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = new double [ x [ i ]. length ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = x [ i ] ; } return ret ; }",
        "public static double [ ] [ ] dropPhase1 ( double [ ] x, double [ ] y ) { double [ ] [ ] ret = new double [ x. length ] [ y. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; ret [ i ] [ 1 ] = y [ i ] ; } return ret ; }",
        "public static double [ ] dropPhase1 ( double [ ] x, double [ ] y ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = x [ i ] - y [ i ] ; } return ret ; }",
        "public static double [ ] [ ] dropPhase1 ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 1 ] = x [ i ] ; } return ret ; }",
        "public static double [ ] [ ] dropPhase1 ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = new double [ x [ i ]. length ] ; for ( int j = 0 ; j < x. length ; j ++ ) { ret [ i ] [ j ] = x [ i ] [ j ] ; } } return ret ; }",
        "public static double [ ] [ ] dropPhase1 ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = new double [ x [ i ]. length ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = x [ i ] ; } return ret ; }",
        "public static double [ ] [ ] dropPhase1 ( double [ ] x, double [ ] y ) { double [ ] [ ] ret = new double [ x. length ] [ y. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; ret [ i ] [ 1 ] = y [ i ] ; } return ret ; }",
        "public static double [ ] dropPhase1 ( double [ ] x, double [ ] y ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = x [ i ] - y [ i ] ; } return ret ; }",
        "public double [ ] [ ] matrix ( ) { double [ ] [ ] matrix = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { for ( int j = 0 ; j < dim ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "public double [ ] [ ] matrix ( ) { double [ ] [ ] matrix = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { for ( int j = i + 1 ; j < dim ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "public double [ ] [ ] matrix ( ) { double [ ] [ ] matrix = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { for ( int j = 0 ; j < dim ; j ++ ) { matrix [ i ] [ j ] = new double [ i ] [ j ] ; } } return matrix ; }",
        "public double [ ] [ ] matrix ( ) { double [ ] [ ] matrix = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { for ( int j = 0 ; j < dim ; j ++ ) { matrix [ i ] [ j ] = compute ( i, j ) ; } } return matrix ; }",
        "public double [ ] [ ] matrix ( ) { double [ ] [ ] matrix = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { for ( int j = 0 ; j < dim ; j ++ ) { matrix [ i ] [ j ] = matrix ( i, j ) ; } } return matrix ; }",
        "private double [ ] [ ] computeMatrix ( int testPhase ) { double [ ] [ ] matrix = new double [ testPhase ] [ testPhase ] ; for ( int i = 0 ; i < testPhase ; i ++ ) { for ( int j = 0 ; j < testPhase ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "private double [ ] [ ] computeMatrix ( int testPhase ) { double [ ] [ ] matrix = new double [ testPhase ] [ testPhase ] ; for ( int i = 0 ; i < testPhase ; i ++ ) { for ( int j = 0 ; j < matrix. length ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "private double [ ] [ ] computeMatrix ( int testPhase ) { final double [ ] [ ] matrix = new double [ testPhase ] [ testPhase ] ; for ( int i = 0 ; i < testPhase ; i ++ ) { for ( int j = 0 ; j < testPhase ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "private double [ ] [ ] computeMatrix ( int testPhase ) { double [ ] [ ] matrix = new double [ testPhase ] [ testPhase ] ; for ( int i = 0 ; i < testPhase ; i ++ ) { for ( int j = i + 1 ; j < testPhase ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "private double [ ] [ ] computeMatrix ( int testPhase ) { final double [ ] [ ] matrix = new double [ testPhase ] [ testPhase ] ; for ( int i = 0 ; i < testPhase ; i ++ ) { for ( int j = 0 ; j < matrix. length ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "public static double [ ] [ ] dropPhase1 ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 1 ] = x [ i ] ; } return ret ; }",
        "public static double [ ] [ ] dropPhase1 ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = new double [ x [ i ]. length ] ; for ( int j = 0 ; j < x. length ; j ++ ) { ret [ i ] [ j ] = x [ i ] [ j ] ; } } return ret ; }",
        "public static double [ ] [ ] dropPhase1 ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = new double [ x [ i ]. length ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = x [ i ] ; } return ret ; }",
        "public static double [ ] [ ] dropPhase1 ( double [ ] x, double [ ] y ) { double [ ] [ ] ret = new double [ x. length ] [ y. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; ret [ i ] [ 1 ] = y [ i ] ; } return ret ; }",
        "public static double [ ] dropPhase1 ( double [ ] x, double [ ] y ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = x [ i ] - y [ i ] ; } return ret ; }"
      ],
      "mid_translation": [
        "This method is used to dropPhase1 Objective functions into the matrix so that it can be used to create a real - time matrix.",
        "This method is used to dropPhase1 Objective functions into the matrix so that it can be used to generate a real - time matrix.",
        "This method is called at the end of every test phase so it can be used to compute a matrix for the test case.",
        "This method is called at the end of every test phase so it can be used to compute a matrix for the test phase.",
        "This method is used to dropPhase1 Objective functions into the matrix so that it can be used to create a real - valued matrix"
      ],
      "output": [
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 1 ] = x [ i ] ; } return ret ; }",
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = new double [ x [ i ]. length ] ; for ( int j = 0 ; j < x. length ; j ++ ) { ret [ i ] [ j ] = x [ i ] [ j ] ; } } return ret ; }",
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = new double [ x [ i ]. length ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = x [ i ] ; } return ret ; }",
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x, double [ ] y ) { double [ ] [ ] ret = new double [ x. length ] [ y. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; ret [ i ] [ 1 ] = y [ i ] ; } return ret ; }",
        "protected double [ ] dropPhase1Objective ( double [ ] x, double [ ] y ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = x [ i ] - y [ i ] ; } return ret ; }",
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 1 ] = x [ i ] ; } return ret ; }",
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = new double [ x [ i ]. length ] ; for ( int j = 0 ; j < x. length ; j ++ ) { ret [ i ] [ j ] = x [ i ] [ j ] ; } } return ret ; }",
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = new double [ x [ i ]. length ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = x [ i ] ; } return ret ; }",
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x, double [ ] y ) { double [ ] [ ] ret = new double [ x. length ] [ y. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; ret [ i ] [ 1 ] = y [ i ] ; } return ret ; }",
        "protected double [ ] dropPhase1Objective ( double [ ] x, double [ ] y ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = x [ i ] - y [ i ] ; } return ret ; }",
        "protected double [ ] [ ] dropPhase1Objective ( ) { double [ ] [ ] matrix = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { for ( int j = 0 ; j < dim ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "protected double [ ] [ ] dropPhase1Objective ( ) { double [ ] [ ] matrix = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { for ( int j = i + 1 ; j < dim ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "protected double [ ] [ ] dropPhase1Objective ( ) { double [ ] [ ] matrix = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { for ( int j = 0 ; j < dim ; j ++ ) { matrix [ i ] [ j ] = new double [ i ] [ j ] ; } } return matrix ; }",
        "protected double [ ] [ ] dropPhase1Objective ( ) { double [ ] [ ] matrix = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { for ( int j = 0 ; j < dim ; j ++ ) { matrix [ i ] [ j ] = compute ( i, j ) ; } } return matrix ; }",
        "protected double [ ] [ ] dropPhase1Objective ( ) { double [ ] [ ] matrix = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { for ( int j = 0 ; j < dim ; j ++ ) { matrix [ i ] [ j ] = matrix ( i, j ) ; } } return matrix ; }",
        "protected double [ ] [ ] dropPhase1Objective ( int testPhase ) { double [ ] [ ] matrix = new double [ testPhase ] [ testPhase ] ; for ( int i = 0 ; i < testPhase ; i ++ ) { for ( int j = 0 ; j < testPhase ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "protected double [ ] [ ] dropPhase1Objective ( int testPhase ) { double [ ] [ ] matrix = new double [ testPhase ] [ testPhase ] ; for ( int i = 0 ; i < testPhase ; i ++ ) { for ( int j = 0 ; j < matrix. length ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "protected double [ ] [ ] dropPhase1Objective ( int testPhase ) { final double [ ] [ ] matrix = new double [ testPhase ] [ testPhase ] ; for ( int i = 0 ; i < testPhase ; i ++ ) { for ( int j = 0 ; j < testPhase ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "protected double [ ] [ ] dropPhase1Objective ( int testPhase ) { double [ ] [ ] matrix = new double [ testPhase ] [ testPhase ] ; for ( int i = 0 ; i < testPhase ; i ++ ) { for ( int j = i + 1 ; j < testPhase ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "protected double [ ] [ ] dropPhase1Objective ( int testPhase ) { final double [ ] [ ] matrix = new double [ testPhase ] [ testPhase ] ; for ( int i = 0 ; i < testPhase ; i ++ ) { for ( int j = 0 ; j < matrix. length ; j ++ ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] ; } } return matrix ; }",
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ 1 ] = x [ i ] ; } return ret ; }",
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = new double [ x [ i ]. length ] ; for ( int j = 0 ; j < x. length ; j ++ ) { ret [ i ] [ j ] = x [ i ] [ j ] ; } } return ret ; }",
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x ) { double [ ] [ ] ret = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = new double [ x [ i ]. length ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] [ i ] = x [ i ] ; } return ret ; }",
        "protected double [ ] [ ] dropPhase1Objective ( double [ ] x, double [ ] y ) { double [ ] [ ] ret = new double [ x. length ] [ y. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] [ 0 ] = x [ i ] ; ret [ i ] [ 1 ] = y [ i ] ; } return ret ; }",
        "protected double [ ] dropPhase1Objective ( double [ ] x, double [ ] y ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = x [ i ] - y [ i ] ; } return ret ; }"
      ]
    },
    "Math_34_/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java_209-210": {
      "loc": "209-210",
      "input": "public Iterator<Chromosome> iterator() { return chromosomes.iterator(); }",
      "target": "public Iterator<Chromosome> iterator() { return getChromosomes().iterator(); }",
      "function range": "208,5-210,5",
      "raw_output": [
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return this. hasNext ( ) ; } public T next ( ) { return this. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator. hasNext ( ) ; } public T next ( ) { return iterator. next ( ) ; } public void remove ( ) { iterator. remove ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator. hasNext ( ) ; } public T next ( ) { return iterator. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return this. hasNext ( ) ; } public T next ( ) { return this. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return this. hasNext ( ) ; } public T next ( ) { return this. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return this. hasNext ( ) ; } public T next ( ) { return this. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator. hasNext ( ) ; } public T next ( ) { return iterator. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator. hasNext ( ) ; } public T next ( ) { return iterator. next ( ) ; } public void remove ( ) { iterator. remove ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return this. hasNext ( ) ; } public T next ( ) { return this. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }"
      ],
      "mid_translation": [
        "Get an iterator for the chromosomes.",
        "Returns an iterator of the chromosomes.",
        "Returns an iterator for the chromosomes.",
        "Get an iterator for all the chromosomes.",
        "Returns an iterator over the chromosomes."
      ],
      "output": [
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return this. hasNext ( ) ; } public T next ( ) { return this. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator. hasNext ( ) ; } public T next ( ) { return iterator. next ( ) ; } public void remove ( ) { iterator. remove ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator. hasNext ( ) ; } public T next ( ) { return iterator. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return this. hasNext ( ) ; } public T next ( ) { return this. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return this. hasNext ( ) ; } public T next ( ) { return this. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return this. hasNext ( ) ; } public T next ( ) { return this. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator. hasNext ( ) ; } public T next ( ) { return iterator. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator. hasNext ( ) ; } public T next ( ) { return iterator. next ( ) ; } public void remove ( ) { iterator. remove ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public T next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { iterator ( ). remove ( ) ; } } ; }",
        "public Iterator < C > iterator ( ) { return new Iterator < C > ( ) { public boolean hasNext ( ) { return iterator ( ). hasNext ( ) ; } public C next ( ) { return iterator ( ). next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }",
        "public Iterator < T > iterator ( ) { return new Iterator < T > ( ) { public boolean hasNext ( ) { return this. hasNext ( ) ; } public T next ( ) { return this. next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }"
      ]
    },
    "Math_41_/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java_520-521": {
      "loc": "520-521",
      "input": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0; for (int i = 0; i < weights.length; i++) { sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } } return var; }",
      "target": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0; for (int i = begin; i < begin + length; i++) { sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } } return var; }",
      "function range": "501,5-532,5",
      "raw_output": [
        "public static double variance ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += variance ( values [ i ], weights [ i ] ) ; } return variance ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += Math. abs ( values [ i ] - weights [ i ] ) ; } return variance ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += weights [ i ] * values [ i ] ; } return sum / ( sum + weights. length ) ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += values [ i ] * weights [ i ] ; } return sum / ( sum + weights. length ) ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { return Math. sqrt ( variance ( values, weights, 0, values. length ) ) ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += Math. abs ( values [ i ] - weights [ i ] ) ; } return variance ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += variance ( values [ i ], weights [ i ] ) ; } return variance ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += values [ i ] * weights [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += Math. pow ( values [ i ] - weights [ i ], 2 ) ; } return variance ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += values [ i ] * weights [ i ] ; } return sum / ( sum + weights. length ) ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += Math. abs ( values [ i ] - weights [ i ] ) ; } return variance ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += weights [ i ] * values [ i ] ; } return sum / ( sum + weights. length ) ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += variance ( values [ i ], weights [ i ] ) ; } return variance ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += values [ i ] * weights [ i ] ; } return sum / ( sum + weights. length ) ; }",
        "public static double variance ( double [ ] values, double [ ] weights ) { return Math. sqrt ( variance ( values, weights ) ) ; }",
        "protected double computeAverage ( double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < weights. length ; i ++ ) { sum += weights [ i ] ; } return sum / weights. length ; }",
        "public static double sum ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += values [ i ] * weights [ i ] ; } return sum ; }",
        "public static double average ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += weights [ i ] ; } return sum / values. length ; }",
        "public static double computeAverage ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += weights [ i ] ; } return sum / values. length ; }",
        "public static double sum ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += weights [ i ] * values [ i ] ; } return sum ; }",
        "public double [ ] evaluate ( double [ ] values, double [ ] weights ) { double [ ] result = new double [ weights. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = evaluate ( values [ i ], weights [ i ] ) ; } return result ; }",
        "public double [ ] evaluate ( double [ ] values, double [ ] weights ) { double [ ] ret = new double [ weights. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = weights [ i ]. evaluate ( values, weights ) ; } return ret ; }",
        "public double [ ] evaluate ( double [ ] values, double [ ] weights ) { double [ ] result = new double [ values. length ] ; for ( int i = 0 ; i < values. length ; i ++ ) { result [ i ] = evaluate ( values [ i ], weights ) ; } return result ; }",
        "public double [ ] evaluate ( double [ ] values, double [ ] weights ) { double [ ] result = new double [ weights. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = weights [ i ]. evaluate ( values, weights ) ; } return result ; }",
        "public double [ ] evaluate ( double [ ] values, double [ ] weights ) { double [ ] result = new double [ values. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = evaluate ( values [ i ], weights ) ; } return result ; }"
      ],
      "mid_translation": [
        "Computes the variance of a set of values and weights.",
        "Computes the variance of the given set of values and weights.",
        "Computes the variance of the given values and weights.",
        "Computes the average given values and weights.",
        "Evaluates the given set of values and weights."
      ],
      "output": [
        "public double evaluate ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += variance ( values [ i ], weights [ i ] ) ; } return variance ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += Math. abs ( values [ i ] - weights [ i ] ) ; } return variance ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += weights [ i ] * values [ i ] ; } return sum / ( sum + weights. length ) ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += values [ i ] * weights [ i ] ; } return sum / ( sum + weights. length ) ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { return Math. sqrt ( variance ( values, weights, 0, values. length ) ) ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += Math. abs ( values [ i ] - weights [ i ] ) ; } return variance ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += variance ( values [ i ], weights [ i ] ) ; } return variance ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += values [ i ] * weights [ i ] ; } return Math. sqrt ( sum ) ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += Math. pow ( values [ i ] - weights [ i ], 2 ) ; } return variance ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += values [ i ] * weights [ i ] ; } return sum / ( sum + weights. length ) ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += Math. abs ( values [ i ] - weights [ i ] ) ; } return variance ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += weights [ i ] * values [ i ] ; } return sum / ( sum + weights. length ) ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double variance = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { variance += variance ( values [ i ], weights [ i ] ) ; } return variance ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += values [ i ] * weights [ i ] ; } return sum / ( sum + weights. length ) ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { return Math. sqrt ( variance ( values, weights ) ) ; }",
        "public double evaluate ( double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < weights. length ; i ++ ) { sum += weights [ i ] ; } return sum / weights. length ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += values [ i ] * weights [ i ] ; } return sum ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += weights [ i ] ; } return sum / values. length ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += weights [ i ] ; } return sum / values. length ; }",
        "public double evaluate ( double [ ] values, double [ ] weights ) { double sum = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { sum += weights [ i ] * values [ i ] ; } return sum ; }",
        "public double [ ] evaluate ( double [ ] values, double [ ] weights ) { double [ ] result = new double [ weights. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = evaluate ( values [ i ], weights [ i ] ) ; } return result ; }",
        "public double [ ] evaluate ( double [ ] values, double [ ] weights ) { double [ ] ret = new double [ weights. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = weights [ i ]. evaluate ( values, weights ) ; } return ret ; }",
        "public double [ ] evaluate ( double [ ] values, double [ ] weights ) { double [ ] result = new double [ values. length ] ; for ( int i = 0 ; i < values. length ; i ++ ) { result [ i ] = evaluate ( values [ i ], weights ) ; } return result ; }",
        "public double [ ] evaluate ( double [ ] values, double [ ] weights ) { double [ ] result = new double [ weights. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = weights [ i ]. evaluate ( values, weights ) ; } return result ; }",
        "public double [ ] evaluate ( double [ ] values, double [ ] weights ) { double [ ] result = new double [ values. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = evaluate ( values [ i ], weights ) ; } return result ; }"
      ]
    },
    "Math_48_/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java_189-190": {
      "loc": "189-190",
      "input": "protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted = !inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI: break; default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted ? x1 : x0; case RIGHT_SIDE: return inverted ? x0 : x1; case BELOW_SIDE: return (f1 <= 0) ? x1 : x0; case ABOVE_SIDE: return (f1 >= 0) ? x1 : x0; default: throw new MathInternalError(); } } } }",
      "target": "protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted = !inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI: if (x == x1) { throw new ConvergenceException(); } break; default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted ? x1 : x0; case RIGHT_SIDE: return inverted ? x0 : x1; case BELOW_SIDE: return (f1 <= 0) ? x1 : x0; case ABOVE_SIDE: return (f1 >= 0) ? x1 : x0; default: throw new MathInternalError(); } } } }",
      "function range": "129,5-251,5",
      "raw_output": [
        "public < S extends Solution <? > > S solve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfVariables ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solution ; }",
        "public < S extends Solution <? > > S solve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfVariables ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "public < S extends Solution <? > > S solve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfVariables ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solution. solve ( solution ) ; }",
        "public < S extends Solution <? > > S solve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfVariables ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solution. solve ( solution ) ; }",
        "public < S extends Solution <? > > S solve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfVariables ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "public < S extends Solution <? > > S solve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "public < S extends Solution <? > > S solve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "public < S extends Solution <? > > S solve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "public < S extends Solution <? > > S solve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "public < S extends Solution <? > > S solve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "public int solve ( ) { int result = 0 ; for ( int i = 0 ; i < inputs. length ; i ++ ) { result += inputs [ i ]. solve ( ) ; } return result ; }",
        "public int solve ( ) { int result = 0 ; for ( int i = 0 ; i < solution. length ; i ++ ) { result += solution [ i ]. solve ( ) ; } return result ; }",
        "public int solve ( ) { int result = 0 ; for ( int i = 0 ; i < inputs. size ( ) ; i ++ ) { inputs. get ( i ). solve ( ) ; result += inputs. size ( ) ; } return result ; }",
        "public int solve ( ) { int result = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { result += data [ i ]. solve ( ) ; } return result ; }",
        "public int solve ( ) { int result = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { result += data [ i ] ; } } return result ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } return solve ( x, y ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( Locale. US, \"%d!= %d\", x. length, y. length ) ) ; if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( Locale. US, \"%d!= %d\", x. length, y. length ) ) ; if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( Locale. US, \"%d!= %d\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } return solve ( x, y ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "public SolveResult execute ( ) { SolveResult result = new SolveResult ( ) ; for ( int i = 0 ; i < solutionList. size ( ) ; i ++ ) { result. solutionList. get ( i ). execute ( solutionList. get ( i ) ) ; } return result ; }",
        "public SolveResult execute ( ) { SolveResult result = new SolveResult ( ) ; for ( int i = 0 ; i < solutionList. size ( ) ; i ++ ) { result. addSolution ( solutionList. get ( i ). execute ( ) ) ; } return result ; }",
        "public SolveResult execute ( ) { SolveResult result = new SolveResult ( ) ; for ( int i = 0 ; i < solutionList. length ; i ++ ) { result. solutionList [ i ]. execute ( solutionList [ i ] ) ; } return result ; }",
        "public SolveResult execute ( ) { SolveResult result = new SolveResult ( ) ; for ( int i = 0 ; i < solutionList. size ( ) ; i ++ ) { result. solutionList. get ( i ). execute ( this ) ; } return result ; }",
        "public SolveResult execute ( ) { SolveResult result = new SolveResult ( ) ; for ( int i = 0 ; i < solutionList. length ; i ++ ) { result. solutionList [ i ] = execute ( solutionList [ i ] ) ; } return result ; }"
      ],
      "mid_translation": [
        "Performs a solve operation and returns the solution.",
        "Performs the solve operation and returns the solution.",
        "Performs theolve operation and returns the resulting value.",
        "Performs a solve operation.",
        "Performs theolve operation and returns the solution."
      ],
      "output": [
        "protected final < S extends Solution <? > > S doSolve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfVariables ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solution ; }",
        "protected final < S extends Solution <? > > S doSolve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfVariables ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "protected final < S extends Solution <? > > S doSolve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfVariables ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solution. solve ( solution ) ; }",
        "protected final < S extends Solution <? > > S doSolve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfVariables ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solution. solve ( solution ) ; }",
        "protected final < S extends Solution <? > > S doSolve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfVariables ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfVariables ( )!= solution. getNumberOfVariables ( ) ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "protected final < S extends Solution <? > > S doSolve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "protected final < S extends Solution <? > > S doSolve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "protected final < S extends Solution <? > > S doSolve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "protected final < S extends Solution <? > > S doSolve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "protected final < S extends Solution <? > > S doSolve ( S solution ) { if ( solution == null ) { throw new IllegalArgumentException ( \"The solution may not be null.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 1 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } if ( solution. getNumberOfObjectives ( ) == 0 ) { throw new IllegalArgumentException ( \"The solution may not be empty.\" ) ; } return solve ( solution ) ; }",
        "protected final int doSolve ( ) { int result = 0 ; for ( int i = 0 ; i < inputs. length ; i ++ ) { result += inputs [ i ]. solve ( ) ; } return result ; }",
        "protected final int doSolve ( ) { int result = 0 ; for ( int i = 0 ; i < solution. length ; i ++ ) { result += solution [ i ]. solve ( ) ; } return result ; }",
        "protected final int doSolve ( ) { int result = 0 ; for ( int i = 0 ; i < inputs. size ( ) ; i ++ ) { inputs. get ( i ). solve ( ) ; result += inputs. size ( ) ; } return result ; }",
        "protected final int doSolve ( ) { int result = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { result += data [ i ]. solve ( ) ; } return result ; }",
        "protected final int doSolve ( ) { int result = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { result += data [ i ] ; } } return result ; }",
        "protected final double doSolve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } return solve ( x, y ) ; }",
        "protected final double doSolve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "protected final double doSolve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( Locale. US, \"%d!= %d\", x. length, y. length ) ) ; if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( Locale. US, \"%d!= %d\", x. length, y. length ) ) ; if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( Locale. US, \"%d!= %d\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "protected final double doSolve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } return solve ( x, y ) ; }",
        "protected final double doSolve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "protected final SolveResult doSolve ( ) { SolveResult result = new SolveResult ( ) ; for ( int i = 0 ; i < solutionList. size ( ) ; i ++ ) { result. solutionList. get ( i ). execute ( solutionList. get ( i ) ) ; } return result ; }",
        "protected final SolveResult doSolve ( ) { SolveResult result = new SolveResult ( ) ; for ( int i = 0 ; i < solutionList. size ( ) ; i ++ ) { result. addSolution ( solutionList. get ( i ). execute ( ) ) ; } return result ; }",
        "protected final SolveResult doSolve ( ) { SolveResult result = new SolveResult ( ) ; for ( int i = 0 ; i < solutionList. length ; i ++ ) { result. solutionList [ i ]. execute ( solutionList [ i ] ) ; } return result ; }",
        "protected final SolveResult doSolve ( ) { SolveResult result = new SolveResult ( ) ; for ( int i = 0 ; i < solutionList. size ( ) ; i ++ ) { result. solutionList. get ( i ). execute ( this ) ; } return result ; }",
        "protected final SolveResult doSolve ( ) { SolveResult result = new SolveResult ( ) ; for ( int i = 0 ; i < solutionList. length ; i ++ ) { result. solutionList [ i ] = execute ( solutionList [ i ] ) ; } return result ; }"
      ]
    },
    "Math_50_/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java_187-188": {
      "loc": "187-188",
      "input": "protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted = !inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI: if (x == x1) { x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0); } break; default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted ? x1 : x0; case RIGHT_SIDE: return inverted ? x0 : x1; case BELOW_SIDE: return (f1 <= 0) ? x1 : x0; case ABOVE_SIDE: return (f1 >= 0) ? x1 : x0; default: throw new MathInternalError(); } } } }",
      "target": "protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted = !inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI: break; default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted ? x1 : x0; case RIGHT_SIDE: return inverted ? x0 : x1; case BELOW_SIDE: return (f1 <= 0) ? x1 : x0; case ABOVE_SIDE: return (f1 >= 0) ? x1 : x0; default: throw new MathInternalError(); } } } }",
      "function range": "128,5-253,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Math_53_/src/main/java/org/apache/commons/math/complex/Complex.java_153-154": {
      "loc": "153-154",
      "input": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs); return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); }",
      "target": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs); if (isNaN || rhs.isNaN) { return NaN; } return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); }",
      "function range": "150,5-155,5",
      "raw_output": [
        "public static ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public static ComplexNumber Add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public static ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z1. real, z1. imaginary + z2. imaginary ) ; }",
        "public static ComplexNumber add ( ComplexNumber c1, ComplexNumber c2 ) { return new ComplexNumber ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public static ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real - z2. real, z1. imaginary - z2. imaginary ) ; }",
        "public Complex add ( Complex c ) { return new Complex ( real + c. real, imag + c. imag ) ; }",
        "public Complex add ( Complex c ) { return new Complex ( re. add ( c. re ), im. add ( c. im ) ) ; }",
        "public Complex add ( Complex c ) { double real = real + c. real ; double imag = imag + c. imag ; return new Complex ( real, imag ) ; }",
        "public BigComplex add ( BigComplex c ) { return new BigComplex ( real + c. real, imag + c. imag ) ; }",
        "public Complex add ( Complex c ) { Complex ret = new Complex ( real + c. real, imag + c. imag ) ; return ret ; }",
        "public static ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public static ComplexValue add ( ComplexValue c1, ComplexValue c2 ) { return new ComplexValue ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public static ComplexValue add ( ComplexValue z1, ComplexValue z2 ) { return new ComplexValue ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public static ComplexNumber add ( ComplexNumber c1, ComplexNumber c2 ) { return new ComplexNumber ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public static ComplexValue add ( ComplexValue a, ComplexValue b ) { return new ComplexValue ( a. real + b. real, a. imaginary + b. imaginary ) ; }",
        "public static ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public static ComplexNumber Add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public static ComplexNumber add ( ComplexNumber c1, ComplexNumber c2 ) { return new ComplexNumber ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public static ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z1. real, z1. imaginary + z2. imaginary ) ; }",
        "public static ComplexNumber Add ( ComplexNumber c1, ComplexNumber c2 ) { return new ComplexNumber ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public static ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public static ComplexNumber Add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public static ComplexNumber add ( ComplexNumber c1, ComplexNumber c2 ) { return new ComplexNumber ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public static ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary ) ; }",
        "public static ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real - z2. real, z1. imaginary - z2. imaginary ) ; }"
      ],
      "mid_translation": [
        "Adds two complex numbers together.",
        "Adds a complex to this complex number.",
        "Adds two complex values together.",
        "Adds two complex numbers.",
        "Add two complex numbers."
      ],
      "output": [
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z1. real, z1. imaginary + z2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber c1, ComplexNumber c2 ) { return new ComplexNumber ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real - z2. real, z1. imaginary - z2. imaginary ) ; }",
        "public Complex add ( Complex c ) { return new Complex ( real + c. real, imag + c. imag ) ; }",
        "public Complex add ( Complex c ) { return new Complex ( re. add ( c. re ), im. add ( c. im ) ) ; }",
        "public Complex add ( Complex c ) { double real = real + c. real ; double imag = imag + c. imag ; return new Complex ( real, imag ) ; }",
        "public BigComplex add ( BigComplex c ) { return new BigComplex ( real + c. real, imag + c. imag ) ; }",
        "public Complex add ( Complex c ) { Complex ret = new Complex ( real + c. real, imag + c. imag ) ; return ret ; }",
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public ComplexValue add ( ComplexValue c1, ComplexValue c2 ) { return new ComplexValue ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public ComplexValue add ( ComplexValue z1, ComplexValue z2 ) { return new ComplexValue ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber c1, ComplexNumber c2 ) { return new ComplexNumber ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public ComplexValue add ( ComplexValue a, ComplexValue b ) { return new ComplexValue ( a. real + b. real, a. imaginary + b. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber c1, ComplexNumber c2 ) { return new ComplexNumber ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z1. real, z1. imaginary + z2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber c1, ComplexNumber c2 ) { return new ComplexNumber ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary + z2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber c1, ComplexNumber c2 ) { return new ComplexNumber ( c1. real + c2. real, c1. imaginary + c2. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real + z2. real, z1. imaginary ) ; }",
        "public ComplexNumber add ( ComplexNumber z1, ComplexNumber z2 ) { return new ComplexNumber ( z1. real - z2. real, z1. imaginary - z2. imaginary ) ; }"
      ]
    },
    "Math_56_/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java_237-239": {
      "loc": "237-239",
      "input": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx; return indices; }",
      "target": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } indices[last] = index - count; return indices; }",
      "function range": "216,5-246,5",
      "raw_output": [
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) { throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds\" ) ; } return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) { throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds.\" ) ; } return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) { throw new IndexOutOfBoundsException ( ) ; } return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds\" ) ; return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) throw new IndexOutOfBoundsException ( ) ; return counts [ index ] ; }",
        "public static < E > int [ ] indices ( Counter < E > counter ) { int [ ] indices = new int [ counter. size ( ) ] ; for ( int i = 0 ; i < indices. length ; i ++ ) indices [ i ] = counter. getCount ( i ) ; return indices ; }",
        "public static < E > int [ ] get ( Counter < E > counter ) { int [ ] indices = new int [ counter. size ( ) ] ; for ( int i = 0 ; i < indices. length ; i ++ ) indices [ i ] = counter. getCount ( i ) ; return indices ; }",
        "public static < E > int [ ] indices ( Counter < E > counter ) { int [ ] indices = new int [ counter. size ( ) ] ; for ( int i = 0 ; i < indices. length ; i ++ ) { indices [ i ] = counter. getCount ( i ) ; } return indices ; }",
        "public static < E > int [ ] getIndices ( Counter < E > counter ) { int [ ] indices = new int [ counter. size ( ) ] ; for ( int i = 0 ; i < indices. length ; i ++ ) indices [ i ] = counter. getCount ( i ) ; return indices ; }",
        "public static < E > int [ ] getIndices ( Counter < E > counter ) { int [ ] indices = new int [ counter. size ( ) ] ; for ( int i = 0 ; i < indices. length ; i ++ ) { indices [ i ] = counter. getCount ( i ) ; } return indices ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) { throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds\" ) ; } return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds\" ) ; return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) { throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds.\" ) ; } return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) throw new IndexOutOfBoundsException ( ) ; return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds.\" ) ; return counts [ index ] ; }",
        "public static < E > Counter < E > getCounts ( Counter < E > counter ) { Counter < E > result = new Counter < E > ( ) ; for ( E key : counter. keySet ( ) ) { result. setCount ( key, counter. getCount ( key ) ) ; } return result ; }",
        "public static < E > Counter < E > getCount ( Counter < E > counter ) { Counter < E > result = new Counter < E > ( ) ; for ( E key : counter. keySet ( ) ) { result. setCount ( key, counter. getCount ( key ) ) ; } return result ; }",
        "public static < E > Counter < E > getCount ( Counter < E > counter ) { Counter < E > result = new Counter < E > ( ) ; for ( E key : counter. keySet ( ) ) { result. incrementCount ( key, counter. getCount ( key ) ) ; } return result ; }",
        "public static < E > Counter < E > getCounts ( Counter < E > counter ) { Counter < E > ret = new Counter < E > ( ) ; for ( E key : counter. keySet ( ) ) { ret. setCount ( key, counter. getCount ( key ) ) ; } return ret ; }",
        "public static < E > Counter < E > getCount ( Counter < E > counter ) { Counter < E > result = counters. get ( counter ) ; if ( result == null ) { result = new Counter < E > ( counter ) ; counters. put ( counter, result ) ; } return result ; }",
        "public double [ ] getCounts ( int counterIndex ) { double [ ] counts = new double [ counterIndex ] ; for ( int i = 0 ; i < counts. length ; i ++ ) { counts [ i ] = getCount ( counterIndex ) ; } return counts ; }",
        "public double [ ] getCounts ( int counterIndex ) { double [ ] counts = new double [ counterIndex ] ; for ( int i = 0 ; i < counts. length ; i ++ ) { counts [ i ] = getCount ( i ) ; } return counts ; }",
        "public double [ ] getCounts ( int counter ) { double [ ] counts = new double [ counter ] ; for ( int i = 0 ; i < counts. length ; i ++ ) { counts [ i ] = getCount ( counter ) ; } return counts ; }",
        "public double [ ] getCounts ( int counter ) { double [ ] counts = new double [ counter ] ; for ( int i = 0 ; i < counts. length ; i ++ ) { counts [ i ] = getCount ( i ) ; } return counts ; }",
        "public double getCount ( int counterIndex ) { if ( counterIndex < 0 || counterIndex >= counterCount. length ) { throw new IllegalArgumentException ( \"Invalid counter index: \" + counterIndex ) ; } return counterCount [ counterIndex ] ; }"
      ],
      "mid_translation": [
        "Gets the counts for the given index.",
        "Gets the indices of the given counter.",
        "Gets the counts for a given index.",
        "Gets the counts for a given counter.",
        "Gets the counts for a given counter index."
      ],
      "output": [
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) { throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds\" ) ; } return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) { throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds.\" ) ; } return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) { throw new IndexOutOfBoundsException ( ) ; } return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds\" ) ; return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) throw new IndexOutOfBoundsException ( ) ; return counts [ index ] ; }",
        "public < E > int [ ] getCounts ( Counter < E > counter ) { int [ ] indices = new int [ counter. size ( ) ] ; for ( int i = 0 ; i < indices. length ; i ++ ) indices [ i ] = counter. getCount ( i ) ; return indices ; }",
        "public < E > int [ ] getCounts ( Counter < E > counter ) { int [ ] indices = new int [ counter. size ( ) ] ; for ( int i = 0 ; i < indices. length ; i ++ ) indices [ i ] = counter. getCount ( i ) ; return indices ; }",
        "public < E > int [ ] getCounts ( Counter < E > counter ) { int [ ] indices = new int [ counter. size ( ) ] ; for ( int i = 0 ; i < indices. length ; i ++ ) { indices [ i ] = counter. getCount ( i ) ; } return indices ; }",
        "public < E > int [ ] getCounts ( Counter < E > counter ) { int [ ] indices = new int [ counter. size ( ) ] ; for ( int i = 0 ; i < indices. length ; i ++ ) indices [ i ] = counter. getCount ( i ) ; return indices ; }",
        "public < E > int [ ] getCounts ( Counter < E > counter ) { int [ ] indices = new int [ counter. size ( ) ] ; for ( int i = 0 ; i < indices. length ; i ++ ) { indices [ i ] = counter. getCount ( i ) ; } return indices ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) { throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds\" ) ; } return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds\" ) ; return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) { throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds.\" ) ; } return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) throw new IndexOutOfBoundsException ( ) ; return counts [ index ] ; }",
        "public double [ ] getCounts ( int index ) { if ( index < 0 || index >= counts. length ) throw new IndexOutOfBoundsException ( \"Index \" + index + \" is out of bounds.\" ) ; return counts [ index ] ; }",
        "public < E > Counter < E > getCounts ( Counter < E > counter ) { Counter < E > result = new Counter < E > ( ) ; for ( E key : counter. keySet ( ) ) { result. setCount ( key, counter. getCount ( key ) ) ; } return result ; }",
        "public < E > Counter < E > getCounts ( Counter < E > counter ) { Counter < E > result = new Counter < E > ( ) ; for ( E key : counter. keySet ( ) ) { result. setCount ( key, counter. getCount ( key ) ) ; } return result ; }",
        "public < E > Counter < E > getCounts ( Counter < E > counter ) { Counter < E > result = new Counter < E > ( ) ; for ( E key : counter. keySet ( ) ) { result. incrementCount ( key, counter. getCount ( key ) ) ; } return result ; }",
        "public < E > Counter < E > getCounts ( Counter < E > counter ) { Counter < E > ret = new Counter < E > ( ) ; for ( E key : counter. keySet ( ) ) { ret. setCount ( key, counter. getCount ( key ) ) ; } return ret ; }",
        "public < E > Counter < E > getCounts ( Counter < E > counter ) { Counter < E > result = counters. get ( counter ) ; if ( result == null ) { result = new Counter < E > ( counter ) ; counters. put ( counter, result ) ; } return result ; }",
        "public double [ ] getCounts ( int counterIndex ) { double [ ] counts = new double [ counterIndex ] ; for ( int i = 0 ; i < counts. length ; i ++ ) { counts [ i ] = getCount ( counterIndex ) ; } return counts ; }",
        "public double [ ] getCounts ( int counterIndex ) { double [ ] counts = new double [ counterIndex ] ; for ( int i = 0 ; i < counts. length ; i ++ ) { counts [ i ] = getCount ( i ) ; } return counts ; }",
        "public double [ ] getCounts ( int counter ) { double [ ] counts = new double [ counter ] ; for ( int i = 0 ; i < counts. length ; i ++ ) { counts [ i ] = getCount ( counter ) ; } return counts ; }",
        "public double [ ] getCounts ( int counter ) { double [ ] counts = new double [ counter ] ; for ( int i = 0 ; i < counts. length ; i ++ ) { counts [ i ] = getCount ( i ) ; } return counts ; }",
        "public double getCounts ( int counterIndex ) { if ( counterIndex < 0 || counterIndex >= counterCount. length ) { throw new IllegalArgumentException ( \"Invalid counter index: \" + counterIndex ) ; } return counterCount [ counterIndex ] ; }"
      ]
    },
    "Math_57_/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java_175-176": {
      "loc": "175-176",
      "input": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) { int sum = 0; for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; }",
      "target": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) { double sum = 0; for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; }",
      "function range": "161,5-198,5",
      "raw_output": [
        "private static double [ ] [ ] computeCentroids ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] [ i ] = 0. ; } for ( int j = 0 ; j < dim ; j ++ ) { for ( int k = 0 ; k < dim ; k ++ ) { centroids [ j ] [ k ] = 0. ; } } return centroids ; }",
        "private static double [ ] [ ] computeInitialCentroids ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] [ i ] = 0. ; } for ( int j = 0 ; j < dim ; j ++ ) { for ( int k = 0 ; k < dim ; k ++ ) { centroids [ j ] [ k ] = 0. ; } } return centroids ; }",
        "private static double [ ] [ ] computeCentroids ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). centroid ( ) ; } return centroids ; }",
        "private static double [ ] [ ] computeCentroids ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "protected double [ ] [ ] computeCentroids ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). centroid ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCentroids ( Relation <? extends NumberVector > relation ) { double [ ] centroids = new double [ relation. size ( ) ] ; for ( int i = 0 ; i < relation. size ( ) ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } for ( int i = 0 ; i < relation. size ( ) ; i ++ ) { centroids [ i ] /= relation. size ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCentroids ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] initialCentroids = new double [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { initialCentroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return initialCentroids ; }",
        "private static double [ ] chooseInitialCentroids ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] centroids = new double [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCentroids ( Relation <? extends NumberVector > relation ) { double [ ] centroids = new double [ relation. size ( ) ] ; for ( int i = 0 ; i < relation. size ( ) ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCentroids ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] initialCentroids = new double [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { initialCentroids [ i ] = relation. doubleValue ( i ) ; } return initialCentroids ; }",
        "private double [ ] randomCentroids ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = initialCentroids [ i ] ; } return centroids ; }",
        "private double [ ] randomCentroids ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < initialCentroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) * initialCentroids [ i ] ; } return centroids ; }",
        "private double [ ] randomCentroids ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) ; } return centroids ; }",
        "private double [ ] randomCentroids ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < initialCentroids. length ; i ++ ) { centroids [ i ] = initialCentroids [ i ] ; } return centroids ; }",
        "private double [ ] randomCentroids ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < initialCentroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) ; } return centroids ; }",
        "private double [ ] chooseInitialCentroids ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) ; } for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) ; } return centroids ; }",
        "private double [ ] chooseInitialCentroids ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) * initialCentroids [ i ] ; } return centroids ; }",
        "private double [ ] chooseInitialCentroids ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = initialCentroids [ i ] ; } return centroids ; }",
        "private double [ ] chooseInitialCentroids ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = initialCentroids [ i ] * Math. random ( ) ; } return centroids ; }",
        "private double [ ] chooseInitialCentroid ( ) { double [ ] centroid = new double [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) { centroid [ i ] += Math. random ( ) * Math. random ( ) ; } } return centroid ; }",
        "public static double [ ] [ ] initialCentroids ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "public static double [ ] [ ] initialCentroids ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "public static double [ ] [ ] initialCentroids ( Relation <? extends NumberVector > relation ) { int dim = relation. getDimensionality ( ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "public static double [ ] [ ] initialCentroids ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. doubleValue ( i ) ; } return centroids ; }",
        "public static double [ ] [ ] initialCentroids ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). centroid ( ) ; } return centroids ; }"
      ],
      "mid_translation": [
        "Chooses a set of initial centroids.",
        "Chooses a random set of initial centroids.",
        "Generates a random set of initial centroids.",
        "Chooses a random set of initial centroid.",
        "Selects a set of initial centroids."
      ],
      "output": [
        "private static double [ ] [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] [ i ] = 0. ; } for ( int j = 0 ; j < dim ; j ++ ) { for ( int k = 0 ; k < dim ; k ++ ) { centroids [ j ] [ k ] = 0. ; } } return centroids ; }",
        "private static double [ ] [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] [ i ] = 0. ; } for ( int j = 0 ; j < dim ; j ++ ) { for ( int k = 0 ; k < dim ; k ++ ) { centroids [ j ] [ k ] = 0. ; } } return centroids ; }",
        "private static double [ ] [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). centroid ( ) ; } return centroids ; }",
        "private static double [ ] [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "private static double [ ] [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). centroid ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { double [ ] centroids = new double [ relation. size ( ) ] ; for ( int i = 0 ; i < relation. size ( ) ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } for ( int i = 0 ; i < relation. size ( ) ; i ++ ) { centroids [ i ] /= relation. size ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] initialCentroids = new double [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { initialCentroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return initialCentroids ; }",
        "private static double [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] centroids = new double [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { double [ ] centroids = new double [ relation. size ( ) ] ; for ( int i = 0 ; i < relation. size ( ) ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] initialCentroids = new double [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { initialCentroids [ i ] = relation. doubleValue ( i ) ; } return initialCentroids ; }",
        "private static double [ ] chooseInitialCenters ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = initialCentroids [ i ] ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < initialCentroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) * initialCentroids [ i ] ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < initialCentroids. length ; i ++ ) { centroids [ i ] = initialCentroids [ i ] ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < initialCentroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) ; } for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = Math. random ( ) * initialCentroids [ i ] ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = initialCentroids [ i ] ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( ) { double [ ] centroids = new double [ initialCentroids. length ] ; for ( int i = 0 ; i < centroids. length ; i ++ ) { centroids [ i ] = initialCentroids [ i ] * Math. random ( ) ; } return centroids ; }",
        "private static double [ ] chooseInitialCenters ( ) { double [ ] centroid = new double [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) { centroid [ i ] += Math. random ( ) * Math. random ( ) ; } } return centroid ; }",
        "private static double [ ] [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "private static double [ ] [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { final int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "private static double [ ] [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { int dim = relation. getDimensionality ( ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). doubleValue ( ) ; } return centroids ; }",
        "private static double [ ] [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. doubleValue ( i ) ; } return centroids ; }",
        "private static double [ ] [ ] chooseInitialCenters ( Relation <? extends NumberVector > relation ) { int dim = RelationUtil. dimensionality ( relation ) ; double [ ] [ ] centroids = new double [ dim ] [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { centroids [ i ] = relation. get ( i ). centroid ( ) ; } return centroids ; }"
      ]
    },
    "Math_58_/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java_121-122": {
      "loc": "121-122",
      "input": "public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess(); return fit(new Gaussian.Parametric(), guess); }",
      "target": "public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess(); return fit(guess); }",
      "function range": "119,5-122,5",
      "raw_output": [
        "public static < T > T model ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, null ) ; }",
        "public static < T > T model ( Class < T > modelClass, Object guess ) { return model ( modelClass, guess, null ) ; }",
        "public static < T > T model ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, false ) ; }",
        "public < T > T model ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, null ) ; }",
        "public static < T > T model ( Class < T > cls, T guess ) { return model ( cls, guess, null ) ; }",
        "protected double model ( double guess ) { double total = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { total += model [ i ] * guess ; } return total ; }",
        "protected double model ( double guess ) { double total = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { total += model [ i ] * guess ; } return total / model. length ; }",
        "protected double model ( double guess ) { double total = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { total += model [ i ] ; } return total / guess ; }",
        "protected double model ( double guess ) { double total = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { total += Math. exp ( model [ i ] - guess ) ; } return total ; }",
        "private double model ( double guess ) { double total = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { total += model [ i ] * guess ; } return total / model. length ; }",
        "public static < T > T model ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, false ) ; }",
        "public static < T > T model ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, null ) ; }",
        "public static < T > T model ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, true ) ; }",
        "public static < T > T model ( Class < T > cls, T guess ) { return model ( cls, guess, - 1 ) ; }",
        "public static < T > T model ( Class < T > cls, T guess ) { return model ( cls, guess, false ) ; }",
        "public double [ ] model ( double [ ] x, double [ ] y, double guess ) { return model ( x, y, guess, guess, false ) ; }",
        "public double [ ] model ( double [ ] x, double [ ] y, double guess ) { return model ( x, y, guess, guess, true ) ; }",
        "public double model ( double x, double y, double guess ) { return model ( x, y, guess, guess, false ) ; }",
        "public static double [ ] model ( double [ ] x, double [ ] y, double guess ) { return model ( x, y, guess, false ) ; }",
        "public double model ( double x, double y, double guess ) { return model ( x, y, guess, guess, true ) ; }",
        "public void accept ( File file ) throws IOException { if (! file. exists ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" does not exist.\" ) ; } if (! file. canRead ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canWrite ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } }",
        "public void accept ( File file ) throws IOException { if (! file. exists ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" does not exist.\" ) ; } if (! file. canRead ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canWrite ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not writable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } }",
        "public void accept ( File file ) throws IOException { if (! file. exists ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" does not exist.\" ) ; } if (! file. canRead ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } }",
        "public void accept ( File file ) throws IOException { if (! file. exists ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" does not exist.\" ) ; } if (! file. canRead ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canWrite ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } }",
        "public void accept ( File file ) throws IOException { if (! file. exists ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" does not exist.\" ) ; } if (! file. canRead ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canWrite ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } }"
      ],
      "mid_translation": [
        "Fits a model using the given guess.",
        "Fits a Gaussian model with the specified guess.",
        "Fits a model using the specified guess.",
        "Fits a Gaussian model using the specified guess.",
        "Fits the model using the given guess."
      ],
      "output": [
        "public < T > T fit ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, null ) ; }",
        "public < T > T fit ( Class < T > modelClass, Object guess ) { return model ( modelClass, guess, null ) ; }",
        "public < T > T fit ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, false ) ; }",
        "public < T > T fit ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, null ) ; }",
        "public < T > T fit ( Class < T > cls, T guess ) { return model ( cls, guess, null ) ; }",
        "public double fit ( double guess ) { double total = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { total += model [ i ] * guess ; } return total ; }",
        "public double fit ( double guess ) { double total = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { total += model [ i ] * guess ; } return total / model. length ; }",
        "public double fit ( double guess ) { double total = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { total += model [ i ] ; } return total / guess ; }",
        "public double fit ( double guess ) { double total = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { total += Math. exp ( model [ i ] - guess ) ; } return total ; }",
        "public double fit ( double guess ) { double total = 0 ; for ( int i = 0 ; i < model. length ; i ++ ) { total += model [ i ] * guess ; } return total / model. length ; }",
        "public < T > T fit ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, false ) ; }",
        "public < T > T fit ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, null ) ; }",
        "public < T > T fit ( Class < T > modelClass, T guess ) { return model ( modelClass, guess, true ) ; }",
        "public < T > T fit ( Class < T > cls, T guess ) { return model ( cls, guess, - 1 ) ; }",
        "public < T > T fit ( Class < T > cls, T guess ) { return model ( cls, guess, false ) ; }",
        "public double [ ] fit ( double [ ] x, double [ ] y, double guess ) { return model ( x, y, guess, guess, false ) ; }",
        "public double [ ] fit ( double [ ] x, double [ ] y, double guess ) { return model ( x, y, guess, guess, true ) ; }",
        "public double fit ( double x, double y, double guess ) { return model ( x, y, guess, guess, false ) ; }",
        "public double [ ] fit ( double [ ] x, double [ ] y, double guess ) { return model ( x, y, guess, false ) ; }",
        "public double fit ( double x, double y, double guess ) { return model ( x, y, guess, guess, true ) ; }",
        "public void fit ( File file ) throws IOException { if (! file. exists ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" does not exist.\" ) ; } if (! file. canRead ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canWrite ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } }",
        "public void fit ( File file ) throws IOException { if (! file. exists ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" does not exist.\" ) ; } if (! file. canRead ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canWrite ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not writable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } }",
        "public void fit ( File file ) throws IOException { if (! file. exists ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" does not exist.\" ) ; } if (! file. canRead ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } }",
        "public void fit ( File file ) throws IOException { if (! file. exists ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" does not exist.\" ) ; } if (! file. canRead ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canWrite ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new IOException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } }",
        "public void fit ( File file ) throws IOException { if (! file. exists ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" does not exist.\" ) ; } if (! file. canRead ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canWrite ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } if (! file. canExecute ( ) ) { throw new FileNotFoundException ( file. getAbsolutePath ( ) + \" is not readable.\" ) ; } }"
      ]
    },
    "Math_59_/src/main/java/org/apache/commons/math/util/FastMath.java_3482-3483": {
      "loc": "3482-3483",
      "input": "public static float max(final float a, final float b) { return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b); }",
      "target": "public static float max(final float a, final float b) { return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a); }",
      "function range": "3481,5-3483,5",
      "raw_output": [
        "public static float max ( float a, float b ) { if ( a < b ) { return FloatMath. max ( a, b ) ; } else { return FloatMath. max ( a, b ) ; } }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } if ( a < b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { if ( a < b ) { return FloatMath. max ( a, b ) ; } return FloatMath. max ( a, b ) ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a < b ) { max = a ; } if ( a > b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } if ( a < b ) { max = b ; } return max ; }",
        "public static float max ( float f1, float f2 ) { if ( f1 < f2 ) { return f1 ; } else if ( f2 < f1 ) { return f2 ; } else { return Math. max ( f1, f2 ) ; } }",
        "public static float max ( float f1, float f2 ) { float max = Float. MAX_VALUE ; if ( f1 > f2 ) { max = f1 ; } if ( f2 > f1 ) { max = f2 ; } return max ; }",
        "public static float max ( float a, float b ) { float max = a ; if ( a > b ) { max = a ; } if ( b > a ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = a ; if ( a > b ) { max = a ; } if ( a < b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { if ( a < b ) { return FloatMath. max ( a, b ) ; } else { return FloatMath. max ( a, b ) ; } }",
        "public static float max ( float a, float b ) { if ( a < b ) { return FloatMath. max ( a, b ) ; } else if ( a > b ) { return FloatMath. max ( a, b ) ; } else { return a ; } }",
        "public static float max ( float a, float b ) { if ( a < b ) { return FloatMath. max ( a, b ) ; } else if ( a < b ) { return FloatMath. max ( a, b ) ; } else { return a ; } }",
        "public static float max ( float a, float b ) { if ( a > b ) { return FloatMath. max ( a, b ) ; } else { return FloatMath. max ( a, b ) ; } }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } if ( a < b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } if ( a < b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = a ; if ( a > b ) { max = a ; } if ( b > a ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a < b ) { max = a ; } if ( a > b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } if ( a > b ) { max = b ; } return max ; }",
        "public static double max ( double a, double b ) { return Math. max ( Math. max ( a, b ), Math. max ( a, b ) ) ; }",
        "public static double max ( double x, double y ) { return Math. max ( Math. max ( x, y ), Math. max ( x, y ) ) ; }",
        "public static double max ( double x, double y ) { return Math. max ( x, Math. max ( y, x ) ) ; }",
        "public static double max ( double a, double b ) { if ( a < b ) { return Math. max ( a, b ) ; } else { return Math. max ( a, b ) ; } }",
        "public static double max ( double a, double b ) { return Math. max ( a, Math. max ( b, a ) ) ; }"
      ],
      "mid_translation": [
        "Returns the maximum of two float values.",
        "Determines the maximum of two float values.",
        "Returns the maximum of the two float values.",
        "Gets the maximum of two float values.",
        "Returns the maximum of the two supplied values."
      ],
      "output": [
        "public static float max ( float a, float b ) { if ( a < b ) { return FloatMath. max ( a, b ) ; } else { return FloatMath. max ( a, b ) ; } }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } if ( a < b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { if ( a < b ) { return FloatMath. max ( a, b ) ; } return FloatMath. max ( a, b ) ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a < b ) { max = a ; } if ( a > b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } if ( a < b ) { max = b ; } return max ; }",
        "public static float max ( float f1, float f2 ) { if ( f1 < f2 ) { return f1 ; } else if ( f2 < f1 ) { return f2 ; } else { return Math. max ( f1, f2 ) ; } }",
        "public static float max ( float f1, float f2 ) { float max = Float. MAX_VALUE ; if ( f1 > f2 ) { max = f1 ; } if ( f2 > f1 ) { max = f2 ; } return max ; }",
        "public static float max ( float a, float b ) { float max = a ; if ( a > b ) { max = a ; } if ( b > a ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = a ; if ( a > b ) { max = a ; } if ( a < b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { if ( a < b ) { return FloatMath. max ( a, b ) ; } else { return FloatMath. max ( a, b ) ; } }",
        "public static float max ( float a, float b ) { if ( a < b ) { return FloatMath. max ( a, b ) ; } else if ( a > b ) { return FloatMath. max ( a, b ) ; } else { return a ; } }",
        "public static float max ( float a, float b ) { if ( a < b ) { return FloatMath. max ( a, b ) ; } else if ( a < b ) { return FloatMath. max ( a, b ) ; } else { return a ; } }",
        "public static float max ( float a, float b ) { if ( a > b ) { return FloatMath. max ( a, b ) ; } else { return FloatMath. max ( a, b ) ; } }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } if ( a < b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } if ( a < b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = a ; if ( a > b ) { max = a ; } if ( b > a ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a < b ) { max = a ; } if ( a > b ) { max = b ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } return max ; }",
        "public static float max ( float a, float b ) { float max = Float. MAX_VALUE ; if ( a > b ) { max = a ; } if ( a > b ) { max = b ; } return max ; }",
        "public static double max ( double a, double b ) { return Math. max ( Math. max ( a, b ), Math. max ( a, b ) ) ; }",
        "public static double max ( double x, double y ) { return Math. max ( Math. max ( x, y ), Math. max ( x, y ) ) ; }",
        "public static double max ( double x, double y ) { return Math. max ( x, Math. max ( y, x ) ) ; }",
        "public static double max ( double a, double b ) { if ( a < b ) { return Math. max ( a, b ) ; } else { return Math. max ( a, b ) ; } }",
        "public static double max ( double a, double b ) { return Math. max ( a, Math. max ( b, a ) ) ; }"
      ]
    },
    "Math_63_/src/main/java/org/apache/commons/math/util/MathUtils.java_417-418": {
      "loc": "417-418",
      "input": "public static boolean equals(double x, double y) { return (Double.isNaN(x) && Double.isNaN(y)) || x == y; }",
      "target": "public static boolean equals(double x, double y) { return equals(x, y, 1); }",
      "function range": "416,5-418,5",
      "raw_output": [
        "public static boolean equal ( Number number1, Number number2 ) { if ( number1 == null || number2 == null ) { return false ; } return number1. doubleValue ( ) == number2. doubleValue ( ) ; }",
        "public static boolean equal ( Number number1, Number number2 ) { if ( number1 == null ) { return number2 == null ; } if ( number2 == null ) { return number1 == null ; } return number1. doubleValue ( ) == number2. doubleValue ( ) ; }",
        "public static boolean areEqual ( Number number1, Number number2 ) { if ( number1 == null || number2 == null ) { return false ; } return number1. doubleValue ( ) == number2. doubleValue ( ) ; }",
        "public static boolean compare ( Number number1, Number number2 ) { if ( number1 == null || number2 == null ) { return false ; } return number1. doubleValue ( ) == number2. doubleValue ( ) ; }",
        "public static boolean areEqual ( Number number1, Number number2 ) { if ( number1 == null || number2 == null ) { return false ; } if ( number1. doubleValue ( )!= number2. doubleValue ( ) ) { return false ; } return true ; }",
        "public static boolean areEqual ( double value1, double value2 ) { if ( value1 == value2 ) return true ; if ( value1 == value2 ) return false ; return value1 == value2 ; }",
        "public static boolean areEqual ( double value1, double value2 ) { return value1 == value2 || ( value1 == value2 && value1 == value2 ) ; }",
        "public static boolean areEqual ( double value1, double value2 ) { if ( value1 == value2 ) return true ; if ( value1 == value2 ) return true ; return false ; }",
        "public static boolean areEqual ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 == value2 ) { return true ; } return false ; }",
        "public static boolean areEqual ( double value1, double value2 ) { return value1 == value2 || value1 == value2 || ( value1 == value2 && value1 == value2 ) ; }",
        "public static boolean compare ( double a, double b ) { if ( ( a == b ) || ( a == null ) || ( b == null ) ) { return false ; } return Double. compare ( a, b ) ; }",
        "public static boolean compare ( double a, double b ) { if ( ( a == b ) || ( a == null ) || ( b == null ) ) { return false ; } return a. equals ( b ) ; }",
        "public static boolean compare ( double a, double b ) { if ( a == b ) { return true ; } if ( a == null || b == null ) { return false ; } return a. equals ( b ) ; }",
        "public static boolean compare ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean compare ( double a, double b ) { if ( a == b ) { return true ; } if ( a == null ) { return false ; } if ( b == null ) { return false ; } return a. equals ( b ) ; }",
        "public static boolean equal ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean equal ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } else if ( value1 == value2 ) { return false ; } else { return value1 == value2 ; } }",
        "public static boolean compare ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean equal ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } else if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean compare ( double a, double b ) { if ( a == b ) { return true ; } else if ( a == null ) { return false ; } else if ( b == null ) { return false ; } return Double. compare ( a, b ) ; }",
        "public static boolean areEqual ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean areEqual ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } else if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean areEqual ( double value1, double value2 ) { if ( value1 == value2 ) return true ; if ( value1 == value2 ) return false ; return value1 == value2 ; }",
        "public static boolean areEqual ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 < value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean areEqual ( double value1, double value2 ) { if ( value1 == value2 ) return true ; if ( value1 == value2 ) return true ; return false ; }"
      ],
      "mid_translation": [
        "Determines whether two numbers are equal.",
        "Determines whether two double values are equal.",
        "Tests if two double values are equal.",
        "Test if two double values are equal.",
        "Determines if two double values are equal."
      ],
      "output": [
        "public static boolean equals ( Number number1, Number number2 ) { if ( number1 == null || number2 == null ) { return false ; } return number1. doubleValue ( ) == number2. doubleValue ( ) ; }",
        "public static boolean equals ( Number number1, Number number2 ) { if ( number1 == null ) { return number2 == null ; } if ( number2 == null ) { return number1 == null ; } return number1. doubleValue ( ) == number2. doubleValue ( ) ; }",
        "public static boolean equals ( Number number1, Number number2 ) { if ( number1 == null || number2 == null ) { return false ; } return number1. doubleValue ( ) == number2. doubleValue ( ) ; }",
        "public static boolean equals ( Number number1, Number number2 ) { if ( number1 == null || number2 == null ) { return false ; } return number1. doubleValue ( ) == number2. doubleValue ( ) ; }",
        "public static boolean equals ( Number number1, Number number2 ) { if ( number1 == null || number2 == null ) { return false ; } if ( number1. doubleValue ( )!= number2. doubleValue ( ) ) { return false ; } return true ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) return true ; if ( value1 == value2 ) return false ; return value1 == value2 ; }",
        "public static boolean equals ( double value1, double value2 ) { return value1 == value2 || ( value1 == value2 && value1 == value2 ) ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) return true ; if ( value1 == value2 ) return true ; return false ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 == value2 ) { return true ; } return false ; }",
        "public static boolean equals ( double value1, double value2 ) { return value1 == value2 || value1 == value2 || ( value1 == value2 && value1 == value2 ) ; }",
        "public static boolean equals ( double a, double b ) { if ( ( a == b ) || ( a == null ) || ( b == null ) ) { return false ; } return Double. compare ( a, b ) ; }",
        "public static boolean equals ( double a, double b ) { if ( ( a == b ) || ( a == null ) || ( b == null ) ) { return false ; } return a. equals ( b ) ; }",
        "public static boolean equals ( double a, double b ) { if ( a == b ) { return true ; } if ( a == null || b == null ) { return false ; } return a. equals ( b ) ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean equals ( double a, double b ) { if ( a == b ) { return true ; } if ( a == null ) { return false ; } if ( b == null ) { return false ; } return a. equals ( b ) ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } else if ( value1 == value2 ) { return false ; } else { return value1 == value2 ; } }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } else if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean equals ( double a, double b ) { if ( a == b ) { return true ; } else if ( a == null ) { return false ; } else if ( b == null ) { return false ; } return Double. compare ( a, b ) ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } else if ( value1 == value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) return true ; if ( value1 == value2 ) return false ; return value1 == value2 ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) { return true ; } if ( value1 < value2 ) { return false ; } return value1 == value2 ; }",
        "public static boolean equals ( double value1, double value2 ) { if ( value1 == value2 ) return true ; if ( value1 == value2 ) return true ; return false ; }"
      ]
    },
    "Math_69_/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java_171-172": {
      "loc": "171-172",
      "input": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); }",
      "target": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * tDistribution.cumulativeProbability(-t); } } } return new BlockRealMatrix(out); }",
      "function range": "160,5-176,5",
      "raw_output": [
        "public static double [ ] correlationP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] correlationP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] /= A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] [ ] calculateP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] correlationP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] [ ] calculateP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] - A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] [ ] calculateP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] correlationP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] [ ] calculateP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] - A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] correlationP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] - A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] [ ] calculateP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A [ i ]. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] correlation ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = x [ i ] ; } for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = y [ i ] ; } return y ; }",
        "public static double [ ] [ ] correlation ( double [ ] [ ] x ) { double [ ] [ ] c = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { c [ i ] [ j ] = x [ j ] ; } } return c ; }",
        "public static double [ ] correlation ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = x [ i ] ; } for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = x [ i ] ; } return y ; }",
        "public static double [ ] correlation ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = x [ i ] ; } return y ; }",
        "public static double [ ] correlation ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = x [ i ] ; } return y ; }",
        "public static double [ ] correlationP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] correlationP ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A [ i ]. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public static double [ ] correlationP ( double [ ] [ ] data ) { double [ ] x = new double [ data. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data [ i ] [ 0 ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data [ i ] [ 1 ] ; } return x ; }",
        "public static double [ ] correlationP ( double [ ] x ) { double [ ] p = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { p [ i ] += x [ j ] ; } } return p ; }",
        "public static double [ ] correlationP ( double [ ] x ) { double [ ] p = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { p [ i ] += x [ j ] * x [ i ] ; } } return p ; }",
        "public static double [ ] correlation ( double [ ] x, double [ ] y ) { double [ ] c = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] = x [ i ] ; } for ( int i = 0 ; i < y. length ; i ++ ) { c [ i ] = y [ i ] ; } return c ; }",
        "public static double [ ] [ ] correlation ( double [ ] x, double [ ] y ) { double [ ] [ ] c = new double [ x. length ] [ y. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] [ i ] = x [ i ] ; } for ( int i = 0 ; i < y. length ; i ++ ) { c [ i ] [ i ] = y [ i ] ; } return c ; }",
        "public static double [ ] [ ] correlation ( double [ ] x ) { double [ ] [ ] c = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] [ 0 ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] [ 1 ] = x [ i ] ; } return c ; }",
        "public static double [ ] [ ] correlation ( double [ ] x, double [ ] y ) { double [ ] [ ] c = new double [ x. length ] [ y. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < y. length ; j ++ ) { c [ i ] [ j ] = x [ i ] [ j ] ; } } return c ; }",
        "public static double [ ] correlation ( double [ ] x, double [ ] y ) { double [ ] c = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] = y [ i ] ; } return c ; }"
      ],
      "mid_translation": [
        "Calculates the P - values of the correlation matrix.",
        "Calculates the P - values for the correlation matrix.",
        "Returns the column values of the correlation matrix as a real matrix.",
        "Calculates the P - values in the correlation matrix.",
        "Returns the columns and values of the correlation matrix."
      ],
      "output": [
        "public double [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] /= A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] - A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] - A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] - A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A [ i ]. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] getCorrelationPValues ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = x [ i ] ; } for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = y [ i ] ; } return y ; }",
        "public double [ ] [ ] getCorrelationPValues ( double [ ] [ ] x ) { double [ ] [ ] c = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { c [ i ] [ j ] = x [ j ] ; } } return c ; }",
        "public double [ ] getCorrelationPValues ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = x [ i ] ; } for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = x [ i ] ; } return y ; }",
        "public double [ ] getCorrelationPValues ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = x [ i ] ; } return y ; }",
        "public double [ ] getCorrelationPValues ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = x [ i ] ; } return y ; }",
        "public double [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] getCorrelationPValues ( double [ ] [ ] A ) { double [ ] [ ] P = new double [ A. length ] [ ] ; for ( int i = 0 ; i < A. length ; i ++ ) { for ( int j = 0 ; j < A [ i ]. length ; j ++ ) { P [ i ] [ j ] = A [ i ] [ j ] ; } } return P ; }",
        "public double [ ] getCorrelationPValues ( double [ ] [ ] data ) { double [ ] x = new double [ data. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data [ i ] [ 0 ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = data [ i ] [ 1 ] ; } return x ; }",
        "public double [ ] getCorrelationPValues ( double [ ] x ) { double [ ] p = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { p [ i ] += x [ j ] ; } } return p ; }",
        "public double [ ] getCorrelationPValues ( double [ ] x ) { double [ ] p = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < x. length ; j ++ ) { p [ i ] += x [ j ] * x [ i ] ; } } return p ; }",
        "public double [ ] getCorrelationPValues ( double [ ] x, double [ ] y ) { double [ ] c = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] = x [ i ] ; } for ( int i = 0 ; i < y. length ; i ++ ) { c [ i ] = y [ i ] ; } return c ; }",
        "public double [ ] [ ] getCorrelationPValues ( double [ ] x, double [ ] y ) { double [ ] [ ] c = new double [ x. length ] [ y. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] [ i ] = x [ i ] ; } for ( int i = 0 ; i < y. length ; i ++ ) { c [ i ] [ i ] = y [ i ] ; } return c ; }",
        "public double [ ] [ ] getCorrelationPValues ( double [ ] x ) { double [ ] [ ] c = new double [ x. length ] [ ] ; for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] [ 0 ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] [ 1 ] = x [ i ] ; } return c ; }",
        "public double [ ] [ ] getCorrelationPValues ( double [ ] x, double [ ] y ) { double [ ] [ ] c = new double [ x. length ] [ y. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { for ( int j = 0 ; j < y. length ; j ++ ) { c [ i ] [ j ] = x [ i ] [ j ] ; } } return c ; }",
        "public double [ ] getCorrelationPValues ( double [ ] x, double [ ] y ) { double [ ] c = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] = x [ i ] ; } for ( int i = 0 ; i < x. length ; i ++ ) { c [ i ] = y [ i ] ; } return c ; }"
      ]
    },
    "Math_70_/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java_72-73": {
      "loc": "72-73",
      "input": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { return solve(min, max); }",
      "target": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { return solve(f, min, max); }",
      "function range": "70,5-73,5",
      "raw_output": [
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, 0 ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, 1 ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, z, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length.\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length.\", x. length, y. length ) ) ; } return solve ( x, y ) ; }",
        "public double solve ( double min, double max ) { if ( min < min ) min = min ; if ( max < max ) max = max ; return solve ( min, max ) ; }",
        "public double solve ( double min, double max ) { if ( min < min ) min = min ; if ( max < max ) max = max ; return solve ( min, max, min ) ; }",
        "public double solve ( double min, double max ) { if ( min < min ) min = min ; if ( max < max ) max = max ; return Math. sqrt ( solve ( min, max ) ) ; }",
        "public double solve ( double min, double max ) { if ( min < min ) min = min ; if ( max < max ) max = max ; return solve ( min, max, min, max ) ; }",
        "public double solve ( double min, double max ) { if ( min < min ) min = min ; if ( max < max ) max = max ; return Math. sqrt ( solve ( min, max, min ) ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } return solve ( x, y ) ; }",
        "public double [ ] solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length.\", x. length, y. length ) ) ; } return solve ( x, y ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y, double [ ] z ) { return solve ( x, y, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, z, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { return solve ( x, y, null, null ) ; }"
      ],
      "mid_translation": [
        "Calls the solve function with the given parameters and returns the resulting value.",
        "Calls the solve function with the given parameters and returns the value.",
        "Calculates the solve function for a given range and initial value.",
        "Calls the solve function with the given parameters.",
        "Calls the solve method with the given parameters and returns the value."
      ],
      "output": [
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, 0 ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, 1 ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, z, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length.\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length.\", x. length, y. length ) ) ; } return solve ( x, y ) ; }",
        "public double solve ( double min, double max ) { if ( min < min ) min = min ; if ( max < max ) max = max ; return solve ( min, max ) ; }",
        "public double solve ( double min, double max ) { if ( min < min ) min = min ; if ( max < max ) max = max ; return solve ( min, max, min ) ; }",
        "public double solve ( double min, double max ) { if ( min < min ) min = min ; if ( max < max ) max = max ; return Math. sqrt ( solve ( min, max ) ) ; }",
        "public double solve ( double min, double max ) { if ( min < min ) min = min ; if ( max < max ) max = max ; return solve ( min, max, min, max ) ; }",
        "public double solve ( double min, double max ) { if ( min < min ) min = min ; if ( max < max ) max = max ; return Math. sqrt ( solve ( min, max, min ) ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; } return solve ( x, y ) ; }",
        "public double [ ] solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) throw new IllegalArgumentException ( String. format ( \"Arrays have different length: x[%d], y[%d]\", x. length, y. length ) ) ; return solve ( x, y ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { if ( x. length!= y. length ) { throw new IllegalArgumentException ( String. format ( \"Arrays have different length.\", x. length, y. length ) ) ; } return solve ( x, y ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y, double [ ] z ) { return solve ( x, y, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, z, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y ) { return solve ( x, y, null, null ) ; }"
      ]
    },
    "Math_73_/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java_136-137": {
      "loc": "136-137",
      "input": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); } <mask> return solve(f, min, yMin, max, yMax, initial, yInitial); }",
      "target": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); } if (yMin * yMax > 0) { throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } return solve(f, min, yMin, max, yMax, initial, yInitial); }",
      "function range": "98,5-140,5",
      "raw_output": [
        "public double solve ( double x, double y, double z, double initial ) { return solve ( x, y, z, initial, null ) ; }",
        "public double solve ( double x, double y, double z, double initial ) { return solve ( x, y, z, initial, 0 ) ; }",
        "public double solve ( double [ ] x, double [ ] y, double initial ) { return solve ( x, y, initial, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public void solve ( double [ ] x, double [ ] y, double initial ) { solve ( x, y, initial, null ) ; }",
        "public void solve ( double [ ] x, double [ ] y, double [ ] z, double [ ] initial ) { solve ( x, y, z, initial, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y, double [ ] z ) { return solve ( x, y, z, null ) ; }",
        "public double [ ] solve ( double [ ] x, double [ ] y, double [ ] z ) { return solve ( x, y, z, null ) ; }",
        "public void solve ( double [ ] x, double [ ] y, double [ ] z ) { solve ( x, y, z, null ) ; }",
        "public double [ ] solve ( double [ ] x, double [ ] y, double [ ] initial ) { return solve ( x, y, initial, null ) ; }",
        "public static < T1, T2, T3, R > R solve ( T1 x1, T2 x2, T3 x3, R R ) { return solve ( x1, x2, x3, R, null ) ; }",
        "public static < T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T15, T6, T6, T6, T7, T8, T6, T6, T7, T8, T8, T9, T10, T11, T12, T13, T14, T15, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T12, T13, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T14, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16,",
        "public static < T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T15, T6, T6, T6, T7, T8, T6, T6, T7, T8, T8, T9, T10, T11, T12, T13, T14, T15, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T12, T13, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T14, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16,",
        "public static < T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T15, T6, T6, T6, T7, T8, T6, T6, T7, T8, T8, T9, T10, T11, T12, T13, T14, T15, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T12, T13, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T14, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T32,",
        "public static < T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T15, T6, T6, T6, T7, T8, T6, T6, T7, T8, T8, T9, T10, T11, T12, T13, T14, T15, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T12, T13, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T14, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T32, T32,",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public void solve ( double [ ] x, double [ ] y, double [ ] z ) { this. solve ( x, y, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, z, null ) ; }",
        "public double [ ] solve ( double [ ] x, double [ ] y ) { return solve ( x, y, null, null, null ) ; }",
        "public static < T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T15, T6, T6, T6, T7, T8, T6, T6, T7, T8, T8, T9, T10, T11, T12, T13, T14, T15, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T12, T13, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T14, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T11, T12, T12, T13, T13, T13, T14, T14, T15, T15, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T9, T10, T11, T12, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16,",
        "public static < T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T15, T6, T6, T6, T7, T8, T6, T6, T7, T8, T8, T9, T10, T11, T12, T13, T14, T15, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T12, T13, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T14, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T11, T12, T12, T13, T13, T13, T14, T14, T15, T15, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T9, T10, T11, T12, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16,",
        "public static < T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T15, T6, T6, T6, T7, T8, T6, T6, T7, T8, T8, T9, T10, T11, T12, T13, T14, T15, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T12, T13, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T14, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T11, T12, T12, T13, T13, T13, T14, T14, T15, T15, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T9, T10, T11, T12, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16,",
        "public static < T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T15, T6, T6, T6, T7, T8, T6, T6, T7, T8, T8, T9, T10, T11, T12, T13, T14, T15, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T12, T13, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T14, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T11, T12, T12, T13, T13, T13, T14, T14, T15, T15, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T9, T10, T11, T12, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16,",
        "public static < T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T15, T6, T6, T6, T7, T8, T6, T6, T7, T8, T8, T9, T10, T11, T12, T13, T14, T15, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T12, T13, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T12, T14, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T8, T9, T10, T11, T11, T12, T12, T13, T13, T13, T14, T14, T15, T15, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T9, T10, T11, T12, T14, T15, T15, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T6, T7, T8, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16, T16,"
      ],
      "mid_translation": [
        "Calls the solve method with the given parameters and initial value.",
        "Calls the solve method with the given parameters and initial values.",
        "Calls the solve method of the given real function with the given parameters.",
        "Calls the solve method with the given parameters.",
        "Calls the solve method of the given real function."
      ],
      "output": [
        "public double solve ( double x, double y, double z, double initial ) { return solve ( x, y, z, initial, null ) ; }",
        "public double solve ( double x, double y, double z, double initial ) { return solve ( x, y, z, initial, 0 ) ; }",
        "public double solve ( double [ ] x, double [ ] y, double initial ) { return solve ( x, y, initial, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public void solve ( double [ ] x, double [ ] y, double initial ) { solve ( x, y, initial, null ) ; }",
        "public void solve ( double [ ] x, double [ ] y, double [ ] z, double [ ] initial ) { solve ( x, y, z, initial, null ) ; }",
        "public double solve ( double [ ] x, double [ ] y, double [ ] z ) { return solve ( x, y, z, null ) ; }",
        "public double [ ] solve ( double [ ] x, double [ ] y, double [ ] z ) { return solve ( x, y, z, null ) ; }",
        "public void solve ( double [ ] x, double [ ] y, double [ ] z ) { solve ( x, y, z, null ) ; }",
        "public double [ ] solve ( double [ ] x, double [ ] y, double [ ] initial ) { return solve ( x, y, initial, null ) ; }",
        "public < T1, T2, T3, R > R solve ( T1 x1, T2 x2, T3 x3, R R ) { return solve ( x1, x2, x3, R, null ) ; }",
        "",
        "",
        "",
        "",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null ) ; }",
        "public void solve ( double [ ] x, double [ ] y, double [ ] z ) { this. solve ( x, y, z, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, null, null ) ; }",
        "public double solve ( double x, double y, double z ) { return solve ( x, y, z, z, null ) ; }",
        "public double [ ] solve ( double [ ] x, double [ ] y ) { return solve ( x, y, null, null, null ) ; }",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Math_75_/src/main/java/org/apache/commons/math/stat/Frequency.java_303-304": {
      "loc": "303-304",
      "input": "@Deprecated public double getPct(Object v) { return getCumPct((Comparable<?>) v); }",
      "target": "@Deprecated public double getPct(Object v) { return getPct((Comparable<?>) v); }",
      "function range": "301,5-304,5",
      "raw_output": [
        "public double getObject ( Object object ) { if ( object == null ) { return 0 ; } if ( object instanceof Number ) { return ( ( Number ) object ). doubleValue ( ) ; } if ( object instanceof Boolean ) { return ( ( Boolean ) object ). doubleValue ( ) ; } if ( object instanceof Character ) { return ( ( Character ) object ). charValue ( ) ; } if ( object instanceof Float ) { return ( ( Float ) object ). doubleValue ( ) ; } if ( object instanceof Double ) { return ( ( Double ) object ). doubleValue ( ) ; } if ( object instanceof Integer ) { return ( ( Integer ) object ). doubleValue ( ) ; } if ( object instanceof Long ) { return ( ( Long ) object ). doubleValue ( ) ; } return 0 ; }",
        "public double getObject ( Object object ) { if ( object == null ) { return 0 ; } if ( object instanceof Number ) { return ( ( Number ) object ). doubleValue ( ) ; } if ( object instanceof Boolean ) { return ( ( Boolean ) object ). doubleValue ( ) ; } if ( object instanceof Character ) { return ( ( Character ) object ). charValue ( ) ; } if ( object instanceof Float ) { return ( ( Float ) object ). doubleValue ( ) ; } if ( object instanceof Double ) { return ( ( Double ) object ). doubleValue ( ) ; } if ( object instanceof Integer ) { return ( ( Integer ) object ). doubleValue ( ) ; } if ( object instanceof Long ) { return ( ( Long ) object ). doubleValue ( ) ; } return 0.0 ; }",
        "public double getObject ( Object object ) { if ( object == null ) { return 0 ; } if ( object instanceof Number ) { return ( ( Number ) object ). doubleValue ( ) ; } if ( object instanceof Boolean ) { return ( ( Boolean ) object ). doubleValue ( ) ; } if ( object instanceof Character ) { return ( ( Character ) object ). charValue ( ) ; } if ( object instanceof Float ) { return ( ( Float ) object ). doubleValue ( ) ; } if ( object instanceof Double ) { return ( ( Double ) object ). doubleValue ( ) ; } if ( object instanceof Long ) { return ( ( Long ) object ). doubleValue ( ) ; } return 0 ; }",
        "public double getObject ( Object object ) { if ( object == null ) { return 0 ; } if ( object instanceof Number ) { return ( ( Number ) object ). doubleValue ( ) ; } if ( object instanceof Boolean ) { return ( ( Boolean ) object ). doubleValue ( ) ; } if ( object instanceof Character ) { return ( ( Character ) object ). charValue ( ) ; } if ( object instanceof Float ) { return ( ( Float ) object ). doubleValue ( ) ; } if ( object instanceof Double ) { return ( ( Double ) object ). doubleValue ( ) ; } if ( object instanceof Long ) { return ( ( Long ) object ). doubleValue ( ) ; } return 0.0 ; }",
        "public double getObject ( Object object ) { if ( object == null ) { return 0 ; } if ( object instanceof Number ) { return ( ( Number ) object ). doubleValue ( ) ; } if ( object instanceof Boolean ) { return ( ( Boolean ) object ). doubleValue ( ) ; } if ( object instanceof Character ) { return ( ( Character ) object ). charValue ( ) ; } if ( object instanceof Float ) { return ( ( Float ) object ). doubleValue ( ) ; } if ( object instanceof Double ) { return ( ( Double ) object ). doubleValue ( ) ; } return 0 ; }",
        "public static long getObjectPct ( Object obj ) { if ( obj == null ) { return 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). longValue ( ) ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) ; } return 0 ; }",
        "public static long getObjectPct ( Object obj ) { if ( obj == null ) { return 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) ; } return 0 ; }",
        "public static long getObjectPct ( Object obj ) { if ( obj == null ) { return 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). longValue ( ) ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) ; } return 0 ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getObject ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return ( T ) cache. get ( clazz ) ; }",
        "public static long getObjectPct ( Object obj ) { if ( obj == null ) { return 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) ; } return 0 ; }",
        "public static Function get ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object instanceof Function ) { return ( Function ) object ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), Array. getLength ( object ) ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), Array. getLength ( object ) ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), Array. getLength ( object ) ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), Array. getLength ( object ) ) ; } return new Function ( object ) ; }",
        "public static Function get ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object instanceof Function ) { return ( Function ) object ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } return new Function ( object ) ; }",
        "public static Function get ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object instanceof Function ) { return ( Function ) object ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } return new Function ( object ) ; }",
        "public static Function get ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object instanceof Function ) { return ( Function ) object ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ). getClass ( ). getComponentType ( ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ). getClass ( ). getComponentType ( ) ; } return new Function ( object ) ; }",
        "public static Function get ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object instanceof Function ) { return ( Function ) object ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } return new Function ( object ) ; }",
        "public doubleFunction ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Integer. class ) ) { return ( ( Integer ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Long. class ) ) { return ( ( Long ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Long. class ) ) { return ( ( Long ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if",
        "public doubleFunction ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Integer. class ) ) { return ( ( Integer ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Long. class ) ) { return ( ( Long ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if",
        "public doubleFunction ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Integer. class ) ) { return ( ( Integer ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Long. class ) ) { return ( ( Long ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Long. class ) ) { return ( ( Long ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if",
        "public doubleFunction ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Integer. class ) ) { return ( ( Integer ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Long. class ) ) { return ( ( Long ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Long. class ) ) { return ( ( Long ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if",
        "public doubleFunction ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Integer. class ) ) { return ( ( Integer ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Long. class ) ) { return ( ( Long ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Long. class ) ) { return ( ( Long ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Float. class ) ) { return ( ( Float ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if ( object. getClass ( ). equals ( Double. class ) ) { return ( ( Double ) object ). doubleValue ( ) ; } else if",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getObject ( final T object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } return ( T ) objectCache. get ( object ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getObject ( final T object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } return ( T ) objects. get ( object ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getObject ( T object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } return ( T ) objectCache. get ( object ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getObject ( T object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } return ( T ) objects. get ( object ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getObject ( final T object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } return ( T ) objectMap. get ( object ) ; }"
      ],
      "mid_translation": [
        "Gets theumPct of an object",
        "Gets theumPct of an object.",
        "Gets theumPct function for the given object",
        "Gets theumPct function for the specified object",
        "Gets theumPct for the specified object."
      ],
      "output": [
        "@Deprecated public double getPct ( Object object ) { if ( object == null ) { return 0 ; } if ( object instanceof Number ) { return ( ( Number ) object ). doubleValue ( ) ; } if ( object instanceof Boolean ) { return ( ( Boolean ) object ). doubleValue ( ) ; } if ( object instanceof Character ) { return ( ( Character ) object ). charValue ( ) ; } if ( object instanceof Float ) { return ( ( Float ) object ). doubleValue ( ) ; } if ( object instanceof Double ) { return ( ( Double ) object ). doubleValue ( ) ; } if ( object instanceof Integer ) { return ( ( Integer ) object ). doubleValue ( ) ; } if ( object instanceof Long ) { return ( ( Long ) object ). doubleValue ( ) ; } return 0 ; }",
        "@Deprecated public double getPct ( Object object ) { if ( object == null ) { return 0 ; } if ( object instanceof Number ) { return ( ( Number ) object ). doubleValue ( ) ; } if ( object instanceof Boolean ) { return ( ( Boolean ) object ). doubleValue ( ) ; } if ( object instanceof Character ) { return ( ( Character ) object ). charValue ( ) ; } if ( object instanceof Float ) { return ( ( Float ) object ). doubleValue ( ) ; } if ( object instanceof Double ) { return ( ( Double ) object ). doubleValue ( ) ; } if ( object instanceof Integer ) { return ( ( Integer ) object ). doubleValue ( ) ; } if ( object instanceof Long ) { return ( ( Long ) object ). doubleValue ( ) ; } return 0.0 ; }",
        "@Deprecated public double getPct ( Object object ) { if ( object == null ) { return 0 ; } if ( object instanceof Number ) { return ( ( Number ) object ). doubleValue ( ) ; } if ( object instanceof Boolean ) { return ( ( Boolean ) object ). doubleValue ( ) ; } if ( object instanceof Character ) { return ( ( Character ) object ). charValue ( ) ; } if ( object instanceof Float ) { return ( ( Float ) object ). doubleValue ( ) ; } if ( object instanceof Double ) { return ( ( Double ) object ). doubleValue ( ) ; } if ( object instanceof Long ) { return ( ( Long ) object ). doubleValue ( ) ; } return 0 ; }",
        "@Deprecated public double getPct ( Object object ) { if ( object == null ) { return 0 ; } if ( object instanceof Number ) { return ( ( Number ) object ). doubleValue ( ) ; } if ( object instanceof Boolean ) { return ( ( Boolean ) object ). doubleValue ( ) ; } if ( object instanceof Character ) { return ( ( Character ) object ). charValue ( ) ; } if ( object instanceof Float ) { return ( ( Float ) object ). doubleValue ( ) ; } if ( object instanceof Double ) { return ( ( Double ) object ). doubleValue ( ) ; } if ( object instanceof Long ) { return ( ( Long ) object ). doubleValue ( ) ; } return 0.0 ; }",
        "@Deprecated public double getPct ( Object object ) { if ( object == null ) { return 0 ; } if ( object instanceof Number ) { return ( ( Number ) object ). doubleValue ( ) ; } if ( object instanceof Boolean ) { return ( ( Boolean ) object ). doubleValue ( ) ; } if ( object instanceof Character ) { return ( ( Character ) object ). charValue ( ) ; } if ( object instanceof Float ) { return ( ( Float ) object ). doubleValue ( ) ; } if ( object instanceof Double ) { return ( ( Double ) object ). doubleValue ( ) ; } return 0 ; }",
        "@Deprecated public long getPct ( Object obj ) { if ( obj == null ) { return 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). longValue ( ) ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) ; } return 0 ; }",
        "@Deprecated public long getPct ( Object obj ) { if ( obj == null ) { return 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) ; } if ( obj instanceof Date ) { return ( ( Date ) obj ). getTime ( ) ; } return 0 ; }",
        "@Deprecated public long getPct ( Object obj ) { if ( obj == null ) { return 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). longValue ( ) ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) ; } return 0 ; }",
        "@Deprecated public < T > T getPct ( final Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return ( T ) cache. get ( clazz ) ; }",
        "@Deprecated public long getPct ( Object obj ) { if ( obj == null ) { return 0 ; } if ( obj instanceof Number ) { return ( ( Number ) obj ). doubleValue ( ) ; } if ( obj instanceof String ) { return ( ( String ) obj ). length ( ) ; } return 0 ; }",
        "@Deprecated public Function getPct ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object instanceof Function ) { return ( Function ) object ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), Array. getLength ( object ) ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), Array. getLength ( object ) ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), Array. getLength ( object ) ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), Array. getLength ( object ) ) ; } return new Function ( object ) ; }",
        "@Deprecated public Function getPct ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object instanceof Function ) { return ( Function ) object ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } return new Function ( object ) ; }",
        "@Deprecated public Function getPct ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object instanceof Function ) { return ( Function ) object ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } return new Function ( object ) ; }",
        "@Deprecated public Function getPct ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object instanceof Function ) { return ( Function ) object ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ). getClass ( ). getComponentType ( ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ). getClass ( ). getComponentType ( ) ; } return new Function ( object ) ; }",
        "@Deprecated public Function getPct ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } if ( object instanceof Function ) { return ( Function ) object ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } if ( object. getClass ( ). isArray ( ) ) { return Array. newInstance ( object. getClass ( ). getComponentType ( ), 0 ) ; } return new Function ( object ) ; }",
        "",
        "",
        "",
        "",
        "",
        "@Deprecated public < T > T getPct ( final T object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } return ( T ) objectCache. get ( object ) ; }",
        "@Deprecated public < T > T getPct ( final T object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } return ( T ) objects. get ( object ) ; }",
        "@Deprecated public < T > T getPct ( T object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } return ( T ) objectCache. get ( object ) ; }",
        "@Deprecated public < T > T getPct ( T object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } return ( T ) objects. get ( object ) ; }",
        "@Deprecated public < T > T getPct ( final T object ) { if ( object == null ) { throw new IllegalArgumentException ( \"object cannot be null\" ) ; } return ( T ) objectMap. get ( object ) ; }"
      ]
    },
    "Math_80_/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java_1135-1136": {
      "loc": "1135-1136",
      "input": "private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { int j = 4 * n - 1; for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } j -= 4; } return true; } return false; }",
      "target": "private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { int j = 4 * (n - 1); for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } j -= 4; } return true; } return false; }",
      "function range": "1132,5-1147,5",
      "raw_output": [
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = size - 1 ; i >= 0 ; i -- ) { get ( i ). flip ( ) ; } }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = size - 1 ; i > 0 ; i -- ) { get ( i ). flip ( ) ; } }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = size - 1 ; }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = 0 ; }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = size ; i < size ; i ++ ) { get ( i ). flip ( ) ; } }",
        "public static boolean flip ( double x, double y ) { if ( Math. abs ( x ) > Math. abs ( y ) ) return false ; if ( Math. abs ( x ) > Math. abs ( y ) ) return false ; return true ; }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = 0 ; i < size ; i ++ ) { get ( i ). clear ( ) ; } }",
        "public static boolean flip ( double x, double y ) { if ( Math. abs ( x ) > Math. abs ( y ) ) return false ; if ( Math. abs ( x ) < Math. abs ( y ) ) return false ; return true ; }",
        "public static String flipIfW ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) str = str. substring ( 1, str. length ( ) - 1 ) ; if ( str. charAt ( 1 ) =='' ) str = str. substring ( 1, str. length ( ) - 1 ) ; return str ; }",
        "public static String flipIfW ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) str = str. substring ( 1, str. length ( ) - 1 ) ; if ( str. charAt ( 1 ) =='' ) str = str. substring ( 2, str. length ( ) - 1 ) ; return str ; }",
        "public static String flipIfW ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' || str. charAt ( str. length ( ) - 1 ) =='' ) str = str. substring ( 1, str. length ( ) - 1 ) ; return str ; }",
        "public static String flipIfW ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) str = str. substring ( 1 ) ; if ( str. charAt ( 1 ) =='' ) str = str. substring ( 2 ) ; return str ; }",
        "public static String flipIfW ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' && str. charAt ( 1 ) =='' ) str = str. substring ( 1, str. length ( ) - 1 ) ; return str ; }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = size - 1 ; }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = get ( size - 1 ). size ; }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = get ( size - 1 ). size ( ) ; }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = 0 ; }",
        "public void flip ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = get ( size - 1 ). getSize ( ) ; }",
        "public void flip ( ) { if ( tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \" flip\" ) ; if ( tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \" flip\" ) ; }",
        "public void flip ( ) { if ( tc. isEntryEnabled ( ) ) Tr. entry ( tc, \" flip\" ) ; if ( tc. isEntryEnabled ( ) ) Tr. exit ( tc, \" flip\" ) ; }",
        "public static boolean flip ( double x, double y ) { if ( Math. abs ( x ) > Math. abs ( y ) ) { return false ; } if ( Math. abs ( x ) > Math. abs ( y ) ) { return false ; } return true ; }",
        "public void flip ( ) { if ( tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \" flip\" ) ; if ( tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"lip\" ) ; }",
        "public static boolean flip ( double x, double y ) { if ( Math. abs ( x ) > Math. abs ( y ) ) { return false ; } if ( Math. abs ( x ) < Math. abs ( y ) ) { return false ; } return true ; }"
      ],
      "mid_translation": [
        "Flips if Warranted.",
        "Flips ifWarranted.",
        "Flips ifW arranted.",
        "Flips if W arranted.",
        "Flip if Warranted."
      ],
      "output": [
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = size - 1 ; i >= 0 ; i -- ) { get ( i ). flip ( ) ; } }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = size - 1 ; i > 0 ; i -- ) { get ( i ). flip ( ) ; } }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = size - 1 ; }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = 0 ; }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = size ; i < size ; i ++ ) { get ( i ). flip ( ) ; } }",
        "private boolean flipIfWarranted ( double x, double y ) { if ( Math. abs ( x ) > Math. abs ( y ) ) return false ; if ( Math. abs ( x ) > Math. abs ( y ) ) return false ; return true ; }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } for ( int i = 0 ; i < size ; i ++ ) { get ( i ). clear ( ) ; } }",
        "private boolean flipIfWarranted ( double x, double y ) { if ( Math. abs ( x ) > Math. abs ( y ) ) return false ; if ( Math. abs ( x ) < Math. abs ( y ) ) return false ; return true ; }",
        "private String flipIfWarranted ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) str = str. substring ( 1, str. length ( ) - 1 ) ; if ( str. charAt ( 1 ) =='' ) str = str. substring ( 1, str. length ( ) - 1 ) ; return str ; }",
        "private String flipIfWarranted ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) str = str. substring ( 1, str. length ( ) - 1 ) ; if ( str. charAt ( 1 ) =='' ) str = str. substring ( 2, str. length ( ) - 1 ) ; return str ; }",
        "private String flipIfWarranted ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' || str. charAt ( str. length ( ) - 1 ) =='' ) str = str. substring ( 1, str. length ( ) - 1 ) ; return str ; }",
        "private String flipIfWarranted ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' ) str = str. substring ( 1 ) ; if ( str. charAt ( 1 ) =='' ) str = str. substring ( 2 ) ; return str ; }",
        "private String flipIfWarranted ( String str ) { if ( str == null || str. length ( ) == 0 ) return str ; if ( str. charAt ( 0 ) =='' && str. charAt ( 1 ) =='' ) str = str. substring ( 1, str. length ( ) - 1 ) ; return str ; }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = size - 1 ; }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = get ( size - 1 ). size ; }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = get ( size - 1 ). size ( ) ; }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = 0 ; }",
        "private void flipIfWarranted ( ) { for ( int i = 0 ; i < size ; i ++ ) { get ( i ). flip ( ) ; } size = get ( size - 1 ). getSize ( ) ; }",
        "private void flipIfWarranted ( ) { if ( tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \" flip\" ) ; if ( tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \" flip\" ) ; }",
        "private void flipIfWarranted ( ) { if ( tc. isEntryEnabled ( ) ) Tr. entry ( tc, \" flip\" ) ; if ( tc. isEntryEnabled ( ) ) Tr. exit ( tc, \" flip\" ) ; }",
        "private boolean flipIfWarranted ( double x, double y ) { if ( Math. abs ( x ) > Math. abs ( y ) ) { return false ; } if ( Math. abs ( x ) > Math. abs ( y ) ) { return false ; } return true ; }",
        "private void flipIfWarranted ( ) { if ( tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \" flip\" ) ; if ( tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"lip\" ) ; }",
        "private boolean flipIfWarranted ( double x, double y ) { if ( Math. abs ( x ) > Math. abs ( y ) ) { return false ; } if ( Math. abs ( x ) < Math. abs ( y ) ) { return false ; } return true ; }"
      ]
    },
    "Math_82_/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java_82-83": {
      "loc": "82-83",
      "input": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; }",
      "target": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) > 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; }",
      "function range": "76,5-91,5",
      "raw_output": [
        "public static pivotRow ( TableDefinition tableDef, ColumnDefinition columnDef ) { return pivotRow ( tableDef, columnDef, null ) ; }",
        "public static pivotRow ( Tableau tableau, String columnName ) { return pivotRow ( tableau, columnName, null ) ; }",
        "public static pivotRow ( Tableau tableau, String column ) { return pivotRow ( tableau, column, null ) ; }",
        "public static pivotRow ( Tableau tableau, String columnName ) { pivotRow ( tableau, columnName, null ) ; return pivotRow ( tableau ) ; }",
        "public static pivotRow ( TableDefinition tableDef, ColumnDefinition columnDef ) { return pivotRow ( tableDef, columnDef. getName ( ) ) ; }",
        "public static pivotRow ( Tableau tableau, String columnName ) { return pivotRow ( tableau, columnName, null ) ; }",
        "public static pivotRow ( TableDefinition tableDef, ColumnDefinition columnDef ) { return pivotRow ( tableDef, columnDef, null ) ; }",
        "public static pivotRow ( Tableau tableau, String column ) { return pivotRow ( tableau, column, null ) ; }",
        "public static pivotRow ( Tableau tableau, String columnName ) { pivotRow ( tableau, columnName, null ) ; return pivotRow ( tableau ) ; }",
        "public static pivotRow ( Tableau tableau, String columnName ) { return pivotRow ( tableau, columnName, null, null ) ; }",
        "public static pivotRow ( Tableau tableau, String columnName ) { pivotRows. put ( tableau, new pivotRow ( columnName ) ) ; return tableau ; }",
        "public static pivotRow ( Tableau tableau, String column ) { pivotRows. put ( tableau, new pivotRow ( column ) ) ; return tableau ; }",
        "public static pivotRow ( Tableau tableau, String columnName ) { pivotRows. put ( tableau, new pivotRow ( columnName ) ) ; return tableau. getP pivot ( ) ; }",
        "public static pivotRow ( Tableau tableau, String columnName ) { pivotRows. put ( tableau, new pivotRow ( columnName ) ) ; return tableau. getPivot ( ) ; }",
        "public static pivotRow ( TableDefinition tableDef, String columnName ) { pivotRows. put ( tableDef, new pivotRow ( columnName ) ) ; return tableDef ; }",
        "public static pivotRow ( TableDefinition tableDef, ColumnDefinition columnDef ) { return pivotRow ( tableDef, columnDef, null ) ; }",
        "public static pivotRow ( TableDefinition tableDef, ColumnDef columnDef ) { return pivotRow ( tableDef, columnDef, null ) ; }",
        "public static pivotRow ( TableDefinition tableDef, ColumnDefinition columnDef ) { return pivotRow ( tableDef, columnDef. getName ( ) ) ; }",
        "public static pivotRow ( TableDefinition tableDef, ColumnDefinition columnDef ) { return new pivotRow ( tableDef, columnDef, null ) ; }",
        "public static pivotRow ( TableDefinition tableDef, ColumnDefinition columnDef ) { return pivotRow ( tableDef, columnDef, null, null ) ; }",
        "public static pivotRow ( Connection connection, Tableau tableau, String columnName ) throws SQLException { return pivotRow ( connection, tableau, columnName, null ) ; }",
        "public static pivotRow ( Tableau tableau, String columnName ) { pivotRow ( tableau, columnName, null ) ; return pivotRow ( tableau ) ; }",
        "public static pivotRow ( Tableau tableau, String columnName ) { return pivotRow ( tableau, columnName, null ) ; }",
        "public static pivotRow ( Tableau tableau, int column ) { pivotRow ( tableau, column, null ) ; return pivotRow ( tableau ) ; }",
        "public static pivotRow ( Tableau tableau, int column ) { return pivotRow ( tableau, column, null ) ; }"
      ],
      "mid_translation": [
        "Calculates the pivot row for a given column and tableau.",
        "Calculates the pivot row for the given column and tableau.",
        "Gets the pivot row for a given column and tableau.",
        "Calculates the pivot row for a given column and tableau",
        "Calculates the pivot row for a given column and a tableau"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Math_85_/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java_198-199": {
      "loc": "198-199",
      "input": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound))); if (fa * fb >= 0.0 ) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb); } return new double[]{a, b}; }",
      "target": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound))); if (fa * fb > 0.0 ) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb); } return new double[]{a, b}; }",
      "function range": "165,5-208,5",
      "raw_output": [
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, T1 param1, T2 param2, T3 param3 ) { return new Function2 <> ( function, param1, param2, param3 ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new BracketFunction2 < T1, T2, T3 > ( function, parameters ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, T1 param1, T1 param2, T3 param3 ) { return new Function2 <> ( function, param1, param2, param3 ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new BracketFunction2 <> ( function, parameters ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, T1 param1, T2 param2, T3 param3 ) { return new bracket ( function, param1, param2, param3 ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new BracketFunction2 < T1, T2, T3 > ( function, parameters ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new Bracket < T1, T2, T3 > ( function, parameters ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new Function2 < T1, T2, T3 > ( function, parameters ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new BracketFunction2 <> ( function, parameters ) ; }",
        "public static < T1, T2 > Function < T1, T2 > bracket ( Function < T1, T2 > function, int parameters ) { return new Bracket < T1, T2 > ( function, parameters ) ; }",
        "public static < T1, T2 > Function < T1, T2 > bracket ( Function < T1, T2 > function, T1 param1, T1 param2 ) { return new Bracket < T1, T2 > ( function, param1, param2 ) ; }",
        "public static < T1, T2 > Function < T1, T2 > bracket ( Function < T1, T2 > function, T1 param1, T2 param2 ) { return new Bracket < T1, T2 > ( function, param1, param2 ) ; }",
        "public static < T1, T2 > Function < T1, T2 > bracket ( Function < T1, T2 > function, T1 param1, T2 param2 ) { return new BracketFunction < T1, T2 > ( function, param1, param2 ) ; }",
        "public static < T1, T2 > Function2 < T1, T2 > bracket ( Function2 < T1, T2 > function, T1 param1, T1 param2 ) { return new Function2 <> ( function, param1, param2 ) ; }",
        "public static < T1, T2 > Function2 < T1, T2 > bracket ( Function2 < T1, T2 > function, T1 param1, T1 param2 ) { return new BracketFunction2 <> ( function, param1, param2 ) ; }",
        "public static double bracket ( double f, int initial, int max ) { if ( f < 0 ) { throw new IllegalArgumentException ( \"Function must be positive.\" ) ; } if ( f > max ) { throw new IllegalArgumentException ( \"Function must be greater than or equal to max.\" ) ; } return Math. pow ( f, initial ) * Math. pow ( f, max ) ; }",
        "public static double bracket ( double f, int initial, int max ) { if ( f < 0 ) { throw new IllegalArgumentException ( \"F must be positive.\" ) ; } if ( f > max ) { throw new IllegalArgumentException ( \"F must be greater than max.\" ) ; } return Math. pow ( f, initial ) * Math. pow ( f, max ) ; }",
        "public static double bracket ( double f, int initial, int max ) { if ( f < 0 ) { throw new IllegalArgumentException ( \"F must be positive.\" ) ; } if ( f > max ) { throw new IllegalArgumentException ( \"F must be > max.\" ) ; } return Math. pow ( f, initial ) / Math. pow ( max, max ) ; }",
        "public static double bracket ( double f, int initial, int max ) { if ( f < 0 ) { throw new IllegalArgumentException ( \"Function must be positive.\" ) ; } if ( f > max ) { throw new IllegalArgumentException ( \"Function must be greater than or equal to max.\" ) ; } return Math. pow ( f, initial ) / Math. pow ( max, max ) ; }",
        "public static double bracket ( double f, int initial, int max ) { if ( f < 0 ) { throw new IllegalArgumentException ( \"Function must be positive.\" ) ; } if ( f > max ) { throw new IllegalArgumentException ( \"Function must be > max.\" ) ; } return Math. pow ( f, initial ) / Math. pow ( max, max ) ; }",
        "public static < T1, T2, T3 > BiFunction < T1, T2, T3 > bracket ( BiFunction < T1, T2, T3 > function, int maxIterations ) { return new bracket ( function, maxIterations, false ) ; }",
        "public static < T1, T2, T3 > Function2D < T1, T2, T3 > bracket ( Function2D < T1, T2, T3 > function, double initial, double maxIterations ) { return new bracket ( function, initial, maxIterations ) ; }",
        "public static < T1, T2, T3 > BiFunction < T1, T2, T3 > bracket ( BiFunction < T1, T2, T3 > function, int maxIterations ) { return new bracket ( function, maxIterations, true ) ; }",
        "public static < T1, T2, T3 > Function2D < T1, T2, T3 > bracket ( Function2D < T1, T2, T3 > function, int maxIterations ) { return new bracket ( function, maxIterations, false ) ; }",
        "public static < T1, T2, T3 > Function2D < T1, T2, T3 > bracket ( Function2D < T1, T2, T3 > function, int maxIterations ) { return new bracket ( function, maxIterations, true ) ; }"
      ],
      "mid_translation": [
        "Computes the bracket of the given function using the given parameters.",
        "Computes the bracket of the given function for the given parameters.",
        "Returns the bracket of the given function for the given parameters.",
        "Returns the bracket of the given function for the given initial and maximum iterations.",
        "Computes the bracket of the given function using the given initial and maximumIterations parameters."
      ],
      "output": [
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, T1 param1, T2 param2, T3 param3 ) { return new Function2 <> ( function, param1, param2, param3 ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new BracketFunction2 < T1, T2, T3 > ( function, parameters ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, T1 param1, T1 param2, T3 param3 ) { return new Function2 <> ( function, param1, param2, param3 ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new BracketFunction2 <> ( function, parameters ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, T1 param1, T2 param2, T3 param3 ) { return new bracket ( function, param1, param2, param3 ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new BracketFunction2 < T1, T2, T3 > ( function, parameters ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new Bracket < T1, T2, T3 > ( function, parameters ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new Function2 < T1, T2, T3 > ( function, parameters ) ; }",
        "public static < T1, T2, T3 > Function2 < T1, T2, T3 > bracket ( Function2 < T1, T2, T3 > function, int parameters ) { return new BracketFunction2 <> ( function, parameters ) ; }",
        "public static < T1, T2 > Function < T1, T2 > bracket ( Function < T1, T2 > function, int parameters ) { return new Bracket < T1, T2 > ( function, parameters ) ; }",
        "public static < T1, T2 > Function < T1, T2 > bracket ( Function < T1, T2 > function, T1 param1, T1 param2 ) { return new Bracket < T1, T2 > ( function, param1, param2 ) ; }",
        "public static < T1, T2 > Function < T1, T2 > bracket ( Function < T1, T2 > function, T1 param1, T2 param2 ) { return new Bracket < T1, T2 > ( function, param1, param2 ) ; }",
        "public static < T1, T2 > Function < T1, T2 > bracket ( Function < T1, T2 > function, T1 param1, T2 param2 ) { return new BracketFunction < T1, T2 > ( function, param1, param2 ) ; }",
        "public static < T1, T2 > Function2 < T1, T2 > bracket ( Function2 < T1, T2 > function, T1 param1, T1 param2 ) { return new Function2 <> ( function, param1, param2 ) ; }",
        "public static < T1, T2 > Function2 < T1, T2 > bracket ( Function2 < T1, T2 > function, T1 param1, T1 param2 ) { return new BracketFunction2 <> ( function, param1, param2 ) ; }",
        "public static double bracket ( double f, int initial, int max ) { if ( f < 0 ) { throw new IllegalArgumentException ( \"Function must be positive.\" ) ; } if ( f > max ) { throw new IllegalArgumentException ( \"Function must be greater than or equal to max.\" ) ; } return Math. pow ( f, initial ) * Math. pow ( f, max ) ; }",
        "public static double bracket ( double f, int initial, int max ) { if ( f < 0 ) { throw new IllegalArgumentException ( \"F must be positive.\" ) ; } if ( f > max ) { throw new IllegalArgumentException ( \"F must be greater than max.\" ) ; } return Math. pow ( f, initial ) * Math. pow ( f, max ) ; }",
        "public static double bracket ( double f, int initial, int max ) { if ( f < 0 ) { throw new IllegalArgumentException ( \"F must be positive.\" ) ; } if ( f > max ) { throw new IllegalArgumentException ( \"F must be > max.\" ) ; } return Math. pow ( f, initial ) / Math. pow ( max, max ) ; }",
        "public static double bracket ( double f, int initial, int max ) { if ( f < 0 ) { throw new IllegalArgumentException ( \"Function must be positive.\" ) ; } if ( f > max ) { throw new IllegalArgumentException ( \"Function must be greater than or equal to max.\" ) ; } return Math. pow ( f, initial ) / Math. pow ( max, max ) ; }",
        "public static double bracket ( double f, int initial, int max ) { if ( f < 0 ) { throw new IllegalArgumentException ( \"Function must be positive.\" ) ; } if ( f > max ) { throw new IllegalArgumentException ( \"Function must be > max.\" ) ; } return Math. pow ( f, initial ) / Math. pow ( max, max ) ; }",
        "public static < T1, T2, T3 > BiFunction < T1, T2, T3 > bracket ( BiFunction < T1, T2, T3 > function, int maxIterations ) { return new bracket ( function, maxIterations, false ) ; }",
        "public static < T1, T2, T3 > Function2D < T1, T2, T3 > bracket ( Function2D < T1, T2, T3 > function, double initial, double maxIterations ) { return new bracket ( function, initial, maxIterations ) ; }",
        "public static < T1, T2, T3 > BiFunction < T1, T2, T3 > bracket ( BiFunction < T1, T2, T3 > function, int maxIterations ) { return new bracket ( function, maxIterations, true ) ; }",
        "public static < T1, T2, T3 > Function2D < T1, T2, T3 > bracket ( Function2D < T1, T2, T3 > function, int maxIterations ) { return new bracket ( function, maxIterations, false ) ; }",
        "public static < T1, T2, T3 > Function2D < T1, T2, T3 > bracket ( Function2D < T1, T2, T3 > function, int maxIterations ) { return new bracket ( function, maxIterations, true ) ; }"
      ]
    },
    "Math_91_/src/java/org/apache/commons/math/fraction/Fraction.java_259-261": {
      "loc": "259-261",
      "input": "public int compareTo(Fraction object) { double nOd = doubleValue(); double dOn = object.doubleValue(); return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); }",
      "target": "public int compareTo(Fraction object) { long nOd = ((long) numerator) * object.denominator; long dOn = ((long) denominator) * object.numerator; return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); }",
      "function range": "258,5-262,5",
      "raw_output": [
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return - 1 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else { return 0 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return 0 ; } else { return - 1 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return - 1 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else { return 0 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return 0 ; } else { return - 1 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( fraction == null ) { throw new IllegalArgumentException ( \" fraction cannot be null\" ) ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } return 0 ; }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "@ Override public int compareTo ( fraction ) { if ( fraction == null ) { throw new IllegalArgumentException ( \" fraction cannot be null\" ) ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } return 0 ; }",
        "@ Override public int compareTo ( fraction ) { if ( fraction == null ) { throw new IllegalArgumentException ( \" fraction cannot be null\" ) ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else { return 0 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return - 1 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else { return 0 ; } }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } return 0 ; }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "@ Override public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } return this ; }"
      ],
      "mid_translation": [
        "Compares this fraction with the specified fraction.",
        "Compares this fraction with the specified fraction object.",
        "Compares the specified fraction with this fraction.",
        "Compares this fraction with the given fraction.",
        "Compares this fraction with the supplied fraction."
      ],
      "output": [
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return - 1 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else { return 0 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return 0 ; } else { return - 1 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return - 1 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else { return 0 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return 0 ; } else { return - 1 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "public int compareTo ( fraction ) { if ( fraction == null ) { throw new IllegalArgumentException ( \" fraction cannot be null\" ) ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } return 0 ; }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "public int compareTo ( fraction ) { if ( fraction == null ) { throw new IllegalArgumentException ( \" fraction cannot be null\" ) ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } return 0 ; }",
        "public int compareTo ( fraction ) { if ( fraction == null ) { throw new IllegalArgumentException ( \" fraction cannot be null\" ) ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else { return 0 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else { return 0 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else { return - 1 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else if ( this == fraction ) { return 1 ; } else if ( this == fraction ) { return - 1 ; } else { return 0 ; } }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } return 0 ; }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 1 ; } return 0 ; }",
        "public int compareTo ( fraction ) { if ( this == fraction ) { return 0 ; } if ( fraction == null ) { return - 1 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } if ( this == fraction ) { return 0 ; } if ( this == fraction ) { return 1 ; } if ( this == fraction ) { return - 1 ; } return this ; }"
      ]
    },
    "Math_94_/src/java/org/apache/commons/math/util/MathUtils.java_412-413": {
      "loc": "412-413",
      "input": "public static int gcd(int u, int v) { if (u * v == 0) { return (Math.abs(u) + Math.abs(v)); } if (u > 0) { u = -u; } if (v > 0) { v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { u /= 2; v /= 2; k++; } if (k == 31) { throw new ArithmeticException(\"overflow: gcd is 2^31\"); } int t = ((u & 1) == 1) ? v : -(u / 2); do { while ((t & 1) == 0) { t /= 2; } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t != 0); return -u * (1 << k); }",
      "target": "public static int gcd(int u, int v) { if ((u == 0) || (v == 0)) { return (Math.abs(u) + Math.abs(v)); } if (u > 0) { u = -u; } if (v > 0) { v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { u /= 2; v /= 2; k++; } if (k == 31) { throw new ArithmeticException(\"overflow: gcd is 2^31\"); } int t = ((u & 1) == 1) ? v : -(u / 2); do { while ((t & 1) == 0) { t /= 2; } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t != 0); return -u * (1 << k); }",
      "function range": "411,5-460,5",
      "raw_output": [
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x * x + y * y ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x + y ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return ( int ) Math. min ( x, y ) ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; y = Math. min ( x, y ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. max ( x, y ) ; y = Math. max ( y, x ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return Math. min ( x, y ) ; }",
        "public static int min ( int x, int y ) { x = Math. max ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return ( int ) Math. min ( x, y ) ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int min ( int x1, int y1, int x2, int y2 ) { return min ( x1, y1, x2, y2, x1, y2 ) ; }",
        "public static int min ( int x1, int y1, int x2, int y2 ) { return min ( x1, y1, x2, y2, x1, y1 ) ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x *= x ; y *= y ; x *= x ; y *= y ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. max ( x, y ) ; return x ; }",
        "public static int min ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x *= x ; y *= y ; return x ; }"
      ],
      "mid_translation": [
        "Computes the least common divisor of two unsigned integers.",
        "Returns the least common multiple of two unsigned integers.",
        "Computes the least common divisor of two integers.",
        "Computes the least common multiple of two integers.",
        "Computes the least common multiple of two unsigned integers."
      ],
      "output": [
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x * x + y * y ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x + y ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return ( int ) Math. min ( x, y ) ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; y = Math. min ( x, y ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. max ( x, y ) ; y = Math. max ( y, x ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return Math. min ( x, y ) ; }",
        "public static int gcd ( int x, int y ) { x = Math. max ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return ( int ) Math. min ( x, y ) ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int gcd ( int x1, int y1, int x2, int y2 ) { return min ( x1, y1, x2, y2, x1, y2 ) ; }",
        "public static int gcd ( int x1, int y1, int x2, int y2 ) { return min ( x1, y1, x2, y2, x1, y1 ) ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. min ( x, y ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x *= x ; y *= y ; x *= x ; y *= y ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x = Math. max ( x, y ) ; return x ; }",
        "public static int gcd ( int x, int y ) { x = Math. min ( x, y ) ; y = Math. min ( y, x ) ; x *= x ; y *= y ; return x ; }"
      ]
    },
    "Math_96_/src/java/org/apache/commons/math/complex/Complex.java_258-259": {
      "loc": "258-259",
      "input": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) { ret = false; } } return ret; }",
      "target": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (real == rhs.real) && (imaginary == rhs.imaginary); } } catch (ClassCastException ex) { ret = false; } } return ret; }",
      "function range": "245,5-267,5",
      "raw_output": [
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return obj. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object other ) { if ( other == null ) { return false ; } if ( getClass ( )!= other. getClass ( ) ) { return false ; } if ( getClass ( )!= other. getClass ( ) ) { return false ; } if ( getClass ( )!= other. getClass ( ) ) { return false ; } if ( getClass ( )!= other. getClass ( ) ) { return false ; } return super. equals ( other ) ; }",
        "public boolean equals ( Object other ) { if ( other == null ) { return false ; } if ( getClass ( )!= other. getClass ( ) ) { return false ; } return getClass ( ). equals ( other. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ) == obj. getClass ( ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if (! getClass ( ). equals ( obj. getClass ( ) ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if (! getClass ( ). equals ( obj. getClass ( ) ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if (! getClass ( ). equals ( obj. getClass ( ) ) ) { return false ; } return super. equals ( obj ) ; }"
      ],
      "mid_translation": [
        "Returns true if the given object is the same as this object.",
        "Returns true if the other object is the same as this object.",
        "Return true if the given object is the same as this object.",
        "Returns true if the specified object is the same as this object.",
        "Returns true if this complex number is equal to the given object."
      ],
      "output": [
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return obj. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object other ) { if ( other == null ) { return false ; } if ( getClass ( )!= other. getClass ( ) ) { return false ; } if ( getClass ( )!= other. getClass ( ) ) { return false ; } if ( getClass ( )!= other. getClass ( ) ) { return false ; } if ( getClass ( )!= other. getClass ( ) ) { return false ; } return super. equals ( other ) ; }",
        "public boolean equals ( Object other ) { if ( other == null ) { return false ; } if ( getClass ( )!= other. getClass ( ) ) { return false ; } return getClass ( ). equals ( other. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ) == obj. getClass ( ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return true ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return super. equals ( obj ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if (! getClass ( ). equals ( obj. getClass ( ) ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if (! getClass ( ). equals ( obj. getClass ( ) ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == null ) { return false ; } if ( getClass ( )!= obj. getClass ( ) ) { return false ; } return getClass ( ). equals ( obj. getClass ( ) ) ; }",
        "public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if (! getClass ( ). equals ( obj. getClass ( ) ) ) { return false ; } return super. equals ( obj ) ; }"
      ]
    },
    "Math_101_/src/java/org/apache/commons/math/complex/ComplexFormat.java_377-378": {
      "loc": "377-378",
      "input": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n; if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter()) != 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); }",
      "target": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n; if ((startIndex >= source.length()) || (endIndex > source.length()) || source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter()) != 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); }",
      "function range": "320,5-389,5",
      "raw_output": [
        "public static ComplexNumber valueOf ( String number ) { if ( number == null || number. length ( ) == 0 ) { return null ; } return new ComplexNumber ( number ) ; }",
        "public static ComplexNumber valueOf ( String number ) { if ( number == null || number. length ( ) == 0 ) return null ; return new ComplexNumber ( number ) ; }",
        "public static ComplexNumber valueOf ( String str ) { if ( str == null || str. length ( ) == 0 ) return null ; return new ComplexNumber ( str ) ; }",
        "public static ComplexNumber valueOf ( String number ) { if ( number == null ) return null ; try { return new ComplexNumber ( number ) ; } catch ( NumberFormatException e ) { return null ; } }",
        "public static ComplexNumber valueOf ( String str ) { if ( str == null || str. length ( ) == 0 ) { return null ; } return new ComplexNumber ( str ) ; }",
        "public static ComplexNumber valueOf ( String number ) { if ( number == null || number. length ( ) == 0 ) { return null ; } return new ComplexNumber ( number ) ; }",
        "public static ComplexNumber valueOf ( String number ) { if ( number == null || number. length ( ) == 0 ) return null ; return new ComplexNumber ( number ) ; }",
        "public static ComplexNumber valueOf ( String number ) { if ( number == null ) return null ; try { return new ComplexNumber ( number ) ; } catch ( NumberFormatException e ) { return null ; } }",
        "public static ComplexNumber valueOf ( String str ) { if ( str == null || str. length ( ) == 0 ) return null ; return new ComplexNumber ( str ) ; }",
        "public static ComplexNumber valueOf ( String number ) { if ( number == null ) return null ; try { return new ComplexNumber ( number ) ; } catch ( IllegalArgumentException e ) { return null ; } }",
        "private Complex parse Complex ( String s ) { Complex c = new Complex ( ) ; c. setName ( s ) ; c. setValue ( s ) ; return c ; }",
        "public static Complex valueOf ( String s ) { if ( s == null || s. length ( ) == 0 ) return null ; return new Complex ( s ) ; }",
        "public static Complex valueOf ( String s ) { if ( s == null || s. length ( ) == 0 ) { return null ; } return new Complex ( s ) ; }",
        "private Complex parse Complex ( String str ) { Complex c = new Complex ( ) ; c. setID ( str ) ; c. setName ( str ) ; c. setValue ( str ) ; return c ; }",
        "private Complex parse Complex ( String s ) { Complex c = new Complex ( ) ; c. setName ( s ) ; c. setValue ( s. trim ( ) ) ; return c ; }",
        "public static ComplexString parse ( String str ) { ComplexString result = null ; if ( str!= null ) { if ( str. length ( ) > 0 ) { result = new ComplexString ( str ) ; } } return result ; }",
        "public static ComplexString parse ( String str ) { ComplexString result = null ; if ( str!= null ) { result = new ComplexString ( str ) ; } return result ; }",
        "public static Complex parse ( String str ) { Complex c = new Complex ( ) ; c. str = str ; c. start = 0 ; c. end = str. length ( ) ; return c ; }",
        "public static ComplexString parse ( String str ) { if ( str == null ) return null ; return new ComplexString ( str ) ; }",
        "public static ComplexString parse ( String str ) { ComplexString result = null ; if ( str!= null ) { if ( str. length ( ) > 0 ) result = new ComplexString ( str ) ; } return result ; }",
        "public static Complex valueOf ( String str ) { if ( str == null || str. length ( ) == 0 ) return null ; return new Complex ( str ) ; }",
        "public static Complex valueOf ( String str ) { if ( str == null || str. length ( ) == 0 ) { return null ; } return new Complex ( str ) ; }",
        "public static Complex valueOf ( String str ) { if ( str == null || str. length ( ) == 0 ) return null ; if ( str. charAt ( 0 ) =='' ) return new Complex ( str ) ; return new Complex ( str ) ; }",
        "public static Complex valueOf ( String value ) { if ( value == null || value. length ( ) == 0 ) { return null ; } return new Complex ( value ) ; }",
        "public static Complex valueOf ( String value ) { if ( value == null || value. length ( ) == 0 ) return null ; return new Complex ( value ) ; }"
      ],
      "mid_translation": [
        "Parse a complex number from a string.",
        "Parse a complex number from a String.",
        "Parse a Complex from a String.",
        "Parse a complex string.",
        "Parse a complex value from a string."
      ],
      "output": [
        "public ComplexNumber parse ( String number ) { if ( number == null || number. length ( ) == 0 ) { return null ; } return new ComplexNumber ( number ) ; }",
        "public ComplexNumber parse ( String number ) { if ( number == null || number. length ( ) == 0 ) return null ; return new ComplexNumber ( number ) ; }",
        "public ComplexNumber parse ( String str ) { if ( str == null || str. length ( ) == 0 ) return null ; return new ComplexNumber ( str ) ; }",
        "public ComplexNumber parse ( String number ) { if ( number == null ) return null ; try { return new ComplexNumber ( number ) ; } catch ( NumberFormatException e ) { return null ; } }",
        "public ComplexNumber parse ( String str ) { if ( str == null || str. length ( ) == 0 ) { return null ; } return new ComplexNumber ( str ) ; }",
        "public ComplexNumber parse ( String number ) { if ( number == null || number. length ( ) == 0 ) { return null ; } return new ComplexNumber ( number ) ; }",
        "public ComplexNumber parse ( String number ) { if ( number == null || number. length ( ) == 0 ) return null ; return new ComplexNumber ( number ) ; }",
        "public ComplexNumber parse ( String number ) { if ( number == null ) return null ; try { return new ComplexNumber ( number ) ; } catch ( NumberFormatException e ) { return null ; } }",
        "public ComplexNumber parse ( String str ) { if ( str == null || str. length ( ) == 0 ) return null ; return new ComplexNumber ( str ) ; }",
        "public ComplexNumber parse ( String number ) { if ( number == null ) return null ; try { return new ComplexNumber ( number ) ; } catch ( IllegalArgumentException e ) { return null ; } }",
        "",
        "public Complex parse ( String s ) { if ( s == null || s. length ( ) == 0 ) return null ; return new Complex ( s ) ; }",
        "public Complex parse ( String s ) { if ( s == null || s. length ( ) == 0 ) { return null ; } return new Complex ( s ) ; }",
        "",
        "",
        "public ComplexString parse ( String str ) { ComplexString result = null ; if ( str!= null ) { if ( str. length ( ) > 0 ) { result = new ComplexString ( str ) ; } } return result ; }",
        "public ComplexString parse ( String str ) { ComplexString result = null ; if ( str!= null ) { result = new ComplexString ( str ) ; } return result ; }",
        "public Complex parse ( String str ) { Complex c = new Complex ( ) ; c. str = str ; c. start = 0 ; c. end = str. length ( ) ; return c ; }",
        "public ComplexString parse ( String str ) { if ( str == null ) return null ; return new ComplexString ( str ) ; }",
        "public ComplexString parse ( String str ) { ComplexString result = null ; if ( str!= null ) { if ( str. length ( ) > 0 ) result = new ComplexString ( str ) ; } return result ; }",
        "public Complex parse ( String str ) { if ( str == null || str. length ( ) == 0 ) return null ; return new Complex ( str ) ; }",
        "public Complex parse ( String str ) { if ( str == null || str. length ( ) == 0 ) { return null ; } return new Complex ( str ) ; }",
        "public Complex parse ( String str ) { if ( str == null || str. length ( ) == 0 ) return null ; if ( str. charAt ( 0 ) =='' ) return new Complex ( str ) ; return new Complex ( str ) ; }",
        "public Complex parse ( String value ) { if ( value == null || value. length ( ) == 0 ) { return null ; } return new Complex ( value ) ; }",
        "public Complex parse ( String value ) { if ( value == null || value. length ( ) == 0 ) return null ; return new Complex ( value ) ; }"
      ]
    },
    "Math_105_/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java_264-265": {
      "loc": "264-265",
      "input": "public double getSumSquaredErrors() { return sumYY - sumXY * sumXY / sumXX; }",
      "target": "public double getSumSquaredErrors() { return Math.max(0d, sumYY - sumXY * sumXY / sumXX); }",
      "function range": "263,5-265,5",
      "raw_output": [
        "public static double [ ] errorsSquared ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. sqrt ( x [ i ] ) ; } return ret ; }",
        "public static double [ ] errorsSquared ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = x [ i ] * x [ i ] ; } return ret ; }",
        "public static double [ ] errorsSquared ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = Math. sqrt ( x [ i ] ) ; } return ret ; }",
        "public static double [ ] errorsSquared ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = Math. sqrt ( x [ i ] ) ; } return y ; }",
        "public static double [ ] errorsSquared ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = x [ i ] * y [ i ] ; } return y ; }",
        "public doubleErrors ( ) { double sum = 0 ; for ( int i = 0 ; i < errors. length ; i ++ ) { sum += Math. pow ( errors [ i ], 2 ) ; } return sum ; }",
        "public double getSquaredErrors ( ) { double sum = 0 ; for ( int i = 0 ; i < errors. length ; i ++ ) { sum += Math. pow ( errors [ i ], 2 ) ; } return sum ; }",
        "public double getSquaredError ( ) { double sum = 0 ; for ( int i = 0 ; i < errors. length ; i ++ ) { sum += Math. pow ( errors [ i ], 2 ) ; } return sum ; }",
        "public double getSquaredError ( ) { double sum = 0 ; for ( int i = 0 ; i < errors. length ; i ++ ) { sum += errors [ i ] * errors [ i ] ; } return sum ; }",
        "public doubleErrors ( ) { double sum = 0 ; for ( int i = 0 ; i < errors. length ; i ++ ) { sum += errors [ i ] ; } return sum ; }",
        "public int getNumOfErrors ( ) { int numErrors = 0 ; for ( int i = 0 ; i < this. errors. length ; i ++ ) { numErrors += this. errors [ i ]. getNumOfErrors ( ) ; } return numErrors ; }",
        "public int getNumOfErrors ( ) { int totalErrors = 0 ; for ( int i = 0 ; i < this. errors. length ; i ++ ) { totalErrors += this. errors [ i ]. getNumOfErrors ( ) ; } return totalErrors ; }",
        "public int getNumOfErrors ( ) { int numErrors = 0 ; for ( int i = 0 ; i < this. errors. length ; i ++ ) { numErrors += this. errors [ i ] ; } return numErrors ; }",
        "public int getNumOfErrors ( ) { int sum = 0 ; for ( int i = 0 ; i < this. errors. length ; i ++ ) { sum += this. errors [ i ]. getNumOfErrors ( ) ; } return sum ; }",
        "public int getNumOfErrors ( ) { int numErrors = 0 ; for ( int i = 0 ; i < this. numErrors ; i ++ ) { numErrors += this. errors [ i ]. getNumOfErrors ( ) ; } return numErrors ; }",
        "public static double squaredError ( double x, double y ) { return Math. sqrt ( x * x + y * y ) / Math. sqrt ( x * x + y * y ) ; }",
        "public static double squaredError ( double x, double y ) { return Math. sqrt ( x * x + y * y ) * Math. sqrt ( x * x + y * y ) ; }",
        "public static double sqError ( double x, double y ) { return Math. sqrt ( x * x + y * y ) / Math. sqrt ( x * x + y * y ) ; }",
        "public static double sqError ( double x, double y ) { return Math. sqrt ( x * x + y * y ) * Math. sqrt ( x * x + y * y ) ; }",
        "public static double squaredError ( double x, double y ) { return Math. sqrt ( x * x + y * y ) ; }",
        "public static double [ ] errorsSquared ( double [ ] [ ] matrix ) { double [ ] x = new double [ matrix. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = matrix [ i ] [ i ] ; } return x ; }",
        "public static double [ ] errorsSquared ( double [ ] [ ] matrix ) { double [ ] x = new double [ matrix. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = matrix [ i ] [ 0 ] ; } return x ; }",
        "public static double [ ] errorsSquared ( double [ ] [ ] matrix ) { double [ ] x = new double [ matrix. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] += matrix [ i ] [ i ] ; } return x ; }",
        "public double [ ] errors ( ) { double [ ] x = new double [ n ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = Math. sqrt ( x [ i ] ) ; } return x ; }",
        "public static double [ ] errorsSquared ( double [ ] [ ] matrix ) { double [ ] x = new double [ matrix. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = matrix [ i ] ; } return x ; }"
      ],
      "mid_translation": [
        "Gets the squared errors.",
        "Gets the squared errors as a double.",
        "Gets thequared errors.",
        "Gets the squared error value.",
        "Gets the squared errors from the matrix."
      ],
      "output": [
        "public double [ ] getSumSquaredErrors ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = Math. sqrt ( x [ i ] ) ; } return ret ; }",
        "public double [ ] getSumSquaredErrors ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = x [ i ] * x [ i ] ; } return ret ; }",
        "public double [ ] getSumSquaredErrors ( double [ ] x ) { double [ ] ret = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { ret [ i ] = Math. sqrt ( x [ i ] ) ; } return ret ; }",
        "public double [ ] getSumSquaredErrors ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { y [ i ] = Math. sqrt ( x [ i ] ) ; } return y ; }",
        "public double [ ] getSumSquaredErrors ( double [ ] x ) { double [ ] y = new double [ x. length ] ; for ( int i = 0 ; i < y. length ; i ++ ) { y [ i ] = x [ i ] * y [ i ] ; } return y ; }",
        "",
        "public double getSumSquaredErrors ( ) { double sum = 0 ; for ( int i = 0 ; i < errors. length ; i ++ ) { sum += Math. pow ( errors [ i ], 2 ) ; } return sum ; }",
        "public double getSumSquaredErrors ( ) { double sum = 0 ; for ( int i = 0 ; i < errors. length ; i ++ ) { sum += Math. pow ( errors [ i ], 2 ) ; } return sum ; }",
        "public double getSumSquaredErrors ( ) { double sum = 0 ; for ( int i = 0 ; i < errors. length ; i ++ ) { sum += errors [ i ] * errors [ i ] ; } return sum ; }",
        "",
        "public int getSumSquaredErrors ( ) { int numErrors = 0 ; for ( int i = 0 ; i < this. errors. length ; i ++ ) { numErrors += this. errors [ i ]. getNumOfErrors ( ) ; } return numErrors ; }",
        "public int getSumSquaredErrors ( ) { int totalErrors = 0 ; for ( int i = 0 ; i < this. errors. length ; i ++ ) { totalErrors += this. errors [ i ]. getNumOfErrors ( ) ; } return totalErrors ; }",
        "public int getSumSquaredErrors ( ) { int numErrors = 0 ; for ( int i = 0 ; i < this. errors. length ; i ++ ) { numErrors += this. errors [ i ] ; } return numErrors ; }",
        "public int getSumSquaredErrors ( ) { int sum = 0 ; for ( int i = 0 ; i < this. errors. length ; i ++ ) { sum += this. errors [ i ]. getNumOfErrors ( ) ; } return sum ; }",
        "public int getSumSquaredErrors ( ) { int numErrors = 0 ; for ( int i = 0 ; i < this. numErrors ; i ++ ) { numErrors += this. errors [ i ]. getNumOfErrors ( ) ; } return numErrors ; }",
        "public double getSumSquaredErrors ( double x, double y ) { return Math. sqrt ( x * x + y * y ) / Math. sqrt ( x * x + y * y ) ; }",
        "public double getSumSquaredErrors ( double x, double y ) { return Math. sqrt ( x * x + y * y ) * Math. sqrt ( x * x + y * y ) ; }",
        "public double getSumSquaredErrors ( double x, double y ) { return Math. sqrt ( x * x + y * y ) / Math. sqrt ( x * x + y * y ) ; }",
        "public double getSumSquaredErrors ( double x, double y ) { return Math. sqrt ( x * x + y * y ) * Math. sqrt ( x * x + y * y ) ; }",
        "public double getSumSquaredErrors ( double x, double y ) { return Math. sqrt ( x * x + y * y ) ; }",
        "public double [ ] getSumSquaredErrors ( double [ ] [ ] matrix ) { double [ ] x = new double [ matrix. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = matrix [ i ] [ i ] ; } return x ; }",
        "public double [ ] getSumSquaredErrors ( double [ ] [ ] matrix ) { double [ ] x = new double [ matrix. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = matrix [ i ] [ 0 ] ; } return x ; }",
        "public double [ ] getSumSquaredErrors ( double [ ] [ ] matrix ) { double [ ] x = new double [ matrix. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] += matrix [ i ] [ i ] ; } return x ; }",
        "public double [ ] getSumSquaredErrors ( ) { double [ ] x = new double [ n ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = Math. sqrt ( x [ i ] ) ; } return x ; }",
        "public double [ ] getSumSquaredErrors ( double [ ] [ ] matrix ) { double [ ] x = new double [ matrix. length ] ; for ( int i = 0 ; i < x. length ; i ++ ) { x [ i ] = matrix [ i ] ; } return x ; }"
      ]
    },
    "Mockito_1_/src/org/mockito/internal/invocation/InvocationMatcher.java_123-124": {
      "loc": "123-124",
      "input": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1; throw new UnsupportedOperationException(); } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } }",
      "target": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1; for (int position = 0; position < indexOfVararg; position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } for (int position = indexOfVararg; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]); } } } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } }",
      "function range": "120,5-150,5",
      "raw_output": [
        "public static List < String > captureArguments ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public static List < String > captureArguments ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public static List < String > captureArguments ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public static List < String > captureArguments ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public static List < String > captureArguments ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public List < String > getArguments ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( args. get ( i ) ) ; } return args ; }",
        "public List < String > getArguments ( ) { List < String > args = new ArrayList <> ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( args. get ( i ) ) ; } return args ; }",
        "public List < String > getArguments ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args. add ( arguments [ i ] ) ; } return args ; }",
        "public List < String > getArguments ( ) { List < String > args = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args. add ( arguments [ i ] ) ; } return args ; }",
        "public List < String > getArguments ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( ( String ) args. get ( i ) ) ; } return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }",
        "public Object [ ] getArguments ( ) { if ( arguments == null ) { return null ; } return arguments. toArray ( new Object [ arguments. size ( ) ] ) ; }",
        "public Object [ ] getArguments ( ) { if ( arguments == null ) { return new Object [ 0 ] ; } return arguments. toArray ( new Object [ arguments. size ( ) ] ) ; }",
        "public Object [ ] getArguments ( ) { if ( arguments == null ) { arguments = new Object [ 0 ] ; } return arguments. toArray ( new Object [ arguments. length ] ) ; }",
        "public static Map < String, Object > captureArguments ( Invocation invocation ) { Map < String, Object > args = new HashMap < String, Object > ( ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; return args ; }",
        "public static Map < String, Object > captureArguments ( Invocation invocation ) { Map < String, Object > args = new HashMap < String, Object > ( ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; return args ; }",
        "public static Map < String, Object > captureArguments ( Invocation invocation ) { Map < String, Object > args = new HashMap < String, Object > ( ) ; args. put ( \"host\", invocation. getHost ( ) ) ; args. put ( \"port\", invocation. getPort ( ) ) ; if ( invocation. getMethod ( )!= null ) { args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; } if ( invocation. getMethod ( )!= null ) { args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; } return args ; }",
        "public static Map < String, Object > captureArguments ( Invocation invocation ) { Map < String, Object > args = new HashMap < String, Object > ( ) ; args. put ( \"host\", invocation. getHost ( ) ) ; args. put ( \"port\", invocation. getPort ( ) ) ; args. put ( \"class\", invocation. getClass ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"args\", invocation. getArguments ( ) ) ; return args ; }",
        "public static Map < String, Object > captureArguments ( Invocation invocation ) { Map < String, Object > args = new HashMap < String, Object > ( ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }",
        "public Object [ ] getArguments ( ) { if ( arguments == null ) { return null ; } return arguments. toArray ( new Object [ arguments. size ( ) ] ) ; }",
        "public Object [ ] getArguments ( ) { if ( arguments == null ) { return new Object [ 0 ] ; } return arguments. toArray ( new Object [ arguments. size ( ) ] ) ; }",
        "public Object [ ] getArguments ( ) { if ( arguments == null ) { arguments = new Object [ 0 ] ; } return arguments. toArray ( new Object [ arguments. length ] ) ; }"
      ],
      "mid_translation": [
        "CapturesArguments from the invocation.",
        "CapturesArguments in the invocation.",
        "CapturesArguments in the method invocation.",
        "CapturesArguments from the given invocation.",
        "CapturesArguments from the method invocation."
      ],
      "output": [
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( args. get ( i ) ) ; } return args ; }",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( args. get ( i ) ) ; } return args ; }",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args. add ( arguments [ i ] ) ; } return args ; }",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args. add ( arguments [ i ] ) ; } return args ; }",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( ( String ) args. get ( i ) ) ; } return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { if ( arguments == null ) { return null ; } return arguments. toArray ( new Object [ arguments. size ( ) ] ) ; }",
        "public Object [ ] captureArgumentsFrom ( ) { if ( arguments == null ) { return new Object [ 0 ] ; } return arguments. toArray ( new Object [ arguments. size ( ) ] ) ; }",
        "public Object [ ] captureArgumentsFrom ( ) { if ( arguments == null ) { arguments = new Object [ 0 ] ; } return arguments. toArray ( new Object [ arguments. length ] ) ; }",
        "public Map < String, Object > captureArgumentsFrom ( Invocation invocation ) { Map < String, Object > args = new HashMap < String, Object > ( ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; return args ; }",
        "public Map < String, Object > captureArgumentsFrom ( Invocation invocation ) { Map < String, Object > args = new HashMap < String, Object > ( ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; return args ; }",
        "public Map < String, Object > captureArgumentsFrom ( Invocation invocation ) { Map < String, Object > args = new HashMap < String, Object > ( ) ; args. put ( \"host\", invocation. getHost ( ) ) ; args. put ( \"port\", invocation. getPort ( ) ) ; if ( invocation. getMethod ( )!= null ) { args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; } if ( invocation. getMethod ( )!= null ) { args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; } return args ; }",
        "public Map < String, Object > captureArgumentsFrom ( Invocation invocation ) { Map < String, Object > args = new HashMap < String, Object > ( ) ; args. put ( \"host\", invocation. getHost ( ) ) ; args. put ( \"port\", invocation. getPort ( ) ) ; args. put ( \"class\", invocation. getClass ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"args\", invocation. getArguments ( ) ) ; return args ; }",
        "public Map < String, Object > captureArgumentsFrom ( Invocation invocation ) { Map < String, Object > args = new HashMap < String, Object > ( ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; args. put ( \"method\", invocation. getMethod ( ). getName ( ) ) ; return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { if ( arguments == null ) { return null ; } return arguments. toArray ( new Object [ arguments. size ( ) ] ) ; }",
        "public Object [ ] captureArgumentsFrom ( ) { if ( arguments == null ) { return new Object [ 0 ] ; } return arguments. toArray ( new Object [ arguments. size ( ) ] ) ; }",
        "public Object [ ] captureArgumentsFrom ( ) { if ( arguments == null ) { arguments = new Object [ 0 ] ; } return arguments. toArray ( new Object [ arguments. length ] ) ; }"
      ]
    },
    "Mockito_5_/src/org/mockito/internal/verification/VerificationOverTimeImpl.java_91-92": {
      "loc": "91-92",
      "input": "public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) { error = handleVerifyException(e); } } if (error != null) { throw error; } }",
      "target": "public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); } catch (AssertionError e) { error = handleVerifyException(e); } } if (error != null) { throw error; } }",
      "function range": "75,5-99,5",
      "raw_output": [
        "public boolean verify ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return false ; } for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= data [ i ] ) { return false ; } } return true ; }",
        "public boolean verify ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return false ; } for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { return false ; } } return true ; }",
        "public boolean verify ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return false ; } for ( int i = 0 ; i < data. length ; i ++ ) { verify ( data [ i ] ) ; } return true ; }",
        "public static void verify ( byte [ ] data ) { if ( data == null ) { throw new IllegalArgumentException ( \"data must not be null\" ) ; } for ( int i = 0 ; i < data. length ; i ++ ) { verify ( data [ i ] ) ; } }",
        "public boolean verify ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return false ; } for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { return false ; } } return verify ( data ) ; }",
        "public boolean verify ( verificationData ) { if ( delegate == null ) { return false ; } return delegate. verify ( verificationData ) ; }",
        "public boolean verify ( verificationData ) { if ( delegate!= null ) { return delegate. verify ( verificationData ) ; } return false ; }",
        "public boolean verify ( verificationData ) { if ( delegate == null ) { throw new IllegalStateException ( \"Delegate cannot be null\" ) ; } return delegate. verify ( verificationData ) ; }",
        "public boolean verify ( verificationData ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate cannot be null\" ) ; } return delegate. verify ( verificationData ) ; }",
        "public boolean verify ( verificationData ) { if ( delegate!= null ) { return delegate. verify ( verificationData ) ; } else { return false ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public void verify ( ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if ( method == null ) { throw new IllegalArgumentException ( \"Method must not be null\" ) ; } if ( instance == null ) { throw new IllegalArgumentException ( \"Instance must not be null\" ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public void verify ( ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if ( method == null ) { throw new IllegalArgumentException ( \"Method must not be null\" ) ; } if ( method. getParameterTypes ( ) == null ) { throw new IllegalArgumentException ( \"Method parameter types must not be null\" ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public void verify ( ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if ( method == null ) { throw new IllegalArgumentException ( \"Method must not be null\" ) ; } if ( method. getParameterTypes ( ) == null ) { throw new IllegalArgumentException ( \"Method must not be null\" ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public void verify ( ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if ( method == null ) { throw new IllegalArgumentException ( \"Method must not be null\" ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public void verify ( ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if ( instance == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } }",
        "public boolean verify ( byte [ ] data ) { if ( delegate!= null ) { return delegate. verify ( data ) ; } else { return false ; } }",
        "public boolean verify ( byte [ ] data ) { if ( delegate == null ) { return false ; } return delegate. verify ( data ) ; }",
        "public boolean verify ( byte [ ] data ) { if ( delegate!= null ) { return delegate. verify ( data ) ; } return false ; }",
        "public boolean verify ( Object data ) { if ( delegate!= null ) { return delegate. verify ( data ) ; } else { return false ; } }",
        "protected void verify ( byte [ ] data ) { if ( delegate!= null ) { delegate. verify ( data ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > void verify ( T delegate ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if (! delegate. getClass ( ). isAssignableFrom ( delegate. getClass ( ) ) ) { throw new IllegalArgumentException ( \"Delegate must be of the same class\" ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > void verify ( T delegate ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if (! delegate. getClass ( ). equals ( delegate. getClass ( ) ) ) { throw new IllegalArgumentException ( \"Delegate must be of the same class\" ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > void verify ( T delegate ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if (! delegate. getClass ( ). isAssignableFrom ( delegate. getClass ( ) ) ) { throw new IllegalArgumentException ( \"Delegate must implement Class\" ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > void verify ( T delegate ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate cannot be null\" ) ; } verify ( delegate. getClass ( ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > void verify ( T delegate ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if (! verify ( delegate ) ) { throw new IllegalArgumentException ( \"Delegate must be valid\" ) ; } }"
      ],
      "mid_translation": [
        "Verifies the given verification data.",
        "Verifies the given verification data with the delegate.",
        "Performs verification on the delegate object.",
        "Verifies the given data with the delegate object.",
        "Performs verification using delegate object."
      ],
      "output": [
        "public boolean verify ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return false ; } for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= data [ i ] ) { return false ; } } return true ; }",
        "public boolean verify ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return false ; } for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { return false ; } } return true ; }",
        "public boolean verify ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return false ; } for ( int i = 0 ; i < data. length ; i ++ ) { verify ( data [ i ] ) ; } return true ; }",
        "public void verify ( byte [ ] data ) { if ( data == null ) { throw new IllegalArgumentException ( \"data must not be null\" ) ; } for ( int i = 0 ; i < data. length ; i ++ ) { verify ( data [ i ] ) ; } }",
        "public boolean verify ( byte [ ] data ) { if ( data == null || data. length == 0 ) { return false ; } for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]!= 0 ) { return false ; } } return verify ( data ) ; }",
        "public boolean verify ( verificationData ) { if ( delegate == null ) { return false ; } return delegate. verify ( verificationData ) ; }",
        "public boolean verify ( verificationData ) { if ( delegate!= null ) { return delegate. verify ( verificationData ) ; } return false ; }",
        "public boolean verify ( verificationData ) { if ( delegate == null ) { throw new IllegalStateException ( \"Delegate cannot be null\" ) ; } return delegate. verify ( verificationData ) ; }",
        "public boolean verify ( verificationData ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate cannot be null\" ) ; } return delegate. verify ( verificationData ) ; }",
        "public boolean verify ( verificationData ) { if ( delegate!= null ) { return delegate. verify ( verificationData ) ; } else { return false ; } }",
        "public void verify ( ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if ( method == null ) { throw new IllegalArgumentException ( \"Method must not be null\" ) ; } if ( instance == null ) { throw new IllegalArgumentException ( \"Instance must not be null\" ) ; } }",
        "public void verify ( ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if ( method == null ) { throw new IllegalArgumentException ( \"Method must not be null\" ) ; } if ( method. getParameterTypes ( ) == null ) { throw new IllegalArgumentException ( \"Method parameter types must not be null\" ) ; } }",
        "public void verify ( ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if ( method == null ) { throw new IllegalArgumentException ( \"Method must not be null\" ) ; } if ( method. getParameterTypes ( ) == null ) { throw new IllegalArgumentException ( \"Method must not be null\" ) ; } }",
        "public void verify ( ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if ( method == null ) { throw new IllegalArgumentException ( \"Method must not be null\" ) ; } }",
        "public void verify ( ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if ( instance == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } }",
        "public boolean verify ( byte [ ] data ) { if ( delegate!= null ) { return delegate. verify ( data ) ; } else { return false ; } }",
        "public boolean verify ( byte [ ] data ) { if ( delegate == null ) { return false ; } return delegate. verify ( data ) ; }",
        "public boolean verify ( byte [ ] data ) { if ( delegate!= null ) { return delegate. verify ( data ) ; } return false ; }",
        "public boolean verify ( Object data ) { if ( delegate!= null ) { return delegate. verify ( data ) ; } else { return false ; } }",
        "public void verify ( byte [ ] data ) { if ( delegate!= null ) { delegate. verify ( data ) ; } }",
        "public < T > void verify ( T delegate ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if (! delegate. getClass ( ). isAssignableFrom ( delegate. getClass ( ) ) ) { throw new IllegalArgumentException ( \"Delegate must be of the same class\" ) ; } }",
        "public < T > void verify ( T delegate ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if (! delegate. getClass ( ). equals ( delegate. getClass ( ) ) ) { throw new IllegalArgumentException ( \"Delegate must be of the same class\" ) ; } }",
        "public < T > void verify ( T delegate ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if (! delegate. getClass ( ). isAssignableFrom ( delegate. getClass ( ) ) ) { throw new IllegalArgumentException ( \"Delegate must implement Class\" ) ; } }",
        "public < T > void verify ( T delegate ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate cannot be null\" ) ; } verify ( delegate. getClass ( ) ) ; }",
        "public < T > void verify ( T delegate ) { if ( delegate == null ) { throw new IllegalArgumentException ( \"Delegate must not be null\" ) ; } if (! verify ( delegate ) ) { throw new IllegalArgumentException ( \"Delegate must be valid\" ) ; } }"
      ]
    },
    "Mockito_7_/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java_379-380": {
      "loc": "379-380",
      "input": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); } registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable)); }",
      "target": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); } registerTypeParametersOn(new TypeVariable[] { typeVariable }); registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable)); }",
      "function range": "375,9-380,9",
      "raw_output": [
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < buf. length ) { int c = buf [ i ++ ] ; switch ( c ) { case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; default : break ; } i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < buf. length ) { int c = buf [ i ++ ] ; switch ( c ) { case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; default : break ; } } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < buf. length ) { int c = buf [ i ++ ] ; switch ( c ) { case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; default : break ; } i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < buf. length ) { int c = buf [ i ++ ] ; switch ( c ) { case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; default : break ; } } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList < TypeVariable > ( ) ; while ( next ( ) ) { typeVariables. add ( readTypeVariable ( ) ) ; next ( ) ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < typeVariables. size ( ) ) { TypeVariable typeVariable = typeVariables. get ( i ) ; typeVariables. add ( typeVariable ) ; i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < typeVariables. size ( ) ) { typeVariables. add ( typeVariables. get ( i ). getTypeVariable ( ) ) ; i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList < TypeVariable > ( ) ; int i = 0 ; while ( i < typeVariables. size ( ) ) { typeVariables. add ( typeVariables. get ( i ). getTypeVariable ( ) ) ; i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < typeVariables. size ( ) ) { typeVariables. add ( typeVariables. get ( i ) ) ; i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < typeVariables. size ( ) ) { TypeVariable typeVariable = typeVariables. get ( i ) ; typeVariables. add ( typeVariable ) ; ++ i ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ] ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ] ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ] ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }"
      ],
      "mid_translation": [
        "Reads type variables.",
        "Read type variables.",
        "Reads the type variables from the type variable.",
        "Reads the type variables for the type variables.",
        "Reads type variables from the type variable."
      ],
      "output": [
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < buf. length ) { int c = buf [ i ++ ] ; switch ( c ) { case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; default : break ; } i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < buf. length ) { int c = buf [ i ++ ] ; switch ( c ) { case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; default : break ; } } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < buf. length ) { int c = buf [ i ++ ] ; switch ( c ) { case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf, i ) ) ; break ; default : break ; } i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < buf. length ) { int c = buf [ i ++ ] ; switch ( c ) { case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; case'' : typeVariables. add ( new TypeVariable ( buf [ i ++ ] ) ) ; break ; default : break ; } } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList < TypeVariable > ( ) ; while ( next ( ) ) { typeVariables. add ( readTypeVariable ( ) ) ; next ( ) ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < typeVariables. size ( ) ) { TypeVariable typeVariable = typeVariables. get ( i ) ; typeVariables. add ( typeVariable ) ; i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < typeVariables. size ( ) ) { typeVariables. add ( typeVariables. get ( i ). getTypeVariable ( ) ) ; i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList < TypeVariable > ( ) ; int i = 0 ; while ( i < typeVariables. size ( ) ) { typeVariables. add ( typeVariables. get ( i ). getTypeVariable ( ) ) ; i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < typeVariables. size ( ) ) { typeVariables. add ( typeVariables. get ( i ) ) ; i ++ ; } return typeVariables ; }",
        "private List < TypeVariable > readTypeVariables ( ) throws IOException { List < TypeVariable > typeVariables = new ArrayList <> ( ) ; int i = 0 ; while ( i < typeVariables. size ( ) ) { TypeVariable typeVariable = typeVariables. get ( i ) ; typeVariables. add ( typeVariable ) ; ++ i ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ] ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ] ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < this. typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ] ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getType ( ) ; } return typeVariables ; }",
        "private TypeVariable [ ] readTypeVariables ( ) { TypeVariable [ ] typeVariables = new TypeVariable [ this. typeVariables. length ] ; for ( int i = 0 ; i < typeVariables. length ; i ++ ) { typeVariables [ i ] = this. typeVariables [ i ]. getTypeVariable ( ) ; } return typeVariables ; }"
      ]
    },
    "Mockito_8_/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java_79-80": {
      "loc": "79-80",
      "input": "protected void registerTypeVariablesOn(Type classType) { if (!(classType instanceof ParameterizedType)) { return; } ParameterizedType parameterizedType = (ParameterizedType) classType; TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters(); Type[] actualTypeArguments = parameterizedType.getActualTypeArguments(); for (int i = 0; i < actualTypeArguments.length; i++) { TypeVariable typeParameter = typeParameters[i]; Type actualTypeArgument = actualTypeArguments[i]; if (actualTypeArgument instanceof WildcardType) { contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument)); } else { contextualActualTypeParameters.put(typeParameter, actualTypeArgument); } } }",
      "target": "protected void registerTypeVariablesOn(Type classType) { if (!(classType instanceof ParameterizedType)) { return; } ParameterizedType parameterizedType = (ParameterizedType) classType; TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters(); Type[] actualTypeArguments = parameterizedType.getActualTypeArguments(); for (int i = 0; i < actualTypeArguments.length; i++) { TypeVariable typeParameter = typeParameters[i]; Type actualTypeArgument = actualTypeArguments[i]; if (actualTypeArgument instanceof WildcardType) { contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument)); } else if (typeParameter != actualTypeArgument) { contextualActualTypeParameters.put(typeParameter, actualTypeArgument); } } }",
      "function range": "66,5-84,5",
      "raw_output": [
        "private void registerActualTypeVariables ( Class <? > clazz ) { for ( TypeVariable <? > variable : clazz. getTypeParameters ( ) ) { registerVariable ( variable ) ; } for ( TypeVariable <? > variable : clazz. getTypeParameters ( ) ) { registerVariable ( variable ) ; } }",
        "private void registerActualTypeVariables ( Class <? > clazz ) { for ( TypeVariable <? > var : clazz. getTypeParameters ( ) ) { registerVariable ( var ) ; } for ( TypeVariable <? > var : clazz. getTypeParameters ( ) ) { registerVariable ( var ) ; } }",
        "private void registerActualTypeVariables ( Class <? > clazz ) { for ( TypeVariable <? > var : clazz. getTypeParameters ( ) ) { registerVariable ( var ) ; } for ( TypeVariable <? > var : clazz. getGenericSuperclass ( ) ) { registerVariable ( var ) ; } }",
        "public void registerActualTypeVariables ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } actualTypeVariables. put ( clazz. getName ( ), clazz ) ; }",
        "private void registerActualTypeVariables ( Class <? > clazz ) { for ( TypeVariable <? > variable : clazz. getTypeParameters ( ) ) { registerVariable ( variable ) ; } for ( TypeVariable <? > variable : clazz. getGenericSuperclass ( ) ) { registerVariable ( variable ) ; } }",
        "private void registerActualTypeVariables ( Class <? > clazz ) { for ( TypeVariable <? > variable : clazz. getTypeParameters ( ) ) { registerVariable ( variable. getName ( ), variable. getType ( ) ) ; } }",
        "private void registerActualTypeVariables ( Class <? > type ) { for ( TypeVariable <? > variable : type. getTypeParameters ( ) ) { registerVariable ( variable. getName ( ), variable. getType ( ) ) ; } }",
        "private void registerActualTypeVariables ( Class <? > clazz ) { Class <? > [ ] actualTypeVariables = clazz. getGenericInterfaces ( ) ; for ( Class <? > type : actualTypeVariables ) { registerVariable ( type ) ; } }",
        "private void registerActualTypeVariables ( Class <? > clazz ) { for ( TypeVariable <? > variable : clazz. getGenericSuperclass ( ). getTypeParameters ( ) ) { registerVariable ( variable ) ; } }",
        "private void registerActualTypeVariables ( Class <? > clazz ) { Class <? > [ ] actualTypeVariables = clazz. getGenericInterfaces ( ) ; for ( Class <? > type : actualTypeVariables ) { register ( type ) ; } }",
        "public void registerActualTypeVariables ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( actualTypeVariables == null ) { actualTypeVariables = new HashMap <> ( ) ; } actualTypeVariables. put ( clazz, actualTypeVariables ) ; }",
        "public void registerActualTypeVariables ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( actualTypeVariables == null ) { actualTypeVariables = new LinkedHashMap <> ( ) ; } actualTypeVariables. put ( clazz, actualTypeVariables ) ; }",
        "public void registerActualTypeVariables ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( actualTypeVariables == null ) { actualTypeVariables = new ArrayList <> ( ) ; } actualTypeVariables. add ( clazz ) ; }",
        "public void registerActualTypeVariables ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( actualTypeVariables == null ) { actualTypeVariables = new HashSet <> ( ) ; } actualTypeVariables. add ( clazz ) ; }",
        "public void registerActualTypeVariables ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } actualTypeVariables. put ( clazz. getName ( ), clazz ) ; }",
        "public static void registerActualTypeVariables ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } }",
        "public static void registerActualTypeVariables ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } }",
        "public static void registerActualTypeVariables ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } }",
        "public void registerActualTypeVariables ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } actualTypeVariables. put ( clazz. getName ( ), clazz ) ; }",
        "public void registerActualTypeVariables ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } actualTypeVariables. put ( clazz. getName ( ), new TypeVariable <? > ( clazz ) ) ; }",
        "public static void registerActualTypeVariables ( Class <? > clazz ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; TypeVariable <? > [ ] typeVariables = clazz. getGenericInterfaces ( ) ; for ( TypeVariable <? > typeVariable : typeVariables ) { register ( typeVariable ) ; } }",
        "public static void registerActualTypeVariables ( Class <? > clazz ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; Assert. notNull ( clazz. getName ( ), \"Class must not be null\" ) ; TypeVariable <? > [ ] typeVariables = clazz. getTypeParameters ( ) ; for ( TypeVariable <? > typeVariable : typeVariables ) { register ( typeVariable ) ; } }",
        "public static void registerActualTypeVariables ( Class <? > clazz ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; TypeVariable <? > [ ] typeVariables = clazz. getGenericInterfaces ( ) ; for ( TypeVariable <? > typeVariable : typeVariables ) { registerActualTypeVariable ( typeVariable ) ; } }",
        "public static void registerActualTypeVariables ( Class <? > clazz ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; TypeVariable <? > [ ] typeVariables = clazz. getGenericInterfaces ( ) ; for ( TypeVariable <? > typeVariable : typeVariables ) { registerActualTypeVariables ( typeVariable ) ; } }",
        "private void registerActualTypeVariables ( Class <? > clazz ) { Class <? > [ ] actualTypeVariables = clazz. getGenericInterfaces ( ) ; if ( actualTypeVariables!= null ) { for ( Class <? > type : actualTypeVariables ) { registerTypeVariable ( type ) ; } } }"
      ],
      "mid_translation": [
        "Registers the actual type variables on the given class.",
        "Registers the actual type variables on the given class type.",
        "Registers the actual actual type variables on the given class.",
        "Registers the actual type variables for the given class.",
        "Registers the actual type variables needed for the given class."
      ],
      "output": [
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { for ( TypeVariable <? > variable : clazz. getTypeParameters ( ) ) { registerVariable ( variable ) ; } for ( TypeVariable <? > variable : clazz. getTypeParameters ( ) ) { registerVariable ( variable ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { for ( TypeVariable <? > var : clazz. getTypeParameters ( ) ) { registerVariable ( var ) ; } for ( TypeVariable <? > var : clazz. getTypeParameters ( ) ) { registerVariable ( var ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { for ( TypeVariable <? > var : clazz. getTypeParameters ( ) ) { registerVariable ( var ) ; } for ( TypeVariable <? > var : clazz. getGenericSuperclass ( ) ) { registerVariable ( var ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } actualTypeVariables. put ( clazz. getName ( ), clazz ) ; }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { for ( TypeVariable <? > variable : clazz. getTypeParameters ( ) ) { registerVariable ( variable ) ; } for ( TypeVariable <? > variable : clazz. getGenericSuperclass ( ) ) { registerVariable ( variable ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { for ( TypeVariable <? > variable : clazz. getTypeParameters ( ) ) { registerVariable ( variable. getName ( ), variable. getType ( ) ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > type ) { for ( TypeVariable <? > variable : type. getTypeParameters ( ) ) { registerVariable ( variable. getName ( ), variable. getType ( ) ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { Class <? > [ ] actualTypeVariables = clazz. getGenericInterfaces ( ) ; for ( Class <? > type : actualTypeVariables ) { registerVariable ( type ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { for ( TypeVariable <? > variable : clazz. getGenericSuperclass ( ). getTypeParameters ( ) ) { registerVariable ( variable ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { Class <? > [ ] actualTypeVariables = clazz. getGenericInterfaces ( ) ; for ( Class <? > type : actualTypeVariables ) { register ( type ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( actualTypeVariables == null ) { actualTypeVariables = new HashMap <> ( ) ; } actualTypeVariables. put ( clazz, actualTypeVariables ) ; }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( actualTypeVariables == null ) { actualTypeVariables = new LinkedHashMap <> ( ) ; } actualTypeVariables. put ( clazz, actualTypeVariables ) ; }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( actualTypeVariables == null ) { actualTypeVariables = new ArrayList <> ( ) ; } actualTypeVariables. add ( clazz ) ; }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( actualTypeVariables == null ) { actualTypeVariables = new HashSet <> ( ) ; } actualTypeVariables. add ( clazz ) ; }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } actualTypeVariables. put ( clazz. getName ( ), clazz ) ; }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isArray() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isArray ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isPrimitive ( ) ) { throw new IllegalArgumentException ( \"clazz.isPrimitive() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } if ( clazz. isAnnotation ( ) ) { throw new IllegalArgumentException ( \"clazz.isAnnotation() cannot be null\" ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } actualTypeVariables. put ( clazz. getName ( ), clazz ) ; }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } actualTypeVariables. put ( clazz. getName ( ), new TypeVariable <? > ( clazz ) ) ; }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; TypeVariable <? > [ ] typeVariables = clazz. getGenericInterfaces ( ) ; for ( TypeVariable <? > typeVariable : typeVariables ) { register ( typeVariable ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; Assert. notNull ( clazz. getName ( ), \"Class must not be null\" ) ; TypeVariable <? > [ ] typeVariables = clazz. getTypeParameters ( ) ; for ( TypeVariable <? > typeVariable : typeVariables ) { register ( typeVariable ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; TypeVariable <? > [ ] typeVariables = clazz. getGenericInterfaces ( ) ; for ( TypeVariable <? > typeVariable : typeVariables ) { registerActualTypeVariable ( typeVariable ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { Assert. notNull ( clazz, \"Class must not be null\" ) ; TypeVariable <? > [ ] typeVariables = clazz. getGenericInterfaces ( ) ; for ( TypeVariable <? > typeVariable : typeVariables ) { registerActualTypeVariables ( typeVariable ) ; } }",
        "protected void registerTypeVariablesOn ( Class <? > clazz ) { Class <? > [ ] actualTypeVariables = clazz. getGenericInterfaces ( ) ; if ( actualTypeVariables!= null ) { for ( Class <? > type : actualTypeVariables ) { registerTypeVariable ( type ) ; } } }"
      ]
    },
    "Mockito_22_/src/org/mockito/internal/matchers/Equality.java_13-14": {
      "loc": "13-14",
      "input": "public static boolean areEqual(Object o1, Object o2) { if (o1 == null || o2 == null) { return o1 == null && o2 == null; } else if (isArray(o1)) { return isArray(o2) && areArraysEqual(o1, o2); } else { return o1.equals(o2); } }",
      "target": "public static boolean areEqual(Object o1, Object o2) { if (o1 == o2 ) { return true; }else if (o1 == null || o2 == null) { return o1 == null && o2 == null; } else if (isArray(o1)) { return isArray(o2) && areArraysEqual(o1, o2); } else { return o1.equals(o2); } }",
      "function range": "12,5-20,5",
      "raw_output": [
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } if ( o1. getClass ( )!= o2. getClass ( ) ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null || o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } if ( o1. getClass ( )!= o2. getClass ( ) ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } if ( o1. getClass ( )!= o2. getClass ( ) ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null || o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object obj1, Object obj2 ) { if ( obj1 == obj2 ) { return true ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null && obj2 == null ) { return false ; } return obj1. equals ( obj2 ) ; }",
        "public static boolean areEqual ( Object obj1, Object obj2 ) { if ( obj1 == obj2 ) { return true ; } if ( obj1 == null || obj2 == null ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } return obj1. equals ( obj2 ) ; }",
        "public static boolean areEqual ( Object obj1, Object obj2 ) { if ( obj1 == obj2 ) { return true ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null && obj2 == null ) { return false ; } return obj1. equals ( obj2 ) ; }",
        "public static boolean areEqual ( Object obj1, Object obj2 ) { if ( obj1 == obj2 ) { return true ; } if ( obj1 == null || obj2 == null ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } return true ; }",
        "public static boolean areEqual ( Object obj1, Object obj2 ) { if ( obj1 == obj2 ) { return true ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null ) { return false ; } if ( obj2 == null ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } return obj1. equals ( obj2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } if ( o1. getClass ( )!= o2. getClass ( ) ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null || o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean equal ( Object o1, Object o2 ) { if ( o1 == o2 ) return true ; if ( o1 == null || o2 == null ) return false ; return o1. equals ( o2 ) ; }"
      ],
      "mid_translation": [
        "Returns true if the two specified objects are equal.",
        "Returns true if the two given objects are equal.",
        "Returns true if the given objects are equal.",
        "Returns true if the specified two objects are equal.",
        "Returns true if the given two objects are equal."
      ],
      "output": [
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } if ( o1. getClass ( )!= o2. getClass ( ) ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null || o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } if ( o1. getClass ( )!= o2. getClass ( ) ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } if ( o1. getClass ( )!= o2. getClass ( ) ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null || o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object obj1, Object obj2 ) { if ( obj1 == obj2 ) { return true ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null && obj2 == null ) { return false ; } return obj1. equals ( obj2 ) ; }",
        "public static boolean areEqual ( Object obj1, Object obj2 ) { if ( obj1 == obj2 ) { return true ; } if ( obj1 == null || obj2 == null ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } return obj1. equals ( obj2 ) ; }",
        "public static boolean areEqual ( Object obj1, Object obj2 ) { if ( obj1 == obj2 ) { return true ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null && obj2 == null ) { return false ; } return obj1. equals ( obj2 ) ; }",
        "public static boolean areEqual ( Object obj1, Object obj2 ) { if ( obj1 == obj2 ) { return true ; } if ( obj1 == null || obj2 == null ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } return true ; }",
        "public static boolean areEqual ( Object obj1, Object obj2 ) { if ( obj1 == obj2 ) { return true ; } if ( obj1 == null && obj2 == null ) { return false ; } if ( obj1 == null ) { return false ; } if ( obj2 == null ) { return false ; } if ( obj1. getClass ( )!= obj2. getClass ( ) ) { return false ; } return obj1. equals ( obj2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } if ( o1. getClass ( )!= o2. getClass ( ) ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null || o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } if ( o1 == null || o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == null && o2 == null ) { return true ; } if ( o1 == null && o2 == null ) { return false ; } return o1. equals ( o2 ) ; }",
        "public static boolean areEqual ( Object o1, Object o2 ) { if ( o1 == o2 ) return true ; if ( o1 == null || o2 == null ) return false ; return o1. equals ( o2 ) ; }"
      ]
    },
    "Mockito_24_/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java_76-77": {
      "loc": "76-77",
      "input": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) { return 1; } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
      "target": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) { return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1; } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
      "function range": "63,5-81,5",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public < A > A getAnswer ( final Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < A > A getAnswer ( final Invocation invocation ) { return ( A ) mockAnswerCache. get ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < A > A getAnswer ( Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < A > A getAnswer ( Invocation invocation ) { return ( A ) mockAnswerCache. get ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < A > A getAnswer ( final Invocation invocation ) { return ( A ) invocation. getAnswer ( ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < A > A getAnswer ( Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < A > A getAnswer ( final Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < A > A getAnswer ( Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < A > A getAnswer ( Invocation invocation ) throws Exception { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < A > A getAnswer ( Invocation invocation ) { return ( A ) invocation. getInvocationContext ( ). getAnswer ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T answer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getAnswerObject ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T getAnswerObject ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getAnswer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public Object getAnswerObject ( Invocation invocation ) { if ( invocation == null ) { throw new IllegalArgumentException ( \"invocation cannot be null\" ) ; } return invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public Object getAnswerObject ( Invocation invocation ) { if ( invocation == null ) throw new IllegalArgumentException ( \"invocation cannot be null\" ) ; if ( answerObject == null ) throw new IllegalArgumentException ( \"invocation cannot be null\" ) ; return answerObject ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getAnswer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public Object getAnswer ( Invocation invocation ) { if ( invocation. getMethod ( ). equals ( \"getAnswer\" ) ) { return answer ; } return invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public Object getAnswerObject ( Invocation invocation ) { if ( invocation == null ) throw new IllegalArgumentException ( \"invocation cannot be null\" ) ; if ( answerObject == null ) throw new IllegalArgumentException ( \"invocation object cannot be null\" ) ; return answerObject ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public Object getAnswer ( Invocation invocation ) { if ( invocation. getMethod ( ). equals ( \"getAnswer\" ) ) { return answer ; } else { return invocation. getMethod ( ). invoke ( invocation ) ; } }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getAnswer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T answer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < A > A getAnswer ( Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T getAnswerObject ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T getAnswerObject ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }"
      ],
      "mid_translation": [
        "Returns the mock answer for the given invocation.",
        "Returns the mock answer object for the given invocation.",
        "Returns the answer object of the given invocation.",
        "Returns the answer object for the given invocation.",
        "Returns the answer object for the given mock invocation."
      ],
      "output": [
        "public < A > A answer ( final Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < A > A answer ( final Invocation invocation ) { return ( A ) mockAnswerCache. get ( invocation ) ; }",
        "public < A > A answer ( Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < A > A answer ( Invocation invocation ) { return ( A ) mockAnswerCache. get ( invocation ) ; }",
        "public < A > A answer ( final Invocation invocation ) { return ( A ) invocation. getAnswer ( ) ; }",
        "public < A > A answer ( Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < A > A answer ( final Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < A > A answer ( Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < A > A answer ( Invocation invocation ) throws Exception { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < A > A answer ( Invocation invocation ) { return ( A ) invocation. getInvocationContext ( ). getAnswer ( invocation ) ; }",
        "public < T > T answer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < T > T answer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < T > T answer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < T > T answer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public Object answer ( Invocation invocation ) { if ( invocation == null ) { throw new IllegalArgumentException ( \"invocation cannot be null\" ) ; } return invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public Object answer ( Invocation invocation ) { if ( invocation == null ) throw new IllegalArgumentException ( \"invocation cannot be null\" ) ; if ( answerObject == null ) throw new IllegalArgumentException ( \"invocation cannot be null\" ) ; return answerObject ; }",
        "public < T > T answer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public Object answer ( Invocation invocation ) { if ( invocation. getMethod ( ). equals ( \"getAnswer\" ) ) { return answer ; } return invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public Object answer ( Invocation invocation ) { if ( invocation == null ) throw new IllegalArgumentException ( \"invocation cannot be null\" ) ; if ( answerObject == null ) throw new IllegalArgumentException ( \"invocation object cannot be null\" ) ; return answerObject ; }",
        "public Object answer ( Invocation invocation ) { if ( invocation. getMethod ( ). equals ( \"getAnswer\" ) ) { return answer ; } else { return invocation. getMethod ( ). invoke ( invocation ) ; } }",
        "public < T > T answer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < T > T answer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < A > A answer ( Invocation invocation ) { return ( A ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < T > T answer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }",
        "public < T > T answer ( Invocation invocation ) { return ( T ) invocation. getMethod ( ). invoke ( invocation ) ; }"
      ]
    },
    "Mockito_27_/src/org/mockito/internal/util/MockUtil.java_64-66": {
      "loc": "64-66",
      "input": "public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock); MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler); MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)); ((Factory) mock).setCallback(0, newFilter); }",
      "target": "public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock); MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings()); ((Factory) mock).setCallback(0, newFilter); }",
      "function range": "62,5-67,5",
      "raw_output": [
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } this. type = type ; return ( T ) this ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final Class < T > type ) { return ( T ) mock. reset ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return ( T ) this. reset ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } return ( T ) this. reset ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T extends AbstractMock > T reset ( final Class < T > type ) { return ( T ) mock. reset ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final T mock ) { this. reset ( mock ) ; return mock ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final T mock ) { if ( mock == null ) { throw new IllegalArgumentException ( \"Mock cannot be null\" ) ; } reset ( mock ) ; return mock ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final T mock ) { if ( mock == null ) { throw new IllegalArgumentException ( \"Mock cannot be null\" ) ; } reset ( mock, mock. getClass ( ) ) ; return mock ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final T mock ) { this. mock = mock ; this. reset ( mock ) ; return mock ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < X > X reset ( final X mock ) { this. reset ( mock ) ; return mock ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( this. type == null ) { this. type = type ; } return ( T ) this ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } if ( this. type == null ) { this. type = type ; } return ( T ) this ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( this. type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return ( T ) this ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final Class < T > type ) { return ( T ) mock. reset ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return ( T ) this. reset ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T extends AbstractMock > T resetTo ( T mock ) { AbstractMock newMock = ( AbstractMock ) mock ; newMock. resetTo ( mock ) ; return newMock ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T extends AbstractMock > T resetTo ( T mock ) { AbstractMock newMock = ( AbstractMock ) mock ; newMock. reset ( ) ; return newMock ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T resetTo ( final Class < T > type ) { return ( T ) mock. resetTo ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T reset ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return ( T ) this. reset ( type ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public < T > T resetTo ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return ( T ) mock. reset ( type ) ; }",
        "public static synchronized void reset ( ) { if ( tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"reset\" ) ; if ( tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"reset\" ) ; }",
        "public static synchronized void reset ( ) { if ( tc. isEntryEnabled ( ) ) Tr. entry ( tc, \"reset\" ) ; _reset = true ; if ( tc. isEntryEnabled ( ) ) Tr. exit ( tc, \"reset\" ) ; }",
        "public static synchronized void reset ( ) { if ( tc. isEntryEnabled ( ) ) Tr. entry ( tc, \"reset\" ) ; if ( tc. isEntryEnabled ( ) ) Tr. exit ( tc, \"reset\" ) ; }",
        "public static synchronized void reset ( ) { if ( tc. isEntryEnabled ( ) ) Tr. entry ( tc, \"reset\" ) ; _reset = null ; if ( tc. isEntryEnabled ( ) ) Tr. exit ( tc, \"reset\" ) ; }",
        "public static synchronized void reset ( ) { if ( tc. isEntryEnabled ( ) ) Tr. entry ( tc, \"reset\" ) ; _reset = false ; if ( tc. isEntryEnabled ( ) ) Tr. exit ( tc, \"reset\" ) ; }"
      ],
      "mid_translation": [
        "Resets the mock with a new one.",
        "Resets the mock with the given mock.",
        "Resets the mock with the given one.",
        "Resets the mock to a new one.",
        "Reset mock."
      ],
      "output": [
        "public < T > T resetMock ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } this. type = type ; return ( T ) this ; }",
        "public < T > T resetMock ( final Class < T > type ) { return ( T ) mock. reset ( type ) ; }",
        "public < T > T resetMock ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return ( T ) this. reset ( type ) ; }",
        "public < T > T resetMock ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } return ( T ) this. reset ( type ) ; }",
        "public < T extends AbstractMock > T resetMock ( final Class < T > type ) { return ( T ) mock. reset ( type ) ; }",
        "public < T > T resetMock ( final T mock ) { this. reset ( mock ) ; return mock ; }",
        "public < T > T resetMock ( final T mock ) { if ( mock == null ) { throw new IllegalArgumentException ( \"Mock cannot be null\" ) ; } reset ( mock ) ; return mock ; }",
        "public < T > T resetMock ( final T mock ) { if ( mock == null ) { throw new IllegalArgumentException ( \"Mock cannot be null\" ) ; } reset ( mock, mock. getClass ( ) ) ; return mock ; }",
        "public < T > T resetMock ( final T mock ) { this. mock = mock ; this. reset ( mock ) ; return mock ; }",
        "public < X > X resetMock ( final X mock ) { this. reset ( mock ) ; return mock ; }",
        "public < T > T resetMock ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( this. type == null ) { this. type = type ; } return ( T ) this ; }",
        "public < T > T resetMock ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type must not be null\" ) ; } if ( this. type == null ) { this. type = type ; } return ( T ) this ; }",
        "public < T > T resetMock ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } if ( this. type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return ( T ) this ; }",
        "public < T > T resetMock ( final Class < T > type ) { return ( T ) mock. reset ( type ) ; }",
        "public < T > T resetMock ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return ( T ) this. reset ( type ) ; }",
        "public < T extends AbstractMock > T resetMock ( T mock ) { AbstractMock newMock = ( AbstractMock ) mock ; newMock. resetTo ( mock ) ; return newMock ; }",
        "public < T extends AbstractMock > T resetMock ( T mock ) { AbstractMock newMock = ( AbstractMock ) mock ; newMock. reset ( ) ; return newMock ; }",
        "public < T > T resetMock ( final Class < T > type ) { return ( T ) mock. resetTo ( type ) ; }",
        "public < T > T resetMock ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return ( T ) this. reset ( type ) ; }",
        "public < T > T resetMock ( final Class < T > type ) { if ( type == null ) { throw new IllegalArgumentException ( \"Type cannot be null\" ) ; } return ( T ) mock. reset ( type ) ; }",
        "public synchronized void resetMock ( ) { if ( tc. isEntryEnabled ( ) ) SibTr. entry ( tc, \"reset\" ) ; if ( tc. isEntryEnabled ( ) ) SibTr. exit ( tc, \"reset\" ) ; }",
        "public synchronized void resetMock ( ) { if ( tc. isEntryEnabled ( ) ) Tr. entry ( tc, \"reset\" ) ; _reset = true ; if ( tc. isEntryEnabled ( ) ) Tr. exit ( tc, \"reset\" ) ; }",
        "public synchronized void resetMock ( ) { if ( tc. isEntryEnabled ( ) ) Tr. entry ( tc, \"reset\" ) ; if ( tc. isEntryEnabled ( ) ) Tr. exit ( tc, \"reset\" ) ; }",
        "public synchronized void resetMock ( ) { if ( tc. isEntryEnabled ( ) ) Tr. entry ( tc, \"reset\" ) ; _reset = null ; if ( tc. isEntryEnabled ( ) ) Tr. exit ( tc, \"reset\" ) ; }",
        "public synchronized void resetMock ( ) { if ( tc. isEntryEnabled ( ) ) Tr. entry ( tc, \"reset\" ) ; _reset = false ; if ( tc. isEntryEnabled ( ) ) Tr. exit ( tc, \"reset\" ) ; }"
      ]
    },
    "Mockito_28_/src/org/mockito/internal/configuration/DefaultInjectionEngine.java_93-94": {
      "loc": "93-94",
      "input": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) { mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(); } }",
      "target": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) { Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(); mocks.remove(injected); } }",
      "function range": "91,5-95,5",
      "raw_output": [
        "public static < T > T mockCandidate ( Class < T > type, Object... arguments ) { return doMockCandidate ( type, null, arguments ) ; }",
        "public static < T > Optional < T > of ( Class < T > type ) { return Optional. of ( type ) ; }",
        "public static < T > T mockCandidate ( Class < T > type, Object... args ) { return doMockCandidate ( type, null, args ) ; }",
        "public static < T > Optional < T > mockCandidate ( Class < T > type ) { return Optional. ofNullable ( mockCandidate ( type ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T mockCandidate ( Class < T > type, Object... arguments ) { return ( T ) doMockCandidate ( type, arguments ) ; }",
        "public static < T >Candidate < T > getInstance ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; }Candidate < T > candidate = newCandidate < T > ( ) ; candidate. setClazz ( clazz ) ; return candidate ; }",
        "public static < T >Candidate < T > getInstance ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; }Candidate < T > candidate = newCandidate <> ( ) ; candidate. setClazz ( clazz ) ; return candidate ; }",
        "public static < T >Candidate < T > getInstance ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz must not be null\" ) ; }Candidate < T > candidate = newCandidate < T > ( ) ; candidate. setClazz ( clazz ) ; return candidate ; }",
        "public static < T >Candidate < T > of ( Class < T > type ) { return new DefaultCandidate < T > ( type, Collections. <Candidate < T > > emptyList ( ) ) ; }",
        "public static < T >Candidate < T > getInstance ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return new DefaultCandidate < T > ( clazz ) ; }",
        "public static < T > List < T > mockCandidates ( Class < T > clazz ) { List < T > candidates = new ArrayList < T > ( ) ; for ( Field field : clazz. getDeclaredFields ( ) ) { candidates. add ( field. get ( clazz ) ) ; } return candidates ; }",
        "public static < T > List < T > mockCandidates ( Class < T > clazz ) { List < T > candidates = new ArrayList < T > ( ) ; mockCandidates ( clazz, candidates ) ; return candidates ; }",
        "public static < T > List < T > mockCandidates ( Class < T > clazz ) { List < T > candidates = new ArrayList <> ( ) ; for ( Field field : clazz. getDeclaredFields ( ) ) { candidates. add ( field. get ( clazz ) ) ; } return candidates ; }",
        "public static < T > List < T > mockCandidates ( Class < T > clazz ) { List < T > candidates = new ArrayList < T > ( ) ; for ( Field field : clazz. getDeclaredFields ( ) ) { candidates. add ( field. get ( field ) ) ; } return candidates ; }",
        "public static < T > List < T > mockCandidates ( Class < T > clazz ) { List < T > candidates = new ArrayList <> ( ) ; for ( Field field : clazz. getDeclaredFields ( ) ) { candidates. add ( field. get ( field ) ) ; } return candidates ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T mockCandidate ( Class < T > type, Object... arguments ) { return ( T ) doMockCandidate ( type, null, arguments ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T mockCandidate ( Class < T > type, Object... arguments ) { return ( T ) doMockCandidate ( type, arguments ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T mockCandidate ( Class < T > type, Object... arguments ) { return ( T ) doMockCandidate ( null, type, arguments ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T mockCandidate ( Class < T > type, Object... args ) { return ( T ) doMockCandidate ( type, ( Class <? > [ ] ) args ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > T mockCandidate ( Class < T > type, Object... arguments ) { return ( T ) new DefaultMockCandidate ( type, arguments ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Optional < T > of ( Class < T > candidateClass ) { return Optional. of ( ( ) -> Optional. of ( candidateClass ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Optional < T > of ( final Class < T > candidateClass ) { return Optional. of ( ( ) -> Optional. of ( candidateClass ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Optional < T > of ( Class < T > type ) { return Optional. of ( ( ) -> Optional. of ( type ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Optional < T > of ( Class < T > type ) { return Optional. of ( ( ) -> type. cast ( type ) ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Optional < T > of ( Class < T > type ) { return Optional. of ( ( T ) null ) ; }"
      ],
      "mid_translation": [
        "Inject mock candidate.",
        "Inject mockCandidate.",
        "Inject mock candidates.",
        "inject mock candidate.",
        "Inject a mock candidate."
      ],
      "output": [
        "private < T > T injectMockCandidate ( Class < T > type, Object... arguments ) { return doMockCandidate ( type, null, arguments ) ; }",
        "private < T > Optional < T > injectMockCandidate ( Class < T > type ) { return Optional. of ( type ) ; }",
        "private < T > T injectMockCandidate ( Class < T > type, Object... args ) { return doMockCandidate ( type, null, args ) ; }",
        "private < T > Optional < T > injectMockCandidate ( Class < T > type ) { return Optional. ofNullable ( mockCandidate ( type ) ) ; }",
        "private < T > T injectMockCandidate ( Class < T > type, Object... arguments ) { return ( T ) doMockCandidate ( type, arguments ) ; }",
        "private < T >Candidate < T > injectMockCandidate ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; }Candidate < T > candidate = newCandidate < T > ( ) ; candidate. setClazz ( clazz ) ; return candidate ; }",
        "private < T >Candidate < T > injectMockCandidate ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; }Candidate < T > candidate = newCandidate <> ( ) ; candidate. setClazz ( clazz ) ; return candidate ; }",
        "private < T >Candidate < T > injectMockCandidate ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz must not be null\" ) ; }Candidate < T > candidate = newCandidate < T > ( ) ; candidate. setClazz ( clazz ) ; return candidate ; }",
        "private < T >Candidate < T > injectMockCandidate ( Class < T > type ) { return new DefaultCandidate < T > ( type, Collections. <Candidate < T > > emptyList ( ) ) ; }",
        "private < T >Candidate < T > injectMockCandidate ( Class < T > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( \"clazz cannot be null\" ) ; } return new DefaultCandidate < T > ( clazz ) ; }",
        "private < T > List < T > injectMockCandidate ( Class < T > clazz ) { List < T > candidates = new ArrayList < T > ( ) ; for ( Field field : clazz. getDeclaredFields ( ) ) { candidates. add ( field. get ( clazz ) ) ; } return candidates ; }",
        "private < T > List < T > injectMockCandidate ( Class < T > clazz ) { List < T > candidates = new ArrayList < T > ( ) ; mockCandidates ( clazz, candidates ) ; return candidates ; }",
        "private < T > List < T > injectMockCandidate ( Class < T > clazz ) { List < T > candidates = new ArrayList <> ( ) ; for ( Field field : clazz. getDeclaredFields ( ) ) { candidates. add ( field. get ( clazz ) ) ; } return candidates ; }",
        "private < T > List < T > injectMockCandidate ( Class < T > clazz ) { List < T > candidates = new ArrayList < T > ( ) ; for ( Field field : clazz. getDeclaredFields ( ) ) { candidates. add ( field. get ( field ) ) ; } return candidates ; }",
        "private < T > List < T > injectMockCandidate ( Class < T > clazz ) { List < T > candidates = new ArrayList <> ( ) ; for ( Field field : clazz. getDeclaredFields ( ) ) { candidates. add ( field. get ( field ) ) ; } return candidates ; }",
        "private < T > T injectMockCandidate ( Class < T > type, Object... arguments ) { return ( T ) doMockCandidate ( type, null, arguments ) ; }",
        "private < T > T injectMockCandidate ( Class < T > type, Object... arguments ) { return ( T ) doMockCandidate ( type, arguments ) ; }",
        "private < T > T injectMockCandidate ( Class < T > type, Object... arguments ) { return ( T ) doMockCandidate ( null, type, arguments ) ; }",
        "private < T > T injectMockCandidate ( Class < T > type, Object... args ) { return ( T ) doMockCandidate ( type, ( Class <? > [ ] ) args ) ; }",
        "private < T > T injectMockCandidate ( Class < T > type, Object... arguments ) { return ( T ) new DefaultMockCandidate ( type, arguments ) ; }",
        "private < T > Optional < T > injectMockCandidate ( Class < T > candidateClass ) { return Optional. of ( ( ) -> Optional. of ( candidateClass ) ) ; }",
        "private < T > Optional < T > injectMockCandidate ( final Class < T > candidateClass ) { return Optional. of ( ( ) -> Optional. of ( candidateClass ) ) ; }",
        "private < T > Optional < T > injectMockCandidate ( Class < T > type ) { return Optional. of ( ( ) -> Optional. of ( type ) ) ; }",
        "private < T > Optional < T > injectMockCandidate ( Class < T > type ) { return Optional. of ( ( ) -> type. cast ( type ) ) ; }",
        "private < T > Optional < T > injectMockCandidate ( Class < T > type ) { return Optional. of ( ( T ) null ) ; }"
      ]
    },
    "Mockito_29_/src/org/mockito/internal/matchers/Same.java_29-30": {
      "loc": "29-30",
      "input": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description); description.appendText(wanted.toString()); appendQuoting(description); description.appendText(\")\"); }",
      "target": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description); description.appendText(wanted == null ? \"null\" : wanted.toString()); appendQuoting(description); description.appendText(\")\"); }",
      "function range": "26,5-32,5",
      "raw_output": [
        "public void setDescription ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) description = \"\" ; this. description = description ; }",
        "public void setDescription ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) { description = \"\" ; } this. description = description ; }",
        "public void setDescription ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) description = DEFAULT_DESCRIPTION ; this. description = description ; }",
        "public void setDescription ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) { description = DEFAULT_DESCRIPTION ; } this. description = description ; }",
        "public void setDescription ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) { description = \"\" ; } this. description = description ; this. description = description ; }",
        "public static Comment append ( String description, String comment ) { return new Comment ( description, comment, true ) ; }",
        "public static Comment append ( String description, Comment comment ) { return new Comment ( description, comment == null? null : comment. toString ( ) ) ; }",
        "public static Comment append ( String description, Comment comment ) { return new Comment ( description, comment == null? \"\" : comment. toString ( ) ) ; }",
        "public static Comment append ( String description, String commentText ) { return new Comment ( description, commentText, true ) ; }",
        "public static Comment append ( String description, Comment comment ) { return new Comment ( description, comment, true ) ; }",
        "public static Comment append ( String description, String comment ) { return new Comment ( description, comment, true ) ; }",
        "public static String appendComment ( String description, String comment ) { if ( description == null ) { description = \"\" ; } return appendComment ( description, comment ) ; }",
        "public static String appendComment ( String description, String comment ) { return appendComment ( description, comment, true ) ; }",
        "public static String appendComment ( String description, String comment ) { if ( description == null ) { description = \"\" ; } return appendComment ( description, comment, true ) ; }",
        "public static String appendComment ( String description, String comment ) { if ( description == null ) { description = \"\" ; } return appendComment ( description, comment, false ) ; }",
        "public void appendComment ( String description ) { if ( description == null ) { appendComment ( null ) ; } else { appendComment ( description + \"\\n\" ) ; } }",
        "public void appendComment ( String description ) { if ( description == null || description. length ( ) == 0 ) { appendComment ( \"\" ) ; } else { appendComment ( description + \"\\n\" ) ; } }",
        "public void appendComment ( String description ) { if ( description == null || description. isEmpty ( ) ) { appendComment ( \"\" ) ; } else { appendComment ( description + \"\\n\" ) ; } }",
        "public void appendComment ( String description ) { if ( description == null || description. isEmpty ( ) ) { appendComment ( ) ; } else { appendComment ( description + \"\\n\" ) ; } }",
        "public void appendComment ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) { appendComment ( \"\" ) ; } else { appendComment ( description ) ; } }",
        "public void addComment ( String description, String comment ) { getResourceFactory ( ). getApiResource ( \"/comment/\" ). entity ( description, MediaType. APPLICATION_JSON ). post ( ) ; }",
        "public void addComment ( String description, String comment ) { getResourceFactory ( ). getApiResource ( \"/comment/\" + description + \"/\" ). entity ( comment, MediaType. APPLICATION_JSON ). post ( ) ; }",
        "public void addComment ( String description, String comment ) { getResourceFactory ( ). getApiResource ( \"/comment/\" + description ). entity ( comment, MediaType. APPLICATION_JSON ). post ( ) ; }",
        "public void addComment ( String description, String comment ) { if ( description == null || description. trim ( ). length ( ) == 0 ) { description = \"\" ; } addComment ( description, comment ) ; }",
        "public void addComment ( String description, String comment ) { getResourceFactory ( ). getApiResource ( \"/comment/\" ). entity ( description, new HashMap < String, String > ( ) ). post ( ) ; }"
      ],
      "mid_translation": [
        "Describes to the given description.",
        "Appends a comment to the given description.",
        "Appends some comment to the given description.",
        "Appends comment to the given description.",
        "Adds a comment to the given description."
      ],
      "output": [
        "public void describeTo ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) description = \"\" ; this. description = description ; }",
        "public void describeTo ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) { description = \"\" ; } this. description = description ; }",
        "public void describeTo ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) description = DEFAULT_DESCRIPTION ; this. description = description ; }",
        "public void describeTo ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) { description = DEFAULT_DESCRIPTION ; } this. description = description ; }",
        "public void describeTo ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) { description = \"\" ; } this. description = description ; this. description = description ; }",
        "public Comment describeTo ( String description, String comment ) { return new Comment ( description, comment, true ) ; }",
        "public Comment describeTo ( String description, Comment comment ) { return new Comment ( description, comment == null? null : comment. toString ( ) ) ; }",
        "public Comment describeTo ( String description, Comment comment ) { return new Comment ( description, comment == null? \"\" : comment. toString ( ) ) ; }",
        "public Comment describeTo ( String description, String commentText ) { return new Comment ( description, commentText, true ) ; }",
        "public Comment describeTo ( String description, Comment comment ) { return new Comment ( description, comment, true ) ; }",
        "public Comment describeTo ( String description, String comment ) { return new Comment ( description, comment, true ) ; }",
        "public String describeTo ( String description, String comment ) { if ( description == null ) { description = \"\" ; } return appendComment ( description, comment ) ; }",
        "public String describeTo ( String description, String comment ) { return appendComment ( description, comment, true ) ; }",
        "public String describeTo ( String description, String comment ) { if ( description == null ) { description = \"\" ; } return appendComment ( description, comment, true ) ; }",
        "public String describeTo ( String description, String comment ) { if ( description == null ) { description = \"\" ; } return appendComment ( description, comment, false ) ; }",
        "public void describeTo ( String description ) { if ( description == null ) { appendComment ( null ) ; } else { appendComment ( description + \"\\n\" ) ; } }",
        "public void describeTo ( String description ) { if ( description == null || description. length ( ) == 0 ) { appendComment ( \"\" ) ; } else { appendComment ( description + \"\\n\" ) ; } }",
        "public void describeTo ( String description ) { if ( description == null || description. isEmpty ( ) ) { appendComment ( \"\" ) ; } else { appendComment ( description + \"\\n\" ) ; } }",
        "public void describeTo ( String description ) { if ( description == null || description. isEmpty ( ) ) { appendComment ( ) ; } else { appendComment ( description + \"\\n\" ) ; } }",
        "public void describeTo ( String description ) { if ( description == null || description. trim ( ). length ( ) == 0 ) { appendComment ( \"\" ) ; } else { appendComment ( description ) ; } }",
        "public void describeTo ( String description, String comment ) { getResourceFactory ( ). getApiResource ( \"/comment/\" ). entity ( description, MediaType. APPLICATION_JSON ). post ( ) ; }",
        "public void describeTo ( String description, String comment ) { getResourceFactory ( ). getApiResource ( \"/comment/\" + description + \"/\" ). entity ( comment, MediaType. APPLICATION_JSON ). post ( ) ; }",
        "public void describeTo ( String description, String comment ) { getResourceFactory ( ). getApiResource ( \"/comment/\" + description ). entity ( comment, MediaType. APPLICATION_JSON ). post ( ) ; }",
        "public void describeTo ( String description, String comment ) { if ( description == null || description. trim ( ). length ( ) == 0 ) { description = \"\" ; } addComment ( description, comment ) ; }",
        "public void describeTo ( String description, String comment ) { getResourceFactory ( ). getApiResource ( \"/comment/\" ). entity ( description, new HashMap < String, String > ( ) ). post ( ) ; }"
      ]
    },
    "Mockito_34_/src/org/mockito/internal/invocation/InvocationMatcher.java_106-107": {
      "loc": "106-107",
      "input": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) { if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
      "target": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) { if (m instanceof CapturesArguments && i.getArguments().length > k) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
      "function range": "103,5-111,5",
      "raw_output": [
        "public List < String > getArguments ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( args. get ( i ) ) ; } return args ; }",
        "public List < String > getArguments ( ) { List < String > args = new ArrayList <> ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( args. get ( i ) ) ; } return args ; }",
        "public List < String > getArguments ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args. add ( arguments [ i ] ) ; } return args ; }",
        "public List < String > getArguments ( ) { List < String > args = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args. add ( arguments [ i ] ) ; } return args ; }",
        "public List < String > getArguments ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( ( String ) args. get ( i ) ) ; } return args ; }",
        "public static List < String > captureArguments ( String... args ) { List < String > result = new ArrayList <> ( ) ; if ( args == null || args. length == 0 ) { return result ; } for ( int i = 0 ; i < args. length ; i ++ ) { result. add ( captureArguments ( args [ i ] ) ) ; } return result ; }",
        "public static List < String > captureArguments ( String... args ) { if ( args == null || args. length == 0 ) { return Collections. emptyList ( ) ; } List < String > result = new ArrayList <> ( ) ; for ( int i = 0 ; i < args. length ; i ++ ) { result. add ( args [ i ] ) ; } return result ; }",
        "public static List < String > captureArguments ( String... args ) { List < String > result = new ArrayList <> ( ) ; if ( args == null || args. length == 0 ) { return result ; } for ( int i = 0 ; i < args. length ; i ++ ) { result. add ( args [ i ] ) ; } return result ; }",
        "public static List < String > captureArguments ( String... args ) { List < String > result = new ArrayList <> ( ) ; if ( args == null || args. length == 0 ) { return result ; } for ( int i = 0 ; i < args. length ; i ++ ) { result. add ( captureArgument ( args [ i ] ) ) ; } return result ; }",
        "public static List < String > captureArguments ( String... args ) { if ( args == null || args. length == 0 ) { return Collections. emptyList ( ) ; } List < String > captureArguments = new ArrayList <> ( ) ; for ( String arg : args ) { captureArguments. add ( arg ) ; } return captureArguments ; }",
        "public static List < String > captureArguments ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public static List < String > captureArguments ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public static List < String > captureArguments ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public static List < String > captureArguments ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public static List < String > captureArguments ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = arguments [ i ] ; } return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args [ i ] = arguments [ i ] ; } return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; System. arraycopy ( arguments, 0, args, 0, arguments. length ) ; return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; System. arraycopy ( arguments, 0, args, 0, args. length ) ; return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = arguments [ i ] ; } return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ args. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = args [ i ] ; } return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args [ i ] = arguments [ i ] ; } return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; System. arraycopy ( arguments, 0, args, 0, arguments. length ) ; return args ; }",
        "public Object [ ] getArguments ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }"
      ],
      "mid_translation": [
        "CapturesArguments in the invocation.",
        "CapturesArguments.",
        "CapturesArguments from the invocation.",
        "CapturesArguments in theInvocation.",
        "CapturesArguments from theInvocation."
      ],
      "output": [
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( args. get ( i ) ) ; } return args ; }",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( args. get ( i ) ) ; } return args ; }",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args. add ( arguments [ i ] ) ; } return args ; }",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args. add ( arguments [ i ] ) ; } return args ; }",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList < String > ( ) ; for ( int i = 0 ; i < args. size ( ) ; i ++ ) { args. add ( ( String ) args. get ( i ) ) ; } return args ; }",
        "public List < String > captureArgumentsFrom ( String... args ) { List < String > result = new ArrayList <> ( ) ; if ( args == null || args. length == 0 ) { return result ; } for ( int i = 0 ; i < args. length ; i ++ ) { result. add ( captureArguments ( args [ i ] ) ) ; } return result ; }",
        "public List < String > captureArgumentsFrom ( String... args ) { if ( args == null || args. length == 0 ) { return Collections. emptyList ( ) ; } List < String > result = new ArrayList <> ( ) ; for ( int i = 0 ; i < args. length ; i ++ ) { result. add ( args [ i ] ) ; } return result ; }",
        "public List < String > captureArgumentsFrom ( String... args ) { List < String > result = new ArrayList <> ( ) ; if ( args == null || args. length == 0 ) { return result ; } for ( int i = 0 ; i < args. length ; i ++ ) { result. add ( args [ i ] ) ; } return result ; }",
        "public List < String > captureArgumentsFrom ( String... args ) { List < String > result = new ArrayList <> ( ) ; if ( args == null || args. length == 0 ) { return result ; } for ( int i = 0 ; i < args. length ; i ++ ) { result. add ( captureArgument ( args [ i ] ) ) ; } return result ; }",
        "public List < String > captureArgumentsFrom ( String... args ) { if ( args == null || args. length == 0 ) { return Collections. emptyList ( ) ; } List < String > captureArguments = new ArrayList <> ( ) ; for ( String arg : args ) { captureArguments. add ( arg ) ; } return captureArguments ; }",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public List < String > captureArgumentsFrom ( ) { List < String > args = new ArrayList <> ( ) ; args. add ( \"-v\" ) ; args. add ( \"-a\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-c\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ; args. add ( \"-f\" ) ;",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = arguments [ i ] ; } return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args [ i ] = arguments [ i ] ; } return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; System. arraycopy ( arguments, 0, args, 0, arguments. length ) ; return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; System. arraycopy ( arguments, 0, args, 0, args. length ) ; return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = arguments [ i ] ; } return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ args. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) { args [ i ] = args [ i ] ; } return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) { args [ i ] = arguments [ i ] ; } return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; System. arraycopy ( arguments, 0, args, 0, arguments. length ) ; return args ; }",
        "public Object [ ] captureArgumentsFrom ( ) { Object [ ] args = new Object [ arguments. length ] ; for ( int i = 0 ; i < args. length ; i ++ ) args [ i ] = arguments [ i ] ; return args ; }"
      ]
    },
    "Mockito_38_/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java_48-49": {
      "loc": "48-49",
      "input": "private boolean toStringEquals(Matcher m, Object arg) { return StringDescription.toString(m).equals(arg.toString()); }",
      "target": "private boolean toStringEquals(Matcher m, Object arg) { return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString()); }",
      "function range": "47,5-49,5",
      "raw_output": [
        "public static < T > Matcher < T > is ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T obj, VisitorState state ) { return matcher. matches ( obj, state ) ; } } ; }",
        "public static < T > Matcher < T > is ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T object, VisitorState state ) { return matcher. matches ( object, state ) ; } } ; }",
        "public static < T > Matcher < T > eq ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T obj, VisitorState state ) { return matcher. matches ( obj, state ) ; } } ; }",
        "public static < T > Matcher < T > eq ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T object, VisitorState state ) { return matcher. matches ( object, state ) ; } } ; }",
        "public static < T > Matcher < T > is ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T obj ) { return matcher. matches ( obj ) ; } } ; }",
        "public static boolean matches ( Matcher matcher, Object object ) { if ( matcher == null ) { return false ; } if ( matcher. matches ( object ) ) { return true ; } return false ; }",
        "public static < T > boolean matches ( Matcher <? super T > matcher, T obj ) { return matcher. matches ( obj ) ; }",
        "public static < T > boolean matches ( Matcher <? super T > matcher, T object ) { return matcher. matches ( object ) ; }",
        "public static < T > boolean matches ( ElementMatcher <? super T > matcher, T obj ) { return matcher. matches ( obj ) ; }",
        "public static < T > boolean matches ( Matcher <? super T > matcher, T obj ) { if ( matcher == null ) { return false ; } return matcher. matches ( obj ) ; }",
        "public static boolean matches ( Matcher matcher, Object object ) { if ( matcher == null ) { return false ; } if ( matcher. matches ( object ) ) { return true ; } return false ; }",
        "public static boolean matches ( Matcher matcher, Object obj ) { if ( matcher == null ) { return false ; } if ( obj == null ) { return false ; } if ( matcher. matches ( obj ) ) { return true ; } return false ; }",
        "public static boolean matches ( Matcher matcher, Object obj ) { if ( matcher == null ) { return false ; } if ( matcher. matches ( obj ) ) { return true ; } return false ; }",
        "public static boolean matches ( Matcher matcher, Object obj ) { if ( matcher == null || obj == null ) { return false ; } if ( matcher. matches ( obj ) ) { return true ; } return false ; }",
        "public static boolean matches ( Matcher matcher, Object obj ) { if ( matcher == null ) { return false ; } if ( obj == null ) { return false ; } if (! matcher. matches ( obj ) ) { return false ; } return matcher. matches ( obj ) ; }",
        "public static < T > boolean objectEquals ( Matcher <? super T > matcher, T object ) { return matcher. matches ( object ) ; }",
        "public static < T > Matcher < T > eq ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T obj ) { return matcher. matches ( obj ) ; } } ; }",
        "public static < T > Matcher < T > is ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T obj ) { return matcher. matches ( obj ) ; } } ; }",
        "public static < T > Matcher < T > is ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T object ) { return matcher. matches ( object ) ; } } ; }",
        "public static < T > Matcher < T > eq ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T object ) { return matcher. matches ( object ) ; } } ; }",
        "public static boolean equals ( Object object, String string ) { if ( object == null ) { return false ; } if ( string == null ) { return false ; } if ( string. equals ( string ) ) { return true ; } if ( object. getClass ( ) == String. class ) { return string. equals ( ( String ) object ) ; } if ( object. getClass ( ) == Integer. class ) { return string. equals ( ( Integer ) object ) ; } if ( object. getClass ( ) == Long. class ) { return string. equals ( ( Long ) object ) ; } return false ; }",
        "public static boolean equals ( Object object, String string ) { if ( object == null ) { return false ; } if ( string == null ) { return false ; } if ( string. equals ( string ) ) { return true ; } if ( object. getClass ( ) == String. class ) { return string. equals ( ( String ) object ) ; } if ( object. getClass ( ) == Integer. class ) { return object. equals ( ( Integer ) object ) ; } if ( object. getClass ( ) == Long. class ) { return object. equals ( ( Long ) object ) ; } return false ; }",
        "public static boolean equals ( Object object, String string ) { if ( object == null ) { return false ; } if ( string == null ) { return false ; } if ( string. equals ( string ) ) { return true ; } return false ; }",
        "public static boolean objectEquals ( Object object, String string ) { if ( object == null ) { return false ; } if ( string == null ) { return false ; } if ( string. equals ( string ) ) { return true ; } return false ; }",
        "public static boolean objectEquals ( Object object, String string ) { if ( object == null ) { return false ; } if ( string == null ) { return false ; } if ( string. getClass ( )!= object. getClass ( ) ) { return false ; } return string. equals ( object. toString ( ) ) ; }"
      ],
      "mid_translation": [
        "Returns true if the given matcher is equal to the given object.",
        "Returns true if the given matcher matches the string representation of the given object.",
        "Returns true if the given matcher returns the string representation of the given object.",
        "Returns true if the given matcher is equal to the given object ; false otherwise.",
        "Returns true if the given object is equal to the given string representation."
      ],
      "output": [
        "private < T > Matcher < T > toStringEquals ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T obj, VisitorState state ) { return matcher. matches ( obj, state ) ; } } ; }",
        "private < T > Matcher < T > toStringEquals ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T object, VisitorState state ) { return matcher. matches ( object, state ) ; } } ; }",
        "private < T > Matcher < T > toStringEquals ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T obj, VisitorState state ) { return matcher. matches ( obj, state ) ; } } ; }",
        "private < T > Matcher < T > toStringEquals ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T object, VisitorState state ) { return matcher. matches ( object, state ) ; } } ; }",
        "private < T > Matcher < T > toStringEquals ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T obj ) { return matcher. matches ( obj ) ; } } ; }",
        "private boolean toStringEquals ( Matcher matcher, Object object ) { if ( matcher == null ) { return false ; } if ( matcher. matches ( object ) ) { return true ; } return false ; }",
        "private < T > boolean toStringEquals ( Matcher <? super T > matcher, T obj ) { return matcher. matches ( obj ) ; }",
        "private < T > boolean toStringEquals ( Matcher <? super T > matcher, T object ) { return matcher. matches ( object ) ; }",
        "private < T > boolean toStringEquals ( ElementMatcher <? super T > matcher, T obj ) { return matcher. matches ( obj ) ; }",
        "private < T > boolean toStringEquals ( Matcher <? super T > matcher, T obj ) { if ( matcher == null ) { return false ; } return matcher. matches ( obj ) ; }",
        "private boolean toStringEquals ( Matcher matcher, Object object ) { if ( matcher == null ) { return false ; } if ( matcher. matches ( object ) ) { return true ; } return false ; }",
        "private boolean toStringEquals ( Matcher matcher, Object obj ) { if ( matcher == null ) { return false ; } if ( obj == null ) { return false ; } if ( matcher. matches ( obj ) ) { return true ; } return false ; }",
        "private boolean toStringEquals ( Matcher matcher, Object obj ) { if ( matcher == null ) { return false ; } if ( matcher. matches ( obj ) ) { return true ; } return false ; }",
        "private boolean toStringEquals ( Matcher matcher, Object obj ) { if ( matcher == null || obj == null ) { return false ; } if ( matcher. matches ( obj ) ) { return true ; } return false ; }",
        "private boolean toStringEquals ( Matcher matcher, Object obj ) { if ( matcher == null ) { return false ; } if ( obj == null ) { return false ; } if (! matcher. matches ( obj ) ) { return false ; } return matcher. matches ( obj ) ; }",
        "private < T > boolean toStringEquals ( Matcher <? super T > matcher, T object ) { return matcher. matches ( object ) ; }",
        "private < T > Matcher < T > toStringEquals ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T obj ) { return matcher. matches ( obj ) ; } } ; }",
        "private < T > Matcher < T > toStringEquals ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T obj ) { return matcher. matches ( obj ) ; } } ; }",
        "private < T > Matcher < T > toStringEquals ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T object ) { return matcher. matches ( object ) ; } } ; }",
        "private < T > Matcher < T > toStringEquals ( final Matcher <? super T > matcher ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T object ) { return matcher. matches ( object ) ; } } ; }",
        "private boolean toStringEquals ( Object object, String string ) { if ( object == null ) { return false ; } if ( string == null ) { return false ; } if ( string. equals ( string ) ) { return true ; } if ( object. getClass ( ) == String. class ) { return string. equals ( ( String ) object ) ; } if ( object. getClass ( ) == Integer. class ) { return string. equals ( ( Integer ) object ) ; } if ( object. getClass ( ) == Long. class ) { return string. equals ( ( Long ) object ) ; } return false ; }",
        "private boolean toStringEquals ( Object object, String string ) { if ( object == null ) { return false ; } if ( string == null ) { return false ; } if ( string. equals ( string ) ) { return true ; } if ( object. getClass ( ) == String. class ) { return string. equals ( ( String ) object ) ; } if ( object. getClass ( ) == Integer. class ) { return object. equals ( ( Integer ) object ) ; } if ( object. getClass ( ) == Long. class ) { return object. equals ( ( Long ) object ) ; } return false ; }",
        "private boolean toStringEquals ( Object object, String string ) { if ( object == null ) { return false ; } if ( string == null ) { return false ; } if ( string. equals ( string ) ) { return true ; } return false ; }",
        "private boolean toStringEquals ( Object object, String string ) { if ( object == null ) { return false ; } if ( string == null ) { return false ; } if ( string. equals ( string ) ) { return true ; } return false ; }",
        "private boolean toStringEquals ( Object object, String string ) { if ( object == null ) { return false ; } if ( string == null ) { return false ; } if ( string. getClass ( )!= object. getClass ( ) ) { return false ; } return string. equals ( object. toString ( ) ) ; }"
      ]
    },
    "Time_4_/src/main/java/org/joda/time/Partial.java_464-465": {
      "loc": "464-465",
      "input": "public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1); Partial newPartial = new Partial(iChronology, newTypes, newValues); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return new Partial(this, newValues); }",
      "target": "public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1); Partial newPartial = new Partial(newTypes, newValues, iChronology); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return new Partial(this, newValues); }",
      "function range": "426,5-474,5",
      "raw_output": [
        "public static Partial of ( Class <? > type, Object value ) { return new Partial ( type, value ) ; }",
        "public static Partial of ( Class <? > clazz, Object value ) { return new Partial ( clazz, value ) ; }",
        "public static Partial of ( String field, Object value ) { return new Partial ( field, value, null ) ; }",
        "public static Partial of ( Class <? extendsPartial > type, Object value ) { return new Partial ( type, value ) ; }",
        "public static Partial of ( String field, Object value ) { return new Partial ( field, value, true ) ; }",
        "public static < T > Partial < T > of ( Class < T > type, Object value ) { return new Partial < T > ( type, value ) ; }",
        "public static < T > Partial < T > of ( Class < T > clazz, Object value ) { return new Partial < T > ( clazz, value ) ; }",
        "public static < T > Partial < T > of ( Class < T > type, Object value ) { return newPartial < T > ( type, value ) ; }",
        "public static Partial of ( String field, Object value ) { return new Partial ( field, value, null ) ; }",
        "public static < T > Partial < T > of ( Class < T > type, Object value ) { return new Partial <> ( type, value ) ; }",
        "public static < T > Partial < T > of ( Class < T > type, Object value ) { return new Partial < T > ( type, value ) ; }",
        "public static < T > Partial < T > of ( Class < T > type, Object value ) { return newPartial < T > ( type, value ) ; }",
        "public static < T > Partial < T > of ( Class < T > type, Object value ) { return new Partial <> ( type, value ) ; }",
        "public static Partial of ( Class <? > type, Object value ) { return new Partial ( type, value ) ; }",
        "public static Partial of ( Class <? > clazz, Object value ) { return new Partial ( clazz, value ) ; }",
        "public static < T > Partial < T > of ( T value ) { return new Partial < T > ( value ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Partial < T > of ( T value ) { return new Partial < T > ( value ) ; }",
        "@ SuppressWarnings ( \"unchecked\" ) public static < T > Partial < T > of ( T value ) { return new Partial <> ( value ) ; }",
        "public static Partial of ( Object value ) { if ( value == null ) { return null ; } return new Partial ( value ) ; }",
        "public static Partial of ( Object value ) { if ( value == null ) { return null ; } return new Partial ( value. toString ( ) ) ; }",
        "public static < T > partial ( Class < T > clazz, Object value ) { return new partial ( clazz, value ) ; }",
        "public static < T >Partial < T > of ( Class < T > clazz, Object value ) { return new partial <> ( clazz, value ) ; }",
        "public static < T >Partial < T > of ( Class < T > type, Object value ) { return new partial <> ( type, value ) ; }",
        "public static < T >Partial < T > of ( Class < T > clazz, Object value ) { return newPartial < T > ( clazz, value ) ; }",
        "public static < T > partial ( Class < T > type, Object value ) { return new partial ( type, value ) ; }"
      ],
      "mid_translation": [
        "Creates a new Partial object with the specified field type and value.",
        "Create a new Partial object with the specified field type and value.",
        "Returns a new Partial object with the specified field type and value.",
        "Creates a new Partial object with the specified value.",
        "Creates a new partial object with the specified field type and value."
      ],
      "output": [
        "public Partial with ( Class <? > type, Object value ) { return new Partial ( type, value ) ; }",
        "public Partial with ( Class <? > clazz, Object value ) { return new Partial ( clazz, value ) ; }",
        "public Partial with ( String field, Object value ) { return new Partial ( field, value, null ) ; }",
        "public Partial with ( Class <? extendsPartial > type, Object value ) { return new Partial ( type, value ) ; }",
        "public Partial with ( String field, Object value ) { return new Partial ( field, value, true ) ; }",
        "public < T > Partial < T > with ( Class < T > type, Object value ) { return new Partial < T > ( type, value ) ; }",
        "public < T > Partial < T > with ( Class < T > clazz, Object value ) { return new Partial < T > ( clazz, value ) ; }",
        "public < T > Partial < T > with ( Class < T > type, Object value ) { return newPartial < T > ( type, value ) ; }",
        "public Partial with ( String field, Object value ) { return new Partial ( field, value, null ) ; }",
        "public < T > Partial < T > with ( Class < T > type, Object value ) { return new Partial <> ( type, value ) ; }",
        "public < T > Partial < T > with ( Class < T > type, Object value ) { return new Partial < T > ( type, value ) ; }",
        "public < T > Partial < T > with ( Class < T > type, Object value ) { return newPartial < T > ( type, value ) ; }",
        "public < T > Partial < T > with ( Class < T > type, Object value ) { return new Partial <> ( type, value ) ; }",
        "public Partial with ( Class <? > type, Object value ) { return new Partial ( type, value ) ; }",
        "public Partial with ( Class <? > clazz, Object value ) { return new Partial ( clazz, value ) ; }",
        "public < T > Partial < T > with ( T value ) { return new Partial < T > ( value ) ; }",
        "public < T > Partial < T > with ( T value ) { return new Partial < T > ( value ) ; }",
        "public < T > Partial < T > with ( T value ) { return new Partial <> ( value ) ; }",
        "public Partial with ( Object value ) { if ( value == null ) { return null ; } return new Partial ( value ) ; }",
        "public Partial with ( Object value ) { if ( value == null ) { return null ; } return new Partial ( value. toString ( ) ) ; }",
        "public < T > with ( Class < T > clazz, Object value ) { return new partial ( clazz, value ) ; }",
        "public < T >Partial < T > with ( Class < T > clazz, Object value ) { return new partial <> ( clazz, value ) ; }",
        "public < T >Partial < T > with ( Class < T > type, Object value ) { return new partial <> ( type, value ) ; }",
        "public < T >Partial < T > with ( Class < T > clazz, Object value ) { return newPartial < T > ( clazz, value ) ; }",
        "public < T > with ( Class < T > type, Object value ) { return new partial ( type, value ) ; }"
      ]
    },
    "Time_15_/src/main/java/org/joda/time/field/FieldUtils.java_138-139": {
      "loc": "138-139",
      "input": "public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: return -val1; case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; }",
      "target": "public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: if (val1 == Long.MIN_VALUE) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return -val1; case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; }",
      "function range": "135,5-149,5",
      "raw_output": [
        "public static long safeMultiply ( long a, int b ) { long result = a * b ; if ( result!= Integer. MIN_VALUE && result!= Integer. MAX_VALUE ) { throw new ArithmeticException ( \"Multiplication overflows an int\" ) ; } return result ; }",
        "public static long safeMultiply ( long a, int b ) { long result = a * b ; if ( result!= Integer. MIN_VALUE && result!= Integer. MAX_VALUE ) { throw new ArithmeticException ( \"Multiplication overflows a long\" ) ; } return result ; }",
        "public static long safeMultiply ( long a, int b ) { long result = a * b ; if ( result!= Integer. MIN_VALUE && result!= Integer. MAX_VALUE ) { throw new ArithmeticException ( \"Multiplication overflows long: \" + result ) ; } return result ; }",
        "public static long safeMultiply ( long a, int b ) { long result = a * b ; if ( result!= Integer. MIN_VALUE && result!= Integer. MAX_VALUE ) { throw new ArithmeticException ( \"Multiplication overflows an int.\" ) ; } return result ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( long ) ( a * b ) ^ ( long ) ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result!= Integer. MIN_VALUE ) { result *= result ; } return result ; }",
        "public static long safeMultiply ( long a, long b ) { return ( long ) ( a * b ) ^ ( long ) ( ( a * b ) ^ ( long ) ( b * a ) ) ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MIN_VALUE ) { return Long. MIN_VALUE ; } if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result * result ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MIN_VALUE ) { return Long. MIN_VALUE ; } if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result * ( long ) result ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MIN_VALUE ) { return Long. MIN_VALUE ; } if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result * a ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MIN_VALUE ) { return Long. MIN_VALUE ; } if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MIN_VALUE ) { return Long. MIN_VALUE ; } if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result * ( long ) a ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result!= Long. MAX_VALUE ) { throw new ArithmeticException ( \"Multiplication overflows long: \" + a + \" * \" + b ) ; } return result ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result ; }",
        "public static long safeMultiply ( long a, long b ) { long result = ( a * b ) ^ ( a * b ) ; if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result ; }",
        "public static long multiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, int b ) { return ( long ) ( a * b ) ^ ( long ) ( a * b ) ; }",
        "public static long safeMultiply ( long a, int b ) { return ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ^ ( a * b ) ; }",
        "public static long multiply ( long a, int b ) { return ( a * b ) ^ ( a * b ) ; }"
      ],
      "mid_translation": [
        "Safely multiply a long by an int.",
        "Safely multiply a long by a int.",
        "Safely multiply a long by another long.",
        "Safely Multiply a long by another long.",
        "Safely Multiply a long by an int."
      ],
      "output": [
        "public static long safeMultiply ( long a, int b ) { long result = a * b ; if ( result!= Integer. MIN_VALUE && result!= Integer. MAX_VALUE ) { throw new ArithmeticException ( \"Multiplication overflows an int\" ) ; } return result ; }",
        "public static long safeMultiply ( long a, int b ) { long result = a * b ; if ( result!= Integer. MIN_VALUE && result!= Integer. MAX_VALUE ) { throw new ArithmeticException ( \"Multiplication overflows a long\" ) ; } return result ; }",
        "public static long safeMultiply ( long a, int b ) { long result = a * b ; if ( result!= Integer. MIN_VALUE && result!= Integer. MAX_VALUE ) { throw new ArithmeticException ( \"Multiplication overflows long: \" + result ) ; } return result ; }",
        "public static long safeMultiply ( long a, int b ) { long result = a * b ; if ( result!= Integer. MIN_VALUE && result!= Integer. MAX_VALUE ) { throw new ArithmeticException ( \"Multiplication overflows an int.\" ) ; } return result ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( long ) ( a * b ) ^ ( long ) ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result!= Integer. MIN_VALUE ) { result *= result ; } return result ; }",
        "public static long safeMultiply ( long a, long b ) { return ( long ) ( a * b ) ^ ( long ) ( ( a * b ) ^ ( long ) ( b * a ) ) ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MIN_VALUE ) { return Long. MIN_VALUE ; } if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result * result ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MIN_VALUE ) { return Long. MIN_VALUE ; } if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result * ( long ) result ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MIN_VALUE ) { return Long. MIN_VALUE ; } if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result * a ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MIN_VALUE ) { return Long. MIN_VALUE ; } if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MIN_VALUE ) { return Long. MIN_VALUE ; } if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result * ( long ) a ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result!= Long. MAX_VALUE ) { throw new ArithmeticException ( \"Multiplication overflows long: \" + a + \" * \" + b ) ; } return result ; }",
        "public static long safeMultiply ( long a, long b ) { long result = a * b ; if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result ; }",
        "public static long safeMultiply ( long a, long b ) { long result = ( a * b ) ^ ( a * b ) ; if ( result == Long. MAX_VALUE ) { return Long. MAX_VALUE ; } return result ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, int b ) { return ( long ) ( a * b ) ^ ( long ) ( a * b ) ; }",
        "public static long safeMultiply ( long a, int b ) { return ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, long b ) { return ( a * b ) ^ ( a * b ) ^ ( a * b ) ; }",
        "public static long safeMultiply ( long a, int b ) { return ( a * b ) ^ ( a * b ) ; }"
      ]
    },
    "Time_16_/src/main/java/org/joda/time/format/DateTimeFormatter.java_709-710": {
      "loc": "709-710",
      "input": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; }",
      "target": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal)); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; }",
      "function range": "697,5-724,5",
      "raw_output": [
        "public static int parseInt ( String val ) { try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public static int parseInt ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "private int parseInt ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "private int parseInt ( String val ) { try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public static int parseInt ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return - 1 ; } }",
        "public static int toInt ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) + c. get ( Calendar. MINUTE ) + c. get ( Calendar. SECOND ) ; }",
        "public static int toInt ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public static int toInt ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return cal. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public static int getDateTime ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return cal. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public static int toInt ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) + c. get ( Calendar. MINUTE ) ; }",
        "public static int parseInt ( String val ) throws NumberFormatException { try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { throw new NumberFormatException ( val ) ; } }",
        "public static int parseInt ( String s ) throws NumberFormatException { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { throw new NumberFormatException ( s ) ; } }",
        "public static int parseInt ( String val ) { try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "private int parseInt ( String val ) { try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public static int parseInt ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public static int parseInt ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public static int parseInt ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return - 1 ; } }",
        "private int parseInt ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public static int parseInt ( String value ) { try { return Integer. parseInt ( value ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "private static int parseInt ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public static int toInt ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public static int toInt ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return cal. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public static int getDateTime ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public static int getDateTime ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return cal. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public static int toInt ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) + c. get ( Calendar. MINUTE ) ; }"
      ],
      "mid_translation": [
        "Parse a string into an integer.",
        "Parse a writable date time into an integer.",
        "Parse a string into an integer value.",
        "Parse a string into an integer using the parser.",
        "Parse a date time into an integer."
      ],
      "output": [
        "public int parseInto ( String val ) { try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public int parseInto ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public int parseInto ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public int parseInto ( String val ) { try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public int parseInto ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return - 1 ; } }",
        "public int parseInto ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) + c. get ( Calendar. MINUTE ) + c. get ( Calendar. SECOND ) ; }",
        "public int parseInto ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public int parseInto ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return cal. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public int parseInto ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return cal. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public int parseInto ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) + c. get ( Calendar. MINUTE ) ; }",
        "public int parseInto ( String val ) throws NumberFormatException { try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { throw new NumberFormatException ( val ) ; } }",
        "public int parseInto ( String s ) throws NumberFormatException { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { throw new NumberFormatException ( s ) ; } }",
        "public int parseInto ( String val ) { try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public int parseInto ( String val ) { try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public int parseInto ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public int parseInto ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public int parseInto ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return - 1 ; } }",
        "public int parseInto ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public int parseInto ( String value ) { try { return Integer. parseInt ( value ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public int parseInto ( String s ) { try { return Integer. parseInt ( s ) ; } catch ( NumberFormatException e ) { return 0 ; } }",
        "public int parseInto ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public int parseInto ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return cal. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public int parseInto ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public int parseInto ( Date date ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; return cal. get ( Calendar. HOUR_OF_DAY ) ; }",
        "public int parseInto ( Date date ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; return c. get ( Calendar. HOUR_OF_DAY ) + c. get ( Calendar. MINUTE ) ; }"
      ]
    },
    "Time_19_/src/main/java/org/joda/time/DateTimeZone.java_900-901": {
      "loc": "900-901",
      "input": "public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal != offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal != nextAdjusted) { return offsetLocal; } } } else if (offsetLocal > 0) { long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } } return offsetAdjusted; }",
      "target": "public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal != offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal != nextAdjusted) { return offsetLocal; } } } else if (offsetLocal >= 0) { long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } } return offsetAdjusted; }",
      "function range": "880,5-911,5",
      "raw_output": [
        "public long get ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { return instant ; } return field. get ( instant ) ; }",
        "public long get ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { throw new IllegalArgumentException ( \"Field not found: \" + instant ) ; } return field. get ( instant ) ; }",
        "public long get ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { throw new IllegalArgumentException ( \"Field not found\" ) ; } return field. get ( instant ) ; }",
        "public long get ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { return 0 ; } return field. get ( instant ) ; }",
        "public long get ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { return instant ; } try { return field. get ( instant ) ; } catch ( Exception e ) { return instant ; } }",
        "public long get ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { return instant ; } return field. get ( instant ) ; }",
        "public long get ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { throw new IllegalArgumentException ( \"Field not found: \" + instant ) ; } return field. get ( instant ) ; }",
        "public long get ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { throw new IllegalArgumentException ( \"Field not found\" ) ; } return field. get ( instant ) ; }",
        "public long get ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { return 0 ; } return field. get ( instant ) ; }",
        "public long get ( long instant ) { Field field = getField ( instant ) ; return field. get ( instant ) ; }",
        "public long getOffset ( ReadableInstant instant ) { if ( instant == null ) { throw new IllegalArgumentException ( \"Instant cannot be null\" ) ; } long instantMillis = DateTimeUtils. getInstantMillis ( instant ) ; return getOffset ( instantMillis ) ; }",
        "public int getOffset ( ReadableInstant instant ) { if ( instant == null ) { return 0 ; } long instantMillis = DateTimeUtils. getInstantMillis ( instant ) ; return getOffset ( instantMillis ) ; }",
        "public long getOffset ( ReadableInstant instant ) { if ( instant == null ) { return 0 ; } long instantMillis = DateTimeUtils. getInstantMillis ( instant ) ; return getOffset ( instantMillis ) ; }",
        "public long getOffset ( ReadableInstant instant ) { if ( instant == null ) { return 0 ; } long instantMillis = DateTimeUtils. getInstantMillis ( instant ) ; if ( instantMillis == 0 ) { return 0 ; } return instantMillis - DateTimeUtils. getInstantMillis ( instantMillis ) ; }",
        "public int getOffset ( ReadableInstant instant ) { if ( instant == null ) { return 0 ; } long instantMillis = DateTimeUtils. getInstantMillis ( instant ) ; if ( instantMillis == 0 ) { return 0 ; } return getOffset ( instantMillis ) ; }",
        "public static int getLocalOffset ( final WComponent component ) { WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent == null ) { return 0 ; } return localComponent. getOffset ( ) ; }",
        "public static int getLocalOffset ( final WComponent component ) { WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent!= null ) { return localComponent. getOffset ( ) ; } return 0 ; }",
        "public static int getLocalOffset ( WComponent component ) { WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent == null ) { return 0 ; } return localComponent. getOffset ( ) ; }",
        "public static int getLocalComponentOffset ( final WComponent component ) { WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent == null ) { return 0 ; } return localComponent. getOffset ( ) ; }",
        "public static int getLocalOffset ( WComponent component ) { WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent!= null ) { return localComponent. getOffset ( ) ; } return 0 ; }",
        "public static int getOffset ( final WComponent component ) { if ( component == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } WComponent localComponent = component. getLocalComponent ( ) ; if ( localComponent == null ) { throw new IllegalArgumentException ( \"The local component may not be null\" ) ; } return localComponent. getOffset ( ) ; }",
        "public static int getOffset ( final WComponent component ) { if ( component == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent == null ) { throw new IllegalArgumentException ( \"The local component may not be null\" ) ; } return localComponent. getOffset ( ) ; }",
        "public static int getOffset ( final WComponent component ) { if ( component == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } return localComponent. getOffset ( ) ; }",
        "public static int getOffset ( final WComponent component ) { if ( component == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } WComponent localComponent = component. getLocalComponent ( ) ; if ( localComponent == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } return localComponent. getOffset ( localComponent ) ; }",
        "public static int getOffset ( final WComponent component ) { if ( component == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } WComponent localComponent = component. getLocalComponent ( ) ; if ( localComponent == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } return localComponent. getOffset ( ) ; }"
      ],
      "mid_translation": [
        "Returns the offset from the local component of the specified local instant.",
        "Returns the offset of the local component of the specified local instant.",
        "Gets the offset from the local instant.",
        "Returns the offset of the local component of the specified local component.",
        "Returns the offset from the local component of the specified local component."
      ],
      "output": [
        "public long getOffsetFromLocal ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { return instant ; } return field. get ( instant ) ; }",
        "public long getOffsetFromLocal ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { throw new IllegalArgumentException ( \"Field not found: \" + instant ) ; } return field. get ( instant ) ; }",
        "public long getOffsetFromLocal ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { throw new IllegalArgumentException ( \"Field not found\" ) ; } return field. get ( instant ) ; }",
        "public long getOffsetFromLocal ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { return 0 ; } return field. get ( instant ) ; }",
        "public long getOffsetFromLocal ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { return instant ; } try { return field. get ( instant ) ; } catch ( Exception e ) { return instant ; } }",
        "public long getOffsetFromLocal ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { return instant ; } return field. get ( instant ) ; }",
        "public long getOffsetFromLocal ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { throw new IllegalArgumentException ( \"Field not found: \" + instant ) ; } return field. get ( instant ) ; }",
        "public long getOffsetFromLocal ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { throw new IllegalArgumentException ( \"Field not found\" ) ; } return field. get ( instant ) ; }",
        "public long getOffsetFromLocal ( long instant ) { Field field = getField ( instant ) ; if ( field == null ) { return 0 ; } return field. get ( instant ) ; }",
        "public long getOffsetFromLocal ( long instant ) { Field field = getField ( instant ) ; return field. get ( instant ) ; }",
        "public long getOffsetFromLocal ( ReadableInstant instant ) { if ( instant == null ) { throw new IllegalArgumentException ( \"Instant cannot be null\" ) ; } long instantMillis = DateTimeUtils. getInstantMillis ( instant ) ; return getOffset ( instantMillis ) ; }",
        "public int getOffsetFromLocal ( ReadableInstant instant ) { if ( instant == null ) { return 0 ; } long instantMillis = DateTimeUtils. getInstantMillis ( instant ) ; return getOffset ( instantMillis ) ; }",
        "public long getOffsetFromLocal ( ReadableInstant instant ) { if ( instant == null ) { return 0 ; } long instantMillis = DateTimeUtils. getInstantMillis ( instant ) ; return getOffset ( instantMillis ) ; }",
        "public long getOffsetFromLocal ( ReadableInstant instant ) { if ( instant == null ) { return 0 ; } long instantMillis = DateTimeUtils. getInstantMillis ( instant ) ; if ( instantMillis == 0 ) { return 0 ; } return instantMillis - DateTimeUtils. getInstantMillis ( instantMillis ) ; }",
        "public int getOffsetFromLocal ( ReadableInstant instant ) { if ( instant == null ) { return 0 ; } long instantMillis = DateTimeUtils. getInstantMillis ( instant ) ; if ( instantMillis == 0 ) { return 0 ; } return getOffset ( instantMillis ) ; }",
        "public int getOffsetFromLocal ( final WComponent component ) { WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent == null ) { return 0 ; } return localComponent. getOffset ( ) ; }",
        "public int getOffsetFromLocal ( final WComponent component ) { WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent!= null ) { return localComponent. getOffset ( ) ; } return 0 ; }",
        "public int getOffsetFromLocal ( WComponent component ) { WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent == null ) { return 0 ; } return localComponent. getOffset ( ) ; }",
        "public int getOffsetFromLocal ( final WComponent component ) { WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent == null ) { return 0 ; } return localComponent. getOffset ( ) ; }",
        "public int getOffsetFromLocal ( WComponent component ) { WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent!= null ) { return localComponent. getOffset ( ) ; } return 0 ; }",
        "public int getOffsetFromLocal ( final WComponent component ) { if ( component == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } WComponent localComponent = component. getLocalComponent ( ) ; if ( localComponent == null ) { throw new IllegalArgumentException ( \"The local component may not be null\" ) ; } return localComponent. getOffset ( ) ; }",
        "public int getOffsetFromLocal ( final WComponent component ) { if ( component == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent == null ) { throw new IllegalArgumentException ( \"The local component may not be null\" ) ; } return localComponent. getOffset ( ) ; }",
        "public int getOffsetFromLocal ( final WComponent component ) { if ( component == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } WComponent localComponent = getLocalComponent ( component ) ; if ( localComponent == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } return localComponent. getOffset ( ) ; }",
        "public int getOffsetFromLocal ( final WComponent component ) { if ( component == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } WComponent localComponent = component. getLocalComponent ( ) ; if ( localComponent == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } return localComponent. getOffset ( localComponent ) ; }",
        "public int getOffsetFromLocal ( final WComponent component ) { if ( component == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } WComponent localComponent = component. getLocalComponent ( ) ; if ( localComponent == null ) { throw new IllegalArgumentException ( \"The component may not be null\" ) ; } return localComponent. getOffset ( ) ; }"
      ]
    },
    "Chart_4_source/org/jfree/chart/plot/XYPlot.java_4493-4493": {
      "loc": "4493-4493",
      "input": "public Range getDataRange(ValueAxis axis) { Range result = null; List mappedDatasets = new ArrayList(); List includedAnnotations = new ArrayList(); boolean isDomainAxis = true; int domainIndex = getDomainAxisIndex(axis); if (domainIndex >= 0) { isDomainAxis = true; mappedDatasets.addAll(getDatasetsMappedToDomainAxis( new Integer(domainIndex))); if (domainIndex == 0) { Iterator iterator = this.annotations.iterator(); while (iterator.hasNext()) { XYAnnotation annotation = (XYAnnotation) iterator.next(); if (annotation instanceof XYAnnotationBoundsInfo) { includedAnnotations.add(annotation); } } } } int rangeIndex = getRangeAxisIndex(axis); if (rangeIndex >= 0) { isDomainAxis = false; mappedDatasets.addAll(getDatasetsMappedToRangeAxis( new Integer(rangeIndex))); if (rangeIndex == 0) { Iterator iterator = this.annotations.iterator(); while (iterator.hasNext()) { XYAnnotation annotation = (XYAnnotation) iterator.next(); if (annotation instanceof XYAnnotationBoundsInfo) { includedAnnotations.add(annotation); } } } } Iterator iterator = mappedDatasets.iterator(); while (iterator.hasNext()) { XYDataset d = (XYDataset) iterator.next(); if (d != null) { XYItemRenderer r = getRendererForDataset(d); if (isDomainAxis) { if (r != null) { result = Range.combine(result, r.findDomainBounds(d)); } else { result = Range.combine(result, DatasetUtilities.findDomainBounds(d)); } } else { if (r != null) { result = Range.combine(result, r.findRangeBounds(d)); } else { result = Range.combine(result, DatasetUtilities.findRangeBounds(d)); } } Collection c = r.getAnnotations(); Iterator i = c.iterator(); while (i.hasNext()) { XYAnnotation a = (XYAnnotation) i.next(); if (a instanceof XYAnnotationBoundsInfo) { includedAnnotations.add(a); } } } } Iterator it = includedAnnotations.iterator(); while (it.hasNext()) { XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next(); if (xyabi.getIncludeInDataBounds()) { if (isDomainAxis) { result = Range.combine(result, xyabi.getXRange()); } else { result = Range.combine(result, xyabi.getYRange()); } } } return result; }",
      "target": "public Range getDataRange(ValueAxis axis) { Range result = null; List mappedDatasets = new ArrayList(); List includedAnnotations = new ArrayList(); boolean isDomainAxis = true; int domainIndex = getDomainAxisIndex(axis); if (domainIndex >= 0) { isDomainAxis = true; mappedDatasets.addAll(getDatasetsMappedToDomainAxis( new Integer(domainIndex))); if (domainIndex == 0) { Iterator iterator = this.annotations.iterator(); while (iterator.hasNext()) { XYAnnotation annotation = (XYAnnotation) iterator.next(); if (annotation instanceof XYAnnotationBoundsInfo) { includedAnnotations.add(annotation); } } } } int rangeIndex = getRangeAxisIndex(axis); if (rangeIndex >= 0) { isDomainAxis = false; mappedDatasets.addAll(getDatasetsMappedToRangeAxis( new Integer(rangeIndex))); if (rangeIndex == 0) { Iterator iterator = this.annotations.iterator(); while (iterator.hasNext()) { XYAnnotation annotation = (XYAnnotation) iterator.next(); if (annotation instanceof XYAnnotationBoundsInfo) { includedAnnotations.add(annotation); } } } } Iterator iterator = mappedDatasets.iterator(); while (iterator.hasNext()) { XYDataset d = (XYDataset) iterator.next(); if (d != null) { XYItemRenderer r = getRendererForDataset(d); if (isDomainAxis) { if (r != null) { result = Range.combine(result, r.findDomainBounds(d)); } else { result = Range.combine(result, DatasetUtilities.findDomainBounds(d)); } } else { if (r != null) { result = Range.combine(result, r.findRangeBounds(d)); } else { result = Range.combine(result, DatasetUtilities.findRangeBounds(d)); } } if (r != null) { Collection c = r.getAnnotations(); Iterator i = c.iterator(); while (i.hasNext()) { XYAnnotation a = (XYAnnotation) i.next(); if (a instanceof XYAnnotationBoundsInfo) { includedAnnotations.add(a); } } } } } Iterator it = includedAnnotations.iterator(); while (it.hasNext()) { XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next(); if (xyabi.getIncludeInDataBounds()) { if (isDomainAxis) { result = Range.combine(result, xyabi.getXRange()); } else { result = Range.combine(result, xyabi.getYRange()); } } } return result; }",
      "function range": "4425,5-4519,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Closure_119_src/com/google/javascript/jscomp/GlobalNamespace.java_366-366": {
      "loc": "366-366",
      "input": "public void collect(JSModule module, Scope scope, Node n) { Node parent = n.getParent(); String name; boolean isSet = false; Name.Type type = Name.Type.OTHER; boolean isPropAssign = false; switch (n.getType()) { case Token.GETTER_DEF: case Token.SETTER_DEF: case Token.STRING_KEY: name = null; if (parent != null && parent.isObjectLit()) { name = getNameForObjLitKey(n); } if (name == null) { return; } isSet = true; switch (n.getType()) { case Token.STRING_KEY: type = getValueType(n.getFirstChild()); break; case Token.GETTER_DEF: type = Name.Type.GET; break; case Token.SETTER_DEF: type = Name.Type.SET; break; default: throw new IllegalStateException(\"unexpected:\" + n); } break; case Token.NAME: if (parent != null) { switch (parent.getType()) { case Token.VAR: isSet = true; Node rvalue = n.getFirstChild(); type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue); break; case Token.ASSIGN: if (parent.getFirstChild() == n) { isSet = true; type = getValueType(n.getNext()); } break; case Token.GETPROP: return; case Token.FUNCTION: Node gramps = parent.getParent(); if (gramps == null || NodeUtil.isFunctionExpression(parent)) { return; } isSet = true; type = Name.Type.FUNCTION; break; case Token.INC: case Token.DEC: isSet = true; type = Name.Type.OTHER; break; default: if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) { isSet = true; type = Name.Type.OTHER; } } } name = n.getString(); break; case Token.GETPROP: if (parent != null) { switch (parent.getType()) { case Token.ASSIGN: if (parent.getFirstChild() == n) { isSet = true; type = getValueType(n.getNext()); isPropAssign = true; } break; case Token.INC: case Token.DEC: isSet = true; type = Name.Type.OTHER; break; case Token.GETPROP: return; default: if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) { isSet = true; type = Name.Type.OTHER; } } } name = n.getQualifiedName(); if (name == null) { return; } break; default: return; } if (!isGlobalNameReference(name, scope)) { return; } if (isSet) { if (isGlobalScope(scope)) { handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type); } else { handleSetFromLocal(module, scope, n, parent, name); } } else { handleGet(module, scope, n, parent, name); } }",
      "target": "public void collect(JSModule module, Scope scope, Node n) { Node parent = n.getParent(); String name; boolean isSet = false; Name.Type type = Name.Type.OTHER; boolean isPropAssign = false; switch (n.getType()) { case Token.GETTER_DEF: case Token.SETTER_DEF: case Token.STRING_KEY: name = null; if (parent != null && parent.isObjectLit()) { name = getNameForObjLitKey(n); } if (name == null) { return; } isSet = true; switch (n.getType()) { case Token.STRING_KEY: type = getValueType(n.getFirstChild()); break; case Token.GETTER_DEF: type = Name.Type.GET; break; case Token.SETTER_DEF: type = Name.Type.SET; break; default: throw new IllegalStateException(\"unexpected:\" + n); } break; case Token.NAME: if (parent != null) { switch (parent.getType()) { case Token.VAR: isSet = true; Node rvalue = n.getFirstChild(); type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue); break; case Token.ASSIGN: if (parent.getFirstChild() == n) { isSet = true; type = getValueType(n.getNext()); } break; case Token.GETPROP: return; case Token.FUNCTION: Node gramps = parent.getParent(); if (gramps == null || NodeUtil.isFunctionExpression(parent)) { return; } isSet = true; type = Name.Type.FUNCTION; break; case Token.CATCH: case Token.INC: case Token.DEC: isSet = true; type = Name.Type.OTHER; break; default: if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) { isSet = true; type = Name.Type.OTHER; } } } name = n.getString(); break; case Token.GETPROP: if (parent != null) { switch (parent.getType()) { case Token.ASSIGN: if (parent.getFirstChild() == n) { isSet = true; type = getValueType(n.getNext()); isPropAssign = true; } break; case Token.INC: case Token.DEC: isSet = true; type = Name.Type.OTHER; break; case Token.GETPROP: return; default: if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) { isSet = true; type = Name.Type.OTHER; } } } name = n.getQualifiedName(); if (name == null) { return; } break; default: return; } if (!isGlobalNameReference(name, scope)) { return; } if (isSet) { if (isGlobalScope(scope)) { handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type); } else { handleSetFromLocal(module, scope, n, parent, name); } } else { handleGet(module, scope, n, parent, name); } }",
      "function range": "306,5-430,5",
      "raw_output": [
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long",
        "Too long"
      ],
      "mid_translation": [
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long",
        "Input too long"
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    "Closure_77_src/com/google/javascript/jscomp/CodeGenerator.java_967-967": {
      "loc": "967-967",
      "input": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
      "target": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
      "function range": "956,3-1025,3",
      "raw_output": [
        "public static String js ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; if ( i < str. length ( ) - 1 ) { sb. append ('' ) ; } } return sb. toString ( ) ; }",
        "public static String js ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; } return sb. toString ( ) ; }",
        "public String toJavaScript ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJavaScript ( ) ) ; } return sb. toString ( ) ; }",
        "public String toJavaScriptString ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJavaScriptString ( ) ) ; } return sb. toString ( ) ; }",
        "public static String toJavaScriptString ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; } return sb. toString ( ) ; }",
        "public static String js ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String js ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; if ( i < str. length ( ) - 1 ) { sb. append ('' ) ; } } return sb. toString ( ) ; }",
        "public static String js ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String js ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; if ( i < str. length ( ) - 1 ) { sb. append ( \"\\n\" ) ; } } return sb. toString ( ) ; }",
        "public static String js ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; } return sb. toString ( ) ; }",
        "public String toJavaScriptString ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJavaScriptString ( ) ) ; } return sb. toString ( ) ; }",
        "public String toJavaScript ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJavaScript ( ) ) ; } return sb. toString ( ) ; }",
        "public String toJSString ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJSString ( ) ) ; } return sb. toString ( ) ; }",
        "public String toJson ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJson ( ) ) ; } return sb. toString ( ) ; }",
        "public String toJson ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( data [ i ] ) ; } return sb. toString ( ) ; }",
        "public static String jsEscape ( String value ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String jsEscape ( String value ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String jsEscape ( String value ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String jsEscape ( String value ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "public static String jsEscape ( String value ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "private static String escapeSpecialCharacters ( String source ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < source. length ( ) ; i ++ ) { char c = source. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "private static String escapeSpecialCharacters ( String source ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < source. length ( ) ; i ++ ) { char c = source. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "private static String escapeSpecialCharacters ( String source ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < source. length ( ) ; i ++ ) { char c = source. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "private static String escapeSpecialCharacters ( String source ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < source. length ( ) ; i ++ ) { char c = source. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "private static String escapeSpecialCharacters ( String source ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < source. length ( ) ; i ++ ) { char c = source. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }"
      ],
      "mid_translation": [
        "Returns the JavaScript representation of the given string.",
        "Returns the JavaScript representation of a given string.",
        "Returns the JavaScript representation of a string.",
        "Method to escape special characters in JavaScript.",
        "Method to escape special characters in JavaScript source code"
      ],
      "output": [
        "static String strEscape ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; if ( i < str. length ( ) - 1 ) { sb. append ('' ) ; } } return sb. toString ( ) ; }",
        "static String strEscape ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; } return sb. toString ( ) ; }",
        "static String strEscape ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJavaScript ( ) ) ; } return sb. toString ( ) ; }",
        "static String strEscape ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJavaScriptString ( ) ) ; } return sb. toString ( ) ; }",
        "static String strEscape ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; } return sb. toString ( ) ; }",
        "static String strEscape ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "static String strEscape ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; if ( i < str. length ( ) - 1 ) { sb. append ('' ) ; } } return sb. toString ( ) ; }",
        "static String strEscape ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( c =='' ) { sb. append ('' ) ; } else { sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "static String strEscape ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; if ( i < str. length ( ) - 1 ) { sb. append ( \"\\n\" ) ; } } return sb. toString ( ) ; }",
        "static String strEscape ( String str ) { if ( str == null ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { sb. append ( str. charAt ( i ) ) ; } return sb. toString ( ) ; }",
        "static String strEscape ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJavaScriptString ( ) ) ; } return sb. toString ( ) ; }",
        "static String strEscape ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJavaScript ( ) ) ; } return sb. toString ( ) ; }",
        "static String strEscape ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJSString ( ) ) ; } return sb. toString ( ) ; }",
        "static String strEscape ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { sb. append ( elements [ i ]. toJson ( ) ) ; } return sb. toString ( ) ; }",
        "static String strEscape ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { sb. append ( data [ i ] ) ; } return sb. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "static String strEscape ( String value ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < value. length ( ) ; i ++ ) { char c = value. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "static String strEscape ( String source ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < source. length ( ) ; i ++ ) { char c = source. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String source ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < source. length ( ) ; i ++ ) { char c = source. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&amp;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String source ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < source. length ( ) ; i ++ ) { char c = source. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }",
        "static String strEscape ( String source ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < source. length ( ) ; i ++ ) { char c = source. charAt ( i ) ; switch ( c ) { case'' : sb. append ( \"&lt;\" ) ; break ; case'' : sb. append ( \"&gt;\" ) ; break ; case'' : sb. append ( \"&amp;\" ) ; break ; case'' : sb. append ( \"&quot;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; case'' : sb. append ( \"&apos;\" ) ; break ; default : sb. append ( c ) ; } } return sb. toString ( ) ; }",
        "static String strEscape ( String source ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < source. length ( ) ; i ++ ) { char c = source. charAt ( i ) ; switch ( c ) { case'' : builder. append ( \"&lt;\" ) ; break ; case'' : builder. append ( \"&gt;\" ) ; break ; case'' : builder. append ( \"&quot;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; case'' : builder. append ( \"&apos;\" ) ; break ; default : builder. append ( c ) ; } } return builder. toString ( ) ; }"
      ]
    }
  },
  "model": "plbart-java-nl-java",
  "seed": 506604
}