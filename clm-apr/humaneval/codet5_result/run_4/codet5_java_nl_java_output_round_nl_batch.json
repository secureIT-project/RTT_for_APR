{
  "config": "CODET5_REFINE_CODEFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j); \n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
      "target": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = Math.abs(numbers.get(i) - numbers.get(j)); \n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "6,5-15,5",
      "raw_output": [
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0.0 ) { return true ; } } return false ; }",
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0!= null ) { return true ; } } return false ; }",
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0!= null ) { return! loc0. isClosed ( ) ; } } return false ; }",
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0 ) { return true ; } } return false ; }",
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0.0 ) { return true ; } } } return false ; }",
        "boolean function ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } } return true ; }",
        "boolean function ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } if ( loc0 < arg1 ) { return true ; } } return true ; }",
        "boolean function ( List arg0, double arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > arg1 ) { return false ; } } return true ; }",
        "boolean function ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } else if ( loc0 < arg1 ) { return true ; } } return true ; }",
        "boolean function ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } if ( loc0 < arg1 ) { return false ; } } return true ; }",
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0.0 ) { return true ; } } return false ; }",
        "boolean function ( List < Double > arg0 ) { boolean loc0 = true ; for ( Double loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = false ; } } return loc0 ; }",
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0.0 ) return true ; } return false ; }",
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0 ) { return true ; } } return false ; }",
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( Double. isNaN ( loc0 ) ) { return false ; } } return true ; }",
        "boolean function ( List arg0, double arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > arg1 ) { return false ; } } return true ; }",
        "boolean function ( List arg0, double arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > arg1 ) { return true ; } } return false ; }",
        "boolean function ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } } return true ; }",
        "boolean function ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } if ( loc0 < arg1 ) { return true ; } } return true ; }",
        "boolean function ( List arg0, double arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( Double. isNaN ( arg0. get ( loc0 ) ) ) { return false ; } } return true ; }",
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( Double. isInfinite ( loc0 ) || Double. isNaN ( loc0 ) ) { return false ; } } return true ; }",
        "boolean function ( List < Double > arg0 ) { boolean loc0 = true ; for ( Double loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = false ; } } return loc0 ; }",
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0.0 ) { return true ; } } return false ; }",
        "boolean function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( Double. isNaN ( loc0 ) ) { return false ; } } return true ; }",
        "boolean function ( List < Double > arg0 ) { boolean loc0 = true ; for ( Double loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = false ; } } if ( loc0 ) { return false ; } return true ; }"
      ],
      "mid_translation": [
        "has_close_elements This method checks if a list of doubles has at least one close element.",
        "has_close_elements This method returns true if the list of doubles is close to threshold.",
        "Check if a list of doubles has at least one close element.",
        "has_close_elements This method checks if the list of doubles is close to threshold.",
        "Returns true if the list of doubles has at least one close element."
      ],
      "output": [
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0.0 ) { return true ; } } return false ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0!= null ) { return true ; } } return false ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0!= null ) { return! loc0. isClosed ( ) ; } } return false ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0 ) { return true ; } } return false ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0.0 ) { return true ; } } } return false ; }",
        "public static boolean has_close_elements ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } } return true ; }",
        "public static boolean has_close_elements ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } if ( loc0 < arg1 ) { return true ; } } return true ; }",
        "public static boolean has_close_elements ( List arg0, double arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > arg1 ) { return false ; } } return true ; }",
        "public static boolean has_close_elements ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } else if ( loc0 < arg1 ) { return true ; } } return true ; }",
        "public static boolean has_close_elements ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } if ( loc0 < arg1 ) { return false ; } } return true ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0.0 ) { return true ; } } return false ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { boolean loc0 = true ; for ( Double loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = false ; } } return loc0 ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0.0 ) return true ; } return false ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0 ) { return true ; } } return false ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( Double. isNaN ( loc0 ) ) { return false ; } } return true ; }",
        "public static boolean has_close_elements ( List arg0, double arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > arg1 ) { return false ; } } return true ; }",
        "public static boolean has_close_elements ( List arg0, double arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > arg1 ) { return true ; } } return false ; }",
        "public static boolean has_close_elements ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } } return true ; }",
        "public static boolean has_close_elements ( List < Double > arg0, double arg1 ) { for ( Double loc0 : arg0 ) { if ( loc0 > arg1 ) { return false ; } if ( loc0 < arg1 ) { return true ; } } return true ; }",
        "public static boolean has_close_elements ( List arg0, double arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( Double. isNaN ( arg0. get ( loc0 ) ) ) { return false ; } } return true ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( Double. isInfinite ( loc0 ) || Double. isNaN ( loc0 ) ) { return false ; } } return true ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { boolean loc0 = true ; for ( Double loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = false ; } } return loc0 ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0 > 0.0 ) { return true ; } } return false ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( Double. isNaN ( loc0 ) ) { return false ; } } return true ; }",
        "public static boolean has_close_elements ( List < Double > arg0 ) { boolean loc0 = true ; for ( Double loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = false ; } } if ( loc0 ) { return false ; } return true ; }"
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else { \n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
      "target": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){ \n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
      "function range": "7,5-27,5",
      "raw_output": [
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0!= null ) { for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0!= null ) { for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( loc1. trim ( ) ) ; } } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) { return Collections. emptyList ( ) ; } List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; if ( arg0!= null ) { for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) { return Collections. emptyList ( ) ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { String [ ] loc0 = arg0. split ( ')' ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { String [ ] loc0 = arg0. split ( ')' ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { String [ ] loc0 = StringUtils. split ( arg0, \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) { return Collections. emptyList ( ) ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "void function ( ParenthesisGroup arg0 ) { ParenthesisGroup [ ] loc0 = arg0. getParenthesisGroups ( ) ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { if ( loc0 [ loc1 ]. equals ( \"srini_string\" ) ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } } }",
        "void function ( ParenthesisGroup arg0 ) { ParenthesisGroup [ ] loc0 = arg0. getParenthesisGroups ( ) ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { if ( loc0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 [ loc1 ] = arg0 [ loc1 ] ; } }",
        "void function ( ParenthesisGroup arg0 ) { ParenthesisGroup [ ] loc0 = arg0. getParenthesisGroups ( ) ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) if ( loc0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 [ loc1 ] = arg0 [ loc1 ] ; }",
        "void function ( ParenthesisGroup arg0 ) { ParenthesisGroup [ ] loc0 = arg0. getParenthesisGroups ( ) ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) if ( loc0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 [ loc1 ] = arg0 [ loc1 ]. copy ( ) ; }",
        "void function ( ParenthesisGroup arg0 ) { ParenthesisGroup [ ] loc0 = arg0. getParenthesisGroups ( ) ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { ParenthesisGroup loc2 = ( ParenthesisGroup ) loc0 [ loc1 ] ; loc2. separate_paren_groups ( ) ; } }"
      ],
      "mid_translation": [
        "Separates a string of parentheses into a list of strings.",
        "separate_paren_groups Separates a string of parentheses into a list of strings.",
        "separate_paren_groups This method separates a string of parentheses into a list of strings",
        "separate_paren_groups Separates a string of parentheses into a list of strings",
        "separate_paren_groups Method."
      ],
      "output": [
        "public static List < String > separate_paren_groups ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0!= null ) { for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } } return loc0 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0!= null ) { for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( loc1. trim ( ) ) ; } } return loc0 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { if ( arg0 == null ) { return Collections. emptyList ( ) ; } List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } } return loc0 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; if ( arg0!= null ) { for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } } return loc0 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { if ( arg0 == null ) { return Collections. emptyList ( ) ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { String [ ] loc0 = arg0. split ( ')' ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { String [ ] loc0 = arg0. split ( ')' ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { String [ ] loc0 = StringUtils. split ( arg0, \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { if ( arg0 == null ) { return Collections. emptyList ( ) ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static List < String > separate_paren_groups ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( loc2 ) ; } return loc1 ; }",
        "public static void separate_paren_groups ( ParenthesisGroup arg0 ) { ParenthesisGroup [ ] loc0 = arg0. getParenthesisGroups ( ) ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { if ( loc0 [ loc1 ]. equals ( \"srini_string\" ) ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } } }",
        "public static void separate_paren_groups ( ParenthesisGroup arg0 ) { ParenthesisGroup [ ] loc0 = arg0. getParenthesisGroups ( ) ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { if ( loc0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 [ loc1 ] = arg0 [ loc1 ] ; } }",
        "public static void separate_paren_groups ( ParenthesisGroup arg0 ) { ParenthesisGroup [ ] loc0 = arg0. getParenthesisGroups ( ) ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) if ( loc0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 [ loc1 ] = arg0 [ loc1 ] ; }",
        "public static void separate_paren_groups ( ParenthesisGroup arg0 ) { ParenthesisGroup [ ] loc0 = arg0. getParenthesisGroups ( ) ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) if ( loc0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 [ loc1 ] = arg0 [ loc1 ]. copy ( ) ; }",
        "public static void separate_paren_groups ( ParenthesisGroup arg0 ) { ParenthesisGroup [ ] loc0 = arg0. getParenthesisGroups ( ) ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { ParenthesisGroup loc2 = ( ParenthesisGroup ) loc0 [ loc1 ] ; loc2. separate_paren_groups ( ) ; } }"
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n    return number / 1.0; \n}",
      "target": "public static double truncate_number(double number) {\n    return number % 1.0; \n}",
      "function range": "4,5-6,5",
      "raw_output": [
        "BigDecimal function ( Number arg0 ) { return new BigDecimal ( arg0. toString ( ) ) ; }",
        "BigDecimal function ( long arg0 ) { return new BigDecimal ( arg0. toString ( ) ) ; }",
        "BigDecimal function ( long arg0 ) { return new BigDecimal ( arg0 ) ; }",
        "BigDecimal function ( double arg0 ) { return new BigDecimal ( arg0 ) ; }",
        "BigDecimal function ( long arg0 ) { if ( arg0 < 0 ) { throw new ArithmeticException ( ) ; } return new BigDecimal ( arg0 ) ; }",
        "BigDecimal function ( long arg0 ) { if ( arg0 < 0.0D ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new BigDecimal ( arg0 ) ; }",
        "BigDecimal function ( Number arg0 ) { if ( arg0 == null ) { return null ; } return new BigDecimal ( arg0. toString ( ) ) ; }",
        "BigDecimal function ( long arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; } return new BigDecimal ( arg0 ) ; }",
        "BigDecimal function ( long arg0 ) { if ( arg0 >= 0.0D ) { return new BigDecimal ( arg0 ) ; } else { return new BigDecimal ( arg0 ) ; } }",
        "BigDecimal function ( Number arg0 ) { if ( arg0!= null ) { return new BigDecimal ( arg0. toString ( ) ) ; } else { return new BigDecimal ( arg0 ) ; } }",
        "BigDecimal function ( Number arg0 ) { return new BigDecimal ( arg0. toString ( ) ) ; }",
        "BigDecimal function ( Number arg0 ) { if ( arg0 == null ) { return null ; } return new BigDecimal ( arg0. toString ( ) ) ; }",
        "BigDecimal function ( Number arg0 ) { BigDecimal loc0 = new BigDecimal ( arg0. toString ( ) ) ; return loc0. multiply ( \"srini_string\" ) ; }",
        "BigDecimal function ( Number arg0 ) { BigDecimal loc0 = new BigDecimal ( arg0. toString ( ) ) ; return loc0. multiply ( BigDecimal. valueOf ( 10 ) ) ; }",
        "BigDecimal function ( Number arg0 ) { return new BigDecimal ( arg0. toString ( ) ). multiply ( BigDecimal. valueOf ( 10 ) ) ; }",
        "BigDecimal function ( Number arg0 ) { if ( arg0 == null ) { return null ; } return new BigDecimal ( arg0. toString ( ) ) ; }",
        "BigDecimal function ( Number arg0 ) { if ( arg0!= null ) { return new BigDecimal ( arg0. toString ( ) ) ; } else { return null ; } }",
        "BigDecimal function ( long arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new BigDecimal ( arg0 ) ; }",
        "BigDecimal function ( Number arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( ) ; } return new BigDecimal ( arg0. toString ( ) ) ; }",
        "BigDecimal function ( Number arg0 ) { if ( arg0!= null ) { return new BigDecimal ( arg0. toString ( ) ) ; } return new BigDecimal ( 0 ) ; }",
        "BigDecimal function ( long arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new BigDecimal ( arg0 ) ; }",
        "BigDecimal function ( Number arg0 ) { if ( arg0 == null ) { return null ; } return new BigDecimal ( arg0. toString ( ) ) ; }",
        "BigDecimal function ( Number arg0 ) { return new BigDecimal ( arg0. toString ( ) ) ; }",
        "BigDecimal function ( Number arg0 ) { if ( arg0!= null ) { return new BigDecimal ( arg0. toString ( ) ) ; } else { return new BigDecimal ( 1 ) ; } }",
        "BigDecimal function ( Number arg0 ) { if ( arg0!= null ) { return new BigDecimal ( arg0. toString ( ) ) ; } else { return null ; } }"
      ],
      "mid_translation": [
        "Truncate a number.",
        "Truncate a number to 1. 0.",
        "Truncates a number.",
        "Truncate a number to 0. 0.",
        "Truncate a number to 1. 0"
      ],
      "output": [
        "public static BigDecimal truncate_number ( Number arg0 ) { return new BigDecimal ( arg0. toString ( ) ) ; }",
        "public static BigDecimal truncate_number ( long arg0 ) { return new BigDecimal ( arg0. toString ( ) ) ; }",
        "public static BigDecimal truncate_number ( long arg0 ) { return new BigDecimal ( arg0 ) ; }",
        "public static BigDecimal truncate_number ( double arg0 ) { return new BigDecimal ( arg0 ) ; }",
        "public static BigDecimal truncate_number ( long arg0 ) { if ( arg0 < 0 ) { throw new ArithmeticException ( ) ; } return new BigDecimal ( arg0 ) ; }",
        "public static BigDecimal truncate_number ( long arg0 ) { if ( arg0 < 0.0D ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new BigDecimal ( arg0 ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { if ( arg0 == null ) { return null ; } return new BigDecimal ( arg0. toString ( ) ) ; }",
        "public static BigDecimal truncate_number ( long arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; } return new BigDecimal ( arg0 ) ; }",
        "public static BigDecimal truncate_number ( long arg0 ) { if ( arg0 >= 0.0D ) { return new BigDecimal ( arg0 ) ; } else { return new BigDecimal ( arg0 ) ; } }",
        "public static BigDecimal truncate_number ( Number arg0 ) { if ( arg0!= null ) { return new BigDecimal ( arg0. toString ( ) ) ; } else { return new BigDecimal ( arg0 ) ; } }",
        "public static BigDecimal truncate_number ( Number arg0 ) { return new BigDecimal ( arg0. toString ( ) ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { if ( arg0 == null ) { return null ; } return new BigDecimal ( arg0. toString ( ) ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { BigDecimal loc0 = new BigDecimal ( arg0. toString ( ) ) ; return loc0. multiply ( \"srini_string\" ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { BigDecimal loc0 = new BigDecimal ( arg0. toString ( ) ) ; return loc0. multiply ( BigDecimal. valueOf ( 10 ) ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { return new BigDecimal ( arg0. toString ( ) ). multiply ( BigDecimal. valueOf ( 10 ) ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { if ( arg0 == null ) { return null ; } return new BigDecimal ( arg0. toString ( ) ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { if ( arg0!= null ) { return new BigDecimal ( arg0. toString ( ) ) ; } else { return null ; } }",
        "public static BigDecimal truncate_number ( long arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new BigDecimal ( arg0 ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( ) ; } return new BigDecimal ( arg0. toString ( ) ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { if ( arg0!= null ) { return new BigDecimal ( arg0. toString ( ) ) ; } return new BigDecimal ( 0 ) ; }",
        "public static BigDecimal truncate_number ( long arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new BigDecimal ( arg0 ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { if ( arg0 == null ) { return null ; } return new BigDecimal ( arg0. toString ( ) ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { return new BigDecimal ( arg0. toString ( ) ) ; }",
        "public static BigDecimal truncate_number ( Number arg0 ) { if ( arg0!= null ) { return new BigDecimal ( arg0. toString ( ) ) ; } else { return new BigDecimal ( 1 ) ; } }",
        "public static BigDecimal truncate_number ( Number arg0 ) { if ( arg0!= null ) { return new BigDecimal ( arg0. toString ( ) ) ; } else { return null ; } }"
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance > 0){ \n            return false; \n        } \n    } \n    return true; \n}",
      "target": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){ \n            return true; \n        } \n    } \n    return false; \n}",
      "function range": "6,5-15,5",
      "raw_output": [
        "boolean function ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( arg1. contains ( loc0 ) ) { return true ; } } return false ; }",
        "boolean function ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) > 0 ) { return true ; } } return false ; }",
        "boolean function ( List < Operation > arg0, List < Operation > arg1 ) { for ( Operation loc0 : arg0 ) { if ( arg1. contains ( loc0 ) ) { return true ; } } return false ; }",
        "boolean function ( List < Operation > arg0, List < Operation > arg1 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperand ( ). compareTo ( arg1. getOperand ( ) ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperand ( ). compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < Operation > arg0, List < Operation > arg1 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperand ( ). compareTo ( arg1. getOperand ( ) ) > 0 ) { return true ; } } return false ; }",
        "boolean function ( List < Operation > arg0, List < Operation > arg1 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperand ( ). compareTo ( arg1. getOperand ( ) ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) > 0 ) { return true ; } } return false ; }",
        "boolean function ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < BinOp > arg0, List < BinOp > arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ). getOp ( ). compareTo ( arg1. get ( loc0 ) ) > 0 ) { return false ; } } return true ; }",
        "boolean function ( List < BinOp > arg0, List < BinOp > arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg1. get ( loc0 ). getType ( ). equals ( BinOp. class ) ) { return true ; } } return false ; }",
        "boolean function ( List < BinOp > arg0, List < BinOp > arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ). getOp ( ). compareTo ( arg1. get ( loc0 ) ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < BinOp > arg0, List < BinOp > arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ). getOp ( ). compareTo ( arg1. get ( loc0 ) ) > 0 ) { return true ; } } return false ; }",
        "boolean function ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < String > arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getClass ( ). equals ( Operation. class ) ) { return true ; } } return false ; }",
        "boolean function ( List < Op > arg0 ) { for ( Op loc0 : arg0 ) { if ( loc0. getClass ( ). getName ( ). compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperand ( ). compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < Op > arg0 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOp ( ). compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ). equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "boolean function ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperation ( ). compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) < 0 ) { return false ; } } return true ; }",
        "boolean function ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOp ( ). compareTo ( \"srini_string\" ) > 0 ) { return true ; } } return false ; }"
      ],
      "mid_translation": [
        "Check if a list of operations is below zero.",
        "Checks if a list of operations is below zero.",
        "Check if the list of operations is below zero.",
        "Returns true if the operations list is below zero.",
        "Check if the operations list is below zero."
      ],
      "output": [
        "public static boolean below_zero ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( arg1. contains ( loc0 ) ) { return true ; } } return false ; }",
        "public static boolean below_zero ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) > 0 ) { return true ; } } return false ; }",
        "public static boolean below_zero ( List < Operation > arg0, List < Operation > arg1 ) { for ( Operation loc0 : arg0 ) { if ( arg1. contains ( loc0 ) ) { return true ; } } return false ; }",
        "public static boolean below_zero ( List < Operation > arg0, List < Operation > arg1 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperand ( ). compareTo ( arg1. getOperand ( ) ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperand ( ). compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < Operation > arg0, List < Operation > arg1 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperand ( ). compareTo ( arg1. getOperand ( ) ) > 0 ) { return true ; } } return false ; }",
        "public static boolean below_zero ( List < Operation > arg0, List < Operation > arg1 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperand ( ). compareTo ( arg1. getOperand ( ) ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) > 0 ) { return true ; } } return false ; }",
        "public static boolean below_zero ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < BinOp > arg0, List < BinOp > arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ). getOp ( ). compareTo ( arg1. get ( loc0 ) ) > 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < BinOp > arg0, List < BinOp > arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg1. get ( loc0 ). getType ( ). equals ( BinOp. class ) ) { return true ; } } return false ; }",
        "public static boolean below_zero ( List < BinOp > arg0, List < BinOp > arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ). getOp ( ). compareTo ( arg1. get ( loc0 ) ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < BinOp > arg0, List < BinOp > arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ). getOp ( ). compareTo ( arg1. get ( loc0 ) ) > 0 ) { return true ; } } return false ; }",
        "public static boolean below_zero ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < String > arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getClass ( ). equals ( Operation. class ) ) { return true ; } } return false ; }",
        "public static boolean below_zero ( List < Op > arg0 ) { for ( Op loc0 : arg0 ) { if ( loc0. getClass ( ). getName ( ). compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperand ( ). compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < Op > arg0 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOp ( ). compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ). equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "public static boolean below_zero ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOperation ( ). compareTo ( \"srini_string\" ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < Op > arg0, List < Op > arg1 ) { for ( Op loc0 : arg0 ) { if ( loc0. compareTo ( arg1. get ( 0 ) ) < 0 ) { return false ; } } return true ; }",
        "public static boolean below_zero ( List < Operation > arg0 ) { for ( Operation loc0 : arg0 ) { if ( loc0. getOp ( ). compareTo ( \"srini_string\" ) > 0 ) { return true ; } } return false ; }"
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean); \n    }\n    return deviation_sum / numbers.size();\n}",
      "target": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean); \n    }\n    return deviation_sum / numbers.size();\n}",
      "function range": "6,5-17,5",
      "raw_output": [
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 ; }",
        "double function ( Number... arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += Math. abs ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 / arg0. length ; }",
        "double function ( Number... arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 / arg0. length ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += Math. abs ( loc1. doubleValue ( ) ) ; } return loc0 / arg0. length ; }",
        "float function ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 ; }",
        "float function ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 / arg0. length ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "float function ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 / arg0. length ; }",
        "float function ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += ( loc1. doubleValue ( ) - loc1. doubleValue ( ) ) / 2.0f ; } return loc0 ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 / arg0. length ; }",
        "float function ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 / arg0. length ; }",
        "float function ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "float function ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += ( loc1. doubleValue ( ) - loc1. doubleValue ( ) ) ; } return loc0 / arg0. length ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 / arg0. length ; }",
        "double function ( Number... arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 / arg0. length ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "double function ( List < Number > arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 / arg0. size ( ) ; }",
        "float function ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }"
      ],
      "mid_translation": [
        "Mean absolute deviation of a list of numbers.",
        "Returns the mean absolute deviation of a list of numbers.",
        "Calculate the mean absolute deviation of a list of numbers.",
        "Calculates the mean absolute deviation of a list of numbers.",
        "Compute the mean absolute deviation of a list of numbers."
      ],
      "output": [
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += Math. abs ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 / arg0. length ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 / arg0. length ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += Math. abs ( loc1. doubleValue ( ) ) ; } return loc0 / arg0. length ; }",
        "public static float mean_absolute_deviation ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 ; }",
        "public static float mean_absolute_deviation ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 / arg0. length ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "public static float mean_absolute_deviation ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 / arg0. length ; }",
        "public static float mean_absolute_deviation ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += ( loc1. doubleValue ( ) - loc1. doubleValue ( ) ) / 2.0f ; } return loc0 ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 / arg0. length ; }",
        "public static float mean_absolute_deviation ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 / arg0. length ; }",
        "public static float mean_absolute_deviation ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "public static float mean_absolute_deviation ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += ( loc1. doubleValue ( ) - loc1. doubleValue ( ) ) ; } return loc0 / arg0. length ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0.0 ) ; } return loc0 / arg0. length ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 / arg0. length ; }",
        "public static double mean_absolute_deviation ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }",
        "public static double mean_absolute_deviation ( List < Number > arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. doubleValue ( ) : 0 ) ; } return loc0 / arg0. size ( ) ; }",
        "public static float mean_absolute_deviation ( Number... arg0 ) { float loc0 = 0.0f ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 / arg0. length ; }"
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    for (int i = 0; i < numbers.size(); i += 1) { \n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
      "target": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    for (int i = 0; i < numbers.size() - 1; i += 1) { \n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
      "function range": "7,5-19,5",
      "raw_output": [
        "Intersperse function ( int arg0 ) { Intersperse loc0 = new Intersperse ( arg0 ) ; return loc0 ; }",
        "Intersperse function ( int arg0, int arg1 ) { Intersperse loc0 = new Intersperse ( arg0, arg1 ) ; return loc0 ; }",
        "Intersperse function ( double arg0, double arg1 ) { return new Intersperse ( arg0, arg1 ) ; }",
        "Intersperse function ( double arg0 ) { return new Intersperse ( arg0 ) ; }",
        "Intersperse function ( Long arg0 ) { return new Intersperse ( arg0 ) ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "ArrayList < Integer > function ( int... arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( ArrayList < Integer > arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Number > function ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Number > function ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < Number > function ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) loc0. add ( loc1. doubleValue ( ) ) ; return loc0 ; }",
        "List < Number > function ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Number > function ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( List < Integer > arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Intersperse.",
        "Intersperse a list of integers.",
        "Intersperse a list of numbers.",
        "Intersperse a List of integers.",
        "Intersperse a list of integers"
      ],
      "output": [
        "public static Intersperse intersperse ( int arg0 ) { Intersperse loc0 = new Intersperse ( arg0 ) ; return loc0 ; }",
        "public static Intersperse intersperse ( int arg0, int arg1 ) { Intersperse loc0 = new Intersperse ( arg0, arg1 ) ; return loc0 ; }",
        "public static Intersperse intersperse ( double arg0, double arg1 ) { return new Intersperse ( arg0, arg1 ) ; }",
        "public static Intersperse intersperse ( double arg0 ) { return new Intersperse ( arg0 ) ; }",
        "public static Intersperse intersperse ( Long arg0 ) { return new Intersperse ( arg0 ) ; }",
        "public static List < Integer > intersperse ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static int [ ] intersperse ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static List < Integer > intersperse ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static ArrayList < Integer > intersperse ( int... arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static ArrayList < Integer > intersperse ( ArrayList < Integer > arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Number > intersperse ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Number > intersperse ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < Number > intersperse ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) loc0. add ( loc1. doubleValue ( ) ) ; return loc0 ; }",
        "public static List < Number > intersperse ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Number > intersperse ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > intersperse ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > intersperse ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static int [ ] intersperse ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static List < Integer > intersperse ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static ArrayList < Integer > intersperse ( List < Integer > arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > intersperse ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static int [ ] intersperse ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static List < Integer > intersperse ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static int [ ] intersperse ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static List < Integer > intersperse ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }"
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } \n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
      "target": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else { \n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
      "function range": "7,5-24,5",
      "raw_output": [
        "Method function ( int arg0 ) { String [ ] loc0 = new String [ arg0 ] ; parse_nested_parens ( loc0, arg0 ) ; return new Method ( loc0 ) ; }",
        "void function ( Parser arg0, Method arg1 ) { String [ ] loc0 = new String [ ] { \"srini_string\" } ; parse_nested_parens ( arg0, loc0, arg1 ) ; }",
        "Method function ( int arg0 ) { String [ ] loc0 = new String [ arg0 ] ; parse_nested_parens ( loc0, arg0 ) ; return new Method ( \"srini_string\", \"srini_string\", loc0 ) ; }",
        "Method function ( int arg0 ) { String [ ] loc0 = new String [ arg0 ] ; parse_nested_parens ( loc0, arg0 ) ; return new Method ( \"srini_string\", loc0 ) ; }",
        "void function ( Parser arg0, Method arg1 ) { String [ ] loc0 = new String [ ] { \"srini_string\", \"srini_string\" } ; parse_nested_parens ( arg0, loc0, arg1 ) ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { int loc1 = arg0. indexOf ( \"srini_string\" ) ; if ( loc1 >= 0 ) { loc0. add ( arg0. substring ( 0, loc1 ) ) ; } arg0 = arg0. substring ( loc1 + 1 ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { int loc1 = arg0. indexOf ( \"srini_string\" ) ; if ( loc1 > - 1 ) { loc0. add ( arg0. substring ( 0, loc1 ) ) ; } arg0 = arg0. substring ( loc1 + 1 ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { int loc1 = arg0. indexOf ( \"srini_string\" ) ; if ( loc1 > 0 ) { loc0. add ( arg0. substring ( 0, loc1 ) ) ; } arg0 = arg0. substring ( loc1 + 1 ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2. trim ( ) ) ; } } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { int loc1 = arg0. indexOf ( \"srini_string\" ) ; if ( loc1 >= 0 ) { loc0. add ( arg0. substring ( 0, loc1 ) ) ; } arg0 = arg0. substring ( loc1 + 1 ) ; } return loc0 ; }",
        "List function ( String arg0 ) { List loc0 = new ArrayList ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ]. trim ( ) ) ; } } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { int loc1 = arg0. indexOf ( \"srini_string\" ) ; if ( loc1 > - 1 ) { loc0. add ( arg0. substring ( 0, loc1 ) ) ; } arg0 = arg0. substring ( loc1 + 1 ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2. trim ( ) ) ; } } return loc0 ; }",
        "HashMap < String, Object > function ( String arg0 ) { HashMap < String, Object > loc0 = new HashMap < String, Object > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { loc0 = new HashMap < String, Object > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. put ( loc1, loc1. trim ( ) ) ; } } return loc0 ; }",
        "Map < String, Object > function ( String arg0 ) { Map < String, Object > loc0 = new HashMap < String, Object > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { String loc1 = arg0. substring ( 1, arg0. length ( ) - 1 ) ; loc0. put ( loc1, parse ( arg0. substring ( 0, arg0. length ( ) - 1 ) ) ) ; } return loc0 ; }",
        "Map < String, Object > function ( String arg0 ) { Map < String, Object > loc0 = new HashMap < String, Object > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { String loc1 = arg0. substring ( 1, arg0. length ( ) - 1 ) ; loc0. put ( loc1, arg0. substring ( 0, loc1. length ( ) - 1 ) ) ; } return loc0 ; }",
        "HashMap < String, Object > function ( String arg0 ) { HashMap < String, Object > loc0 = new HashMap < String, Object > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { String loc1 = arg0. substring ( 1, arg0. length ( ) - 1 ) ; loc0. put ( loc1, arg0. substring ( 0, loc1. length ( ) - 1 ) ) ; } return loc0 ; }",
        "String function ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) ) { return arg0. substring ( 1, arg0. length ( ) - 1 ) ; } else if ( arg0. contains ( \"srini_string\" ) ) { return arg0. substring ( 1, arg0. length ( ) - 1 ) ; } else { return \"srini_string\" ; } }",
        "boolean function ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) ) { return true ; } String loc0 = arg0. substring ( 1, arg0. length ( ) - 1 ) ; return ( loc0. equals ( \"srini_string\" ) ) ; }",
        "void function ( String arg0 ) { while ( arg0. contains ( \"srini_string\" ) ) { String loc0 = arg0. substring ( 1, arg0. length ( ) - 1 ) ; parse_nested_parens ( loc0 ) ; } }",
        "NestedParenExpression function ( String arg0 ) { return new NestedParenExpression ( parse_nested_parens ( arg0 ) ) ; }",
        "boolean function ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) ) { return true ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; return loc0. length > 1 ; }",
        "NestedParenExpression function ( String arg0 ) { return parseNestedParen ( arg0, true ) ; }"
      ],
      "mid_translation": [
        "parse_nested_parens Method.",
        "Parses a string containing a list of nested parentheses.",
        "Parse a string containing a list of nested parentheses.",
        "Parses a string of nested parentheses.",
        "parse_nested_parens This method is used to parse a string of nested parentheses."
      ],
      "output": [
        "public static Method parse_nested_parens ( int arg0 ) { String [ ] loc0 = new String [ arg0 ] ; parse_nested_parens ( loc0, arg0 ) ; return new Method ( loc0 ) ; }",
        "public static void parse_nested_parens ( Parser arg0, Method arg1 ) { String [ ] loc0 = new String [ ] { \"srini_string\" } ; parse_nested_parens ( arg0, loc0, arg1 ) ; }",
        "public static Method parse_nested_parens ( int arg0 ) { String [ ] loc0 = new String [ arg0 ] ; parse_nested_parens ( loc0, arg0 ) ; return new Method ( \"srini_string\", \"srini_string\", loc0 ) ; }",
        "public static Method parse_nested_parens ( int arg0 ) { String [ ] loc0 = new String [ arg0 ] ; parse_nested_parens ( loc0, arg0 ) ; return new Method ( \"srini_string\", loc0 ) ; }",
        "public static void parse_nested_parens ( Parser arg0, Method arg1 ) { String [ ] loc0 = new String [ ] { \"srini_string\", \"srini_string\" } ; parse_nested_parens ( arg0, loc0, arg1 ) ; }",
        "public static List < String > parse_nested_parens ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { int loc1 = arg0. indexOf ( \"srini_string\" ) ; if ( loc1 >= 0 ) { loc0. add ( arg0. substring ( 0, loc1 ) ) ; } arg0 = arg0. substring ( loc1 + 1 ) ; } return loc0 ; }",
        "public static List < String > parse_nested_parens ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { int loc1 = arg0. indexOf ( \"srini_string\" ) ; if ( loc1 > - 1 ) { loc0. add ( arg0. substring ( 0, loc1 ) ) ; } arg0 = arg0. substring ( loc1 + 1 ) ; } return loc0 ; }",
        "public static List < String > parse_nested_parens ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { int loc1 = arg0. indexOf ( \"srini_string\" ) ; if ( loc1 > 0 ) { loc0. add ( arg0. substring ( 0, loc1 ) ) ; } arg0 = arg0. substring ( loc1 + 1 ) ; } return loc0 ; }",
        "public static List < String > parse_nested_parens ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } } return loc0 ; }",
        "public static List < String > parse_nested_parens ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2. trim ( ) ) ; } } return loc0 ; }",
        "public static List < String > parse_nested_parens ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { int loc1 = arg0. indexOf ( \"srini_string\" ) ; if ( loc1 >= 0 ) { loc0. add ( arg0. substring ( 0, loc1 ) ) ; } arg0 = arg0. substring ( loc1 + 1 ) ; } return loc0 ; }",
        "public static List parse_nested_parens ( String arg0 ) { List loc0 = new ArrayList ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ]. trim ( ) ) ; } } return loc0 ; }",
        "public static List < String > parse_nested_parens ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { int loc1 = arg0. indexOf ( \"srini_string\" ) ; if ( loc1 > - 1 ) { loc0. add ( arg0. substring ( 0, loc1 ) ) ; } arg0 = arg0. substring ( loc1 + 1 ) ; } return loc0 ; }",
        "public static List < String > parse_nested_parens ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } } return loc0 ; }",
        "public static List < String > parse_nested_parens ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2. trim ( ) ) ; } } return loc0 ; }",
        "public static HashMap < String, Object > parse_nested_parens ( String arg0 ) { HashMap < String, Object > loc0 = new HashMap < String, Object > ( ) ; if ( arg0. contains ( \"srini_string\" ) ) { loc0 = new HashMap < String, Object > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. put ( loc1, loc1. trim ( ) ) ; } } return loc0 ; }",
        "public static Map < String, Object > parse_nested_parens ( String arg0 ) { Map < String, Object > loc0 = new HashMap < String, Object > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { String loc1 = arg0. substring ( 1, arg0. length ( ) - 1 ) ; loc0. put ( loc1, parse ( arg0. substring ( 0, arg0. length ( ) - 1 ) ) ) ; } return loc0 ; }",
        "public static Map < String, Object > parse_nested_parens ( String arg0 ) { Map < String, Object > loc0 = new HashMap < String, Object > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { String loc1 = arg0. substring ( 1, arg0. length ( ) - 1 ) ; loc0. put ( loc1, arg0. substring ( 0, loc1. length ( ) - 1 ) ) ; } return loc0 ; }",
        "public static HashMap < String, Object > parse_nested_parens ( String arg0 ) { HashMap < String, Object > loc0 = new HashMap < String, Object > ( ) ; while ( arg0. contains ( \"srini_string\" ) ) { String loc1 = arg0. substring ( 1, arg0. length ( ) - 1 ) ; loc0. put ( loc1, arg0. substring ( 0, loc1. length ( ) - 1 ) ) ; } return loc0 ; }",
        "public static String parse_nested_parens ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) ) { return arg0. substring ( 1, arg0. length ( ) - 1 ) ; } else if ( arg0. contains ( \"srini_string\" ) ) { return arg0. substring ( 1, arg0. length ( ) - 1 ) ; } else { return \"srini_string\" ; } }",
        "public static boolean parse_nested_parens ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) ) { return true ; } String loc0 = arg0. substring ( 1, arg0. length ( ) - 1 ) ; return ( loc0. equals ( \"srini_string\" ) ) ; }",
        "public static void parse_nested_parens ( String arg0 ) { while ( arg0. contains ( \"srini_string\" ) ) { String loc0 = arg0. substring ( 1, arg0. length ( ) - 1 ) ; parse_nested_parens ( loc0 ) ; } }",
        "public static NestedParenExpression parse_nested_parens ( String arg0 ) { return new NestedParenExpression ( parse_nested_parens ( arg0 ) ) ; }",
        "public static boolean parse_nested_parens ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) ) { return true ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; return loc0. length > 1 ; }",
        "public static NestedParenExpression parse_nested_parens ( String arg0 ) { return parseNestedParen ( arg0, true ) ; }"
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        result.add(string); \n    }\n    return result;\n}",
      "target": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)){ \n            result.add(string);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-13,5",
      "raw_output": [
        "List < String > function ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { if ( arg0 == null ) { return null ; } final List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1 ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "Filter function ( final String arg0 ) { return new Filter ( ) { @ Override public boolean accept ( final String arg1 ) { return arg0. startsWith ( arg1 ) ; } @ Override public String toString ( ) { return arg0 ; } } ; }",
        "Filter function ( final String arg0 ) { return new Filter ( ) { @ Override public boolean accepts ( final String arg1 ) { return arg0. startsWith ( arg1 ) ; } @ Override public String toString ( ) { return arg0 ; } } ; }",
        "Filter function ( final String arg0 ) { return new Filter ( ) { @ Override public boolean accept ( final String arg1 ) { return arg0. startsWith ( arg1 ) ; } } ; }",
        "Filter function ( final String arg0 ) { return new Filter ( ) { @ Override public boolean accepts ( final String arg1 ) { return arg0. startsWith ( arg1 ) ; } } ; }",
        "Filter function ( final String arg0, final String arg1 ) { return new SimpleStringFilter ( arg0, arg1 ) ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. equals ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) if ( loc1. startsWith ( arg1 ) ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. contains ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( loc1. contains ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. equals ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( arg1 ) ) { loc0. add ( arg1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. startsWith ( arg0. get ( loc1 ) ) ) { loc0. add ( arg1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. equals ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; Iterator < String > loc1 = arg0. iterator ( ) ; while ( loc1. hasNext ( ) ) { loc0. add ( loc1. next ( ) ) ; if ( loc1. hasNext ( ) ) { loc0. remove ( ) ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Filter by substring list.",
        "Filter by substring.",
        "Method filter_by_substring.",
        "Filter by substring list of strings",
        "Filter a list of strings by substring"
      ],
      "output": [
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0 ) { if ( arg0 == null ) { return null ; } final List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1 ) ; } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "",
        "",
        "",
        "",
        "public static Filter filter_by_substring ( final String arg0, final String arg1 ) { return new SimpleStringFilter ( arg0, arg1 ) ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. equals ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) if ( loc1. startsWith ( arg1 ) ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. contains ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( loc1. contains ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. equals ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( arg1 ) ) { loc0. add ( arg1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. startsWith ( arg0. get ( loc1 ) ) ) { loc0. add ( arg1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. equals ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_substring ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; Iterator < String > loc1 = arg0. iterator ( ) ; while ( loc1. hasNext ( ) ) { loc0. add ( loc1. next ( ) ) ; if ( loc1. hasNext ( ) ) { loc0. remove ( ) ; } } return loc0 ; }"
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2]; \n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
      "target": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[]{0, 1}; \n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
      "function range": "6,5-13,5",
      "raw_output": [
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) loc0 += loc1 ; return loc0 ; }",
        "int function ( List < Integer > arg0, int arg1 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) loc0 += loc1 ; return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) loc0 += loc1 ; return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == 0 ) { return 0 ; } else if ( arg1 == 0 ) { return 1 ; } else { return arg0 * arg1 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg1 == 0 ) { return 1 ; } return arg0 * arg1 ; }",
        "int function ( int arg0, int arg1, int arg2 ) { if ( arg0 == 0 ) { return arg1 * arg2 ; } else if ( arg1 == 0 ) { return arg2 ; } else { return arg0 * arg1 ; } }",
        "int function ( int arg0, int arg1, int arg2 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { loc0 += arg0 * arg1 ; } return loc0 ; }",
        "int function ( int arg0, int arg1 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 += arg0 ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) loc0 += loc1 ; return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( Integer... arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int [ ] arg0, int [ ] arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 * arg1 ; }",
        "int function ( int arg0, int arg1 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += arg1 << loc1 ; } return loc0 ; }",
        "int function ( int arg0, int arg1 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 += arg0 * arg1. get ( loc1 ) ; } return loc0 ; }",
        "int function ( int arg0, int arg1 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += arg1 * arg0 ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Sums the product of a list of integers.",
        "Sum product of a list of integers.",
        "Sums the product of two sets of integers.",
        "Sum products of a list of integers.",
        "Sum product of two sets of integers."
      ],
      "output": [
        "public static int sum_product ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_product ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_product ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) loc0 += loc1 ; return loc0 ; }",
        "public static int sum_product ( List < Integer > arg0, int arg1 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_product ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) loc0 += loc1 ; return loc0 ; }",
        "public static int sum_product ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_product ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_product ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_product ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) loc0 += loc1 ; return loc0 ; }",
        "public static int sum_product ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_product ( int arg0, int arg1 ) { if ( arg0 == 0 ) { return 0 ; } else if ( arg1 == 0 ) { return 1 ; } else { return arg0 * arg1 ; } }",
        "public static int sum_product ( int arg0, int arg1 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg1 == 0 ) { return 1 ; } return arg0 * arg1 ; }",
        "public static int sum_product ( int arg0, int arg1, int arg2 ) { if ( arg0 == 0 ) { return arg1 * arg2 ; } else if ( arg1 == 0 ) { return arg2 ; } else { return arg0 * arg1 ; } }",
        "public static int sum_product ( int arg0, int arg1, int arg2 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { loc0 += arg0 * arg1 ; } return loc0 ; }",
        "public static int sum_product ( int arg0, int arg1 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 += arg0 ; } return loc0 ; }",
        "public static int sum_product ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_product ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) loc0 += loc1 ; return loc0 ; }",
        "public static int sum_product ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_product ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_product ( Integer... arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_product ( int [ ] arg0, int [ ] arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_product ( final int arg0, final int arg1 ) { return arg0 * arg1 ; }",
        "public static int sum_product ( int arg0, int arg1 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += arg1 << loc1 ; } return loc0 ; }",
        "public static int sum_product ( int arg0, int arg1 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 += arg0 * arg1. get ( loc1 ) ; } return loc0 ; }",
        "public static int sum_product ( int arg0, int arg1 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += arg1 * arg0 ; } return loc0 ; }"
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n); \n        result.add(running_max);\n    }\n    return result;\n}",
      "target": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        if (running_max == null){ \n            running_max = n;\n        }\n        else{\n            running_max = Math.max(running_max, n);\n        }\n        result.add(running_max);\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "raw_output": [
        "List < Integer > function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. min ( loc0, loc1 ) ; } return arg0. subList ( 0, loc0 ) ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { loc0. add ( loc2 ) ; loc1 = Math. loc1 ( loc1, loc2 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return arg0. subList ( 0, loc0 ) ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = Math. max ( loc0, arg0 [ loc2 ] ) ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = Math. max ( loc0, arg0 [ loc2 ] ) ; loc1 = loc1 ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 > 0? Math. max ( 1, arg0 ) : arg0 ; }",
        "int function ( int arg0 ) { return Math. max ( 1, Math. min ( arg0, Math. min ( arg0, arg0 - 1 ) ) ) ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 > 0? Math. max ( 1, arg0 ) : arg0 ; }",
        "int function ( int arg0 ) { return Math. max ( 1, Math. min ( arg0, Math. min ( arg0, 1 ) ) ) ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 ; }",
        "int function ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "List < Number > function ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( rollingMax ( loc1 ) ) ; } return loc0 ; }",
        "List < Number > function ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) loc0. add ( rollingMax ( loc1 ) ) ; return loc0 ; }",
        "int function ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "int function ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { if ( loc1. doubleValue ( ) > loc0 ) { loc0 = loc1. doubleValue ( ) ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = Math. max ( loc0, arg0 [ loc2 ] ) ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 = Math. min ( loc0, arg0 [ loc2 ] ) ; loc1 = Math. max ( loc1, arg0 [ loc2 ] ) ; } return arg0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. min ( loc0, loc1 ) ; } return arg0. subList ( 0, loc0 ) ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; loc1 = Math. loc1 ( loc1, arg0. length ) ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = Math. max ( loc0, arg0 [ loc2 ] ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { loc0. add ( loc2 ) ; loc1 ++ ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Rolling max of a list of integers.",
        "Rolling max.",
        "Rolling max of a list of numbers.",
        "Rolling max of a list of integers",
        "Rolls a list of integers into a list of integers"
      ],
      "output": [
        "public static List < Integer > rolling_max ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. min ( loc0, loc1 ) ; } return arg0. subList ( 0, loc0 ) ; }",
        "public static List < Integer > rolling_max ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { loc0. add ( loc2 ) ; loc1 = Math. loc1 ( loc1, loc2 ) ; } return loc0 ; }",
        "public static List < Integer > rolling_max ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return arg0. subList ( 0, loc0 ) ; }",
        "public static int [ ] rolling_max ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = Math. max ( loc0, arg0 [ loc2 ] ) ; return loc0 ; }",
        "public static int [ ] rolling_max ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = Math. max ( loc0, arg0 [ loc2 ] ) ; loc1 = loc1 ; } return loc0 ; }",
        "public static int rolling_max ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 > 0? Math. max ( 1, arg0 ) : arg0 ; }",
        "public static int rolling_max ( int arg0 ) { return Math. max ( 1, Math. min ( arg0, Math. min ( arg0, arg0 - 1 ) ) ) ; }",
        "public static int rolling_max ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 > 0? Math. max ( 1, arg0 ) : arg0 ; }",
        "public static int rolling_max ( int arg0 ) { return Math. max ( 1, Math. min ( arg0, Math. min ( arg0, 1 ) ) ) ; }",
        "public static int rolling_max ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 ; }",
        "public static int rolling_max ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "public static List < Number > rolling_max ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( rollingMax ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Number > rolling_max ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) loc0. add ( rollingMax ( loc1 ) ) ; return loc0 ; }",
        "public static int rolling_max ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "public static int rolling_max ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { if ( loc1. doubleValue ( ) > loc0 ) { loc0 = loc1. doubleValue ( ) ; } } return loc0 ; }",
        "public static int [ ] rolling_max ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = Math. max ( loc0, arg0 [ loc2 ] ) ; return loc0 ; }",
        "public static int [ ] rolling_max ( int [ ] arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 = Math. min ( loc0, arg0 [ loc2 ] ) ; loc1 = Math. max ( loc1, arg0 [ loc2 ] ) ; } return arg0 ; }",
        "public static List < Integer > rolling_max ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. min ( loc0, loc1 ) ; } return arg0. subList ( 0, loc0 ) ; }",
        "public static int [ ] rolling_max ( int [ ] arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; loc1 = Math. loc1 ( loc1, arg0. length ) ; } return arg0 ; }",
        "public static int [ ] rolling_max ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = Math. max ( loc0, arg0 [ loc2 ] ) ; } return loc0 ; }",
        "public static List < Integer > rolling_max ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > rolling_max ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { loc0. add ( loc2 ) ; loc1 ++ ; } return loc0 ; }",
        "public static List < Integer > rolling_max ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > rolling_max ( List < Integer > arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > rolling_max ( List < Integer > arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }"
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix); \n    return result;\n}",
      "target": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    for (int i = beginning_of_suffix - 1; i >= 0; i -= 1){ \n        result += String.valueOf(str.charAt(i));\n    }\n    return result;\n}",
      "function range": "12,5-24,5",
      "raw_output": [
        "String function ( String arg0 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return palindrome ( arg0 ) ; } else { return arg0 ; } }",
        "String function ( String arg0 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else { return arg0 ; } }",
        "String function ( String arg0 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else { return null ; } }",
        "String function ( String arg0 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else { return \"srini_string\" + arg0 + \"srini_string\" ; } }",
        "String function ( String arg0 ) { return make_palindrome ( arg0. toLowerCase ( ) ) ; }",
        " palindrome function ( String arg0 ) { return new palindrome ( arg0 ) ; }",
        " palindrome function ( String arg0 ) { try { return new palindrome ( arg0 ) ; } catch ( Exception loc0 ) { Logger. getLogger ( \"srini_string\" ). debug ( \"srini_string\" + arg0 ) ; } return null ; }",
        " palindrome function ( String arg0 ) { if ( arg0 == null ) return null ; return new palindrome ( arg0. split ( \"srini_string\" ) ) ; }",
        " palindrome function ( String arg0 ) { return new palindrome ( arg0. split ( \"srini_string\" ) ) ; }",
        " palindrome function ( String arg0 ) { try { return new palindrome ( arg0. split ( \"srini_string\" ) ) ; } catch ( Exception loc0 ) { Logger. getLogger ( \"srini_string\" ). debug ( \"srini_string\" + arg0 ) ; } return null ; }",
        "String function ( ) { return \"srini_string\" ; }",
        "Method function ( ) { Class <? extends Object > loc0 = Palindrome. class ; Method loc1 = loc0. getMethod ( \"srini_string\", new Class [ 0 ] ) ; loc1. setAccessible ( true ) ; loc1. setAccessible ( true ) ; return loc1 ; }",
        "Method function ( ) { Class [ ] loc0 = new Class [ 0 ] ; Object [ ] loc1 = new Object [ 0 ] ; loc0 [ 0 ] = new Integer ( 0 ) ; loc1 [ 1 ] = new Integer ( 0 ) ; return make_palindrome ( loc0, loc1 ) ; }",
        "Method function ( ) { Class <? > loc0 = MyBox. class ; Method loc1 = make_palindrome ( loc0 ) ; loc1. setAccessible ( true ) ; loc1. invoke ( null, new Object [ ] { new Integer ( 1 ), new Integer ( 2 ) } ) ; return loc1 ; }",
        "Method function ( ) { Class <? > loc0 = MyClass. class ; Method loc1 = make_palindrome ( loc0 ) ; loc1. setAccessible ( true ) ; loc1. setAccessible ( true ) ; return loc1 ; }",
        "String function ( int arg0, int arg1 ) { return palindrome ( arg0, arg1 ) ; }",
        "String function ( int arg0, int arg1 ) { if ( arg0 == 0 ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( palindrome ( arg1 ) ) ; } return loc0. toString ( ) ; }",
        "String function ( int arg0, int arg1 ) { return \"srini_string\" + arg0 + \"srini_string\" + arg1 + \"srini_string\" ; }",
        "String function ( int arg0, int arg1 ) { if ( arg0 > 0 ) { return \"srini_string\" + arg0 + \"srini_string\" ; } else if ( arg1 > 0 ) { return \"srini_string\" + arg1 + \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( int arg0, int arg1 ) { if ( arg0 == 0 ) { return \"srini_string\" ; } else if ( arg1 == 0 ) { return \"srini_string\" ; } else { return palindrome ( arg0, arg1 - 1 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } else { return make_palindrome ( arg0. split ( \"srini_string\" ) ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; return make_palindrome ( loc0 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return make_palindrome ( arg0. split ( \"srini_string\" ) ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; if ( loc0. length == 1 ) { return loc0 [ 0 ] ; } else { return make_palindrome ( loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; String loc1 = loc0 [ 0 ] ; return make_palindrome ( loc1 ) ; }"
      ],
      "mid_translation": [
        "make_palindrome This method assumes that the input string starts with a palindrome.",
        "Make a palindrome from a string.",
        "make_palindrome Method.",
        "Make a string containing a palindrome.",
        "make_palindrome This method assumes that the input string is a palindrome."
      ],
      "output": [
        "public static String make_palindrome ( String arg0 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return palindrome ( arg0 ) ; } else { return arg0 ; } }",
        "public static String make_palindrome ( String arg0 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else { return arg0 ; } }",
        "public static String make_palindrome ( String arg0 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else { return null ; } }",
        "public static String make_palindrome ( String arg0 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 1 ) ; } else { return \"srini_string\" + arg0 + \"srini_string\" ; } }",
        "public static String make_palindrome ( String arg0 ) { return make_palindrome ( arg0. toLowerCase ( ) ) ; }",
        "public static  palindrome make_palindrome ( String arg0 ) { return new palindrome ( arg0 ) ; }",
        "public static  palindrome make_palindrome ( String arg0 ) { try { return new palindrome ( arg0 ) ; } catch ( Exception loc0 ) { Logger. getLogger ( \"srini_string\" ). debug ( \"srini_string\" + arg0 ) ; } return null ; }",
        "public static  palindrome make_palindrome ( String arg0 ) { if ( arg0 == null ) return null ; return new palindrome ( arg0. split ( \"srini_string\" ) ) ; }",
        "public static  palindrome make_palindrome ( String arg0 ) { return new palindrome ( arg0. split ( \"srini_string\" ) ) ; }",
        "public static  palindrome make_palindrome ( String arg0 ) { try { return new palindrome ( arg0. split ( \"srini_string\" ) ) ; } catch ( Exception loc0 ) { Logger. getLogger ( \"srini_string\" ). debug ( \"srini_string\" + arg0 ) ; } return null ; }",
        "public static String make_palindrome ( ) { return \"srini_string\" ; }",
        "public static Method make_palindrome ( ) { Class <? extends Object > loc0 = Palindrome. class ; Method loc1 = loc0. getMethod ( \"srini_string\", new Class [ 0 ] ) ; loc1. setAccessible ( true ) ; loc1. setAccessible ( true ) ; return loc1 ; }",
        "public static Method make_palindrome ( ) { Class [ ] loc0 = new Class [ 0 ] ; Object [ ] loc1 = new Object [ 0 ] ; loc0 [ 0 ] = new Integer ( 0 ) ; loc1 [ 1 ] = new Integer ( 0 ) ; return make_palindrome ( loc0, loc1 ) ; }",
        "public static Method make_palindrome ( ) { Class <? > loc0 = MyBox. class ; Method loc1 = make_palindrome ( loc0 ) ; loc1. setAccessible ( true ) ; loc1. invoke ( null, new Object [ ] { new Integer ( 1 ), new Integer ( 2 ) } ) ; return loc1 ; }",
        "public static Method make_palindrome ( ) { Class <? > loc0 = MyClass. class ; Method loc1 = make_palindrome ( loc0 ) ; loc1. setAccessible ( true ) ; loc1. setAccessible ( true ) ; return loc1 ; }",
        "public static String make_palindrome ( int arg0, int arg1 ) { return palindrome ( arg0, arg1 ) ; }",
        "public static String make_palindrome ( int arg0, int arg1 ) { if ( arg0 == 0 ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( palindrome ( arg1 ) ) ; } return loc0. toString ( ) ; }",
        "public static String make_palindrome ( int arg0, int arg1 ) { return \"srini_string\" + arg0 + \"srini_string\" + arg1 + \"srini_string\" ; }",
        "public static String make_palindrome ( int arg0, int arg1 ) { if ( arg0 > 0 ) { return \"srini_string\" + arg0 + \"srini_string\" ; } else if ( arg1 > 0 ) { return \"srini_string\" + arg1 + \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String make_palindrome ( int arg0, int arg1 ) { if ( arg0 == 0 ) { return \"srini_string\" ; } else if ( arg1 == 0 ) { return \"srini_string\" ; } else { return palindrome ( arg0, arg1 - 1 ) ; } }",
        "public static String make_palindrome ( String arg0 ) { if ( arg0 == null ) { return null ; } else { return make_palindrome ( arg0. split ( \"srini_string\" ) ) ; } }",
        "public static String make_palindrome ( String arg0 ) { if ( arg0 == null ) { return null ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; return make_palindrome ( loc0 ) ; }",
        "public static String make_palindrome ( String arg0 ) { if ( arg0 == null ) { return null ; } return make_palindrome ( arg0. split ( \"srini_string\" ) ) ; }",
        "public static String make_palindrome ( String arg0 ) { if ( arg0 == null ) { return null ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; if ( loc0. length == 1 ) { return loc0 [ 0 ] ; } else { return make_palindrome ( loc0 ) ; } }",
        "public static String make_palindrome ( String arg0 ) { if ( arg0 == null ) { return null ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; String loc1 = loc0 [ 0 ] ; return make_palindrome ( loc1 ) ; }"
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    } \n    return result;\n}",
      "target": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n        else{ \n            result += \"1\";\n        }\n    }\n    return result;\n}",
      "function range": "4,5-12,5",
      "raw_output": [
        "String function ( String arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg1 ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "String function ( String arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "String function ( String arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "String function ( String arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( arg0 ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg1 ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "String function ( String arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "String function ( String arg0, String arg1 ) { return xor ( arg0, arg1, arg0. hashCode ( ) ) ; }",
        "String function ( String arg0, String arg1 ) { return xor ( arg0, arg1 ) ; }",
        "String function ( final String arg0, final String arg1 ) { return xor ( arg0, arg1, arg0. hashCode ( ) ) ; }",
        "String function ( final String arg0, final String arg1 ) { return xor ( arg0, arg1 ) ; }",
        "String function ( String arg0, String arg1 ) { int loc0 = arg0. hashCode ( ) ; int loc1 = arg1. hashCode ( ) ; String loc2 = arg1. substring ( 0, loc0 ) ; return arg0. substring ( loc1, loc0 ) ^ loc2 ; }",
        "String function ( String arg0, String arg1 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" - arg1 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" - arg1 ; } else { return arg1 ; } }",
        "String function ( String arg0, String arg1 ) { return arg0. replaceFirst ( \"srini_string\", \"srini_string\" ). replaceAll ( \"srini_string\", \"srini_string\" ). replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "String function ( String arg0, String arg1 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. indexOf ( \"srini_string\" ) ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( arg0. indexOf ( \"srini_string\" ) + 1 ) ; } else { return arg0 ; } }",
        "String function ( String arg0, String arg1 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. indexOf ( \"srini_string\" ) ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg1. substring ( arg0. indexOf ( \"srini_string\" ) + 1 ) ; } else { return arg1 ; } }",
        "String function ( String arg0, String arg1 ) { return arg0. replaceAll ( \"srini_string\", arg1 ) ; }",
        "String function ( String arg0, String arg1 ) { if ( arg0. equals ( \"srini_string\" ) ) { return arg1 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return arg1 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return arg1 ; } else { return arg1 ; } }",
        "String function ( String arg0, String arg1 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; } else { return arg0 ; } }",
        "String function ( String arg0, String arg1 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. indexOf ( \"srini_string\" ) ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( arg0. indexOf ( \"srini_string\" ) ) ; } else { return arg0 ; } }",
        "String function ( String arg0, String arg1 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg1. substring ( 0, arg1. length ( ) - 1 ) ; } else { return arg0 ; } }",
        "String function ( String arg0, String arg1 ) { if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { return arg1 ; } else if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { return arg1 ; } else { return arg1 ; } }",
        "String function ( String arg0, String arg1 ) { String loc0 = \"srini_string\" ; if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } return loc0 ; }",
        "String function ( String arg0, boolean arg1 ) { String loc0 = \"srini_string\" ; if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1 ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } return loc0 ; }",
        "String function ( String arg0, String arg1 ) { String loc0 = \"srini_string\" ; if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } return loc0 ; }",
        "String function ( String arg0, String arg1 ) { String loc0 = \"srini_string\" ; if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } return loc0 + arg1 ; }",
        "String function ( String arg0, String arg1 ) { String loc0 = \"srini_string\" ; if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Method string_xor.",
        "String xor.",
        "string_xor - Xor.",
        "string_xor - XOR.",
        "XOR a string with b."
      ],
      "output": [
        "public static String string_xor ( String arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg1 ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "public static String string_xor ( String arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "public static String string_xor ( String arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "public static String string_xor ( String arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( arg0 ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg1 ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "public static String string_xor ( String arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "public static String string_xor ( String arg0, String arg1 ) { return xor ( arg0, arg1, arg0. hashCode ( ) ) ; }",
        "public static String string_xor ( String arg0, String arg1 ) { return xor ( arg0, arg1 ) ; }",
        "public static String string_xor ( final String arg0, final String arg1 ) { return xor ( arg0, arg1, arg0. hashCode ( ) ) ; }",
        "public static String string_xor ( final String arg0, final String arg1 ) { return xor ( arg0, arg1 ) ; }",
        "public static String string_xor ( String arg0, String arg1 ) { int loc0 = arg0. hashCode ( ) ; int loc1 = arg1. hashCode ( ) ; String loc2 = arg1. substring ( 0, loc0 ) ; return arg0. substring ( loc1, loc0 ) ^ loc2 ; }",
        "public static String string_xor ( String arg0, String arg1 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" - arg1 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" - arg1 ; } else { return arg1 ; } }",
        "public static String string_xor ( String arg0, String arg1 ) { return arg0. replaceFirst ( \"srini_string\", \"srini_string\" ). replaceAll ( \"srini_string\", \"srini_string\" ). replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "public static String string_xor ( String arg0, String arg1 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. indexOf ( \"srini_string\" ) ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( arg0. indexOf ( \"srini_string\" ) + 1 ) ; } else { return arg0 ; } }",
        "public static String string_xor ( String arg0, String arg1 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. indexOf ( \"srini_string\" ) ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg1. substring ( arg0. indexOf ( \"srini_string\" ) + 1 ) ; } else { return arg1 ; } }",
        "public static String string_xor ( String arg0, String arg1 ) { return arg0. replaceAll ( \"srini_string\", arg1 ) ; }",
        "public static String string_xor ( String arg0, String arg1 ) { if ( arg0. equals ( \"srini_string\" ) ) { return arg1 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return arg1 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return arg1 ; } else { return arg1 ; } }",
        "public static String string_xor ( String arg0, String arg1 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; } else { return arg0 ; } }",
        "public static String string_xor ( String arg0, String arg1 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. indexOf ( \"srini_string\" ) ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( arg0. indexOf ( \"srini_string\" ) ) ; } else { return arg0 ; } }",
        "public static String string_xor ( String arg0, String arg1 ) { if ( arg0. startsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return arg1. substring ( 0, arg1. length ( ) - 1 ) ; } else { return arg0 ; } }",
        "public static String string_xor ( String arg0, String arg1 ) { if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { return arg1 ; } else if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { return arg1 ; } else { return arg1 ; } }",
        "public static String string_xor ( String arg0, String arg1 ) { String loc0 = \"srini_string\" ; if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } return loc0 ; }",
        "public static String string_xor ( String arg0, boolean arg1 ) { String loc0 = \"srini_string\" ; if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1 ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } return loc0 ; }",
        "public static String string_xor ( String arg0, String arg1 ) { String loc0 = \"srini_string\" ; if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } return loc0 ; }",
        "public static String string_xor ( String arg0, String arg1 ) { String loc0 = \"srini_string\" ; if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg1. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } return loc0 + arg1 ; }",
        "public static String string_xor ( String arg0, String arg1 ) { String loc0 = \"srini_string\" ; if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } else if ( arg0. equals ( loc0 ) ) { loc0 = \"srini_string\" ; } return loc0 ; }"
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){ \n            maxlen = strings.size(); \n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
      "target": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){ \n            maxlen = string.length(); \n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
      "function range": "6,5-19,5",
      "raw_output": [
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) < 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) < 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) < 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. substring ( 0, loc0 ) ; } } return loc0 ; }",
        "int function ( Collection < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. substring ( 0, loc0 ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. substring ( 0, loc0 ) ; } } return loc0 ; }",
        "int function ( Collection < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) < 0 ) { loc0 = loc1 ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Returns the longest string in the list of strings.",
        "Returns the longest string in a list of strings.",
        "Get the longest string in a list of strings.",
        "Get the longest string from a list of strings.",
        "Get the longest string in the list of strings."
      ],
      "output": [
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) < 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) < 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) < 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. substring ( 0, loc0 ) ; } } return loc0 ; }",
        "public static int longest ( Collection < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. substring ( 0, loc0 ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. substring ( 0, loc0 ) ; } } return loc0 ; }",
        "public static int longest ( Collection < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. length ( ) > loc0 ) { loc0 = loc1. length ( ) ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = - 1 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int longest ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) < 0 ) { loc0 = loc1 ; } } return loc0 ; }"
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        a = b; \n        b = a % b; \n    }\n    return a;\n}",
      "target": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int tmp = a; \n        a = b; \n        b = tmp % b;\n    }\n    return a;\n}",
      "function range": "4,5-10,5",
      "raw_output": [
        "int function ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) return arg1 ; return gcd ( arg1, arg0 % arg1 ) ; }",
        "int function ( final int arg0, final int arg1 ) { return gcd ( arg1, arg0 % arg1 ) ; }",
        "int function ( final int arg0, final int arg1 ) { if ( arg0 == arg1 ) { return gcd ( arg0, arg1 ) ; } else if ( arg1 == 0 ) { return arg0 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "int function ( final int arg0, final int arg1 ) { if ( arg0 == arg1 ) { return gcd ( arg0, arg1 ) ; } else if ( arg1 == arg0 ) { return arg1 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "int function ( final int arg0, final int arg1 ) { if ( arg0 == arg1 ) { return gcd ( arg0, arg1 ) ; } else if ( arg1 == arg0 ) { return arg1 ; } else if ( arg1 == arg1 ) { return gcd ( arg0, arg1 ) ; } else { return arg1 ; } }",
        "Divisor function ( int arg0, int arg1 ) { return new Divisor ( arg0, arg1 ) ; }",
        "int function ( int arg0, int arg1 ) { return gcd ( arg1, arg0 % arg1 ) ; }",
        "int function ( int arg0, int arg1 ) { return gcd ( arg0 % arg1, arg1 - 1 ) ; }",
        "int function ( int arg0, int arg1 ) { return gcd ( arg0, arg1 - 1 ) ; }",
        "int function ( int arg0, int arg1 ) { return gcd ( arg0 % arg1, arg1 % arg1 ) ; }",
        "int function ( Set arg0, Set arg1 ) { if ( arg0. contains ( arg1 ) ) { return gcd ( arg0, arg1 ) ; } else if ( arg0. contains ( arg1 ) ) { return gcd ( arg1, arg1 ) ; } else { return 0 ; } }",
        "int function ( Set arg0, Set arg1 ) { if ( arg0. contains ( arg1 ) ) { return gcd ( arg0, arg1 ) ; } else if ( arg1. contains ( arg0 ) ) { return gcd ( arg1, arg1 ) ; } else { return 0 ; } }",
        "int function ( Set arg0, Set arg1 ) { if ( arg0. contains ( arg1 ) ) { return gcd ( arg0, arg1 ) ; } else if ( arg1. contains ( arg0 ) ) { return gcd ( arg1, arg0 ) ; } else { return 0 ; } }",
        "int function ( Set arg0, Set arg1 ) { if ( arg0. contains ( arg1 ) ) { return gcd ( arg0, arg1 ) ; } else if ( arg1. contains ( arg0 ) ) { return arg1. size ( ) ; } else if ( arg1. contains ( arg0 ) ) { return arg1. size ( ) ; } return 0 ; }",
        "int function ( Set arg0, Set arg1 ) { if ( arg0. contains ( arg1 ) ) { return gcd ( arg0, arg1 ) ; } else if ( arg1. contains ( arg0 ) ) { return arg1. size ( ) ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 % arg1 == 0 ) { return 1 ; } else if ( arg1 == 0 ) { return arg0 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 % arg1 ; if ( loc0 == 0 ) { loc0 = arg1 ; } else if ( loc0 == arg1 ) { loc0 = arg0 ; } else if ( loc0 == arg1 ) { loc0 = arg1 ; } return loc0 ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 % arg1 == 0 ) { return 1 ; } else if ( arg1 == 0 ) { return 1 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "int function ( int arg0, int arg1 ) { return ( arg0 % arg1 ) ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 % arg1 ; if ( loc0 == 0 ) { loc0 = arg1 ; } else if ( loc0 == arg1 ) { loc0 = arg0 % arg1 ; } return loc0 ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) return arg1 ; return gcd ( arg1, arg0 % arg1 ) ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) return arg1 ; return gcd ( arg0, arg1 % arg1 ) ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return arg1 ; } else if ( arg0 % arg1 == 1 ) { return arg0 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return arg1 ; } else if ( arg0 % arg1 == 1 ) { return arg1 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) return arg1 ; else return gcd ( arg1, arg0 % arg1 ) ; }"
      ],
      "mid_translation": [
        "Greatest common divisor of two sets of tokens.",
        "Greatest common divisor.",
        "Greatest common divisor of two sets.",
        "Returns the greatest common divisor of a and b.",
        "Get the greatest common divisor of two sets of tokens."
      ],
      "output": [
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) return arg1 ; return gcd ( arg1, arg0 % arg1 ) ; }",
        "public static int greatest_common_divisor ( final int arg0, final int arg1 ) { return gcd ( arg1, arg0 % arg1 ) ; }",
        "public static int greatest_common_divisor ( final int arg0, final int arg1 ) { if ( arg0 == arg1 ) { return gcd ( arg0, arg1 ) ; } else if ( arg1 == 0 ) { return arg0 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "public static int greatest_common_divisor ( final int arg0, final int arg1 ) { if ( arg0 == arg1 ) { return gcd ( arg0, arg1 ) ; } else if ( arg1 == arg0 ) { return arg1 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "public static int greatest_common_divisor ( final int arg0, final int arg1 ) { if ( arg0 == arg1 ) { return gcd ( arg0, arg1 ) ; } else if ( arg1 == arg0 ) { return arg1 ; } else if ( arg1 == arg1 ) { return gcd ( arg0, arg1 ) ; } else { return arg1 ; } }",
        "public static Divisor greatest_common_divisor ( int arg0, int arg1 ) { return new Divisor ( arg0, arg1 ) ; }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { return gcd ( arg1, arg0 % arg1 ) ; }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { return gcd ( arg0 % arg1, arg1 - 1 ) ; }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { return gcd ( arg0, arg1 - 1 ) ; }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { return gcd ( arg0 % arg1, arg1 % arg1 ) ; }",
        "public static int greatest_common_divisor ( Set arg0, Set arg1 ) { if ( arg0. contains ( arg1 ) ) { return gcd ( arg0, arg1 ) ; } else if ( arg0. contains ( arg1 ) ) { return gcd ( arg1, arg1 ) ; } else { return 0 ; } }",
        "public static int greatest_common_divisor ( Set arg0, Set arg1 ) { if ( arg0. contains ( arg1 ) ) { return gcd ( arg0, arg1 ) ; } else if ( arg1. contains ( arg0 ) ) { return gcd ( arg1, arg1 ) ; } else { return 0 ; } }",
        "public static int greatest_common_divisor ( Set arg0, Set arg1 ) { if ( arg0. contains ( arg1 ) ) { return gcd ( arg0, arg1 ) ; } else if ( arg1. contains ( arg0 ) ) { return gcd ( arg1, arg0 ) ; } else { return 0 ; } }",
        "public static int greatest_common_divisor ( Set arg0, Set arg1 ) { if ( arg0. contains ( arg1 ) ) { return gcd ( arg0, arg1 ) ; } else if ( arg1. contains ( arg0 ) ) { return arg1. size ( ) ; } else if ( arg1. contains ( arg0 ) ) { return arg1. size ( ) ; } return 0 ; }",
        "public static int greatest_common_divisor ( Set arg0, Set arg1 ) { if ( arg0. contains ( arg1 ) ) { return gcd ( arg0, arg1 ) ; } else if ( arg1. contains ( arg0 ) ) { return arg1. size ( ) ; } else { return 0 ; } }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 % arg1 == 0 ) { return 1 ; } else if ( arg1 == 0 ) { return arg0 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { int loc0 = arg0 % arg1 ; if ( loc0 == 0 ) { loc0 = arg1 ; } else if ( loc0 == arg1 ) { loc0 = arg0 ; } else if ( loc0 == arg1 ) { loc0 = arg1 ; } return loc0 ; }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 % arg1 == 0 ) { return 1 ; } else if ( arg1 == 0 ) { return 1 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { return ( arg0 % arg1 ) ; }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { int loc0 = arg0 % arg1 ; if ( loc0 == 0 ) { loc0 = arg1 ; } else if ( loc0 == arg1 ) { loc0 = arg0 % arg1 ; } return loc0 ; }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) return arg1 ; return gcd ( arg1, arg0 % arg1 ) ; }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) return arg1 ; return gcd ( arg0, arg1 % arg1 ) ; }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return arg1 ; } else if ( arg0 % arg1 == 1 ) { return arg0 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return arg1 ; } else if ( arg0 % arg1 == 1 ) { return arg1 ; } else { return gcd ( arg1, arg0 % arg1 ) ; } }",
        "public static int greatest_common_divisor ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) return arg1 ; else return gcd ( arg1, arg0 % arg1 ) ; }"
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1)); \n    }\n    return result;\n}",
      "target": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(0, i + 1)); \n    }\n    return result;\n}",
      "function range": "7,5-15,5",
      "raw_output": [
        "Set < String > function ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "Set < String > function ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). toString ( ) ) ; } return loc0 ; }",
        "Set < String > function ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). getPrefix ( ) ) ; } return loc0 ; }",
        "Set < String > function ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\", false ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "Set < String > function ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). getName ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; arg0 = loc1. nextToken ( ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { return new ArrayList < String > ( Arrays. asList ( arg0. split ( \"srini_string\" ) ) ) ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "Set < String > function ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "String function ( String arg0 ) { return arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "String function ( String arg0 ) { return TextUtils. join ( \"srini_string\", arg0. split ( \"srini_string\" ) ) ; }",
        "String function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" )? \"srini_string\" : \"srini_string\" ; }",
        "String function ( String arg0 ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; }",
        "String function ( String arg0 ) { return arg0. substring ( 0, arg0. indexOf ( ':' ) ) ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). startsWith ( \"srini_string\" ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). startsWith ( \"srini_string\" ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\", false ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "Set < String > function ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "Set < String > function ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } return loc0 ; }",
        "Set < String > function ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\", false ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "Set < String > function ( String arg0 ) { return new HashSet < String > ( Arrays. asList ( arg0. split ( \"srini_string\" ) ) ) ; }",
        "Set < String > function ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Get all the prefixes of a string.",
        "Returns a list of all the prefixes of the given string.",
        "All prefixes of a string.",
        "Returns a list of all the URL prefixes in a string.",
        "Get all prefixes of a string."
      ],
      "output": [
        "public static Set < String > all_prefixes ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static Set < String > all_prefixes ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). toString ( ) ) ; } return loc0 ; }",
        "public static Set < String > all_prefixes ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). getPrefix ( ) ) ; } return loc0 ; }",
        "public static Set < String > all_prefixes ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\", false ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static Set < String > all_prefixes ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). getName ( ) ) ; } return loc0 ; }",
        "public static List < String > all_prefixes ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > all_prefixes ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; arg0 = loc1. nextToken ( ) ; } return loc0 ; }",
        "public static List < String > all_prefixes ( String arg0 ) { return new ArrayList < String > ( Arrays. asList ( arg0. split ( \"srini_string\" ) ) ) ; }",
        "public static List < String > all_prefixes ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static Set < String > all_prefixes ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static String all_prefixes ( String arg0 ) { return arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "public static String all_prefixes ( String arg0 ) { return TextUtils. join ( \"srini_string\", arg0. split ( \"srini_string\" ) ) ; }",
        "public static String all_prefixes ( String arg0 ) { return arg0. startsWith ( \"srini_string\" )? \"srini_string\" : \"srini_string\" ; }",
        "public static String all_prefixes ( String arg0 ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; }",
        "public static String all_prefixes ( String arg0 ) { return arg0. substring ( 0, arg0. indexOf ( ':' ) ) ; }",
        "public static List < String > all_prefixes ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). startsWith ( \"srini_string\" ) ) ; } return loc0 ; }",
        "public static List < String > all_prefixes ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > all_prefixes ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). startsWith ( \"srini_string\" ) ) ; } return loc0 ; }",
        "public static List < String > all_prefixes ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). trim ( ) ) ; } return loc0 ; }",
        "public static List < String > all_prefixes ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\", false ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static Set < String > all_prefixes ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static Set < String > all_prefixes ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static Set < String > all_prefixes ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\", false ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static Set < String > all_prefixes ( String arg0 ) { return new HashSet < String > ( Arrays. asList ( arg0. split ( \"srini_string\" ) ) ) ; }",
        "public static Set < String > all_prefixes ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }"
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result; \n}",
      "target": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result.trim(); \n}",
      "function range": "4,5-10,5",
      "raw_output": [
        "String function ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( Integer arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "String function ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( int arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "String function ( Integer arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( arg0 ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "void function ( StringBuilder arg0 ) { arg0. append ( \"srini_string\" ) ; }",
        "void function ( StringBuffer arg0 ) { arg0. append ( \"srini_string\" ) ; }",
        "void function ( StringBuffer arg0, String arg1 ) { arg0. append ( arg1 ) ; }",
        "String function ( int arg0, String arg1 ) { return arg0 + \"srini_string\" + arg1 ; }",
        "String function ( int arg0, String arg1 ) { return arg0 + arg1 ; }",
        "String function ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( \"srini_string\" ) ; } return loc0. toString ( ) ; }",
        "String function ( int arg0 ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "String function ( ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "String function ( ) { return \"srini_string\" ; }",
        "String function ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "String function ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; return loc0. toString ( ) ; }",
        "String function ( ) { return \"srini_string\" ; }",
        "String [ ] function ( ) { return new String [ ] { \"srini_string\", \"srini_string\", \"srini_string\" } ; }",
        "void function ( String arg0 ) { System. out. println ( arg0 ) ; }",
        "String [ ] function ( ) { return new String [ ] { \"srini_string\", \"srini_string\" } ; }",
        "String function ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( int arg0, int arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "String function ( List <? extends CharSequence > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( CharSequence loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( int arg0, int arg1 ) { return String. format ( \"srini_string\", arg0, arg1 ) ; }"
      ],
      "mid_translation": [
        "string_sequence.",
        "String_sequence.",
        "Method string_sequence.",
        "String_sequence method.",
        "String sequence."
      ],
      "output": [
        "public static String string_sequence ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String string_sequence ( Integer arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "public static String string_sequence ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String string_sequence ( int arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "public static String string_sequence ( Integer arg0, String arg1 ) { StringBuilder loc0 = new StringBuilder ( arg0 ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "public static void string_sequence ( StringBuilder arg0 ) { arg0. append ( \"srini_string\" ) ; }",
        "public static void string_sequence ( StringBuffer arg0 ) { arg0. append ( \"srini_string\" ) ; }",
        "public static void string_sequence ( StringBuffer arg0, String arg1 ) { arg0. append ( arg1 ) ; }",
        "public static String string_sequence ( int arg0, String arg1 ) { return arg0 + \"srini_string\" + arg1 ; }",
        "public static String string_sequence ( int arg0, String arg1 ) { return arg0 + arg1 ; }",
        "public static String string_sequence ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( \"srini_string\" ) ; } return loc0. toString ( ) ; }",
        "public static String string_sequence ( int arg0 ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "public static String string_sequence ( ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "public static String string_sequence ( ) { return \"srini_string\" ; }",
        "public static String string_sequence ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( \"srini_string\" ) ; return loc0. toString ( ) ; }",
        "public static String string_sequence ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; return loc0. toString ( ) ; }",
        "public static String string_sequence ( ) { return \"srini_string\" ; }",
        "public static String [ ] string_sequence ( ) { return new String [ ] { \"srini_string\", \"srini_string\", \"srini_string\" } ; }",
        "public static void string_sequence ( String arg0 ) { System. out. println ( arg0 ) ; }",
        "public static String [ ] string_sequence ( ) { return new String [ ] { \"srini_string\", \"srini_string\" } ; }",
        "public static String string_sequence ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String string_sequence ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String string_sequence ( int arg0, int arg1 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( arg0 ) ; loc0. append ( arg1 ) ; return loc0. toString ( ) ; }",
        "public static String string_sequence ( List <? extends CharSequence > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( CharSequence loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String string_sequence ( int arg0, int arg1 ) { return String. format ( \"srini_string\", arg0, arg1 ) ; }"
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c); \n    }\n    return distinct.size();\n}",
      "target": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c)); \n    }\n    return distinct.size();\n}",
      "function range": "6,5-14,5",
      "raw_output": [
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; ++ loc2 ) { loc0 += loc1 [ loc2 ] ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. chars ( ). loc2 ( ) ; loc1 < loc2 ; ++ loc1 ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!='' ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) =='' ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; Iterator < Character > loc1 = arg0. toCharArray ( ). iterator ( ) ; while ( loc1. hasNext ( ) ) { loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { int loc2 = 0 ; for ( int loc3 = 0 ; loc3 < arg0. charAt ( loc1 ) ; loc3 ++ ) { loc0 += arg0. charAt ( loc3 ) ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!='' ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { int loc2 = 0 ; for ( int loc3 = 0 ; loc3 < arg0. charAt ( loc1 ) ; loc3 ++ ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!='' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { loc0 += arg0. charAt ( -- loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. chars ( ). loc2 ( ) ; loc1 < loc2 ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. chars ( ). loc2 ( ) ; loc1 < loc2 ; ++ loc1 ) { loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; ++ loc2 ) { loc0 += loc1 [ loc2 ] ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!='' ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; while ( arg0. charAt ( loc0 ++ )!='' ) { loc1 ++ ; } return loc1 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; while ( arg0. charAt ( loc0 ++ )!='' ) loc0 ++ ; return loc1 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( Character. isDigit ( arg0. charAt ( loc2 ) ) ) ++ loc1 ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; while ( arg0. charAt ( -- loc0 )!='' ) { loc1 ++ ; } return loc1 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc2 ) ) ) ++ loc1 ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Count the number of distinct characters in a string.",
        "Count the number of distinct characters in a String.",
        "Count the number of distinct characters in the string.",
        "Count the number of distinct characters in a string",
        "Count the distinct characters in a string."
      ],
      "output": [
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; ++ loc2 ) { loc0 += loc1 [ loc2 ] ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. chars ( ). loc2 ( ) ; loc1 < loc2 ; ++ loc1 ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!='' ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) =='' ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; Iterator < Character > loc1 = arg0. toCharArray ( ). iterator ( ) ; while ( loc1. hasNext ( ) ) { loc0 ++ ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { int loc2 = 0 ; for ( int loc3 = 0 ; loc3 < arg0. charAt ( loc1 ) ; loc3 ++ ) { loc0 += arg0. charAt ( loc3 ) ; } } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!='' ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { int loc2 = 0 ; for ( int loc3 = 0 ; loc3 < arg0. charAt ( loc1 ) ; loc3 ++ ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!='' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { loc0 += arg0. charAt ( -- loc1 ) ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. chars ( ). loc2 ( ) ; loc1 < loc2 ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. chars ( ). loc2 ( ) ; loc1 < loc2 ; ++ loc1 ) { loc0 ++ ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; ++ loc2 ) { loc0 += loc1 [ loc2 ] ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!='' ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; while ( arg0. charAt ( loc0 ++ )!='' ) { loc1 ++ ; } return loc1 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; while ( arg0. charAt ( loc0 ++ )!='' ) loc0 ++ ; return loc1 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( Character. isDigit ( arg0. charAt ( loc2 ) ) ) ++ loc1 ; } return loc0 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; while ( arg0. charAt ( -- loc0 )!='' ) { loc1 ++ ; } return loc1 ; }",
        "public static int count_distinct_characters ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc2 ) ) ) ++ loc1 ; } return loc0 ; }"
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (String note : music_string.split(\" \")){ \n        result.add(note_map.get(note));\n    }\n    return result;\n}",
      "target": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    if (music_string.trim().equals(\"\")) \n        return result;\n    for (String note : music_string.split(\" \")){\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
      "function range": "8,5-20,5",
      "raw_output": [
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ] ) ; } return loc0 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { int loc3 = loc0 [ loc2 ] ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { int loc3 = Integer. parseInt ( loc0 [ loc2 ] ) ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { int loc0 = 0 ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; List < Integer > loc2 = new ArrayList < Integer > ( ) ; for ( int loc3 = 0 ; loc3 < loc1. length ; loc3 ++ ) { loc2. add ( loc1 [ loc3 ] ) ; loc0 ++ ; } return loc2 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { int loc3 = loc0 [ loc2 ] ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ] ) ; } return loc0 ; }",
        "List < Integer > function ( String arg0 ) { int loc0 = 0 ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; List < Integer > loc2 = new ArrayList < Integer > ( ) ; for ( int loc3 = 0 ; loc3 < loc1. length ; loc3 ++ ) { loc2. add ( loc3 ) ; loc0 ++ ; } return loc2 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ] ) ; } return loc0 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( Integer. parseInt ( loc2 ) ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( String loc2 : loc0 ) { int loc3 = Integer. parseInt ( loc2 ) ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { int loc3 = loc0 [ loc2 ] ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { int loc3 = loc0 [ loc2 ] ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "List < Integer > function ( String arg0 ) { if ( arg0 == null ) { return null ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( Integer. parseInt ( loc2 ) ) ; } return loc1 ; }",
        "List < Number > function ( String arg0 ) { if ( arg0 == null ) { return null ; } List < Number > loc0 = new ArrayList < Number > ( ) ; Music loc1 = new Music ( arg0 ) ; for ( Number loc2 : loc1. numbers ( ) ) { loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Number > function ( String arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; MusicParser loc1 = new MusicParser ( ) ; loc1. parse ( arg0 ) ; return loc0 ; }",
        "List < Number > function ( String arg0 ) { if ( arg0 == null ) { return null ; } List < Number > loc0 = new ArrayList < Number > ( ) ; MusicParser loc1 = new MusicParser ( ) ; loc1. parse ( arg0 ) ; return loc0 ; }",
        "List < Number > function ( String arg0 ) { if ( arg0 == null ) { return null ; } List < Number > loc0 = new ArrayList < Number > ( ) ; Music loc1 = new Music ( arg0 ) ; return loc0 ; }",
        "List < Number > function ( String arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; StringReader loc1 = new StringReader ( arg0 ) ; return parse ( loc1, loc0 ) ; }"
      ],
      "mid_translation": [
        "Parse a Music string into a list of integers.",
        "Parse a music string into a list of integers.",
        "Parses a Music string into a list of integers.",
        "Parse a Music string into a List of integers.",
        "Parse a Music string into a list of numbers."
      ],
      "output": [
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ] ) ; } return loc0 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { int loc3 = loc0 [ loc2 ] ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { int loc3 = Integer. parseInt ( loc0 [ loc2 ] ) ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { int loc0 = 0 ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; List < Integer > loc2 = new ArrayList < Integer > ( ) ; for ( int loc3 = 0 ; loc3 < loc1. length ; loc3 ++ ) { loc2. add ( loc1 [ loc3 ] ) ; loc0 ++ ; } return loc2 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { int loc3 = loc0 [ loc2 ] ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ] ) ; } return loc0 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { int loc0 = 0 ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; List < Integer > loc2 = new ArrayList < Integer > ( ) ; for ( int loc3 = 0 ; loc3 < loc1. length ; loc3 ++ ) { loc2. add ( loc3 ) ; loc0 ++ ; } return loc2 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ] ) ; } return loc0 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( Integer. parseInt ( loc2 ) ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( String loc2 : loc0 ) { int loc3 = Integer. parseInt ( loc2 ) ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { loc1. add ( loc0 [ loc2 ] ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { int loc3 = loc0 [ loc2 ] ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( int loc2 = 0 ; loc2 < loc0. length ; loc2 ++ ) { int loc3 = loc0 [ loc2 ] ; loc1. add ( loc3 ) ; } return loc1 ; }",
        "public static List < Integer > parse_music ( String arg0 ) { if ( arg0 == null ) { return null ; } String [ ] loc0 = arg0. split ( \"srini_string\" ) ; List < Integer > loc1 = new ArrayList < Integer > ( loc0. length ) ; for ( String loc2 : loc0 ) { loc1. add ( Integer. parseInt ( loc2 ) ) ; } return loc1 ; }",
        "public static List < Number > parse_music ( String arg0 ) { if ( arg0 == null ) { return null ; } List < Number > loc0 = new ArrayList < Number > ( ) ; Music loc1 = new Music ( arg0 ) ; for ( Number loc2 : loc1. numbers ( ) ) { loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Number > parse_music ( String arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; MusicParser loc1 = new MusicParser ( ) ; loc1. parse ( arg0 ) ; return loc0 ; }",
        "public static List < Number > parse_music ( String arg0 ) { if ( arg0 == null ) { return null ; } List < Number > loc0 = new ArrayList < Number > ( ) ; MusicParser loc1 = new MusicParser ( ) ; loc1. parse ( arg0 ) ; return loc0 ; }",
        "public static List < Number > parse_music ( String arg0 ) { if ( arg0 == null ) { return null ; } List < Number > loc0 = new ArrayList < Number > ( ) ; Music loc1 = new Music ( arg0 ) ; return loc0 ; }",
        "public static List < Number > parse_music ( String arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; StringReader loc1 = new StringReader ( arg0 ) ; return parse ( loc1, loc0 ) ; }"
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length(); i += 1) { \n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
      "target": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length() + 1; i += 1) { \n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
      "function range": "4,5-12,5",
      "raw_output": [
        "int function ( String arg0, char arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0, char arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, char arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, char arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) loc0 ++ ; else loc1 ++ ; } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg1. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, char arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0, char arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "how many times a substring appears in a string.",
        "how many times a substring appears in a string",
        "Returns how many times the substring appears in the string.",
        "Returns how many times a substring appears in a string.",
        "how many times the substring appears in the string."
      ],
      "output": [
        "public static int how_many_times ( String arg0, char arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) loc0 ++ ; } return loc0 ; }",
        "public static int how_many_times ( String arg0, char arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0, char arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) loc0 ++ ; } return loc0 ; }",
        "public static int how_many_times ( String arg0, String arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0, char arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0, String arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0, String arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) loc0 ++ ; else loc1 ++ ; } return loc0 ; }",
        "public static int how_many_times ( String arg0, String arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg1. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) loc0 ++ ; } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) loc0 ++ ; } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0, String arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0, char arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) loc0 ++ ; } return loc0 ; }",
        "public static int how_many_times ( String arg0, char arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0, String arg1 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) loc0 ++ ; } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) loc0 ++ ; } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) loc0 ++ ; } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int how_many_times ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == arg0. charAt ( loc2 ) ) { loc0 ++ ; } } return loc0 ; }"
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array); \n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
      "target": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>(){ \n        public int compare(String n1, String n2) {\n            return value_map.get(n1) - value_map.get(n2);\n        }\n    });\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
      "function range": "6,5-27,5",
      "raw_output": [
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; loc0 = arg0. substring ( 0, loc2 ) ; arg0 = arg0. substring ( loc2 + 1, loc0 ) ; } } return arg0 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) < loc1 ) { loc1 = arg0 ; loc0 = loc2 ; } else if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; } else if ( arg0. charAt ( loc2 ) < loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; } else if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; loc0 = arg0. substring ( 0, loc2 ) ; } } return loc1 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { public int compare ( Integer arg1, Integer arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return arg0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { @ Override public int compare ( Integer arg1, Integer arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return arg0 ; }",
        "List < Number > function ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Number > ( ) { public int compare ( Number arg1, Number arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return loc0 ; }",
        "List < Number > function ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Number > ( ) { public int compare ( Number arg1, Number arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return loc0 ; }",
        "List < Number > function ( List < Number > arg0 ) { int loc0 = arg0. loc0 ( ) ; Collections. sort ( arg0, new Comparator < Number > ( ) { public int compare ( Number arg1, Number arg2 ) { return arg1. intValue ( ) - arg2. intValue ( ) ; } } ) ; return arg0 ; }",
        "int [ ] function ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; for ( int loc2 = loc1 + 1 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = loc0 [ loc2 ] ; } } return loc0 ; }",
        "int [ ] function ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 - 1 ] = arg0 [ loc1 ] ; for ( int loc2 = loc1 + 1 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = loc0 [ loc2 ] ; } return loc0 ; }",
        "int [ ] function ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; for ( int loc2 = loc1 + 1 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = loc0 [ loc2 ] ; } return loc0 ; }",
        "int [ ] function ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 - 1 ] = arg0 [ loc1 ] ; for ( int loc2 = loc1 + 1 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = loc0 [ loc2 ] ; } return loc0 ; }",
        "int [ ] function ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 - 1 ] = arg0 [ loc1 ] ; for ( int loc2 = loc1 - 1 ; loc2 >= 0 ; loc2 -- ) loc0 [ loc2 ] = loc0 [ loc2 ] ; } return loc0 ; }",
        "String function ( Number... arg0 ) { int loc0 = arg0. length ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < loc1 ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 ; } else if ( arg0 [ loc2 ] > loc1 ) { loc1 = arg0 [ loc2 ] ; } } return loc1 ; }",
        "String function ( Number... arg0 ) { int loc0 = arg0. length ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < loc1 ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 ; } else if ( arg0 [ loc2 ] > loc1 ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 ; } } return loc1 ; }",
        "String function ( Number... arg0 ) { int loc0 = arg0. length ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < loc1 ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 ; } else if ( arg0 [ loc2 ] > loc1 ) { loc1 = arg0 [ loc2 ] ; loc0 = loc1 ; } } return loc1 ; }",
        "String function ( Number... arg0 ) { int loc0 = arg0. length ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 - 1 ] ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 ; } else if ( arg0 [ loc2 ] > arg0 [ loc1 ] ) { loc1 = arg0 [ loc1 - 1 ] ; } } } return loc1 ; }",
        "String function ( Number... arg0 ) { int loc0 = arg0. length ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc2 - 1 ] ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 - 1 ; } else if ( arg0 [ loc2 ] > arg0 [ loc2 ] ) { loc1 = arg0 [ loc2 ] ; } } } return loc1 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; } else if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; } else if ( arg0. charAt ( loc2 ) < loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc0 ) ; } else if ( arg0. charAt ( loc2 ) < loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; loc0 = arg0. substring ( 0, loc2 ) ; } } return loc1 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1 ) ; } else if ( arg0. charAt ( loc2 ) < loc1 ) { loc1 = arg0 ; } } return loc1 ; }"
      ],
      "mid_translation": [
        "Sort a string of numbers.",
        "Sort a list of numbers.",
        "Sort numbers.",
        "Sort a String of numbers.",
        "Sort a string of numbers"
      ],
      "output": [
        "public static String sort_numbers ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; loc0 = arg0. substring ( 0, loc2 ) ; arg0 = arg0. substring ( loc2 + 1, loc0 ) ; } } return arg0 ; }",
        "public static String sort_numbers ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) < loc1 ) { loc1 = arg0 ; loc0 = loc2 ; } else if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "public static String sort_numbers ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; } else if ( arg0. charAt ( loc2 ) < loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "public static String sort_numbers ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; } else if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "public static String sort_numbers ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; loc0 = arg0. substring ( 0, loc2 ) ; } } return loc1 ; }",
        "public static int sort_numbers ( Integer arg1, Integer arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return arg0 ; }",
        "public static int sort_numbers ( Integer arg1, Integer arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return arg0 ; }",
        "public static int sort_numbers ( Number arg1, Number arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return loc0 ; }",
        "public static int sort_numbers ( Number arg1, Number arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return loc0 ; }",
        "public static int sort_numbers ( Number arg1, Number arg2 ) { return arg1. intValue ( ) - arg2. intValue ( ) ; } } ) ; return arg0 ; }",
        "public static int [ ] sort_numbers ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; for ( int loc2 = loc1 + 1 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = loc0 [ loc2 ] ; } } return loc0 ; }",
        "public static int [ ] sort_numbers ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 - 1 ] = arg0 [ loc1 ] ; for ( int loc2 = loc1 + 1 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = loc0 [ loc2 ] ; } return loc0 ; }",
        "public static int [ ] sort_numbers ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; for ( int loc2 = loc1 + 1 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = loc0 [ loc2 ] ; } return loc0 ; }",
        "public static int [ ] sort_numbers ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 - 1 ] = arg0 [ loc1 ] ; for ( int loc2 = loc1 + 1 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = loc0 [ loc2 ] ; } return loc0 ; }",
        "public static int [ ] sort_numbers ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 - 1 ] = arg0 [ loc1 ] ; for ( int loc2 = loc1 - 1 ; loc2 >= 0 ; loc2 -- ) loc0 [ loc2 ] = loc0 [ loc2 ] ; } return loc0 ; }",
        "public static String sort_numbers ( Number... arg0 ) { int loc0 = arg0. length ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < loc1 ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 ; } else if ( arg0 [ loc2 ] > loc1 ) { loc1 = arg0 [ loc2 ] ; } } return loc1 ; }",
        "public static String sort_numbers ( Number... arg0 ) { int loc0 = arg0. length ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < loc1 ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 ; } else if ( arg0 [ loc2 ] > loc1 ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 ; } } return loc1 ; }",
        "public static String sort_numbers ( Number... arg0 ) { int loc0 = arg0. length ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < loc1 ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 ; } else if ( arg0 [ loc2 ] > loc1 ) { loc1 = arg0 [ loc2 ] ; loc0 = loc1 ; } } return loc1 ; }",
        "public static String sort_numbers ( Number... arg0 ) { int loc0 = arg0. length ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 - 1 ] ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 ; } else if ( arg0 [ loc2 ] > arg0 [ loc1 ] ) { loc1 = arg0 [ loc1 - 1 ] ; } } } return loc1 ; }",
        "public static String sort_numbers ( Number... arg0 ) { int loc0 = arg0. length ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc2 - 1 ] ) { loc1 = arg0 [ loc2 ] ; loc0 = loc2 - 1 ; } else if ( arg0 [ loc2 ] > arg0 [ loc2 ] ) { loc1 = arg0 [ loc2 ] ; } } } return loc1 ; }",
        "public static String sort_numbers ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; } else if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "public static String sort_numbers ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; } else if ( arg0. charAt ( loc2 ) < loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "public static String sort_numbers ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc0 ) ; } else if ( arg0. charAt ( loc2 ) < loc1 ) { loc1 = arg0 ; } } return loc1 ; }",
        "public static String sort_numbers ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1, loc1. length ( ) ) ; loc0 = arg0. substring ( 0, loc2 ) ; } } return loc1 ; }",
        "public static String sort_numbers ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String loc1 = \"srini_string\" ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) > loc1 ) { loc1 = arg0. substring ( loc2 + 1 ) ; } else if ( arg0. charAt ( loc2 ) < loc1 ) { loc1 = arg0 ; } } return loc1 ; }"
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){ \n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
      "target": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = i + 1; j < numbers.length; j += 1){ \n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-24,5",
      "raw_output": [
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Number [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) loc0 = loc2 ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; if ( arg0 [ loc1 ] > loc2 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; if ( arg0 [ loc1 ] < loc2 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; if ( loc2 < arg1 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 1 ; loc1 < arg0. loc0 ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 1 ; loc1 < arg0. loc0 ( ) ; loc1 ++ ) { int loc2 = arg0. loc1 ( loc1 ) ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 1 ; loc1 < arg0. loc0 ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. get ( loc1 ) > arg0. get ( loc1 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 1 ; loc1 < arg0. loc0 ( ) ; loc1 ++ ) { int loc2 = arg0. loc1 ( loc1 ) ; if ( loc2 < loc0 ) loc0 = loc2 ; } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "double function ( double [ ] arg0, double arg1 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; loc1 = loc2 ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) loc0 = loc2 ; } return loc0 ; }",
        "double function ( double [ ] arg0, double arg1 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return arg0 [ loc0 ] ; }"
      ],
      "mid_translation": [
        "Find the closest elements in the array of numbers.",
        "Find the closest elements of the array of numbers.",
        "Finds the closest elements in the array of numbers.",
        "Find the closest elements of a list of numbers.",
        "Find the closest elements in the array of doubles."
      ],
      "output": [
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_closest_elements ( Number [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) loc0 = loc2 ; } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; if ( arg0 [ loc1 ] > loc2 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; if ( arg0 [ loc1 ] < loc2 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; if ( loc2 < arg1 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } } return loc0 ; }",
        "public static int find_closest_elements ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_closest_elements ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 1 ; loc1 < arg0. loc0 ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_closest_elements ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 1 ; loc1 < arg0. loc0 ( ) ; loc1 ++ ) { int loc2 = arg0. loc1 ( loc1 ) ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int find_closest_elements ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 1 ; loc1 < arg0. loc0 ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_closest_elements ( List < Integer > arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. get ( loc1 ) > arg0. get ( loc1 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_closest_elements ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 1 ; loc1 < arg0. loc0 ( ) ; loc1 ++ ) { int loc2 = arg0. loc1 ( loc1 ) ; if ( loc2 < loc0 ) loc0 = loc2 ; } return loc0 ; }",
        "public static double find_closest_elements ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static double find_closest_elements ( double [ ] arg0, double arg1 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static double find_closest_elements ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; loc1 = loc2 ; } } return loc0 ; }",
        "public static double find_closest_elements ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) loc0 = loc2 ; } return loc0 ; }",
        "public static double find_closest_elements ( double [ ] arg0, double arg1 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return arg0 [ loc0 ] ; }"
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) { \n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
      "target": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n        if (numbers[i] < min){ \n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
      "function range": "4,5-22,5",
      "raw_output": [
        "float function ( float arg0, Unit arg1 ) { return arg1. scale ( arg0 ) ; }",
        "T function ( T arg0 ) { return arg0. scale ( 1.0f, Unit. NANOSECONDS ) ; }",
        "float function ( float arg0 ) { return arg0 ; }",
        "T function ( T arg0 ) { return arg0. scale ( 1.0f, Unit. MICROS ) ; }",
        "float function ( float arg0 ) { return ( float ) ( arg0 / 1E3 ) ; }",
        "double [ ] function ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0, Unit arg1 ) { double loc0 [ ] = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "double [ ] function ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length + 1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "Number [ ] function ( Number [ ] arg0, Unit arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. scale ( arg1 ) ; } return loc0 ; }",
        "List < Number > function ( List < Number > arg0, Unit arg1 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Number loc2 : arg0 ) { loc0. add ( rescale ( loc2, arg1 ) ) ; loc1 ++ ; } return loc0 ; }",
        "Number [ ] function ( Number [ ] arg0, Unit arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. doubleValue ( ) ; } return loc0 ; }",
        "List < Number > function ( List < Number > arg0, Unit arg1 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Number loc2 : arg0 ) { loc0. add ( rescale ( loc2, arg1 ) ) ; loc1 ++ ; } return loc0 ; }",
        "List < Number > function ( List < Number > arg0, Unit arg1 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) { loc0. add ( rescale ( loc1, arg1 ) ) ; } return loc0 ; }",
        "Number [ ] function ( Number [ ] arg0, Unit arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. scale ( arg1 ) ; } return loc0 ; }",
        "Number [ ] function ( Number [ ] arg0, Unit arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. intValue ( ) ; } return loc0 ; }",
        "Number [ ] function ( Number [ ] arg0, NumberUnits arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. scale ( arg1 ) ; } return loc0 ; }",
        "Number [ ] function ( Number [ ] arg0, Unit arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. doubleValue ( ) ; } return loc0 ; }",
        "List < Number > function ( Collection < Number > arg0, Unit arg1 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Number loc2 : arg0 ) { loc0. add ( rescale ( loc2, arg1 ) ) ; loc1 ++ ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. scale ( arg1 ) ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0, double arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = ( double ) arg0 [ loc1 ] / arg1 ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. doubleValue ( ) ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0, double arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0, double arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] / arg1 ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Rescale to unit.",
        "Rescale a double array to a unit.",
        "Rescale a set of numbers to unit.",
        "Rescale a set of numbers to units.",
        "Rescale a double array of numbers to units."
      ],
      "output": [
        "public static float rescale_to_unit ( float arg0, Unit arg1 ) { return arg1. scale ( arg0 ) ; }",
        "public static T rescale_to_unit ( T arg0 ) { return arg0. scale ( 1.0f, Unit. NANOSECONDS ) ; }",
        "public static float rescale_to_unit ( float arg0 ) { return arg0 ; }",
        "public static T rescale_to_unit ( T arg0 ) { return arg0. scale ( 1.0f, Unit. MICROS ) ; }",
        "public static float rescale_to_unit ( float arg0 ) { return ( float ) ( arg0 / 1E3 ) ; }",
        "public static double [ ] rescale_to_unit ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double [ ] rescale_to_unit ( double [ ] arg0, Unit arg1 ) { double loc0 [ ] = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double [ ] rescale_to_unit ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "public static double [ ] rescale_to_unit ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static double [ ] rescale_to_unit ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length + 1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static Number [ ] rescale_to_unit ( Number [ ] arg0, Unit arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. scale ( arg1 ) ; } return loc0 ; }",
        "public static List < Number > rescale_to_unit ( List < Number > arg0, Unit arg1 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Number loc2 : arg0 ) { loc0. add ( rescale ( loc2, arg1 ) ) ; loc1 ++ ; } return loc0 ; }",
        "public static Number [ ] rescale_to_unit ( Number [ ] arg0, Unit arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. doubleValue ( ) ; } return loc0 ; }",
        "public static List < Number > rescale_to_unit ( List < Number > arg0, Unit arg1 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Number loc2 : arg0 ) { loc0. add ( rescale ( loc2, arg1 ) ) ; loc1 ++ ; } return loc0 ; }",
        "public static List < Number > rescale_to_unit ( List < Number > arg0, Unit arg1 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) { loc0. add ( rescale ( loc1, arg1 ) ) ; } return loc0 ; }",
        "public static Number [ ] rescale_to_unit ( Number [ ] arg0, Unit arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. scale ( arg1 ) ; } return loc0 ; }",
        "public static Number [ ] rescale_to_unit ( Number [ ] arg0, Unit arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. intValue ( ) ; } return loc0 ; }",
        "public static Number [ ] rescale_to_unit ( Number [ ] arg0, NumberUnits arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. scale ( arg1 ) ; } return loc0 ; }",
        "public static Number [ ] rescale_to_unit ( Number [ ] arg0, Unit arg1 ) { Number [ ] loc0 = new Number [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. doubleValue ( ) ; } return loc0 ; }",
        "public static List < Number > rescale_to_unit ( Collection < Number > arg0, Unit arg1 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Number loc2 : arg0 ) { loc0. add ( rescale ( loc2, arg1 ) ) ; loc1 ++ ; } return loc0 ; }",
        "public static double [ ] rescale_to_unit ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. scale ( arg1 ) ; } return loc0 ; }",
        "public static double [ ] rescale_to_unit ( double [ ] arg0, double arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = ( double ) arg0 [ loc1 ] / arg1 ; } return loc0 ; }",
        "public static double [ ] rescale_to_unit ( double [ ] arg0, Unit arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. doubleValue ( ) ; } return loc0 ; }",
        "public static double [ ] rescale_to_unit ( double [ ] arg0, double arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double [ ] rescale_to_unit ( double [ ] arg0, double arg1 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] / arg1 ; } return loc0 ; }"
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value); \n    }\n    return result;\n}",
      "target": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        if (value instanceof Integer){ \n            result.add((Integer) value);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-14,5",
      "raw_output": [
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) loc0. add ( loc1. intValue ( ) ) ; return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. getId ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) loc0. add ( loc1. intValue ( ) ) ; return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) loc0. add ( loc1. intValue ( ) ) ; return loc0 ; }",
        "List < Integer > function ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, Collection < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg1 ) { if ( arg0. contains ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. get ( loc1 )!= 0 ) { loc0 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. get ( loc1 )!= 0 ) { loc0 ++ ; } } return arg0 ; }",
        "List < Integer > function ( List < Integer > arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. contains ( arg0. get ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Converts a list of objects to a list of integers.",
        "This method will take a list of objects and convert them to a list of integers.",
        "Converts a list of objects into a list of integers.",
        "This method will take a list of objects and convert them to a List of integers.",
        "Method to filter the list of integers from a list of objects."
      ],
      "output": [
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) loc0. add ( loc1. intValue ( ) ) ; return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. getId ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? extends Object > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) loc0. add ( loc1. intValue ( ) ) ; return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Object loc1 : arg0 ) loc0. add ( loc1. intValue ( ) ) ; return loc0 ; }",
        "public static List < Integer > filter_integers ( List <? > arg0 ) { List < Integer > loc0 = new ArrayList ( ) ; for ( Object loc1 : arg0 ) { loc0. add ( loc1. intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > filter_integers ( List < Integer > arg0, Collection < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg1 ) { if ( arg0. contains ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > filter_integers ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. get ( loc1 )!= 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static List < Integer > filter_integers ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. get ( loc1 )!= 0 ) { loc0 ++ ; } } return arg0 ; }",
        "public static List < Integer > filter_integers ( List < Integer > arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static List < Integer > filter_integers ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. contains ( arg0. get ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }"
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n    return string.length() - 1; \n}",
      "target": "public static int strlen(String string){\n    return string.length(); \n}",
      "function range": "4,5-6,5",
      "raw_output": [
        "int function ( String arg0 ) { return arg0 == null? 0 : arg0. length ( ) ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 += arg0. charAt ( loc1 ) ; return loc0 ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; try { loc0 = arg0. loc0 ( ) ; } catch ( ArrayIndexOutOfBoundsException loc1 ) { loc0 = arg0. loc0 ( ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { return arg0. length ( ) ; }",
        "int function ( String arg0 ) { return arg0 == null? 0 : arg0. length ( ) ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { return arg0 == null? 0 : arg0. length ( ) ; }",
        "int function ( String arg0 ) { return arg0. length ( ) ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 += arg0. charAt ( loc1 ) ; return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { return arg0. length ( ) ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 += arg0. charAt ( loc1 ) ; return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { return arg0 == null? 0 : arg0. length ( ) ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { return arg0 == null? 0 : arg0. length ( ) ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Get length of string.",
        "Returns the length of a string.",
        "Get the length of a string.",
        "Returns the length of the string.",
        "Returns the length of a String."
      ],
      "output": [
        "public static int strlen ( String arg0 ) { return arg0 == null? 0 : arg0. length ( ) ; }",
        "public static int strlen ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 += arg0. charAt ( loc1 ) ; return loc0 ; }",
        "public static int strlen ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; try { loc0 = arg0. loc0 ( ) ; } catch ( ArrayIndexOutOfBoundsException loc1 ) { loc0 = arg0. loc0 ( ) ; } return loc0 ; }",
        "public static int strlen ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "public static int strlen ( String arg0 ) { return arg0. length ( ) ; }",
        "public static int strlen ( String arg0 ) { return arg0 == null? 0 : arg0. length ( ) ; }",
        "public static int strlen ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int strlen ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "public static int strlen ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int strlen ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int strlen ( String arg0 ) { return arg0 == null? 0 : arg0. length ( ) ; }",
        "public static int strlen ( String arg0 ) { return arg0. length ( ) ; }",
        "public static int strlen ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "public static int strlen ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 += arg0. charAt ( loc1 ) ; return loc0 ; }",
        "public static int strlen ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "public static int strlen ( String arg0 ) { return arg0. length ( ) ; }",
        "public static int strlen ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int strlen ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 += arg0. charAt ( loc1 ) ; return loc0 ; }",
        "public static int strlen ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "public static int strlen ( String arg0 ) { return arg0 == null? 0 : arg0. length ( ) ; }",
        "public static int strlen ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int strlen ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int strlen ( String arg0 ) { return arg0 == null? 0 : arg0. length ( ) ; }",
        "public static int strlen ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += arg0. charAt ( loc2 ) ; } return loc0 ; }",
        "public static int strlen ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }"
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){ \n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
      "target": "public static int largest_divisor(int n) {\n    for (int i = n - 1; i >= 1; i -= 1){ \n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
      "function range": "4,5-10,5",
      "raw_output": [
        "int function ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( arg0. get ( loc1 ), loc1 ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = arg0. length - 1 ; loc1 > 0 ; loc1 -- ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = arg0. length - 1 ; loc1 > 0 ; loc1 -- ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "int function ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( arg0. get ( loc1 ), loc1 ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = arg0. length - 1 ; loc1 > 0 ; loc1 -- ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = arg0. size ( ) - 1 ; loc1 > 0 ; loc1 -- ) { loc0 = Math. max ( loc0, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 > loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = arg0. length - 1 ; loc1 > 0 ; loc1 -- ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Get the largest divisor of n.",
        "Gets the largest divisor of n.",
        "Returns the largest divisor of n.",
        "Get the largest divisor.",
        "Gets the largest divisor."
      ],
      "output": [
        "public static int largest_divisor ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_divisor ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( arg0. get ( loc1 ), loc1 ) ; } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = arg0. length - 1 ; loc1 > 0 ; loc1 -- ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_divisor ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = arg0. length - 1 ; loc1 > 0 ; loc1 -- ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_divisor ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static int largest_divisor ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( arg0. get ( loc1 ), loc1 ) ; } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = arg0. length - 1 ; loc1 > 0 ; loc1 -- ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_divisor ( IntegerList arg0 ) { int loc0 = 0 ; for ( int loc1 = arg0. size ( ) - 1 ; loc1 > 0 ; loc1 -- ) { loc0 = Math. max ( loc0, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 > loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_divisor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = arg0. length - 1 ; loc1 > 0 ; loc1 -- ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }"
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result; \n}",
      "target": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){ \n        result.add(n);\n    }\n    return result;\n}",
      "function range": "7,5-21,5",
      "raw_output": [
        "double function ( NumberVector arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; ++ loc1 ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( NumberVector arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0, loc1 ) ; } return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - loc1, 2 ) ; } return loc0 ; }",
        "double function ( NumberVector arg0 ) { double loc0 = 0 ; double loc1 = 1 ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; ++ loc2 ) { loc0 *= arg0. get ( loc2 ) ; } return loc0 ; }",
        "double function ( final N arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( N arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( final N arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( final N arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; ++ loc1 ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( NumberVector arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; ++ loc1 ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( final N arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( N arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( NumberVector arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( NumberVector arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; ++ loc1 ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( final N arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. dim1 ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "double function ( double arg0 ) { if ( arg0 == 0.0 ) { return 1.0 ; } else if ( arg0 < 1.0 ) { throw new ArithmeticException ( \"srini_string\" ) ; } else { return 1.0 / arg0 ; } }",
        "double function ( double arg0 ) { double loc0 = 1 ; if ( arg0 > 0.0 ) { loc0 *= arg0 ; } else if ( arg0 < 1.0 ) { loc0 *= arg0 ; } return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = 1 ; if ( arg0 >= 0 ) { loc0 *= arg0 ; } else { loc0 *= arg0 ; } return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = 1 ; if ( arg0 >= 0.0 ) { loc0 *= arg0 ; } else { loc0 *= arg0 ; } return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = 1 ; if ( arg0 > 0.0 ) { loc0 *= arg0 ; } else { loc0 *= arg0 ; } return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) loc0 *= arg0 ; return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } return loc0 / arg0 ; }",
        "double function ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } if ( loc0 < arg0 ) { loc0 *= arg0 ; } return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } double loc2 = loc0 / arg0 ; return loc2 ; }"
      ],
      "mid_translation": [
        "Returns the factorization of n.",
        "Gets the factorization of n.",
        "Get the factorization of n.",
        "Gets the factorization of a number.",
        "Factorize a number."
      ],
      "output": [
        "public static double factorize ( NumberVector arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; ++ loc1 ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( NumberVector arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0, loc1 ) ; } return loc0 ; }",
        "public static double factorize ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - loc1, 2 ) ; } return loc0 ; }",
        "public static double factorize ( NumberVector arg0 ) { double loc0 = 0 ; double loc1 = 1 ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; ++ loc2 ) { loc0 *= arg0. get ( loc2 ) ; } return loc0 ; }",
        "public static double factorize ( final N arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( N arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( final N arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( final N arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; ++ loc1 ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( NumberVector arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; ++ loc1 ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( final N arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( N arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( NumberVector arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( NumberVector arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; ++ loc1 ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( final N arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. dim1 ( ) ; loc1 ++ ) { loc0 *= arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static double factorize ( double arg0 ) { if ( arg0 == 0.0 ) { return 1.0 ; } else if ( arg0 < 1.0 ) { throw new ArithmeticException ( \"srini_string\" ) ; } else { return 1.0 / arg0 ; } }",
        "public static double factorize ( double arg0 ) { double loc0 = 1 ; if ( arg0 > 0.0 ) { loc0 *= arg0 ; } else if ( arg0 < 1.0 ) { loc0 *= arg0 ; } return loc0 ; }",
        "public static double factorize ( double arg0 ) { double loc0 = 1 ; if ( arg0 >= 0 ) { loc0 *= arg0 ; } else { loc0 *= arg0 ; } return loc0 ; }",
        "public static double factorize ( double arg0 ) { double loc0 = 1 ; if ( arg0 >= 0.0 ) { loc0 *= arg0 ; } else { loc0 *= arg0 ; } return loc0 ; }",
        "public static double factorize ( double arg0 ) { double loc0 = 1 ; if ( arg0 > 0.0 ) { loc0 *= arg0 ; } else { loc0 *= arg0 ; } return loc0 ; }",
        "public static double factorize ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) loc0 *= arg0 ; return loc0 ; }",
        "public static double factorize ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } return loc0 ; }",
        "public static double factorize ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } return loc0 / arg0 ; }",
        "public static double factorize ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } if ( loc0 < arg0 ) { loc0 *= arg0 ; } return loc0 ; }",
        "public static double factorize ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } double loc2 = loc0 / arg0 ; return loc2 ; }"
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n) + 1); \n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
      "target": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (! count.containsKey(n)) \n            count.put(n, 0);\n        count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
      "function range": "8,5-22,5",
      "raw_output": [
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if (! loc0. contains ( loc2 ) ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= null ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc1 < loc2 ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 ; for ( loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if (! loc0. contains ( loc2 ) ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= null ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if (! loc0. contains ( loc2 ) ) { loc0. add ( loc2 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 ; for ( loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= loc1 ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= null ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2. equals ( loc1 ) ) { loc0. add ( loc2 ) ; } else { loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= null ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc0. contains ( loc2 ) ) { loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc1 < loc2 ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 ; for ( loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if (! loc0. contains ( loc2 ) ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= loc1 ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if (! loc0. contains ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Remove duplicates from a list of numbers.",
        "Remove duplicates from a list of integers.",
        "Removes duplicates from a list of integers.",
        "Removes duplicates from a list of numbers.",
        "Remove duplicates from a list of integer."
      ],
      "output": [
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if (! loc0. contains ( loc2 ) ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= null ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc1 < loc2 ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 ; for ( loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if (! loc0. contains ( loc2 ) ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= null ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if (! loc0. contains ( loc2 ) ) { loc0. add ( loc2 ) ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 ; for ( loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= loc1 ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= null ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2. equals ( loc1 ) ) { loc0. add ( loc2 ) ; } else { loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= null ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc0. contains ( loc2 ) ) { loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc1 < loc2 ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 ; for ( loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if (! loc0. contains ( loc2 ) ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2!= loc1 ) { loc0. add ( loc2 ) ; loc1 ++ ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if (! loc0. contains ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > remove_duplicates ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }"
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toLowerCase(c); \n        } \n        else { \n            char_list[i] = Character.toUpperCase(c); \n        }\n    }\n    return new String(char_list);\n}",
      "target": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c); \n        } \n        else { \n            char_list[i] = Character.toLowerCase(c); \n        }\n    }\n    return new String(char_list);\n}",
      "function range": "4,5-17,5",
      "raw_output": [
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return arg0 ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) return null ; return arg0. toUpperCase ( ) ; }",
        "String function ( String arg0 ) { return arg0. toUpperCase ( ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return arg0. toUpperCase ( ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return arg0. toUpperCase ( ) ; }",
        "String function ( String arg0 ) { return arg0. toUpperCase ( ) ; }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return null ; } }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return arg0 ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } else { return arg0. toUpperCase ( ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return arg0. toUpperCase ( ) ; }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return arg0 ; } }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return null ; } }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return \"srini_string\" ; } }",
        "String function ( String arg0 ) { return arg0. toUpperCase ( ) ; }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return arg0 ; } }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return arg0 ; } }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return \"srini_string\" ; } }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return arg0 ; } }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : default : return arg0 ; } }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return arg0 ; } }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return arg0 ; } }",
        "String function ( String arg0 ) { switch ( arg0. toUpperCase ( ) ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return arg0 ; } }",
        "String function ( String arg0 ) { return arg0. toUpperCase ( ) ; }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return \"srini_string\" ; } }",
        "String function ( String arg0 ) { switch ( arg0 ) { case \"srini_string\" : return \"srini_string\" ; case \"srini_string\" : return \"srini_string\" ; default : return arg0 ; } }"
      ],
      "mid_translation": [
        "Flips the case of a string.",
        "Flips the case of a String.",
        "Flips the case of a String",
        "Flips the case of a string",
        "Flips the case of the string."
      ],
      "output": [
        "",
        "public static String flip_case ( String arg0 ) { if ( arg0 == null ) return null ; return arg0. toUpperCase ( ) ; }",
        "public static String flip_case ( String arg0 ) { return arg0. toUpperCase ( ) ; }",
        "public static String flip_case ( String arg0 ) { if ( arg0 == null ) { return null ; } return arg0. toUpperCase ( ) ; }",
        "public static String flip_case ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return arg0. toUpperCase ( ) ; }",
        "public static String flip_case ( String arg0 ) { return arg0. toUpperCase ( ) ; }",
        "",
        "",
        "public static String flip_case ( String arg0 ) { if ( arg0 == null ) { return null ; } else { return arg0. toUpperCase ( ) ; } }",
        "public static String flip_case ( String arg0 ) { if ( arg0 == null ) { return null ; } return arg0. toUpperCase ( ) ; }",
        "",
        "",
        "",
        "public static String flip_case ( String arg0 ) { return arg0. toUpperCase ( ) ; }",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "public static String flip_case ( String arg0 ) { return arg0. toUpperCase ( ) ; }",
        "",
        ""
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n    String result = null; \n    for (String string : strings)\n        result += string;\n    return result;\n}",
      "target": "public static String concatenate(String[] strings) {\n    String result = \"\"; \n    for (String string : strings)\n        result += string;\n    return result;\n}",
      "function range": "4,5-9,5",
      "raw_output": [
        "String function ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( List < String > arg0 ) { if ( arg0 == null ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 + \"srini_string\" ) ; } return loc0. toString ( ) ; }",
        "String function ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "String function ( String... arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }"
      ],
      "mid_translation": [
        "Concatenate a list of strings.",
        "Concatenate an array of strings.",
        "Concatenates an array of strings.",
        "Concatenate a sequence of strings.",
        "Concatenate the given array of strings."
      ],
      "output": [
        "public static String concatenate ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( List < String > arg0 ) { if ( arg0 == null ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 + \"srini_string\" ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( List < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { loc0. append ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static String concatenate ( String... arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) loc0. append ( loc1 ) ; return loc0. toString ( ) ; }"
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)){ \n            result.add(string);\n        }\n    }\n    return result;\n}",
      "target": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix)){ \n            result.add(string);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "raw_output": [
        "Filter function ( final Map < String, String > arg0 ) { return new Filter ( ) { @ Override public boolean accept ( final String arg1 ) { return arg0. containsKey ( arg1 ) ; } } ; }",
        "Filter function ( final String arg0 ) { return new Filter ( ) { @ Override public boolean accept ( Object arg1 ) { return arg0. startsWith ( arg1. getClass ( ). getName ( ) ) ; } } ; }",
        "Filter function ( final String arg0 ) { return new Filter ( ) { @ Override public boolean accepts ( Object arg1 ) { return arg0. startsWith ( arg1. getClass ( ). getName ( ) ) ; } } ; }",
        "Filter < T > function ( final T arg0 ) { return new Filter < T > ( ) { @ Override public boolean accept ( final T arg1 ) { return arg0. startsWith ( arg1. getClass ( ). getName ( ) ) ; } } ; }",
        "Filter function ( final String arg0 ) { return new Filter ( ) { @ Override public boolean accept ( final Object arg1 ) { return arg0. startsWith ( arg1. getClass ( ). getName ( ) ) ; } } ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "String function ( List < String > arg0, String arg1 ) { if ( arg0 == null ) { return null ; } for ( String loc0 : arg0 ) { if ( arg1. startsWith ( loc0 ) ) { return loc0 ; } } return null ; }"
      ],
      "mid_translation": [
        "Filter by prefix.",
        "Filter a list of strings by prefix.",
        "Filters a list of strings by prefix.",
        "Filter by prefix list of strings",
        "Filter by prefix list of strings."
      ],
      "output": [
        "",
        "",
        "",
        "",
        "",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { if ( arg0 == null || arg0. isEmpty ( ) ) { return arg0 ; } List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) { if ( arg1. startsWith ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < String > filter_by_prefix ( List < String > arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { if ( loc1. startsWith ( arg1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static String filter_by_prefix ( List < String > arg0, String arg1 ) { if ( arg0 == null ) { return null ; } for ( String loc0 : arg0 ) { if ( arg1. startsWith ( loc0 ) ) { return loc0 ; } } return null ; }"
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number); \n    }\n    return result;\n}",
      "target": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0){ \n            result.add(number);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-14,5",
      "raw_output": [
        "List < Integer > function ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Number > function ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Number > function ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Number > function ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Number > function ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Number > function ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Number > function ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "List < Number > function ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Number > function ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Number > function ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) loc0. add ( loc1 ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Get a list of positive numbers.",
        "Get a list of positive numbers from a list of numbers",
        "Gets the positive list of numbers.",
        "Gets a list of positive numbers.",
        "This method returns a list of positive numbers."
      ],
      "output": [
        "public static List < Integer > get_positive ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > get_positive ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Number > get_positive ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > get_positive ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > get_positive ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Number > get_positive ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Number > get_positive ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Number > get_positive ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Number > get_positive ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Number > get_positive ( List < Number > arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. size ( ) ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > get_positive ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "public static List < Number > get_positive ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Number > get_positive ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > get_positive ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > get_positive ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > get_positive ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > get_positive ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > get_positive ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Number > get_positive ( Number... arg0 ) { List < Number > loc0 = new ArrayList < Number > ( arg0. length ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > get_positive ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > get_positive ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > get_positive ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > get_positive ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > get_positive ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. length ) ; for ( Number loc1 : arg0 ) { loc0. add ( loc1. doubleValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > get_positive ( Number... arg0 ) { List < Integer > loc0 = new ArrayList < > ( ) ; for ( Number loc1 : arg0 ) { if ( loc1 >= 0 ) loc0. add ( loc1 ) ; } return loc0 ; }"
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){ \n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
      "target": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 2; k < n - 1; k += 1){ \n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
      "function range": "4,5-12,5",
      "raw_output": [
        "boolean function ( int arg0 ) { if ( arg0 > 1 ) { return true ; } else { return false ; } }",
        "boolean function ( int arg0 ) { if ( arg0 > 1 ) return true ; return false ; }",
        "boolean function ( int arg0 ) { if ( arg0 < 1 ) return false ; return true ; }",
        "boolean function ( int arg0 ) { return arg0 < 1 ; }",
        "boolean function ( int arg0 ) { if ( arg0 > 1 ) return true ; else return false ; }",
        "boolean function ( Object arg0 ) { if ( arg0 instanceof Prime ) { Prime loc0 = ( Prime ) arg0 ; return ( loc0. cardinality ( ) == 1 ) ; } return false ; }",
        "boolean function ( Object arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof Prime ) { Prime loc0 = ( Prime ) arg0 ; return ( loc0. cardinality ( ) == 1 ) ; } return true ; }",
        "boolean function ( Object arg0 ) { if ( arg0 instanceof Prime ) { Prime loc0 = ( Prime ) arg0 ; return ( loc0. cardinality ( ) == 1 || loc0. cardinality ( ) == 1 ) ; } return false ; }",
        "boolean function ( Object arg0 ) { if ( arg0 instanceof Prime ) { Prime loc0 = ( Prime ) arg0 ; return ( loc0. cardinality ( ) == 1 ) ; } else { return false ; } }",
        "boolean function ( Object arg0 ) { if ( arg0 instanceof Prime ) { Prime loc0 = ( Prime ) arg0 ; return ( loc0. cardinality ( ) == 1 || loc0. cardinality ( ) == 1 ) ; } else { return false ; } }",
        "boolean function ( long arg0 ) { return ( arg0 % 1 == 0 ) ; }",
        "boolean function ( int arg0 ) { return arg0 % 2 == 0 ; }",
        "boolean function ( int arg0 ) { return arg0 < 1 ; }",
        "boolean function ( Integer arg0 ) { if ( arg0 == null ) return false ; return arg0. intValue ( ) == 1 ; }",
        "boolean function ( int arg0 ) { return arg0 < prime ( arg0 ) ; }",
        "boolean function ( Object arg0 ) { if ( arg0 instanceof PrimeNumber ) { PrimeNumber loc0 = ( PrimeNumber ) arg0 ; return ( loc0. compareTo ( \"srini_string\" ) == 0 ) ; } return false ; }",
        "boolean function ( Object arg0 ) { if ( arg0 instanceof PrimeNumber ) { PrimeNumber loc0 = ( PrimeNumber ) arg0 ; return ( loc0. compareTo ( \"srini_string\" ) >= 0 ) ; } return false ; }",
        "boolean function ( Object arg0 ) { if ( arg0 instanceof PrimeNumber ) { PrimeNumber loc0 = ( PrimeNumber ) arg0 ; return ( loc0. intValue ( ) & 1 ) == 0 ; } return false ; }",
        "boolean function ( Object arg0 ) { if ( arg0 instanceof PrimeNumber ) { PrimeNumber loc0 = ( PrimeNumber ) arg0 ; return ( loc0. compareTo ( \"srini_string\" ) < 0 ) ; } return false ; }",
        "boolean function ( Object arg0 ) { if ( arg0 instanceof PrimeNumber ) { PrimeNumber loc0 = ( PrimeNumber ) arg0 ; return ( loc0. compareTo ( \"srini_string\" ) <= 0 ) ; } return false ; }",
        "boolean function ( N arg0 ) { return arg0. bitLength ( ) == 1 ; }",
        "boolean function ( long arg0 ) { return ( arg0 % 1 == 0 ) ; }",
        "boolean function ( N arg0 ) { return arg0. bitLen ( ) == 1 ; }",
        "boolean function ( N arg0 ) { return arg0. compareTo ( prime ( arg0 ) ) >= 0 ; }",
        "boolean function ( N arg0 ) { return arg0. compareTo ( prime ( arg0 ) ) < 0 ; }"
      ],
      "mid_translation": [
        "is_prime returns true if n is prime",
        "Returns true if n is a prime.",
        "Checks if n is a prime.",
        "Returns true if n is a prime number.",
        "Check if n is a prime."
      ],
      "output": [
        "public static boolean is_prime ( int arg0 ) { if ( arg0 > 1 ) { return true ; } else { return false ; } }",
        "public static boolean is_prime ( int arg0 ) { if ( arg0 > 1 ) return true ; return false ; }",
        "public static boolean is_prime ( int arg0 ) { if ( arg0 < 1 ) return false ; return true ; }",
        "public static boolean is_prime ( int arg0 ) { return arg0 < 1 ; }",
        "public static boolean is_prime ( int arg0 ) { if ( arg0 > 1 ) return true ; else return false ; }",
        "public static boolean is_prime ( Object arg0 ) { if ( arg0 instanceof Prime ) { Prime loc0 = ( Prime ) arg0 ; return ( loc0. cardinality ( ) == 1 ) ; } return false ; }",
        "public static boolean is_prime ( Object arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof Prime ) { Prime loc0 = ( Prime ) arg0 ; return ( loc0. cardinality ( ) == 1 ) ; } return true ; }",
        "public static boolean is_prime ( Object arg0 ) { if ( arg0 instanceof Prime ) { Prime loc0 = ( Prime ) arg0 ; return ( loc0. cardinality ( ) == 1 || loc0. cardinality ( ) == 1 ) ; } return false ; }",
        "public static boolean is_prime ( Object arg0 ) { if ( arg0 instanceof Prime ) { Prime loc0 = ( Prime ) arg0 ; return ( loc0. cardinality ( ) == 1 ) ; } else { return false ; } }",
        "public static boolean is_prime ( Object arg0 ) { if ( arg0 instanceof Prime ) { Prime loc0 = ( Prime ) arg0 ; return ( loc0. cardinality ( ) == 1 || loc0. cardinality ( ) == 1 ) ; } else { return false ; } }",
        "public static boolean is_prime ( long arg0 ) { return ( arg0 % 1 == 0 ) ; }",
        "public static boolean is_prime ( int arg0 ) { return arg0 % 2 == 0 ; }",
        "public static boolean is_prime ( int arg0 ) { return arg0 < 1 ; }",
        "public static boolean is_prime ( Integer arg0 ) { if ( arg0 == null ) return false ; return arg0. intValue ( ) == 1 ; }",
        "public static boolean is_prime ( int arg0 ) { return arg0 < prime ( arg0 ) ; }",
        "public static boolean is_prime ( Object arg0 ) { if ( arg0 instanceof PrimeNumber ) { PrimeNumber loc0 = ( PrimeNumber ) arg0 ; return ( loc0. compareTo ( \"srini_string\" ) == 0 ) ; } return false ; }",
        "public static boolean is_prime ( Object arg0 ) { if ( arg0 instanceof PrimeNumber ) { PrimeNumber loc0 = ( PrimeNumber ) arg0 ; return ( loc0. compareTo ( \"srini_string\" ) >= 0 ) ; } return false ; }",
        "public static boolean is_prime ( Object arg0 ) { if ( arg0 instanceof PrimeNumber ) { PrimeNumber loc0 = ( PrimeNumber ) arg0 ; return ( loc0. intValue ( ) & 1 ) == 0 ; } return false ; }",
        "public static boolean is_prime ( Object arg0 ) { if ( arg0 instanceof PrimeNumber ) { PrimeNumber loc0 = ( PrimeNumber ) arg0 ; return ( loc0. compareTo ( \"srini_string\" ) < 0 ) ; } return false ; }",
        "public static boolean is_prime ( Object arg0 ) { if ( arg0 instanceof PrimeNumber ) { PrimeNumber loc0 = ( PrimeNumber ) arg0 ; return ( loc0. compareTo ( \"srini_string\" ) <= 0 ) ; } return false ; }",
        "public static boolean is_prime ( N arg0 ) { return arg0. bitLength ( ) == 1 ; }",
        "public static boolean is_prime ( long arg0 ) { return ( arg0 % 1 == 0 ) ; }",
        "public static boolean is_prime ( N arg0 ) { return arg0. bitLen ( ) == 1 ; }",
        "public static boolean is_prime ( N arg0 ) { return arg0. compareTo ( prime ( arg0 ) ) >= 0 ; }",
        "public static boolean is_prime ( N arg0 ) { return arg0. compareTo ( prime ( arg0 ) ) < 0 ; }"
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, begin) * poly(xs, end) < 0) { \n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
      "target": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) > 0){ \n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
      "function range": "14,5-32,5",
      "raw_output": [
        "double function ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; for ( Double loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1 ; } } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; for ( Double loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "double function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0!= null ) { return loc0 ; } } return 0.0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; for ( double loc1 : arg0 ) { if ( loc0 > loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; if ( loc0!= 0.0 ) { return loc0 ; } else { return arg0. get ( 0 ) ; } }",
        "double function ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1 ; } } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { if ( loc1 == 0.0 ) { loc0 = loc1 ; } else { loc0 = loc1 + 1.0 ; } } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; for ( Double loc1 : arg0 ) { if ( loc1 == 0.0 ) { loc0 = loc1 ; } else { loc0 = loc1 ; } } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; for ( Double loc1 : arg0 ) { if ( loc1!= 0.0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { if ( loc1 == 0.0 ) { loc0 = loc1 ; } else { loc0 = loc1 ; } } return loc0 ; }",
        "T function ( List < T > arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) == 0 ) { loc0 = arg0. get ( loc1 ) ; break ; } } return loc0 ; }",
        "T function ( List < T > arg0 ) { T loc0 = null ; for ( int loc1 = arg0. size ( ) - 1 ; loc1 >= 0 ; loc1 -- ) { if ( arg0. get ( loc1 ) == 0 ) { loc0 = arg0. get ( loc1 ) ; break ; } } return loc0 ; }",
        "T function ( List < T > arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 )!= 0 ) { loc0 = arg0. get ( loc1 ) ; break ; } } return loc0 ; }",
        "T function ( List < T > arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) == 0 ) { return loc0 ; } loc0 = arg0. get ( loc1 ) ; } return loc0 ; }",
        "T function ( List < T > arg0 ) { T loc0 = null ; for ( Object loc1 : arg0 ) { if ( loc1!= null ) { loc0 = ( T ) loc1 ; break ; } } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; if ( loc0!= 0.0 ) { return loc0 ; } else { return arg0. get ( 0 ) ; } }",
        "double function ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; return loc0 == 0.0? 0.0 : loc0 ; }",
        "double function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0!= null ) { return loc0 ; } } return 0.0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; if ( loc0!= 0 ) { return loc0 ; } else { return arg0. get ( 0 ) ; } }",
        "double function ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; return ( loc0 == 0.0 )? 0.0 : loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1 ; break ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; if ( loc0 > 0 ) { return loc0 ; } else { return 0 ; } }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; if ( loc0 > 0 ) { return arg0. get ( 0 ). intValue ( ) ; } else { return 0 ; } }",
        "T function ( List < T > arg0 ) { return arg0. get ( 0 ) ; }"
      ],
      "mid_translation": [
        "Find the first zero in a list of doubles.",
        "Find zero in a list of doubles.",
        "Find the first zero entry in the list.",
        "Find the first zero in the list of doubles.",
        "Find the first zero in the list."
      ],
      "output": [
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; for ( Double loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; for ( Double loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static double find_zero ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0!= null ) { return loc0 ; } } return 0.0 ; }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; for ( double loc1 : arg0 ) { if ( loc0 > loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; if ( loc0!= 0.0 ) { return loc0 ; } else { return arg0. get ( 0 ) ; } }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { if ( loc1 == 0.0 ) { loc0 = loc1 ; } else { loc0 = loc1 + 1.0 ; } } return loc0 ; }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; for ( Double loc1 : arg0 ) { if ( loc1 == 0.0 ) { loc0 = loc1 ; } else { loc0 = loc1 ; } } return loc0 ; }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; for ( Double loc1 : arg0 ) { if ( loc1!= 0.0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { if ( loc1 == 0.0 ) { loc0 = loc1 ; } else { loc0 = loc1 ; } } return loc0 ; }",
        "public static T find_zero ( List < T > arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) == 0 ) { loc0 = arg0. get ( loc1 ) ; break ; } } return loc0 ; }",
        "public static T find_zero ( List < T > arg0 ) { T loc0 = null ; for ( int loc1 = arg0. size ( ) - 1 ; loc1 >= 0 ; loc1 -- ) { if ( arg0. get ( loc1 ) == 0 ) { loc0 = arg0. get ( loc1 ) ; break ; } } return loc0 ; }",
        "public static T find_zero ( List < T > arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 )!= 0 ) { loc0 = arg0. get ( loc1 ) ; break ; } } return loc0 ; }",
        "public static T find_zero ( List < T > arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) == 0 ) { return loc0 ; } loc0 = arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static T find_zero ( List < T > arg0 ) { T loc0 = null ; for ( Object loc1 : arg0 ) { if ( loc1!= null ) { loc0 = ( T ) loc1 ; break ; } } return loc0 ; }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; if ( loc0!= 0.0 ) { return loc0 ; } else { return arg0. get ( 0 ) ; } }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; return loc0 == 0.0? 0.0 : loc0 ; }",
        "public static double find_zero ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { if ( loc0!= null ) { return loc0 ; } } return 0.0 ; }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; if ( loc0!= 0 ) { return loc0 ; } else { return arg0. get ( 0 ) ; } }",
        "public static double find_zero ( List < Double > arg0 ) { double loc0 = arg0. get ( 0 ) ; return ( loc0 == 0.0 )? 0.0 : loc0 ; }",
        "public static int find_zero ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_zero ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1 ; break ; } } return loc0 ; }",
        "public static int find_zero ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; if ( loc0 > 0 ) { return loc0 ; } else { return 0 ; } }",
        "public static int find_zero ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; if ( loc0 > 0 ) { return arg0. get ( 0 ). intValue ( ) ; } else { return 0 ; } }",
        "public static T find_zero ( List < T > arg0 ) { return arg0. get ( 0 ) ; }"
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i)); \n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
      "target": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get((int)(i / 3))); \n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
      "function range": "8,5-25,5",
      "raw_output": [
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? extends Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) < arg0. get ( loc1 ) ) loc0. add ( arg0. get ( loc1 ) ) ; else loc0. add ( loc1, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) - 1 ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < arg0. get ( loc1 - 1 ) ) loc0. add ( arg0. get ( loc1 ) ) ; else loc0. add ( loc1, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "List < T > function ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. get ( loc1 ) < arg0. get ( loc1 ) ) { loc0. add ( arg1. get ( loc1 ), arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "List < T > function ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. get ( loc1 ) < arg0. get ( loc1 ) ) { loc0. add ( arg1. get ( loc1 ) ) ; } } return loc0 ; }",
        "List < T > function ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. get ( loc1 ) < arg0. get ( loc1 ) ) { loc0. add ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } } return loc0 ; }",
        "List < T > function ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; loc0. remove ( loc1 - 1 ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = arg0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; loc0. remove ( loc1 ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( T loc1 : arg1 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 - 1 ) ; loc0. add ( loc2 ) ; loc0. remove ( loc1 ) ; } return loc0 ; }",
        "void function ( List arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc2 ) ) ; SortUtils. siftDown ( arg0, loc1, loc2 ) ; SortUtils. swap ( arg0, loc1, loc2 ) ; } }",
        "void function ( List arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc2 ) ) ; SortUtils. siftDown ( arg0, loc1, loc2 - 1 ) ; SortUtils. swap ( arg0, loc1, loc2 - 1 ) ; } }",
        "void function ( List arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc2 ) ) ; SortUtils. siftDown ( arg0, loc1, loc2 ) ; SortUtils. swap ( arg0, loc1, loc2 - 1 ) ; } }",
        "void function ( List arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc2 ) ) ; SortUtils. siftDown ( arg0, loc1, loc2 ) ; SortUtils. swap ( arg0, loc1, loc2, loc0 - 1 ) ; } }",
        "void function ( List arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc2 ) ) ; SortUtils. siftDown ( arg0, loc1, loc2 - 1 ) ; SortUtils. swap ( arg0, loc1, loc2 + 1 ) ; } }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) - 1 ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) < arg0. get ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 - 1 ) ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Method sort_third.",
        "Sort third list.",
        "Sort third.",
        "sort_third List l.",
        "sort_third method."
      ],
      "output": [
        "public static List < Integer > sort_third ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Integer > sort_third ( List <? extends Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Integer > sort_third ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) < arg0. get ( loc1 ) ) loc0. add ( arg0. get ( loc1 ) ) ; else loc0. add ( loc1, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Integer > sort_third ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) - 1 ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Integer > sort_third ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < arg0. get ( loc1 - 1 ) ) loc0. add ( arg0. get ( loc1 ) ) ; else loc0. add ( loc1, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < T > sort_third ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "public static List < T > sort_third ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. get ( loc1 ) < arg0. get ( loc1 ) ) { loc0. add ( arg1. get ( loc1 ), arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "public static List < T > sort_third ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. get ( loc1 ) < arg0. get ( loc1 ) ) { loc0. add ( arg1. get ( loc1 ) ) ; } } return loc0 ; }",
        "public static List < T > sort_third ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg1. get ( loc1 ) < arg0. get ( loc1 ) ) { loc0. add ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } } return loc0 ; }",
        "public static List < T > sort_third ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < T > sort_third ( List < T > arg0 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; loc0. remove ( loc1 - 1 ) ; } return loc0 ; }",
        "public static List < T > sort_third ( List < T > arg0 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < T > sort_third ( List < T > arg0 ) { List < T > loc0 = arg0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; loc0. remove ( loc1 ) ; } return loc0 ; }",
        "public static List < T > sort_third ( List < T > arg0, List < T > arg1 ) { List < T > loc0 = arg0 ; for ( T loc1 : arg1 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < T > sort_third ( List < T > arg0 ) { List < T > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 - 1 ) ; loc0. add ( loc2 ) ; loc0. remove ( loc1 ) ; } return loc0 ; }",
        "public static void sort_third ( List arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc2 ) ) ; SortUtils. siftDown ( arg0, loc1, loc2 ) ; SortUtils. swap ( arg0, loc1, loc2 ) ; } }",
        "public static void sort_third ( List arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc2 ) ) ; SortUtils. siftDown ( arg0, loc1, loc2 - 1 ) ; SortUtils. swap ( arg0, loc1, loc2 - 1 ) ; } }",
        "public static void sort_third ( List arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc2 ) ) ; SortUtils. siftDown ( arg0, loc1, loc2 ) ; SortUtils. swap ( arg0, loc1, loc2 - 1 ) ; } }",
        "public static void sort_third ( List arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc2 ) ) ; SortUtils. siftDown ( arg0, loc1, loc2 ) ; SortUtils. swap ( arg0, loc1, loc2, loc0 - 1 ) ; } }",
        "public static void sort_third ( List arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc2 ) ) ; SortUtils. siftDown ( arg0, loc1, loc2 - 1 ) ; SortUtils. swap ( arg0, loc1, loc2 + 1 ) ; } }",
        "public static List < Integer > sort_third ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Integer > sort_third ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) - 1 ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Integer > sort_third ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "public static List < Integer > sort_third ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) < arg0. get ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > sort_third ( List < Integer > arg0 ) { List < Integer > loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 - 1 ) ) ; } return loc0 ; }"
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n); \n    }\n    Collections.sort(result);\n    return result;\n}",
      "target": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        if (result.contains(n)) \n            continue;\n        result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "8,5-17,5",
      "raw_output": [
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { int loc2 = loc1. intValue ( ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Iterator loc1 = arg0. iterator ( ) ; loc1. hasNext ( ) ; ) { loc0. add ( ( ( Integer ) loc1. next ( ) ). intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Iterator loc1 = arg0. iterator ( ) ; loc1. hasNext ( ) ; ) { loc0. add ( loc1. next ( ). intValue ( ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { int loc2 = loc1. intValue ( ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Integer > function ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( int arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) loc0. add ( loc1 ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Returns a list of unique integers.",
        "Returns a list of unique integers from the given list.",
        "Returns a list of all unique integers in a list.",
        "Returns a list of unique integers in a list.",
        "Returns a list of all unique integers in the list."
      ],
      "output": [
        "public static List < Integer > unique ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > unique ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { int loc2 = loc1. intValue ( ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( Integer... arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( List arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Iterator loc1 = arg0. iterator ( ) ; loc1. hasNext ( ) ; ) { loc0. add ( ( ( Integer ) loc1. next ( ) ). intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > unique ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( List arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Iterator loc1 = arg0. iterator ( ) ; loc1. hasNext ( ) ; ) { loc0. add ( loc1. next ( ). intValue ( ) ) ; } return loc0 ; }",
        "public static List < Integer > unique ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > unique ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > unique ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > unique ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > unique ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { int loc2 = loc1. intValue ( ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > unique ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > unique ( int arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > unique ( IntegerList arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) loc0. add ( loc1 ) ; } return loc0 ; }"
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n    int m = 0; \n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
      "target": "public static int max_element(List<Integer> l) {\n    int m = l.get(0); \n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
      "function range": "6,5-14,5",
      "raw_output": [
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc0 < loc1. intValue ( ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "T function ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return ( T ) loc0 ; }",
        "T function ( List < T > arg0 ) { T loc0 = null ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "int function ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Get the maximum element of a list of integers.",
        "Get the max element of a list of integers.",
        "Get the maximum element in a list of integers.",
        "Get the max element of a list.",
        "Gets the maximum element of a list of integers."
      ],
      "output": [
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc0 < loc1. intValue ( ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "public static T max_element ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return ( T ) loc0 ; }",
        "public static T max_element ( List < T > arg0 ) { T loc0 = null ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "public static int max_element ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = arg0. get ( 0 ) ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_element ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }"
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"\".length(); j += 1){ \n                if (i + \"\".substring(j, j + 1) == \"7\") \n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "target": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < (i + \"\").length(); j += 1){ \n                if ((i + \"\").substring(j, j + 1).equals(\"7\")) \n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-16,5",
      "raw_output": [
        "int function ( int arg0, int arg1 ) { int loc0 = 0 ; while ( arg0 > 0 ) { loc0 = ( loc0 + arg1 ) % arg0 ; arg0 = loc0 ; } return arg0 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = 0 ; while ( ( arg0 > arg1 ) && ( arg0 < arg1 ) ) { loc0 ++ ; } return loc0 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = 0 ; while ( arg0 > 0 ) { loc0 = ( loc0 + arg1 ) % arg0 ; arg0 -= arg1 ; } return arg0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; while ( arg0 > 0 ) { loc0 = ( loc0 + arg0 / 2 ) % 2 ; arg0 = loc0 ; } return arg0 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = 0 ; while ( arg0 > arg1 ) { loc0 = ( loc0 + arg0 ) % arg1 ; arg0 -= arg1 ; } return loc0 ; }",
        "int function ( int arg0 ) { return ( arg0 - 1 ) * ( arg0 + 1 ) ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else if ( arg0 == 3 ) { return 4 ; } else if ( arg0 == 0 ) { return 5 ; } else { return 6 ; } }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else if ( arg0 == 3 ) { return 4 ; } else if ( arg0 == 1 ) { return 5 ; } else { return 6 ; } }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else if ( arg0 == 3 ) { return 4 ; } else { return 5 * arg0 ; } }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { return 0 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else if ( arg0 == 3 ) { return 4 ; } else if ( arg0 == 0 ) { return 5 ; } else { return 6 ; } }",
        "int function ( int arg0 ) { return ( arg0 - 1 ) * ( arg0 + 1 ) ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / 2 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / arg1 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / ( arg1 + 1 ) ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 - arg1 ) * ( arg1 - arg0 ) ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = Lists. newArrayList ( ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = Lists. newArrayList ( ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = Lists. newArrayList ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) loc0 *= arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 - 1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 - 1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Method fizz_buzz.",
        "Method fizz_buzz ( int n )",
        "fizz_buzz ( int n )",
        "Fizz buzz.",
        "fizz_buzz ( n )"
      ],
      "output": [
        "public static int fizz_buzz ( int arg0, int arg1 ) { int loc0 = 0 ; while ( arg0 > 0 ) { loc0 = ( loc0 + arg1 ) % arg0 ; arg0 = loc0 ; } return arg0 ; }",
        "public static int fizz_buzz ( int arg0, int arg1 ) { int loc0 = 0 ; while ( ( arg0 > arg1 ) && ( arg0 < arg1 ) ) { loc0 ++ ; } return loc0 ; }",
        "public static int fizz_buzz ( int arg0, int arg1 ) { int loc0 = 0 ; while ( arg0 > 0 ) { loc0 = ( loc0 + arg1 ) % arg0 ; arg0 -= arg1 ; } return arg0 ; }",
        "public static int fizz_buzz ( int arg0 ) { int loc0 = 0 ; while ( arg0 > 0 ) { loc0 = ( loc0 + arg0 / 2 ) % 2 ; arg0 = loc0 ; } return arg0 ; }",
        "public static int fizz_buzz ( int arg0, int arg1 ) { int loc0 = 0 ; while ( arg0 > arg1 ) { loc0 = ( loc0 + arg0 ) % arg1 ; arg0 -= arg1 ; } return loc0 ; }",
        "public static int fizz_buzz ( int arg0 ) { return ( arg0 - 1 ) * ( arg0 + 1 ) ; }",
        "public static int fizz_buzz ( int arg0 ) { if ( arg0 < 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else if ( arg0 == 3 ) { return 4 ; } else if ( arg0 == 0 ) { return 5 ; } else { return 6 ; } }",
        "public static int fizz_buzz ( int arg0 ) { if ( arg0 < 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else if ( arg0 == 3 ) { return 4 ; } else if ( arg0 == 1 ) { return 5 ; } else { return 6 ; } }",
        "public static int fizz_buzz ( int arg0 ) { if ( arg0 < 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else if ( arg0 == 3 ) { return 4 ; } else { return 5 * arg0 ; } }",
        "public static int fizz_buzz ( int arg0 ) { if ( arg0 < 0 ) { return 0 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else if ( arg0 == 3 ) { return 4 ; } else if ( arg0 == 0 ) { return 5 ; } else { return 6 ; } }",
        "public static int fizz_buzz ( int arg0 ) { return ( arg0 - 1 ) * ( arg0 + 1 ) ; }",
        "public static int fizz_buzz ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / 2 ; }",
        "public static int fizz_buzz ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / arg1 ; }",
        "public static int fizz_buzz ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / ( arg1 + 1 ) ; }",
        "public static int fizz_buzz ( int arg0, int arg1 ) { return ( arg0 - arg1 ) * ( arg1 - arg0 ) ; }",
        "public static List < T > fizz_buzz ( List < T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > fizz_buzz ( List < Integer > arg0 ) { List < Integer > loc0 = Lists. newArrayList ( ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < Integer > fizz_buzz ( List < Integer > arg0 ) { List < Integer > loc0 = Lists. newArrayList ( ) ; for ( Integer loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < T > fizz_buzz ( List < T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < Integer > fizz_buzz ( List < Integer > arg0 ) { List < Integer > loc0 = Lists. newArrayList ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static int [ ] fizz_buzz ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) loc0 *= arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] fizz_buzz ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 - 1 ] ; return loc0 ; }",
        "public static int [ ] fizz_buzz ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 - 1 ] ; } return loc0 ; }",
        "public static int [ ] fizz_buzz ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] fizz_buzz ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }"
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)]; \n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
      "target": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[(int) Math.ceil(l.length / 2.)]; \n    for (int i = 0; i < l.length; i += 2){\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1){\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
      "function range": "6,5-22,5",
      "raw_output": [
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) < arg0. get ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) < arg0. get ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = loc1 ; for ( int loc3 = loc1 ; loc3 < arg0. size ( ) ; loc3 ++ ) { if ( arg0. get ( loc3 ) < loc2 ) loc0. add ( loc3 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) if ( arg0. get ( loc1 - 1 ) < arg0. get ( loc1 ) ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = loc1 ; for ( int loc3 = loc1 ; loc3 < arg0. size ( ) ; loc3 ++ ) { if ( arg0. get ( loc3 ) > loc2 ) loc0. add ( loc3 ) ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 + 1 ] = loc2 ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 -- ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 + 1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "void function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 + 1 ] = loc2 ; } }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 -- ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 - 1 ] = loc2 ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } else if ( arg0 [ loc1 ] > loc0 ) { loc0 = loc0 ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 + 1 ] = loc2 ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 -- ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 ++ ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 -- ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; int loc1 = arg1 - 1 ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) if ( arg0 [ loc2 ] < arg1 ) loc0 = loc2 ; return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) loc0 = loc1 ; return arg0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; int loc1 = arg1 - 1 ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = loc2 ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = loc2 ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; int loc1 = arg1 - 1 ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg1 ) { loc1 = loc2 ; } else if ( arg1 == loc2 ) { loc1 = loc2 ; } } return arg0 ; }"
      ],
      "mid_translation": [
        "Method sort_even.",
        "Sort an array of integers in even order.",
        "Sort an array of integers even.",
        "Sort an array of integers even or odd.",
        "Sort even."
      ],
      "output": [
        "public static List < Integer > sort_even ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) < arg0. get ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > sort_even ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) < arg0. get ( loc1 ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static List < Integer > sort_even ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = loc1 ; for ( int loc3 = loc1 ; loc3 < arg0. size ( ) ; loc3 ++ ) { if ( arg0. get ( loc3 ) < loc2 ) loc0. add ( loc3 ) ; } } return loc0 ; }",
        "public static List < Integer > sort_even ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) if ( arg0. get ( loc1 - 1 ) < arg0. get ( loc1 ) ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < Integer > sort_even ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = loc1 ; for ( int loc3 = loc1 ; loc3 < arg0. size ( ) ; loc3 ++ ) { if ( arg0. get ( loc3 ) > loc2 ) loc0. add ( loc3 ) ; } } return loc0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 + 1 ] = loc2 ; } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 -- ; } } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 + 1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "public static void sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 + 1 ] = loc2 ; } }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 -- ; } } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 - 1 ] = loc2 ; } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } else if ( arg0 [ loc1 ] > loc0 ) { loc0 = loc0 ; } } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 + 1 ] = loc2 ; } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 -- ; } } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 ++ ; } } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 -- ; } } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; int loc1 = arg1 - 1 ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) if ( arg0 [ loc2 ] < arg1 ) loc0 = loc2 ; return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) loc0 = loc1 ; return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; int loc1 = arg1 - 1 ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = loc2 ; } } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = loc2 ; } } return arg0 ; }",
        "public static int [ ] sort_even ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; int loc1 = arg1 - 1 ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg1 ) { loc1 = loc2 ; } else if ( arg1 == loc2 ) { loc1 = loc2 ; } } return arg0 ; }"
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i += 3){ \n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
      "target": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length() - s.length() % 3; i += 3){ \n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
      "function range": "8,13-26,13",
      "raw_output": [
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0. getMessage ( ) ) ; } }",
        "byte [ ] function ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "byte [ ] function ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0, CYCLIC ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "byte [ ] function ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0. getBytes ( \"srini_string\" ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "byte [ ] function ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "byte [ ] function ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "byte [ ] function ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0, CYCLIC ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\" + arg0, loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; int loc0 = arg0. length ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( char ) arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "String function ( String arg0 ) { return arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( encode_cyclic ( loc1 ) ) ; }",
        "String function ( String arg0 ) { try { return encode_cyclic ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { try { return encode_cyclic ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return new String ( encode_cyclic ( arg0. getBytes ( ) ) ) ; }",
        "String function ( String arg0 ) { try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0, Base64. DEFAULT ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }"
      ],
      "mid_translation": [
        "Encode a string in a CYCLIC format.",
        "Encode a string in a CYCLIC format",
        "encode_cyclic returns a string that is the same as s.",
        "encode_cyclic returns a string that can be used as a base64 string.",
        "encode_cyclic returns a string that can be used as a base64 encoded string"
      ],
      "output": [
        "String encode_cyclic ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0. getMessage ( ) ) ; } }",
        "byte [ ] encode_cyclic ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "byte [ ] encode_cyclic ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0, CYCLIC ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "byte [ ] encode_cyclic ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0. getBytes ( \"srini_string\" ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "byte [ ] encode_cyclic ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "byte [ ] encode_cyclic ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "byte [ ] encode_cyclic ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0, CYCLIC ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\" + arg0, loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "String encode_cyclic ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; int loc0 = arg0. length ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "String encode_cyclic ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( char ) arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "String encode_cyclic ( String arg0 ) { return arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "String encode_cyclic ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( encode_cyclic ( loc1 ) ) ; }",
        "String encode_cyclic ( String arg0 ) { try { return encode_cyclic ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { try { return encode_cyclic ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return new String ( encode_cyclic ( arg0. getBytes ( ) ) ) ; }",
        "String encode_cyclic ( String arg0 ) { try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0. getBytes ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String encode_cyclic ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0, Base64. DEFAULT ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }"
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len)); \n        if (is_prime(fib.get(len - 1))) \n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
      "target": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2)); \n        if (is_prime(fib.get(fib.size() - 1))) \n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
      "function range": "16,5-29,5",
      "raw_output": [
        "int function ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else { return 4 ; } }",
        "int function ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else { return 3 ; } }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return 1 << fib ( arg0 - 1 ) ; }",
        "int function ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else { return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 0 ) { return 3 ; } else { return 4 ; } }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 = ( loc0 + loc1 - 1 ) / 2 ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 = loc0 * loc1 ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 = loc0 * Math. pow ( 10, loc1 - 1 ) ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) loc0 = Math. max ( loc0, arg0 - loc1 - 1 ) ; return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 = loc0 * Math. pow ( 10, loc1 ) ; } return loc0 ; }",
        "float function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 == 1 ) { return 0.0f ; } return 1.0f / arg0 ; }",
        "int function ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else { return 4 ; } }",
        "float function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 == 1 ) { return 0 ; } return 1fib ( arg0 - 1 ) ; }",
        "int function ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else { return 3 ; } }",
        "float function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 == 1 ) { return 0 ; } if ( arg0 == 0 ) { return 1 ; } return Math. floor ( arg0 / 1 ) ; }",
        "int function ( int arg0 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg0 == 1 ) { return 2 ; } if ( arg0 == 2 ) { return 3 ; } if ( arg0 == 3 ) { return 4 ; } if ( arg0 == 0 ) { return 5 ; } if ( arg0 == 1 ) { return 6 ; } return - 1 ; }",
        "int function ( int arg0 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg0 == 1 ) { return 2 ; } if ( arg0 == 2 ) { return 3 ; } if ( arg0 == 3 ) { return 4 ; } if ( arg0 == 0 ) { return 5 ; } return 6 ; }",
        "int function ( int arg0 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg0 == 1 ) { return 2 ; } if ( arg0 == 2 ) { return 3 ; } if ( arg0 == 3 ) { return 4 ; } if ( arg0 == 0 ) { return 5 ; } throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; }",
        "int function ( int arg0 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg0 == 1 ) { return 2 ; } if ( arg0 == 2 ) { return 3 ; } if ( arg0 == 3 ) { return 4 ; } if ( arg0 == 0 ) { return 5 ; } throw new ArrayIndexOutOfBoundsException ( arg0 ) ; }",
        "int function ( int arg0 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg0 == 1 ) { return 2 ; } if ( arg0 == 2 ) { return 3 ; } if ( arg0 == 3 ) { return 4 ; } if ( arg0 == 0 ) { return 5 ; } throw new ArrayIndexOutOfBoundsException ( \"srini_string\" + arg0 ) ; }",
        "int function ( int arg0 ) { if ( arg0 == 6 ) { return 0 ; } if ( arg0 == 8 ) { return ( arg0 & 0x7F ) ; } if ( arg0 == 12 ) { return ( arg0 & 0x3F ) ; } if ( arg0 == 6 ) { return ( arg0 & 0x3F ) ; } return ( arg0 & 0x3F ) ; }",
        "int function ( int arg0 ) { if ( arg0 == 6 ) { return 0 ; } if ( arg0 == 8 ) { return ( arg0 & 0x7F ) ; } if ( arg0 == 12 ) { return ( arg0 & 0x3F ) ; } if ( arg0 == 8 ) { return ( arg0 & 0x3F ) ; } return ( arg0 & 0x3F ) ; }",
        "int function ( int arg0 ) { if ( arg0 == 6 ) { return 0 ; } if ( arg0 == 8 ) { return ( arg0 & 0x7F ) ; } if ( arg0 == 12 ) { return ( arg0 & 0x3F ) ; } if ( arg0 == 16 ) { return ( arg0 & 0x3F ) ; } return ( arg0 & 0x3F ) ; }",
        "int function ( int arg0 ) { if ( arg0 == 6 ) { return 0 ; } if ( arg0 == 8 ) { return ( arg0 & 0x7F ) ; } if ( arg0 == 12 ) { return ( arg0 & 0x3F ) ; } if ( arg0 == 6 ) { return ( arg0 & 0x3F ) ; } return ( arg0 & 0x7F ) ; }",
        "int function ( int arg0 ) { if ( arg0 == 6 ) { return 0 ; } if ( arg0 == 8 ) { return ( arg0 & 0x7F ) ; } if ( arg0 == 12 ) { return ( arg0 & 0x3F ) ; } if ( arg0 == 6 ) { return ( arg0 & 0x3F ) ; } return ( arg0 + 1 ) ; }"
      ],
      "mid_translation": [
        "Returns the fib of a given number of times.",
        "This method returns the fib of a given number of times.",
        "Get the fib of a given number of times.",
        "Get the fib of a n - th entry.",
        "Returns the fib of the n - th entry."
      ],
      "output": [
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else { return 4 ; } }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else { return 3 ; } }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return 1 << fib ( arg0 - 1 ) ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else { return 0 ; } }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 0 ) { return 3 ; } else { return 4 ; } }",
        "public static int prime_fib ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 = ( loc0 + loc1 - 1 ) / 2 ; } return loc0 ; }",
        "public static int prime_fib ( int arg0 ) { int loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 = loc0 * loc1 ; } return loc0 ; }",
        "public static int prime_fib ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 = loc0 * Math. pow ( 10, loc1 - 1 ) ; } return loc0 ; }",
        "public static int prime_fib ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) loc0 = Math. max ( loc0, arg0 - loc1 - 1 ) ; return loc0 ; }",
        "public static int prime_fib ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 = loc0 * Math. pow ( 10, loc1 ) ; } return loc0 ; }",
        "public static float prime_fib ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 == 1 ) { return 0.0f ; } return 1.0f / arg0 ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else if ( arg0 == 2 ) { return 3 ; } else { return 4 ; } }",
        "public static float prime_fib ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 == 1 ) { return 0 ; } return 1fib ( arg0 - 1 ) ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 1 ) { return 0 ; } else if ( arg0 == 0 ) { return 1 ; } else if ( arg0 == 1 ) { return 2 ; } else { return 3 ; } }",
        "public static float prime_fib ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 == 1 ) { return 0 ; } if ( arg0 == 0 ) { return 1 ; } return Math. floor ( arg0 / 1 ) ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg0 == 1 ) { return 2 ; } if ( arg0 == 2 ) { return 3 ; } if ( arg0 == 3 ) { return 4 ; } if ( arg0 == 0 ) { return 5 ; } if ( arg0 == 1 ) { return 6 ; } return - 1 ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg0 == 1 ) { return 2 ; } if ( arg0 == 2 ) { return 3 ; } if ( arg0 == 3 ) { return 4 ; } if ( arg0 == 0 ) { return 5 ; } return 6 ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg0 == 1 ) { return 2 ; } if ( arg0 == 2 ) { return 3 ; } if ( arg0 == 3 ) { return 4 ; } if ( arg0 == 0 ) { return 5 ; } throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg0 == 1 ) { return 2 ; } if ( arg0 == 2 ) { return 3 ; } if ( arg0 == 3 ) { return 4 ; } if ( arg0 == 0 ) { return 5 ; } throw new ArrayIndexOutOfBoundsException ( arg0 ) ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 0 ) { return 0 ; } if ( arg0 == 1 ) { return 2 ; } if ( arg0 == 2 ) { return 3 ; } if ( arg0 == 3 ) { return 4 ; } if ( arg0 == 0 ) { return 5 ; } throw new ArrayIndexOutOfBoundsException ( \"srini_string\" + arg0 ) ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 6 ) { return 0 ; } if ( arg0 == 8 ) { return ( arg0 & 0x7F ) ; } if ( arg0 == 12 ) { return ( arg0 & 0x3F ) ; } if ( arg0 == 6 ) { return ( arg0 & 0x3F ) ; } return ( arg0 & 0x3F ) ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 6 ) { return 0 ; } if ( arg0 == 8 ) { return ( arg0 & 0x7F ) ; } if ( arg0 == 12 ) { return ( arg0 & 0x3F ) ; } if ( arg0 == 8 ) { return ( arg0 & 0x3F ) ; } return ( arg0 & 0x3F ) ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 6 ) { return 0 ; } if ( arg0 == 8 ) { return ( arg0 & 0x7F ) ; } if ( arg0 == 12 ) { return ( arg0 & 0x3F ) ; } if ( arg0 == 16 ) { return ( arg0 & 0x3F ) ; } return ( arg0 & 0x3F ) ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 6 ) { return 0 ; } if ( arg0 == 8 ) { return ( arg0 & 0x7F ) ; } if ( arg0 == 12 ) { return ( arg0 & 0x3F ) ; } if ( arg0 == 6 ) { return ( arg0 & 0x3F ) ; } return ( arg0 & 0x7F ) ; }",
        "public static int prime_fib ( int arg0 ) { if ( arg0 == 6 ) { return 0 ; } if ( arg0 == 8 ) { return ( arg0 & 0x7F ) ; } if ( arg0 == 12 ) { return ( arg0 & 0x3F ) ; } if ( arg0 == 6 ) { return ( arg0 & 0x3F ) ; } return ( arg0 + 1 ) ; }"
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) { \n            for (int k = j; k < numbers.length; k += 1) { \n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "target": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) { \n            for (int k = j + 1; k < numbers.length; k += 1) { \n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "21,5-31,5",
      "raw_output": [
        "boolean function ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null ) { return false ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; }",
        "boolean function ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null || arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. subject == null ) { return false ; } } return true ; } }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { boolean loc0 = false ; for ( Triple loc1 : arg0 ) { if ( loc1 == null ) { loc0 = true ; } else { loc0 = loc0 + 1 ; } } return loc0 ; }",
        "boolean function ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "boolean function ( Set < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; }",
        "boolean function ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. num ( ) == 0 ) { return false ; } } return true ; } }",
        "boolean function ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next!= null ) { return false ; } } return true ; } }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null ) { return false ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { boolean loc0 = false ; for ( Triple loc1 : arg0 ) { if ( loc1 == null ) { loc0 = true ; } else { loc0 = loc0 + 1 ; } } return loc0 ; }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null ) { return false ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return true ; } } return false ; } }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { boolean loc0 = true ; for ( Triple loc1 : arg0 ) { if ( loc1 == null ) { loc0 = false ; } else { loc0 = loc0 + 1 ; } } return loc0 ; }",
        "boolean function ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null ) { return false ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; }",
        "boolean function ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next!= null ) { return false ; } } return true ; } }",
        "boolean function ( Set < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { Iterator < Triple > loc0 = arg0. iterator ( ) ; while ( loc0. hasNext ( ) ) { Triple loc1 = ( Triple ) loc0. next ( ) ; if ( loc1. next ( ) == null ) { return false ; } } return true ; }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null || arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { Iterator < Triple > loc0 = arg0. iterator ( ) ; while ( loc0. hasNext ( ) ) { Triple loc1 = ( Triple ) loc0. next ( ) ; if ( loc1. next ( ) == null ) return false ; } return true ; }",
        "boolean function ( Iterable <? extends Triple > arg0 ) { Iterator < Triple > loc0 = arg0. iterator ( ) ; while ( loc0. hasNext ( ) ) { Triple loc1 = ( Triple ) loc0. next ( ) ; if ( loc1. num ( ) == 0 ) { return false ; } } return true ; }"
      ],
      "mid_translation": [
        "Returns true if triples sum to zero.",
        "Check if triples sum to zero.",
        "returns true if triples sum to zero.",
        "Checks if triples sum to zero.",
        "returns true if triples sum to zero"
      ],
      "output": [
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null ) { return false ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; }",
        "public static boolean triples_sum_to_zero ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null || arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. subject == null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { boolean loc0 = false ; for ( Triple loc1 : arg0 ) { if ( loc1 == null ) { loc0 = true ; } else { loc0 = loc0 + 1 ; } } return loc0 ; }",
        "public static boolean triples_sum_to_zero ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Set < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; }",
        "public static boolean triples_sum_to_zero ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. num ( ) == 0 ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next!= null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null ) { return false ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { boolean loc0 = false ; for ( Triple loc1 : arg0 ) { if ( loc1 == null ) { loc0 = true ; } else { loc0 = loc0 + 1 ; } } return loc0 ; }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null ) { return false ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return true ; } } return false ; } }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { boolean loc0 = true ; for ( Triple loc1 : arg0 ) { if ( loc1 == null ) { loc0 = false ; } else { loc0 = loc0 + 1 ; } } return loc0 ; }",
        "public static boolean triples_sum_to_zero ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null ) { return false ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; }",
        "public static boolean triples_sum_to_zero ( List < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next!= null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Set < Triple > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { Iterator < Triple > loc0 = arg0. iterator ( ) ; while ( loc0. hasNext ( ) ) { Triple loc1 = ( Triple ) loc0. next ( ) ; if ( loc1. next ( ) == null ) { return false ; } } return true ; }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { if ( arg0 == null || arg0. size ( ) == 0 ) { return true ; } else { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; } }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { for ( Triple loc0 : arg0 ) { if ( loc0. next ( ) == null ) { return false ; } } return true ; }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { Iterator < Triple > loc0 = arg0. iterator ( ) ; while ( loc0. hasNext ( ) ) { Triple loc1 = ( Triple ) loc0. next ( ) ; if ( loc1. next ( ) == null ) return false ; } return true ; }",
        "public static boolean triples_sum_to_zero ( Iterable <? extends Triple > arg0 ) { Iterator < Triple > loc0 = arg0. iterator ( ) ; while ( loc0. hasNext ( ) ) { Triple loc1 = ( Triple ) loc0. next ( ) ; if ( loc1. num ( ) == 0 ) { return false ; } } return true ; }"
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n    return n; \n}",
      "target": "public static int car_race_collision(int n) {\n    return n * n; \n}",
      "function range": "14,5-16,5",
      "raw_output": [
        "Car_race_collision function ( N arg0 ) { return new Car_race_collision ( arg0 ) ; }",
        "Car_race_collision function ( Node arg0 ) { return new Car_race_collision ( arg0 ) ; }",
        "Car_race_collision function ( IntegerLiteral arg0 ) { return new Car_race_collision ( arg0 ) ; }",
        "Car_race_collision function ( N arg0 ) { return new Car_race_collision ( arg0. getCR ( ), arg0. getCR ( ) ) ; }",
        "Car_race_collision function ( N arg0 ) { throw new UnsupportedOperationException ( \"srini_string\" ) ; }",
        "CarRaceCollision function ( CarRace arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "CarRaceCollision function ( Race arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return new CarRaceCollision ( arg0 ) ; }",
        "CarRaceCollision function ( Race arg0, Race arg1 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return new CarRaceCollision ( arg0, arg1 ) ; }",
        "CarRaceCollision function ( Race arg0 ) { return new CarRaceCollision ( arg0 ) ; }",
        "Car_race_collision function ( Car_race_Race arg0 ) { return arg0 ; }",
        "CarRaceCollision function ( ) { return CarRaceCollisionHolder. getInstance ( ) ; }",
        "CarRaceCollision function ( ) { return new CarRaceCollision ( ) ; }",
        "Car_RaceCollision function ( ) { return Car_race_collision ; }",
        "Car_race_collision function ( ) { return Car_race_collision ; }",
        "Car_RaceCollision function ( ) { return new Car_RaceCollision ( ) ; }",
        "CarRaceCollision function ( N arg0 ) { if ( arg0 instanceof CarRaceCollision ) return ( CarRaceCollision ) arg0 ; else return null ; }",
        "int function ( N arg0 ) { throw new UnsupportedOperationException ( \"srini_string\" ) ; }",
        "Car_race_collision function ( N arg0 ) { return ( Car_race_collision ) arg0. get ( 0 ) ; }",
        "CarRaceCollision function ( N arg0 ) { return ( CarRaceCollision ) arg0. get ( 0 ) ; }",
        "Car_race_collision function ( Node arg0 ) { return ( Car_race_collision ) arg0. get ( 0 ) ; }",
        "Car_race_collision function ( Car_race_Race arg0 ) { return arg0 ; }",
        "Car_race_collision function ( Car_race_collision arg0 ) { if ( arg0 instanceof Car_race_collision ) return ( Car_race_collision ) arg0 ; else return null ; }",
        "CarRaceCollision function ( CarRace arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "Car_race_collision function ( Car_race_Race arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "Car_race_collision function ( Race arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return ( Car_race_collision ) arg0. getCRace ( ) ; }"
      ],
      "mid_translation": [
        "Returns the car_race_collision of n.",
        "Gets car_race_collision.",
        "Gets the car_race_collision value.",
        "Returns the car_race_collision value of n.",
        "Gets the car_race_collision."
      ],
      "output": [
        "public static Car_race_collision car_race_collision ( N arg0 ) { return new Car_race_collision ( arg0 ) ; }",
        "public static Car_race_collision car_race_collision ( Node arg0 ) { return new Car_race_collision ( arg0 ) ; }",
        "public static Car_race_collision car_race_collision ( IntegerLiteral arg0 ) { return new Car_race_collision ( arg0 ) ; }",
        "public static Car_race_collision car_race_collision ( N arg0 ) { return new Car_race_collision ( arg0. getCR ( ), arg0. getCR ( ) ) ; }",
        "public static Car_race_collision car_race_collision ( N arg0 ) { throw new UnsupportedOperationException ( \"srini_string\" ) ; }",
        "public static CarRaceCollision car_race_collision ( CarRace arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "public static CarRaceCollision car_race_collision ( Race arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return new CarRaceCollision ( arg0 ) ; }",
        "public static CarRaceCollision car_race_collision ( Race arg0, Race arg1 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return new CarRaceCollision ( arg0, arg1 ) ; }",
        "public static CarRaceCollision car_race_collision ( Race arg0 ) { return new CarRaceCollision ( arg0 ) ; }",
        "public static Car_race_collision car_race_collision ( Car_race_Race arg0 ) { return arg0 ; }",
        "public static CarRaceCollision car_race_collision ( ) { return CarRaceCollisionHolder. getInstance ( ) ; }",
        "public static CarRaceCollision car_race_collision ( ) { return new CarRaceCollision ( ) ; }",
        "public static Car_RaceCollision car_race_collision ( ) { return Car_race_collision ; }",
        "public static Car_race_collision car_race_collision ( ) { return Car_race_collision ; }",
        "public static Car_RaceCollision car_race_collision ( ) { return new Car_RaceCollision ( ) ; }",
        "public static CarRaceCollision car_race_collision ( N arg0 ) { if ( arg0 instanceof CarRaceCollision ) return ( CarRaceCollision ) arg0 ; else return null ; }",
        "public static int car_race_collision ( N arg0 ) { throw new UnsupportedOperationException ( \"srini_string\" ) ; }",
        "public static Car_race_collision car_race_collision ( N arg0 ) { return ( Car_race_collision ) arg0. get ( 0 ) ; }",
        "public static CarRaceCollision car_race_collision ( N arg0 ) { return ( CarRaceCollision ) arg0. get ( 0 ) ; }",
        "public static Car_race_collision car_race_collision ( Node arg0 ) { return ( Car_race_collision ) arg0. get ( 0 ) ; }",
        "public static Car_race_collision car_race_collision ( Car_race_Race arg0 ) { return arg0 ; }",
        "public static Car_race_collision car_race_collision ( Car_race_collision arg0 ) { if ( arg0 instanceof Car_race_collision ) return ( Car_race_collision ) arg0 ; else return null ; }",
        "public static CarRaceCollision car_race_collision ( CarRace arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "public static Car_race_collision car_race_collision ( Car_race_Race arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "public static Car_race_collision car_race_collision ( Race arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return ( Car_race_collision ) arg0. getCRace ( ) ; }"
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1); \n    }\n    return result;\n}",
      "target": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n + 1); \n    }\n    return result;\n}",
      "function range": "13,5-20,5",
      "raw_output": [
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < Integer > function ( Integer arg0, List < Integer > arg1 ) { List < Integer > loc0 = arg1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < Integer > function ( Integer arg0, List < Integer > arg1 ) { List < Integer > loc0 = arg1 ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < Integer > function ( int arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. add ( loc1 + 1 ) ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { arg0 [ loc1 ] = loc0 ++ ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { arg0 [ loc1 ] = loc0 ++ ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { arg0 [ loc1 ] = loc0 + arg1 ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { arg0 [ loc1 ] ++ ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { arg0 [ loc1 ] = loc0 + arg1 ; } return arg0 ; }",
        "void function ( List < Token > arg0, int arg1 ) { arg0. add ( new Token ( arg1 ) ) ; }",
        "void function ( List < Token > arg0, int arg1 ) { for ( Token loc0 : arg0 ) { loc0. increase ( arg1 ) ; } }",
        "void function ( List < Token > arg0, int arg1 ) { for ( Token loc0 : arg0 ) loc0. increase ( arg1 ) ; }",
        "void function ( List < Token > arg0, int arg1 ) { arg0. add ( new Token ( arg1, arg0 ) ) ; }",
        "void function ( List < String > arg0, int arg1 ) { arg0. add ( arg1 ) ; }",
        "void function ( List < Integer > arg0, int arg1 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) { arg0. add ( loc1 ) ; } }",
        "void function ( List < Integer > arg0, int arg1 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) arg0. add ( loc1 ) ; }",
        "List < Integer > function ( List < Integer > arg0, int arg1 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) arg0. add ( loc1 ) ; return arg0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = arg0. loc0 ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) { arg0 [ loc1 ] = loc0 + 1 ; } return arg0 ; }",
        "void function ( List < Integer > arg0, int arg1 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) { arg0. add ( loc1 + 1 ) ; } }",
        "List < Integer > function ( List < Integer > arg0, Integer arg1 ) { int loc0 = arg0. indexOf ( arg1 ) ; if ( loc0 < 0 ) { arg0. add ( arg1 ) ; } else { arg0. remove ( loc0 ) ; } return arg0 ; }",
        "List < Integer > function ( List < Integer > arg0, Integer arg1 ) { int loc0 = arg0. indexOf ( arg1 ) ; if ( loc0 < 0 ) { arg0. add ( arg1 ) ; } else { arg0. add ( loc0 + arg1 ) ; } return arg0 ; }",
        "List < Integer > function ( List < Integer > arg0, Integer arg1 ) { int loc0 = arg0. indexOf ( arg1 ) ; if ( loc0 == - 1 ) { arg0. add ( arg1 ) ; } else { arg0. remove ( loc0 ) ; } return arg0 ; }",
        "List < Integer > function ( List < Integer > arg0, Integer arg1 ) { int loc0 = arg0. indexOf ( arg1 ) ; if ( loc0 < 0 ) arg0. add ( arg1 ) ; else arg0. remove ( loc0 ) ; return arg0 ; }",
        "List < Integer > function ( List < Integer > arg0, int arg1 ) { arg0. add ( arg1 ) ; return arg0 ; }"
      ],
      "mid_translation": [
        "incr_list.",
        "Increments a list of integers.",
        "Increase a list of tokens.",
        "Increase a list of integers.",
        "Increase list."
      ],
      "output": [
        "public static List < Integer > incr_list ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < Integer > incr_list ( Integer arg0, List < Integer > arg1 ) { List < Integer > loc0 = arg1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > incr_list ( Integer... arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < Integer > incr_list ( Integer arg0, List < Integer > arg1 ) { List < Integer > loc0 = arg1 ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < Integer > incr_list ( int arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. add ( loc1 + 1 ) ; return loc0 ; }",
        "public static int [ ] incr_list ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { arg0 [ loc1 ] = loc0 ++ ; } return arg0 ; }",
        "public static int [ ] incr_list ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { arg0 [ loc1 ] = loc0 ++ ; } return arg0 ; }",
        "public static int [ ] incr_list ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { arg0 [ loc1 ] = loc0 + arg1 ; } return arg0 ; }",
        "public static int [ ] incr_list ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { arg0 [ loc1 ] ++ ; } return arg0 ; }",
        "public static int [ ] incr_list ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { arg0 [ loc1 ] = loc0 + arg1 ; } return arg0 ; }",
        "public static void incr_list ( List < Token > arg0, int arg1 ) { arg0. add ( new Token ( arg1 ) ) ; }",
        "public static void incr_list ( List < Token > arg0, int arg1 ) { for ( Token loc0 : arg0 ) { loc0. increase ( arg1 ) ; } }",
        "public static void incr_list ( List < Token > arg0, int arg1 ) { for ( Token loc0 : arg0 ) loc0. increase ( arg1 ) ; }",
        "public static void incr_list ( List < Token > arg0, int arg1 ) { arg0. add ( new Token ( arg1, arg0 ) ) ; }",
        "public static void incr_list ( List < String > arg0, int arg1 ) { arg0. add ( arg1 ) ; }",
        "public static void incr_list ( List < Integer > arg0, int arg1 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) { arg0. add ( loc1 ) ; } }",
        "public static void incr_list ( List < Integer > arg0, int arg1 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) arg0. add ( loc1 ) ; }",
        "public static List < Integer > incr_list ( List < Integer > arg0, int arg1 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) arg0. add ( loc1 ) ; return arg0 ; }",
        "public static int [ ] incr_list ( int [ ] arg0, int arg1 ) { int loc0 = arg0. loc0 ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) { arg0 [ loc1 ] = loc0 + 1 ; } return arg0 ; }",
        "public static void incr_list ( List < Integer > arg0, int arg1 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) { arg0. add ( loc1 + 1 ) ; } }",
        "public static List < Integer > incr_list ( List < Integer > arg0, Integer arg1 ) { int loc0 = arg0. indexOf ( arg1 ) ; if ( loc0 < 0 ) { arg0. add ( arg1 ) ; } else { arg0. remove ( loc0 ) ; } return arg0 ; }",
        "public static List < Integer > incr_list ( List < Integer > arg0, Integer arg1 ) { int loc0 = arg0. indexOf ( arg1 ) ; if ( loc0 < 0 ) { arg0. add ( arg1 ) ; } else { arg0. add ( loc0 + arg1 ) ; } return arg0 ; }",
        "public static List < Integer > incr_list ( List < Integer > arg0, Integer arg1 ) { int loc0 = arg0. indexOf ( arg1 ) ; if ( loc0 == - 1 ) { arg0. add ( arg1 ) ; } else { arg0. remove ( loc0 ) ; } return arg0 ; }",
        "public static List < Integer > incr_list ( List < Integer > arg0, Integer arg1 ) { int loc0 = arg0. indexOf ( arg1 ) ; if ( loc0 < 0 ) arg0. add ( arg1 ) ; else arg0. remove ( loc0 ) ; return arg0 ; }",
        "public static List < Integer > incr_list ( List < Integer > arg0, int arg1 ) { arg0. add ( arg1 ) ; return arg0 ; }"
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1){ \n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
      "target": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1){ \n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "10,5-18,5",
      "raw_output": [
        "boolean function ( List < Pair > arg0 ) { int loc0 = 0 ; for ( Pair loc1 : arg0 ) { if ( loc1. getValue ( ) == 0 ) { loc0 ++ ; } } return loc0 == 0 ; }",
        "boolean function ( List < Pair > arg0 ) { if ( arg0. size ( ) == 0 ) return true ; else return false ; }",
        "boolean function ( List < Pair > arg0 ) { for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0.0 ) return false ; } return true ; }",
        "boolean function ( List < Pair > arg0 ) { int loc0 = 0 ; for ( Pair loc1 : arg0 ) { if ( loc1. getValue ( ) == 0 ) { return true ; } loc0 ++ ; } return loc0 == 0 ; }",
        "boolean function ( List < Pair > arg0 ) { int loc0 = 0 ; for ( Pair loc1 : arg0 ) { if ( loc1. getValue ( ) == 0.0 ) { loc0 ++ ; } } return loc0 == 0 ; }",
        "boolean function ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; ++ loc0 ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } return true ; } }",
        "boolean function ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } return true ; } }",
        "boolean function ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; ++ loc0 ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } } return true ; }",
        "boolean function ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return true ; } } return false ; } }",
        "boolean function ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } } return true ; }",
        "boolean function ( int [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } return true ; }",
        "boolean function ( int [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; ++ loc0 ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } return true ; }",
        "boolean function ( int [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return true ; } } return false ; }",
        "boolean function ( int [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; ++ loc0 ) { if ( arg0 [ loc0 ] == 0 ) { return true ; } } return false ; }",
        "boolean function ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } return true ; } }",
        "boolean function ( List < Pair > arg0 ) { for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0.0 ) { return true ; } } return false ; }",
        "boolean function ( List < Pair > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0.0 ) { return false ; } } return true ; }",
        "boolean function ( List < Pair > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0 ) { return false ; } } return true ; } }",
        "boolean function ( List < Pair > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0 ) { return true ; } } return false ; } }",
        "boolean function ( List < Pair > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0.0 ) { return true ; } } return false ; }",
        "boolean function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 += loc1 ; } } return loc0 == 0 ; }",
        "boolean function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 += loc1. intValue ( ) ; } } return loc0 == 0 ; }",
        "boolean function ( List < Pair > arg0 ) { int loc0 = 0 ; for ( Pair loc1 : arg0 ) { if ( loc1!= null ) { loc0 += loc1. getValue ( ) ; } } return loc0 == 0 ; }",
        "boolean function ( List < Pair > arg0 ) { for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0 ) { return true ; } } return false ; }",
        "boolean function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 += loc1. getValue ( ) ; } } return loc0 == 0 ; }"
      ],
      "mid_translation": [
        "Is the list of pairs sum to zero?",
        "Returns true if the pairs sum to zero.",
        "Check if the pairs sum to zero.",
        "Checks if the list of pairs sum to zero.",
        "Checks to see if the list of integer pairs sum to zero."
      ],
      "output": [
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { int loc0 = 0 ; for ( Pair loc1 : arg0 ) { if ( loc1. getValue ( ) == 0 ) { loc0 ++ ; } } return loc0 == 0 ; }",
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { if ( arg0. size ( ) == 0 ) return true ; else return false ; }",
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0.0 ) return false ; } return true ; }",
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { int loc0 = 0 ; for ( Pair loc1 : arg0 ) { if ( loc1. getValue ( ) == 0 ) { return true ; } loc0 ++ ; } return loc0 == 0 ; }",
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { int loc0 = 0 ; for ( Pair loc1 : arg0 ) { if ( loc1. getValue ( ) == 0.0 ) { loc0 ++ ; } } return loc0 == 0 ; }",
        "public static boolean pairs_sum_to_zero ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; ++ loc0 ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } return true ; } }",
        "public static boolean pairs_sum_to_zero ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } return true ; } }",
        "public static boolean pairs_sum_to_zero ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; ++ loc0 ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } } return true ; }",
        "public static boolean pairs_sum_to_zero ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return true ; } } return false ; } }",
        "public static boolean pairs_sum_to_zero ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } } return true ; }",
        "public static boolean pairs_sum_to_zero ( int [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } return true ; }",
        "public static boolean pairs_sum_to_zero ( int [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; ++ loc0 ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } return true ; }",
        "public static boolean pairs_sum_to_zero ( int [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return true ; } } return false ; }",
        "public static boolean pairs_sum_to_zero ( int [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; ++ loc0 ) { if ( arg0 [ loc0 ] == 0 ) { return true ; } } return false ; }",
        "public static boolean pairs_sum_to_zero ( int [ ] arg0 ) { if ( arg0. length == 0 ) { return true ; } else { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == 0 ) { return false ; } } return true ; } }",
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0.0 ) { return true ; } } return false ; }",
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0.0 ) { return false ; } } return true ; }",
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0 ) { return false ; } } return true ; } }",
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } else { for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0 ) { return true ; } } return false ; } }",
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { if ( arg0. size ( ) == 0 ) { return true ; } for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0.0 ) { return true ; } } return false ; }",
        "public static boolean pairs_sum_to_zero ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 += loc1 ; } } return loc0 == 0 ; }",
        "public static boolean pairs_sum_to_zero ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 += loc1. intValue ( ) ; } } return loc0 == 0 ; }",
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { int loc0 = 0 ; for ( Pair loc1 : arg0 ) { if ( loc1!= null ) { loc0 += loc1. getValue ( ) ; } } return loc0 == 0 ; }",
        "public static boolean pairs_sum_to_zero ( List < Pair > arg0 ) { for ( Pair loc0 : arg0 ) { if ( loc0. getValue ( ) == 0 ) { return true ; } } return false ; }",
        "public static boolean pairs_sum_to_zero ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 += loc1. getValue ( ) ; } } return loc0 == 0 ; }"
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base; \n        x = x - x / base; \n    }\n    return result;\n}",
      "target": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (x % base) + result; \n        x = (int) x / base; \n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "raw_output": [
        "ChangeBase function ( final int arg0, final int arg1 ) { return new ChangeBase ( arg0, arg1 ) ; }",
        "R function ( R arg0 ) { return arg0 ; }",
        "void function ( T arg0, T arg1 ) { Base. set ( arg0, arg1 ) ; }",
        "R function ( R arg0, R arg1 ) { return new R ( arg0, arg1 ) ; }",
        "R function ( R arg0 ) { return new R ( arg0. getClass ( ), arg0. getSimpleName ( ) ) ; }",
        "int function ( int arg0, int arg1 ) { return arg0 + arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 + arg1 ; }",
        "String function ( int arg0 ) { return \"srini_string\" + arg0 ; }",
        "int function ( int arg0 ) { return arg0 / 2 ; }",
        "int function ( int arg0, int arg1 ) { return arg0 + ( arg1 - 1 ) ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 >> arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 << arg1 ; }",
        "int function ( int arg0, int arg1 ) { return arg0 >> arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { if ( arg0 < arg1 ) { return arg1 ; } else if ( arg1 < arg0 ) { return arg0 + arg1 ; } else { return arg0 - arg1 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return arg1 ; } else if ( arg1 < arg0 ) { return arg0 + arg1 ; } else { return arg0 - arg1 + 1 ; } }",
        "int function ( final int arg0, final int arg1 ) { return arg0 << arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 + arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 + arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { if ( arg1 < 0 ) { return arg0 ; } else if ( arg1 == 0 ) { return arg0 ; } else { return arg0 + arg1 ; } }",
        "int function ( final int arg0, final int arg1 ) { if ( arg1 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 + arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 >> arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 << arg1 ; }",
        "int function ( int arg0, int arg1 ) { return arg0 >> arg1 ; }",
        "int function ( int arg0, int arg1 ) { return arg0 << arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 + arg1 ; }"
      ],
      "mid_translation": [
        "Change base.",
        "Change the base of a number of tokens.",
        "Change the base of an integer.",
        "Change the base value of an integer.",
        "Change the base of an integer value."
      ],
      "output": [
        "public static ChangeBase change_base ( final int arg0, final int arg1 ) { return new ChangeBase ( arg0, arg1 ) ; }",
        "public static R change_base ( R arg0 ) { return arg0 ; }",
        "public static void change_base ( T arg0, T arg1 ) { Base. set ( arg0, arg1 ) ; }",
        "public static R change_base ( R arg0, R arg1 ) { return new R ( arg0, arg1 ) ; }",
        "public static R change_base ( R arg0 ) { return new R ( arg0. getClass ( ), arg0. getSimpleName ( ) ) ; }",
        "public static int change_base ( int arg0, int arg1 ) { return arg0 + arg1 ; }",
        "public static int change_base ( final int arg0, final int arg1 ) { return arg0 + arg1 ; }",
        "public static String change_base ( int arg0 ) { return \"srini_string\" + arg0 ; }",
        "public static int change_base ( int arg0 ) { return arg0 / 2 ; }",
        "public static int change_base ( int arg0, int arg1 ) { return arg0 + ( arg1 - 1 ) ; }",
        "public static int change_base ( final int arg0, final int arg1 ) { return arg0 >> arg1 ; }",
        "public static int change_base ( final int arg0, final int arg1 ) { return arg0 << arg1 ; }",
        "public static int change_base ( int arg0, int arg1 ) { return arg0 >> arg1 ; }",
        "public static int change_base ( final int arg0, final int arg1 ) { if ( arg0 < arg1 ) { return arg1 ; } else if ( arg1 < arg0 ) { return arg0 + arg1 ; } else { return arg0 - arg1 ; } }",
        "public static int change_base ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return arg1 ; } else if ( arg1 < arg0 ) { return arg0 + arg1 ; } else { return arg0 - arg1 + 1 ; } }",
        "public static int change_base ( final int arg0, final int arg1 ) { return arg0 << arg1 ; }",
        "public static int change_base ( final int arg0, final int arg1 ) { return arg0 + arg1 ; }",
        "public static int change_base ( final int arg0, final int arg1 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 + arg1 ; }",
        "public static int change_base ( final int arg0, final int arg1 ) { if ( arg1 < 0 ) { return arg0 ; } else if ( arg1 == 0 ) { return arg0 ; } else { return arg0 + arg1 ; } }",
        "public static int change_base ( final int arg0, final int arg1 ) { if ( arg1 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 + arg1 ; }",
        "public static int change_base ( final int arg0, final int arg1 ) { return arg0 >> arg1 ; }",
        "public static int change_base ( final int arg0, final int arg1 ) { return arg0 << arg1 ; }",
        "public static int change_base ( int arg0, int arg1 ) { return arg0 >> arg1 ; }",
        "public static int change_base ( int arg0, int arg1 ) { return arg0 << arg1 ; }",
        "public static int change_base ( final int arg0, final int arg1 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 + arg1 ; }"
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n    return a * h; \n}",
      "target": "public static double triangle_area(double a, double h) {\n    return a * h / 2.; \n}",
      "function range": "8,5-10,5",
      "raw_output": [
        "double function ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return 2 * ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "double function ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return ( 2 * loc0 * loc0 + loc1 * loc1 ) / ( 2 * loc1 ) ; }",
        "double function ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return ( 2 * loc0 * loc1 / loc0 * loc1 ) ; }",
        "double function ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return ( 2 * loc0 * loc0 + loc1 * loc1 ) / ( 2 * loc0 * loc1 ) ; }",
        "double function ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. x - arg1. x ; final double loc1 = arg0. y - arg1. y ; return ( 2 * loc0 * loc0 + loc1 * loc1 ) / ( 2 * loc1 ) ; }",
        "float function ( final Triangle arg0, final Triangle arg1 ) { final float loc0 = arg0. loc0 ( ) ; final float loc1 = arg1. loc1 ( ) ; return ( float ) Math. sqrt ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "float function ( final Triangle arg0, final Triangle arg1 ) { final float loc0 = arg0. x - arg1. x ; final float loc1 = arg0. y - arg1. y ; return ( float ) Math. sqrt ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "float function ( final Triangle arg0, final Triangle arg1 ) { final float loc0 = arg0. x - arg1. x ; final float loc1 = arg0. y - arg1. y ; return ( float ) ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "float function ( final Triangle arg0, final Triangle arg1 ) { final float loc0 = arg0. loc0 ( ) ; final float loc1 = arg1. loc1 ( ) ; return ( float ) ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "double function ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return 2 * ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "void function ( double arg0 [ ], double arg1 [ ] ) { arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 0 ] ; arg0 [ 2 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 3 ] = arg0 [ 0 ] ; arg0 [ 4 ] = arg0 [ 1 ] - arg0 [ 0 ] ; arg0 [ 5 ] = arg0 [ 1 ] - arg0 [ 1 ] ; }",
        "void function ( double arg0 [ ], double arg1 [ ] ) { arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 0 ] ; arg0 [ 2 ] = arg0 [ 2 ] - arg0 [ 1 ] ; arg0 [ 3 ] = arg0 [ 0 ] ; arg0 [ 4 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 5 ] = arg0 [ 1 ] - arg0 [ 1 ] ; }",
        "void function ( double arg0 [ ], double arg1 [ ] ) { arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 0 ] ; arg0 [ 2 ] = arg0 [ 0 ] ; arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 1 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 2 ] ; arg0 [ 2 ] = arg0 [ 1 ] - arg0 [ 1 ] ; }",
        "void function ( double arg0 [ ], double arg1 [ ] ) { arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 0 ] ; arg0 [ 2 ] = arg0 [ 0 ] ; arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 2 ] = arg0 [ 1 ] - arg0 [ 0 ] ; arg0 [ 1 ] = arg0 [ 1 ] - arg0 [ 1 ] ; }",
        "void function ( double arg0 [ ], double arg1 [ ] ) { arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 0 ] ; arg0 [ 2 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 3 ] = arg0 [ 0 ] - arg0 [ 1 ] ; arg0 [ 4 ] = arg0 [ 0 ] - arg0 [ 1 ] ; arg0 [ 5 ] = arg0 [ 0 ] - arg0 [ 1 ] ; }",
        "double function ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return ( loc0 * loc0 + loc1 * loc1 ) / 2.0 ; }",
        "double function ( final Triangle arg0, final double arg1, final double arg2 ) { final double loc0 = arg0. distance ( arg1, arg2 ) ; final double loc1 = arg0. distance ( arg1, arg2 ) ; return ( loc0 * loc0 ) / ( loc1 * loc1 ) ; }",
        "double function ( final Triangle arg0 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg0. loc1 ( ) ; return ( loc0 * loc0 + loc1 * loc1 ) / 2.0 ; }",
        "double function ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return ( loc0 * loc0 ) / ( loc1 * loc1 ) ; }",
        "double function ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. distance ( arg1 ) ; final double loc1 = arg1. distance ( arg0 ) ; return ( loc0 * loc0 ) / ( loc1 * loc1 ) ; }",
        "double function ( final Triangle arg0, final double arg1, final double arg2, final double arg3 ) { final double loc0 = arg0. x - arg0. x ; final double loc1 = arg0. y - arg0. y ; final double loc2 = arg0. z - arg0. z ; return 2 * loc0 * loc1 + loc2 * loc2 ; }",
        "double function ( final Triangle arg0 ) { final double loc0 = arg0. x - arg0. x ; final double loc1 = arg0. y - arg0. y ; final double loc2 = arg0. z - arg0. z ; return 2 * loc0 * loc1 + loc2 * loc2 ; }",
        "double function ( final Triangle arg0 ) { final double loc0 = arg0. x - arg0. x ; final double loc1 = arg0. y - arg0. y ; return 2 * ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "double function ( final Triangle arg0, final double arg1, final double arg2, final double arg3 ) { final double loc0 = arg0. x - arg0. x ; final double loc1 = arg0. y - arg0. y ; final double loc2 = arg0. z - arg0. z ; return 2 * ( loc0 * loc0 + loc1 * loc1 + loc2 * loc2 ) ; }",
        "double function ( final Triangle arg0, final double arg1, final double arg2, final double arg3 ) { final double loc0 = arg0. distance ( arg1, arg2 ) ; final double loc1 = arg0. distance ( arg2, arg3 ) ; return ( loc0 * loc0 ) / ( loc1 * loc1 ) ; }"
      ],
      "mid_translation": [
        "Compute the area of a triangle.",
        "Calculate the area of a triangle.",
        "Compute the triangle area.",
        "Returns the area of a triangle.",
        "Compute the triangle area of a triangle."
      ],
      "output": [
        "public static double triangle_area ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return 2 * ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "public static double triangle_area ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return ( 2 * loc0 * loc0 + loc1 * loc1 ) / ( 2 * loc1 ) ; }",
        "public static double triangle_area ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return ( 2 * loc0 * loc1 / loc0 * loc1 ) ; }",
        "public static double triangle_area ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return ( 2 * loc0 * loc0 + loc1 * loc1 ) / ( 2 * loc0 * loc1 ) ; }",
        "public static double triangle_area ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. x - arg1. x ; final double loc1 = arg0. y - arg1. y ; return ( 2 * loc0 * loc0 + loc1 * loc1 ) / ( 2 * loc1 ) ; }",
        "public static float triangle_area ( final Triangle arg0, final Triangle arg1 ) { final float loc0 = arg0. loc0 ( ) ; final float loc1 = arg1. loc1 ( ) ; return ( float ) Math. sqrt ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "public static float triangle_area ( final Triangle arg0, final Triangle arg1 ) { final float loc0 = arg0. x - arg1. x ; final float loc1 = arg0. y - arg1. y ; return ( float ) Math. sqrt ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "public static float triangle_area ( final Triangle arg0, final Triangle arg1 ) { final float loc0 = arg0. x - arg1. x ; final float loc1 = arg0. y - arg1. y ; return ( float ) ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "public static float triangle_area ( final Triangle arg0, final Triangle arg1 ) { final float loc0 = arg0. loc0 ( ) ; final float loc1 = arg1. loc1 ( ) ; return ( float ) ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "public static double triangle_area ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return 2 * ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "public static void triangle_area ( double arg0 [ ], double arg1 [ ] ) { arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 0 ] ; arg0 [ 2 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 3 ] = arg0 [ 0 ] ; arg0 [ 4 ] = arg0 [ 1 ] - arg0 [ 0 ] ; arg0 [ 5 ] = arg0 [ 1 ] - arg0 [ 1 ] ; }",
        "public static void triangle_area ( double arg0 [ ], double arg1 [ ] ) { arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 0 ] ; arg0 [ 2 ] = arg0 [ 2 ] - arg0 [ 1 ] ; arg0 [ 3 ] = arg0 [ 0 ] ; arg0 [ 4 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 5 ] = arg0 [ 1 ] - arg0 [ 1 ] ; }",
        "public static void triangle_area ( double arg0 [ ], double arg1 [ ] ) { arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 0 ] ; arg0 [ 2 ] = arg0 [ 0 ] ; arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 1 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 2 ] ; arg0 [ 2 ] = arg0 [ 1 ] - arg0 [ 1 ] ; }",
        "public static void triangle_area ( double arg0 [ ], double arg1 [ ] ) { arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 0 ] ; arg0 [ 2 ] = arg0 [ 0 ] ; arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 2 ] = arg0 [ 1 ] - arg0 [ 0 ] ; arg0 [ 1 ] = arg0 [ 1 ] - arg0 [ 1 ] ; }",
        "public static void triangle_area ( double arg0 [ ], double arg1 [ ] ) { arg0 [ 0 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 1 ] = arg0 [ 2 ] - arg0 [ 0 ] ; arg0 [ 2 ] = arg0 [ 1 ] - arg0 [ 2 ] ; arg0 [ 3 ] = arg0 [ 0 ] - arg0 [ 1 ] ; arg0 [ 4 ] = arg0 [ 0 ] - arg0 [ 1 ] ; arg0 [ 5 ] = arg0 [ 0 ] - arg0 [ 1 ] ; }",
        "public static double triangle_area ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return ( loc0 * loc0 + loc1 * loc1 ) / 2.0 ; }",
        "public static double triangle_area ( final Triangle arg0, final double arg1, final double arg2 ) { final double loc0 = arg0. distance ( arg1, arg2 ) ; final double loc1 = arg0. distance ( arg1, arg2 ) ; return ( loc0 * loc0 ) / ( loc1 * loc1 ) ; }",
        "public static double triangle_area ( final Triangle arg0 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg0. loc1 ( ) ; return ( loc0 * loc0 + loc1 * loc1 ) / 2.0 ; }",
        "public static double triangle_area ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. loc0 ( ) ; final double loc1 = arg1. loc1 ( ) ; return ( loc0 * loc0 ) / ( loc1 * loc1 ) ; }",
        "public static double triangle_area ( final Triangle arg0, final Triangle arg1 ) { final double loc0 = arg0. distance ( arg1 ) ; final double loc1 = arg1. distance ( arg0 ) ; return ( loc0 * loc0 ) / ( loc1 * loc1 ) ; }",
        "public static double triangle_area ( final Triangle arg0, final double arg1, final double arg2, final double arg3 ) { final double loc0 = arg0. x - arg0. x ; final double loc1 = arg0. y - arg0. y ; final double loc2 = arg0. z - arg0. z ; return 2 * loc0 * loc1 + loc2 * loc2 ; }",
        "public static double triangle_area ( final Triangle arg0 ) { final double loc0 = arg0. x - arg0. x ; final double loc1 = arg0. y - arg0. y ; final double loc2 = arg0. z - arg0. z ; return 2 * loc0 * loc1 + loc2 * loc2 ; }",
        "public static double triangle_area ( final Triangle arg0 ) { final double loc0 = arg0. x - arg0. x ; final double loc1 = arg0. y - arg0. y ; return 2 * ( loc0 * loc0 + loc1 * loc1 ) ; }",
        "public static double triangle_area ( final Triangle arg0, final double arg1, final double arg2, final double arg3 ) { final double loc0 = arg0. x - arg0. x ; final double loc1 = arg0. y - arg0. y ; final double loc2 = arg0. z - arg0. z ; return 2 * ( loc0 * loc0 + loc1 * loc1 + loc2 * loc2 ) ; }",
        "public static double triangle_area ( final Triangle arg0, final double arg1, final double arg2, final double arg3 ) { final double loc0 = arg0. distance ( arg1, arg2 ) ; final double loc1 = arg0. distance ( arg2, arg3 ) ; return ( loc0 * loc0 ) / ( loc1 * loc1 ) ; }"
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    } \n    return result.get(result.size() - 1);\n}",
      "target": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.remove(0); \n    }\n    return result.get(result.size() - 1);\n}",
      "function range": "20,5-35,5",
      "raw_output": [
        "int function ( Object arg0 ) { try { Method loc0 = arg0. getClass ( ). getName ( ) ; loc0. setAccessible ( true ) ; return loc0. getInt ( 0 ) ; } catch ( Exception loc0 ) { return 0 ; } }",
        "int function ( ) { throw new Fib4Exception ( \"srini_string\" ) ; }",
        "int function ( Object arg0 ) { try { Integer loc0 = ( Integer ) arg0 ; return fib4. intValue ( ) ; } catch ( Exception loc0 ) { return 0 ; } }",
        "int function ( ) { throw new Fib4Exception ( ) ; }",
        "int function ( Object arg0 ) { try { Integer loc0 = ( Integer ) arg0 ; return fib4. intValue ( loc0 ) ; } catch ( Exception loc0 ) { return 0 ; } }",
        "int function ( Integer arg0 ) { if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci. getFib ( arg0 ) ; }",
        "int function ( Integer arg0 ) { if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( 4 - arg0. intValue ( ) ) ; }",
        "int function ( Integer arg0 ) { if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci. getFib ( arg0 ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; FibonacciNumber loc0 = FibonacciNumber. getFib ( arg0 ) ; return loc0. intValue ( ) ; }",
        "int function ( Integer arg0 ) { if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( arg0. intValue ( ) & 0x0f ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getValue ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getFib ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; FibonacciNumber loc0 = ( FibonacciNumber ) arg0 ; return loc0. getValue ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getValue ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getN ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getValue ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getFib ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. intValue ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getN ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getValue ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; FibonacciNumber loc0 = FibonacciNumber. getFib ( arg0 ) ; return loc0. intValue ( ) ; }",
        "int function ( N arg0 ) { Fibonacci loc0 = new Fibonacci ( arg0. getValue ( ) ) ; return loc0. getFib ( ) ; }",
        "int function ( N arg0 ) { Fibonacci loc0 = new Fibonacci ( ) ; for ( int loc1 = 0 ; loc1 < 4 ; loc1 ++ ) { loc0 [ loc1 ] = ( ( arg0. charAt ( loc1 ) << 8 ) + ( arg0. charAt ( loc1 + 1 ) ) ) ; } return loc0 ; }",
        "int function ( N arg0 ) { Fibonacci loc0 = new Fibonacci ( ) ; for ( int loc1 = 0 ; loc1 < 4 ; loc1 ++ ) { loc0 [ loc1 ] = ( ( arg0. nextByte ( ) << 8 ) + ( arg0. nextByte ( ) & 0xFF ) ) ; } return loc0 ; }",
        "int function ( N arg0 ) { Fibonacci loc0 = new Fibonacci ( ) ; for ( int loc1 = 0 ; loc1 < 4 ; loc1 ++ ) { loc0 [ loc1 ] = ( ( arg0. nextByte ( ) << 8 ) + ( arg0. nextByte ( ) << 16 ) ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Method fib4.",
        "This method returns the Fibonacci number 4 of n.",
        "This method returns the Fibonacci number for n.",
        "This function returns the Fibonacci number for n.",
        "This function returns the Fibonacci number 4 of n."
      ],
      "output": [
        "public static int fib4 ( Object arg0 ) { try { Method loc0 = arg0. getClass ( ). getName ( ) ; loc0. setAccessible ( true ) ; return loc0. getInt ( 0 ) ; } catch ( Exception loc0 ) { return 0 ; } }",
        "public static int fib4 ( ) { throw new Fib4Exception ( \"srini_string\" ) ; }",
        "public static int fib4 ( Object arg0 ) { try { Integer loc0 = ( Integer ) arg0 ; return fib4. intValue ( ) ; } catch ( Exception loc0 ) { return 0 ; } }",
        "public static int fib4 ( ) { throw new Fib4Exception ( ) ; }",
        "public static int fib4 ( Object arg0 ) { try { Integer loc0 = ( Integer ) arg0 ; return fib4. intValue ( loc0 ) ; } catch ( Exception loc0 ) { return 0 ; } }",
        "public static int fib4 ( Integer arg0 ) { if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci. getFib ( arg0 ) ; }",
        "public static int fib4 ( Integer arg0 ) { if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( 4 - arg0. intValue ( ) ) ; }",
        "public static int fib4 ( Integer arg0 ) { if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci. getFib ( arg0 ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; FibonacciNumber loc0 = FibonacciNumber. getFib ( arg0 ) ; return loc0. intValue ( ) ; }",
        "public static int fib4 ( Integer arg0 ) { if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( arg0. intValue ( ) & 0x0f ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getValue ( ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getFib ( ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; FibonacciNumber loc0 = ( FibonacciNumber ) arg0 ; return loc0. getValue ( ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getValue ( ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getN ( ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getValue ( ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getFib ( ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. intValue ( ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getN ( ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getValue ( ) ; }",
        "public static int fib4 ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; FibonacciNumber loc0 = FibonacciNumber. getFib ( arg0 ) ; return loc0. intValue ( ) ; }",
        "public static int fib4 ( N arg0 ) { Fibonacci loc0 = new Fibonacci ( arg0. getValue ( ) ) ; return loc0. getFib ( ) ; }",
        "public static int fib4 ( N arg0 ) { Fibonacci loc0 = new Fibonacci ( ) ; for ( int loc1 = 0 ; loc1 < 4 ; loc1 ++ ) { loc0 [ loc1 ] = ( ( arg0. charAt ( loc1 ) << 8 ) + ( arg0. charAt ( loc1 + 1 ) ) ) ; } return loc0 ; }",
        "public static int fib4 ( N arg0 ) { Fibonacci loc0 = new Fibonacci ( ) ; for ( int loc1 = 0 ; loc1 < 4 ; loc1 ++ ) { loc0 [ loc1 ] = ( ( arg0. nextByte ( ) << 8 ) + ( arg0. nextByte ( ) & 0xFF ) ) ; } return loc0 ; }",
        "public static int fib4 ( N arg0 ) { Fibonacci loc0 = new Fibonacci ( ) ; for ( int loc1 = 0 ; loc1 < 4 ; loc1 ++ ) { loc0 [ loc1 ] = ( ( arg0. nextByte ( ) << 8 ) + ( arg0. nextByte ( ) << 16 ) ) ; } return loc0 ; }"
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2; \n    }\n}",
      "target": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1]) / 2.; \n    }\n}",
      "function range": "12,5-20,5",
      "raw_output": [
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 < loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = arg0 [ loc2 ] ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] > arg0 [ loc1 ] ) { loc1 = loc2 ; } } return ( loc1 - 1 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length / 2 ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - 1 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = arg0 [ loc2 ] ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = arg0 [ loc2 ] ; } } return loc1 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 < loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) % arg0. size ( ) ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return loc0 + 1 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) / 2 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) % arg0. size ( ) ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - 1 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 < loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] > arg0 [ loc1 ] ) { loc1 = loc2 ; } } return ( loc1 - 1 ) / 2 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = arg0 [ loc2 ] ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0. get ( loc2 ) ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0. get ( loc2 ) ; if ( loc3 < loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return loc0 + 1 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) / 2 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0. get ( loc2 ) ; if ( ( loc3 >= loc1 ) && ( loc3 < loc0 ) ) { loc1 = loc3 ; } } return loc1 ; }"
      ],
      "mid_translation": [
        "Returns the median value of an array of integers.",
        "Get the median value of an array of integers.",
        "Returns the median value of the list.",
        "Gets the median value of an array of integers.",
        "Returns the median value of a list of integers."
      ],
      "output": [
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 < loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = arg0 [ loc2 ] ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] > arg0 [ loc1 ] ) { loc1 = loc2 ; } } return ( loc1 - 1 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length / 2 ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - 1 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = arg0 [ loc2 ] ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = arg0 [ loc2 ] ; } } return loc1 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 < loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) % arg0. size ( ) ; }",
        "public static int median ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return loc0 + 1 ; }",
        "public static int median ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) / 2 ; }",
        "public static int median ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) % arg0. size ( ) ; }",
        "public static int median ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - 1 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 < loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] > arg0 [ loc1 ] ) { loc1 = loc2 ; } } return ( loc1 - 1 ) / 2 ; }",
        "public static int median ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc1 ] ) { loc1 = arg0 [ loc2 ] ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0. get ( loc2 ) ; if ( loc3 > loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0. get ( loc2 ) ; if ( loc3 < loc1 ) { loc1 = loc3 ; } } return ( loc1 - loc0 ) / 2 ; }",
        "public static int median ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return loc0 + 1 ; }",
        "public static int median ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) / 2 ; }",
        "public static int median ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0. get ( loc2 ) ; if ( ( loc3 >= loc1 ) && ( loc3 < loc0 ) ) { loc1 = loc3 ; } } return loc1 ; }"
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) == text.charAt(text.length() - i)) \n            return true; \n    } \n    return false; \n}",
      "target": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i - 1)) \n            return false; \n    } \n    return true; \n}",
      "function range": "14,5-20,5",
      "raw_output": [
        "boolean function ( String arg0 ) { return arg0!= null && arg0. charAt ( 0 ) == ':' ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) >= 0 ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. charAt ( 0 ) == '/' ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return palindrome ( arg0 ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. length ( ) > 0 && arg0. charAt ( 0 ) == ':' ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. length ( ) > 0 && arg0. charAt ( 0 ) == '#' ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. matches ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) { return false ; } return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) return true ; return palindrome ( arg0 ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. length ( ) > 0 && arg0. charAt ( 0 ) == '#' ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return ( arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. charAt ( 0 ) == '#' ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. charAt ( 0 ) == '/' ) return true ; return false ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "boolean function ( String arg0 ) { return ( arg0!= null ) && ( arg0. indexOf ( \"srini_string\" ) >= 0 ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" )!= - 1 ; }"
      ],
      "mid_translation": [
        "Checks if a string is a palindrome.",
        "Checks if the given text is a palindrome.",
        "Checks if the text is a palindrome.",
        "is_palindrome This method checks if the text is a palindrome.",
        "is_palindrome This method checks if a string is a palindrome."
      ],
      "output": [
        "public static boolean is_palindrome ( String arg0 ) { return arg0!= null && arg0. charAt ( 0 ) == ':' ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) >= 0 ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0!= null && arg0. charAt ( 0 ) == '/' ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { return palindrome ( arg0 ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0!= null && arg0. length ( ) > 0 && arg0. charAt ( 0 ) == ':' ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0!= null && arg0. length ( ) > 0 && arg0. charAt ( 0 ) == '#' ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0!= null && arg0. matches ( \"srini_string\" ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { if ( arg0 == null ) { return false ; } return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) return true ; return palindrome ( arg0 ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0!= null && arg0. length ( ) > 0 && arg0. charAt ( 0 ) == '#' ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { return ( arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. charAt ( 0 ) == '#' ) return true ; return false ; }",
        "public static boolean is_palindrome ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. charAt ( 0 ) == '/' ) return true ; return false ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "public static boolean is_palindrome ( String arg0 ) { return ( arg0!= null ) && ( arg0. indexOf ( \"srini_string\" ) >= 0 ) ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0!= null && arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "public static boolean is_palindrome ( String arg0 ) { return arg0. indexOf ( \"srini_string\" )!= - 1 ; }"
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result; \n    } \n    return result % p; \n}",
      "target": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = (2 * result) % p; \n    } \n    return result; \n}",
      "function range": "16,5-22,5",
      "raw_output": [
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "long function ( final long arg0, final long arg1 ) { return arg0 < arg1? arg0 : arg1 > arg0? arg0 : arg1 ; }",
        "long function ( final long arg0, final long arg1 ) { return arg0 < arg1? arg1 : arg0 > arg1? arg0 : arg1 ; }",
        "long function ( final long arg0, final long arg1 ) { return arg0 < arg1? arg0 : arg1 > arg0? arg0 : arg0 < arg1? arg1 : arg0 ; }",
        "long function ( Long arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0. intValue ( ) % arg0. intValue ( ) ; }",
        "long function ( Long arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0. longValue ( ) % arg0. longValue ( ) ; }",
        "long function ( long arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 % ( arg0 + 1 ) ; }",
        "long function ( Long arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0. longValue ( ) % ( arg0. longValue ( ) + 1 ) ; }",
        "long function ( Long arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0. intValue ( ) % arg0. intValue ( ) ; }",
        "int function ( int arg0, Integer arg1 ) { return arg0 < 0? - arg1 : arg0 + arg1 ; }",
        "int function ( int arg0, int arg1 ) { return arg0 < 0? - arg1 : arg0 + arg1 ; }",
        "int function ( Integer arg0, int arg1 ) { if ( arg0 < 0 ) return arg1 ; while ( arg1 < 0 ) { arg1 = arg1 + arg0 ; arg0 = arg0 % arg1 ; } return arg0 ; }",
        "int function ( Integer arg0, int arg1 ) { if ( arg0 < 0 ) return arg1 ; while ( arg1 < 0 ) { arg0 = arg0 + arg1 ; arg1 = arg1 % arg1 ; } return arg0 ; }",
        "int function ( Integer arg0, int arg1 ) { if ( arg0 < 0 ) return arg1 ; while ( arg1 < 0 ) { arg0 = arg0 + arg1 ; arg1 = arg1 % arg0 ; } return arg0 ; }",
        "long function ( final long arg0, final long arg1 ) { if ( arg0 < arg1 ) { return arg0 + arg1 ; } else if ( arg0 > arg1 ) { return arg1 - arg0 ; } else { return arg0 ; } }",
        "long function ( final long arg0, final long arg1 ) { if ( arg0 < arg1 ) { return arg0 + arg1 ; } else if ( arg0 > arg1 ) { return arg0 - arg1 ; } else { return arg1 ; } }",
        "long function ( final long arg0, final long arg1 ) { return arg0 < 0? arg1 : arg0 > arg1? arg1 : arg0 < arg1? arg0 : arg1 ; }",
        "long function ( final long arg0, final long arg1 ) { return arg0 > arg1? arg0 : arg1 < arg0? arg0 : arg1 > arg0? arg0 : arg1 > arg0? arg0 : arg1 ; }",
        "long function ( final long arg0, final long arg1 ) { if ( arg0 < arg1 ) { return arg0 ; } if ( arg0 > arg1 ) { return arg1 ; } if ( arg0 < arg1 ) { return arg0 + arg1 ; } return arg0 ; }",
        "long function ( N arg0 ) { long loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "long function ( N arg0 ) { long loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) if ( arg0. get ( loc1 - 1 ) == 0 ) loc0 ++ ; return loc0 ; }",
        "long function ( N arg0 ) { long loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "long function ( N arg0 ) { long loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) == 0 ) loc0 ++ ; } return loc0 ; }",
        "long function ( N arg0 ) { long loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) > loc0 ) { loc0 ++ ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "modp ( n p )",
        "modp = n % p",
        "modp = n mod p",
        "modp - n",
        "Get modp of n."
      ],
      "output": [
        "public static List < Integer > modp ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < Integer > modp ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static long modp ( final long arg0, final long arg1 ) { return arg0 < arg1? arg0 : arg1 > arg0? arg0 : arg1 ; }",
        "public static long modp ( final long arg0, final long arg1 ) { return arg0 < arg1? arg1 : arg0 > arg1? arg0 : arg1 ; }",
        "public static long modp ( final long arg0, final long arg1 ) { return arg0 < arg1? arg0 : arg1 > arg0? arg0 : arg0 < arg1? arg1 : arg0 ; }",
        "public static long modp ( Long arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0. intValue ( ) % arg0. intValue ( ) ; }",
        "public static long modp ( Long arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0. longValue ( ) % arg0. longValue ( ) ; }",
        "public static long modp ( long arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 % ( arg0 + 1 ) ; }",
        "public static long modp ( Long arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0. longValue ( ) % ( arg0. longValue ( ) + 1 ) ; }",
        "public static long modp ( Long arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0. intValue ( ) % arg0. intValue ( ) ; }",
        "public static int modp ( int arg0, Integer arg1 ) { return arg0 < 0? - arg1 : arg0 + arg1 ; }",
        "public static int modp ( int arg0, int arg1 ) { return arg0 < 0? - arg1 : arg0 + arg1 ; }",
        "public static int modp ( Integer arg0, int arg1 ) { if ( arg0 < 0 ) return arg1 ; while ( arg1 < 0 ) { arg1 = arg1 + arg0 ; arg0 = arg0 % arg1 ; } return arg0 ; }",
        "public static int modp ( Integer arg0, int arg1 ) { if ( arg0 < 0 ) return arg1 ; while ( arg1 < 0 ) { arg0 = arg0 + arg1 ; arg1 = arg1 % arg1 ; } return arg0 ; }",
        "public static int modp ( Integer arg0, int arg1 ) { if ( arg0 < 0 ) return arg1 ; while ( arg1 < 0 ) { arg0 = arg0 + arg1 ; arg1 = arg1 % arg0 ; } return arg0 ; }",
        "public static long modp ( final long arg0, final long arg1 ) { if ( arg0 < arg1 ) { return arg0 + arg1 ; } else if ( arg0 > arg1 ) { return arg1 - arg0 ; } else { return arg0 ; } }",
        "public static long modp ( final long arg0, final long arg1 ) { if ( arg0 < arg1 ) { return arg0 + arg1 ; } else if ( arg0 > arg1 ) { return arg0 - arg1 ; } else { return arg1 ; } }",
        "public static long modp ( final long arg0, final long arg1 ) { return arg0 < 0? arg1 : arg0 > arg1? arg1 : arg0 < arg1? arg0 : arg1 ; }",
        "public static long modp ( final long arg0, final long arg1 ) { return arg0 > arg1? arg0 : arg1 < arg0? arg0 : arg1 > arg0? arg0 : arg1 > arg0? arg0 : arg1 ; }",
        "public static long modp ( final long arg0, final long arg1 ) { if ( arg0 < arg1 ) { return arg0 ; } if ( arg0 > arg1 ) { return arg1 ; } if ( arg0 < arg1 ) { return arg0 + arg1 ; } return arg0 ; }",
        "public static long modp ( N arg0 ) { long loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static long modp ( N arg0 ) { long loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) if ( arg0. get ( loc1 - 1 ) == 0 ) loc0 ++ ; return loc0 ; }",
        "public static long modp ( N arg0 ) { long loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static long modp ( N arg0 ) { long loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) == 0 ) loc0 ++ ; } return loc0 ; }",
        "public static long modp ( N arg0 ) { long loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 - 1 ) > loc0 ) { loc0 ++ ; } } return loc0 ; }"
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a')); \n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "target": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c + 21 - (int)('a')) % 26) + (int)('a')); \n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-23,5",
      "raw_output": [
        "byte [ ] function ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg0. length * 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < 0 ) loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0, int arg1, int arg2 ) { byte [ ] loc0 = new byte [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { int loc2 = arg0 [ arg1 + loc1 ] & 0xff ; loc0 [ arg1 + loc1 ] = ( byte ) ( loc2 >> 8 ) ; loc0 [ arg1 + loc1 ] & 0xff ; arg0 [ arg1 + loc1 ] = loc2 & 0xff ; } return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0, int arg1, int arg2 ) { byte [ ] loc0 = new byte [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { int loc2 = arg0 [ arg1 + loc1 ] & 0xff ; loc0 [ arg1 + loc1 ] = ( byte ) ( ( loc2 >> 8 ) & 0xff ) ; loc0 [ arg1 + loc1 ] & 0xff ; } return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0, int arg1, int arg2 ) { byte [ ] loc0 = new byte [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { int loc2 = arg0 [ arg1 + loc1 ] & 0xff ; loc0 [ arg1 + loc1 ] = ( byte ) ( loc2 >> 8 ) ; loc0 [ arg1 + loc1 ] & 0xff ; arg0 [ arg1 + loc1 ] = ( byte ) loc2 ; } return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0, int arg1, int arg2 ) { byte [ ] loc0 = new byte [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { int loc2 = arg0 [ arg1 + loc1 ] & 0xff ; loc0 [ arg1 + loc1 ] = ( byte ) ( loc2 >> 8 ) ; loc0 [ arg1 + loc1 ] & 0xff ; } return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = new byte [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] & 0xff ; if ( loc2 == 0 ) loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; else loc0 [ loc1 ] = ( byte ) arg0 [ loc1 ] & 0xff ; } return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = new byte [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < 0 ) loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = new byte [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 || loc2 > 0xff ) throw new DecoderException ( \"srini_string\" + loc2 + \"srini_string\" ) ; arg0 [ loc1 ] = loc0 ; } return arg0 ; }",
        "byte [ ] function ( byte [ ] arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = new byte [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 || loc2 > 0xff ) throw new DecoderException ( \"srini_string\" + loc2 + \"srini_string\" ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; } return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = new byte [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 || loc2 > 0xff ) throw new DecoderException ( \"srini_string\" + loc2 + \"srini_string\" ) ; arg0 [ loc1 ] = ( byte ) loc2 ; } return loc0 ; }",
        "byte [ ] function ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( DecoderException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "byte [ ] function ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( DecoderException loc0 ) { throw new Error ( \"srini_string\" ) ; } }",
        "byte [ ] function ( String arg0 ) { try { byte [ ] loc0 = arg0. getBytes ( \"srini_string\" ) ; return decode ( loc0, 0, arg0. length ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "byte [ ] function ( String arg0 ) { try { byte [ ] loc0 = arg0. getBytes ( \"srini_string\" ) ; return decode ( loc0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "byte [ ] function ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( DecoderException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( DecoderException loc0 ) { throw new Error ( \"srini_string\" ) ; } }",
        "byte [ ] function ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg1 ] ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] & 0xff ; if ( loc2 == 0 ) { loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; } else { loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; } } return loc0 ; }",
        "String function ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( DecoderException loc0 ) { throw new Error ( \"srini_string\", loc0. getMessage ( ) ) ; } }",
        "byte [ ] function ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg1 ] ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] & 0xff ; loc0 [ loc1 ] = ( byte ) ( ( loc2 >> 8 ) & 0xff ) ; loc0 [ loc1 ] = ( byte ) ( loc2 & 0xff ) ; } return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg0. length * 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < 0 ) loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0, int arg1, int arg2 ) { byte [ ] loc0 = new byte [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { int loc2 = arg0 [ arg1 + loc1 ] & 0xff ; loc0 [ arg1 + loc1 ] = ( byte ) ( loc2 >> 8 ) ; loc0 [ arg1 + loc1 ] & 0xff ; } return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg1 ] ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] & 0xff ; loc0 [ loc1 ] = ( byte ) ( ( loc2 >> 8 ) & 0xff ) ; loc0 [ loc1 ] = ( byte ) loc2 ; } return loc0 ; }",
        "byte [ ] function ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg0. length * 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < 0 ) loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; else if ( arg0 [ loc1 ] < 0 ) loc0 [ loc1 ] = ( byte ) arg0 [ loc1 ] ; return loc0 ; }"
      ],
      "mid_translation": [
        "Decode a shift of a string.",
        "Decode a shift string.",
        "Decode the shift of a string.",
        "Decode a shift of a String.",
        "Decode a shift of a string"
      ],
      "output": [
        "public static byte [ ] decode_shift ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg0. length * 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < 0 ) loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0, int arg1, int arg2 ) { byte [ ] loc0 = new byte [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { int loc2 = arg0 [ arg1 + loc1 ] & 0xff ; loc0 [ arg1 + loc1 ] = ( byte ) ( loc2 >> 8 ) ; loc0 [ arg1 + loc1 ] & 0xff ; arg0 [ arg1 + loc1 ] = loc2 & 0xff ; } return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0, int arg1, int arg2 ) { byte [ ] loc0 = new byte [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { int loc2 = arg0 [ arg1 + loc1 ] & 0xff ; loc0 [ arg1 + loc1 ] = ( byte ) ( ( loc2 >> 8 ) & 0xff ) ; loc0 [ arg1 + loc1 ] & 0xff ; } return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0, int arg1, int arg2 ) { byte [ ] loc0 = new byte [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { int loc2 = arg0 [ arg1 + loc1 ] & 0xff ; loc0 [ arg1 + loc1 ] = ( byte ) ( loc2 >> 8 ) ; loc0 [ arg1 + loc1 ] & 0xff ; arg0 [ arg1 + loc1 ] = ( byte ) loc2 ; } return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0, int arg1, int arg2 ) { byte [ ] loc0 = new byte [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { int loc2 = arg0 [ arg1 + loc1 ] & 0xff ; loc0 [ arg1 + loc1 ] = ( byte ) ( loc2 >> 8 ) ; loc0 [ arg1 + loc1 ] & 0xff ; } return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = new byte [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] & 0xff ; if ( loc2 == 0 ) loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; else loc0 [ loc1 ] = ( byte ) arg0 [ loc1 ] & 0xff ; } return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = new byte [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < 0 ) loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = new byte [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 || loc2 > 0xff ) throw new DecoderException ( \"srini_string\" + loc2 + \"srini_string\" ) ; arg0 [ loc1 ] = loc0 ; } return arg0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = new byte [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 || loc2 > 0xff ) throw new DecoderException ( \"srini_string\" + loc2 + \"srini_string\" ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; } return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = new byte [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 || loc2 > 0xff ) throw new DecoderException ( \"srini_string\" + loc2 + \"srini_string\" ) ; arg0 [ loc1 ] = ( byte ) loc2 ; } return loc0 ; }",
        "public static byte [ ] decode_shift ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( DecoderException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "public static byte [ ] decode_shift ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( DecoderException loc0 ) { throw new Error ( \"srini_string\" ) ; } }",
        "public static byte [ ] decode_shift ( String arg0 ) { try { byte [ ] loc0 = arg0. getBytes ( \"srini_string\" ) ; return decode ( loc0, 0, arg0. length ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "public static byte [ ] decode_shift ( String arg0 ) { try { byte [ ] loc0 = arg0. getBytes ( \"srini_string\" ) ; return decode ( loc0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "public static byte [ ] decode_shift ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "public static String decode_shift ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( DecoderException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "public static String decode_shift ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "public static String decode_shift ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( DecoderException loc0 ) { throw new Error ( \"srini_string\" ) ; } }",
        "public static byte [ ] decode_shift ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg1 ] ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] & 0xff ; if ( loc2 == 0 ) { loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; } else { loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; } } return loc0 ; }",
        "public static String decode_shift ( String arg0 ) { try { return decode ( arg0, \"srini_string\" ) ; } catch ( DecoderException loc0 ) { throw new Error ( \"srini_string\", loc0. getMessage ( ) ) ; } }",
        "public static byte [ ] decode_shift ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg1 ] ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] & 0xff ; loc0 [ loc1 ] = ( byte ) ( ( loc2 >> 8 ) & 0xff ) ; loc0 [ loc1 ] = ( byte ) ( loc2 & 0xff ) ; } return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg0. length * 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < 0 ) loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0, int arg1, int arg2 ) { byte [ ] loc0 = new byte [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { int loc2 = arg0 [ arg1 + loc1 ] & 0xff ; loc0 [ arg1 + loc1 ] = ( byte ) ( loc2 >> 8 ) ; loc0 [ arg1 + loc1 ] & 0xff ; } return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg1 ] ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] & 0xff ; loc0 [ loc1 ] = ( byte ) ( ( loc2 >> 8 ) & 0xff ) ; loc0 [ loc1 ] = ( byte ) loc2 ; } return loc0 ; }",
        "public static byte [ ] decode_shift ( byte [ ] arg0, int arg1 ) { byte [ ] loc0 = new byte [ arg0. length * 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < 0 ) loc0 [ loc1 ] = ( byte ) ( arg0 [ loc1 ] & 0xff ) ; else if ( arg0 [ loc1 ] < 0 ) loc0 [ loc1 ] = ( byte ) arg0 [ loc1 ] ; return loc0 ; }"
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "target": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        char c_lower = Character.toLowerCase(c); \n        if (c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "18,5-26,5",
      "raw_output": [
        "String function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc0. hasMoreTokens ( ) ) { loc0. nextToken ( ) ; } return loc0. toString ( ) ; }",
        "String function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; int loc1 = 0 ; while ( loc0. hasMoreTokens ( ) ) { loc1 ++ ; } return loc0. nextToken ( ) ; }",
        "String function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc0. hasMoreTokens ( ) ) { loc0. nextToken ( ) ; } return loc0. nextToken ( ) ; }",
        "String function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return new String ( loc0 ) ; }",
        "String function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return new String ( loc0 ) ; }",
        "String function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return new String ( loc0 ) ; }",
        "String function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return new String ( loc0 ) ; }",
        "String function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; int loc1 = 0 ; while ( loc0. hasMoreTokens ( ) ) { loc1 ++ ; } return loc0. nextToken ( ) ; }",
        "String function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return new String ( loc0 ) ; }",
        "String function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return new String ( loc0 ) ; }",
        "String function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; int loc1 = 0 ; while ( loc0. hasMoreTokens ( ) ) { loc1 ++ ; } return loc0. nextToken ( ) ; }",
        "String function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc0. hasMoreTokens ( ) ) { loc0. nextToken ( ) ; } return loc0. nextToken ( ) ; }",
        "String function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; return loc0. nextToken ( ) ; }",
        "String function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc0. hasMoreTokens ( ) ) { loc0. nextToken ( ) ; } return loc0. toString ( ) ; }",
        "String function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0 ) ; int loc1 = 0 ; while ( loc0. hasMoreTokens ( ) ) { loc1 ++ ; } return loc0. nextToken ( ) ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuffer loc1 = new StringBuffer ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc2 ) ) ) loc1. append ( arg0. charAt ( loc2 ) ) ; } return loc1. toString ( ) ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuffer loc1 = new StringBuffer ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { char loc3 = arg0. charAt ( loc2 ) ; if ( Character. isLetter ( loc3 ) ) loc1. append ( loc3 ) ; } return loc1. toString ( ) ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuffer loc1 = new StringBuffer ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc2 ) ) ) loc1. append ( arg0. charAt ( loc2 ) ) ; } return loc1. toString ( ) ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuilder loc1 = new StringBuilder ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { char loc3 = arg0. charAt ( loc2 ) ; if ( Character. isLetter ( loc3 ) ) loc1. append ( loc3 ) ; } return loc1. toString ( ) ; }",
        "String function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; return loc0. nextToken ( ) ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { arg0 = arg0. substring ( 0, loc1 ) ; } } return arg0 ; }",
        "String function ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; String loc0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return loc0 ; }",
        "String function ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; String loc0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return loc0. replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String [ ] loc1 = new String [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "String function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return new String ( loc0 ) ; }"
      ],
      "mid_translation": [
        "Removes all vowels from a string.",
        "Removes all vowels from a string",
        "Remove all vowels from a string.",
        "Remove all vowels from a string",
        "Removes all vowels from the string."
      ],
      "output": [
        "public static String remove_vowels ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc0. hasMoreTokens ( ) ) { loc0. nextToken ( ) ; } return loc0. toString ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; int loc1 = 0 ; while ( loc0. hasMoreTokens ( ) ) { loc1 ++ ; } return loc0. nextToken ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc0. hasMoreTokens ( ) ) { loc0. nextToken ( ) ; } return loc0. nextToken ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return new String ( loc0 ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return new String ( loc0 ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return new String ( loc0 ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return new String ( loc0 ) ; }",
        "public static String remove_vowels ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; int loc1 = 0 ; while ( loc0. hasMoreTokens ( ) ) { loc1 ++ ; } return loc0. nextToken ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return new String ( loc0 ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return new String ( loc0 ) ; }",
        "public static String remove_vowels ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; int loc1 = 0 ; while ( loc0. hasMoreTokens ( ) ) { loc1 ++ ; } return loc0. nextToken ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc0. hasMoreTokens ( ) ) { loc0. nextToken ( ) ; } return loc0. nextToken ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; return loc0. nextToken ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc0. hasMoreTokens ( ) ) { loc0. nextToken ( ) ; } return loc0. toString ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0 ) ; int loc1 = 0 ; while ( loc0. hasMoreTokens ( ) ) { loc1 ++ ; } return loc0. nextToken ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuffer loc1 = new StringBuffer ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc2 ) ) ) loc1. append ( arg0. charAt ( loc2 ) ) ; } return loc1. toString ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuffer loc1 = new StringBuffer ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { char loc3 = arg0. charAt ( loc2 ) ; if ( Character. isLetter ( loc3 ) ) loc1. append ( loc3 ) ; } return loc1. toString ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuffer loc1 = new StringBuffer ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc2 ) ) ) loc1. append ( arg0. charAt ( loc2 ) ) ; } return loc1. toString ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuilder loc1 = new StringBuilder ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { char loc3 = arg0. charAt ( loc2 ) ; if ( Character. isLetter ( loc3 ) ) loc1. append ( loc3 ) ; } return loc1. toString ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; return loc0. nextToken ( ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { arg0 = arg0. substring ( 0, loc1 ) ; } } return arg0 ; }",
        "public static String remove_vowels ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; String loc0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return loc0 ; }",
        "public static String remove_vowels ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; String loc0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return loc0. replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; String [ ] loc1 = new String [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "public static String remove_vowels ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return new String ( loc0 ) ; }"
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t) \n            return true; \n    } \n    return false; \n}",
      "target": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] >= t) \n            return false; \n    } \n    return true; \n}",
      "function range": "10,5-16,5",
      "raw_output": [
        "boolean function ( T [ ] arg0, T [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg1 [ loc0 ] < arg0 [ loc0 ] ) { return false ; } } return true ; }",
        "boolean function ( T [ ] arg0, T [ ] arg1, int arg2 ) { if ( arg0. length > arg1. length ) { for ( int loc0 = 0 ; loc0 < arg2 ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) { return false ; } } } return true ; }",
        "boolean function ( T [ ] arg0, T [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) { return false ; } } return true ; }",
        "boolean function ( T [ ] arg0, T [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) return false ; if ( arg1 [ loc0 ] > arg1 [ loc0 ] ) return false ; } return true ; }",
        "boolean function ( T [ ] arg0, T [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg1 [ loc0 ] < arg0 [ loc0 ] ) return false ; if ( arg1 [ loc0 ] > arg0 [ loc0 ] ) return false ; } return true ; }",
        "boolean function ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; if ( loc0 < arg1 ) { return false ; } else if ( loc0 > arg1 ) { return true ; } else if ( loc0 == arg1 ) { return true ; } return false ; }",
        "boolean function ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ arg0. length - 1 ] ; double loc1 = arg0 [ arg0. length - 2 ] ; double loc2 = arg0 [ arg0. length - 1 ] ; if ( loc0 < loc1 || loc2 > loc0 ) { return false ; } return true ; }",
        "boolean function ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ arg0. length - 1 ] ; double loc1 = arg0 [ arg0. length - 2 ] ; double loc2 = arg0 [ arg0. length - 1 ] ; double loc3 = arg0 [ arg0. length - 1 ] ; if ( loc0 < loc1 || loc2 > loc3 ) { return false ; } return true ; }",
        "boolean function ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; if ( loc0 < arg1 ) { return false ; } else if ( loc0 > arg1 ) { return true ; } else if ( loc0 == arg1 ) { return true ; } else if ( loc0 == arg0. length ) { return true ; } return false ; }",
        "boolean function ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; if ( loc0 < arg1 ) { return false ; } else if ( loc0 > arg1 ) { return true ; } else if ( loc0 == arg1 ) { return true ; } else if ( loc0 == arg0. length ) { return true ; } else { return false ; } }",
        "boolean function ( int [ ] arg0, int arg1, double arg2 ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 ) { loc0 = true ; break ; } } return loc0 ; }",
        "boolean function ( int [ ] arg0, int arg1, double arg2 ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = true ; break ; } } return loc0 ; }",
        "boolean function ( int [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { return false ; } } return true ; }",
        "boolean function ( int [ ] arg0, int arg1, double arg2 ) { if ( arg0. length < arg1 ) { return false ; } else { for ( int loc0 = 0 ; loc0 < arg1 ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 ] ) { return true ; } } return false ; } }",
        "boolean function ( int [ ] arg0, int arg1, double arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { return false ; } } return true ; }",
        "boolean function ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < arg1 ) { return false ; } else if ( loc2 > arg2 ) { return true ; } } return true ; }",
        "boolean function ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 ) { return false ; } else if ( arg0 [ loc1 ] > arg2 ) { return true ; } } return true ; }",
        "boolean function ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < arg2 ) { return false ; } else if ( loc2 > arg1 ) { return true ; } } return true ; }",
        "boolean function ( double [ ] arg0, double arg1, double arg2 ) { if ( arg0. length < arg1 ) { return false ; } else if ( arg0 [ arg0. length - 1 ] < arg1 ) { return true ; } else if ( arg0 [ arg0. length - 1 ] > arg2 ) { return true ; } else if ( arg0 [ arg0. length - 1 ] > arg2 ) { return false ; } return true ; }",
        "boolean function ( double [ ] arg0, double arg1, double arg2 ) { if ( arg0. length < arg1 ) { return false ; } else if ( arg0 [ arg0. length - 1 ] < arg1 ) { return true ; } else if ( arg0 [ arg0. length - 1 ] > arg2 ) { return true ; } else if ( arg0 [ arg0. length - 1 ] > arg2 ) { return true ; } return false ; }",
        "boolean function ( double [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { return false ; } } return true ; }",
        "boolean function ( int [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { return false ; } } return true ; }",
        "boolean function ( double [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 - 1 ] ) { return false ; } } return true ; }",
        "boolean function ( int [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc0 ] ) { return false ; } } return true ; }",
        "boolean function ( int [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 - 1 ] ) { return false ; } } return true ; }"
      ],
      "mid_translation": [
        "Returns true if the array l is below t.",
        "Returns true if the array is below the threshold.",
        "Check if the array l is below the threshold.",
        "Check if the array is below the threshold.",
        "returns true if the array l is below the threshold"
      ],
      "output": [
        "public static boolean below_threshold ( T [ ] arg0, T [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg1 [ loc0 ] < arg0 [ loc0 ] ) { return false ; } } return true ; }",
        "public static boolean below_threshold ( T [ ] arg0, T [ ] arg1, int arg2 ) { if ( arg0. length > arg1. length ) { for ( int loc0 = 0 ; loc0 < arg2 ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) { return false ; } } } return true ; }",
        "public static boolean below_threshold ( T [ ] arg0, T [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) { return false ; } } return true ; }",
        "public static boolean below_threshold ( T [ ] arg0, T [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) return false ; if ( arg1 [ loc0 ] > arg1 [ loc0 ] ) return false ; } return true ; }",
        "public static boolean below_threshold ( T [ ] arg0, T [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg1 [ loc0 ] < arg0 [ loc0 ] ) return false ; if ( arg1 [ loc0 ] > arg0 [ loc0 ] ) return false ; } return true ; }",
        "public static boolean below_threshold ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; if ( loc0 < arg1 ) { return false ; } else if ( loc0 > arg1 ) { return true ; } else if ( loc0 == arg1 ) { return true ; } return false ; }",
        "public static boolean below_threshold ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ arg0. length - 1 ] ; double loc1 = arg0 [ arg0. length - 2 ] ; double loc2 = arg0 [ arg0. length - 1 ] ; if ( loc0 < loc1 || loc2 > loc0 ) { return false ; } return true ; }",
        "public static boolean below_threshold ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ arg0. length - 1 ] ; double loc1 = arg0 [ arg0. length - 2 ] ; double loc2 = arg0 [ arg0. length - 1 ] ; double loc3 = arg0 [ arg0. length - 1 ] ; if ( loc0 < loc1 || loc2 > loc3 ) { return false ; } return true ; }",
        "public static boolean below_threshold ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; if ( loc0 < arg1 ) { return false ; } else if ( loc0 > arg1 ) { return true ; } else if ( loc0 == arg1 ) { return true ; } else if ( loc0 == arg0. length ) { return true ; } return false ; }",
        "public static boolean below_threshold ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; if ( loc0 < arg1 ) { return false ; } else if ( loc0 > arg1 ) { return true ; } else if ( loc0 == arg1 ) { return true ; } else if ( loc0 == arg0. length ) { return true ; } else { return false ; } }",
        "public static boolean below_threshold ( int [ ] arg0, int arg1, double arg2 ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 ) { loc0 = true ; break ; } } return loc0 ; }",
        "public static boolean below_threshold ( int [ ] arg0, int arg1, double arg2 ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = true ; break ; } } return loc0 ; }",
        "public static boolean below_threshold ( int [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { return false ; } } return true ; }",
        "public static boolean below_threshold ( int [ ] arg0, int arg1, double arg2 ) { if ( arg0. length < arg1 ) { return false ; } else { for ( int loc0 = 0 ; loc0 < arg1 ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 ] ) { return true ; } } return false ; } }",
        "public static boolean below_threshold ( int [ ] arg0, int arg1, double arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { return false ; } } return true ; }",
        "public static boolean below_threshold ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < arg1 ) { return false ; } else if ( loc2 > arg2 ) { return true ; } } return true ; }",
        "public static boolean below_threshold ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 ) { return false ; } else if ( arg0 [ loc1 ] > arg2 ) { return true ; } } return true ; }",
        "public static boolean below_threshold ( double [ ] arg0, double arg1, double arg2 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < arg2 ) { return false ; } else if ( loc2 > arg1 ) { return true ; } } return true ; }",
        "public static boolean below_threshold ( double [ ] arg0, double arg1, double arg2 ) { if ( arg0. length < arg1 ) { return false ; } else if ( arg0 [ arg0. length - 1 ] < arg1 ) { return true ; } else if ( arg0 [ arg0. length - 1 ] > arg2 ) { return true ; } else if ( arg0 [ arg0. length - 1 ] > arg2 ) { return false ; } return true ; }",
        "public static boolean below_threshold ( double [ ] arg0, double arg1, double arg2 ) { if ( arg0. length < arg1 ) { return false ; } else if ( arg0 [ arg0. length - 1 ] < arg1 ) { return true ; } else if ( arg0 [ arg0. length - 1 ] > arg2 ) { return true ; } else if ( arg0 [ arg0. length - 1 ] > arg2 ) { return true ; } return false ; }",
        "public static boolean below_threshold ( double [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { return false ; } } return true ; }",
        "public static boolean below_threshold ( int [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { return false ; } } return true ; }",
        "public static boolean below_threshold ( double [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 - 1 ] ) { return false ; } } return true ; }",
        "public static boolean below_threshold ( int [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc0 ] ) { return false ; } } return true ; }",
        "public static boolean below_threshold ( int [ ] arg0, int arg1, int arg2 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 - 1 ] ) { return false ; } } return true ; }"
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n    return x | y; \n}",
      "target": "public static int add(int x, int y) {\n    return x + y; \n}",
      "function range": "10,5-12,5",
      "raw_output": [
        "Term function ( Term arg0, Term arg1 ) { return new Term ( arg0. getLabel ( ) + arg1. getLabel ( ) ) ; }",
        "Term function ( Term arg0, Term arg1 ) { return new Term ( arg0. getLabel ( ) + arg1. getLabel ( ), arg1. getLabel ( ) ) ; }",
        "Terms function ( Term arg0, Term arg1 ) { return new Terms ( arg0. getLabel ( ) + arg1. getLabel ( ), arg1. getLabel ( ) ) ; }",
        "Terms function ( Terms arg0, Terms arg1 ) { return new Terms ( arg0. getLabel ( ) + arg1. getLabel ( ), arg1. getLabel ( ) ) ; }",
        "Term function ( Term arg0, Term arg1 ) { return new Term ( arg0. getLabel ( ) + arg1. getLabel ( ), arg1. getLemma ( ) ) ; }",
        "Set < String > function ( Set < String > arg0, Set < String > arg1 ) { Set < String > loc0 = new HashSet < String > ( ) ; loc0. addAll ( arg0 ) ; loc0. addAll ( arg1 ) ; return loc0 ; }",
        "List < String > function ( List < String > arg0, List < String > arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0. add ( arg0. toString ( ) ) ; loc0. add ( arg1. toString ( ) ) ; return loc0 ; }",
        "List < String > function ( List < String > arg0, List < String > arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0. addAll ( arg0 ) ; loc0. addAll ( arg1 ) ; return loc0 ; }",
        "Words function ( Word arg0, Word arg1 ) { Words loc0 = new Words ( ) ; loc0. add ( arg0 ) ; loc0. add ( arg1 ) ; return loc0 ; }",
        "List < Word > function ( List < Word > arg0, Word arg1 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; loc0. addAll ( arg0 ) ; loc0. addAll ( arg1 ) ; return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( arg1. get ( loc1 ), arg1. get ( loc1 ) ) ; return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( arg1. get ( loc1 ) ) ; return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( arg1. get ( loc1 ), arg0. get ( loc1 ) ) ; return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { return new Vector ( arg0. x + arg1. x, arg0. y + arg1. y ) ; }",
        "CIDatabase function ( CIDatabase arg0, CIDatabase arg1 ) { return new CIDatabase ( arg0. add ( arg1. add ( arg1. add ( arg0 ) ) ) ; }",
        "CIDatabase function ( CIDatabase arg0, CIDatabase arg1 ) { return new CIDatabase ( arg0. add ( arg1 ) ) ; }",
        "CIDatabase function ( CIDatabase arg0, CIDatabase arg1 ) { return add ( new CIDatabase ( arg0 ), new CIDatabase ( arg1 ) ) ; }",
        "CIDatabase function ( CIDatabase arg0, CIDatabase arg1 ) { return new CIDatabase ( arg0. add ( arg1. add ( arg1 ) ) ) ; }",
        "CTIDelta function ( CTIDelta arg0, CTIDelta arg1 ) { return new CTIDelta ( arg0. getCID ( ). add ( arg1. getCID ( ) ) ) ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 + arg1 ; }",
        "int function ( int arg0, int arg1 ) { return arg0 + arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 ^ arg1 ; }",
        "int function ( int arg0, int arg1 ) { return arg0 ^ arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 % arg1 ; }"
      ],
      "mid_translation": [
        "Add two terms.",
        "Add two words.",
        "Compute the addition of two vectors.",
        "Add two CID   .",
        "Compute the addition of two integers."
      ],
      "output": [
        "public static Term add ( Term arg0, Term arg1 ) { return new Term ( arg0. getLabel ( ) + arg1. getLabel ( ) ) ; }",
        "public static Term add ( Term arg0, Term arg1 ) { return new Term ( arg0. getLabel ( ) + arg1. getLabel ( ), arg1. getLabel ( ) ) ; }",
        "public static Terms add ( Term arg0, Term arg1 ) { return new Terms ( arg0. getLabel ( ) + arg1. getLabel ( ), arg1. getLabel ( ) ) ; }",
        "public static Terms add ( Terms arg0, Terms arg1 ) { return new Terms ( arg0. getLabel ( ) + arg1. getLabel ( ), arg1. getLabel ( ) ) ; }",
        "public static Term add ( Term arg0, Term arg1 ) { return new Term ( arg0. getLabel ( ) + arg1. getLabel ( ), arg1. getLemma ( ) ) ; }",
        "public static Set < String > add ( Set < String > arg0, Set < String > arg1 ) { Set < String > loc0 = new HashSet < String > ( ) ; loc0. addAll ( arg0 ) ; loc0. addAll ( arg1 ) ; return loc0 ; }",
        "public static List < String > add ( List < String > arg0, List < String > arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0. add ( arg0. toString ( ) ) ; loc0. add ( arg1. toString ( ) ) ; return loc0 ; }",
        "public static List < String > add ( List < String > arg0, List < String > arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0. addAll ( arg0 ) ; loc0. addAll ( arg1 ) ; return loc0 ; }",
        "public static Words add ( Word arg0, Word arg1 ) { Words loc0 = new Words ( ) ; loc0. add ( arg0 ) ; loc0. add ( arg1 ) ; return loc0 ; }",
        "public static List < Word > add ( List < Word > arg0, Word arg1 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; loc0. addAll ( arg0 ) ; loc0. addAll ( arg1 ) ; return loc0 ; }",
        "public static Vector add ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( arg1. get ( loc1 ), arg1. get ( loc1 ) ) ; return loc0 ; }",
        "public static Vector add ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( arg1. get ( loc1 ) ) ; return loc0 ; }",
        "public static Vector add ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static Vector add ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( arg1. get ( loc1 ), arg0. get ( loc1 ) ) ; return loc0 ; }",
        "public static Vector add ( Vector arg0, Vector arg1 ) { return new Vector ( arg0. x + arg1. x, arg0. y + arg1. y ) ; }",
        "public static CIDatabase add ( CIDatabase arg0, CIDatabase arg1 ) { return new CIDatabase ( arg0. add ( arg1. add ( arg1. add ( arg0 ) ) ) ; }",
        "public static CIDatabase add ( CIDatabase arg0, CIDatabase arg1 ) { return new CIDatabase ( arg0. add ( arg1 ) ) ; }",
        "public static CIDatabase add ( CIDatabase arg0, CIDatabase arg1 ) { return add ( new CIDatabase ( arg0 ), new CIDatabase ( arg1 ) ) ; }",
        "public static CIDatabase add ( CIDatabase arg0, CIDatabase arg1 ) { return new CIDatabase ( arg0. add ( arg1. add ( arg1 ) ) ) ; }",
        "public static CTIDelta add ( CTIDelta arg0, CTIDelta arg1 ) { return new CTIDelta ( arg0. getCID ( ). add ( arg1. getCID ( ) ) ) ; }",
        "public static int add ( final int arg0, final int arg1 ) { return arg0 + arg1 ; }",
        "public static int add ( int arg0, int arg1 ) { return arg0 + arg1 ; }",
        "public static int add ( final int arg0, final int arg1 ) { return arg0 ^ arg1 ; }",
        "public static int add ( int arg0, int arg1 ) { return arg0 ^ arg1 ; }",
        "public static int add ( final int arg0, final int arg1 ) { return arg0 % arg1 ; }"
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>(); \n    ArrayList<Character> set1 = new ArrayList<Character>(); \n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
      "target": "public static boolean same_chars(String s0, String s1) {\n    HashSet<Character> set0 = new HashSet<Character>(); \n    HashSet<Character> set1 = new HashSet<Character>(); \n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
      "function range": "20,5-31,5",
      "raw_output": [
        "boolean function ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null ) { return arg1 == null ; } if ( arg1 == null ) { return arg0 == null ; } return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null && arg1 == null ) { return true ; } return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. contains ( arg1. contains ( arg0 ) ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. contains ( arg1. substring ( 0, arg0. length ( ) ) ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. contains ( arg1. charAt ( 0 ) ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0. contains ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null && arg1 == null ) { return true ; } return arg0. contains ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!= arg1. charAt ( loc1 ) ) { return false ; } } return true ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. charAt ( loc1 )!= arg0. charAt ( loc1 ) ) { return false ; } } return true ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; int loc1 = arg0. length ( ) ; if ( loc0!= loc1 ) { return false ; } return arg0. charAt ( loc0 ) == arg1. charAt ( loc0 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 )!= arg1. charAt ( loc2 ) ) { return false ; } } return true ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!= arg1. charAt ( loc1 ) ) { return false ; } loc0 ++ ; } return true ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!= arg1. charAt ( loc1 ) ) { return false ; } loc0 ++ ; } return loc0 == 0 ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 )!= arg1. charAt ( loc2 ) ) { return false ; } } return true ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!= arg1. charAt ( loc1 ) ) { return false ; } } return true ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0 == null? arg1 == null : arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null ) { return arg1 == null ; } if ( arg1 == null ) { return arg0 == null ; } return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. length ( ) == arg1. length ( ) ; }"
      ],
      "mid_translation": [
        "Checks if two strings have the same characters.",
        "Checks if two strings contain the same characters.",
        "Checks if two strings have the same chars.",
        "Checks if two strings contain the same chars.",
        "Returns true if two strings have the same characters."
      ],
      "output": [
        "public static boolean same_chars ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0. equals ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. equals ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null ) { return arg1 == null ; } if ( arg1 == null ) { return arg0 == null ; } return arg0. equals ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null && arg1 == null ) { return true ; } return arg0. equals ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { return arg0. contains ( arg1. contains ( arg0 ) ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { return arg0. contains ( arg1. substring ( 0, arg0. length ( ) ) ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { return arg0. contains ( arg1. charAt ( 0 ) ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0. contains ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null && arg1 == null ) { return true ; } return arg0. contains ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!= arg1. charAt ( loc1 ) ) { return false ; } } return true ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. charAt ( loc1 )!= arg0. charAt ( loc1 ) ) { return false ; } } return true ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; int loc1 = arg0. length ( ) ; if ( loc0!= loc1 ) { return false ; } return arg0. charAt ( loc0 ) == arg1. charAt ( loc0 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. equals ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 )!= arg1. charAt ( loc2 ) ) { return false ; } } return true ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!= arg1. charAt ( loc1 ) ) { return false ; } loc0 ++ ; } return true ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!= arg1. charAt ( loc1 ) ) { return false ; } loc0 ++ ; } return loc0 == 0 ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 )!= arg1. charAt ( loc2 ) ) { return false ; } } return true ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!= arg1. charAt ( loc1 ) ) { return false ; } } return true ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. equals ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { return arg0 == null? arg1 == null : arg0. equals ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null ) { return arg1 == null ; } if ( arg1 == null ) { return arg0 == null ; } return arg0. equals ( arg1 ) ; }",
        "public static boolean same_chars ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. length ( ) == arg1. length ( ) ; }"
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2); \n}",
      "target": "public static int fib(int n) {\n    if (n == 0 || n == 1) \n        return n;\n    return fib(n - 1) + fib(n - 2);\n}",
      "function range": "12,5-14,5",
      "raw_output": [
        "int function ( N arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; Fibonacci loc0 = Fibonacci ( arg0 ) ; return loc0. getFib ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = Fibonacci ( arg0 ) ; return loc0. getFib ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getFib ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } Fibonacci loc0 = Fibonacci ( arg0 ) ; return loc0. getFib ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; FibonAcci loc0 = FibonAcci ( arg0 ) ; return loc0. getFib ( ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return Fibrum. of ( arg0 ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return Fibrum. value ( arg0 ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return Fibrum. apply ( arg0 ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return Fibrum. of ( arg0 ) ; }",
        "int function ( N arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return Fibrum. value ( arg0 ) ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( arg0 - 1 ) ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( ( arg0 - 1 ) / 2 ) ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } checkArgument ( arg0 > 0, \"srini_string\" ) ; return Fibonacci ( arg0 - 1 ) ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( arg0 ) ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( 0, arg0 ) ; }",
        "double function ( Double arg0 ) { double loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Fibonacci ( arg0. getDouble ( loc1 ) ) ; } return Fibonacci ( arg0 ) ; }",
        "double function ( Double arg0 ) { double loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Math. pow ( arg0. getDouble ( loc1 ), 2 ) ; } return Fibonacci ( loc0 ) ; }",
        "double function ( Double arg0 ) { double loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Fibonacci ( arg0. getDouble ( loc1 ) ) ; } return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Fibonacci ( arg0 - loc1 - 1 ) ; } return Fibonacci ( arg0 ) ; }",
        "double function ( Double arg0 ) { double loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Fibonacci ( arg0. getDouble ( loc1 ) ) ; } return Fibonacci ( loc0 ) ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( ( arg0 - 1 ) / 2 ) ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( arg0 - 1 ) ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci. valueOf ( arg0 ) ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } checkArgument ( arg0 > 0, \"srini_string\" ) ; return Fibonacci ( arg0 - 1 ) ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( arg0 ) ; }"
      ],
      "mid_translation": [
        "Returns the Fibonacci of n.",
        "Returns the Fibrum of n.",
        "Returns the Fibonacci of a given number of words.",
        "Calculate the Fibonacci of n.",
        "Returns the Fibonacci of the given number of words."
      ],
      "output": [
        "public static int fib ( N arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; Fibonacci loc0 = Fibonacci ( arg0 ) ; return loc0. getFib ( ) ; }",
        "public static int fib ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; Fibonacci loc0 = Fibonacci ( arg0 ) ; return loc0. getFib ( ) ; }",
        "public static int fib ( N arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; Fibonacci loc0 = ( Fibonacci ) arg0 ; return loc0. getFib ( ) ; }",
        "public static int fib ( N arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } Fibonacci loc0 = Fibonacci ( arg0 ) ; return loc0. getFib ( ) ; }",
        "public static int fib ( N arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; FibonAcci loc0 = FibonAcci ( arg0 ) ; return loc0. getFib ( ) ; }",
        "public static int fib ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return Fibrum. of ( arg0 ) ; }",
        "public static int fib ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return Fibrum. value ( arg0 ) ; }",
        "public static int fib ( N arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return Fibrum. apply ( arg0 ) ; }",
        "public static int fib ( N arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return Fibrum. of ( arg0 ) ; }",
        "public static int fib ( N arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return Fibrum. value ( arg0 ) ; }",
        "public static int fib ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( arg0 - 1 ) ; }",
        "public static int fib ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( ( arg0 - 1 ) / 2 ) ; }",
        "public static int fib ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } checkArgument ( arg0 > 0, \"srini_string\" ) ; return Fibonacci ( arg0 - 1 ) ; }",
        "public static int fib ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( arg0 ) ; }",
        "public static int fib ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( 0, arg0 ) ; }",
        "public static double fib ( Double arg0 ) { double loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Fibonacci ( arg0. getDouble ( loc1 ) ) ; } return Fibonacci ( arg0 ) ; }",
        "public static double fib ( Double arg0 ) { double loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Math. pow ( arg0. getDouble ( loc1 ), 2 ) ; } return Fibonacci ( loc0 ) ; }",
        "public static double fib ( Double arg0 ) { double loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Fibonacci ( arg0. getDouble ( loc1 ) ) ; } return loc0 ; }",
        "public static double fib ( double arg0 ) { double loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Fibonacci ( arg0 - loc1 - 1 ) ; } return Fibonacci ( arg0 ) ; }",
        "public static double fib ( Double arg0 ) { double loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Fibonacci ( arg0. getDouble ( loc1 ) ) ; } return Fibonacci ( loc0 ) ; }",
        "public static int fib ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( ( arg0 - 1 ) / 2 ) ; }",
        "public static int fib ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( arg0 - 1 ) ; }",
        "public static int fib ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci. valueOf ( arg0 ) ; }",
        "public static int fib ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } checkArgument ( arg0 > 0, \"srini_string\" ) ; return Fibonacci ( arg0 - 1 ) ; }",
        "public static int fib ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibonacci ( arg0 ) ; }"
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth >= 0) \n            return true; \n    } \n    return false; \n}",
      "target": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0) \n            return false; \n    } \n    return depth == 0; \n}",
      "function range": "16,5-27,5",
      "raw_output": [
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0, String arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) { return true ; } } return false ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return true ; } else if ( arg0. equals ( arg1 ) ) { return true ; } else if ( arg0. equals ( \"srini_string\" ) ) { return true ; } else { return false ; } }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. equals ( arg1 ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) && arg0. endsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. length ( ) > 0 && arg0. charAt ( 0 ) == '{' && arg0. charAt ( 1 ) == '{' ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. equals ( arg1 ) ; }"
      ],
      "mid_translation": [
        "Returns true if the brackets are correct.",
        "Checks if the brackets are correct.",
        "Check if the brackets are correct.",
        "Returns true if brackets are correct.",
        "Returns true if the brackets are valid."
      ],
      "output": [
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "public static boolean correct_bracketing ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0, String arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1 ) { return true ; } } return false ; }",
        "public static boolean correct_bracketing ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return true ; } else if ( arg0. equals ( arg1 ) ) { return true ; } else if ( arg0. equals ( \"srini_string\" ) ) { return true ; } else { return false ; } }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) ; }",
        "public static boolean correct_bracketing ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. equals ( arg1 ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) && arg0. endsWith ( \"srini_string\" ) ; }",
        "public static boolean correct_bracketing ( String arg0 ) { return arg0!= null && arg0. length ( ) > 0 && arg0. charAt ( 0 ) == '{' && arg0. charAt ( 1 ) == '{' ; }",
        "public static boolean correct_bracketing ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } return arg0. equals ( arg1 ) ; }"
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    sorted = l; \n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
      "target": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    System.arraycopy(l, 0, sorted, 0, l.length); \n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
      "function range": "14,5-28,5",
      "raw_output": [
        "boolean function ( long [ ] arg0 ) { long loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { return false ; } } return true ; }",
        "boolean function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { return false ; } } return true ; }",
        "boolean function ( long [ ] arg0 ) { long loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < loc0 ) return false ; return true ; }",
        "boolean function ( double [ ] arg0 ) { int loc0 = arg0. length ; boolean loc1 = false ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc2 ] ) { loc1 = true ; break ; } } return loc1 ; }",
        "boolean function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < loc0 ) return false ; return true ; }",
        "boolean function ( double [ ] arg0 ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { loc0 = true ; break ; } } return loc0 ; }",
        "boolean function ( long [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) return false ; } return true ; }",
        "boolean function ( long [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) return false ; return true ; }",
        "boolean function ( long [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { return false ; } } return true ; }",
        "boolean function ( long [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0 [ loc1 ] < 0 ) return false ; return true ; }",
        "boolean function ( double [ ] arg0 ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { loc0 = true ; break ; } } return loc0 ; }",
        "boolean function ( long [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) return false ; } return true ; }",
        "boolean function ( double arg0 [ ] ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = true ; break ; } } return loc0 ; }",
        "boolean function ( double [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) return false ; } return true ; }",
        "boolean function ( double [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 ] ) return false ; } return true ; }",
        "boolean function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; boolean loc2 = false ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { if ( arg0 [ loc3 ] < loc0 ) { loc2 = true ; break ; } } return loc2 ; }",
        "boolean function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; boolean loc2 = false ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { if ( arg0 [ loc3 ] < loc0 ) { loc2 = true ; break ; } } if ( loc2 ) { return false ; } return true ; }",
        "boolean function ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; boolean loc2 = false ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { if ( arg0 [ loc3 ] < loc0 ) { loc2 = true ; break ; } } return loc2 ; }",
        "boolean function ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; boolean loc2 = false ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { if ( arg0 [ loc3 ] < loc0 ) { loc2 = true ; break ; } } if ( loc2 ) { return false ; } return true ; }",
        "boolean function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; boolean loc2 = false ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { if ( arg0 [ loc3 ] < loc0 ) { loc2 = true ; break ; } } if ( loc2 ) { return true ; } return false ; }",
        "boolean function ( long [ ] arg0 ) { long loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { return false ; } } return true ; }",
        "boolean function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { return false ; } } return true ; }",
        "boolean function ( long [ ] arg0 ) { long loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < loc0 ) return false ; return true ; }",
        "boolean function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < loc0 ) return false ; return true ; }",
        "boolean function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) return false ; } return true ; }"
      ],
      "mid_translation": [
        "Returns true if the array l is monotonic.",
        "Checks if the array l is monotonic.",
        "Check if the array l is monotonic.",
        "Returns true if the given array is monotonic.",
        "returns true if the array l is monotonic."
      ],
      "output": [
        "public static boolean monotonic ( long [ ] arg0 ) { long loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { return false ; } } return true ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { return false ; } } return true ; }",
        "public static boolean monotonic ( long [ ] arg0 ) { long loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < loc0 ) return false ; return true ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { int loc0 = arg0. length ; boolean loc1 = false ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < arg0 [ loc2 ] ) { loc1 = true ; break ; } } return loc1 ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < loc0 ) return false ; return true ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { loc0 = true ; break ; } } return loc0 ; }",
        "public static boolean monotonic ( long [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) return false ; } return true ; }",
        "public static boolean monotonic ( long [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) return false ; return true ; }",
        "public static boolean monotonic ( long [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { return false ; } } return true ; }",
        "public static boolean monotonic ( long [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0 [ loc1 ] < 0 ) return false ; return true ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { loc0 = true ; break ; } } return loc0 ; }",
        "public static boolean monotonic ( long [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) return false ; } return true ; }",
        "public static boolean monotonic ( double arg0 [ ] ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = true ; break ; } } return loc0 ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) return false ; } return true ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 ] ) return false ; } return true ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; boolean loc2 = false ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { if ( arg0 [ loc3 ] < loc0 ) { loc2 = true ; break ; } } return loc2 ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; boolean loc2 = false ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { if ( arg0 [ loc3 ] < loc0 ) { loc2 = true ; break ; } } if ( loc2 ) { return false ; } return true ; }",
        "public static boolean monotonic ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; boolean loc2 = false ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { if ( arg0 [ loc3 ] < loc0 ) { loc2 = true ; break ; } } return loc2 ; }",
        "public static boolean monotonic ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; boolean loc2 = false ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { if ( arg0 [ loc3 ] < loc0 ) { loc2 = true ; break ; } } if ( loc2 ) { return false ; } return true ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; double loc1 = arg0 [ 1 ] ; boolean loc2 = false ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { if ( arg0 [ loc3 ] < loc0 ) { loc2 = true ; break ; } } if ( loc2 ) { return true ; } return false ; }",
        "public static boolean monotonic ( long [ ] arg0 ) { long loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { return false ; } } return true ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { return false ; } } return true ; }",
        "public static boolean monotonic ( long [ ] arg0 ) { long loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < loc0 ) return false ; return true ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] < loc0 ) return false ; return true ; }",
        "public static boolean monotonic ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) return false ; } return true ; }"
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<Integer>(); \n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
      "target": "public static int[] common(int[] l1, int[] l2) {\n    HashSet<Integer> common = new HashSet<Integer>(); \n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
      "function range": "12,5-29,5",
      "raw_output": [
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == arg1 ) { return 1 ; } else if ( arg1 == arg0 ) { return 1 ; } else { return arg0 % arg1 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 == arg0 ) { return 1 ; } else if ( arg1 == arg1 ) { return 1 ; } else { return arg0 % arg1 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == arg1 ) { return 1 ; } else { return arg0 % arg1 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 == arg0 ) { return 1 ; } else if ( arg1 == arg1 ) { return 2 ; } else { return arg0 % arg1 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 == arg0 ) { return 1 ; } else if ( arg1 == arg1 ) { return 1 ; } else { return arg0 ; } }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg1 [ loc1 ] == arg0 [ loc1 ] ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { loc0 [ loc1 ] = loc1 ; } } return loc0 ; }",
        "List function ( List arg0, List arg1 ) { if ( arg0 == null || arg1 == null ) { return null ; } List loc0 = new ArrayList ( arg0. size ( ) ) ; List loc1 = new ArrayList ( arg1. size ( ) ) ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc1. add ( arg0. get ( loc2 ) ) ; } return loc0 ; }",
        "List function ( List arg0, List arg1 ) { if ( arg0 == null || arg1 == null ) { return null ; } List loc0 = new ArrayList ( arg0. size ( ) ) ; List loc1 = new ArrayList ( arg1. size ( ) ) ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc1. add ( arg1. get ( loc2 ) ) ; } return loc0 ; }",
        "Set function ( Set arg0, Set arg1 ) { if ( arg0. size ( ) == arg1. size ( ) ) { return arg1 ; } else if ( arg0. size ( ) == arg1. size ( ) ) { return arg0 ; } else { return commonElements ( arg0, arg1. get ( 0 ), arg1. get ( 1 ) ) ; } }",
        "int [ ] function ( int arg0, int arg1 ) { int [ ] loc0 = new int [ arg0 ] ; int [ ] loc1 = new int [ arg1 ] ; for ( int loc2 = 0 ; loc2 < arg0 ; loc2 ++ ) { if ( loc1 [ loc2 ] == arg1 [ loc2 ] ) { loc0 [ loc2 ] = loc1 [ loc2 ] ; } } return loc0 ; }",
        "List function ( List arg0, List arg1 ) { if ( arg0 == null || arg1 == null ) { return null ; } List loc0 = new ArrayList ( arg0. size ( ) ) ; List loc1 = new ArrayList ( arg1. size ( ) ) ; for ( int loc2 = 0 ; loc2 < arg1. size ( ) ; loc2 ++ ) { loc1. add ( arg0. get ( loc2 ) ) ; } return loc0 ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } else if ( arg0 == arg1 ) { return common ( arg0, arg1 ) ; } else { return common ( arg0, arg1 ) ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } else if ( arg1 == arg0 ) { return common ( arg0, arg1 ) ; } else { return common ( arg0, arg1 ) ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } else if ( arg1 == arg0 ) { return arg1 ; } else { return commonOf ( arg0, arg1 - 1 ) ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } else if ( arg0 == arg1 ) { return arg1 ; } else { return commonOf ( arg0, arg1 ) ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } else if ( arg1 == arg0 ) { return commonOf ( arg1, arg0 ) ; } else { return commonOf ( arg1, arg0 ) ; } }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg1 [ loc1 ] == arg0 [ loc1 ] ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 == arg1 [ loc1 ] ) { loc0 [ loc1 ] = loc2 ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; loc1 += arg1 [ loc2 ] ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Returns the common elements of two sets of integers.",
        "Get the common elements of two sets of integers.",
        "Get the common elements of two sets of images.",
        "Get the common of two sets of integers.",
        "Gets the common elements of two sets of integers."
      ],
      "output": [
        "public static int common ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == arg1 ) { return 1 ; } else if ( arg1 == arg0 ) { return 1 ; } else { return arg0 % arg1 ; } }",
        "public static int common ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 == arg0 ) { return 1 ; } else if ( arg1 == arg1 ) { return 1 ; } else { return arg0 % arg1 ; } }",
        "public static int common ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == arg1 ) { return 1 ; } else { return arg0 % arg1 ; } }",
        "public static int common ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 == arg0 ) { return 1 ; } else if ( arg1 == arg1 ) { return 2 ; } else { return arg0 % arg1 ; } }",
        "public static int common ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 == arg0 ) { return 1 ; } else if ( arg1 == arg1 ) { return 1 ; } else { return arg0 ; } }",
        "public static int [ ] common ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 ; } return loc0 ; }",
        "public static int [ ] common ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg1 [ loc1 ] == arg0 [ loc1 ] ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } } return loc0 ; }",
        "public static int [ ] common ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] common ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] common ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { loc0 [ loc1 ] = loc1 ; } } return loc0 ; }",
        "public static List common ( List arg0, List arg1 ) { if ( arg0 == null || arg1 == null ) { return null ; } List loc0 = new ArrayList ( arg0. size ( ) ) ; List loc1 = new ArrayList ( arg1. size ( ) ) ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc1. add ( arg0. get ( loc2 ) ) ; } return loc0 ; }",
        "public static List common ( List arg0, List arg1 ) { if ( arg0 == null || arg1 == null ) { return null ; } List loc0 = new ArrayList ( arg0. size ( ) ) ; List loc1 = new ArrayList ( arg1. size ( ) ) ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc1. add ( arg1. get ( loc2 ) ) ; } return loc0 ; }",
        "public static Set common ( Set arg0, Set arg1 ) { if ( arg0. size ( ) == arg1. size ( ) ) { return arg1 ; } else if ( arg0. size ( ) == arg1. size ( ) ) { return arg0 ; } else { return commonElements ( arg0, arg1. get ( 0 ), arg1. get ( 1 ) ) ; } }",
        "public static int [ ] common ( int arg0, int arg1 ) { int [ ] loc0 = new int [ arg0 ] ; int [ ] loc1 = new int [ arg1 ] ; for ( int loc2 = 0 ; loc2 < arg0 ; loc2 ++ ) { if ( loc1 [ loc2 ] == arg1 [ loc2 ] ) { loc0 [ loc2 ] = loc1 [ loc2 ] ; } } return loc0 ; }",
        "public static List common ( List arg0, List arg1 ) { if ( arg0 == null || arg1 == null ) { return null ; } List loc0 = new ArrayList ( arg0. size ( ) ) ; List loc1 = new ArrayList ( arg1. size ( ) ) ; for ( int loc2 = 0 ; loc2 < arg1. size ( ) ; loc2 ++ ) { loc1. add ( arg0. get ( loc2 ) ) ; } return loc0 ; }",
        "public static int common ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } else if ( arg0 == arg1 ) { return common ( arg0, arg1 ) ; } else { return common ( arg0, arg1 ) ; } }",
        "public static int common ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } else if ( arg1 == arg0 ) { return common ( arg0, arg1 ) ; } else { return common ( arg0, arg1 ) ; } }",
        "public static int common ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } else if ( arg1 == arg0 ) { return arg1 ; } else { return commonOf ( arg0, arg1 - 1 ) ; } }",
        "public static int common ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } else if ( arg0 == arg1 ) { return arg1 ; } else { return commonOf ( arg0, arg1 ) ; } }",
        "public static int common ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } else if ( arg1 == arg0 ) { return commonOf ( arg1, arg0 ) ; } else { return commonOf ( arg1, arg0 ) ; } }",
        "public static int [ ] common ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg1 [ loc1 ] == arg0 [ loc1 ] ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } } return loc0 ; }",
        "public static int [ ] common ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] common ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] common ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 == arg1 [ loc1 ] ) { loc0 [ loc1 ] = loc2 ; } } return loc0 ; }",
        "public static int [ ] common ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; loc1 += arg1 [ loc2 ] ; } return loc0 ; }"
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j)){ \n            largest = n % j; \n        }\n    }\n    return largest;\n}",
      "target": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0 && is_prime(j)){ \n            largest = j; \n        }\n    }\n    return largest;\n}",
      "function range": "20,5-28,5",
      "raw_output": [
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 > loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { if ( arg0. length < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { if ( arg0. length < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { if ( arg0. length < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = arg0 ; while ( loc0 > 1 ) { loc0 = loc0 / 2 ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = arg0 ; while ( loc0 > 1 ) { loc0 = loc0 + 1 ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = arg0 ; while ( loc0 > 1 ) { loc0 = loc0 / 2 ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 1 ; while ( arg0 > loc0 ) { arg0 = loc0 ; } return arg0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 + 1 ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = arg0 ; while ( loc0 > 1 ) { loc0 = loc0 / 2 ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 1 ; while ( arg0 > loc0 ) { arg0 /= loc0 ; loc0 ++ ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 1 ; while ( arg0 > loc0 ) { arg0 = loc0 ; } return arg0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 1 ; while ( arg0 > loc0 ) { arg0 = loc0 ; loc0 ++ ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 > 1 ) { return arg0 ; } else if ( arg0 > 1 ) { return arg0 - 1 ; } else { return arg0 + 1 ; } }"
      ],
      "mid_translation": [
        "Get the largest prime factor of n.",
        "Gets the largest prime factor of n.",
        "Returns the largest prime factor of n.",
        "Gets the largest prime factor.",
        "Get the largest prime factor."
      ],
      "output": [
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 > loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { if ( arg0. length < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { if ( arg0. length < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { if ( arg0. length < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_prime_factor ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_prime_factor ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = arg0 ; while ( loc0 > 1 ) { loc0 = loc0 / 2 ; } return loc0 ; }",
        "public static int largest_prime_factor ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = arg0 ; while ( loc0 > 1 ) { loc0 = loc0 + 1 ; } return loc0 ; }",
        "public static int largest_prime_factor ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = arg0 ; while ( loc0 > 1 ) { loc0 = loc0 / 2 ; } return loc0 ; }",
        "public static int largest_prime_factor ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 1 ; while ( arg0 > loc0 ) { arg0 = loc0 ; } return arg0 ; }",
        "public static int largest_prime_factor ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 + 1 ; }",
        "public static int largest_prime_factor ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = arg0 ; while ( loc0 > 1 ) { loc0 = loc0 / 2 ; } return loc0 ; }",
        "public static int largest_prime_factor ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 1 ; while ( arg0 > loc0 ) { arg0 /= loc0 ; loc0 ++ ; } return loc0 ; }",
        "public static int largest_prime_factor ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 1 ; while ( arg0 > loc0 ) { arg0 = loc0 ; } return arg0 ; }",
        "public static int largest_prime_factor ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 1 ; while ( arg0 > loc0 ) { arg0 = loc0 ; loc0 ++ ; } return loc0 ; }",
        "public static int largest_prime_factor ( int arg0 ) { if ( arg0 > 1 ) { return arg0 ; } else if ( arg0 > 1 ) { return arg0 - 1 ; } else { return arg0 + 1 ; } }"
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2); \n}",
      "target": "public static int sum_to_n(int n) {\n    return (n + 1) * n / 2; \n}",
      "function range": "16,5-18,5",
      "raw_output": [
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < T > function ( List <? extends T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "T function ( T arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "List < T > function ( List <? extends T > arg0 ) { return arg0 ; }",
        "List < T > function ( List <? extends T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "T function ( T arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "T function ( T arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return arg0 ; }",
        "T function ( T arg0 ) { return arg0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 * Sum. apply ( arg0 ) ; }",
        "Sum function ( N arg0 ) { return new Sum ( arg0 ) ; }",
        "Sum function ( N arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Sum ( arg0 ) ; }",
        "Sum function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return new Sum ( arg0 ) ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 + Sum. from ( arg0 ) ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "Sum function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Sum ( arg0 ) ; }",
        "Sum function ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return new Sum ( arg0 ) ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 + Sum. from ( arg0 ) ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Sum to n.",
        "Sum to n",
        "sum_to_n - Sum to n.",
        "sum_to_n - Sum to n",
        "sum_to_n - Sums to n"
      ],
      "output": [
        "public static List < T > sum_to_n ( List < T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < T > sum_to_n ( List <? extends T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < T > sum_to_n ( List < T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static T sum_to_n ( T arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "public static List < T > sum_to_n ( List <? extends T > arg0 ) { return arg0 ; }",
        "public static List < T > sum_to_n ( List <? extends T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < T > sum_to_n ( List < T > arg0 ) { List < T > loc0 = Lists. newArrayList ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static T sum_to_n ( T arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "public static T sum_to_n ( T arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return arg0 ; }",
        "public static T sum_to_n ( T arg0 ) { return arg0 ; }",
        "public static int sum_to_n ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 * Sum. apply ( arg0 ) ; }",
        "public static Sum sum_to_n ( N arg0 ) { return new Sum ( arg0 ) ; }",
        "public static Sum sum_to_n ( N arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Sum ( arg0 ) ; }",
        "public static Sum sum_to_n ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return new Sum ( arg0 ) ; }",
        "public static int sum_to_n ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 + Sum. from ( arg0 ) ; }",
        "public static int sum_to_n ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static int sum_to_n ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static Sum sum_to_n ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Sum ( arg0 ) ; }",
        "public static Sum sum_to_n ( N arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return new Sum ( arg0 ) ; }",
        "public static int sum_to_n ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 + Sum. from ( arg0 ) ; }",
        "public static int sum_to_n ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_to_n ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static int sum_to_n ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_to_n ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static int sum_to_n ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }"
      ]
    },
    "CORRECT_PARENTHESIS": {
      "loc": "23-27",
      "input": "public static boolean correct_parenthesis(String parenthesis) {\n    int depth = 0;\n    for (char b : parenthesis.toCharArray()) {\n        if (b == '(')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth >= 0) \n            return true; \n    } \n    return false; \n}",
      "target": "public static boolean correct_parenthesis(String parenthesis) {\n    int depth = 0;\n    for (char b : parenthesis.toCharArray()) {\n        if (b == '(')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0) \n            return false; \n    } \n    return depth == 0; \n}",
      "function range": "16,5-27,5",
      "raw_output": [
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( '(' ) >= 0 ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( '(' ) > - 1 ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. matches ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( '(' ) >= 0 ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( '(' ) >= 0 ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( '(' ) > - 1 ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return ( arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ) ; }",
        "boolean function ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( '(' ) || arg0. contains ( ')' ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return ( arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ) ; }",
        "boolean function ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ) return true ; return false ; }"
      ],
      "mid_translation": [
        "Checks if the given string is a valid parenthesis.",
        "Check if the given string is a valid parenthesis.",
        "Determine if the given string is a valid parenthesis.",
        "Checks if the given string contains a valid parenthesis.",
        "Check if the given string contains a valid parenthesis."
      ],
      "output": [
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. indexOf ( '(' ) >= 0 ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. indexOf ( '(' ) > - 1 ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. matches ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. indexOf ( '(' ) >= 0 ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. indexOf ( '(' ) >= 0 ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. indexOf ( '(' ) > - 1 ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return ( arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ) return true ; return false ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( '(' ) || arg0. contains ( ')' ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { return ( arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ) ; }",
        "public static boolean correct_parenthesis ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ) return true ; return false ; }"
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i += 1) \n        result.add(xs.get(i)); \n    return result;\n}",
      "target": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i += 1) \n        result.add(i * xs.get(i)); \n    return result;\n}",
      "function range": "15,5-21,5",
      "raw_output": [
        "List < Integer > function ( List < Integer > arg0, List < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, List < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg1. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, List < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = arg1. size ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0. add ( arg1. get ( loc2 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, List < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = arg1. size ( ) ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0. add ( arg1. get ( loc2 ) ) ; } return loc0 ; }",
        "int function ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc1 ) % loc2 ) ; } return arg0. get ( loc0 ) ; }",
        "double function ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "double function ( List < T > arg0, List < T > arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "double function ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; return loc0 ; }",
        "double function ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0 += derivative ( loc2, arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "double function ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "int function ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc1 ) % loc2 ) ; } return arg0. get ( loc0 ) ; }",
        "int function ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc1 ) % loc2 ) ; } return loc0 ; }",
        "int function ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc1 ) % loc2 ) ; } return arg0. size ( ) ; }",
        "int function ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc1 ) % loc2 ) ; } return arg0. get ( loc1 ) ; }",
        "int function ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; int loc1 = arg1. size ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { int loc3 = arg1. get ( loc2 ) ; arg0. set ( loc2, arg0. get ( loc2 ) - loc3 ) ; } return loc0 ; }",
        "double function ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "double function ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0 += derivative ( loc2, arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "double function ( List < T > arg0, List < T > arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "double function ( List arg0, List arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "double function ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; return loc0 ; }",
        "List < Image > function ( List < Image > arg0, Image arg1 ) { List < Image > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { BufferedImage loc2 = arg1. getImage ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < BufferedImage > function ( List < BufferedImage > arg0 ) { List < BufferedImage > loc0 = new ArrayList < BufferedImage > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { BufferedImage loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Image > function ( List < Image > arg0, Image arg1 ) { List < Image > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { BufferedImage loc2 = arg1. getImage ( loc1 ) ; loc0. add ( new Image ( loc2 ) ) ; } return loc0 ; }",
        "List < Image > function ( List < Image > arg0, Image arg1 ) { List < Image > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { Image loc2 = arg1. getImage ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Image > function ( List < Image > arg0, Image arg1 ) { List < Image > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { BufferedImage loc2 = arg1. getImage ( loc1 ) ; loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Returns the derivative of a list of integers.",
        "Get the derivative of a list of images.",
        "Get the derivative of a list of integers.",
        "Returns the derivative of a list of images.",
        "Derivative of a list of images."
      ],
      "output": [
        "public static List < Integer > derivative ( List < Integer > arg0, List < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Integer > derivative ( List < Integer > arg0, List < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg1. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Integer > derivative ( List < Integer > arg0, List < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = arg1. size ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0. add ( arg1. get ( loc2 ) ) ; } return loc0 ; }",
        "public static List < Integer > derivative ( List < Integer > arg0, List < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = arg1. size ( ) ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0. add ( arg1. get ( loc2 ) ) ; } return loc0 ; }",
        "public static int derivative ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc1 ) % loc2 ) ; } return arg0. get ( loc0 ) ; }",
        "public static double derivative ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static double derivative ( List < T > arg0, List < T > arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static double derivative ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; return loc0 ; }",
        "public static double derivative ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0 += derivative ( loc2, arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static double derivative ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static int derivative ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc1 ) % loc2 ) ; } return arg0. get ( loc0 ) ; }",
        "public static int derivative ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc1 ) % loc2 ) ; } return loc0 ; }",
        "public static int derivative ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc1 ) % loc2 ) ; } return arg0. size ( ) ; }",
        "public static int derivative ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; arg0. set ( loc1, arg0. get ( loc1 ) % loc2 ) ; } return arg0. get ( loc1 ) ; }",
        "public static int derivative ( List < Integer > arg0, List < Integer > arg1 ) { int loc0 = arg0. size ( ) ; int loc1 = arg1. size ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { int loc3 = arg1. get ( loc2 ) ; arg0. set ( loc2, arg0. get ( loc2 ) - loc3 ) ; } return loc0 ; }",
        "public static double derivative ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static double derivative ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0 += derivative ( loc2, arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static double derivative ( List < T > arg0, List < T > arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static double derivative ( List arg0, List arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static double derivative ( List < T > arg0, List < T > arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0 += derivative ( arg0. get ( loc1 ), arg1. get ( loc1 ) ) ; return loc0 ; }",
        "public static List < Image > derivative ( List < Image > arg0, Image arg1 ) { List < Image > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { BufferedImage loc2 = arg1. getImage ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < BufferedImage > derivative ( List < BufferedImage > arg0 ) { List < BufferedImage > loc0 = new ArrayList < BufferedImage > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { BufferedImage loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Image > derivative ( List < Image > arg0, Image arg1 ) { List < Image > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { BufferedImage loc2 = arg1. getImage ( loc1 ) ; loc0. add ( new Image ( loc2 ) ) ; } return loc0 ; }",
        "public static List < Image > derivative ( List < Image > arg0, Image arg1 ) { List < Image > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { Image loc2 = arg1. getImage ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Image > derivative ( List < Image > arg0, Image arg1 ) { List < Image > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { BufferedImage loc2 = arg1. getImage ( loc1 ) ; loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }"
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3); \n}",
      "target": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2) \n        return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}",
      "function range": "17,5-23,5",
      "raw_output": [
        "Fibfib function ( int arg0 ) { return new Fibfib ( arg0 ) ; }",
        "FibFib function ( int arg0 ) { return new FibFib ( arg0 ) ; }",
        "Fibfib < T > function ( int arg0 ) { return new Fibfib < T > ( arg0 ) ; }",
        "Fibfib < T > function ( final int arg0 ) { return new Fibfib < T > ( arg0 ) ; }",
        "FibFib function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new FibFib ( arg0 ) ; }",
        "FibFib function ( int arg0 ) { return new FibFib ( arg0 ) ; }",
        "Fibfib function ( int arg0 ) { return new Fibfib ( arg0 ) ; }",
        "Fibfib < T > function ( int arg0 ) { return new Fibfib < T > ( arg0 ) ; }",
        "Fibfib < T > function ( int arg0 ) { return Fibfib. of ( arg0 ) ; }",
        "Fibfib < T > function ( final int arg0 ) { return new Fibfib < T > ( arg0 ) ; }",
        "float function ( int arg0 ) { float loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Fibfib. fib ( ( char ) arg0 ) ; } return loc0 ; }",
        "float function ( int arg0 ) { float loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Fib. fib ( ( char ) arg0 ) ; } return loc0 ; }",
        "float function ( int arg0 ) { float loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Fib. fib ( ( char ) arg0 ) ; } return loc0 ; }",
        "float function ( int arg0 ) { float loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Fibfib. fib ( ( char ) arg0 ) ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibfib ( arg0 - 1 ) ; }",
        "R function ( T arg0 ) { R loc0 = ( R ) arg0 ; return new Fib ( loc0 ) ; }",
        "R function ( N arg0 ) { R loc0 = ( R ) arg0 ; return new Fib ( loc0 ) ; }",
        "R function ( Fib arg0 ) { R loc0 = ( R ) arg0 ; return new Fib ( loc0 ) ; }",
        "Fib function ( N arg0 ) { return new Fib ( arg0 ) ; }",
        "R function ( Fib arg0 ) { R loc0 = arg0. fib ( ) ; return new Fib ( loc0 ) ; }",
        "Fibfib function ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return Fibfib ( 1, arg0 ) ; }",
        "Fibfib function ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return Fibfib. of ( arg0 - 1 ) ; }",
        "Fibfib function ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return Fibfib. of ( arg0 ) ; }",
        "Fibfib function ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Fibfib ( 1, arg0 ) ; }",
        "Fibfib function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibfib ( 1, arg0 ) ; }"
      ],
      "mid_translation": [
        "Fibfib of the specified number of tokens.",
        "Fibfib of the given number of tokens.",
        "Fibfib of a number of tokens.",
        "fibfib of n",
        "Fibfib of the specified number of terms."
      ],
      "output": [
        "public static Fibfib fibfib ( int arg0 ) { return new Fibfib ( arg0 ) ; }",
        "public static FibFib fibfib ( int arg0 ) { return new FibFib ( arg0 ) ; }",
        "public static Fibfib < T > fibfib ( int arg0 ) { return new Fibfib < T > ( arg0 ) ; }",
        "public static Fibfib < T > fibfib ( final int arg0 ) { return new Fibfib < T > ( arg0 ) ; }",
        "public static FibFib fibfib ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new FibFib ( arg0 ) ; }",
        "public static FibFib fibfib ( int arg0 ) { return new FibFib ( arg0 ) ; }",
        "public static Fibfib fibfib ( int arg0 ) { return new Fibfib ( arg0 ) ; }",
        "public static Fibfib < T > fibfib ( int arg0 ) { return new Fibfib < T > ( arg0 ) ; }",
        "public static Fibfib < T > fibfib ( int arg0 ) { return Fibfib. of ( arg0 ) ; }",
        "public static Fibfib < T > fibfib ( final int arg0 ) { return new Fibfib < T > ( arg0 ) ; }",
        "public static float fibfib ( int arg0 ) { float loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Fibfib. fib ( ( char ) arg0 ) ; } return loc0 ; }",
        "public static float fibfib ( int arg0 ) { float loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Fib. fib ( ( char ) arg0 ) ; } return loc0 ; }",
        "public static float fibfib ( int arg0 ) { float loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Fib. fib ( ( char ) arg0 ) ; } return loc0 ; }",
        "public static float fibfib ( int arg0 ) { float loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Fibfib. fib ( ( char ) arg0 ) ; } return loc0 ; }",
        "public static int fibfib ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibfib ( arg0 - 1 ) ; }",
        "public static R fibfib ( T arg0 ) { R loc0 = ( R ) arg0 ; return new Fib ( loc0 ) ; }",
        "public static R fibfib ( N arg0 ) { R loc0 = ( R ) arg0 ; return new Fib ( loc0 ) ; }",
        "public static R fibfib ( Fib arg0 ) { R loc0 = ( R ) arg0 ; return new Fib ( loc0 ) ; }",
        "public static Fib fibfib ( N arg0 ) { return new Fib ( arg0 ) ; }",
        "public static R fibfib ( Fib arg0 ) { R loc0 = arg0. fib ( ) ; return new Fib ( loc0 ) ; }",
        "public static Fibfib fibfib ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return Fibfib ( 1, arg0 ) ; }",
        "public static Fibfib fibfib ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return Fibfib. of ( arg0 - 1 ) ; }",
        "public static Fibfib fibfib ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return Fibfib. of ( arg0 ) ; }",
        "public static Fibfib fibfib ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Fibfib ( 1, arg0 ) ; }",
        "public static Fibfib fibfib ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Fibfib ( 1, arg0 ) ; }"
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    if (str_chars[str_chars.length - 1] == 'y') \n        result += 1;\n    return result;\n}",
      "target": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    if (str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y') \n        result += 1;\n    return result;\n}",
      "function range": "15,5-27,5",
      "raw_output": [
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'A' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'a' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'A' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'A' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'a' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'A' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'a' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isDigit ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Count the number of vowels in a string.",
        "Count the number of vowels in a string",
        "Count the number of vowels in a String",
        "Count the number of vowels in the string.",
        "Returns the number of vowels in a string."
      ],
      "output": [
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'A' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'a' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'A' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'A' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'a' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'A' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'a' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isWhitespace ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isDigit ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "public static int vowels_count ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }"
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1); \n    }\n}",
      "target": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift) + s.substring(0, s.length() - shift); \n    }\n}",
      "function range": "12,5-23,5",
      "raw_output": [
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) + arg0 ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg1 ). replace ( \"srini_string\", \"srini_string\" ) ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg1 ) + arg0. substring ( arg1, arg0. length ( ) ) ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) + arg0. substring ( 0, arg1 ) ; }",
        "String function ( String arg0, int arg1 ) { int loc0 = arg0. arg1 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1, 0, loc1. length ) ; }",
        "String function ( String arg0, int arg1 ) { int loc0 = arg0. arg1 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) ; }",
        "String function ( String arg0, int arg1 ) { int loc0 = arg0. arg1 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; return new String ( loc1 ) ; }",
        "String function ( String arg0, int arg1 ) { int loc0 = arg0. arg1 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; return new String ( loc1, 0, loc1. length ) ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) + arg0. substring ( arg1, arg0. length ( ) ) ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) - arg1 ) + arg0. substring ( arg1, arg0. length ( ) ) ; }",
        "String function ( String arg0, int arg1, String arg2 ) { return arg0. substring ( 0, arg0. length ( ) * arg1, arg0. length ( ) * arg1 ) ; }",
        "String function ( String arg0, int arg1, String arg2 ) { return arg0. substring ( 0, arg0. length ( ) - arg1 ) + arg2 ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) + arg0. substring ( arg0. length ( ), arg1 ) ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) - arg1 ) + arg0. substring ( arg1, arg1 ) ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) + arg0. substring ( arg1, arg1 ) ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) - arg1 ) ; }",
        "String function ( String arg0, int arg1, char arg2 ) { return arg0. substring ( 0, arg0. length ( ) * arg1, arg0. length ( ) * arg1 ) ; }",
        "String function ( String arg0, int arg1 ) { return shift ( arg0, 0, arg0. length ( ), arg1 ) ; }",
        "String function ( String arg0, int arg1 ) { char [ ] loc0 = arg0. toCharArray ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } return new String ( loc0 ) ; }",
        "String function ( String arg0, int arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) arg0 = arg0. substring ( 0, loc1 ) + arg1 ; return arg0 ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1, arg0. length ( ) ) ; }",
        "String function ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) - arg1 ) + arg0. substring ( arg1, arg0. length ( ) ) ; }"
      ],
      "mid_translation": [
        "Shift the string x by a number of times.",
        "Shift the string x by the number of characters.",
        "Shift the string x by the specified number of times",
        "Shift the string x by the given number of times",
        "Shift the string x by a number of characters."
      ],
      "output": [
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) + arg0 ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg1 ). replace ( \"srini_string\", \"srini_string\" ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg1 ) + arg0. substring ( arg1, arg0. length ( ) ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) + arg0. substring ( 0, arg1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { int loc0 = arg0. arg1 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1, 0, loc1. length ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { int loc0 = arg0. arg1 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { int loc0 = arg0. arg1 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; return new String ( loc1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { int loc0 = arg0. arg1 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; return new String ( loc1, 0, loc1. length ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) + arg0. substring ( arg1, arg0. length ( ) ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) - arg1 ) + arg0. substring ( arg1, arg0. length ( ) ) ; }",
        "public static String circular_shift ( String arg0, int arg1, String arg2 ) { return arg0. substring ( 0, arg0. length ( ) * arg1, arg0. length ( ) * arg1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1, String arg2 ) { return arg0. substring ( 0, arg0. length ( ) - arg1 ) + arg2 ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) + arg0. substring ( arg0. length ( ), arg1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) - arg1 ) + arg0. substring ( arg1, arg1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1 ) + arg0. substring ( arg1, arg1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) - arg1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1, char arg2 ) { return arg0. substring ( 0, arg0. length ( ) * arg1, arg0. length ( ) * arg1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return shift ( arg0, 0, arg0. length ( ), arg1 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { char [ ] loc0 = arg0. toCharArray ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } return new String ( loc0 ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) arg0 = arg0. substring ( 0, loc1 ) + arg1 ; return arg0 ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) * arg1, arg0. length ( ) ) ; }",
        "public static String circular_shift ( String arg0, int arg1 ) { return arg0. substring ( 0, arg0. length ( ) - arg1 ) + arg0. substring ( arg1, arg0. length ( ) ) ; }"
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ') \n            break; \n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
      "target": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if ('A' <= c && c <= 'Z') \n            result += (int) c; \n    }\n    return result;\n}",
      "function range": "16,5-25,5",
      "raw_output": [
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Character. digit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 + arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 * 10 ) + ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = loc0 + arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 = ( loc0 * 10 ) + ( arg0. charAt ( loc2 ) ) ; } return loc1 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Character. digit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { char loc2 = arg0. charAt ( loc1 ) ; if ( ( loc2 >= '0' ) && ( loc2 <= '9' ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 * 10 ) + ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 + arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 = ( loc0 * 10 ) + ( arg0. charAt ( loc2 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Character. digit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0 = loc0 + loc1 [ loc2 ] ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 + arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0 = ( loc0 + loc1 [ loc2 ] ) % 10 ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { char loc2 = arg0. charAt ( loc1 ) ; if ( ( loc2 >= '0' ) && ( loc2 <= '9' ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Character. digit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 + arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0 = loc0 + loc1 [ loc2 ] ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0 = ( loc0 + loc1 [ loc2 ] ) % 10 ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = loc0 + arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { char loc2 = arg0. charAt ( loc1 ) ; if ( ( loc2 >= '0' ) && ( loc2 <= '9' ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Character. digit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 + arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == '0' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isDigit ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Get the digit sum of a string.",
        "Returns the digit sum of a string.",
        "Returns the digit sum of the string.",
        "Get the digit sum of the string.",
        "Get the digit sum of a String."
      ],
      "output": [
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Character. digit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 + arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 * 10 ) + ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = loc0 + arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 = ( loc0 * 10 ) + ( arg0. charAt ( loc2 ) ) ; } return loc1 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Character. digit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { char loc2 = arg0. charAt ( loc1 ) ; if ( ( loc2 >= '0' ) && ( loc2 <= '9' ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 * 10 ) + ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 + arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 = ( loc0 * 10 ) + ( arg0. charAt ( loc2 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Character. digit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0 = loc0 + loc1 [ loc2 ] ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 + arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0 = ( loc0 + loc1 [ loc2 ] ) % 10 ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { char loc2 = arg0. charAt ( loc1 ) ; if ( ( loc2 >= '0' ) && ( loc2 <= '9' ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Character. digit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 + arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0 = loc0 + loc1 [ loc2 ] ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; char [ ] loc1 = arg0. toCharArray ( ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0 = ( loc0 + loc1 [ loc2 ] ) % 10 ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = loc0 + arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { char loc2 = arg0. charAt ( loc1 ) ; if ( ( loc2 >= '0' ) && ( loc2 <= '9' ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += Character. digit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = ( loc0 + arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == '0' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int digit_sum ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isDigit ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }"
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str); \n        result -= cnt; \n    }\n    return result;\n}",
      "target": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        try { \n            int cnt = Integer.parseInt(str); \n            result -= cnt;\n        } catch (Exception e) {\n            continue;\n        }\n    }\n    return result;\n}",
      "function range": "15,5-23,5",
      "raw_output": [
        "double [ ] function ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "double [ ] function ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = fruit_distribution ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = ( double ) arg0 [ loc1 ] ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "RuitDistribution function ( String arg0 ) { RuitDistribution loc0 = new RuitDistribution ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "RuitDistribution function ( String arg0 ) { RuitDistribution loc0 = new RuitDistribution ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. setFruit ( arg0. charAt ( loc1 ), loc1 ) ; } return loc0 ; }",
        "RuitDistribution function ( String arg0 ) { RuitDistribution loc0 = new RuitDistribution ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. setFruit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "RuitDistribution function ( String arg0 ) { RuitDistribution loc0 = new RuitDistribution ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. setFruit ( new Integer ( arg0. charAt ( loc1 ) ) ) ; } return loc0 ; }",
        "RuitDistribution function ( String arg0 ) { RuitDistribution loc0 = new RuitDistribution ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0. add ( arg0. charAt ( loc1 ) ) ; return loc0 ; }",
        "double function ( String [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += ( arg0 [ loc1 ]. equals ( \"srini_string\" )? 1 : 0 ) ; } return loc0 ; }",
        "double function ( String arg0 ) { double loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += ( arg0. charAt ( loc2 ) << loc2 ) ; } return loc0 ; }",
        "double function ( String arg0 ) { double loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += ( arg0. charAt ( loc2 ) * ( loc2 + 1 ) ) ; } return loc0 ; }",
        "double function ( String arg0 ) { double loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += ( arg0. charAt ( loc2 ) * loc2 ) ; } return loc0 ; }",
        "double function ( String arg0 ) { double loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += ( arg0. charAt ( loc2 ) << loc2 ) ; } return loc0 ; }",
        "double function ( String [ ] arg0 ) { double loc0 = 0 ; int loc1 = arg0. length ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += ( arg0 [ loc2 ]. equals ( \"srini_string\" )? 1 : 0 ) ; } return loc0 ; }",
        "double function ( String arg0 ) { double loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += Math. pow ( arg0. charAt ( loc2 ), 2 ) ; } return loc0 ; }",
        "double function ( String [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += Math. pow ( arg0 [ loc1 ], 2 ) ; } return loc0 ; }",
        "double function ( String [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += fruit ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "double function ( String arg0 ) { double loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += fruit ( arg0. substring ( loc2, loc2 + 1 ) ) ; } return loc0 ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ]. hashCode ( ) ; } return loc0 ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ]. hashCode ( ) ; return loc0 ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Method fruit_distribution",
        "Get the fruit distribution of a string",
        "Calculate the fruit distribution of a string",
        "Compute the fruit distribution of a string",
        "Fruit distribution of a string"
      ],
      "output": [
        "public static double [ ] fruit_distribution ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double [ ] fruit_distribution ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static double [ ] fruit_distribution ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = fruit_distribution ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static double [ ] fruit_distribution ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = ( double ) arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double [ ] fruit_distribution ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "public static RuitDistribution fruit_distribution ( String arg0 ) { RuitDistribution loc0 = new RuitDistribution ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static RuitDistribution fruit_distribution ( String arg0 ) { RuitDistribution loc0 = new RuitDistribution ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. setFruit ( arg0. charAt ( loc1 ), loc1 ) ; } return loc0 ; }",
        "public static RuitDistribution fruit_distribution ( String arg0 ) { RuitDistribution loc0 = new RuitDistribution ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. setFruit ( arg0. charAt ( loc1 ) ) ; } return loc0 ; }",
        "public static RuitDistribution fruit_distribution ( String arg0 ) { RuitDistribution loc0 = new RuitDistribution ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. setFruit ( new Integer ( arg0. charAt ( loc1 ) ) ) ; } return loc0 ; }",
        "public static RuitDistribution fruit_distribution ( String arg0 ) { RuitDistribution loc0 = new RuitDistribution ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0. add ( arg0. charAt ( loc1 ) ) ; return loc0 ; }",
        "public static double fruit_distribution ( String [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += ( arg0 [ loc1 ]. equals ( \"srini_string\" )? 1 : 0 ) ; } return loc0 ; }",
        "public static double fruit_distribution ( String arg0 ) { double loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += ( arg0. charAt ( loc2 ) << loc2 ) ; } return loc0 ; }",
        "public static double fruit_distribution ( String arg0 ) { double loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += ( arg0. charAt ( loc2 ) * ( loc2 + 1 ) ) ; } return loc0 ; }",
        "public static double fruit_distribution ( String arg0 ) { double loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += ( arg0. charAt ( loc2 ) * loc2 ) ; } return loc0 ; }",
        "public static double fruit_distribution ( String arg0 ) { double loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc0 += ( arg0. charAt ( loc2 ) << loc2 ) ; } return loc0 ; }",
        "public static double fruit_distribution ( String [ ] arg0 ) { double loc0 = 0 ; int loc1 = arg0. length ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += ( arg0 [ loc2 ]. equals ( \"srini_string\" )? 1 : 0 ) ; } return loc0 ; }",
        "public static double fruit_distribution ( String arg0 ) { double loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += Math. pow ( arg0. charAt ( loc2 ), 2 ) ; } return loc0 ; }",
        "public static double fruit_distribution ( String [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += Math. pow ( arg0 [ loc1 ], 2 ) ; } return loc0 ; }",
        "public static double fruit_distribution ( String [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += fruit ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static double fruit_distribution ( String arg0 ) { double loc0 = 0 ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 += fruit ( arg0. substring ( loc2, loc2 + 1 ) ) ; } return loc0 ; }",
        "public static int fruit_distribution ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ]. hashCode ( ) ; } return loc0 ; }",
        "public static int fruit_distribution ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 ++ ; } return loc0 ; }",
        "public static int fruit_distribution ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ]. hashCode ( ) ; return loc0 ; }",
        "public static int fruit_distribution ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int fruit_distribution ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }"
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n    int min_even = 0; \n    int index = 0; \n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
      "target": "public static int[] pluck(int[] arr) {\n    int min_even = Integer.MAX_VALUE; \n    int index = -1; \n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
      "function range": "36,5-49,5",
      "raw_output": [
        "List < Integer > function ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "List < Integer > function ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "List < Integer > function ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "List < Integer > function ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = arg0 [ loc2 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = loc0 * arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = pluck ( arg0, loc1, arg1 ) ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1, int arg2 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; loc1 ++ ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = arg0 [ loc2 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = null ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; loc1 ++ ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Get a list of integers from an array of integers.",
        "pluck from an array of integers",
        "pluck returns an array of integers from the array.",
        "pluck from an array of integers.",
        "pluck - returns an array of integers."
      ],
      "output": [
        "public static List < Integer > pluck ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static List < Integer > pluck ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static List < Integer > pluck ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static List < Integer > pluck ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > pluck ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = arg0 [ loc2 ] ; return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = loc0 * arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = pluck ( arg0, loc1, arg1 ) ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1, int arg2 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; loc1 ++ ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = arg0 [ loc2 ] ; return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int [ ] loc0 = null ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; loc1 ++ ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] pluck ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }"
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    int[] frq = new int[max]; \n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1; \n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i; \n    return result;\n}",
      "target": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    int[] frq = new int[max + 1]; \n    for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1; \n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i && frq[i] > 0) result = i; \n    return result;\n}",
      "function range": "13,5-26,5",
      "raw_output": [
        "int function ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { return loc1 ; } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 ) return loc0 ; return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { if ( arg0 == null ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { return loc1 ; } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg1 ) { return loc0 ; } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 ) return loc0 ; return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] < arg1 ) return loc0 ; return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 ) return loc0 ; return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { return loc1 ; } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { if ( arg0 == null ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } else if ( arg0 [ loc0 ] < arg1 ) { return loc0 ; } } return - 1 ; }",
        "Entry function ( List < Entry > arg0, String arg1 ) { Entry loc0 = null ; for ( Entry loc1 : arg0 ) { if ( loc1. getName ( ). equals ( arg1 ) ) { loc0 = loc1 ; break ; } } if ( loc0 == null ) { return null ; } return loc0 ; }",
        "Entry function ( List < Entry > arg0, int arg1 ) { Entry loc0 = null ; for ( Entry loc1 : arg0 ) { if ( loc1. compareTo ( loc1 ) == 0 ) { loc0 = loc1 ; break ; } } if ( loc0 == null ) { return null ; } return loc0 ; }",
        "Entry function ( List < Entry > arg0, String arg1 ) { Entry loc0 = null ; for ( Entry loc1 : arg0 ) { if ( loc1. getName ( ). equals ( arg1 ) ) { loc0 = loc1 ; break ; } } return loc0 ; }",
        "Entry function ( List < Entry > arg0, int arg1 ) { Entry loc0 = null ; for ( Entry loc1 : arg0 ) { if ( loc1. compareTo ( loc1 ) == 0 ) { loc0 = loc1 ; break ; } } return loc0 ; }",
        "Entry function ( List < Entry > arg0, String arg1 ) { Entry loc0 = null ; for ( Entry loc1 : arg0 ) { if ( arg1. equals ( loc1. getKey ( ) ) ) { loc0 = loc1 ; break ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { return loc1 ; } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 ) return loc0 ; return - 1 ; }",
        "int function ( int [ ] arg0, int arg1, Code [ ] arg2 ) { for ( int loc0 = 0 ; loc0 < arg2. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg2 [ loc0 ] ) { return loc0 ; } } return - 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { if ( arg0 == null || arg0. length == 0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } } return - 1 ; }"
      ],
      "mid_translation": [
        "Search for the first occurence of an array of integers.",
        "Search for an array of integers.",
        "Search for the first occurrence of an array of integers.",
        "Search for the first entry in the list.",
        "Search for the first occurence of an array of codes."
      ],
      "output": [
        "public static int search ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { return loc1 ; } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 ) return loc0 ; return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { if ( arg0 == null ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { return loc1 ; } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg1 ) { return loc0 ; } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 ) return loc0 ; return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] < arg1 ) return loc0 ; return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 ) return loc0 ; return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { return loc1 ; } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { if ( arg0 == null ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } else if ( arg0 [ loc0 ] < arg1 ) { return loc0 ; } } return - 1 ; }",
        "public static Entry search ( List < Entry > arg0, String arg1 ) { Entry loc0 = null ; for ( Entry loc1 : arg0 ) { if ( loc1. getName ( ). equals ( arg1 ) ) { loc0 = loc1 ; break ; } } if ( loc0 == null ) { return null ; } return loc0 ; }",
        "public static Entry search ( List < Entry > arg0, int arg1 ) { Entry loc0 = null ; for ( Entry loc1 : arg0 ) { if ( loc1. compareTo ( loc1 ) == 0 ) { loc0 = loc1 ; break ; } } if ( loc0 == null ) { return null ; } return loc0 ; }",
        "public static Entry search ( List < Entry > arg0, String arg1 ) { Entry loc0 = null ; for ( Entry loc1 : arg0 ) { if ( loc1. getName ( ). equals ( arg1 ) ) { loc0 = loc1 ; break ; } } return loc0 ; }",
        "public static Entry search ( List < Entry > arg0, int arg1 ) { Entry loc0 = null ; for ( Entry loc1 : arg0 ) { if ( loc1. compareTo ( loc1 ) == 0 ) { loc0 = loc1 ; break ; } } return loc0 ; }",
        "public static Entry search ( List < Entry > arg0, String arg1 ) { Entry loc0 = null ; for ( Entry loc1 : arg0 ) { if ( arg1. equals ( loc1. getKey ( ) ) ) { loc0 = loc1 ; break ; } } return loc0 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { return loc1 ; } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 ) return loc0 ; return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1, Code [ ] arg2 ) { for ( int loc0 = 0 ; loc0 < arg2. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg2 [ loc0 ] ) { return loc0 ; } } return - 1 ; }",
        "public static int search ( int [ ] arg0, int arg1 ) { if ( arg0 == null || arg0. length == 0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return loc0 ; } } } return - 1 ; }"
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    } \n    return result;\n}",
      "target": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        lst.remove(result.get(result.size() - 1)); \n        switched = (! switched);\n    }\n    return result;\n}",
      "function range": "17,5-29,5",
      "raw_output": [
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0 ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0 ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { public int compare ( Integer arg1, Integer arg2 ) { return arg1 - arg2 ; } } ) ; return loc0 ; }",
        "List < T > function ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "List < E > function ( List < E > arg0, Comparator < E > arg1 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "List < T > function ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "List < T > function ( List < T > arg0, Comparator < T > arg1 ) { return sort ( arg0, 0, arg0. size ( ) - 1, arg1 ) ; }",
        "List < E > function ( List < E > arg0 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new EComparator ( ) ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) { public int compare ( Integer arg1, Integer arg2 ) { return arg1 - arg2 ; } } ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, int arg1, int arg2 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) { public int compare ( Integer arg3, Integer arg4 ) { return arg1 - arg3 ; } } ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, int arg1, int arg2 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) { public int compare ( Integer arg3, Integer arg4 ) { return arg1 - arg4 ; } } ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) { @ Override public int compare ( Integer arg1, Integer arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) { public int compare ( Integer arg1, Integer arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) { @ Override public int compare ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { int loc0 = arg0. loc0 ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { @ Override public int compare ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return arg0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) { @ Override public int compare ( Integer arg1, Integer arg2 ) { return ( arg1 - arg2 ) ; } } ) ; return loc0 ; }",
        "List < E > function ( List < E > arg0, Comparator < E > arg1 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "List < E > function ( List < E > arg0, List < E > arg1 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, ( e1, e2 ) -> e1. compareTo ( e2 ) ) ; return loc0 ; }",
        "List < E > function ( List < E > arg0 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new EComparator ( ) ) ; return loc0 ; }",
        "List < E > function ( List < E > arg0, List < E > arg1 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new EComparator ( ) ) ; return loc0 ; }",
        "List < E > function ( List < E > arg0 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < E > ( ) ) ; return loc0 ; }"
      ],
      "mid_translation": [
        "Method strange_sort_list.",
        "Strange sort list.",
        "strange_sort_list.",
        "Strange sort a list of integers.",
        "Strange sort list list."
      ],
      "output": [
        "public static List < Integer > strange_sort_list ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "public static List < Integer > strange_sort_list ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0 ) ; return loc0 ; }",
        "public static List < Integer > strange_sort_list ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "public static List < Integer > strange_sort_list ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0 ) ; return loc0 ; }",
        "public static int strange_sort_list ( Integer arg1, Integer arg2 ) { return arg1 - arg2 ; } } ) ; return loc0 ; }",
        "public static List < T > strange_sort_list ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "public static List < E > strange_sort_list ( List < E > arg0, Comparator < E > arg1 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "public static List < T > strange_sort_list ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "public static List < T > strange_sort_list ( List < T > arg0, Comparator < T > arg1 ) { return sort ( arg0, 0, arg0. size ( ) - 1, arg1 ) ; }",
        "public static List < E > strange_sort_list ( List < E > arg0 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new EComparator ( ) ) ; return loc0 ; }",
        "public static List < Integer > strange_sort_list ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "public static List < Integer > strange_sort_list ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "public static int strange_sort_list ( Integer arg1, Integer arg2 ) { return arg1 - arg2 ; } } ) ; return loc0 ; }",
        "public static int strange_sort_list ( Integer arg3, Integer arg4 ) { return arg1 - arg3 ; } } ) ; return loc0 ; }",
        "public static int strange_sort_list ( Integer arg3, Integer arg4 ) { return arg1 - arg4 ; } } ) ; return loc0 ; }",
        "public static int strange_sort_list ( Integer arg1, Integer arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return loc0 ; }",
        "public static int strange_sort_list ( Integer arg1, Integer arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return loc0 ; }",
        "public static int strange_sort_list ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return loc0 ; }",
        "public static int strange_sort_list ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return arg0 ; }",
        "public static int strange_sort_list ( Integer arg1, Integer arg2 ) { return ( arg1 - arg2 ) ; } } ) ; return loc0 ; }",
        "public static List < E > strange_sort_list ( List < E > arg0, Comparator < E > arg1 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "public static List < E > strange_sort_list ( List < E > arg0, List < E > arg1 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, ( e1, e2 ) -> e1. compareTo ( e2 ) ) ; return loc0 ; }",
        "public static List < E > strange_sort_list ( List < E > arg0 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new EComparator ( ) ) ; return loc0 ; }",
        "public static List < E > strange_sort_list ( List < E > arg0, List < E > arg1 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new EComparator ( ) ) ; return loc0 ; }",
        "public static List < E > strange_sort_list ( List < E > arg0 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < E > ( ) ) ; return loc0 ; }"
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\npublic static double triangle_area_2(double a, double b, double c) { \n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
      "target": "\npublic static double triangle_area_2(double a, double b, double c) { \n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
      "function range": "16,5-26,5",
      "raw_output": [
        "void function ( float [ ] [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] [ 0 ] ; arg0 [ loc0 ] [ 0 ] = loc1 ; arg0 [ loc0 ] [ 1 ] = loc1 ; } }",
        "void function ( float [ ] [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] [ 0 ] ; arg0 [ loc0 ] [ 0 ] = loc1 ; arg0 [ loc0 ] [ 1 ] = loc1 ; arg0 [ loc0 ] [ 1 ] = loc1 ; } }",
        "void function ( float arg0 [ ], float arg1 [ ] ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] ; arg1 [ loc0 ] = loc1 ; } }",
        "void function ( float [ ] [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] [ 0 ] ; arg0 [ loc0 ] [ 1 ] = loc1 ; arg0 [ loc0 ] [ 0 ] = loc1 ; arg0 [ loc0 ] [ 1 ] = loc1 ; } }",
        "void function ( float [ ] [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] [ 0 ] ; arg0 [ loc0 ] [ 0 ] = loc1 ; arg0 [ loc0 ] [ 0 ] = loc1 ; arg0 [ loc0 ] [ 1 ] = loc1 ; } }",
        "Vec2 function ( Vec2 arg0, Vec2 arg1 ) { Vec2 loc0 = new Vec2 ( ) ; loc0. x = arg0. x ; loc0. y = arg0. y ; loc0. z = arg1. z ; return loc0 ; }",
        "Triangle function ( boolean arg0, boolean arg1 ) { final Triangle loc0 = Triangle. create ( arg0, arg1 ) ; final Triangle loc1 = Triangle. create ( arg0, arg1 ) ; return new Triangle ( loc0, loc1 ) ; }",
        "Triangle function ( int arg0, int arg1, int arg2 ) { Triangle loc0 = new Triangle ( arg0, arg1, arg2 ) ; Triangle loc1 = new Triangle ( arg0, arg1, arg2 ) ; return loc0 ; }",
        "Vec2 function ( Vec2 arg0, Vec2 arg1 ) { Vec2 loc0 = new Vec2 ( ) ; loc0. x = arg0. x ; loc0. y = arg0. y ; loc0. z = arg0. z ; return loc0 ; }",
        "Triangle function ( boolean arg0, boolean arg1 ) { Triangle loc0 = new Triangle ( arg0, arg1 ) ; Triangle loc1 = new Triangle ( arg0, arg1 ) ; return new Triangle ( loc0, loc1 ) ; }",
        "void function ( float arg0 [ ], float arg1 [ ] ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] ; arg1 [ loc0 ] = loc1 ; } }",
        "void function ( float arg0 [ ], float arg1 [ ] ) { for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] ; arg1 [ loc0 ] = loc1 ; } }",
        "Point function ( Point arg0, Point arg1 ) { double loc0 = arg0. x - arg1. x ; double loc1 = arg0. y - arg1. y ; return new Point ( loc0 * loc0, loc1 * loc1 ) ; }",
        "void function ( float arg0 [ ], float arg1 [ ] ) { for ( int loc0 = 0 ; loc0 < 4 ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] ; arg1 [ loc0 ] = loc1 ; } }",
        "R function ( R arg0, R arg1 ) { R loc0 = new R ( arg0. x, arg0. y ) ; R loc1 = new R ( arg1. x, arg1. y ) ; return new R ( loc0, loc1 ) ; }",
        "Triangle function ( final Triangle arg0, final Triangle arg1 ) { final Triangle loc0 = new Triangle ( arg0. x, arg0. y ) ; final Triangle loc1 = new Triangle ( arg1. x, arg1. y ) ; return new Triangle ( loc0, loc1 ) ; }",
        "Triangle function ( final Triangle arg0, final Triangle arg1 ) { final Triangle loc0 = new Triangle ( arg0. x, arg0. y, arg0. z ) ; final Triangle loc1 = new Triangle ( arg1. x, arg1. y ) ; return new Triangle ( loc0, loc1 ) ; }",
        "Triangle function ( final Triangle arg0, final Triangle arg1 ) { final Triangle loc0 = new Triangle ( arg0. x, arg0. y ) ; final Triangle loc1 = new Triangle ( arg1. x, arg1. y ) ; return new Triangle ( loc0. x, loc0. x ) ; }",
        "Vec2 function ( Vec2 arg0, Vec2 arg1 ) { Vec2 loc0 = new Vec2 ( ) ; loc0. x = arg0. x ; loc0. y = arg0. y ; loc0. z = arg1. z ; return loc0 ; }",
        "Vec2 function ( Vec2 arg0, Vec2 arg1 ) { Vec2 loc0 = new Vec2 ( ) ; loc0. x = arg0. x ; loc0. y = arg0. y ; loc0. z = arg0. z ; return loc0 ; }",
        "Point function ( Point arg0, Point arg1 ) { return new Point ( arg0. x + arg1. x, arg0. y + arg1. y ) ; }",
        "Point function ( Point arg0, Point arg1 ) { return new Point ( arg0. x + arg0. x, arg0. y + arg0. y ) ; }",
        "Point function ( Point arg0, Point arg1 ) { double loc0 = arg0. x - arg1. x ; double loc1 = arg0. y - arg1. y ; return new Point ( loc0 * loc0, loc1 * loc1 ) ; }",
        "Point function ( Point arg0 ) { return new Point ( arg0. x, arg0. y ) ; }",
        "Point function ( Point arg0 ) { return new Point ( arg0. x + arg0. x, arg0. y + arg0. y ) ; }"
      ],
      "mid_translation": [
        "Compute the 2 - dimensional triangle area.",
        "Get the 2 - dimensional triangle area.",
        "Triangle area 2.",
        "Get the triangle area of 2 triangle.",
        "Get the triangle area of 2."
      ],
      "output": [
        "\npublic static void triangle_area_2 ( float [ ] [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] [ 0 ] ; arg0 [ loc0 ] [ 0 ] = loc1 ; arg0 [ loc0 ] [ 1 ] = loc1 ; } }",
        "\npublic static void triangle_area_2 ( float [ ] [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] [ 0 ] ; arg0 [ loc0 ] [ 0 ] = loc1 ; arg0 [ loc0 ] [ 1 ] = loc1 ; arg0 [ loc0 ] [ 1 ] = loc1 ; } }",
        "\npublic static void triangle_area_2 ( float arg0 [ ], float arg1 [ ] ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] ; arg1 [ loc0 ] = loc1 ; } }",
        "\npublic static void triangle_area_2 ( float [ ] [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] [ 0 ] ; arg0 [ loc0 ] [ 1 ] = loc1 ; arg0 [ loc0 ] [ 0 ] = loc1 ; arg0 [ loc0 ] [ 1 ] = loc1 ; } }",
        "\npublic static void triangle_area_2 ( float [ ] [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] [ 0 ] ; arg0 [ loc0 ] [ 0 ] = loc1 ; arg0 [ loc0 ] [ 0 ] = loc1 ; arg0 [ loc0 ] [ 1 ] = loc1 ; } }",
        "\npublic static Vec2 triangle_area_2 ( Vec2 arg0, Vec2 arg1 ) { Vec2 loc0 = new Vec2 ( ) ; loc0. x = arg0. x ; loc0. y = arg0. y ; loc0. z = arg1. z ; return loc0 ; }",
        "\npublic static Triangle triangle_area_2 ( boolean arg0, boolean arg1 ) { final Triangle loc0 = Triangle. create ( arg0, arg1 ) ; final Triangle loc1 = Triangle. create ( arg0, arg1 ) ; return new Triangle ( loc0, loc1 ) ; }",
        "\npublic static Triangle triangle_area_2 ( int arg0, int arg1, int arg2 ) { Triangle loc0 = new Triangle ( arg0, arg1, arg2 ) ; Triangle loc1 = new Triangle ( arg0, arg1, arg2 ) ; return loc0 ; }",
        "\npublic static Vec2 triangle_area_2 ( Vec2 arg0, Vec2 arg1 ) { Vec2 loc0 = new Vec2 ( ) ; loc0. x = arg0. x ; loc0. y = arg0. y ; loc0. z = arg0. z ; return loc0 ; }",
        "\npublic static Triangle triangle_area_2 ( boolean arg0, boolean arg1 ) { Triangle loc0 = new Triangle ( arg0, arg1 ) ; Triangle loc1 = new Triangle ( arg0, arg1 ) ; return new Triangle ( loc0, loc1 ) ; }",
        "\npublic static void triangle_area_2 ( float arg0 [ ], float arg1 [ ] ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] ; arg1 [ loc0 ] = loc1 ; } }",
        "\npublic static void triangle_area_2 ( float arg0 [ ], float arg1 [ ] ) { for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] ; arg1 [ loc0 ] = loc1 ; } }",
        "\npublic static Point triangle_area_2 ( Point arg0, Point arg1 ) { double loc0 = arg0. x - arg1. x ; double loc1 = arg0. y - arg1. y ; return new Point ( loc0 * loc0, loc1 * loc1 ) ; }",
        "\npublic static void triangle_area_2 ( float arg0 [ ], float arg1 [ ] ) { for ( int loc0 = 0 ; loc0 < 4 ; loc0 ++ ) { float loc1 = arg0 [ loc0 ] ; arg1 [ loc0 ] = loc1 ; } }",
        "\npublic static R triangle_area_2 ( R arg0, R arg1 ) { R loc0 = new R ( arg0. x, arg0. y ) ; R loc1 = new R ( arg1. x, arg1. y ) ; return new R ( loc0, loc1 ) ; }",
        "\npublic static Triangle triangle_area_2 ( final Triangle arg0, final Triangle arg1 ) { final Triangle loc0 = new Triangle ( arg0. x, arg0. y ) ; final Triangle loc1 = new Triangle ( arg1. x, arg1. y ) ; return new Triangle ( loc0, loc1 ) ; }",
        "\npublic static Triangle triangle_area_2 ( final Triangle arg0, final Triangle arg1 ) { final Triangle loc0 = new Triangle ( arg0. x, arg0. y, arg0. z ) ; final Triangle loc1 = new Triangle ( arg1. x, arg1. y ) ; return new Triangle ( loc0, loc1 ) ; }",
        "\npublic static Triangle triangle_area_2 ( final Triangle arg0, final Triangle arg1 ) { final Triangle loc0 = new Triangle ( arg0. x, arg0. y ) ; final Triangle loc1 = new Triangle ( arg1. x, arg1. y ) ; return new Triangle ( loc0. x, loc0. x ) ; }",
        "\npublic static Vec2 triangle_area_2 ( Vec2 arg0, Vec2 arg1 ) { Vec2 loc0 = new Vec2 ( ) ; loc0. x = arg0. x ; loc0. y = arg0. y ; loc0. z = arg1. z ; return loc0 ; }",
        "\npublic static Vec2 triangle_area_2 ( Vec2 arg0, Vec2 arg1 ) { Vec2 loc0 = new Vec2 ( ) ; loc0. x = arg0. x ; loc0. y = arg0. y ; loc0. z = arg0. z ; return loc0 ; }",
        "\npublic static Point triangle_area_2 ( Point arg0, Point arg1 ) { return new Point ( arg0. x + arg1. x, arg0. y + arg1. y ) ; }",
        "\npublic static Point triangle_area_2 ( Point arg0, Point arg1 ) { return new Point ( arg0. x + arg0. x, arg0. y + arg0. y ) ; }",
        "\npublic static Point triangle_area_2 ( Point arg0, Point arg1 ) { double loc0 = arg0. x - arg1. x ; double loc1 = arg0. y - arg1. y ; return new Point ( loc0 * loc0, loc1 * loc1 ) ; }",
        "\npublic static Point triangle_area_2 ( Point arg0 ) { return new Point ( arg0. x, arg0. y ) ; }",
        "\npublic static Point triangle_area_2 ( Point arg0 ) { return new Point ( arg0. x + arg0. x, arg0. y + arg0. y ) ; }"
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    } \n    return true;\n}",
      "target": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n        i += 1; \n        j -= 1;\n    }\n    return true;\n}",
      "function range": "20,5-34,5",
      "raw_output": [
        "boolean function ( T arg0, T arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( T arg0, T arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( T arg0, T arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return false ; } else { return true ; } }",
        "boolean function ( T arg0, T arg1 ) { if ( arg0 == arg1 ) { return true ; } if ( arg0 == arg1 ) { return true ; } return false ; }",
        "boolean function ( T arg0, T1 arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( T [ ] arg0, T [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( T [ ] arg0, T [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; } return false ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( T [ ] arg0, T [ ] arg1 ) { if ( arg0. length!= arg1. length ) { return false ; } for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) { return true ; } } return false ; }",
        "boolean function ( T [ ] arg0, T [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; } return false ; }",
        "boolean function ( T [ ] arg0, T [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; } return false ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; return false ; }",
        "boolean function ( float [ ] arg0, float [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; return false ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0, Comparable [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0, Comparable [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; return false ; }",
        "boolean function ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; return false ; }"
      ],
      "mid_translation": [
        "will_it_fly returns true if q is the same as w.",
        "will_it_fly returns true if the array q is the same as the array w.",
        "will_it_fly returns true if the array q is the same as w.",
        "will_it_fly This returns true if the array q is the same as w.",
        "will_it_fly This method returns true if the array q is the same as w."
      ],
      "output": [
        "public static boolean will_it_fly ( T arg0, T arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean will_it_fly ( T arg0, T arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean will_it_fly ( T arg0, T arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return false ; } else { return true ; } }",
        "public static boolean will_it_fly ( T arg0, T arg1 ) { if ( arg0 == arg1 ) { return true ; } if ( arg0 == arg1 ) { return true ; } return false ; }",
        "public static boolean will_it_fly ( T arg0, T1 arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean will_it_fly ( T [ ] arg0, T [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( T [ ] arg0, T [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; } return false ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( T [ ] arg0, T [ ] arg1 ) { if ( arg0. length!= arg1. length ) { return false ; } for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) { return true ; } } return false ; }",
        "public static boolean will_it_fly ( T [ ] arg0, T [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; } return false ; }",
        "public static boolean will_it_fly ( T [ ] arg0, T [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; } return false ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; return false ; }",
        "public static boolean will_it_fly ( float [ ] arg0, float [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; return false ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( Comparable [ ] arg0, Comparable [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return false ; return true ; }",
        "public static boolean will_it_fly ( Comparable [ ] arg0, Comparable [ ] arg1 ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; return false ; }",
        "public static boolean will_it_fly ( int arg0 [ ], int arg1 [ ] ) { if ( arg0. length!= arg1. length ) return false ; for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; return false ; }"
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) { \n        if (arr[i] != arr[arr.length - i]) \n            result += 1;\n    }\n    return result;\n}",
      "target": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length / 2; i += 1) { \n        if (arr[i] != arr[arr.length - i - 1]) \n            result += 1;\n    }\n    return result;\n}",
      "function range": "13,5-21,5",
      "raw_output": [
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "T function ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return arg0 [ loc0 ] ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "T function ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "Change function ( Change [ ] arg0 ) { Change loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "T function ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "T function ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "Change function ( Change [ ] arg0 ) { Change loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "Change function ( Change [ ] arg0 ) { Change loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } if ( loc0 == null ) { return null ; } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "Change function ( Change [ ] arg0 ) { Change loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return arg0 [ loc0 ] ; }",
        "T function ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return arg0 [ loc1 ] ; }",
        "T function ( T [ ] arg0, Class < T > arg1 ) { T loc0 = ( T ) arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg1. isInstance ( arg0 [ loc1 ] ) ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "T function ( T [ ] arg0, Class < T > arg1 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc0 ; } } return loc0 ; }",
        "T function ( T [ ] arg0 ) { T loc0 = ( T ) arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc0 ; } } return loc0 ; }",
        "T function ( T [ ] arg0, Class < T > arg1 ) { T loc0 = ( T ) arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "T function ( T [ ] arg0, Class < T > arg1 ) { T loc0 = ( T ) arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Returns the smallest change in the array.",
        "Returns the smallest change in an array.",
        "Get the smallest change in an array.",
        "Get the smallest change in the array.",
        "Returns the smallest change of the array."
      ],
      "output": [
        "public static double smallest_change ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static T smallest_change ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static double smallest_change ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return arg0 [ loc0 ] ; }",
        "public static double smallest_change ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static T smallest_change ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static Change smallest_change ( Change [ ] arg0 ) { Change loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static T smallest_change ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static double smallest_change ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static double smallest_change ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static T smallest_change ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static Change smallest_change ( Change [ ] arg0 ) { Change loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static Change smallest_change ( Change [ ] arg0 ) { Change loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } if ( loc0 == null ) { return null ; } return loc0 ; }",
        "public static double smallest_change ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static double smallest_change ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static Change smallest_change ( Change [ ] arg0 ) { Change loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static double smallest_change ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static double smallest_change ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static double smallest_change ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return arg0 [ loc0 ] ; }",
        "public static T smallest_change ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static double smallest_change ( double [ ] arg0 ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return arg0 [ loc1 ] ; }",
        "public static T smallest_change ( T [ ] arg0, Class < T > arg1 ) { T loc0 = ( T ) arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg1. isInstance ( arg0 [ loc1 ] ) ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static T smallest_change ( T [ ] arg0, Class < T > arg1 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc0 ; } } return loc0 ; }",
        "public static T smallest_change ( T [ ] arg0 ) { T loc0 = ( T ) arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc0 ; } } return loc0 ; }",
        "public static T smallest_change ( T [ ] arg0, Class < T > arg1 ) { T loc0 = ( T ) arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static T smallest_change ( T [ ] arg0, Class < T > arg1 ) { T loc0 = ( T ) arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }"
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst1) \n        l2 = st.length(); \n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
      "target": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2) \n        l2 += st.length(); \n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
      "function range": "18,5-29,5",
      "raw_output": [
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String [ ] arg0, String [ ] arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( arg1 [ loc1 ] ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc2 ) ) ) { loc0 += loc2 ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 += loc1 ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg1. charAt ( loc2 )!= arg0. charAt ( loc2 ) ) { loc0 += loc1 ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. charAt ( loc1 )!= arg0. charAt ( loc1 ) ) { loc0 += arg1. charAt ( loc1 ) ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg1. charAt ( loc1 ) ; } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 += loc1 ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. charAt ( loc1 )!= arg0. charAt ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!= arg1. charAt ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. charAt ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "long function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return 1 ; } else if ( arg0. equals ( arg1 ) ) { return 0 ; } else if ( arg1. equals ( arg0 ) ) { return 1 ; } else if ( arg1. equals ( arg1 ) ) { return 1 ; } else { return 0 ; } }",
        "int function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return 1 ; } else if ( arg0. equals ( arg1 ) ) { return 2 ; } else if ( arg1. equals ( arg0 ) ) { return 3 ; } else if ( arg1. equals ( arg1 ) ) { return 4 ; } else { return 0 ; } }",
        "long function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return 1 ; } else if ( arg0. equals ( arg1 ) ) { return 0 ; } else if ( arg1. equals ( arg0 ) ) { return 1 ; } else if ( arg1. equals ( arg1 ) ) { return 1 ; } return 0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg1. equals ( arg0. charAt ( loc2 ) ) ) { loc0 += loc1 ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return 1 ; } else if ( arg0. equals ( arg1 ) ) { return - 1 ; } else if ( arg1. equals ( arg0 ) ) { return 1 ; } else { return 0 ; } }",
        "int function ( List < String > arg0, List < String > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( arg1. get ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0, List < String > arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. equals ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0, List < String > arg1 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. equals ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List arg0, List arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( arg1. get ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List arg0, List arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( arg1. get ( loc1 ) ) ) { loc0 += loc1 ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Returns the total match of two sets of strings.",
        "Calculate the total match of two sets of strings.",
        "Calculate the total match between two sets of strings.",
        "Returns the total match of two sets of tokens.",
        "Returns the total match of two lists of strings."
      ],
      "output": [
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( String [ ] arg0, String [ ] arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( arg1 [ loc1 ] ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc2 ) ) ) { loc0 += loc2 ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 += loc1 ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg1. charAt ( loc2 )!= arg0. charAt ( loc2 ) ) { loc0 += loc1 ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. charAt ( loc1 )!= arg0. charAt ( loc1 ) ) { loc0 += arg1. charAt ( loc1 ) ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg1. charAt ( loc1 ) ; } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 += loc1 ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. charAt ( loc1 )!= arg0. charAt ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 )!= arg1. charAt ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. charAt ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. charAt ( loc1 ) == arg0. charAt ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static long total_match ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return 1 ; } else if ( arg0. equals ( arg1 ) ) { return 0 ; } else if ( arg1. equals ( arg0 ) ) { return 1 ; } else if ( arg1. equals ( arg1 ) ) { return 1 ; } else { return 0 ; } }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return 1 ; } else if ( arg0. equals ( arg1 ) ) { return 2 ; } else if ( arg1. equals ( arg0 ) ) { return 3 ; } else if ( arg1. equals ( arg1 ) ) { return 4 ; } else { return 0 ; } }",
        "public static long total_match ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return 1 ; } else if ( arg0. equals ( arg1 ) ) { return 0 ; } else if ( arg1. equals ( arg0 ) ) { return 1 ; } else if ( arg1. equals ( arg1 ) ) { return 1 ; } return 0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg1. equals ( arg0. charAt ( loc2 ) ) ) { loc0 += loc1 ; } } return loc0 ; }",
        "public static int total_match ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return 1 ; } else if ( arg0. equals ( arg1 ) ) { return - 1 ; } else if ( arg1. equals ( arg0 ) ) { return 1 ; } else { return 0 ; } }",
        "public static int total_match ( List < String > arg0, List < String > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( arg1. get ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( List < String > arg0, List < String > arg1 ) { if ( arg0 == null || arg1 == null ) { return 0 ; } int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. equals ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( List < String > arg0, List < String > arg1 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. equals ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( List arg0, List arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( arg1. get ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int total_match ( List arg0, List arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( arg1. get ( loc1 ) ) ) { loc0 += loc1 ; } } return loc0 ; }"
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) { \n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "target": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue; \n            for (int k = j; k < a; k += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "19,5-31,5",
      "raw_output": [
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 * arg1 ) ; double loc1 = ( double ) ( arg1 * arg1 ) ; double loc2 = ( loc0 * arg1 ) ; double loc3 = ( loc0 * arg1 ) / ( loc1 * arg1 ) ; return ( loc2 == loc3 ) ; }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return false ; } else { return true ; } }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = ( double ) arg0 * arg1 ; double loc1 = ( double ) ( arg1 / arg0 ) ; double loc2 = ( double ) ( arg1 % arg1 ) ; return ( loc0 * loc1 == loc2 ) ; }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 || arg1 == 1.0 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = arg1 / ( loc0 * arg1 ) ; double loc2 = arg1 / ( loc0 * arg1 ) ; double loc3 = arg1 / ( loc0 * arg1 ) ; double loc4 = arg1 / ( loc0 * arg1 ) ; double loc5 = arg1 / ( loc0 * arg1 ) ; return ( loc1 * arg1 ) == loc3 ; }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = arg1 / ( loc0 * arg1 ) ; double loc2 = ( loc0 * arg1 ) ; double loc3 = ( loc0 * arg1 ) ; double loc4 = ( loc0 * arg1 ) / ( loc1 * arg1 ) ; return ( loc4 % loc3 == 0.0 ) ; }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = arg1 / ( loc0 * arg1 ) ; double loc2 = arg1 / ( loc0 * arg1 ) ; double loc3 = arg1 / ( loc0 * arg1 ) ; double loc4 = arg1 / ( loc0 * arg1 ) ; double loc5 = arg1 / ( loc0 * arg1 ) ; return ( loc1 * arg1 ) == ( loc2 * arg1 ) ; }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 || arg1 == 1.0 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == 0.0 && arg1 == 0.0 ) return true ; if ( arg0 == 1.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 ) return true ; return false ; }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = ( double ) arg0 * arg1 ; double loc1 = ( double ) ( arg1 / arg0 ) ; double loc2 = ( double ) ( arg1 % arg1 ) ; return ( loc0 * loc1 == loc2 ) ; }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 * arg1 ) ; double loc1 = ( double ) ( arg1 * arg1 ) ; double loc2 = ( loc0 * arg1 ) ; double loc3 = ( loc1 * arg1 ) ; return ( loc2 == loc3 ) ; }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = ( ( double ) arg0 ) % ( ( double ) arg1 ) ; double loc2 = ( ( double ) arg1 ) / ( ( double ) arg1 ) ; return ( loc0 * loc1 == loc2 ) ; }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = ( ( double ) arg0 ) % ( ( double ) arg1 ) ; double loc2 = ( ( double ) arg1 ) ; double loc3 = ( ( double ) arg1 ) / ( loc0 * loc1 ) ; return ( loc2 == loc3 ) ; }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = ( ( double ) arg0 ) % ( ( double ) arg1 ) ; double loc2 = ( ( double ) arg1 ) ; double loc3 = ( ( double ) arg0 ) / ( ( double ) arg1 ) ; return ( ( loc0 * loc1 ) == loc3 ) ; }"
      ],
      "mid_translation": [
        "is_multiply_prime returns true if a is a multiply of 2.",
        "is_multiply_prime returns true if a is a multiplication of 2.",
        "is_multiply_prime returns true if a is a multiply of 2",
        "is_multiply_prime returns true if a is a multiplicative product of 2.",
        "is_multiply_prime This method returns true if a is a multiply of 2."
      ],
      "output": [
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 * arg1 ) ; double loc1 = ( double ) ( arg1 * arg1 ) ; double loc2 = ( loc0 * arg1 ) ; double loc3 = ( loc0 * arg1 ) / ( loc1 * arg1 ) ; return ( loc2 == loc3 ) ; }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return false ; } else { return true ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { double loc0 = ( double ) arg0 * arg1 ; double loc1 = ( double ) ( arg1 / arg0 ) ; double loc2 = ( double ) ( arg1 % arg1 ) ; return ( loc0 * loc1 == loc2 ) ; }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 || arg1 == 1.0 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = arg1 / ( loc0 * arg1 ) ; double loc2 = arg1 / ( loc0 * arg1 ) ; double loc3 = arg1 / ( loc0 * arg1 ) ; double loc4 = arg1 / ( loc0 * arg1 ) ; double loc5 = arg1 / ( loc0 * arg1 ) ; return ( loc1 * arg1 ) == loc3 ; }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = arg1 / ( loc0 * arg1 ) ; double loc2 = ( loc0 * arg1 ) ; double loc3 = ( loc0 * arg1 ) ; double loc4 = ( loc0 * arg1 ) / ( loc1 * arg1 ) ; return ( loc4 % loc3 == 0.0 ) ; }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = arg1 / ( loc0 * arg1 ) ; double loc2 = arg1 / ( loc0 * arg1 ) ; double loc3 = arg1 / ( loc0 * arg1 ) ; double loc4 = arg1 / ( loc0 * arg1 ) ; double loc5 = arg1 / ( loc0 * arg1 ) ; return ( loc1 * arg1 ) == ( loc2 * arg1 ) ; }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 || arg1 == 1.0 ) { return true ; } else { return false ; } }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { if ( arg0 == 0.0 && arg1 == 0.0 ) return true ; if ( arg0 == 1.0 || arg1 == 0.0 || arg1 == 0.0 || arg1 == 1.0 || arg1 == 1.0 ) return true ; return false ; }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { double loc0 = ( double ) arg0 * arg1 ; double loc1 = ( double ) ( arg1 / arg0 ) ; double loc2 = ( double ) ( arg1 % arg1 ) ; return ( loc0 * loc1 == loc2 ) ; }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 * arg1 ) ; double loc1 = ( double ) ( arg1 * arg1 ) ; double loc2 = ( loc0 * arg1 ) ; double loc3 = ( loc1 * arg1 ) ; return ( loc2 == loc3 ) ; }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = ( ( double ) arg0 ) % ( ( double ) arg1 ) ; double loc2 = ( ( double ) arg1 ) / ( ( double ) arg1 ) ; return ( loc0 * loc1 == loc2 ) ; }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = ( ( double ) arg0 ) % ( ( double ) arg1 ) ; double loc2 = ( ( double ) arg1 ) ; double loc3 = ( ( double ) arg1 ) / ( loc0 * loc1 ) ; return ( loc2 == loc3 ) ; }",
        "public static boolean is_multiply_prime ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = ( ( double ) arg0 ) % ( ( double ) arg1 ) ; double loc2 = ( ( double ) arg1 ) ; double loc3 = ( ( double ) arg0 ) / ( ( double ) arg1 ) ; return ( ( loc0 * loc1 ) == loc3 ) ; }"
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n    int power = 1; \n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
      "target": "public static boolean is_simple_power(int x, int n) {\n    if (n == 1) \n        return x == 1;\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
      "function range": "15,5-21,5",
      "raw_output": [
        "boolean function ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "boolean function ( long arg0 ) { return ( ( arg0 & ( arg0 - 1 ) ) == 0 ) ; }",
        "boolean function ( int arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "boolean function ( int arg0 ) { return arg0 == 1 || arg0 == 0 ; }",
        "boolean function ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == arg0 ; }",
        "boolean function ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "boolean function ( int arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "boolean function ( int arg0 ) { return arg0 == 1 || arg0 == 0 ; }",
        "boolean function ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == arg0 ; }",
        "boolean function ( long arg0 ) { return ( ( arg0 & arg0 ) == arg0 ) ; }",
        "boolean function ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "boolean function ( long arg0 ) { return ( ( arg0 & ( arg0 - 1 ) ) == 0 ) ; }",
        "boolean function ( int arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "boolean function ( int arg0 ) { return arg0 == 1 || arg0 == 0 ; }",
        "boolean function ( long arg0 ) { return ( ( arg0 & ( arg0 - 1 ) ) == arg0 ) ; }",
        "boolean function ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "boolean function ( long arg0, int arg1 ) { return ( arg0 >= arg1 ) && ( arg0 < arg1 ) ; }",
        "boolean function ( long arg0, int arg1 ) { return ( ( arg0 & arg1 ) == arg1 ) ; }",
        "boolean function ( long arg0, int arg1 ) { return ( arg0 & arg1 ) == arg1 ; }",
        "boolean function ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == arg0 ; }",
        "boolean function ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "boolean function ( int arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "boolean function ( int arg0 ) { return arg0 == 1 || arg0 == 0 ; }",
        "boolean function ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == arg0 ; }",
        "boolean function ( long arg0 ) { return ( ( arg0 & arg0 ) == arg0 ) ; }"
      ],
      "mid_translation": [
        "Checks if x is a simple power of n.",
        "Check if x is a simple power of n.",
        "Test if x is a simple power of n.",
        "Returns true if x is a power of n.",
        "check if x is a simple power of n."
      ],
      "output": [
        "public static boolean is_simple_power ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( ( arg0 & ( arg0 - 1 ) ) == 0 ) ; }",
        "public static boolean is_simple_power ( int arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "public static boolean is_simple_power ( int arg0 ) { return arg0 == 1 || arg0 == 0 ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == arg0 ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "public static boolean is_simple_power ( int arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "public static boolean is_simple_power ( int arg0 ) { return arg0 == 1 || arg0 == 0 ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == arg0 ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( ( arg0 & arg0 ) == arg0 ) ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( ( arg0 & ( arg0 - 1 ) ) == 0 ) ; }",
        "public static boolean is_simple_power ( int arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "public static boolean is_simple_power ( int arg0 ) { return arg0 == 1 || arg0 == 0 ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( ( arg0 & ( arg0 - 1 ) ) == arg0 ) ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "public static boolean is_simple_power ( long arg0, int arg1 ) { return ( arg0 >= arg1 ) && ( arg0 < arg1 ) ; }",
        "public static boolean is_simple_power ( long arg0, int arg1 ) { return ( ( arg0 & arg1 ) == arg1 ) ; }",
        "public static boolean is_simple_power ( long arg0, int arg1 ) { return ( arg0 & arg1 ) == arg1 ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == arg0 ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "public static boolean is_simple_power ( int arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == 0 ; }",
        "public static boolean is_simple_power ( int arg0 ) { return arg0 == 1 || arg0 == 0 ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( arg0 & ( arg0 - 1 ) ) == arg0 ; }",
        "public static boolean is_simple_power ( long arg0 ) { return ( ( arg0 & arg0 ) == arg0 ) ; }"
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3); \n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
      "target": "public static boolean iscude(int a) {\n    a = Math.abs(a); \n    double root = Math.pow(a, 1./3);\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
      "function range": "18,5-24,5",
      "raw_output": [
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) || \"srini_string\". equals ( arg0 ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) || \"srini_string\". equals ( arg0 ) ) return true ; else return false ; }",
        "boolean function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return true ; } return false ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) || \"srini_string\". equals ( arg0 ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) || \"srini_string\". equals ( arg0 ) ) return true ; else return false ; }",
        "boolean function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return true ; } return false ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0 == null || arg0. length ( ) == 0 ; }",
        "boolean function ( String arg0 ) { return \"srini_string\". equals ( arg0 ) || \"srini_string\". equals ( arg0 ) ; }",
        "boolean function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return true ; } return false ; }",
        "boolean function ( int arg0 ) { return ( arg0 >= 0 ) ; }",
        "boolean function ( int arg0 ) { return ( arg0 > 0 ) ; }",
        "boolean function ( int arg0 ) { if ( arg0 < 0 ) { return false ; } else { return ( arg0 > 0 ) ; } }",
        "boolean function ( int arg0 ) { return ( arg0 < 0 ) ; }",
        "boolean function ( int arg0 ) { if ( arg0 < 0 ) { return false ; } else { return true ; } }",
        "boolean function ( int arg0 ) { if ( ( arg0 < 0 ) || ( arg0 > 0x7f ) ) { return false ; } return true ; }",
        "boolean function ( int arg0 ) { if ( ( arg0 < 0 ) || ( arg0 > 0x7f ) ) return false ; return true ; }",
        "boolean function ( int arg0 ) { if ( arg0 < 0 ) { return false ; } else { return ( arg0 > 0 ) ; } }",
        "boolean function ( int arg0 ) { return ( arg0 % 10 == 0 ) ; }",
        "boolean function ( int arg0 ) { if ( ( arg0 < 0 ) || ( arg0 > 0x7f ) ) { return false ; } else { return true ; } }"
      ],
      "mid_translation": [
        "Checks if a is cude.",
        "Check if a is cude.",
        "Returns true if a is cude.",
        "Checks if an integer is cude.",
        "Checks if the integer is cude."
      ],
      "output": [
        "public static boolean iscude ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean iscude ( String arg0 ) { return arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean iscude ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) || \"srini_string\". equals ( arg0 ) ) return true ; return false ; }",
        "public static boolean iscude ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) || \"srini_string\". equals ( arg0 ) ) return true ; else return false ; }",
        "public static boolean iscude ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return true ; } return false ; }",
        "public static boolean iscude ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean iscude ( String arg0 ) { return arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean iscude ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) || \"srini_string\". equals ( arg0 ) ) return true ; return false ; }",
        "public static boolean iscude ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) || \"srini_string\". equals ( arg0 ) ) return true ; else return false ; }",
        "public static boolean iscude ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return true ; } return false ; }",
        "public static boolean iscude ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean iscude ( String arg0 ) { return arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean iscude ( String arg0 ) { return arg0 == null || arg0. length ( ) == 0 ; }",
        "public static boolean iscude ( String arg0 ) { return \"srini_string\". equals ( arg0 ) || \"srini_string\". equals ( arg0 ) ; }",
        "public static boolean iscude ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return true ; } return false ; }",
        "public static boolean iscude ( int arg0 ) { return ( arg0 >= 0 ) ; }",
        "public static boolean iscude ( int arg0 ) { return ( arg0 > 0 ) ; }",
        "public static boolean iscude ( int arg0 ) { if ( arg0 < 0 ) { return false ; } else { return ( arg0 > 0 ) ; } }",
        "public static boolean iscude ( int arg0 ) { return ( arg0 < 0 ) ; }",
        "public static boolean iscude ( int arg0 ) { if ( arg0 < 0 ) { return false ; } else { return true ; } }",
        "public static boolean iscude ( int arg0 ) { if ( ( arg0 < 0 ) || ( arg0 > 0x7f ) ) { return false ; } return true ; }",
        "public static boolean iscude ( int arg0 ) { if ( ( arg0 < 0 ) || ( arg0 > 0x7f ) ) return false ; return true ; }",
        "public static boolean iscude ( int arg0 ) { if ( arg0 < 0 ) { return false ; } else { return ( arg0 > 0 ) ; } }",
        "public static boolean iscude ( int arg0 ) { return ( arg0 % 10 == 0 ) ; }",
        "public static boolean iscude ( int arg0 ) { if ( ( arg0 < 0 ) || ( arg0 > 0x7f ) ) { return false ; } else { return true ; } }"
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7') \n            result += 1;\n    }\n    return result;\n}",
      "target": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') \n            result += 1;\n    }\n    return result;\n}",
      "function range": "21,5-28,5",
      "raw_output": [
        "int function ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0, loc2 = 4 - arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { loc0 |= ( arg0. charAt ( loc1 ) << 4 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 |= ( arg0. charAt ( loc1 ) << 4 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { loc0 |= ( arg0. charAt ( loc1 ) << 4 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0, loc2 = 4 - arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { loc0 |= ( arg0. charAt ( loc1 ) << 4 ) ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = 4 - arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { loc0 |= ( arg0. charAt ( loc1 ) << 4 ) ; } return loc0 ; }",
        "String function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } return \"srini_string\" ; }",
        "String function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else return \"srini_string\" ; }",
        "String function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else { return arg0 ; } }",
        "int function ( char arg0 ) { return ( ( arg0 >= '0' && arg0 <= '9' ) || ( arg0 >= 'a' && arg0 <= 'f' ) ) ; }",
        "int function ( char arg0 ) { return ( ( arg0 >= '0' && arg0 <= '9' ) || ( arg0 >= 'A' && arg0 <= 'F' ) ) ; }",
        "int function ( char arg0 ) { return ( arg0 >= '0' && arg0 <= '9' )? ( arg0 - '0' ) : ( ( arg0 >= 'A' && arg0 <= 'F' ) ) ; }",
        "int function ( char arg0 ) { return ( ( arg0 >= '0' && arg0 <= '9' ) || ( arg0 >= 'A' && arg0 <= 'F' ) || ( arg0 >= 'a' && arg0 <= 'f' ) ) ; }",
        "int function ( char arg0 ) { return ( ( arg0 >= '0' && arg0 <= '9' ) || ( arg0 >= 'a' && arg0 <= 'f' ) || ( arg0 >= 'A' && arg0 <= 'F' ) ) ; }",
        "String function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } return arg0 ; }",
        "String function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } return \"srini_string\" ; }",
        "String function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else { return \"srini_string\" + arg0 ; } }",
        "String function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) return \"srini_string\" ; if ( \"srini_string\". equals ( arg0 ) ) return \"srini_string\" ; if ( \"srini_string\". equals ( arg0 ) ) return \"srini_string\" ; return \"srini_string\" ; }",
        "int function ( char arg0 ) { if ( '0' <= arg0 && arg0 <= '9' ) return arg0 - '0' ; if ( 'a' <= arg0 && arg0 <= 'f' ) return arg0 - 'a' + 10 ; if ( 'a' <= arg0 && arg0 <= 'f' ) return arg0 - 'a' + 10 ; throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; }",
        "int function ( char arg0 ) { if ( arg0 >= '0' && arg0 <= '9' ) return arg0 - '0' ; if ( arg0 >= 'A' && arg0 <= 'F' ) return arg0 - 'A' + 10 ; if ( arg0 >= 'a' && arg0 <= 'f' ) return arg0 - 'a' + 10 ; throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; }",
        "int function ( char arg0 ) { if ( '0' <= arg0 && arg0 <= '9' ) return arg0 - '0' ; if ( 'a' <= arg0 && arg0 <= 'f' ) return arg0 - 'a' + 10 ; if ( 'b' <= arg0 && arg0 <= 'f' ) return arg0 - 'a' + 10 ; throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; }",
        "int function ( char arg0 ) { if ( arg0 >= '0' && arg0 <= '9' ) return arg0 - '0' ; if ( arg0 >= 'a' && arg0 <= 'f' ) return arg0 - 'a' + 10 ; if ( arg0 >= 'a' && arg0 <= 'f' ) return arg0 - 'a' + 10 ; throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; }",
        "int function ( char arg0 ) { return ( ( arg0 >= '0' && arg0 <= '9' ) || ( arg0 >= 'a' && arg0 <= 'f' ) ) ; }"
      ],
      "mid_translation": [
        "Returns the number of hex digits in a string.",
        "Get the hex key of a string.",
        "Convert a hex number to an integer.",
        "Returns the hex key of a string.",
        "Convert a hex number to an int."
      ],
      "output": [
        "public static int hex_key ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0, loc2 = 4 - arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { loc0 |= ( arg0. charAt ( loc1 ) << 4 ) ; } return loc0 ; }",
        "public static int hex_key ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 |= ( arg0. charAt ( loc1 ) << 4 ) ; } return loc0 ; }",
        "public static int hex_key ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { loc0 |= ( arg0. charAt ( loc1 ) << 4 ) ; } return loc0 ; }",
        "public static int hex_key ( String arg0 ) { if ( arg0 == null ) return 0 ; int loc0 = 0 ; for ( int loc1 = 0, loc2 = 4 - arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { loc0 |= ( arg0. charAt ( loc1 ) << 4 ) ; } return loc0 ; }",
        "public static int hex_key ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = 4 - arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { loc0 |= ( arg0. charAt ( loc1 ) << 4 ) ; } return loc0 ; }",
        "public static String hex_key ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } return \"srini_string\" ; }",
        "public static String hex_key ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String hex_key ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else return \"srini_string\" ; }",
        "public static String hex_key ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String hex_key ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else { return arg0 ; } }",
        "public static int hex_key ( char arg0 ) { return ( ( arg0 >= '0' && arg0 <= '9' ) || ( arg0 >= 'a' && arg0 <= 'f' ) ) ; }",
        "public static int hex_key ( char arg0 ) { return ( ( arg0 >= '0' && arg0 <= '9' ) || ( arg0 >= 'A' && arg0 <= 'F' ) ) ; }",
        "public static int hex_key ( char arg0 ) { return ( arg0 >= '0' && arg0 <= '9' )? ( arg0 - '0' ) : ( ( arg0 >= 'A' && arg0 <= 'F' ) ) ; }",
        "public static int hex_key ( char arg0 ) { return ( ( arg0 >= '0' && arg0 <= '9' ) || ( arg0 >= 'A' && arg0 <= 'F' ) || ( arg0 >= 'a' && arg0 <= 'f' ) ) ; }",
        "public static int hex_key ( char arg0 ) { return ( ( arg0 >= '0' && arg0 <= '9' ) || ( arg0 >= 'a' && arg0 <= 'f' ) || ( arg0 >= 'A' && arg0 <= 'F' ) ) ; }",
        "public static String hex_key ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } return arg0 ; }",
        "public static String hex_key ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String hex_key ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } return \"srini_string\" ; }",
        "public static String hex_key ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else if ( \"srini_string\". equals ( arg0 ) ) { return \"srini_string\" ; } else { return \"srini_string\" + arg0 ; } }",
        "public static String hex_key ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) return \"srini_string\" ; if ( \"srini_string\". equals ( arg0 ) ) return \"srini_string\" ; if ( \"srini_string\". equals ( arg0 ) ) return \"srini_string\" ; return \"srini_string\" ; }",
        "public static int hex_key ( char arg0 ) { if ( '0' <= arg0 && arg0 <= '9' ) return arg0 - '0' ; if ( 'a' <= arg0 && arg0 <= 'f' ) return arg0 - 'a' + 10 ; if ( 'a' <= arg0 && arg0 <= 'f' ) return arg0 - 'a' + 10 ; throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; }",
        "public static int hex_key ( char arg0 ) { if ( arg0 >= '0' && arg0 <= '9' ) return arg0 - '0' ; if ( arg0 >= 'A' && arg0 <= 'F' ) return arg0 - 'A' + 10 ; if ( arg0 >= 'a' && arg0 <= 'f' ) return arg0 - 'a' + 10 ; throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; }",
        "public static int hex_key ( char arg0 ) { if ( '0' <= arg0 && arg0 <= '9' ) return arg0 - '0' ; if ( 'a' <= arg0 && arg0 <= 'f' ) return arg0 - 'a' + 10 ; if ( 'b' <= arg0 && arg0 <= 'f' ) return arg0 - 'a' + 10 ; throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; }",
        "public static int hex_key ( char arg0 ) { if ( arg0 >= '0' && arg0 <= '9' ) return arg0 - '0' ; if ( arg0 >= 'a' && arg0 <= 'f' ) return arg0 - 'a' + 10 ; if ( arg0 >= 'a' && arg0 <= 'f' ) return arg0 - 'a' + 10 ; throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; }",
        "public static int hex_key ( char arg0 ) { return ( ( arg0 >= '0' && arg0 <= '9' ) || ( arg0 >= 'a' && arg0 <= 'f' ) ) ; }"
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n    String result = Integer.toHexString(decimal); \n    return \"db\" + result + \"db\";\n}",
      "target": "public static String decimal_to_binary(int decimal) {\n    String result = Integer.toBinaryString(decimal); \n    return \"db\" + result + \"db\";\n}",
      "function range": "15,5-18,5",
      "raw_output": [
        "byte [ ] function ( String arg0 ) { int loc0 = arg0. length ( ) ; byte [ ] loc1 = new byte [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( byte ) ( arg0. charAt ( loc2 ) << 8 ) ; } return loc1 ; }",
        "byte [ ] function ( String arg0 ) { int loc0 = 0 ; byte [ ] loc1 = new byte [ arg0. length ( ) ] ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc1 [ loc2 ] = ( byte ) arg0. charAt ( loc2 ) ; loc0 ++ ; } return loc1 ; }",
        "byte [ ] function ( String arg0 ) { int loc0 = arg0. length ( ) ; byte [ ] loc1 = new byte [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( byte ) arg0. charAt ( loc2 ) ; } return loc1 ; }",
        "byte [ ] function ( String arg0 ) { byte [ ] loc0 = new byte [ arg0. length ( ) ] ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 [ loc1 ] = ( byte ) arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "byte [ ] function ( String arg0 ) { int loc0 = 0 ; byte [ ] loc1 = new byte [ arg0. length ( ) ] ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc1 [ loc0 ++ ] = ( byte ) arg0. charAt ( loc2 ) ; } return loc1 ; }",
        "BigDecimal function ( BigInteger arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new BigDecimal ( arg0. longValue ( ) ) ; }",
        "BigDecimal function ( String arg0 ) { try { return new BigDecimal ( arg0 ) ; } catch ( NumberFormatException loc0 ) { throw new RuntimeException ( loc0. getMessage ( ) ) ; } }",
        "BigDecimal function ( BigInteger arg0 ) { BigDecimal loc0 = new BigDecimal ( arg0 ) ; return loc0 ; }",
        "BigDecimal function ( String arg0 ) { try { return new BigDecimal ( arg0 ) ; } catch ( NumberFormatException loc0 ) { return new BigDecimal ( arg0 ) ; } }",
        "BigDecimal function ( BigInteger arg0 ) { return new BigDecimal ( arg0 ) ; }",
        "String function ( BigDecimal arg0 ) { return String. format ( \"srini_string\", arg0. intValue ( ) ) ; }",
        "String function ( BigDecimal arg0 ) { if ( arg0 == null ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg0. toString ( ) ) ; return loc0. toString ( ) ; }",
        "String function ( BigDecimal arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg0. toString ( ) ) ; return loc0. toString ( ) ; }",
        "String function ( int arg0 ) { return String. format ( \"srini_string\", arg0 ) ; }",
        "String function ( decimal arg0 ) { return String. format ( \"srini_string\", arg0 ) ; }",
        "String function ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( '0' ) ; } return loc0. toString ( ) ; }",
        "String function ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( ( char ) ( arg0 & 0xFF ) ) ; } return loc0. toString ( ) ; }",
        "String function ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( '0' ) ; } loc0. append ( Integer. toString ( arg0 ) ) ; return loc0. toString ( ) ; }",
        "String function ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. append ( '0' ) ; return loc0. toString ( ) ; }",
        "String function ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( ( char ) ( arg0 / 256d ) ) ; } return loc0. toString ( ) ; }",
        "String function ( int arg0 ) { switch ( arg0 ) { case 10 : return \"srini_string\" ; case 2 : return \"srini_string\" ; case 4 : return \"srini_string\" ; case 8 : return \"srini_string\" ; case 16 : return \"srini_string\" ; case 32 : return \"srini_string\" ; default : return \"srini_string\" ; } }",
        "String function ( int arg0 ) { switch ( arg0 ) { case 10 : return \"srini_string\" ; case 2 : return \"srini_string\" ; case 3 : return \"srini_string\" ; case 4 : return \"srini_string\" ; case 8 : return \"srini_string\" ; case 16 : return \"srini_string\" ; default : return \"srini_string\" ; } }",
        "String function ( int arg0 ) { int loc0 = ( int ) ( arg0 / 256d ) ; byte [ ] loc1 = new byte [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( byte ) ( ( loc2 + 1 ) / 256d ) ; } return new String ( loc1 ) ; }",
        "String function ( int arg0 ) { int loc0 = ( int ) arg0 ; byte [ ] loc1 = new byte [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( byte ) loc2 ; } return new String ( loc1 ) ; }",
        "String function ( int arg0 ) { switch ( arg0 ) { case 10 : return \"srini_string\" ; case 2 : return \"srini_string\" ; case 3 : return \"srini_string\" ; case 4 : return \"srini_string\" ; case 8 : return \"srini_string\" ; default : return \"srini_string\" ; } }"
      ],
      "mid_translation": [
        "Decimal to binary string.",
        "Decimal to binary.",
        "Convert decimal value to binary string.",
        "Convert decimal to binary string.",
        "Convert decimal number to binary string."
      ],
      "output": [
        "public static byte [ ] decimal_to_binary ( String arg0 ) { int loc0 = arg0. length ( ) ; byte [ ] loc1 = new byte [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( byte ) ( arg0. charAt ( loc2 ) << 8 ) ; } return loc1 ; }",
        "public static byte [ ] decimal_to_binary ( String arg0 ) { int loc0 = 0 ; byte [ ] loc1 = new byte [ arg0. length ( ) ] ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc1 [ loc2 ] = ( byte ) arg0. charAt ( loc2 ) ; loc0 ++ ; } return loc1 ; }",
        "public static byte [ ] decimal_to_binary ( String arg0 ) { int loc0 = arg0. length ( ) ; byte [ ] loc1 = new byte [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( byte ) arg0. charAt ( loc2 ) ; } return loc1 ; }",
        "public static byte [ ] decimal_to_binary ( String arg0 ) { byte [ ] loc0 = new byte [ arg0. length ( ) ] ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 [ loc1 ] = ( byte ) arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static byte [ ] decimal_to_binary ( String arg0 ) { int loc0 = 0 ; byte [ ] loc1 = new byte [ arg0. length ( ) ] ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { loc1 [ loc0 ++ ] = ( byte ) arg0. charAt ( loc2 ) ; } return loc1 ; }",
        "public static BigDecimal decimal_to_binary ( BigInteger arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new BigDecimal ( arg0. longValue ( ) ) ; }",
        "public static BigDecimal decimal_to_binary ( String arg0 ) { try { return new BigDecimal ( arg0 ) ; } catch ( NumberFormatException loc0 ) { throw new RuntimeException ( loc0. getMessage ( ) ) ; } }",
        "public static BigDecimal decimal_to_binary ( BigInteger arg0 ) { BigDecimal loc0 = new BigDecimal ( arg0 ) ; return loc0 ; }",
        "public static BigDecimal decimal_to_binary ( String arg0 ) { try { return new BigDecimal ( arg0 ) ; } catch ( NumberFormatException loc0 ) { return new BigDecimal ( arg0 ) ; } }",
        "public static BigDecimal decimal_to_binary ( BigInteger arg0 ) { return new BigDecimal ( arg0 ) ; }",
        "public static String decimal_to_binary ( BigDecimal arg0 ) { return String. format ( \"srini_string\", arg0. intValue ( ) ) ; }",
        "public static String decimal_to_binary ( BigDecimal arg0 ) { if ( arg0 == null ) return \"srini_string\" ; StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg0. toString ( ) ) ; return loc0. toString ( ) ; }",
        "public static String decimal_to_binary ( BigDecimal arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0. append ( \"srini_string\" ) ; loc0. append ( arg0. toString ( ) ) ; return loc0. toString ( ) ; }",
        "public static String decimal_to_binary ( int arg0 ) { return String. format ( \"srini_string\", arg0 ) ; }",
        "public static String decimal_to_binary ( decimal arg0 ) { return String. format ( \"srini_string\", arg0 ) ; }",
        "public static String decimal_to_binary ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( '0' ) ; } return loc0. toString ( ) ; }",
        "public static String decimal_to_binary ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( ( char ) ( arg0 & 0xFF ) ) ; } return loc0. toString ( ) ; }",
        "public static String decimal_to_binary ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( '0' ) ; } loc0. append ( Integer. toString ( arg0 ) ) ; return loc0. toString ( ) ; }",
        "public static String decimal_to_binary ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. append ( '0' ) ; return loc0. toString ( ) ; }",
        "public static String decimal_to_binary ( int arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. append ( ( char ) ( arg0 / 256d ) ) ; } return loc0. toString ( ) ; }",
        "",
        "",
        "public static String decimal_to_binary ( int arg0 ) { int loc0 = ( int ) ( arg0 / 256d ) ; byte [ ] loc1 = new byte [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( byte ) ( ( loc2 + 1 ) / 256d ) ; } return new String ( loc1 ) ; }",
        "public static String decimal_to_binary ( int arg0 ) { int loc0 = ( int ) arg0 ; byte [ ] loc1 = new byte [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( byte ) loc2 ; } return new String ( loc1 ) ; }",
        ""
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2)) \n            return false;\n    }\n    return true;\n}",
      "target": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i + 2) == s.charAt(i)) \n            return false;\n    }\n    return true;\n}",
      "function range": "15,5-23,5",
      "raw_output": [
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" )!= - 1 ; }",
        "boolean function ( String arg0 ) { return arg0. toLowerCase ( ). contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "boolean function ( String arg0 ) { try { ImageDecoder loc0 = new ImageDecoder ( \"srini_string\" ) ; return loc0. decode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { return false ; } }",
        "boolean function ( String arg0 ) { try { ImageDecoder loc0 = new ImageDecoder ( \"srini_string\" ) ; return loc0. decode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { return true ; } }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" )!= - 1 ; }",
        "boolean function ( String arg0 ) { String loc0 = \"srini_string\" ; int loc1 = arg0. compareTo ( \"srini_string\" ) ; if ( loc1 > 0 ) { loc0 = arg0. substring ( 0, loc1 ) ; } return loc0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. toLowerCase ( ). contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "boolean function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return true ; } else { return false ; } }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" )!= - 1 ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" )!= - 1 ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "boolean function ( String arg0 ) { return arg0. toLowerCase ( ). contains ( \"srini_string\" ) ; }"
      ],
      "mid_translation": [
        "is_happy This method returns true if the string is a TIFF file.",
        "is_happy This method returns true if the string is a broken image.",
        "is_happy This method returns true if the string s is a TIFF file.",
        "is_happy This method returns true if the string is a hierarchical image.",
        "is_happy This method returns true if the string is a hierarchical image file."
      ],
      "output": [
        "public static boolean is_happy ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. indexOf ( \"srini_string\" )!= - 1 ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. toLowerCase ( ). contains ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "public static boolean is_happy ( String arg0 ) { try { ImageDecoder loc0 = new ImageDecoder ( \"srini_string\" ) ; return loc0. decode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { return false ; } }",
        "public static boolean is_happy ( String arg0 ) { try { ImageDecoder loc0 = new ImageDecoder ( \"srini_string\" ) ; return loc0. decode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { return true ; } }",
        "public static boolean is_happy ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. indexOf ( \"srini_string\" )!= - 1 ; }",
        "public static boolean is_happy ( String arg0 ) { String loc0 = \"srini_string\" ; int loc1 = arg0. compareTo ( \"srini_string\" ) ; if ( loc1 > 0 ) { loc0 = arg0. substring ( 0, loc1 ) ; } return loc0. equals ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. toLowerCase ( ). contains ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "public static boolean is_happy ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return true ; } else { return false ; } }",
        "public static boolean is_happy ( String arg0 ) { return arg0. indexOf ( \"srini_string\" )!= - 1 ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. indexOf ( \"srini_string\" )!= - 1 ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "public static boolean is_happy ( String arg0 ) { return arg0. toLowerCase ( ). contains ( \"srini_string\" ) ; }"
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3) \n            letter_grade[i] = \"C-\"; \n        else if (gpa > 1.0) \n            letter_grade[i] = \"D+\"; \n        else if (gpa > 1.7) \n            letter_grade[i] = \"C\"; \n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
      "target": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7) \n            letter_grade[i] = \"C\"; \n        else if (gpa > 1.3) \n            letter_grade[i] = \"C-\"; \n        else if (gpa > 1.0) \n            letter_grade[i] = \"D+\"; \n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
      "function range": "26,5-59,5",
      "raw_output": [
        "int function ( String arg0 ) { try { return Integer. parseInt ( arg0 ) ; } catch ( NumberFormatException loc0 ) { Logger. getLogger ( \"srini_string\" ). info ( \"srini_string\" ) ; return 1 ; } }",
        "int function ( int arg0 ) { if ( ( arg0 < 0 ) || ( arg0 > 9 ) ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 ; }",
        "int function ( String arg0 ) { try { return Integer. parseInt ( arg0 ) ; } catch ( NumberFormatException loc0 ) { Logger. getLogger ( \"srini_string\" ). info ( \"srini_string\" ) ; return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 ; }",
        "int function ( String arg0 ) { try { Integer loc0 = Integer. valueOf ( arg0. toUpperCase ( ) ) ; return loc0. compareTo ( \"srini_string\" ) ; } catch ( Exception loc0 ) { return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 < 0 || arg0 > 9 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 ; }",
        "int function ( int arg0 ) { if ( ( arg0 >= 0 && arg0 <= 9 ) || ( arg0 >= 10 ) || ( arg0 >= 12 ) ) { throw new RuntimeException ( \"srini_string\" ) ; } return arg0 ; }",
        "int function ( int arg0 ) { if ( ( arg0 >= 0 ) && ( arg0 <= 9 ) ) { return arg0 - 10 ; } else if ( ( arg0 >= 10 ) && ( arg0 <= 11 ) ) { return 11 ; } else if ( ( arg0 >= 12 ) && ( arg0 <= 14 ) ) { return 13 ; } else if ( ( arg0 >= 7 ) && ( arg0 <= 18 ) ) { return 14 ; } else { return 11 ; } }",
        "int function ( int arg0 ) { if ( ( arg0 >= 0 ) && ( arg0 <= 9 ) ) { return arg0 - 10 ; } else if ( ( arg0 >= 10 ) && ( arg0 <= 12 ) ) { return arg0 - 10 ; } else if ( ( arg0 >= 7 ) && ( arg0 <= 8 ) ) { return arg0 - 10 ; } else { return - 1 ; } }",
        "int function ( int arg0 ) { if ( ( arg0 >= 0 ) && ( arg0 <= 9 ) ) { return arg0 - 10 ; } else if ( ( arg0 >= 10 ) && ( arg0 <= 11 ) ) { return 11 ; } else if ( ( arg0 >= 12 ) && ( arg0 <= 14 ) ) { return 15 ; } else if ( ( arg0 >= 7 ) && ( arg0 <= 18 ) ) { return 14 ; } else { return 31 ; } }",
        "String [ ] function ( double [ ] arg0 ) { String [ ] loc0 = new String [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = ( String ) arg0 [ loc1 ] ; } return loc0 ; }",
        "String [ ] function ( double [ ] arg0 ) { String [ ] loc0 = new String [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "String [ ] function ( double [ ] arg0 ) { int loc0 = arg0. length ; String [ ] loc1 = new String [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = new Integer ( arg0 [ loc2 ] ) ; } return loc1 ; }",
        "String [ ] function ( double [ ] arg0 ) { int loc0 = arg0. length ; String [ ] loc1 = new String [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( String ) arg0 [ loc2 ] ; } return loc1 ; }",
        "String [ ] function ( double [ ] arg0 ) { int loc0 = arg0. length ; String [ ] loc1 = new String [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0 [ loc2 ] ; } return loc1 ; }",
        "double function ( double arg0 ) { double loc0 = arg0 ; double loc1 = ( loc0 + 1 ) / 10 ; double loc2 = ( loc0 + 1 ) / 10 ; double loc3 = ( loc0 + 1 ) / 10 ; double loc4 = ( loc0 + 1 ) / 10 ; double loc5 = ( loc1 + loc2 ) / 10 ; return loc4 ; }",
        "double function ( double arg0 ) { double loc0 = arg0 ; double loc1 = ( loc0 + 1 ) / 10 ; double loc2 = ( loc0 + 1 ) / 10 ; double loc3 = ( loc0 + 1 ) / 10 ; double loc4 = ( loc1 + 1 ) / 10 ; return ( loc2 * loc3 + loc4 ) ; }",
        "double function ( double arg0 ) { double loc0 = arg0 ; double loc1 = ( loc0 + 1 ) / 10 ; double loc2 = ( loc0 + 1 ) / 10 ; double loc3 = ( loc0 + 1 ) / 10 ; double loc4 = ( loc0 + 1 ) / 10 ; double loc5 = ( loc0 + 1 ) / 10 ; return loc4 ; }",
        "double function ( double arg0 ) { double loc0 = arg0 ; double loc1 = ( loc0 + 1 ) / 10 ; double loc2 = ( loc0 + 1 ) / 10 ; double loc3 = ( loc0 + 1 ) / 10 ; double loc4 = ( loc0 + 1 ) / 10 ; double loc5 = ( loc1 + 1 ) / 10 ; return loc2 ; }",
        "double function ( double arg0 ) { double loc0 = arg0 ; double loc1 = ( loc0 + 1 ) / 10 ; double loc2 = ( loc0 + 1 ) / 10 ; double loc3 = ( loc1 + 1 ) / 10 ; double loc4 = ( loc1 + 1 ) / 10 ; return ( loc2 * loc3 + loc4 ) ; }",
        "List < String > function ( double [ ] arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( ( String ) arg0 [ loc1 ] ) ; } return loc0 ; }",
        "List < String > function ( double [ ] arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( ( String ) arg0 [ loc1 ] ) ; } return loc0 ; }",
        "List < String > function ( double [ ] [ ] arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 [ 0 ]. length ; loc1 ++ ) { loc0. add ( ( String ) arg0 [ loc1 ] [ 0 ] ) ; } return loc0 ; }",
        "List < String > function ( double [ ] [ ] arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 [ 0 ]. length ; loc1 ++ ) { loc0. add ( ( String ) arg0 [ loc1 ] [ 0 ] ) ; } return loc0 ; }",
        "List < String > function ( double [ ] [ ] arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( ( String ) arg0 [ loc1 ] [ 0 ] ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Method numerical_letter_grade.",
        "method numerical_letter_grade.",
        "method numerical_letter_grade This method converts a double array of grades to an array of strings.",
        "method numerical_letter_grade",
        "method numerical_letter_grade This method converts a double array of grades to a list of strings."
      ],
      "output": [
        "public static int numerical_letter_grade ( String arg0 ) { try { return Integer. parseInt ( arg0 ) ; } catch ( NumberFormatException loc0 ) { Logger. getLogger ( \"srini_string\" ). info ( \"srini_string\" ) ; return 1 ; } }",
        "public static int numerical_letter_grade ( int arg0 ) { if ( ( arg0 < 0 ) || ( arg0 > 9 ) ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 ; }",
        "public static int numerical_letter_grade ( String arg0 ) { try { return Integer. parseInt ( arg0 ) ; } catch ( NumberFormatException loc0 ) { Logger. getLogger ( \"srini_string\" ). info ( \"srini_string\" ) ; return 0 ; } }",
        "public static int numerical_letter_grade ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 ; }",
        "public static int numerical_letter_grade ( String arg0 ) { try { Integer loc0 = Integer. valueOf ( arg0. toUpperCase ( ) ) ; return loc0. compareTo ( \"srini_string\" ) ; } catch ( Exception loc0 ) { return 0 ; } }",
        "public static int numerical_letter_grade ( int arg0 ) { if ( arg0 < 0 || arg0 > 9 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 ; }",
        "public static int numerical_letter_grade ( int arg0 ) { if ( ( arg0 >= 0 && arg0 <= 9 ) || ( arg0 >= 10 ) || ( arg0 >= 12 ) ) { throw new RuntimeException ( \"srini_string\" ) ; } return arg0 ; }",
        "public static int numerical_letter_grade ( int arg0 ) { if ( ( arg0 >= 0 ) && ( arg0 <= 9 ) ) { return arg0 - 10 ; } else if ( ( arg0 >= 10 ) && ( arg0 <= 11 ) ) { return 11 ; } else if ( ( arg0 >= 12 ) && ( arg0 <= 14 ) ) { return 13 ; } else if ( ( arg0 >= 7 ) && ( arg0 <= 18 ) ) { return 14 ; } else { return 11 ; } }",
        "public static int numerical_letter_grade ( int arg0 ) { if ( ( arg0 >= 0 ) && ( arg0 <= 9 ) ) { return arg0 - 10 ; } else if ( ( arg0 >= 10 ) && ( arg0 <= 12 ) ) { return arg0 - 10 ; } else if ( ( arg0 >= 7 ) && ( arg0 <= 8 ) ) { return arg0 - 10 ; } else { return - 1 ; } }",
        "public static int numerical_letter_grade ( int arg0 ) { if ( ( arg0 >= 0 ) && ( arg0 <= 9 ) ) { return arg0 - 10 ; } else if ( ( arg0 >= 10 ) && ( arg0 <= 11 ) ) { return 11 ; } else if ( ( arg0 >= 12 ) && ( arg0 <= 14 ) ) { return 15 ; } else if ( ( arg0 >= 7 ) && ( arg0 <= 18 ) ) { return 14 ; } else { return 31 ; } }",
        "public static String [ ] numerical_letter_grade ( double [ ] arg0 ) { String [ ] loc0 = new String [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = ( String ) arg0 [ loc1 ] ; } return loc0 ; }",
        "public static String [ ] numerical_letter_grade ( double [ ] arg0 ) { String [ ] loc0 = new String [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static String [ ] numerical_letter_grade ( double [ ] arg0 ) { int loc0 = arg0. length ; String [ ] loc1 = new String [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = new Integer ( arg0 [ loc2 ] ) ; } return loc1 ; }",
        "public static String [ ] numerical_letter_grade ( double [ ] arg0 ) { int loc0 = arg0. length ; String [ ] loc1 = new String [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( String ) arg0 [ loc2 ] ; } return loc1 ; }",
        "public static String [ ] numerical_letter_grade ( double [ ] arg0 ) { int loc0 = arg0. length ; String [ ] loc1 = new String [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0 [ loc2 ] ; } return loc1 ; }",
        "public static double numerical_letter_grade ( double arg0 ) { double loc0 = arg0 ; double loc1 = ( loc0 + 1 ) / 10 ; double loc2 = ( loc0 + 1 ) / 10 ; double loc3 = ( loc0 + 1 ) / 10 ; double loc4 = ( loc0 + 1 ) / 10 ; double loc5 = ( loc1 + loc2 ) / 10 ; return loc4 ; }",
        "public static double numerical_letter_grade ( double arg0 ) { double loc0 = arg0 ; double loc1 = ( loc0 + 1 ) / 10 ; double loc2 = ( loc0 + 1 ) / 10 ; double loc3 = ( loc0 + 1 ) / 10 ; double loc4 = ( loc1 + 1 ) / 10 ; return ( loc2 * loc3 + loc4 ) ; }",
        "public static double numerical_letter_grade ( double arg0 ) { double loc0 = arg0 ; double loc1 = ( loc0 + 1 ) / 10 ; double loc2 = ( loc0 + 1 ) / 10 ; double loc3 = ( loc0 + 1 ) / 10 ; double loc4 = ( loc0 + 1 ) / 10 ; double loc5 = ( loc0 + 1 ) / 10 ; return loc4 ; }",
        "public static double numerical_letter_grade ( double arg0 ) { double loc0 = arg0 ; double loc1 = ( loc0 + 1 ) / 10 ; double loc2 = ( loc0 + 1 ) / 10 ; double loc3 = ( loc0 + 1 ) / 10 ; double loc4 = ( loc0 + 1 ) / 10 ; double loc5 = ( loc1 + 1 ) / 10 ; return loc2 ; }",
        "public static double numerical_letter_grade ( double arg0 ) { double loc0 = arg0 ; double loc1 = ( loc0 + 1 ) / 10 ; double loc2 = ( loc0 + 1 ) / 10 ; double loc3 = ( loc1 + 1 ) / 10 ; double loc4 = ( loc1 + 1 ) / 10 ; return ( loc2 * loc3 + loc4 ) ; }",
        "public static List < String > numerical_letter_grade ( double [ ] arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( ( String ) arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static List < String > numerical_letter_grade ( double [ ] arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( ( String ) arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static List < String > numerical_letter_grade ( double [ ] [ ] arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 [ 0 ]. length ; loc1 ++ ) { loc0. add ( ( String ) arg0 [ loc1 ] [ 0 ] ) ; } return loc0 ; }",
        "public static List < String > numerical_letter_grade ( double [ ] [ ] arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 [ 0 ]. length ; loc1 ++ ) { loc0. add ( ( String ) arg0 [ loc1 ] [ 0 ] ) ; } return loc0 ; }",
        "public static List < String > numerical_letter_grade ( double [ ] [ ] arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( ( String ) arg0 [ loc1 ] [ 0 ] ) ; } return loc0 ; }"
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0) \n            return false;\n    }\n    return true;\n}",
      "target": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l % i == 0) \n            return false;\n    }\n    return true;\n}",
      "function range": "12,5-21,5",
      "raw_output": [
        "boolean function ( String arg0 ) { return arg0. length ( ) == 1 ; }",
        "boolean function ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } return false ; }",
        "boolean function ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } else { return false ; } }",
        "boolean function ( String arg0 ) { return arg0. length ( ) > 31 ; }",
        "boolean function ( String arg0 ) { if ( arg0. length ( ) == 1 ) return true ; return false ; }",
        "boolean function ( String arg0 ) { return arg0. length ( ) == 1 ; }",
        "boolean function ( String arg0 ) { return arg0. length ( ) > 31 ; }",
        "boolean function ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } return ( arg0. charAt ( 0 ) == '-' ) ; }",
        "boolean function ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } else { return false ; } }",
        "boolean function ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } return false ; }",
        "boolean function ( String arg0 ) { return arg0. length ( ) > 31 ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) return true ; return ( arg0. charAt ( 0 ) == '-' ) ; }",
        "boolean function ( String arg0 ) { return arg0. length ( ) == 1 ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) return true ; return arg0. charAt ( 0 ) == '-' ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) return true ; return arg0. charAt ( 0 ) == arg0 ; }",
        "boolean function ( String arg0 ) { return arg0. length ( ) == 1 ; }",
        "boolean function ( String arg0 ) { return arg0. length ( ) > 0 ; }",
        "boolean function ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) { return false ; } return arg0. charAt ( 0 ) == '-' ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) { return false ; } return arg0. charAt ( 0 ) == arg0 ; }",
        "boolean function ( String arg0 ) { return arg0. length ( ) == primeLength ( arg0. length ( ) ) ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null || arg0. length ( )!= 2 ) { return false ; } String loc0 = arg0. trim ( ) ; if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) { return true ; } return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null || arg0. length ( )!= 2 ) { return false ; } String loc0 = arg0. trim ( ) ; if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { return arg0. length ( ) == primeLength ( arg0 ) ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null || arg0. length ( )!= 2 ) { return false ; } int loc0 = arg0. length ( ) ; String loc1 = arg0. substring ( 0, loc0 ) ; if ( loc1. equals ( \"srini_string\" ) ) { return true ; } return false ; }"
      ],
      "mid_translation": [
        "Check if the string is a prime length string.",
        "Check if the string is a prime length.",
        "Check if the given string is a prime length.",
        "Returns true if the string is a prime length.",
        "Returns true if the string is a prime of length 2."
      ],
      "output": [
        "public static boolean prime_length ( String arg0 ) { return arg0. length ( ) == 1 ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } return false ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } else { return false ; } }",
        "public static boolean prime_length ( String arg0 ) { return arg0. length ( ) > 31 ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0. length ( ) == 1 ) return true ; return false ; }",
        "public static boolean prime_length ( String arg0 ) { return arg0. length ( ) == 1 ; }",
        "public static boolean prime_length ( String arg0 ) { return arg0. length ( ) > 31 ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } return ( arg0. charAt ( 0 ) == '-' ) ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } else { return false ; } }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } return false ; }",
        "public static boolean prime_length ( String arg0 ) { return arg0. length ( ) > 31 ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) return true ; return ( arg0. charAt ( 0 ) == '-' ) ; }",
        "public static boolean prime_length ( String arg0 ) { return arg0. length ( ) == 1 ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) return true ; return arg0. charAt ( 0 ) == '-' ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) return true ; return arg0. charAt ( 0 ) == arg0 ; }",
        "public static boolean prime_length ( String arg0 ) { return arg0. length ( ) == 1 ; }",
        "public static boolean prime_length ( String arg0 ) { return arg0. length ( ) > 0 ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0. length ( ) == 1 ) { return true ; } return false ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) { return false ; } return arg0. charAt ( 0 ) == '-' ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0 == null || arg0. length ( ) == 0 ) { return false ; } return arg0. charAt ( 0 ) == arg0 ; }",
        "public static boolean prime_length ( String arg0 ) { return arg0. length ( ) == primeLength ( arg0. length ( ) ) ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0 == null || arg0. length ( )!= 2 ) { return false ; } String loc0 = arg0. trim ( ) ; if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) { return true ; } return false ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0 == null || arg0. length ( )!= 2 ) { return false ; } String loc0 = arg0. trim ( ) ; if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "public static boolean prime_length ( String arg0 ) { return arg0. length ( ) == primeLength ( arg0 ) ; }",
        "public static boolean prime_length ( String arg0 ) { if ( arg0 == null || arg0. length ( )!= 2 ) { return false ; } int loc0 = arg0. length ( ) ; String loc1 = arg0. substring ( 0, loc0 ) ; if ( loc1. equals ( \"srini_string\" ) ) { return true ; } return false ; }"
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2)); \n}",
      "target": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9 - 1) * Math.pow(10, n - 2)); \n}",
      "function range": "7,5-11,5",
      "raw_output": [
        "String function ( ) { return Constants. STARTS_ONE_ENDS ; }",
        "String function ( ) { return \"srini_string\" ; }",
        "String function ( ) { return Constants. STARTS_ONE_END ; }",
        "String function ( ) { return Constants. STARTS_ONE_ends ; }",
        "String function ( ) { return Constants. STARTS_ONE_STOP ; }",
        "int function ( ) { return 0 ; }",
        "int function ( ) { return 1 ; }",
        "int function ( ) { if ( this. starts == null || this. ends == null ) { return 0 ; } else { return this. ends. length - 1 ; } }",
        "int function ( ) { if ( starts == null || ends == null ) { return 0 ; } else { return ends. length - starts. length ; } }",
        "int function ( ) { throw new UnsupportedOperationException ( \"srini_string\" ) ; }",
        "int function ( N arg0 ) { if ( arg0. compareTo ( this ) == 0 ) { return 0 ; } else if ( arg0. compareTo ( this ) == 1 ) { return 1 ; } else if ( arg0. compareTo ( this ) == 2 ) { return 2 ; } else { throw new IllegalArgumentException ( \"srini_string\" ) ; } }",
        "int function ( N arg0 ) { if ( arg0. compareTo ( this. n ) >= 0 ) { return 1 ; } if ( arg0. compareTo ( this. n ) <= 0 ) { return 2 ; } if ( arg0. compareTo ( this. n ) >= 0 ) { return 3 ; } return 0 ; }",
        "int function ( N arg0 ) { if ( arg0. compareTo ( this. n ) >= 0 ) { return arg0. compareTo ( this. n ) ; } if ( arg0. compareTo ( this. n ) <= 0 ) { return arg0. compareTo ( this. n ) ; } return 0 ; }",
        "int function ( N arg0 ) { if ( arg0. compareTo ( this ) == 0 ) { return 1 ; } if ( arg0. compareTo ( this ) == 1 ) { return 2 ; } if ( arg0. compareTo ( this ) == 1 ) { return 3 ; } return 0 ; }",
        "int function ( N arg0 ) { if ( arg0. compareTo ( this ) == 0 ) { return 0 ; } if ( arg0. compareTo ( this ) == 1 ) { return 1 ; } if ( arg0. compareTo ( this ) == 2 ) { return 2 ; } return 0 ; }",
        "int function ( ) { return 0 ; }",
        "int function ( ) { return 1 ; }",
        "int function ( ) { return 9 ; }",
        "long function ( ) { return 0 ; }",
        "int function ( ) { return 3 ; }",
        "int function ( ) { }",
        "int function ( ) { return 0 ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == '{' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == ':' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == '/' ) loc0 ++ ; else loc0 ++ ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Gets the starts_one_ends value.",
        "Returns the number of starts - one - ends.",
        "Returns the number of starts - one - ends of n.",
        "Returns the number of starts and ends.",
        "Returns the number of starts - one - ends of a sequence of tokens."
      ],
      "output": [
        "public static String starts_one_ends ( ) { return Constants. STARTS_ONE_ENDS ; }",
        "public static String starts_one_ends ( ) { return \"srini_string\" ; }",
        "public static String starts_one_ends ( ) { return Constants. STARTS_ONE_END ; }",
        "public static String starts_one_ends ( ) { return Constants. STARTS_ONE_ends ; }",
        "public static String starts_one_ends ( ) { return Constants. STARTS_ONE_STOP ; }",
        "public static int starts_one_ends ( ) { return 0 ; }",
        "public static int starts_one_ends ( ) { return 1 ; }",
        "public static int starts_one_ends ( ) { if ( this. starts == null || this. ends == null ) { return 0 ; } else { return this. ends. length - 1 ; } }",
        "public static int starts_one_ends ( ) { if ( starts == null || ends == null ) { return 0 ; } else { return ends. length - starts. length ; } }",
        "public static int starts_one_ends ( ) { throw new UnsupportedOperationException ( \"srini_string\" ) ; }",
        "public static int starts_one_ends ( N arg0 ) { if ( arg0. compareTo ( this ) == 0 ) { return 0 ; } else if ( arg0. compareTo ( this ) == 1 ) { return 1 ; } else if ( arg0. compareTo ( this ) == 2 ) { return 2 ; } else { throw new IllegalArgumentException ( \"srini_string\" ) ; } }",
        "public static int starts_one_ends ( N arg0 ) { if ( arg0. compareTo ( this. n ) >= 0 ) { return 1 ; } if ( arg0. compareTo ( this. n ) <= 0 ) { return 2 ; } if ( arg0. compareTo ( this. n ) >= 0 ) { return 3 ; } return 0 ; }",
        "public static int starts_one_ends ( N arg0 ) { if ( arg0. compareTo ( this. n ) >= 0 ) { return arg0. compareTo ( this. n ) ; } if ( arg0. compareTo ( this. n ) <= 0 ) { return arg0. compareTo ( this. n ) ; } return 0 ; }",
        "public static int starts_one_ends ( N arg0 ) { if ( arg0. compareTo ( this ) == 0 ) { return 1 ; } if ( arg0. compareTo ( this ) == 1 ) { return 2 ; } if ( arg0. compareTo ( this ) == 1 ) { return 3 ; } return 0 ; }",
        "public static int starts_one_ends ( N arg0 ) { if ( arg0. compareTo ( this ) == 0 ) { return 0 ; } if ( arg0. compareTo ( this ) == 1 ) { return 1 ; } if ( arg0. compareTo ( this ) == 2 ) { return 2 ; } return 0 ; }",
        "public static int starts_one_ends ( ) { return 0 ; }",
        "public static int starts_one_ends ( ) { return 1 ; }",
        "public static int starts_one_ends ( ) { return 9 ; }",
        "public static long starts_one_ends ( ) { return 0 ; }",
        "public static int starts_one_ends ( ) { return 3 ; }",
        "public static int starts_one_ends ( ) { }",
        "public static int starts_one_ends ( ) { return 0 ; }",
        "public static int starts_one_ends ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == '{' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int starts_one_ends ( String arg0 ) { if ( arg0 == null ) { return 0 ; } int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == ':' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int starts_one_ends ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == '/' ) loc0 ++ ; else loc0 ++ ; } return loc0 ; }"
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1)); \n    }\n    return Integer.toBinaryString(sum);\n}",
      "target": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1)); \n    }\n    return Integer.toBinaryString(sum);\n}",
      "function range": "17,5-23,5",
      "raw_output": [
        "Problem function ( int arg0, int arg1 ) { Solution loc0 = new Solution ( arg0, arg1 ) ; if ( loc0 == null ) { System. err. println ( \"srini_string\" ) ; } else { System. err. println ( \"srini_string\" ) ; } return loc0 ; }",
        "Problem function ( int arg0 ) { Solution loc0 = new Solution ( arg0 ) ; if ( loc0 == null ) { System. err. println ( \"srini_string\" ) ; } else { System. err. println ( \"srini_string\" ) ; } return loc0 ; }",
        "Problem function ( int arg0, int arg1 ) { Solution loc0 = new Solution ( arg0, arg1 ) ; if ( loc0 == null ) { System. err. println ( \"srini_string\" ) ; } else { System. err. println ( \"srini_string\" ) ; return loc0 ; } }",
        "Problem function ( int arg0, int arg1 ) { Solution loc0 = new Solution ( arg0, arg1 ) ; if ( loc0 == null ) throw new Error ( \"srini_string\" ) ; return loc0 ; }",
        "Problem function ( int arg0, int arg1 ) { Solution loc0 = new Solution ( arg0, arg1 ) ; if ( loc0 == null ) throw new Exception ( \"srini_string\" ) ; return loc0 ; }",
        "List < R > function ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; System. out. println ( loc2. toString ( ) ) ; } return loc0 ; }",
        "List < R > function ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; System. out. println ( loc2 ) ; } return loc0 ; }",
        "List < R > function ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; solve ( loc2, loc1 ) ; } return loc0 ; }",
        "void function ( String arg0 [ ] ) { Solution loc0 = new Solution ( arg0. length, arg0 [ 0 ], arg0 [ 1 ] ) ; solve ( loc0 ) ; }",
        "void function ( String arg0 [ ] ) { Solution loc0 = new Solution ( arg0 [ 0 ], arg0 [ 1 ] ) ; solve ( loc0 ) ; }",
        "double function ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 ) { loc0 *= 2 ; } else if ( loc2 > 0 ) { loc0 *= 2 ; } } return loc0 ; }",
        "double function ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 || loc2 > 1 ) { loc0 *= 2 ; } else if ( loc2 > 0 ) { loc0 *= 2 ; } } return loc0 ; }",
        "double function ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "double function ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 ) { loc2 = 0 ; } else if ( loc2 > 0 ) { loc0 = loc2 * arg0 [ loc1 - 1 ] ; } } return loc0 ; }",
        "double function ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 || loc2 > 1 ) { loc0 *= 2 ; } else if ( loc2 > 0 ) { loc0 /= 2 ; } } return loc0 ; }",
        "List < R > function ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; List < R > loc3 = new ArrayList < R > ( ) ; for ( int loc4 = 0 ; loc4 < arg0. size ( ) ; loc4 ++ ) { R loc5 = arg0. get ( loc4 ) ; loc3. add ( loc2 ) ; } } return loc0 ; }",
        "List < R > function ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; List < R > loc3 = new ArrayList < R > ( ) ; for ( int loc4 = 0 ; loc4 < arg0. size ( ) ; loc4 ++ ) { R loc5 = ( R ) arg0. get ( loc4 ) ; loc3. add ( loc2 ) ; } } return loc0 ; }",
        "List < R > function ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; List < R > loc3 = new ArrayList < R > ( ) ; for ( int loc4 = 0 ; loc4 < arg0. size ( ) ; loc4 ++ ) { R loc5 = arg0. get ( loc4 ) ; loc3. add ( loc2 ) ) ; } } return loc0 ; }",
        "List < R > function ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; List < R > loc3 = new ArrayList < R > ( ) ; for ( int loc4 = 0 ; loc4 < arg0. size ( ) ; loc4 ++ ) { R loc5 = arg0. get ( loc4 ) ; loc0. add ( loc2 ) ; } } return loc0 ; }",
        "List < R > function ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; List < R > loc3 = new ArrayList < R > ( ) ; for ( int loc4 = 0 ; loc4 < arg0. size ( ) ; loc4 ++ ) { R loc5 = arg0. get ( loc4 ) ; loc0. add ( loc3 ) ; } } return loc0 ; }",
        "List < List < Integer >> function ( File arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( ) ; List < List < Integer >> loc1 = new ArrayList < List < Integer >> ( ) ; if ( arg0. exists ( ) ) { int loc2 = arg0. loc2 ( ) ; for ( int loc3 = 0 ; loc3 < loc2 ; loc3 ++ ) { loc1. add ( new Integer ( loc3 ) ) ; } } return loc0 ; }",
        "List < List < Integer >> function ( File arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( ) ; if ( arg0. exists ( ) ) { int loc1 = arg0. loc1 ( ) ; List < List < Integer >> loc2 = new ArrayList < List < Integer >> ( ) ; for ( int loc3 = 0 ; loc3 < loc1 ; loc3 ++ ) { loc2. add ( new Integer ( loc3 ) ) ; } } return loc0 ; }",
        "List < Integer > function ( File arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; if ( arg0. exists ( ) ) { int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0. add ( new Integer ( arg0. read ( ) ) ) ; } } return loc0 ; }",
        "List < Integer > function ( File arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; if ( arg0. exists ( ) ) { int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { int loc3 = arg0. loc2 ( ) ; loc0. add ( new Integer ( loc3 ) ) ; } } return loc0 ; }",
        "List < Integer > function ( File arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; if ( arg0. exists ( ) ) { int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { int loc3 = arg0. loc2 ( ) ; if ( loc3 < 0 ) { loc0. add ( loc3 ) ; } } } return loc0 ; }"
      ],
      "mid_translation": [
        "Solves a problem N.",
        "Solves the problem N.",
        "Solves the N - th formula.",
        "Solves a N - gram problem.",
        "Solves a N - gram file."
      ],
      "output": [
        "public static Problem solve ( int arg0, int arg1 ) { Solution loc0 = new Solution ( arg0, arg1 ) ; if ( loc0 == null ) { System. err. println ( \"srini_string\" ) ; } else { System. err. println ( \"srini_string\" ) ; } return loc0 ; }",
        "public static Problem solve ( int arg0 ) { Solution loc0 = new Solution ( arg0 ) ; if ( loc0 == null ) { System. err. println ( \"srini_string\" ) ; } else { System. err. println ( \"srini_string\" ) ; } return loc0 ; }",
        "public static Problem solve ( int arg0, int arg1 ) { Solution loc0 = new Solution ( arg0, arg1 ) ; if ( loc0 == null ) { System. err. println ( \"srini_string\" ) ; } else { System. err. println ( \"srini_string\" ) ; return loc0 ; } }",
        "public static Problem solve ( int arg0, int arg1 ) { Solution loc0 = new Solution ( arg0, arg1 ) ; if ( loc0 == null ) throw new Error ( \"srini_string\" ) ; return loc0 ; }",
        "public static Problem solve ( int arg0, int arg1 ) { Solution loc0 = new Solution ( arg0, arg1 ) ; if ( loc0 == null ) throw new Exception ( \"srini_string\" ) ; return loc0 ; }",
        "public static List < R > solve ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; System. out. println ( loc2. toString ( ) ) ; } return loc0 ; }",
        "public static List < R > solve ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; System. out. println ( loc2 ) ; } return loc0 ; }",
        "public static List < R > solve ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; solve ( loc2, loc1 ) ; } return loc0 ; }",
        "public static void solve ( String arg0 [ ] ) { Solution loc0 = new Solution ( arg0. length, arg0 [ 0 ], arg0 [ 1 ] ) ; solve ( loc0 ) ; }",
        "public static void solve ( String arg0 [ ] ) { Solution loc0 = new Solution ( arg0 [ 0 ], arg0 [ 1 ] ) ; solve ( loc0 ) ; }",
        "public static double solve ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 ) { loc0 *= 2 ; } else if ( loc2 > 0 ) { loc0 *= 2 ; } } return loc0 ; }",
        "public static double solve ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 || loc2 > 1 ) { loc0 *= 2 ; } else if ( loc2 > 0 ) { loc0 *= 2 ; } } return loc0 ; }",
        "public static double solve ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double solve ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 ) { loc2 = 0 ; } else if ( loc2 > 0 ) { loc0 = loc2 * arg0 [ loc1 - 1 ] ; } } return loc0 ; }",
        "public static double solve ( double arg0 [ ] ) { double loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { double loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 || loc2 > 1 ) { loc0 *= 2 ; } else if ( loc2 > 0 ) { loc0 /= 2 ; } } return loc0 ; }",
        "public static List < R > solve ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; List < R > loc3 = new ArrayList < R > ( ) ; for ( int loc4 = 0 ; loc4 < arg0. size ( ) ; loc4 ++ ) { R loc5 = arg0. get ( loc4 ) ; loc3. add ( loc2 ) ; } } return loc0 ; }",
        "public static List < R > solve ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; List < R > loc3 = new ArrayList < R > ( ) ; for ( int loc4 = 0 ; loc4 < arg0. size ( ) ; loc4 ++ ) { R loc5 = ( R ) arg0. get ( loc4 ) ; loc3. add ( loc2 ) ; } } return loc0 ; }",
        "public static List < R > solve ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; List < R > loc3 = new ArrayList < R > ( ) ; for ( int loc4 = 0 ; loc4 < arg0. size ( ) ; loc4 ++ ) { R loc5 = arg0. get ( loc4 ) ; loc3. add ( loc2 ) ) ; } } return loc0 ; }",
        "public static List < R > solve ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; List < R > loc3 = new ArrayList < R > ( ) ; for ( int loc4 = 0 ; loc4 < arg0. size ( ) ; loc4 ++ ) { R loc5 = arg0. get ( loc4 ) ; loc0. add ( loc2 ) ; } } return loc0 ; }",
        "public static List < R > solve ( List < R > arg0 ) { List < R > loc0 = new ArrayList < R > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { R loc2 = arg0. get ( loc1 ) ; List < R > loc3 = new ArrayList < R > ( ) ; for ( int loc4 = 0 ; loc4 < arg0. size ( ) ; loc4 ++ ) { R loc5 = arg0. get ( loc4 ) ; loc0. add ( loc3 ) ; } } return loc0 ; }",
        "public static List < List < Integer >> solve ( File arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( ) ; List < List < Integer >> loc1 = new ArrayList < List < Integer >> ( ) ; if ( arg0. exists ( ) ) { int loc2 = arg0. loc2 ( ) ; for ( int loc3 = 0 ; loc3 < loc2 ; loc3 ++ ) { loc1. add ( new Integer ( loc3 ) ) ; } } return loc0 ; }",
        "public static List < List < Integer >> solve ( File arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( ) ; if ( arg0. exists ( ) ) { int loc1 = arg0. loc1 ( ) ; List < List < Integer >> loc2 = new ArrayList < List < Integer >> ( ) ; for ( int loc3 = 0 ; loc3 < loc1 ; loc3 ++ ) { loc2. add ( new Integer ( loc3 ) ) ; } } return loc0 ; }",
        "public static List < Integer > solve ( File arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; if ( arg0. exists ( ) ) { int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0. add ( new Integer ( arg0. read ( ) ) ) ; } } return loc0 ; }",
        "public static List < Integer > solve ( File arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; if ( arg0. exists ( ) ) { int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { int loc3 = arg0. loc2 ( ) ; loc0. add ( new Integer ( loc3 ) ) ; } } return loc0 ; }",
        "public static List < Integer > solve ( File arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; if ( arg0. exists ( ) ) { int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { int loc3 = arg0. loc2 ( ) ; if ( loc3 < 0 ) { loc0. add ( loc3 ) ; } } } return loc0 ; }"
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) { \n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
      "target": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 1; i < lst.length; i += 2) { \n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
      "function range": "8,5-15,5",
      "raw_output": [
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = loc0 + arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] % arg1 == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = loc0 + arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] % arg1 == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = loc0 + arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ arg1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ arg1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int arg0 [ ] ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }"
      ],
      "mid_translation": [
        "add_even_at_odd This function calculates the sum of the elements of an array of integers.",
        "add_even_at_odd This method calculates the sum of the elements of an array of integers.",
        "add_even_at_odd This method returns the sum of the elements of an array of integers.",
        "add_even_at_odd This method returns the sum of the elements in the array of integers.",
        "add_even_at_odd This method returns the sum of the elements in the array."
      ],
      "output": [
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = loc0 + arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] % arg1 == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = loc0 + arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] % arg1 == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = loc0 + arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ arg1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ arg1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int arg0 [ ] ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int add_even_at_odd ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }"
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars); \n    } \n    return result; \n}",
      "target": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars) + \" \"; \n    } \n    return result.substring(0, result.length() - 1); \n}",
      "function range": "17,5-25,5",
      "raw_output": [
        "String function ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "String function ( String arg0 ) { String loc0 = \"srini_string\" ; int loc1 = 0 ; while ( ( loc1 < arg0. length ( ) ) && ( loc1 < arg0. length ( ) ) ) { loc0 += arg0. charAt ( loc1 ) ; loc1 ++ ; } return loc0 ; }",
        "String function ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "String function ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 += arg0. charAt ( loc1 ) ; return loc0 ; }",
        "String function ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "String function ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "String function ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 += arg0. charAt ( loc1 ) ; return loc0 ; }",
        "String function ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( char ) arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "String function ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "String function ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "String function ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) loc0 += \"srini_string\" ; else loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "String function ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "String function ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; if ( loc0. length ( ) == 1 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "String function ( String [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = ( int ) ( arg0 [ loc1 ]. length ( ) + 1 ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; arg0 [ loc2 ] = loc0 ; loc0 ++ ; } return arg0 ; }",
        "String function ( String [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = ( int ) ( arg0 [ loc1 ]. length ( ) + 1 ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; arg0 [ loc2 ] = loc0 ; loc0 = loc2 ; } return arg0 ; }",
        "String function ( String [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = ( int ) ( arg0 [ loc1 ]. length ( ) + 1 ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; arg0 [ loc2 ] = loc0 ; } return arg0 ; }",
        "String function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = ( arg0 [ loc1 ] == null )? 0 : arg0 [ loc1 ]. hashCode ( ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; loc0 ++ ; } return arg0 ; }",
        "String function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = ( int ) ( arg0 [ loc1 ]. length ( ) + 1 ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; arg0 [ loc2 ] = loc0 ; loc0 ++ ; } return arg0 ; }",
        "String function ( final String arg0 ) { final int loc0 = arg0. loc0 ( ) ; final char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "String function ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "String function ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 += arg0 [ loc1 ] ; else loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "String function ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "String function ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) { loc0 += arg0 [ loc1 ] ; } else { loc0 += arg0 [ loc1 ] ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Anti - shuffle a string.",
        "Anti shuffle a string.",
        "Anti - shuffle a string",
        "Anti - Shuffle a string",
        "Anti - shuffle a String."
      ],
      "output": [
        "public static String anti_shuffle ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static String anti_shuffle ( String arg0 ) { String loc0 = \"srini_string\" ; int loc1 = 0 ; while ( ( loc1 < arg0. length ( ) ) && ( loc1 < arg0. length ( ) ) ) { loc0 += arg0. charAt ( loc1 ) ; loc1 ++ ; } return loc0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static String anti_shuffle ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 += arg0. charAt ( loc1 ) ; return loc0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static String anti_shuffle ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "public static String anti_shuffle ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static String anti_shuffle ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 += arg0. charAt ( loc1 ) ; return loc0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static String anti_shuffle ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = ( char ) arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "public static String anti_shuffle ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) loc0 += \"srini_string\" ; else loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; if ( loc0. length ( ) == 1 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = ( int ) ( arg0 [ loc1 ]. length ( ) + 1 ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; arg0 [ loc2 ] = loc0 ; loc0 ++ ; } return arg0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = ( int ) ( arg0 [ loc1 ]. length ( ) + 1 ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; arg0 [ loc2 ] = loc0 ; loc0 = loc2 ; } return arg0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = ( int ) ( arg0 [ loc1 ]. length ( ) + 1 ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; arg0 [ loc2 ] = loc0 ; } return arg0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = ( arg0 [ loc1 ] == null )? 0 : arg0 [ loc1 ]. hashCode ( ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; loc0 ++ ; } return arg0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = ( int ) ( arg0 [ loc1 ]. length ( ) + 1 ) ; arg0 [ loc1 ] = arg0 [ loc2 ] ; arg0 [ loc2 ] = loc0 ; loc0 ++ ; } return arg0 ; }",
        "public static String anti_shuffle ( final String arg0 ) { final int loc0 = arg0. loc0 ( ) ; final char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 += arg0 [ loc1 ] ; else loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static String anti_shuffle ( String arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 += arg0. charAt ( loc1 ) ; } return loc0 ; }",
        "public static String anti_shuffle ( String [ ] arg0 ) { String loc0 = \"srini_string\" ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) { loc0 += arg0 [ loc1 ] ; } else { loc0 += arg0 [ loc1 ] ; } } return loc0 ; }"
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){ \n            if (lst.get(i).get(j) == x){ \n                result.add(new GET_ROW().new Tuple(i, j)); \n            }\n        }\n    }\n    return result;\n}",
      "target": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){ \n            if (lst.get(i).get(i) == x){ \n                result.add(new GET_ROW().new Tuple(i, i)); \n            }\n        }\n    }\n    return result;\n}",
      "function range": "22,5-33,5",
      "raw_output": [
        "java. util. Date function ( ) { return new java. util. Date ( ) ; }",
        "Row function ( Row arg0 ) { if ( arg0 == null ) return null ; return arg0. getRow ( ) ; }",
        "java. lang. String function ( ) { return System. getProperty ( \"srini_string\" ) ; }",
        "Row function ( Row arg0 ) { return arg0 == null? null : arg0. getRow ( ) ; }",
        "Row function ( Row arg0 ) { if ( arg0 == null ) { return null ; } return arg0. getRow ( ) ; }",
        "List < Tuple > function ( Tuple arg0 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { Tuple loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Tuple < Integer, Integer >> function ( int arg0 ) { List < Tuple < Integer, Integer >> loc0 = new ArrayList < Tuple < Integer, Integer >> ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( Tuple. valueOf ( arg0 ) ) ; } return loc0 ; }",
        "List < Tuple < Integer, Integer >> function ( int arg0 ) { List < Tuple < Integer, Integer >> loc0 = new ArrayList < Tuple < Integer, Integer >> ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. add ( Tuple. valueOf ( arg0 ) ) ; return loc0 ; }",
        "List < Tuple < Integer, Integer >> function ( int arg0 ) { List < Tuple < Integer, Integer >> loc0 = new ArrayList < Tuple < Integer, Integer >> ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. add ( Tuple. of ( arg0, loc1 ) ) ; return loc0 ; }",
        "List < Tuple > function ( int arg0 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( Tuple. of ( loc1 ) ) ; } return loc0 ; }",
        "int function ( List < Integer > arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) == arg1 ) { return loc0 ; } } return arg0. get ( arg1 ) ; }",
        "int function ( List < Integer > arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) == arg1 ) { return loc0 ; } } return - 1 ; }",
        "int function ( List < Integer > arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > arg1 ) { return loc0 ; } } return arg0. get ( arg1 ) ; }",
        "int function ( List < Integer > arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) >= 0 ) { return arg0. get ( loc0 ) ; } } return arg1 ; }",
        "int function ( List < Integer > arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > 0 ) { return arg0. get ( loc0 ) ; } } return arg1 ; }",
        "List < Tuple > function ( int arg0, int arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( Tuple. of ( arg1, arg0 ) ) ; } return loc0 ; }",
        "List < Tuple > function ( int arg0, int arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { Tuple loc2 = new Tuple ( arg1, arg0 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Tuple > function ( int arg0 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { Tuple loc2 = new Tuple ( ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Tuple > function ( int arg0 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0 ; loc2 ++ ) { loc0. add ( Tuple. of ( loc1, loc2 ) ) ; loc1 ++ ; } return loc0 ; }",
        "List < Tuple > function ( int arg0 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( Tuple. of ( loc1 ) ) ; } return loc0 ; }",
        "List < Tuple > function ( String arg0, List < Tuple > arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { Tuple loc2 = arg1. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Tuple > function ( String arg0, List < Tuple > arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) loc0. add ( arg1. get ( loc1 ) ) ; return loc0 ; }",
        "List < Tuple > function ( int arg0, int arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { Tuple loc2 = new Tuple ( ) ; loc2. set ( loc1, arg1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Tuple > function ( int arg0, int arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( Tuple. valueOf ( arg1 ) ) ; } return loc0 ; }",
        "List < Tuple > function ( int arg0, int arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. add ( Tuple. valueOf ( arg1 ) ) ; return loc0 ; }"
      ],
      "mid_translation": [
        "Gets the row.",
        "Get a list of tuples for a single row.",
        "Gets the row from a list of lists of integers.",
        "Get a list of tuples for a single row",
        "get_row This method returns a list of tuples for a single row."
      ],
      "output": [
        "public static java. util. Date get_row ( ) { return new java. util. Date ( ) ; }",
        "public static Row get_row ( Row arg0 ) { if ( arg0 == null ) return null ; return arg0. getRow ( ) ; }",
        "public static java. lang. String get_row ( ) { return System. getProperty ( \"srini_string\" ) ; }",
        "public static Row get_row ( Row arg0 ) { return arg0 == null? null : arg0. getRow ( ) ; }",
        "public static Row get_row ( Row arg0 ) { if ( arg0 == null ) { return null ; } return arg0. getRow ( ) ; }",
        "public static List < Tuple > get_row ( Tuple arg0 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { Tuple loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Tuple < Integer, Integer >> get_row ( int arg0 ) { List < Tuple < Integer, Integer >> loc0 = new ArrayList < Tuple < Integer, Integer >> ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( Tuple. valueOf ( arg0 ) ) ; } return loc0 ; }",
        "public static List < Tuple < Integer, Integer >> get_row ( int arg0 ) { List < Tuple < Integer, Integer >> loc0 = new ArrayList < Tuple < Integer, Integer >> ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. add ( Tuple. valueOf ( arg0 ) ) ; return loc0 ; }",
        "public static List < Tuple < Integer, Integer >> get_row ( int arg0 ) { List < Tuple < Integer, Integer >> loc0 = new ArrayList < Tuple < Integer, Integer >> ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. add ( Tuple. of ( arg0, loc1 ) ) ; return loc0 ; }",
        "public static List < Tuple > get_row ( int arg0 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( Tuple. of ( loc1 ) ) ; } return loc0 ; }",
        "public static int get_row ( List < Integer > arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) == arg1 ) { return loc0 ; } } return arg0. get ( arg1 ) ; }",
        "public static int get_row ( List < Integer > arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) == arg1 ) { return loc0 ; } } return - 1 ; }",
        "public static int get_row ( List < Integer > arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > arg1 ) { return loc0 ; } } return arg0. get ( arg1 ) ; }",
        "public static int get_row ( List < Integer > arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) >= 0 ) { return arg0. get ( loc0 ) ; } } return arg1 ; }",
        "public static int get_row ( List < Integer > arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > 0 ) { return arg0. get ( loc0 ) ; } } return arg1 ; }",
        "public static List < Tuple > get_row ( int arg0, int arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( Tuple. of ( arg1, arg0 ) ) ; } return loc0 ; }",
        "public static List < Tuple > get_row ( int arg0, int arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { Tuple loc2 = new Tuple ( arg1, arg0 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Tuple > get_row ( int arg0 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { Tuple loc2 = new Tuple ( ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Tuple > get_row ( int arg0 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0 ; loc2 ++ ) { loc0. add ( Tuple. of ( loc1, loc2 ) ) ; loc1 ++ ; } return loc0 ; }",
        "public static List < Tuple > get_row ( int arg0 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( Tuple. of ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Tuple > get_row ( String arg0, List < Tuple > arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { Tuple loc2 = arg1. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Tuple > get_row ( String arg0, List < Tuple > arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) loc0. add ( arg1. get ( loc1 ) ) ; return loc0 ; }",
        "public static List < Tuple > get_row ( int arg0, int arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { Tuple loc2 = new Tuple ( ) ; loc2. set ( loc1, arg1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Tuple > get_row ( int arg0, int arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( Tuple. valueOf ( arg1 ) ) ; } return loc0 ; }",
        "public static List < Tuple > get_row ( int arg0, int arg1 ) { List < Tuple > loc0 = new ArrayList < Tuple > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. add ( Tuple. valueOf ( arg1 ) ) ; return loc0 ; }"
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            array[i] = array[array.length - i - 1]; \n            array[array.length - i - 1] = array[i]; \n        }\n        return array;\n    }\n}",
      "target": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i]; \n            array[i] = array[array.length - i - 1]; \n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
      "function range": "19,5-32,5",
      "raw_output": [
        "List < T > function ( T [ ] arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { return SortUtils. sort ( arg0, new Comparator < T > ( ) { @ Override public int compare ( T arg1, T arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { return sort ( arg0, 0, arg0. size ( ) - 1 ) ; }",
        "List < T > function ( T... arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 - 1 ] = loc2 ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 - 1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = loc0 / 2 ; loc1 > 0 ; loc1 -- ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 - 1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = loc0 / 2 ; loc1 > 0 ; loc1 -- ) { int loc2 = arg0 [ loc1 - 1 ] ; for ( int loc3 = loc1 - 1 ; loc3 >= 0 ; loc3 -- ) { arg0 [ loc3 + 1 ] = arg0 [ loc3 ] ; arg0 [ loc3 + 1 ] = loc0 ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 = arg0 [ loc1 ] ; arg0 [ loc1 ] = arg0 [ loc0 ] ; } else if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 = arg0 ; } } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 = arg0 [ loc1 ] ; arg0 [ loc1 - 1 ] = arg0 [ loc0 ] ; } else if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 = arg0 ; } } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 = arg0 [ loc1 ] ; arg0 [ loc1 - 1 ] = arg0 [ loc0 ] ; } else if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = arg0 ; } } } return arg0 ; }",
        "void function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc0 ] ; arg0 [ loc1 ] = loc2 ; } }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return arg0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "List < Integer > function ( Comparable [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "ArrayList < Integer > function ( Comparable [ ] arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "ArrayList < Integer > function ( int [ ] arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "List < T > function ( T [ ] arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "List < T > function ( T [ ] arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { T loc2 = arg0 [ loc1 ] ; for ( int loc3 = loc1 - 1 ; loc3 >= 0 ; loc3 -- ) { loc0. add ( loc2, arg0 [ loc3 ] ) ; } } return loc0 ; }",
        "List < T > function ( T [ ] arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 - 1 ] ) ; } Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "List < T > function ( T [ ] arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "List < T > function ( T [ ] arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { T loc2 = arg0 [ loc1 ] ; for ( int loc3 = loc1 - 1 ; loc3 >= 0 ; loc3 -- ) { loc0. add ( loc2, arg1 [ loc3 ] ) ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Sort array.",
        "Sort an array of integers.",
        "Sort an int array.",
        "Method sort_array.",
        "Sort the array."
      ],
      "output": [
        "public static List < T > sort_array ( T [ ] arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "public static int sort_array ( T arg1, T arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; }",
        "public static List < T > sort_array ( List < T > arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "public static List < T > sort_array ( List < T > arg0 ) { return sort ( arg0, 0, arg0. size ( ) - 1 ) ; }",
        "public static List < T > sort_array ( T... arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "public static int [ ] sort_array ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "public static int [ ] sort_array ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc1 ] ; arg0 [ loc1 - 1 ] = loc2 ; } return arg0 ; }",
        "public static int [ ] sort_array ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 - 1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "public static int [ ] sort_array ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = loc0 / 2 ; loc1 > 0 ; loc1 -- ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 - 1 ] = arg0 [ loc1 ] ; arg0 [ loc1 ] = loc2 ; } return arg0 ; }",
        "public static int [ ] sort_array ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = loc0 / 2 ; loc1 > 0 ; loc1 -- ) { int loc2 = arg0 [ loc1 - 1 ] ; for ( int loc3 = loc1 - 1 ; loc3 >= 0 ; loc3 -- ) { arg0 [ loc3 + 1 ] = arg0 [ loc3 ] ; arg0 [ loc3 + 1 ] = loc0 ; } } return arg0 ; }",
        "public static int [ ] sort_array ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 = arg0 [ loc1 ] ; arg0 [ loc1 ] = arg0 [ loc0 ] ; } else if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 = arg0 ; } } } return arg0 ; }",
        "public static int [ ] sort_array ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 = arg0 [ loc1 ] ; arg0 [ loc1 - 1 ] = arg0 [ loc0 ] ; } else if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 = arg0 ; } } } return arg0 ; }",
        "public static int [ ] sort_array ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 = arg0 [ loc1 ] ; arg0 [ loc1 - 1 ] = arg0 [ loc0 ] ; } else if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = arg0 ; } } } return arg0 ; }",
        "public static void sort_array ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 - 1 ] ; arg0 [ loc1 ] = arg0 [ loc0 ] ; arg0 [ loc1 ] = loc2 ; } }",
        "public static int [ ] sort_array ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return arg0 ; }",
        "public static List < Integer > sort_array ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "public static List < Integer > sort_array ( Comparable [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "public static ArrayList < Integer > sort_array ( Comparable [ ] arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "public static List < Integer > sort_array ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "public static ArrayList < Integer > sort_array ( int [ ] arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "public static List < T > sort_array ( T [ ] arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "public static List < T > sort_array ( T [ ] arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { T loc2 = arg0 [ loc1 ] ; for ( int loc3 = loc1 - 1 ; loc3 >= 0 ; loc3 -- ) { loc0. add ( loc2, arg0 [ loc3 ] ) ; } } return loc0 ; }",
        "public static List < T > sort_array ( T [ ] arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 - 1 ] ) ; } Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "public static List < T > sort_array ( T [ ] arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "public static List < T > sort_array ( T [ ] arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { T loc2 = arg0 [ loc1 ] ; for ( int loc3 = loc1 - 1 ; loc3 >= 0 ; loc3 -- ) { loc0. add ( loc2, arg1 [ loc3 ] ) ; } } return loc0 ; }"
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2) \n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
      "target": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((d.indexOf((int) c) + 2 * 2) % 26) \n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "raw_output": [
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; byte [ ] loc0 = Base64. encode ( arg0. getBytes ( ) ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = Base64. getEncoder ( ). encode ( arg0 ) ; return new String ( loc0 ) ; }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0, Base64. DEFAULT ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = Base64. getEncoder ( ). encode ( arg0 ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "byte [ ] function ( String arg0 ) { byte [ ] loc0 = null ; Cipher loc1 = Cipher. getInstance ( \"srini_string\" ) ; loc1. init ( Cipher. ENCRYPT_MODE, arg0 ) ; byte [ ] loc2 = loc1. doFinal ( arg0. getBytes ( ) ) ; return loc2 ; }",
        "byte [ ] function ( String arg0 ) { byte [ ] loc0 = Base64. getEncoder ( ). decode ( arg0 ) ; return loc0 ; }",
        "byte [ ] function ( String arg0 ) { byte [ ] loc0 = arg0. getBytes ( ) ; Cipher loc1 = Cipher. getInstance ( \"srini_string\" ) ; loc1. init ( Cipher. ENCRYPT_MODE, loc0 ) ; byte [ ] loc2 = loc1. doFinal ( loc0 ) ; return loc2 ; }",
        "byte [ ] function ( String arg0 ) { byte [ ] loc0 = arg0. getBytes ( ) ; Cipher loc1 = Cipher. getInstance ( \"srini_string\" ) ; loc1. init ( Cipher. ENCRYPT_MODE, loc0 ) ; return loc1. doFinal ( loc0 ) ; }",
        "byte [ ] function ( String arg0 ) { byte [ ] loc0 = null ; Cipher loc1 = Cipher. getInstance ( \"srini_string\" ) ; loc1. init ( Cipher. ENCRYPT_MODE, arg0 ) ; byte [ ] loc2 = loc1. doFinal ( loc0 ) ; return loc2 ; }",
        "String function ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; byte [ ] loc0 = Base64. getEncoder ( ). encode ( arg0 ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } byte [ ] loc0 = Base64. getEncoder ( ). encode ( arg0 ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = Base64. getEncoder ( ). encode ( arg0 ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } byte [ ] loc0 = Base64. encode ( arg0. getBytes ( ) ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }"
      ],
      "mid_translation": [
        "Encrypts a string.",
        "Encrypts a String.",
        "Encrypts a String",
        "Encipher a string.",
        "Encrypts a string"
      ],
      "output": [
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; byte [ ] loc0 = Base64. encode ( arg0. getBytes ( ) ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = Base64. getEncoder ( ). encode ( arg0 ) ; return new String ( loc0 ) ; }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0, Base64. DEFAULT ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = Base64. getEncoder ( ). encode ( arg0 ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encodeToString ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "public static byte [ ] encrypt ( String arg0 ) { byte [ ] loc0 = null ; Cipher loc1 = Cipher. getInstance ( \"srini_string\" ) ; loc1. init ( Cipher. ENCRYPT_MODE, arg0 ) ; byte [ ] loc2 = loc1. doFinal ( arg0. getBytes ( ) ) ; return loc2 ; }",
        "public static byte [ ] encrypt ( String arg0 ) { byte [ ] loc0 = Base64. getEncoder ( ). decode ( arg0 ) ; return loc0 ; }",
        "public static byte [ ] encrypt ( String arg0 ) { byte [ ] loc0 = arg0. getBytes ( ) ; Cipher loc1 = Cipher. getInstance ( \"srini_string\" ) ; loc1. init ( Cipher. ENCRYPT_MODE, loc0 ) ; byte [ ] loc2 = loc1. doFinal ( loc0 ) ; return loc2 ; }",
        "public static byte [ ] encrypt ( String arg0 ) { byte [ ] loc0 = arg0. getBytes ( ) ; Cipher loc1 = Cipher. getInstance ( \"srini_string\" ) ; loc1. init ( Cipher. ENCRYPT_MODE, loc0 ) ; return loc1. doFinal ( loc0 ) ; }",
        "public static byte [ ] encrypt ( String arg0 ) { byte [ ] loc0 = null ; Cipher loc1 = Cipher. getInstance ( \"srini_string\" ) ; loc1. init ( Cipher. ENCRYPT_MODE, arg0 ) ; byte [ ] loc2 = loc1. doFinal ( loc0 ) ; return loc2 ; }",
        "public static String encrypt ( String arg0 ) { try { return Base64. getEncoder ( ). encode ( arg0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "public static String encrypt ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; byte [ ] loc0 = Base64. getEncoder ( ). encode ( arg0 ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }",
        "public static String encrypt ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } byte [ ] loc0 = Base64. getEncoder ( ). encode ( arg0 ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }",
        "public static String encrypt ( String arg0 ) { if ( arg0 == null ) return null ; byte [ ] loc0 = Base64. getEncoder ( ). encode ( arg0 ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }",
        "public static String encrypt ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } byte [ ] loc0 = Base64. encode ( arg0. getBytes ( ) ) ; return Base64. getEncoder ( ). encode ( loc0 ) ; }"
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>(); \n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
      "target": "public static Integer next_smallest(int[] lst) {\n    HashSet<Integer> numbers = new HashSet<Integer>(); \n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
      "function range": "15,5-25,5",
      "raw_output": [
        "int function ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = 1 ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( final int [ ] arg0 ) { final int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { final int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( final int [ ] arg0 ) { final int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { final int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return arg0 [ loc0 ] ; }",
        "int function ( int arg0 [ ] ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = 1 ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( final int [ ] arg0 ) { final int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( final int [ ] arg0 ) { final int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { final int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Get the next small number from an array of integers.",
        "Gets the next smallest integer in the array of integers.",
        "Get the next smallest of the array of integers.",
        "Get the next small number from an array of integers",
        "Get the next smallest integer in the array of integers."
      ],
      "output": [
        "public static int next_smallest ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int next_smallest ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int next_smallest ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int next_smallest ( int... arg0 ) { int loc0 = 1 ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int next_smallest ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int next_smallest ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int next_smallest ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int next_smallest ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int next_smallest ( final int [ ] arg0 ) { final int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { final int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int next_smallest ( final int [ ] arg0 ) { final int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { final int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int next_smallest ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int next_smallest ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int next_smallest ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int next_smallest ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return arg0 [ loc0 ] ; }",
        "public static int next_smallest ( int arg0 [ ] ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int next_smallest ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int next_smallest ( int... arg0 ) { int loc0 = 1 ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int next_smallest ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int next_smallest ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int next_smallest ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int next_smallest ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int next_smallest ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int next_smallest ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int next_smallest ( final int [ ] arg0 ) { final int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int next_smallest ( final int [ ] arg0 ) { final int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { final int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }"
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) \n            result += 1;\n    }\n    return result;\n}",
      "target": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        sentence = sentence.trim(); \n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "raw_output": [
        "int function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "int function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "int function ( String arg0 ) { }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) ; }",
        "int function ( String arg0 ) { int loc0 = arg0. length ( ) ; if ( loc0 > 1 ) { return ( loc0 - 1 ) ; } else { return 0 ; } }",
        "int function ( String arg0 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if (! Character. isLetter ( arg0. charAt ( loc1 ) ) ) { return loc1 ; } } return 0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == 'B' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "int function ( String arg0 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'B' ) { return loc1 ; } } return 0 ; }",
        "int function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ) { return 0 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 2 ; } else { return 0 ; } }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) =='' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) =='' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'B' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) =='' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) =='' ) { loc1 ++ ; } } return loc1 ; }",
        "int function ( T arg0 ) { if ( arg0 == null ) { return 0 ; } else if ( arg0. compareTo ( \"srini_string\" ) < 0 ) { return - 1 ; } else { return arg0. compareTo ( \"srini_string\" ) ; } }",
        "int function ( T arg0 ) { if ( arg0 == null ) { return 0 ; } else if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { return 1 ; } else { return arg0. compareTo ( \"srini_string\" ) ; } }",
        "int function ( S arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return ( arg0. compareTo ( \"srini_string\" ) < 0 ) ; }",
        "int function ( T arg0 ) { if ( arg0 == null ) { return 0 ; } else if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { return 1 ; } else { return arg0. compareTo ( \"srini_string\" ) + 1 ; } }",
        "int function ( T arg0 ) { if ( arg0 == null ) { return 0 ; } else { return ( arg0. compareTo ( \"srini_string\" ) < 0 ) ; } }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) =='' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) =='' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'B' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) =='' ) { return loc1 ; } } return 0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == '_' ) { loc0 ++ ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "is_bored returns 1 if the sentence is a bored sentence",
        "is_bored returns 1 if the sentence is bored",
        "is_bored returns 1 if S is a bored sentence",
        "is_bored returns 1 if S is bored",
        "is_bored returns 1 if S is a bored sentence."
      ],
      "output": [
        "public static int is_bored ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static int is_bored ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static int is_bored ( String arg0 ) { }",
        "public static boolean is_bored ( String arg0 ) { return arg0. equals ( \"srini_string\" ) ; }",
        "public static int is_bored ( String arg0 ) { int loc0 = arg0. length ( ) ; if ( loc0 > 1 ) { return ( loc0 - 1 ) ; } else { return 0 ; } }",
        "public static int is_bored ( String arg0 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if (! Character. isLetter ( arg0. charAt ( loc1 ) ) ) { return loc1 ; } } return 0 ; }",
        "public static int is_bored ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == 'B' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int is_bored ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static int is_bored ( String arg0 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'B' ) { return loc1 ; } } return 0 ; }",
        "public static int is_bored ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ) { return 0 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 2 ; } else { return 0 ; } }",
        "public static int is_bored ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) =='' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int is_bored ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) =='' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int is_bored ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'B' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int is_bored ( String arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ( ) ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) =='' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int is_bored ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) =='' ) { loc1 ++ ; } } return loc1 ; }",
        "public static int is_bored ( T arg0 ) { if ( arg0 == null ) { return 0 ; } else if ( arg0. compareTo ( \"srini_string\" ) < 0 ) { return - 1 ; } else { return arg0. compareTo ( \"srini_string\" ) ; } }",
        "public static int is_bored ( T arg0 ) { if ( arg0 == null ) { return 0 ; } else if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { return 1 ; } else { return arg0. compareTo ( \"srini_string\" ) ; } }",
        "public static int is_bored ( S arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return ( arg0. compareTo ( \"srini_string\" ) < 0 ) ; }",
        "public static int is_bored ( T arg0 ) { if ( arg0 == null ) { return 0 ; } else if ( arg0. compareTo ( \"srini_string\" ) == 0 ) { return 1 ; } else { return arg0. compareTo ( \"srini_string\" ) + 1 ; } }",
        "public static int is_bored ( T arg0 ) { if ( arg0 == null ) { return 0 ; } else { return ( arg0. compareTo ( \"srini_string\" ) < 0 ) ; } }",
        "public static int is_bored ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) =='' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int is_bored ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0. length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) =='' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int is_bored ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'B' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int is_bored ( String arg0 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) =='' ) { return loc1 ; } } return 0 ; }",
        "public static int is_bored ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == '_' ) { loc0 ++ ; } } return loc0 ; }"
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) { \n        if (x + y == z || x + z == y) \n            return true;\n    }\n    return false;\n}",
      "target": "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y && (int)z == z) { \n        if (x + y == z || x + z == y || y + z == x) \n            return true;\n    }\n    return false;\n}",
      "function range": "17,5-23,5",
      "raw_output": [
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg2 ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return true ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg2 ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return true ; } return ( arg0 + arg1 ) == arg2 ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg1 ; }",
        "boolean function ( double arg0, double arg1, double arg2 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) arg1 ; double loc2 = ( double ) arg2 ; if ( loc0 == 0.0 && loc1 == 0.0 ) { return true ; } else if ( loc0 == 0.0 && loc1 == 0.0 ) { return true ; } else { return false ; } }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg2 ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return true ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg2 ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg1 ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return true ; } return ( arg0 + arg1 ) == arg2 ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) * arg2 == arg1 ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg1 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( arg0 + arg1 ) == arg2 ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { int loc0 = arg0 + arg1 ; int loc1 = arg2 + arg1 ; return ( loc0 == loc1 ) && ( loc0 == loc0 ) ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) return false ; if ( arg1 < 0 ) return true ; if ( arg2 < 0 ) return false ; return ( arg0 + arg1 ) == arg1 ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg1 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 * arg1 + arg2 <= 0 ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 + \"srini_string\" + arg2 ) ; } else { return arg0 + arg1 + arg2 == 0 ; } }",
        "boolean function ( int arg0, int arg1, int arg2 ) { int loc0 = arg0 + arg1 ; int loc1 = arg2 + arg1 ; return ( loc0 == loc1 ) && ( loc0 == loc0 ) ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { if ( arg1 < 0 ) { return false ; } else { return ( arg0 + arg1 ) == arg2 ; } } else { return ( arg0 + arg1 ) == arg2 ; } }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { if ( arg1 < 0 ) { return false ; } else { return ( arg0 + arg1 ) == arg2 ; } } else { return ( arg1 + arg2 ) == arg2 ; } }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { if ( arg1 < 0 ) { return false ; } else { return ( arg0 + arg1 ) == arg2 ; } } else { return arg0 + arg1 == arg2 ; } }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { if ( arg1 < 0 ) { return false ; } else { return ( arg0 + arg1 ) == arg2 ; } } else if ( arg1 < 0 ) { return false ; } else { return true ; } }",
        "boolean function ( final double arg0, final double arg1, final double arg2 ) { final double loc0 = arg0 + arg1 ; final double loc1 = arg2 + arg1 ; return ( loc0 == loc1 ) && ( loc0 == loc0 ) ; }",
        "boolean function ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg1 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( arg0 + arg1 ) == arg2 ; }",
        "boolean function ( final double arg0, final double arg1, final double arg2 ) { final double loc0 = ( double ) arg0 + ( double ) arg1 ; final double loc1 = ( double ) arg2 ; return ( loc0 == loc1 ) && ( loc0 == loc0 ) ; }",
        "boolean function ( final double arg0, final double arg1, final double arg2 ) { final double loc0 = ( double ) arg0 + ( double ) arg1 ; final double loc1 = ( double ) arg2 ; return ( loc0 * loc0 + loc1 * loc1 ) == 0 ; }",
        "boolean function ( final double arg0, final double arg1, final double arg2 ) { final double loc0 = ( double ) arg0 + ( double ) arg1 ; final double loc1 = ( double ) arg2 ; return ( loc0 * loc0 + loc1 * loc1 ) == 0.0 ; }"
      ],
      "mid_translation": [
        "Returns true if x + y + z is an int.",
        "Returns true if x + y + z is an integer.",
        "Check if x + y + z is an int.",
        "Checks if x + y + z is an int.",
        "Check if x + y + z is an integer."
      ],
      "output": [
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg2 ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return true ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg2 ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return true ; } return ( arg0 + arg1 ) == arg2 ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg1 ; }",
        "public static boolean any_int ( double arg0, double arg1, double arg2 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) arg1 ; double loc2 = ( double ) arg2 ; if ( loc0 == 0.0 && loc1 == 0.0 ) { return true ; } else if ( loc0 == 0.0 && loc1 == 0.0 ) { return true ; } else { return false ; } }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg2 ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return true ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg2 ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) == arg1 ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return true ; } return ( arg0 + arg1 ) == arg2 ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { return false ; } if ( arg1 < 0 ) { return false ; } if ( arg2 < 0 ) { return false ; } return ( arg0 + arg1 ) * arg2 == arg1 ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg1 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( arg0 + arg1 ) == arg2 ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { int loc0 = arg0 + arg1 ; int loc1 = arg2 + arg1 ; return ( loc0 == loc1 ) && ( loc0 == loc0 ) ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) return false ; if ( arg1 < 0 ) return true ; if ( arg2 < 0 ) return false ; return ( arg0 + arg1 ) == arg1 ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg1 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 * arg1 + arg2 <= 0 ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 + \"srini_string\" + arg2 ) ; } else { return arg0 + arg1 + arg2 == 0 ; } }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { int loc0 = arg0 + arg1 ; int loc1 = arg2 + arg1 ; return ( loc0 == loc1 ) && ( loc0 == loc0 ) ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { if ( arg1 < 0 ) { return false ; } else { return ( arg0 + arg1 ) == arg2 ; } } else { return ( arg0 + arg1 ) == arg2 ; } }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { if ( arg1 < 0 ) { return false ; } else { return ( arg0 + arg1 ) == arg2 ; } } else { return ( arg1 + arg2 ) == arg2 ; } }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { if ( arg1 < 0 ) { return false ; } else { return ( arg0 + arg1 ) == arg2 ; } } else { return arg0 + arg1 == arg2 ; } }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { if ( arg1 < 0 ) { return false ; } else { return ( arg0 + arg1 ) == arg2 ; } } else if ( arg1 < 0 ) { return false ; } else { return true ; } }",
        "public static boolean any_int ( final double arg0, final double arg1, final double arg2 ) { final double loc0 = arg0 + arg1 ; final double loc1 = arg2 + arg1 ; return ( loc0 == loc1 ) && ( loc0 == loc0 ) ; }",
        "public static boolean any_int ( int arg0, int arg1, int arg2 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg1 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( arg0 + arg1 ) == arg2 ; }",
        "public static boolean any_int ( final double arg0, final double arg1, final double arg2 ) { final double loc0 = ( double ) arg0 + ( double ) arg1 ; final double loc1 = ( double ) arg2 ; return ( loc0 == loc1 ) && ( loc0 == loc0 ) ; }",
        "public static boolean any_int ( final double arg0, final double arg1, final double arg2 ) { final double loc0 = ( double ) arg0 + ( double ) arg1 ; final double loc1 = ( double ) arg2 ; return ( loc0 * loc0 + loc1 * loc1 ) == 0 ; }",
        "public static boolean any_int ( final double arg0, final double arg1, final double arg2 ) { final double loc0 = ( double ) arg0 + ( double ) arg1 ; final double loc1 = ( double ) arg2 ; return ( loc0 * loc0 + loc1 * loc1 ) == 0.0 ; }"
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (Character.isLowerCase(c)) { \n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "target": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        } \n        else if (Character.isLowerCase(c)) { \n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-32,5",
      "raw_output": [
        "String function ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; return Base64. getEncoder ( ). encode ( arg0 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return Base64. getEncoder ( ). encode ( arg0 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return Base64. encode ( arg0. getBytes ( ) ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; return Base64. encode ( arg0. getBytes ( ) ) ; }",
        "String function ( String arg0 ) { try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "Buffer function ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; encode ( arg0, loc0 ) ; return loc0. toByteArray ( ) ; }",
        "String function ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; encode ( arg0, loc0 ) ; return loc0. toString ( ) ; }",
        "String function ( Message arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0. encode ( ) ; }",
        "String function ( Message arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0. toString ( ) ; }",
        "Buffer function ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0. write ( loc0 ) ; return loc0. toByteArray ( ) ; }",
        "String function ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; encode ( arg0, loc0 ) ; return loc0. toString ( ) ; }",
        "Buffer function ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; encode ( arg0, loc0 ) ; return loc0. toByteArray ( ) ; }",
        "Buffer function ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0. write ( loc0 ) ; return loc0. toByteArray ( ) ; }",
        "String function ( Message arg0 ) { return Base64. getEncoder ( ). encode ( arg0 ) ; }",
        "Buffer function ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0. encode ( loc0 ) ; return loc0. toByteArray ( ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" + arg0 ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return Base64. getEncoder ( ). encode ( arg0 ) ; }",
        "byte [ ] function ( String arg0 ) { if ( arg0 == null ) { return null ; } return Base64. getEncoder ( ). encode ( arg0, Base64. DEFAULT ) ; }",
        "byte [ ] function ( String arg0 ) { if ( arg0 == null ) { return null ; } return Base64. getEncoder ( ). encode ( arg0 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return Base64. getEncoder ( ). encode ( arg0, Base64. DEFAULT ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return SEPA. encode ( arg0 ) ; }"
      ],
      "mid_translation": [
        "Encode a message string.",
        "This method encodes the specified message.",
        "This method encodes the given message.",
        "This method encodes a message in a SEPA standard format.",
        "Encode a message in a SEPA language."
      ],
      "output": [
        "public static String encode ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; return Base64. getEncoder ( ). encode ( arg0 ) ; }",
        "public static String encode ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return Base64. getEncoder ( ). encode ( arg0 ) ; }",
        "public static String encode ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return Base64. encode ( arg0. getBytes ( ) ) ; }",
        "public static String encode ( String arg0 ) { if ( arg0 == null ) return \"srini_string\" ; return Base64. encode ( arg0. getBytes ( ) ) ; }",
        "public static String encode ( String arg0 ) { try { return URLEncoder. encode ( arg0, \"srini_string\" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }",
        "public static Buffer encode ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; encode ( arg0, loc0 ) ; return loc0. toByteArray ( ) ; }",
        "public static String encode ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; encode ( arg0, loc0 ) ; return loc0. toString ( ) ; }",
        "public static String encode ( Message arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0. encode ( ) ; }",
        "public static String encode ( Message arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0. toString ( ) ; }",
        "public static Buffer encode ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0. write ( loc0 ) ; return loc0. toByteArray ( ) ; }",
        "public static String encode ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; encode ( arg0, loc0 ) ; return loc0. toString ( ) ; }",
        "public static Buffer encode ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; encode ( arg0, loc0 ) ; return loc0. toByteArray ( ) ; }",
        "public static Buffer encode ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0. write ( loc0 ) ; return loc0. toByteArray ( ) ; }",
        "public static String encode ( Message arg0 ) { return Base64. getEncoder ( ). encode ( arg0 ) ; }",
        "public static Buffer encode ( Message arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0. encode ( loc0 ) ; return loc0. toByteArray ( ) ; }",
        "public static String encode ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String encode ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String encode ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String encode ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. startsWith ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String encode ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" + arg0 ; } }",
        "public static String encode ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return Base64. getEncoder ( ). encode ( arg0 ) ; }",
        "public static byte [ ] encode ( String arg0 ) { if ( arg0 == null ) { return null ; } return Base64. getEncoder ( ). encode ( arg0, Base64. DEFAULT ) ; }",
        "public static byte [ ] encode ( String arg0 ) { if ( arg0 == null ) { return null ; } return Base64. getEncoder ( ). encode ( arg0 ) ; }",
        "public static String encode ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return Base64. getEncoder ( ). encode ( arg0, Base64. DEFAULT ) ; }",
        "public static String encode ( String arg0 ) { if ( arg0 == null ) { return \"srini_string\" ; } return SEPA. encode ( arg0 ) ; }"
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c; \n    }\n    return result;\n}",
      "target": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c - '0'; \n    }\n    return result;\n}",
      "function range": "22,5-35,5",
      "raw_output": [
        "String function ( ) { return \"srini_string\" ; }",
        "void function ( ) { SkkBuilder loc0 = new SkkBuilder ( ) ; loc0. build ( ) ; }",
        "void function ( ) { Skikasdkd loc0 = new Skikasdkd ( ) ; loc0. parse ( \"srini_string\" ) ; }",
        "void function ( ) { Skikasdkd loc0 = new Skikasdkd ( ) ; loc0. init ( ) ; }",
        "void function ( ) { Skikasdkd loc0 = new Skikasdkd ( ) ; loc0. compute ( ) ; }",
        "int [ ] function ( int arg0, int arg1 ) { return skjkasdkd ( arg0, arg1, 1 ) ; }",
        "int [ ] function ( int arg0 ) { return skjkasdkd ( arg0, 1 ) ; }",
        "int [ ] function ( int arg0 ) { return skjkasdkd ( arg0, 0 ) ; }",
        "int [ ] function ( int arg0, int arg1 ) { return skjkasdkd ( arg0, arg1, 0 ) ; }",
        "int [ ] function ( int arg0 ) { return skjkasdkd ( arg0 ) ; }",
        "int [ ] function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return skjkasdkd ( arg0 ) ; }",
        "int [ ] function ( int [ ] arg0 ) { if ( arg0 == null || arg0. length < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return skjkasdkd ( arg0, 0, arg0. length - 1 ) ; }",
        "int [ ] function ( int arg0, int arg1 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return skjkasdkd ( arg0, arg1 ) ; }",
        "int [ ] function ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0 [ loc1 ] = loc1 ; return loc0 ; }",
        "int [ ] function ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { if ( arg0 == null || arg0. length < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return skjkasdkd ( arg0, 0, arg0. length - 1 ) ; }",
        "int [ ] function ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "int [ ] function ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0 [ loc1 ] = loc1 ; return loc0 ; }",
        "int [ ] function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return skjkasdkd ( arg0 ) ; }",
        "int [ ] function ( int arg0 ) { return skjkasdkd ( arg0, 0 ) ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( \"srini_string\" ) ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( \"srini_string\" ) ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { if ( arg0 == null ) return null ; List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( arg0. get ( loc1 ) ) ; return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( \"srini_string\" ) ) { loc0. add ( arg0. get ( loc1 ). trim ( ) ) ; } } return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) == null ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "skjkasdkd.",
        "skjkasdkd ( int array lst )",
        "skjkasdkd ( int[] lst )",
        "skjkasdkd ( int [] lst )",
        "skjkasdkd ( lst )"
      ],
      "output": [
        "public static String skjkasdkd ( ) { return \"srini_string\" ; }",
        "public static void skjkasdkd ( ) { SkkBuilder loc0 = new SkkBuilder ( ) ; loc0. build ( ) ; }",
        "public static void skjkasdkd ( ) { Skikasdkd loc0 = new Skikasdkd ( ) ; loc0. parse ( \"srini_string\" ) ; }",
        "public static void skjkasdkd ( ) { Skikasdkd loc0 = new Skikasdkd ( ) ; loc0. init ( ) ; }",
        "public static void skjkasdkd ( ) { Skikasdkd loc0 = new Skikasdkd ( ) ; loc0. compute ( ) ; }",
        "public static int [ ] skjkasdkd ( int arg0, int arg1 ) { return skjkasdkd ( arg0, arg1, 1 ) ; }",
        "public static int [ ] skjkasdkd ( int arg0 ) { return skjkasdkd ( arg0, 1 ) ; }",
        "public static int [ ] skjkasdkd ( int arg0 ) { return skjkasdkd ( arg0, 0 ) ; }",
        "public static int [ ] skjkasdkd ( int arg0, int arg1 ) { return skjkasdkd ( arg0, arg1, 0 ) ; }",
        "public static int [ ] skjkasdkd ( int arg0 ) { return skjkasdkd ( arg0 ) ; }",
        "public static int [ ] skjkasdkd ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return skjkasdkd ( arg0 ) ; }",
        "public static int [ ] skjkasdkd ( int [ ] arg0 ) { if ( arg0 == null || arg0. length < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return skjkasdkd ( arg0, 0, arg0. length - 1 ) ; }",
        "public static int [ ] skjkasdkd ( int arg0, int arg1 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return skjkasdkd ( arg0, arg1 ) ; }",
        "public static int [ ] skjkasdkd ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0 [ loc1 ] = loc1 ; return loc0 ; }",
        "public static int [ ] skjkasdkd ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "public static int [ ] skjkasdkd ( int [ ] arg0 ) { if ( arg0 == null || arg0. length < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return skjkasdkd ( arg0, 0, arg0. length - 1 ) ; }",
        "public static int [ ] skjkasdkd ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "public static int [ ] skjkasdkd ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0 [ loc1 ] = loc1 ; return loc0 ; }",
        "public static int [ ] skjkasdkd ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return skjkasdkd ( arg0 ) ; }",
        "public static int [ ] skjkasdkd ( int arg0 ) { return skjkasdkd ( arg0, 0 ) ; }",
        "public static List < String > skjkasdkd ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( \"srini_string\" ) ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "public static List < String > skjkasdkd ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( \"srini_string\" ) ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "public static List < T > skjkasdkd ( List < T > arg0 ) { if ( arg0 == null ) return null ; List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( arg0. get ( loc1 ) ) ; return loc0 ; }",
        "public static List < String > skjkasdkd ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( \"srini_string\" ) ) { loc0. add ( arg0. get ( loc1 ). trim ( ) ) ; } } return loc0 ; }",
        "public static List < T > skjkasdkd ( List < T > arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) == null ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }"
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) { \n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
      "target": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) \n                    || (state.equals(\"lower\") && !str_key.toLowerCase().equals(str_key))) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
      "function range": "16,5-43,5",
      "raw_output": [
        "boolean function ( Object arg0, int arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } switch ( arg0 ) { case 0 : return true ; case 1 : return false ; case 2 : return true ; default : return false ; } }",
        "boolean function ( Object arg0, int arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } if ( arg1 == 0 ) { throw new NullPointerException ( \"srini_string\" ) ; } return true ; }",
        "boolean function ( Object arg0 ) { if ( arg0 == null ) return false ; if ( arg0 instanceof Map ) return ( ( Map ) arg0 ). containsKey ( \"srini_string\" ) ; if ( arg0 instanceof List ) return ( ( List ) arg0 ). size ( ) == 0 ; return ( ( List ) arg0 ). get ( 0 ) ; }",
        "boolean function ( Object arg0, int arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } switch ( arg0 ) { case 0 : return true ; case 1 : return false ; case 2 : return true ; default : return false ; } }",
        "boolean function ( Object arg0, int arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } switch ( arg1 ) { case 0 : return true ; case 1 : return false ; case 2 : return true ; default : return false ; } }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( int loc0 = 0 ; loc0 < arg1. length ( ) ; loc0 ++ ) { if ( arg0. equalsIgnoreCase ( arg1. charAt ( loc0 ) ) ) { return true ; } } return false ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc0 ) ) ) { return true ; } } return false ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } for ( String loc0 : arg0. split ( \"srini_string\" ) ) { if ( loc0. equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } for ( String loc0 : arg0. split ( \"srini_string\" ) ) { if ( loc0. equals ( arg1 ) ) { return true ; } } return false ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( String loc0 : arg0. split ( \"srini_string\" ) ) { if ( loc0. equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( int loc0 = 0 ; loc0 < arg1. length ( ) ; loc0 ++ ) { if ( arg0. equalsIgnoreCase ( arg1. charAt ( loc0 ) ) ) { return true ; } } return false ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc0 ) ) ) { return true ; } } return false ; }",
        "boolean function ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) { return true ; } } return false ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( String loc0 : arg0. split ( \"srini_string\" ) ) { if ( loc0. equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } for ( String loc0 : arg0. split ( \"srini_string\" ) ) { if ( loc0. equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "boolean function ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) { return true ; } } return false ; }",
        "boolean function ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( loc0. getKey ( ). equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "boolean function ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) return false ; for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) return true ; } return false ; }",
        "boolean function ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( loc0. getKey ( ) == arg1 ) { return true ; } } return false ; }",
        "boolean function ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) return false ; for ( Entry loc0 : arg0. entrySet ( ) ) { if ( loc0. getKey ( ). equalsIgnoreCase ( arg1 ) ) return true ; } return false ; }",
        "boolean function ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) { return true ; } } return false ; }",
        "boolean function ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } else { for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) { return true ; } } return false ; } }",
        "boolean function ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( loc0. getKey ( ). equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "boolean function ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) return false ; for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) return true ; } return false ; }",
        "boolean function ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) return false ; for ( Entry loc0 : arg0. entrySet ( ) ) { if ( loc0. getKey ( ). equalsIgnoreCase ( arg1 ) ) return true ; } return false ; }"
      ],
      "mid_translation": [
        "check_dict_case Method.",
        "check_dict_case This method checks if the dictionary is case insensitive.",
        "check_dict_case This method checks if the dictionary is case - insensitive.",
        "check_dict_case This method checks if the dictionary is case sensitive.",
        "check_dict_case This method checks the dictionary to see if it is case insensitive."
      ],
      "output": [
        "",
        "public static boolean check_dict_case ( Object arg0, int arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } if ( arg1 == 0 ) { throw new NullPointerException ( \"srini_string\" ) ; } return true ; }",
        "public static boolean check_dict_case ( Object arg0 ) { if ( arg0 == null ) return false ; if ( arg0 instanceof Map ) return ( ( Map ) arg0 ). containsKey ( \"srini_string\" ) ; if ( arg0 instanceof List ) return ( ( List ) arg0 ). size ( ) == 0 ; return ( ( List ) arg0 ). get ( 0 ) ; }",
        "",
        "",
        "public static boolean check_dict_case ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( int loc0 = 0 ; loc0 < arg1. length ( ) ; loc0 ++ ) { if ( arg0. equalsIgnoreCase ( arg1. charAt ( loc0 ) ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc0 ) ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } for ( String loc0 : arg0. split ( \"srini_string\" ) ) { if ( loc0. equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } for ( String loc0 : arg0. split ( \"srini_string\" ) ) { if ( loc0. equals ( arg1 ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( String loc0 : arg0. split ( \"srini_string\" ) ) { if ( loc0. equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( int loc0 = 0 ; loc0 < arg1. length ( ) ; loc0 ++ ) { if ( arg0. equalsIgnoreCase ( arg1. charAt ( loc0 ) ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) { if ( arg1. equalsIgnoreCase ( arg0. charAt ( loc0 ) ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( String arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( String loc0 : arg0. split ( \"srini_string\" ) ) { if ( loc0. equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( String arg0, String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } for ( String loc0 : arg0. split ( \"srini_string\" ) ) { if ( loc0. equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( loc0. getKey ( ). equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) return false ; for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) return true ; } return false ; }",
        "public static boolean check_dict_case ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( loc0. getKey ( ) == arg1 ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) return false ; for ( Entry loc0 : arg0. entrySet ( ) ) { if ( loc0. getKey ( ). equalsIgnoreCase ( arg1 ) ) return true ; } return false ; }",
        "public static boolean check_dict_case ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } else { for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) { return true ; } } return false ; } }",
        "public static boolean check_dict_case ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) { return false ; } for ( Entry loc0 : arg0. entrySet ( ) ) { if ( loc0. getKey ( ). equalsIgnoreCase ( arg1 ) ) { return true ; } } return false ; }",
        "public static boolean check_dict_case ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) return false ; for ( Entry loc0 : arg0. entrySet ( ) ) { if ( arg1. equalsIgnoreCase ( loc0. getKey ( ) ) ) return true ; } return false ; }",
        "public static boolean check_dict_case ( Dictionary arg0, String arg1 ) { if ( arg0 == null ) return false ; for ( Entry loc0 : arg0. entrySet ( ) ) { if ( loc0. getKey ( ). equalsIgnoreCase ( arg1 ) ) return true ; } return false ; }"
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = false; \n        for (int j = 2; j < i; j += 1){ \n            if (i % j == 0) { \n                is_prime = false; \n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
      "target": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true; \n        for (int j = 2; j < i; j += 1){ \n            if (i % j == 0) { \n                is_prime = false; \n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
      "function range": "17,5-30,5",
      "raw_output": [
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 - 1 ) ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 * arg0 ) ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 % arg0 ) ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += arg0 ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( arg0 >> loc1 ) ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 * arg0 ) ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += arg0 ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 - 1 ) ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 % arg0 ) ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { if ( loc1 < 0 ) loc0 ++ ; } return loc0 ; }",
        "int function ( Integer [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) loc0 ++ ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { if ( loc1 < 0 ) loc0 ++ ; } return loc0 ; }",
        "int function ( Integer [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) loc0 ++ ; } return loc0 ; }",
        "int function ( Integer [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "List < T > function ( List < T > arg0, int arg1 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > arg1 ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "List < T > function ( List < T > arg0, int arg1 ) { List < T > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > arg1 ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < > ( ) ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0. add ( arg0. get ( loc2 ). intValue ( ) ) ; loc1 ++ ; } return loc0 ; }",
        "List < T > function ( List < T > arg0, int arg1 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > arg1 ) loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0, int arg1 ) { List < T > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > arg1 ) loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "String function ( long arg0 ) { if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( long arg0 ) { if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else return \"srini_string\" ; }",
        "String function ( long arg0 ) { if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 >= arg0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } return \"srini_string\" ; }",
        "String function ( long arg0 ) { if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 1 ) { return \"srini_string\" ; } else return \"srini_string\" ; }",
        "String function ( long arg0 ) { if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else return \"srini_string\" ; }"
      ],
      "mid_translation": [
        "Count up to n primes.",
        "Count up to n primes",
        "Count the number of primes up to n.",
        "count_up_to returns list of primes up to n",
        "Method count_up_to."
      ],
      "output": [
        "public static int count_up_to ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 - 1 ) ; } return loc0 ; }",
        "public static int count_up_to ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 * arg0 ) ; } return loc0 ; }",
        "public static int count_up_to ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 % arg0 ) ; } return loc0 ; }",
        "public static int count_up_to ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += arg0 ; } return loc0 ; }",
        "public static int count_up_to ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( arg0 >> loc1 ) ; } return loc0 ; }",
        "public static int count_up_to ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 * arg0 ) ; } return loc0 ; }",
        "public static int count_up_to ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += arg0 ; } return loc0 ; }",
        "public static int count_up_to ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 - 1 ) ; } return loc0 ; }",
        "public static int count_up_to ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 += ( loc1 % arg0 ) ; } return loc0 ; }",
        "public static int count_up_to ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { if ( loc1 < 0 ) loc0 ++ ; } return loc0 ; }",
        "public static int count_up_to ( Integer [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) loc0 ++ ; } return loc0 ; }",
        "public static int count_up_to ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { if ( loc1 < 0 ) loc0 ++ ; } return loc0 ; }",
        "public static int count_up_to ( Integer [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) loc0 ++ ; } return loc0 ; }",
        "public static int count_up_to ( Integer [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_up_to ( Integer [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static List < T > count_up_to ( List < T > arg0, int arg1 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > arg1 ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "public static List < T > count_up_to ( List < T > arg0, int arg1 ) { List < T > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > arg1 ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "public static List < Integer > count_up_to ( List < Integer > arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < > ( ) ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0. add ( arg0. get ( loc2 ). intValue ( ) ) ; loc1 ++ ; } return loc0 ; }",
        "public static List < T > count_up_to ( List < T > arg0, int arg1 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > arg1 ) loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < T > count_up_to ( List < T > arg0, int arg1 ) { List < T > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > arg1 ) loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static String count_up_to ( long arg0 ) { if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String count_up_to ( long arg0 ) { if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else return \"srini_string\" ; }",
        "public static String count_up_to ( long arg0 ) { if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 >= arg0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } return \"srini_string\" ; }",
        "public static String count_up_to ( long arg0 ) { if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 1 ) { return \"srini_string\" ; } else return \"srini_string\" ; }",
        "public static String count_up_to ( long arg0 ) { if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 < 0 ) { return \"srini_string\" ; } else if ( arg0 > 0 ) { return \"srini_string\" ; } else return \"srini_string\" ; }"
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10); \n}",
      "target": "public static int multiply(int a, int b) {\n    return Math.abs(a % 10) * Math.abs(b % 10); \n}",
      "function range": "13,5-15,5",
      "raw_output": [
        "BigInteger function ( BigInteger arg0, BigInteger arg1 ) { return new BigInteger ( arg0. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "BigInteger function ( BigInteger arg0, BigInteger arg1 ) { return new BigInteger ( arg0. toString ( ) * arg1. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "int function ( int arg0, int arg1 ) { long loc0 = ( ( long ) arg0 ) * ( ( long ) arg1 ) ; return ( int ) loc0 ; }",
        "int function ( int arg0, int arg1 ) { return arg0 * arg1 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 * arg1 ; int loc1 = arg1 * arg1 ; return ( loc0 * loc1 ) / loc1 ; }",
        "Multiply function ( Number arg0, Number arg1 ) { return new Multiplication ( arg0. doubleValue ( ) * arg1. doubleValue ( ), arg1. doubleValue ( ) ) ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = arg1 / arg1 ; return ( loc0 * loc1 ) / loc1 ; }",
        "BigDecimal function ( Number arg0, Number arg1 ) { return new BigDecimal ( arg0. toString ( ) * arg1. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "BigInteger function ( BigInteger arg0, BigInteger arg1 ) { return new BigInteger ( arg0. toString ( ) * arg1. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "Number function ( Number arg0, Number arg1 ) { return new Number ( arg0. doubleValue ( ) * arg1. doubleValue ( ), arg1. doubleValue ( ) ) ; }",
        "int function ( int arg0, int arg1 ) { long loc0 = ( ( long ) arg0 ) * ( ( long ) arg1 ) ; return ( int ) loc0 ; }",
        "int function ( int arg0, int arg1 ) { long loc0 = ( ( long ) arg0 ) * ( ( long ) arg1 ) ; return ( int ) ( loc0 * arg1 ) ; }",
        "int function ( int arg0, int arg1 ) { long loc0 = ( ( long ) arg0 * ( ( long ) arg1 ) ) ; long loc1 = ( ( long ) arg1 ) ; return ( int ) ( loc0 * loc1 ) ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == 0 ) { return 1 ; } else if ( arg1 == 0 ) { return 0 ; } else { return arg0 * arg1 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == 0 ) { return 1 ; } if ( arg1 == 0 ) { return 0 ; } return arg0 * arg1 ; }",
        "BigDecimal function ( Number arg0, Number arg1 ) { BigDecimal loc0 = new BigDecimal ( arg0. doubleValue ( ) * arg1. doubleValue ( ) ) ; return loc0 ; }",
        "BigDecimal function ( Number arg0, Number arg1 ) { BigDecimal loc0 = new BigDecimal ( arg0. doubleValue ( ) * ( arg1. doubleValue ( ) - 1 ) ) ; return loc0 ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 * arg1 ) ; double loc1 = ( double ) ( arg1 * arg1 ) ; return new Double ( loc0 * loc1 ) ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = ( loc0 * arg1 ) / ( loc0 * arg1 ) ; return loc1 ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 * arg1 ) ; double loc1 = ( double ) ( arg1 / arg0 ) ; return new Double ( loc0 * loc1 ) ; }",
        "BigInteger function ( BigInteger arg0, BigInteger arg1 ) { return new BigInteger ( arg0. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "BigInteger function ( BigInteger arg0, BigInteger arg1 ) { return new BigInteger ( arg0. toString ( ) * arg1. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "int function ( int arg0, int arg1 ) { long loc0 = ( ( long ) arg0 ) * ( ( long ) arg1 ) ; return ( int ) loc0 ; }",
        "int function ( int arg0, int arg1 ) { return arg0 * arg1 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 * arg1 ; int loc1 = arg1 * arg1 ; return ( loc0 * loc1 ) / loc1 ; }"
      ],
      "mid_translation": [
        "Multiply two integers.",
        "Multiply two numbers.",
        "Multiplies two integers.",
        "Multiplies two numbers.",
        "Multiply two integers."
      ],
      "output": [
        "public static BigInteger multiply ( BigInteger arg0, BigInteger arg1 ) { return new BigInteger ( arg0. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "public static BigInteger multiply ( BigInteger arg0, BigInteger arg1 ) { return new BigInteger ( arg0. toString ( ) * arg1. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "public static int multiply ( int arg0, int arg1 ) { long loc0 = ( ( long ) arg0 ) * ( ( long ) arg1 ) ; return ( int ) loc0 ; }",
        "public static int multiply ( int arg0, int arg1 ) { return arg0 * arg1 ; }",
        "public static int multiply ( int arg0, int arg1 ) { int loc0 = arg0 * arg1 ; int loc1 = arg1 * arg1 ; return ( loc0 * loc1 ) / loc1 ; }",
        "public static Multiply multiply ( Number arg0, Number arg1 ) { return new Multiplication ( arg0. doubleValue ( ) * arg1. doubleValue ( ), arg1. doubleValue ( ) ) ; }",
        "public static double multiply ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = arg1 / arg1 ; return ( loc0 * loc1 ) / loc1 ; }",
        "public static BigDecimal multiply ( Number arg0, Number arg1 ) { return new BigDecimal ( arg0. toString ( ) * arg1. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "public static BigInteger multiply ( BigInteger arg0, BigInteger arg1 ) { return new BigInteger ( arg0. toString ( ) * arg1. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "public static Number multiply ( Number arg0, Number arg1 ) { return new Number ( arg0. doubleValue ( ) * arg1. doubleValue ( ), arg1. doubleValue ( ) ) ; }",
        "public static int multiply ( int arg0, int arg1 ) { long loc0 = ( ( long ) arg0 ) * ( ( long ) arg1 ) ; return ( int ) loc0 ; }",
        "public static int multiply ( int arg0, int arg1 ) { long loc0 = ( ( long ) arg0 ) * ( ( long ) arg1 ) ; return ( int ) ( loc0 * arg1 ) ; }",
        "public static int multiply ( int arg0, int arg1 ) { long loc0 = ( ( long ) arg0 * ( ( long ) arg1 ) ) ; long loc1 = ( ( long ) arg1 ) ; return ( int ) ( loc0 * loc1 ) ; }",
        "public static int multiply ( int arg0, int arg1 ) { if ( arg0 == 0 ) { return 1 ; } else if ( arg1 == 0 ) { return 0 ; } else { return arg0 * arg1 ; } }",
        "public static int multiply ( int arg0, int arg1 ) { if ( arg0 == 0 ) { return 1 ; } if ( arg1 == 0 ) { return 0 ; } return arg0 * arg1 ; }",
        "public static BigDecimal multiply ( Number arg0, Number arg1 ) { BigDecimal loc0 = new BigDecimal ( arg0. doubleValue ( ) * arg1. doubleValue ( ) ) ; return loc0 ; }",
        "public static BigDecimal multiply ( Number arg0, Number arg1 ) { BigDecimal loc0 = new BigDecimal ( arg0. doubleValue ( ) * ( arg1. doubleValue ( ) - 1 ) ) ; return loc0 ; }",
        "public static double multiply ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 * arg1 ) ; double loc1 = ( double ) ( arg1 * arg1 ) ; return new Double ( loc0 * loc1 ) ; }",
        "public static double multiply ( double arg0, double arg1 ) { double loc0 = arg0 * arg1 ; double loc1 = ( loc0 * arg1 ) / ( loc0 * arg1 ) ; return loc1 ; }",
        "public static double multiply ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 * arg1 ) ; double loc1 = ( double ) ( arg1 / arg0 ) ; return new Double ( loc0 * loc1 ) ; }",
        "public static BigInteger multiply ( BigInteger arg0, BigInteger arg1 ) { return new BigInteger ( arg0. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "public static BigInteger multiply ( BigInteger arg0, BigInteger arg1 ) { return new BigInteger ( arg0. toString ( ) * arg1. toString ( ) ). multiply ( arg1. toString ( ) ) ; }",
        "public static int multiply ( int arg0, int arg1 ) { long loc0 = ( ( long ) arg0 ) * ( ( long ) arg1 ) ; return ( int ) loc0 ; }",
        "public static int multiply ( int arg0, int arg1 ) { return arg0 * arg1 ; }",
        "public static int multiply ( int arg0, int arg1 ) { int loc0 = arg0 * arg1 ; int loc1 = arg1 * arg1 ; return ( loc0 * loc1 ) / loc1 ; }"
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') \n            count += 1;\n    }\n    return count;\n}",
      "target": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n            count += 1;\n    }\n    return count;\n}",
      "function range": "11,5-19,5",
      "raw_output": [
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'a' ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 - 1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Count the number of uppercase characters in a string.",
        "Count the number of uppercase digits in a string.",
        "Count the number of uppercase chars in a string.",
        "Count the number of uppercase numbers in a string.",
        "Count the number of uppercase characters in a string"
      ],
      "output": [
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 'a' ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 - 1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0, loc2 = arg0. length ( ) ; loc1 < loc2 ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) loc0 ++ ; } return loc0 ; }",
        "public static int count_upper ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; ++ loc1 ) { if ( Character. isUpperCase ( arg0. charAt ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }"
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (value.substring(value.length() - 2).equals(\".5\")) { \n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num); \n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
      "target": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (value.length() >= 2 && value.substring(value.length() - 2).equals(\".5\")) { \n        result = num > 0 ? (int)Math.ceil(num) : (int)Math.floor(num); \n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
      "function range": "20,5-35,5",
      "raw_output": [
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. size ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. size ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc1 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < arg1. loc0 ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc1 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. size ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc1 ) ) { loc0 = arg1. get ( loc1 ) ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; if ( loc0 < loc2 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 - 1 ) == '0' ) { loc0 = arg1. get ( loc1 ) ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; if ( loc0 < loc2 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( String arg0, int arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { loc0 = arg0. lastIndexOf ( '.' ) ; } if ( loc0 < 0 ) { loc0 = arg0. lastIndexOf ( '.' ) ; } if ( loc0 < 0 ) { loc0 = arg0. lastIndexOf ( '.' ) ; } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; if ( loc0 < loc2 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc1 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. size ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc1 ) ) { return loc1 ; } } return - 1 ; }",
        "int function ( String arg0, List < Integer > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 ++ ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Get the closest integer value from a string.",
        "Gets the closest integer value from a string.",
        "Gets the closest integer value.",
        "Gets the closest integer from a string.",
        "Get the closest integer value for a string."
      ],
      "output": [
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. size ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. size ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc1 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < arg1. loc0 ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc1 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. size ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc1 ) ) { loc0 = arg1. get ( loc1 ) ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; if ( loc0 < loc2 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 - 1 ) == '0' ) { loc0 = arg1. get ( loc1 ) ; } } return loc0 ; }",
        "public static int closest_integer ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int closest_integer ( Integer [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int closest_integer ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( Integer [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int closest_integer ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; if ( loc0 < loc2 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, int arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { loc0 = arg0. lastIndexOf ( '.' ) ; } if ( loc0 < 0 ) { loc0 = arg0. lastIndexOf ( '.' ) ; } if ( loc0 < 0 ) { loc0 = arg0. lastIndexOf ( '.' ) ; } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. get ( 0 ) ; for ( int loc1 = 1 ; loc1 < arg1. size ( ) ; loc1 ++ ) { int loc2 = arg1. get ( loc1 - 1 ) ; if ( loc0 < loc2 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc1 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg1. size ( ) ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc1 ) ) { return loc1 ; } } return - 1 ; }",
        "public static int closest_integer ( String arg0, List < Integer > arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg1. size ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == arg1. get ( loc0 ) ) { loc0 ++ ; } } return loc0 ; }"
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i); \n\t}\n\treturn pile;\n}",
      "target": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n + 2 * i); \n\t}\n\treturn pile;\n}",
      "function range": "20,2-26,2",
      "raw_output": [
        "Pile function ( int arg0 ) { return new Pile ( arg0 ) ; }",
        "Pile function ( final int arg0 ) { return new Pile ( arg0 ) ; }",
        "Pile function ( int arg0, float arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "Pile function ( int arg0 ) { return new Pile ( arg0, new Size ( arg0 ) ) ; }",
        "Pile function ( int arg0 ) { return new Pile ( new Size ( arg0 ) ) ; }",
        "Pile function ( int arg0 ) { return new Pile ( arg0 ) ; }",
        "Pile function ( int arg0, float arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "Pile function ( int arg0, int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "Pile function ( final int arg0 ) { return new Pile ( arg0 ) ; }",
        "Pile function ( final int arg0, final int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "Pile < Integer > function ( int arg0 ) { return new Pile < Integer > ( arg0 ) ; }",
        "IPtile < Integer > function ( final int arg0 ) { return new IPtile < Integer > ( arg0 ) ; }",
        "IPtile < Integer > function ( int arg0 ) { return new IPtile < Integer > ( arg0 ) ; }",
        "Pile < Integer > function ( final int arg0 ) { return new Pile < Integer > ( arg0 ) ; }",
        "IPtile < Integer > function ( final int arg0 ) { return new IPtile ( arg0 ) ; }",
        "Pile function ( int arg0, int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "Pile function ( final int arg0, final int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "Pile function ( ) { return new Pile ( ) ; }",
        "Pile function ( int arg0, int arg1, int arg2 ) { return new Pile ( arg0, arg1, arg2 ) ; }",
        "Pile function ( int arg0, int arg1 ) { return Pile. make ( arg0, arg1 ) ; }",
        "Pile function ( int arg0, int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "Pile function ( final int arg0, final int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "Pile function ( ) { return new Pile ( ) ; }",
        "Pile function ( int arg0, int arg1, int arg2 ) { return make ( arg0, arg1, arg2, Pile. class ) ; }",
        "Pile function ( int arg0, int arg1 ) { return make ( arg0, arg1, null ) ; }"
      ],
      "mid_translation": [
        "Make a pile of the given size.",
        "Make a pile of the specified size.",
        "Make a pile of n integers.",
        "Make a pile.",
        "make a pile."
      ],
      "output": [
        "public static Pile make_a_pile ( int arg0 ) { return new Pile ( arg0 ) ; }",
        "public static Pile make_a_pile ( final int arg0 ) { return new Pile ( arg0 ) ; }",
        "public static Pile make_a_pile ( int arg0, float arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "public static Pile make_a_pile ( int arg0 ) { return new Pile ( arg0, new Size ( arg0 ) ) ; }",
        "public static Pile make_a_pile ( int arg0 ) { return new Pile ( new Size ( arg0 ) ) ; }",
        "public static Pile make_a_pile ( int arg0 ) { return new Pile ( arg0 ) ; }",
        "public static Pile make_a_pile ( int arg0, float arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "public static Pile make_a_pile ( int arg0, int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "public static Pile make_a_pile ( final int arg0 ) { return new Pile ( arg0 ) ; }",
        "public static Pile make_a_pile ( final int arg0, final int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "public static Pile < Integer > make_a_pile ( int arg0 ) { return new Pile < Integer > ( arg0 ) ; }",
        "public static IPtile < Integer > make_a_pile ( final int arg0 ) { return new IPtile < Integer > ( arg0 ) ; }",
        "public static IPtile < Integer > make_a_pile ( int arg0 ) { return new IPtile < Integer > ( arg0 ) ; }",
        "public static Pile < Integer > make_a_pile ( final int arg0 ) { return new Pile < Integer > ( arg0 ) ; }",
        "public static IPtile < Integer > make_a_pile ( final int arg0 ) { return new IPtile ( arg0 ) ; }",
        "public static Pile make_a_pile ( int arg0, int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "public static Pile make_a_pile ( final int arg0, final int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "public static Pile make_a_pile ( ) { return new Pile ( ) ; }",
        "public static Pile make_a_pile ( int arg0, int arg1, int arg2 ) { return new Pile ( arg0, arg1, arg2 ) ; }",
        "public static Pile make_a_pile ( int arg0, int arg1 ) { return Pile. make ( arg0, arg1 ) ; }",
        "public static Pile make_a_pile ( int arg0, int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "public static Pile make_a_pile ( final int arg0, final int arg1 ) { return new Pile ( arg0, arg1 ) ; }",
        "public static Pile make_a_pile ( ) { return new Pile ( ) ; }",
        "public static Pile make_a_pile ( int arg0, int arg1, int arg2 ) { return make ( arg0, arg1, arg2, Pile. class ) ; }",
        "public static Pile make_a_pile ( int arg0, int arg1 ) { return make ( arg0, arg1, null ) ; }"
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tString s_list = \"\"; \n\tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
      "target": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tif(s == null || s.isEmpty()) return result; \n\tString s_list = \"\";\n\tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
      "function range": "15,2-30,2",
      "raw_output": [
        "ArrayList function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "ArrayList < String > function ( String arg0 ) { ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "ArrayList < String > function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "ArrayList function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return ( loc0 ) ; }",
        "ArrayList < String > function ( String arg0 ) { ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "List < String > function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( ) ; while ( loc0. hasMoreTokens ( ) ) { loc1. add ( loc0. nextToken ( ). trim ( ) ) ; } return loc1 ; }",
        "List < String > function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; List < String > loc1 = null ; while ( loc0. hasMoreTokens ( ) ) { loc1 = loc0. nextToken ( ) ; } return loc1 ; }",
        "ArrayList < String > function ( String arg0 ) { ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "ArrayList < String > function ( String arg0 ) { if ( arg0 == null ) { return null ; } ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "ArrayList < String > function ( String arg0 ) { if ( arg0 == null ) return null ; ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "ArrayList < String > function ( String arg0 ) { if ( arg0 == null ) return null ; ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "ArrayList < String > function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; ArrayList < String > loc1 = new ArrayList ( ) ; while ( loc0. hasMoreTokens ( ) ) { loc1. add ( loc0. nextToken ( ) ) ; } return loc1 ; }",
        "ArrayList < String > function ( String arg0 ) { ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "ArrayList function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "ArrayList < String > function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "ArrayList function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return ( loc0 ) ; }",
        "ArrayList < String > function ( String arg0 ) { ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "ArrayList function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "ArrayList function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) loc0. add ( loc1 [ loc2 ]. trim ( ) ) ; return loc0 ; }",
        "ArrayList function ( String [ ] arg0 ) { ArrayList loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ]. trim ( ) ) ; return loc0 ; }",
        "ArrayList function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "ArrayList function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) loc0. add ( loc1 [ loc2 ]. toLowerCase ( ) ) ; return loc0 ; }"
      ],
      "mid_translation": [
        "Returns an ArrayList of all words in a string.",
        "Returns a list of words from a string.",
        "Returns an ArrayList of words from a String.",
        "Returns an ArrayList of all words in a String.",
        "words_strings returns an ArrayList of strings."
      ],
      "output": [
        "public static ArrayList words_strings ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static ArrayList < String > words_strings ( String arg0 ) { ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static ArrayList < String > words_strings ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static ArrayList words_strings ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return ( loc0 ) ; }",
        "public static ArrayList < String > words_strings ( String arg0 ) { ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "public static List < String > words_strings ( String arg0 ) { if ( arg0 == null ) { return null ; } List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > words_strings ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > words_strings ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "public static List < String > words_strings ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; List < String > loc1 = new ArrayList < String > ( ) ; while ( loc0. hasMoreTokens ( ) ) { loc1. add ( loc0. nextToken ( ). trim ( ) ) ; } return loc1 ; }",
        "public static List < String > words_strings ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; List < String > loc1 = null ; while ( loc0. hasMoreTokens ( ) ) { loc1 = loc0. nextToken ( ) ; } return loc1 ; }",
        "public static ArrayList < String > words_strings ( String arg0 ) { ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static ArrayList < String > words_strings ( String arg0 ) { if ( arg0 == null ) { return null ; } ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static ArrayList < String > words_strings ( String arg0 ) { if ( arg0 == null ) return null ; ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "public static ArrayList < String > words_strings ( String arg0 ) { if ( arg0 == null ) return null ; ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static ArrayList < String > words_strings ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0, \"srini_string\" ) ; ArrayList < String > loc1 = new ArrayList ( ) ; while ( loc0. hasMoreTokens ( ) ) { loc1. add ( loc0. nextToken ( ) ) ; } return loc1 ; }",
        "public static ArrayList < String > words_strings ( String arg0 ) { ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static ArrayList words_strings ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static ArrayList < String > words_strings ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static ArrayList words_strings ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return ( loc0 ) ; }",
        "public static ArrayList < String > words_strings ( String arg0 ) { ArrayList < String > loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "public static ArrayList words_strings ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static ArrayList words_strings ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) loc0. add ( loc1 [ loc2 ]. trim ( ) ) ; return loc0 ; }",
        "public static ArrayList words_strings ( String [ ] arg0 ) { ArrayList loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ]. trim ( ) ) ; return loc0 ; }",
        "public static ArrayList words_strings ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "public static ArrayList words_strings ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) loc0. add ( loc1 [ loc2 ]. toLowerCase ( ) ) ; return loc0 ; }"
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n    if(x < y) return -1; \n    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
      "target": "public static int choose_num(int x, int y) {\n    if(x > y) return -1; \n    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
      "function range": "14,5-19,5",
      "raw_output": [
        "int function ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / 2 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 + arg1 - 1 ) / 2 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 + arg1 - arg1 + 1 ) / 2 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 + ( arg1 - arg0 ) ) / 2 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 > loc1 ) { loc0 /= 2 ; loc1 /= 2 ; } return loc1 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / 2 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } while ( loc0 < loc1 ) { loc1 = loc0 + 1 ; } return ( loc1 - loc0 ) / 2 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } return loc0 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } while ( loc0 < loc1 ) { loc1 = loc0 + 1 ; } return loc1 ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; } return ( arg0 + arg1 ) / 2 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 + arg1 - 1 ) / 2 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / 2 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 > loc1 ) { loc0 -- ; loc1 = loc1 + 1 ; } return loc1 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 > loc1 ) { loc0 = loc0 + 1 ; loc1 -- ; } return loc1 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 > loc1 ) { loc0 -- ; while ( arg0 > loc0 ) { arg0 = loc0 ; } arg1 = loc1 ; } return arg0 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } return loc0 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) % ( arg1 - arg0 ) ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } while ( loc0 < loc1 ) { loc1 = loc0 + 1 ; } return loc1 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } return ( loc0 == loc1 )? arg0 : loc0 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; loc1 = loc0 + 1 ; } return loc1 ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; } else if ( arg1 < arg0 ) { return arg0 + \"srini_string\" ; } else if ( arg1 > arg1 ) { return arg1 - arg0 + 1 ; } return 0 ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; } else if ( arg1 < arg0 ) { return arg0 + \"srini_string\" ; } else { return arg1 - arg0 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; } if ( arg1 < arg0 ) { return arg0 + \"srini_string\" ; } else if ( arg1 > arg1 ) { return arg1 - arg0 ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { return ( arg0 + ( arg1 - arg0 ) ) / 2 ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; } if ( arg1 < arg0 ) { return arg0 + \"srini_string\" ; } else { return arg1 - arg0 ; } }"
      ],
      "mid_translation": [
        "Choose a number from x and y.",
        "Choose a number from x to y.",
        "Choose number from x and y.",
        "Choose number from x to y.",
        "Choose a number from x to y"
      ],
      "output": [
        "public static int choose_num ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / 2 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { return ( arg0 + arg1 - 1 ) / 2 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { return ( arg0 + arg1 - arg1 + 1 ) / 2 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { return ( arg0 + ( arg1 - arg0 ) ) / 2 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 > loc1 ) { loc0 /= 2 ; loc1 /= 2 ; } return loc1 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / 2 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } while ( loc0 < loc1 ) { loc1 = loc0 + 1 ; } return ( loc1 - loc0 ) / 2 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } return loc0 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } while ( loc0 < loc1 ) { loc1 = loc0 + 1 ; } return loc1 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; } return ( arg0 + arg1 ) / 2 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { return ( arg0 + arg1 - 1 ) / 2 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) / 2 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 > loc1 ) { loc0 -- ; loc1 = loc1 + 1 ; } return loc1 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 > loc1 ) { loc0 = loc0 + 1 ; loc1 -- ; } return loc1 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 > loc1 ) { loc0 -- ; while ( arg0 > loc0 ) { arg0 = loc0 ; } arg1 = loc1 ; } return arg0 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } return loc0 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { return ( arg0 - arg1 + 1 ) % ( arg1 - arg0 ) ; }",
        "public static int choose_num ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } while ( loc0 < loc1 ) { loc1 = loc0 + 1 ; } return loc1 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; } return ( loc0 == loc1 )? arg0 : loc0 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { int loc0 = arg0 ; int loc1 = arg1 ; while ( loc0 < loc1 ) { loc0 ++ ; loc1 = loc0 + 1 ; } return loc1 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; } else if ( arg1 < arg0 ) { return arg0 + \"srini_string\" ; } else if ( arg1 > arg1 ) { return arg1 - arg0 + 1 ; } return 0 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; } else if ( arg1 < arg0 ) { return arg0 + \"srini_string\" ; } else { return arg1 - arg0 ; } }",
        "public static int choose_num ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; } if ( arg1 < arg0 ) { return arg0 + \"srini_string\" ; } else if ( arg1 > arg1 ) { return arg1 - arg0 ; } else { return 0 ; } }",
        "public static int choose_num ( int arg0, int arg1 ) { return ( arg0 + ( arg1 - arg0 ) ) / 2 ; }",
        "public static int choose_num ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; } if ( arg1 < arg0 ) { return arg0 + \"srini_string\" ; } else { return arg1 - arg0 ; } }"
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg); \n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
      "target": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg); \n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
      "function range": "15,5-30,5",
      "raw_output": [
        "double function ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) ( arg1 - arg0 ) ; return ( loc0 > loc1? loc0 : loc1 ) / arg1 ; }",
        "double function ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) ( arg1 - arg0 ) ; return ( loc0 * loc1 ) / arg1 ; }",
        "double function ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) loc0 / arg1 ; return ( loc1 > loc0? loc1 : loc0 ) / arg1 ; }",
        "float function ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) ( arg1 - arg0 ) ; return ( loc0 > loc1? loc0 : loc1 ) / arg1 ; }",
        "double function ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) ( arg1 - arg0 ) ; return ( loc0 > loc1? loc0 : loc1 ) / loc0 ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Math. pow ( arg1, loc1 ) ; } return ( loc0 / arg0 ) ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 / arg1 ) ; double loc1 = ( double ) ( arg1 / arg1 ) ; return ( ( loc0 * loc0 ) / loc1 ) ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 / arg1 ) ; double loc1 = ( double ) ( arg1 / arg1 ) ; return ( loc0 * loc1 ) / loc1 ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 / arg1 ) ; double loc1 = ( double ) ( arg1 / arg1 ) ; return ( ( loc0 * loc1 ) / loc1 ) ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 / arg1 ) ; double loc1 = ( double ) ( arg0 / arg1 ) ; return ( loc0 * loc1 ) / loc1 ; }",
        "double function ( double arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 1 ; loc1 < arg1 ; loc1 ++ ) { loc0 += Math. pow ( arg0, loc1 ) ; } return ( loc0 / arg1 ) / arg1 ; }",
        "double function ( double arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 1 ; loc1 < arg1 ; loc1 ++ ) { loc0 += Math. pow ( arg0, loc1 ) ; } return ( loc0 / arg1 ) ; }",
        "double function ( double arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 1 ; loc1 < arg1 ; loc1 ++ ) { loc0 += arg0 ( loc1 - 1 ) ; } return ( loc0 / arg1 ) / arg1 ; }",
        "double function ( double arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 += Math. pow ( arg0, loc1 ) ; } return ( loc0 / arg1 ) / arg1 ; }",
        "double function ( double arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 1 ; loc1 < arg1 ; loc1 ++ ) { loc0 += Math. pow ( ( double ) arg0, loc1 ) ; } return ( loc0 / arg1 ) ; }",
        "double function ( N arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 / arg1 ; }",
        "double function ( N arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 / arg1 ; }",
        "double function ( N arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 / arg1 ; }",
        "double function ( long [ ] arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 / arg0. length ; }",
        "double function ( N arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 / arg0. size ( ) ; }",
        "double function ( int arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Math. pow ( arg1, loc1 ) ; } return ( loc0 / arg0 ) / arg1 ; }",
        "double function ( int arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Math. pow ( arg1, loc1 ) ; } return ( loc0 / arg0 ) / arg1 ; }",
        "double function ( int arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Math. pow ( ( double ) arg1, loc1 ) ; } return ( loc0 / arg0 ) / arg1 ; }",
        "double function ( int arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Math. pow ( ( double ) arg1, 2 ) ; } return ( loc0 / arg0 ) / arg1 ; }",
        "double function ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) arg1 / arg1 ; return ( ( loc0 * loc0 ) / loc1 ) ; }"
      ],
      "mid_translation": [
        "Rounds the avg value of n to m.",
        "Returns the rounded avg of n and m.",
        "Returns the rounded avg of n to m.",
        "Rounds the avg of n to m.",
        "Returns the rounded avg of n and m"
      ],
      "output": [
        "public static double rounded_avg ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) ( arg1 - arg0 ) ; return ( loc0 > loc1? loc0 : loc1 ) / arg1 ; }",
        "public static double rounded_avg ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) ( arg1 - arg0 ) ; return ( loc0 * loc1 ) / arg1 ; }",
        "public static double rounded_avg ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) loc0 / arg1 ; return ( loc1 > loc0? loc1 : loc0 ) / arg1 ; }",
        "public static float rounded_avg ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) ( arg1 - arg0 ) ; return ( loc0 > loc1? loc0 : loc1 ) / arg1 ; }",
        "public static double rounded_avg ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) ( arg1 - arg0 ) ; return ( loc0 > loc1? loc0 : loc1 ) / loc0 ; }",
        "public static double rounded_avg ( double arg0, double arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Math. pow ( arg1, loc1 ) ; } return ( loc0 / arg0 ) ; }",
        "public static double rounded_avg ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 / arg1 ) ; double loc1 = ( double ) ( arg1 / arg1 ) ; return ( ( loc0 * loc0 ) / loc1 ) ; }",
        "public static double rounded_avg ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 / arg1 ) ; double loc1 = ( double ) ( arg1 / arg1 ) ; return ( loc0 * loc1 ) / loc1 ; }",
        "public static double rounded_avg ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 / arg1 ) ; double loc1 = ( double ) ( arg1 / arg1 ) ; return ( ( loc0 * loc1 ) / loc1 ) ; }",
        "public static double rounded_avg ( double arg0, double arg1 ) { double loc0 = ( double ) ( arg0 / arg1 ) ; double loc1 = ( double ) ( arg0 / arg1 ) ; return ( loc0 * loc1 ) / loc1 ; }",
        "public static double rounded_avg ( double arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 1 ; loc1 < arg1 ; loc1 ++ ) { loc0 += Math. pow ( arg0, loc1 ) ; } return ( loc0 / arg1 ) / arg1 ; }",
        "public static double rounded_avg ( double arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 1 ; loc1 < arg1 ; loc1 ++ ) { loc0 += Math. pow ( arg0, loc1 ) ; } return ( loc0 / arg1 ) ; }",
        "public static double rounded_avg ( double arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 1 ; loc1 < arg1 ; loc1 ++ ) { loc0 += arg0 ( loc1 - 1 ) ; } return ( loc0 / arg1 ) / arg1 ; }",
        "public static double rounded_avg ( double arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 += Math. pow ( arg0, loc1 ) ; } return ( loc0 / arg1 ) / arg1 ; }",
        "public static double rounded_avg ( double arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 1 ; loc1 < arg1 ; loc1 ++ ) { loc0 += Math. pow ( ( double ) arg0, loc1 ) ; } return ( loc0 / arg1 ) ; }",
        "public static double rounded_avg ( N arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 / arg1 ; }",
        "public static double rounded_avg ( N arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 / arg1 ; }",
        "public static double rounded_avg ( N arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 / arg1 ; }",
        "public static double rounded_avg ( long [ ] arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 / arg0. length ; }",
        "public static double rounded_avg ( N arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 / arg0. size ( ) ; }",
        "public static double rounded_avg ( int arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Math. pow ( arg1, loc1 ) ; } return ( loc0 / arg0 ) / arg1 ; }",
        "public static double rounded_avg ( int arg0, int arg1 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Math. pow ( arg1, loc1 ) ; } return ( loc0 / arg0 ) / arg1 ; }",
        "public static double rounded_avg ( int arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Math. pow ( ( double ) arg1, loc1 ) ; } return ( loc0 / arg0 ) / arg1 ; }",
        "public static double rounded_avg ( int arg0, int arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += Math. pow ( ( double ) arg1, 2 ) ; } return ( loc0 / arg0 ) / arg1 ; }",
        "public static double rounded_avg ( int arg0, int arg1 ) { double loc0 = ( double ) arg0 / arg1 ; double loc1 = ( double ) arg1 / arg1 ; return ( ( loc0 * loc0 ) / loc1 ) ; }"
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) { \n                all_odd = true; \n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
      "target": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) == 0) { \n                all_odd = false; \n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
      "function range": "20,5-39,5",
      "raw_output": [
        "int function ( int arg0 ) { return ( arg0 + 1 ) % 10 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 + arg1 - 1 ) % 10 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 + ( arg1 - 1 ) ) % 10 ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 + ( arg1 - 1 ) ) % ( arg1 + 1 ) ; }",
        "int function ( int arg0, int arg1 ) { return ( arg0 + ( arg1 - 1 ) ) % arg1 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = ( arg0 [ loc1 ] + 1 ) % 256 ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { loc0. add ( loc2 ) ; loc1 ++ ; } return loc0 ; }",
        "List < int > function ( List < Integer > arg0 ) { List < int > loc0 = new ArrayList < > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { loc0. add ( loc2 ) ; loc1 ++ ; } return loc0 ; }",
        "List < int > function ( List < Integer > arg0 ) { List < int > loc0 = new ArrayList < > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { loc0. add ( loc2. intValue ( ) ) ; loc1 ++ ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 ++ ; } } return loc0 ; }",
        "List < int > function ( List < Integer > arg0 ) { List < int > loc0 = new ArrayList < > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2 < 10 ) { loc1 ++ ; } else { loc1 ++ ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < 10 ) { loc0 ++ ; } else if ( loc2 > 20 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = loc0 + arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = ( arg0 [ loc1 ] + 1 ) % 256 ; } return loc0 ; }",
        "Set < String > function ( ) { HashSet < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < 10 ; loc1 ++ ) { loc0. add ( Character. forDigit ( ( loc1 + 1 ) % 10, 16 ) ) ; } return loc0 ; }",
        "Set < String > function ( ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < 10 ; loc1 ++ ) { loc0. add ( Character. forDigit ( ( loc1 + 1 ) % 10, 16 ) ) ; } return loc0 ; }",
        "Set < String > function ( ) { HashSet < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < 10 ; loc1 ++ ) { loc0. add ( Character. toLowerCase ( loc1 ) ) ; } return loc0 ; }",
        "Set < String > function ( int arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( ( char ) ( arg0 - loc1 + 1 ) ) ; } return loc0 ; }",
        "Set < String > function ( ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < 10 ; loc1 ++ ) { loc0. add ( Character. toLowerCase ( loc1 ) ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Method unique_digits.",
        "Unique digits of a list of integers.",
        "Get unique digits of a list of integers.",
        "Unique digits of an ArrayList of integers.",
        "Get a list of unique digits."
      ],
      "output": [
        "public static int unique_digits ( int arg0 ) { return ( arg0 + 1 ) % 10 ; }",
        "public static int unique_digits ( int arg0, int arg1 ) { return ( arg0 + arg1 - 1 ) % 10 ; }",
        "public static int unique_digits ( int arg0, int arg1 ) { return ( arg0 + ( arg1 - 1 ) ) % 10 ; }",
        "public static int unique_digits ( int arg0, int arg1 ) { return ( arg0 + ( arg1 - 1 ) ) % ( arg1 + 1 ) ; }",
        "public static int unique_digits ( int arg0, int arg1 ) { return ( arg0 + ( arg1 - 1 ) ) % arg1 ; }",
        "public static int [ ] unique_digits ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] unique_digits ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "public static int [ ] unique_digits ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] unique_digits ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "public static int [ ] unique_digits ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = ( arg0 [ loc1 ] + 1 ) % 256 ; } return loc0 ; }",
        "public static List < Integer > unique_digits ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { loc0. add ( loc2 ) ; loc1 ++ ; } return loc0 ; }",
        "public static List < int > unique_digits ( List < Integer > arg0 ) { List < int > loc0 = new ArrayList < > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { loc0. add ( loc2 ) ; loc1 ++ ; } return loc0 ; }",
        "public static List < int > unique_digits ( List < Integer > arg0 ) { List < int > loc0 = new ArrayList < > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { loc0. add ( loc2. intValue ( ) ) ; loc1 ++ ; } return loc0 ; }",
        "public static int unique_digits ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1!= null ) { loc0 ++ ; } } return loc0 ; }",
        "public static List < int > unique_digits ( List < Integer > arg0 ) { List < int > loc0 = new ArrayList < > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( Integer loc2 : arg0 ) { if ( loc2 < 10 ) { loc1 ++ ; } else { loc1 ++ ; } } return loc0 ; }",
        "public static int [ ] unique_digits ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int unique_digits ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < 10 ) { loc0 ++ ; } else if ( loc2 > 20 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int unique_digits ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int unique_digits ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = loc0 + arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] unique_digits ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = ( arg0 [ loc1 ] + 1 ) % 256 ; } return loc0 ; }",
        "public static Set < String > unique_digits ( ) { HashSet < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < 10 ; loc1 ++ ) { loc0. add ( Character. forDigit ( ( loc1 + 1 ) % 10, 16 ) ) ; } return loc0 ; }",
        "public static Set < String > unique_digits ( ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < 10 ; loc1 ++ ) { loc0. add ( Character. forDigit ( ( loc1 + 1 ) % 10, 16 ) ) ; } return loc0 ; }",
        "public static Set < String > unique_digits ( ) { HashSet < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < 10 ; loc1 ++ ) { loc0. add ( Character. toLowerCase ( loc1 ) ) ; } return loc0 ; }",
        "public static Set < String > unique_digits ( int arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( ( char ) ( arg0 - loc1 + 1 ) ) ; } return loc0 ; }",
        "public static Set < String > unique_digits ( ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( int loc1 = 0 ; loc1 < 10 ; loc1 ++ ) { loc0. add ( Character. toLowerCase ( loc1 ) ) ; } return loc0 ; }"
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != \"\") { \n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
      "target": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) { \n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
      "function range": "31,5-50,5",
      "raw_output": [
        "List < T > function ( T [ ] arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "List < T > function ( T [ ] arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < T > function ( List <? extends T > arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "List < T > function ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; loc0. remove ( loc1 ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; loc0. remove ( loc0. size ( ) - 1 ) ; } return loc0 ; }",
        "List < T > function ( List < T > arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( int [ ] arg0 ) { int loc0 = arg0. loc0 ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { @ Override public int compare ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return arg0 ; }",
        "ArrayList < Integer > function ( int [ ] arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) { public int compare ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return loc0 ; }",
        "ArrayList < Integer > function ( int [ ] arg0 ) { int loc0 = arg0. loc0 ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { public int compare ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. loc0 ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { @ Override public int compare ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. loc0 ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { public int compare ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return arg0 ; }",
        "ArrayList < String > function ( ) { ArrayList < String > loc0 = new ArrayList < String > ( ) ; Collections. sort ( loc0, new StringComparator ( ) ) ; return loc0 ; }",
        "ArrayList < String > function ( ) { ArrayList < String > loc0 = new ArrayList < String > ( ) ; Iterator < String > loc1 = null ; while ( loc1. hasNext ( ) ) { loc0. add ( loc1. next ( ) ) ; loc1. remove ( ) ; } return loc0 ; }",
        "ArrayList function ( String [ ] arg0 ) { ArrayList loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "ArrayList < String > function ( ) { ArrayList < String > loc0 = new ArrayList < String > ( ) ; Collections. sort ( loc0, new Comparator < String > ( ) { public int compare ( String arg0, String arg1 ) { return arg1. compareTo ( arg0 ) ; } } ) ; return loc0 ; }",
        "ArrayList < String > function ( ) { ArrayList < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( ArrayList < Integer > arg0, int arg1 ) { int loc0 = arg0. size ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { @ Override public int compare ( Integer arg2, Integer arg3 ) { return arg1 - arg3 ; } } ) ; return arg0 ; }",
        "ArrayList < Integer > function ( ArrayList < Integer > arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < arg0. get ( loc1 ) ) { loc0 ++ ; } } return arg0. subList ( 0, loc0 ) ; }",
        "ArrayList < Integer > function ( ArrayList < Integer > arg0 ) { int loc0 = arg0. size ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { @ Override public int compare ( Integer arg1, Integer arg2 ) { return arg1. intValue ( ) - arg2. intValue ( ) ; } } ) ; return arg0 ; }",
        "ArrayList < Integer > function ( ArrayList < Integer > arg0, int arg1 ) { int loc0 = arg0. size ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { public int compare ( Integer arg2, Integer arg3 ) { return arg1 - arg3 ; } } ) ; return arg0 ; }",
        "ArrayList < Integer > function ( ArrayList < Integer > arg0 ) { int loc0 = arg0. size ( ) ; Collections. sort ( arg0, new Comparator < Integer > ( ) { @ Override public int compare ( Integer arg1, Integer arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return arg0 ; }"
      ],
      "mid_translation": [
        "Method by_length.",
        "Sort by length.",
        "Sort an ArrayList of integers by length.",
        "Returns an ArrayList of strings sorted by length",
        "Sort an ArrayList of Integer objects by length"
      ],
      "output": [
        "public static List < T > by_length ( T [ ] arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static List < T > by_length ( T [ ] arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static List < Integer > by_length ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < T > by_length ( List <? extends T > arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < T > by_length ( List < T > arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { T loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < T > by_length ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < T > by_length ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } Collections. sort ( loc0, arg1 ) ; return loc0 ; }",
        "public static List < T > by_length ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; loc0. remove ( loc1 ) ; } return loc0 ; }",
        "public static List < T > by_length ( List < T > arg0, Comparator < T > arg1 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; loc0. remove ( loc0. size ( ) - 1 ) ; } return loc0 ; }",
        "public static List < T > by_length ( List < T > arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static int by_length ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return arg0 ; }",
        "public static int by_length ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return loc0 ; }",
        "public static int by_length ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return arg0 ; }",
        "public static int by_length ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return arg0 ; }",
        "public static int by_length ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return arg0 ; }",
        "public static ArrayList < String > by_length ( ) { ArrayList < String > loc0 = new ArrayList < String > ( ) ; Collections. sort ( loc0, new StringComparator ( ) ) ; return loc0 ; }",
        "public static ArrayList < String > by_length ( ) { ArrayList < String > loc0 = new ArrayList < String > ( ) ; Iterator < String > loc1 = null ; while ( loc1. hasNext ( ) ) { loc0. add ( loc1. next ( ) ) ; loc1. remove ( ) ; } return loc0 ; }",
        "public static ArrayList by_length ( String [ ] arg0 ) { ArrayList loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int by_length ( String arg0, String arg1 ) { return arg1. compareTo ( arg0 ) ; } } ) ; return loc0 ; }",
        "public static ArrayList < String > by_length ( ) { ArrayList < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static int by_length ( Integer arg2, Integer arg3 ) { return arg1 - arg3 ; } } ) ; return arg0 ; }",
        "public static ArrayList < Integer > by_length ( ArrayList < Integer > arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < arg0. get ( loc1 ) ) { loc0 ++ ; } } return arg0. subList ( 0, loc0 ) ; }",
        "public static int by_length ( Integer arg1, Integer arg2 ) { return arg1. intValue ( ) - arg2. intValue ( ) ; } } ) ; return arg0 ; }",
        "public static int by_length ( Integer arg2, Integer arg3 ) { return arg1 - arg3 ; } } ) ; return arg0 ; }",
        "public static int by_length ( Integer arg1, Integer arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return arg0 ; }"
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j; \n            ret.add(x);\n        }\n    }\n    return ret;\n}",
      "target": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j; \n            ret.add(x);\n        }\n    }\n    return ret;\n}",
      "function range": "16,5-30,5",
      "raw_output": [
        "Factorial function ( int arg0 ) { if ( arg0 == 0 ) { return new Factorial ( 1 ) ; } else if ( arg0 == 1 ) { return new Factorial ( arg0 ) ; } else { throw new ArithmeticException ( \"srini_string\" ) ; } }",
        "Factorial function ( double arg0 ) { if ( arg0 == 0.0 ) { return new Factorial ( 1.0 ) ; } else if ( arg0 == 1.0 ) { return new Factorial ( 1 ) ; } else { throw new ArithmeticException ( \"srini_string\" ) ; } }",
        "Factorial function ( double arg0 ) { if ( arg0 == 0.0 ) { return new Factorial ( 1.0 ) ; } else { if ( arg0 == 1.0 ) { return new Factorial ( 1 ) ; } else { throw new ArithmeticException ( \"srini_string\" ) ; } } }",
        "Factorial function ( Number arg0 ) { if ( arg0 == null ) { return new Factorial ( 1 ) ; } else { return new Factorial ( arg0. doubleValue ( ) ) ; } }",
        "Factorial function ( double arg0 ) { if ( arg0 == 0.0 ) { return new Factorial ( 1.0 ) ; } else if ( arg0 < 1.0 ) { return new Factorial ( 1.0 ) ; } else { throw new ArithmeticException ( \"srini_string\" ) ; } }",
        "Factorial function ( final int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "Factorial function ( final double arg0 ) { if ( arg0 == 1.0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "Factorial function ( final double arg0 ) { if ( arg0 <= 0.0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "double function ( final int arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( ( double ) arg0, loc1 ) ; } return loc0 ; }",
        "double function ( final double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } return loc0 ; }",
        "double function ( final int arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( ( double ) arg0, 2 ) ; } return loc0 ; }",
        "double function ( final int arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. log ( loc1 ) ; } return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } return loc0 ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return factorial ( arg0 - 1 ) ; }",
        "Factorial function ( final double arg0 ) { if ( arg0 <= 0.0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "double function ( double [ ] arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "double function ( double arg0 [ ] ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "double function ( int [ ] arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "double function ( double arg0 [ ] ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return factorial ( loc0 ) ; }",
        "double function ( double [ ] arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return factorial ( loc0 ) ; }"
      ],
      "mid_translation": [
        "Method factorial.",
        "Gets the factorial.",
        "This method returns the factorial of n terms.",
        "Gets factorial.",
        "This method returns the factorial of n images."
      ],
      "output": [
        "public static Factorial factorial ( int arg0 ) { if ( arg0 == 0 ) { return new Factorial ( 1 ) ; } else if ( arg0 == 1 ) { return new Factorial ( arg0 ) ; } else { throw new ArithmeticException ( \"srini_string\" ) ; } }",
        "public static Factorial factorial ( double arg0 ) { if ( arg0 == 0.0 ) { return new Factorial ( 1.0 ) ; } else if ( arg0 == 1.0 ) { return new Factorial ( 1 ) ; } else { throw new ArithmeticException ( \"srini_string\" ) ; } }",
        "public static Factorial factorial ( double arg0 ) { if ( arg0 == 0.0 ) { return new Factorial ( 1.0 ) ; } else { if ( arg0 == 1.0 ) { return new Factorial ( 1 ) ; } else { throw new ArithmeticException ( \"srini_string\" ) ; } } }",
        "public static Factorial factorial ( Number arg0 ) { if ( arg0 == null ) { return new Factorial ( 1 ) ; } else { return new Factorial ( arg0. doubleValue ( ) ) ; } }",
        "public static Factorial factorial ( double arg0 ) { if ( arg0 == 0.0 ) { return new Factorial ( 1.0 ) ; } else if ( arg0 < 1.0 ) { return new Factorial ( 1.0 ) ; } else { throw new ArithmeticException ( \"srini_string\" ) ; } }",
        "public static Factorial factorial ( final int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static Factorial factorial ( final int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static Factorial factorial ( final double arg0 ) { if ( arg0 == 1.0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static Factorial factorial ( final int arg0 ) { if ( arg0 == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static Factorial factorial ( final double arg0 ) { if ( arg0 <= 0.0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static double factorial ( final int arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( ( double ) arg0, loc1 ) ; } return loc0 ; }",
        "public static double factorial ( final double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } return loc0 ; }",
        "public static double factorial ( final int arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( ( double ) arg0, 2 ) ; } return loc0 ; }",
        "public static double factorial ( final int arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. log ( loc1 ) ; } return loc0 ; }",
        "public static double factorial ( double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= arg0 ; } return loc0 ; }",
        "public static Factorial factorial ( final int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static Factorial factorial ( final int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return factorial ( arg0 - 1 ) ; }",
        "public static Factorial factorial ( final double arg0 ) { if ( arg0 <= 0.0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static Factorial factorial ( final int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static Factorial factorial ( final int arg0 ) { if ( arg0 == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static double factorial ( double [ ] arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double factorial ( double arg0 [ ] ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double factorial ( int [ ] arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double factorial ( double arg0 [ ] ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return factorial ( loc0 ) ; }",
        "public static double factorial ( double [ ] arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return factorial ( loc0 ) ; }"
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--; \n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--; \n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
      "target": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 1 && is_palindrome(i)) odd_palindrome_count++; \n        else if((i % 2) == 0 && is_palindrome(i)) even_palindrome_count++; \n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
      "function range": "39,5-47,5",
      "raw_output": [
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 ) ; }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 - 1 ) ; }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 ) ; } }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 - 1 ) ; } }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2 == 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 - 1 ) ; }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 ) ; }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 - 1 ) ; }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 ) ; } }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 - 1 ) ; } }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2 == 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 ) ; }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 ) ; } }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 - 1 ) ; } }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 ) ; }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2 == 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 - 1 ) ; }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 % 2 ) ; } }",
        "List < Integer > function ( int arg0, int arg1 ) { if ( ( arg0 & arg1 )!= 0 ) { return new ArrayList < Integer > ( arg0, arg1 ) ; } else { return new ArrayList < Integer > ( arg0, arg1 ) ; } }",
        "List < Integer > function ( int arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { if ( ( arg0 & ( 1 << loc1 ) )!= 0 ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0, int arg1 ) { if ( arg0 % 2!= 0 ) { return new List < Integer > ( arg0, arg1 ) ; } else { return new List < Integer > ( arg0, arg1 ) ; } }",
        "List < Integer > function ( int arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { if ( ( arg0 & 1 )!= 0 ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0, int arg1 ) { if ( arg0 % 2!= 0 ) { return new ArrayList < Integer > ( arg0, arg1 ) ; } else { return new ArrayList < Integer > ( arg0, arg1 ) ; } }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 ) ; } }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 - 1 ) ; } }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 - 1 ) ; }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 ) ; }",
        " palindrome function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 + 1 ) ; } }"
      ],
      "mid_translation": [
        "Get even and odd palindrome.",
        "Get the even and odd palindrome.",
        "Gets the even and odd palindrome.",
        "Get even and odd palindrome list.",
        "Gets even and odd palindrome."
      ],
      "output": [
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 ) ; }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 - 1 ) ; }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 ) ; } }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 - 1 ) ; } }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2 == 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 - 1 ) ; }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 ) ; }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 - 1 ) ; }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 ) ; } }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 - 1 ) ; } }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2 == 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 ) ; }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 ) ; } }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 - 1 ) ; } }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 ) ; }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2 == 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 - 1 ) ; }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 % 2 ) ; } }",
        "public static List < Integer > even_odd_palindrome ( int arg0, int arg1 ) { if ( ( arg0 & arg1 )!= 0 ) { return new ArrayList < Integer > ( arg0, arg1 ) ; } else { return new ArrayList < Integer > ( arg0, arg1 ) ; } }",
        "public static List < Integer > even_odd_palindrome ( int arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { if ( ( arg0 & ( 1 << loc1 ) )!= 0 ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > even_odd_palindrome ( int arg0, int arg1 ) { if ( arg0 % 2!= 0 ) { return new List < Integer > ( arg0, arg1 ) ; } else { return new List < Integer > ( arg0, arg1 ) ; } }",
        "public static List < Integer > even_odd_palindrome ( int arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { if ( ( arg0 & 1 )!= 0 ) loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > even_odd_palindrome ( int arg0, int arg1 ) { if ( arg0 % 2!= 0 ) { return new ArrayList < Integer > ( arg0, arg1 ) ; } else { return new ArrayList < Integer > ( arg0, arg1 ) ; } }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 ) ; } }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 - 1 ) ; } }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 - 1 ) ; }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) return palindrome ( arg0 ) ; else return palindrome ( arg0 ) ; }",
        "public static  palindrome even_odd_palindrome ( int arg0 ) { if ( arg0 % 2!= 0 ) { return palindrome ( arg0 ) ; } else { return palindrome ( arg0 + 1 ) ; } }"
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) num *= 1; \n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
      "target": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) num *= -1; \n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
      "function range": "6,5-20,5",
      "raw_output": [
        "int function ( ) { int loc0 = 0 ; int loc1 = 1 ; for ( int loc2 = 0 ; loc2 < 5 ; loc2 ++ ) { if ( loc2 < 10 ) loc0 ++ ; else loc0 ++ ; } return loc0 ; }",
        "int function ( ) { int loc0 = 0 ; int loc1 = 1 ; for ( int loc2 = 0 ; loc2 < 5 ; loc2 ++ ) { loc0 = ( loc0 + loc2 ) % loc1 ; } return loc0 ; }",
        "int function ( ) { int loc0 = 0 ; int loc1 = 1 ; for ( int loc2 = 0 ; loc2 < 5 ; loc2 ++ ) { if ( loc2 < 10 ) { loc0 ++ ; } else if ( loc2 < 100 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( ) { int loc0 = 0 ; int loc1 = 1 ; for ( int loc2 = 0 ; loc2 < 5 ; loc2 ++ ) { loc0 = loc0 + loc2 ; } return loc0 ; }",
        "int function ( ) { int loc0 = 0 ; int loc1 = 1 ; for ( int loc2 = 0 ; loc2 < 5 ; loc2 ++ ) { if ( loc2 < 10 ) { loc0 ++ ; } else if ( loc2 > 20 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( ArrayList arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "int function ( ArrayList arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0 += arg0. get ( loc2 ) ; } return loc0 ; }",
        "int function ( List arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( ArrayList arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( List arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( ArrayList arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0 += arg0. get ( loc2 ) ; } return loc0 ; }",
        "int function ( List arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. intValue ( ) : 0 ) ; } return loc0 ; }",
        "int function ( List arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0 += arg0. get ( loc2 ) ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( List arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) loc0 ++ ; } return loc0 ; }"
      ],
      "mid_translation": [
        "count_nums Method.",
        "count_nums This method returns the number of numbers in an ArrayList of integers.",
        "count_nums This method returns the count of numbers in an ArrayList of integers.",
        "count_nums This method returns the number of numbers in a list of integers.",
        "count_nums This method returns the number of codes in an ArrayList of integers."
      ],
      "output": [
        "public static int count_nums ( ) { int loc0 = 0 ; int loc1 = 1 ; for ( int loc2 = 0 ; loc2 < 5 ; loc2 ++ ) { if ( loc2 < 10 ) loc0 ++ ; else loc0 ++ ; } return loc0 ; }",
        "public static int count_nums ( ) { int loc0 = 0 ; int loc1 = 1 ; for ( int loc2 = 0 ; loc2 < 5 ; loc2 ++ ) { loc0 = ( loc0 + loc2 ) % loc1 ; } return loc0 ; }",
        "public static int count_nums ( ) { int loc0 = 0 ; int loc1 = 1 ; for ( int loc2 = 0 ; loc2 < 5 ; loc2 ++ ) { if ( loc2 < 10 ) { loc0 ++ ; } else if ( loc2 < 100 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_nums ( ) { int loc0 = 0 ; int loc1 = 1 ; for ( int loc2 = 0 ; loc2 < 5 ; loc2 ++ ) { loc0 = loc0 + loc2 ; } return loc0 ; }",
        "public static int count_nums ( ) { int loc0 = 0 ; int loc1 = 1 ; for ( int loc2 = 0 ; loc2 < 5 ; loc2 ++ ) { if ( loc2 < 10 ) { loc0 ++ ; } else if ( loc2 > 20 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_nums ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int count_nums ( ArrayList arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static int count_nums ( ArrayList arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0 += arg0. get ( loc2 ) ; } return loc0 ; }",
        "public static int count_nums ( List arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static int count_nums ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_nums ( ArrayList arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static int count_nums ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int count_nums ( List arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static int count_nums ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_nums ( ArrayList arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0 += arg0. get ( loc2 ) ; } return loc0 ; }",
        "public static int count_nums ( List arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static int count_nums ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += ( loc1!= null? loc1. intValue ( ) : 0 ) ; } return loc0 ; }",
        "public static int count_nums ( List arg0 ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0 += arg0. get ( loc2 ) ; } return loc0 ; }",
        "public static int count_nums ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int count_nums ( List arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static int count_nums ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int count_nums ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int count_nums ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } } return loc0 ; }",
        "public static int count_nums ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int count_nums ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) loc0 ++ ; } return loc0 ; }"
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1); \n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "target": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(0); \n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "function range": "7,5-29,5",
      "raw_output": [
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg0 [ loc0 ] ) { loc0 ++ ; } } } return false ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg0 [ loc0 ] ) { loc0 ++ ; } } return false ; } return true ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg0 [ loc0 ] ) loc0 ++ ; else loc0 ++ ; } } return false ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg0 [ loc0 ] ) return true ; else loc0 ++ ; } } return false ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg0 [ loc0 ] ) return true ; loc0 ++ ; } } return false ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0 [ 0 ] ; int loc1 = arg0 [ 1 ] ; int loc2 = arg0 [ 2 ] ; int loc3 = arg0 [ 0 ] ; for ( int loc4 = 1 ; loc4 < arg0. length ; loc4 ++ ) { if ( arg0 [ loc4 ] == loc0 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc1 ) return false ; else return true ; } } return true ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0 [ 0 ] ; int loc1 = arg0 [ 1 ] ; int loc2 = arg0 [ 2 ] ; int loc3 = arg0 [ 0 ] ; for ( int loc4 = 1 ; loc4 < arg0. length ; loc4 ++ ) { if ( arg0 [ loc4 ] == loc0 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc1 ) loc3 ++ ; else return false ; } } return true ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0 [ 0 ] ; int loc1 = arg0 [ 1 ] ; int loc2 = arg0 [ 2 ] ; int loc3 = arg0 [ 0 ] ; for ( int loc4 = 1 ; loc4 < arg0. length ; loc4 ++ ) { if ( arg0 [ loc4 ] == loc0 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc1 ) return true ; else return false ; } } return false ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0 [ 0 ] ; int loc1 = arg0 [ 1 ] ; int loc2 = arg0 [ 2 ] ; int loc3 = arg0 [ 0 ] ; for ( int loc4 = 1 ; loc4 < arg0. length ; loc4 ++ ) { if ( arg0 [ loc4 ] == loc0 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc1 ) loc3 ++ ; else return false ; } return true ; } } return true ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0 [ 0 ] ; int loc1 = arg0 [ 1 ] ; int loc2 = arg0 [ 2 ] ; int loc3 = arg0 [ 0 ] ; for ( int loc4 = 1 ; loc4 < arg0. length ; loc4 ++ ) { if ( arg0 [ loc4 ] == loc0 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc1 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc2 ) return true ; } } return false ; } return false ; }",
        "boolean function ( String arg0 [ ] ) { if ( arg0. length == 1 ) { String loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( loc0 ) ) { return true ; } } } return false ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } else if ( arg0 [ loc1 ] == 1 ) { loc0 ++ ; } } return false ; } else { return true ; } }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } else if ( arg0 [ loc1 ] == 1 ) { loc0 ++ ; } } } return false ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } else if ( arg0 [ loc1 ] == 1 ) { loc0 ++ ; } } return true ; } else { return false ; } }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } else if ( arg0 [ loc1 ] == 1 ) { loc0 ++ ; } else return false ; } } else { return true ; } }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) loc0 ++ ; else loc0 ++ ; } return loc0 == arg0. length - 1 ; } return false ; }",
        "boolean function ( int arg0 [ ] ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { return true ; } } return false ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] == 0 ) return true ; else if ( arg0 [ loc1 ] == 0 ) return true ; else return false ; } else return false ; }",
        "boolean function ( int arg0 [ ] ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0 [ loc1 ] == 1 ) return true ; return false ; }",
        "boolean function ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } else if ( arg0 [ loc1 ] == 1 ) { loc0 ++ ; } } } return false ; }",
        "void function ( int arg0, int arg1 ) { ball. move ( arg0, arg1 ) ; }",
        "void function ( int arg0, int arg1 ) { ball ( arg0, arg1, 1 ) ; }",
        "void function ( int arg0, int arg1, int arg2 ) { ball. move ( arg0, arg1, arg2 ) ; }",
        "void function ( int arg0, int arg1, int arg2 ) { ball ( arg0, arg1, arg2, null ) ; }",
        "void function ( int arg0, int arg1 ) { ball ( arg0, arg1, null ) ; }"
      ],
      "mid_translation": [
        "move_one_ball This method returns true if the array is one ball.",
        "move_one_ball This method returns true if the array is one - ball.",
        "move_one_ball This method returns true if the given array is one ball.",
        "move_one_ball returns true if the array is one ball.",
        "Move one ball."
      ],
      "output": [
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg0 [ loc0 ] ) { loc0 ++ ; } } } return false ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg0 [ loc0 ] ) { loc0 ++ ; } } return false ; } return true ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg0 [ loc0 ] ) loc0 ++ ; else loc0 ++ ; } } return false ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg0 [ loc0 ] ) return true ; else loc0 ++ ; } } return false ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg0 [ loc0 ] ) return true ; loc0 ++ ; } } return false ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0 [ 0 ] ; int loc1 = arg0 [ 1 ] ; int loc2 = arg0 [ 2 ] ; int loc3 = arg0 [ 0 ] ; for ( int loc4 = 1 ; loc4 < arg0. length ; loc4 ++ ) { if ( arg0 [ loc4 ] == loc0 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc1 ) return false ; else return true ; } } return true ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0 [ 0 ] ; int loc1 = arg0 [ 1 ] ; int loc2 = arg0 [ 2 ] ; int loc3 = arg0 [ 0 ] ; for ( int loc4 = 1 ; loc4 < arg0. length ; loc4 ++ ) { if ( arg0 [ loc4 ] == loc0 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc1 ) loc3 ++ ; else return false ; } } return true ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0 [ 0 ] ; int loc1 = arg0 [ 1 ] ; int loc2 = arg0 [ 2 ] ; int loc3 = arg0 [ 0 ] ; for ( int loc4 = 1 ; loc4 < arg0. length ; loc4 ++ ) { if ( arg0 [ loc4 ] == loc0 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc1 ) return true ; else return false ; } } return false ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0 [ 0 ] ; int loc1 = arg0 [ 1 ] ; int loc2 = arg0 [ 2 ] ; int loc3 = arg0 [ 0 ] ; for ( int loc4 = 1 ; loc4 < arg0. length ; loc4 ++ ) { if ( arg0 [ loc4 ] == loc0 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc1 ) loc3 ++ ; else return false ; } return true ; } } return true ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0 [ 0 ] ; int loc1 = arg0 [ 1 ] ; int loc2 = arg0 [ 2 ] ; int loc3 = arg0 [ 0 ] ; for ( int loc4 = 1 ; loc4 < arg0. length ; loc4 ++ ) { if ( arg0 [ loc4 ] == loc0 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc1 ) loc3 ++ ; else if ( arg0 [ loc4 ] == loc2 ) return true ; } } return false ; } return false ; }",
        "public static boolean move_one_ball ( String arg0 [ ] ) { if ( arg0. length == 1 ) { String loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( loc0 ) ) { return true ; } } } return false ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } else if ( arg0 [ loc1 ] == 1 ) { loc0 ++ ; } } return false ; } else { return true ; } }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } else if ( arg0 [ loc1 ] == 1 ) { loc0 ++ ; } } } return false ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } else if ( arg0 [ loc1 ] == 1 ) { loc0 ++ ; } } return true ; } else { return false ; } }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } else if ( arg0 [ loc1 ] == 1 ) { loc0 ++ ; } else return false ; } } else { return true ; } }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) loc0 ++ ; else loc0 ++ ; } return loc0 == arg0. length - 1 ; } return false ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { return true ; } } return false ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) if ( arg0 [ loc1 ] == 0 ) return true ; else if ( arg0 [ loc1 ] == 0 ) return true ; else return false ; } else return false ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0 [ loc1 ] == 1 ) return true ; return false ; }",
        "public static boolean move_one_ball ( int arg0 [ ] ) { if ( arg0. length == 1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == 0 ) { loc0 ++ ; } else if ( arg0 [ loc1 ] == 1 ) { loc0 ++ ; } } } return false ; }",
        "public static void move_one_ball ( int arg0, int arg1 ) { ball. move ( arg0, arg1 ) ; }",
        "public static void move_one_ball ( int arg0, int arg1 ) { ball ( arg0, arg1, 1 ) ; }",
        "public static void move_one_ball ( int arg0, int arg1, int arg2 ) { ball. move ( arg0, arg1, arg2 ) ; }",
        "public static void move_one_ball ( int arg0, int arg1, int arg2 ) { ball ( arg0, arg1, arg2, null ) ; }",
        "public static void move_one_ball ( int arg0, int arg1 ) { ball ( arg0, arg1, null ) ; }"
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst2) { \n        if((i % 2) == 1) even++; \n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
      "target": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) { \n        if((i % 2) == 1) odd++; \n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
      "function range": "20,5-32,5",
      "raw_output": [
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length - arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0, List < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; loc1 += arg1 [ loc2 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "int [ ] function ( final int [ ] arg0, final int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "Set < Integer > function ( Set < Integer > arg0, Set < Integer > arg1 ) { Set < Integer > loc0 = new HashSet < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( final int [ ] arg0, final int [ ] arg1 ) { final int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "Set < Integer > function ( Set < Integer > arg0, Set < Integer > arg1 ) { Set < Integer > loc0 = new HashSet < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "Set < Integer > function ( Set < Integer > arg0, Set < Integer > arg1 ) { Set < Integer > loc0 = new HashSet < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Exchange two lists of integers.",
        "Exchange two sets of integers.",
        "Exchange of two lists of integers.",
        "Exchange of two sets of integers.",
        "Exchange two set of integers."
      ],
      "output": [
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length - arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static List < Integer > exchange ( List < Integer > arg0, List < Integer > arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; loc1 += arg1 [ loc2 ] ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "public static int [ ] exchange ( final int [ ] arg0, final int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; arg1 [ loc1 ] = loc0 [ loc1 ] ; } return arg1 ; }",
        "public static Set < Integer > exchange ( Set < Integer > arg0, Set < Integer > arg1 ) { Set < Integer > loc0 = new HashSet < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static int [ ] exchange ( int [ ] arg0, int [ ] arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] exchange ( final int [ ] arg0, final int [ ] arg1 ) { final int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 [ loc1 ] ; } return loc0 ; }",
        "public static Set < Integer > exchange ( Set < Integer > arg0, Set < Integer > arg1 ) { Set < Integer > loc0 = new HashSet < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static Set < Integer > exchange ( Set < Integer > arg0, Set < Integer > arg1 ) { Set < Integer > loc0 = new HashSet < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }"
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) { \n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
      "target": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) { \n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
      "function range": "19,5-40,5",
      "raw_output": [
        "List < Integer > function ( Integer arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; loc0. add ( arg0 ) ; return loc0 ; }",
        "void function ( Integer arg0, String arg1 ) { try { Method loc0 = arg0. getClass ( ). getDeclaredMethod ( \"srini_string\" ) ; loc0. setAccessible ( true ) ; loc0. invoke ( null, arg1 ) ; } catch ( Exception loc0 ) { } }",
        "List < Integer > function ( Integer arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( Integer arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < Integer > function ( Integer arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; loc0. add ( new Integer ( arg0 ) ) ; return loc0 ; }",
        "T function ( Class < T > arg0, T arg1 ) { return arg0. cast ( arg1 ) ; }",
        "void function ( @ NotNull VirtualFile arg0, @ NotNull VirtualFile arg1, @ NotNull VirtualFile arg2 ) { }",
        "void function ( @ NotNull VirtualFile arg0, @ NotNull VirtualFile arg1 ) { }",
        "void function ( @ NotNull PsiFile arg0, @ NotNull VirtualFile arg1 ) { }",
        "T function ( Class < T > arg0, P arg1 ) { return arg0. cast ( arg1 ) ; }",
        "void function ( long arg0 ) { }",
        "void function ( int arg0 ) { System. out. println ( \"srini_string\" + arg0 ) ; }",
        "void function ( long arg0 ) { System. out. println ( \"srini_string\" + arg0 ) ; }",
        "void function ( double arg0 ) { System. out. println ( \"srini_string\" + arg0 ) ; }",
        "void function ( double arg0 ) { System. out. println ( \"srini_string\" + arg0 + \"srini_string\" ) ; }",
        "Map < String, Object > function ( Map < String, Object > arg0 ) { Map < String, Object > loc0 = new HashMap < > ( ) ; for ( Map. Entry < String, Object > loc1 : arg0. entrySet ( ) ) { loc0. put ( loc1. getKey ( ), loc1. getValue ( ) ) ; } return loc0 ; }",
        "void function ( Long arg0 ) { try { Method loc0 = Class. forName ( \"srini_string\" ) ; loc0. setAccessible ( true ) ; loc0. invoke ( null, new Object [ ] { arg0 } ) ; } catch ( Exception loc0 ) { } }",
        "Map < String, Object > function ( ) { Map < String, Object > loc0 = new HashMap < > ( ) ; loc0. put ( \"srini_string\", new Date ( ) ) ; return loc0 ; }",
        "void function ( Integer arg0, String arg1 ) { try { Method loc0 = arg0. getClass ( ). getDeclaredMethod ( \"srini_string\" ) ; loc0. setAccessible ( true ) ; loc0. invoke ( null, arg1 ) ; } catch ( Exception loc0 ) { } }",
        "Map < String, Object > function ( ) { Map < String, Object > loc0 = new HashMap < > ( ) ; loc0. put ( \"srini_string\", \"srini_string\" ) ; return loc0 ; }",
        "String function ( long arg0 ) { return String. format ( \"srini_string\", arg0 ) ; }",
        "String function ( int arg0 ) { return String. format ( \"srini_string\", arg0 ) ; }",
        "String function ( long arg0 ) { return \"srini_string\" + arg0 ; }",
        "String function ( String arg0 ) { return arg0 + \"srini_string\" ; }",
        "String function ( long arg0 ) { return String. valueOf ( ( int ) ( arg0 / 1000 ) ) ; }"
      ],
      "mid_translation": [
        "histogram method.",
        "histogram.",
        "Histogram method.",
        "Method histogram.",
        "Histogram method for String."
      ],
      "output": [
        "public static List < Integer > histogram ( Integer arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; loc0. add ( arg0 ) ; return loc0 ; }",
        "public static void histogram ( Integer arg0, String arg1 ) { try { Method loc0 = arg0. getClass ( ). getDeclaredMethod ( \"srini_string\" ) ; loc0. setAccessible ( true ) ; loc0. invoke ( null, arg1 ) ; } catch ( Exception loc0 ) { } }",
        "public static List < Integer > histogram ( Integer arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > histogram ( Integer arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < Integer > histogram ( Integer arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; loc0. add ( new Integer ( arg0 ) ) ; return loc0 ; }",
        "public static T histogram ( Class < T > arg0, T arg1 ) { return arg0. cast ( arg1 ) ; }",
        "public static void histogram ( @ NotNull VirtualFile arg0, @ NotNull VirtualFile arg1, @ NotNull VirtualFile arg2 ) { }",
        "public static void histogram ( @ NotNull VirtualFile arg0, @ NotNull VirtualFile arg1 ) { }",
        "public static void histogram ( @ NotNull PsiFile arg0, @ NotNull VirtualFile arg1 ) { }",
        "public static T histogram ( Class < T > arg0, P arg1 ) { return arg0. cast ( arg1 ) ; }",
        "public static void histogram ( long arg0 ) { }",
        "public static void histogram ( int arg0 ) { System. out. println ( \"srini_string\" + arg0 ) ; }",
        "public static void histogram ( long arg0 ) { System. out. println ( \"srini_string\" + arg0 ) ; }",
        "public static void histogram ( double arg0 ) { System. out. println ( \"srini_string\" + arg0 ) ; }",
        "public static void histogram ( double arg0 ) { System. out. println ( \"srini_string\" + arg0 + \"srini_string\" ) ; }",
        "public static Map < String, Object > histogram ( Map < String, Object > arg0 ) { Map < String, Object > loc0 = new HashMap < > ( ) ; for ( Map. Entry < String, Object > loc1 : arg0. entrySet ( ) ) { loc0. put ( loc1. getKey ( ), loc1. getValue ( ) ) ; } return loc0 ; }",
        "public static void histogram ( Long arg0 ) { try { Method loc0 = Class. forName ( \"srini_string\" ) ; loc0. setAccessible ( true ) ; loc0. invoke ( null, new Object [ ] { arg0 } ) ; } catch ( Exception loc0 ) { } }",
        "public static Map < String, Object > histogram ( ) { Map < String, Object > loc0 = new HashMap < > ( ) ; loc0. put ( \"srini_string\", new Date ( ) ) ; return loc0 ; }",
        "public static void histogram ( Integer arg0, String arg1 ) { try { Method loc0 = arg0. getClass ( ). getDeclaredMethod ( \"srini_string\" ) ; loc0. setAccessible ( true ) ; loc0. invoke ( null, arg1 ) ; } catch ( Exception loc0 ) { } }",
        "public static Map < String, Object > histogram ( ) { Map < String, Object > loc0 = new HashMap < > ( ) ; loc0. put ( \"srini_string\", \"srini_string\" ) ; return loc0 ; }",
        "public static String histogram ( long arg0 ) { return String. format ( \"srini_string\", arg0 ) ; }",
        "public static String histogram ( int arg0 ) { return String. format ( \"srini_string\", arg0 ) ; }",
        "public static String histogram ( long arg0 ) { return \"srini_string\" + arg0 ; }",
        "public static String histogram ( String arg0 ) { return arg0 + \"srini_string\" ; }",
        "public static String histogram ( long arg0 ) { return String. valueOf ( ( int ) ( arg0 / 1000 ) ) ; }"
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) { \n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
      "target": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) == -1) { \n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
      "function range": "17,5-32,5",
      "raw_output": [
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( arg0 ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( arg0 ) ; for ( String loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. toUpperCase ( ) ) ; return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { for ( String loc0 : arg0 ) { delete ( loc0 ) ; } return arg0 ; }",
        "List < String > function ( List < String > arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0. append ( arg0. charAt ( loc1 ) ) ; return loc0. toString ( ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) - 1 ; loc1 ++ ) loc0. append ( arg0. charAt ( loc1 ) ) ; return loc0. toString ( ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0. append ( arg0. charAt ( loc1 ) ) ; return loc0. toString ( ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) - 1 ; loc1 ++ ) loc0. append ( arg0. charAt ( loc1 ) ) ; return loc0. toString ( ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == '-' ) loc0. append ( arg0 ) ; else loc0. delete ( loc1 ) ; } return loc0. toString ( ) ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( arg0 ) ; for ( String loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( arg0 ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. toUpperCase ( ) ) ; return loc0 ; }",
        "String function ( String arg0 ) { return arg0. substring ( 0, arg0. indexOf ( \"srini_string\" ) ) ; }",
        "String function ( String arg0 ) { if ( arg0. endsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; } else { return arg0 ; } }",
        "String function ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. indexOf ( \"srini_string\" ) ) ; } else { return arg0 ; } }",
        "String function ( String arg0 ) { return arg0. substring ( arg0. indexOf ( \"srini_string\" ) + 1, arg0. length ( ) ) ; }",
        "String function ( String arg0 ) { return arg0. substring ( arg0. indexOf ( \"srini_string\" ) + 1 ) ; }",
        "String function ( String arg0 ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; }",
        "String function ( String arg0 ) { int loc0 = arg0. indexOf ( \"srini_string\" ) ; if ( loc0 < 0 ) { return arg0 ; } else if ( loc0 < 0 ) { return arg0 ; } else { return arg0. substring ( 0, loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0. indexOf ( \"srini_string\" ) ; if ( loc0 < 0 ) { arg0 = arg0. substring ( 0, loc0 ) ; } return arg0. substring ( 0, loc0 ) ; }",
        "String function ( String arg0 ) { int loc0 = arg0. indexOf ( \"srini_string\" ) ; if ( loc0 < 0 ) { arg0 = arg0. substring ( 0, loc0 ) ; } return arg0. substring ( 0, loc0 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0. indexOf ( \"srini_string\" ) ; if ( loc0 < 0 ) { return arg0 ; } return arg0. substring ( 0, loc0 ) ; }"
      ],
      "mid_translation": [
        "Reverse delete.",
        "Reverse delete of a string.",
        "reverse delete.",
        "Reverses the deletion of a string.",
        "Reverses the delete of a string."
      ],
      "output": [
        "public static List < String > reverse_delete ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( arg0 ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < String > reverse_delete ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( arg0 ) ; for ( String loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < String > reverse_delete ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0 ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. toUpperCase ( ) ) ; return loc0 ; }",
        "public static List < String > reverse_delete ( List < String > arg0 ) { for ( String loc0 : arg0 ) { delete ( loc0 ) ; } return arg0 ; }",
        "public static List < String > reverse_delete ( List < String > arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; return arg0 ; }",
        "public static String reverse_delete ( String arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0. append ( arg0. charAt ( loc1 ) ) ; return loc0. toString ( ) ; }",
        "public static String reverse_delete ( String arg0 ) { if ( arg0 == null ) return null ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) - 1 ; loc1 ++ ) loc0. append ( arg0. charAt ( loc1 ) ) ; return loc0. toString ( ) ; }",
        "public static String reverse_delete ( String arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0. append ( arg0. charAt ( loc1 ) ) ; return loc0. toString ( ) ; }",
        "public static String reverse_delete ( String arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) - 1 ; loc1 ++ ) loc0. append ( arg0. charAt ( loc1 ) ) ; return loc0. toString ( ) ; }",
        "public static String reverse_delete ( String arg0 ) { if ( arg0 == null ) throw new NullPointerException ( \"srini_string\" ) ; StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) == '-' ) loc0. append ( arg0 ) ; else loc0. delete ( loc1 ) ; } return loc0. toString ( ) ; }",
        "public static List < Integer > reverse_delete ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < Integer > reverse_delete ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( Integer loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < String > reverse_delete ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( arg0 ) ; for ( String loc1 : arg0 ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < Integer > reverse_delete ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static List < String > reverse_delete ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( arg0 ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. toUpperCase ( ) ) ; return loc0 ; }",
        "public static String reverse_delete ( String arg0 ) { return arg0. substring ( 0, arg0. indexOf ( \"srini_string\" ) ) ; }",
        "public static String reverse_delete ( String arg0 ) { if ( arg0. endsWith ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; } else { return arg0 ; } }",
        "public static String reverse_delete ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) ) { return arg0. substring ( 0, arg0. indexOf ( \"srini_string\" ) ) ; } else { return arg0 ; } }",
        "public static String reverse_delete ( String arg0 ) { return arg0. substring ( arg0. indexOf ( \"srini_string\" ) + 1, arg0. length ( ) ) ; }",
        "public static String reverse_delete ( String arg0 ) { return arg0. substring ( arg0. indexOf ( \"srini_string\" ) + 1 ) ; }",
        "public static String reverse_delete ( String arg0 ) { return arg0. substring ( 0, arg0. length ( ) - 1 ) ; }",
        "public static String reverse_delete ( String arg0 ) { int loc0 = arg0. indexOf ( \"srini_string\" ) ; if ( loc0 < 0 ) { return arg0 ; } else if ( loc0 < 0 ) { return arg0 ; } else { return arg0. substring ( 0, loc0 ) ; } }",
        "public static String reverse_delete ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0. indexOf ( \"srini_string\" ) ; if ( loc0 < 0 ) { arg0 = arg0. substring ( 0, loc0 ) ; } return arg0. substring ( 0, loc0 ) ; }",
        "public static String reverse_delete ( String arg0 ) { int loc0 = arg0. indexOf ( \"srini_string\" ) ; if ( loc0 < 0 ) { arg0 = arg0. substring ( 0, loc0 ) ; } return arg0. substring ( 0, loc0 ) ; }",
        "public static String reverse_delete ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0. indexOf ( \"srini_string\" ) ; if ( loc0 < 0 ) { return arg0 ; } return arg0. substring ( 0, loc0 ) ; }"
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 0) { \n                n--; \n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
      "target": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) { \n                n++; \n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
      "function range": "19,5-32,5",
      "raw_output": [
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) ++ loc0 ; } return loc0 ; }",
        "int function ( Collection < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( Collection < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc0 % 2!= 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) ++ loc0 ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc0 % 2!= 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc0 % 2!= 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) ++ loc0 ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { ++ loc0 ; } } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) ++ loc0 ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc0 % 2!= 0 ) { loc0 ++ ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Get the odd count of a list of strings.",
        "returns the odd count of a list of strings.",
        "Get the odd count of a list of strings",
        "returns the odd count of a list of strings",
        "get odd count of a list of strings"
      ],
      "output": [
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) loc0 ++ ; } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) ++ loc0 ; } return loc0 ; }",
        "public static int odd_count ( Collection < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int odd_count ( Collection < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc0 % 2!= 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) loc0 ++ ; } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) loc0 ++ ; } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) ++ loc0 ; } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc0 % 2!= 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc0 % 2!= 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) loc0 ++ ; } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) ++ loc0 ; } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) { ++ loc0 ; } } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) ++ loc0 ; } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc1. odd ( ) ) loc0 ++ ; } return loc0 ; }",
        "public static int odd_count ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( loc0 % 2!= 0 ) { loc0 ++ ; } } return loc0 ; }"
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num; \n        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
      "target": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += -num; \n        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
      "function range": "14,5-32,5",
      "raw_output": [
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "Long function ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "Long function ( List arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "long function ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "long function ( List arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "long function ( List arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "Long function ( List arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "Long function ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "long function ( List arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "long function ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "long function ( List arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "Long function ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "Long function ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "long function ( ArrayList arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "Long function ( List arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "long function ( ArrayList arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { Long loc2 = ( Long ) arg0. get ( loc1 ) ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 == null ) { loc0 = loc0 ; } else { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { int loc2 = loc1. intValue ( ) ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc0 < loc1. intValue ( ) ) { loc0 = loc1. intValue ( ) ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { int loc2 = loc1. intValue ( ) ; if ( loc0 < loc2 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) loc0 = Math. min ( loc0, loc1. intValue ( ) ) ; return loc0 ; }"
      ],
      "mid_translation": [
        "Method min_subarray_sum.",
        "This method returns the minimum sum of all the elements in an ArrayList of Long.",
        "This method returns the minimum sum of the elements in an ArrayList of Long.",
        "Get the minimum sum of all the elements in an ArrayList of Long.",
        "This method returns the minimum sum of a list of integers."
      ],
      "output": [
        "public static int min_subarray_sum ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int min_subarray_sum ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int min_subarray_sum ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int min_subarray_sum ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int min_subarray_sum ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static Long min_subarray_sum ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static Long min_subarray_sum ( List arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static long min_subarray_sum ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static long min_subarray_sum ( List arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static long min_subarray_sum ( List arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static Long min_subarray_sum ( List arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static Long min_subarray_sum ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static long min_subarray_sum ( List arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static long min_subarray_sum ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static long min_subarray_sum ( List arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static Long min_subarray_sum ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static Long min_subarray_sum ( ArrayList arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) > loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static long min_subarray_sum ( ArrayList arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static Long min_subarray_sum ( List arg0 ) { Long loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) < loc0 ) { loc0 = arg0. get ( loc1 ) ; } } return loc0 ; }",
        "public static long min_subarray_sum ( ArrayList arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { Long loc2 = ( Long ) arg0. get ( loc1 ) ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int min_subarray_sum ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 == null ) { loc0 = loc0 ; } else { loc0 = loc1 ; } } return loc0 ; }",
        "public static int min_subarray_sum ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { int loc2 = loc1. intValue ( ) ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int min_subarray_sum ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc0 < loc1. intValue ( ) ) { loc0 = loc1. intValue ( ) ; } } return loc0 ; }",
        "public static int min_subarray_sum ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { int loc2 = loc1. intValue ( ) ; if ( loc0 < loc2 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int min_subarray_sum ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) loc0 = Math. min ( loc0, loc1. intValue ( ) ) ; return loc0 ; }"
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[j].length; j++) { \n            row_capacity += grid[j][i]; \n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
      "target": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) { \n            row_capacity += grid[i][j]; \n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
      "function range": "38,5-48,5",
      "raw_output": [
        "int function ( ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < 5 ; loc1 ++ ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( ) { MaxFill loc0 = new MaxFill ( ) ; for ( int loc1 = 0 ; loc1 < 5 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0. max_fill ( ) ; }",
        "int function ( ) { MaxFill loc0 = new MaxFill ( ) ; for ( int loc1 = 1 ; loc1 < 5 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0. max_fill ( ) ; }",
        "int function ( ) { Max_fill loc0 = new Max_fill ( ) ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < 5 ; loc2 ++ ) { loc1 = loc0. loc1 ( ) ; } return loc1 ; }",
        "int function ( ) { MaxFill loc0 = new MaxFill ( ) ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < 5 ; loc2 ++ ) { loc1 = loc0. loc1 ( ) ; } return loc1 ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 > 0? arg0 : 128 ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 > 0? arg0 : 128 - arg0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 > 0x7fff ) { return arg0 - 1 ; } if ( arg0 < 0x7fff ) { return 0x7fff ; } return arg0 + 1 ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 > 0x7f ) { return arg0 - 1 ; } if ( arg0 < 0x1ff ) { return 0x1ff ; } return arg0 + 1 ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 > arg0 ) { return arg0 ; } if ( arg0 < arg0 ) { return arg0 ; } return Math. max ( arg0, arg0 - 1 ) ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] > Integer. MAX_VALUE ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1. compareTo ( loc0 ) ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc0 < loc1. intValue ( ) ) { loc0 = loc1. intValue ( ) ; } } return loc0 ; }",
        "int function ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) if ( loc1. compareTo ( loc0 ) > 0 ) loc0 = loc1 ; return loc0 ; }",
        "int function ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) loc0 = loc1 ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc0 < loc1. intValue ( ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Max_fill method.",
        "Get the max_fill value.",
        "max_fill This method returns the max_fill value of an array of integers.",
        "Get max_fill.",
        "max_fill This method calculates the max_fill value of an array of integers."
      ],
      "output": [
        "public static int max_fill ( ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < 5 ; loc1 ++ ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_fill ( ) { MaxFill loc0 = new MaxFill ( ) ; for ( int loc1 = 0 ; loc1 < 5 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0. max_fill ( ) ; }",
        "public static int max_fill ( ) { MaxFill loc0 = new MaxFill ( ) ; for ( int loc1 = 1 ; loc1 < 5 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0. max_fill ( ) ; }",
        "public static int max_fill ( ) { Max_fill loc0 = new Max_fill ( ) ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < 5 ; loc2 ++ ) { loc1 = loc0. loc1 ( ) ; } return loc1 ; }",
        "public static int max_fill ( ) { MaxFill loc0 = new MaxFill ( ) ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < 5 ; loc2 ++ ) { loc1 = loc0. loc1 ( ) ; } return loc1 ; }",
        "public static int max_fill ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 > 0? arg0 : 128 ; }",
        "public static int max_fill ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 > 0? arg0 : 128 - arg0 ; }",
        "public static int max_fill ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 > 0x7fff ) { return arg0 - 1 ; } if ( arg0 < 0x7fff ) { return 0x7fff ; } return arg0 + 1 ; }",
        "public static int max_fill ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 > 0x7f ) { return arg0 - 1 ; } if ( arg0 < 0x1ff ) { return 0x1ff ; } return arg0 + 1 ; }",
        "public static int max_fill ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } if ( arg0 > arg0 ) { return arg0 ; } if ( arg0 < arg0 ) { return arg0 ; } return Math. max ( arg0, arg0 - 1 ) ; }",
        "public static int max_fill ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_fill ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_fill ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int max_fill ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_fill ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] > Integer. MAX_VALUE ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_fill ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1. compareTo ( loc0 ) ; } } return loc0 ; }",
        "public static int max_fill ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc0 < loc1. intValue ( ) ) { loc0 = loc1. intValue ( ) ; } } return loc0 ; }",
        "public static int max_fill ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) if ( loc1. compareTo ( loc0 ) > 0 ) loc0 = loc1 ; return loc0 ; }",
        "public static int max_fill ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) loc0 = loc1 ; } return loc0 ; }",
        "public static int max_fill ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc0 < loc1. intValue ( ) ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_fill ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_fill ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_fill ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_fill ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int max_fill ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = loc1 ; } } return loc0 ; }"
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1; \n      if(o1 < o2) return 0; \n      if(o1 > o2) return -1; \n   } \n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
      "target": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 0; \n      if(o1 < o2) return -1; \n      if(o1 > o2) return 1; \n   } \n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
      "function range": "31,10-42,10",
      "raw_output": [
        "boolean function ( int arg0, int arg1 ) { return arg0 < arg1 ; }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } else { return false ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg1 < arg0 ) { return 1 ; } else if ( arg1 > arg1 ) { return 1 ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 < arg0 ) { return 1 ; } else if ( arg1 > arg1 ) { return 1 ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg1 < arg0 ) { return 1 ; } else if ( arg1 > arg1 ) { return 1 ; } return 0 ; }",
        "int function ( int arg0, int arg1 ) { return arg0 < arg1? - 1 : ( arg0 == arg1? 0 : 1 ) ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 == 1 ) { return 1 ; } else if ( loc0 == 0 ) { return - 1 ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 > 0 ) { return 1 ; } else if ( loc0 < 0 ) { return - 1 ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 > 0 ) { return 1 ; } else if ( loc0 == 0 ) { return - 1 ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg1 < arg0 ) { return + 1 ; } else if ( arg1 > arg1 ) { return 1 ; } else { return 0 ; } }",
        "int function ( Number arg0, Number arg1 ) { if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return - 1 ; } else if ( arg1. doubleValue ( ) < arg0. doubleValue ( ) ) { return 1 ; } else if ( arg1. doubleValue ( ) > arg0. doubleValue ( ) ) { return 1 ; } else { return 0 ; } }",
        "int function ( Number arg0, Number arg1 ) { if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return - 1 ; } else if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return 1 ; } else if ( arg1. doubleValue ( ) > arg1. doubleValue ( ) ) { return 1 ; } else { return 0 ; } }",
        "int function ( Number arg0, Number arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else { return arg0. compareTo ( arg1 ) ; } } else { return arg1. compareTo ( arg0 ) ; } }",
        "int function ( Number arg0, Number arg1 ) { if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return - 1 ; } else if ( arg0. doubleValue ( ) > arg1. doubleValue ( ) ) { return 1 ; } else if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return 1 ; } else { return 0 ; } }",
        "int function ( Number arg0, Number arg1 ) { if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return - 1 ; } else if ( arg0. doubleValue ( ) > arg1. doubleValue ( ) ) { return 1 ; } else if ( arg1. doubleValue ( ) < arg1. doubleValue ( ) ) { return 1 ; } else { return 0 ; } }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 instanceof Integer ) { Integer loc0 = ( Integer ) arg0 ; Integer loc1 = ( Integer ) arg1 ; return loc0. compareTo ( loc1 ) == 0 ; } else if ( loc0 == null ) { return 0 ; } else { return loc0. compareTo ( loc1 ) == 0 ; } }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 instanceof Integer ) { Integer loc0 = ( Integer ) arg0 ; Integer loc1 = ( Integer ) arg1 ; return loc0. compareTo ( loc1 ) == 0 ; } return 0 ; }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 instanceof Integer ) { Integer loc0 = ( Integer ) arg0 ; Integer loc1 = ( Integer ) arg1 ; return loc0. compareTo ( loc1 ) == 0 ; } else { return false ; } }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 instanceof Integer ) { Integer loc0 = ( Integer ) arg0 ; Integer loc1 = ( Integer ) arg1 ; return ( loc0 == loc1 )? ( loc0 == loc1 : loc0. compareTo ( loc1 ) ) ; } else { return false ; } }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 instanceof Integer ) { Integer loc0 = ( Integer ) arg0 ; Integer loc1 = ( Integer ) arg1 ; return ( loc0 == loc1 ) ; } else if ( loc0 == null ) { return ( loc1 == null )? 0 : loc0. compareTo ( loc1 ) == 0 ; } else { return false ; } }",
        "int function ( int arg0, int arg1 ) { return arg0 < arg1? - 1 : ( arg0 == arg1? 0 : 1 ) ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 < arg0 ) { return 1 ; } else if ( arg1 > arg1 ) { return 1 ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 < arg0 ) { return 1 ; } else if ( arg1 > arg1 ) { return 1 ; } return 0 ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 > 0 ) { return 1 ; } else if ( loc0 < 0 ) { return - 1 ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 == arg0 ) { return 1 ; } else if ( arg1 == arg1 ) { return 1 ; } else { return 0 ; } }"
      ],
      "mid_translation": [
        "Compare two integer values.",
        "Compare two integers.",
        "Compare two numbers.",
        "Compare two integer values",
        "Compare 2 integer values."
      ],
      "output": [
        "@Override\npublic boolean compare ( int arg0, int arg1 ) { return arg0 < arg1 ; }",
        "@Override\npublic boolean compare ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } else { return false ; } }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg1 < arg0 ) { return 1 ; } else if ( arg1 > arg1 ) { return 1 ; } else { return 0 ; } }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 < arg0 ) { return 1 ; } else if ( arg1 > arg1 ) { return 1 ; } else { return 0 ; } }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg1 < arg0 ) { return 1 ; } else if ( arg1 > arg1 ) { return 1 ; } return 0 ; }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { return arg0 < arg1? - 1 : ( arg0 == arg1? 0 : 1 ) ; }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 == 1 ) { return 1 ; } else if ( loc0 == 0 ) { return - 1 ; } else { return 0 ; } }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 > 0 ) { return 1 ; } else if ( loc0 < 0 ) { return - 1 ; } else { return 0 ; } }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 > 0 ) { return 1 ; } else if ( loc0 == 0 ) { return - 1 ; } else { return 0 ; } }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg1 < arg0 ) { return + 1 ; } else if ( arg1 > arg1 ) { return 1 ; } else { return 0 ; } }",
        "@Override\npublic int compare ( Number arg0, Number arg1 ) { if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return - 1 ; } else if ( arg1. doubleValue ( ) < arg0. doubleValue ( ) ) { return 1 ; } else if ( arg1. doubleValue ( ) > arg0. doubleValue ( ) ) { return 1 ; } else { return 0 ; } }",
        "@Override\npublic int compare ( Number arg0, Number arg1 ) { if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return - 1 ; } else if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return 1 ; } else if ( arg1. doubleValue ( ) > arg1. doubleValue ( ) ) { return 1 ; } else { return 0 ; } }",
        "@Override\npublic int compare ( Number arg0, Number arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else { return arg0. compareTo ( arg1 ) ; } } else { return arg1. compareTo ( arg0 ) ; } }",
        "@Override\npublic int compare ( Number arg0, Number arg1 ) { if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return - 1 ; } else if ( arg0. doubleValue ( ) > arg1. doubleValue ( ) ) { return 1 ; } else if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return 1 ; } else { return 0 ; } }",
        "@Override\npublic int compare ( Number arg0, Number arg1 ) { if ( arg0. doubleValue ( ) < arg1. doubleValue ( ) ) { return - 1 ; } else if ( arg0. doubleValue ( ) > arg1. doubleValue ( ) ) { return 1 ; } else if ( arg1. doubleValue ( ) < arg1. doubleValue ( ) ) { return 1 ; } else { return 0 ; } }",
        "@Override\npublic boolean compare ( Object arg0, Object arg1 ) { if ( arg0 instanceof Integer ) { Integer loc0 = ( Integer ) arg0 ; Integer loc1 = ( Integer ) arg1 ; return loc0. compareTo ( loc1 ) == 0 ; } else if ( loc0 == null ) { return 0 ; } else { return loc0. compareTo ( loc1 ) == 0 ; } }",
        "@Override\npublic boolean compare ( Object arg0, Object arg1 ) { if ( arg0 instanceof Integer ) { Integer loc0 = ( Integer ) arg0 ; Integer loc1 = ( Integer ) arg1 ; return loc0. compareTo ( loc1 ) == 0 ; } return 0 ; }",
        "@Override\npublic boolean compare ( Object arg0, Object arg1 ) { if ( arg0 instanceof Integer ) { Integer loc0 = ( Integer ) arg0 ; Integer loc1 = ( Integer ) arg1 ; return loc0. compareTo ( loc1 ) == 0 ; } else { return false ; } }",
        "@Override\npublic boolean compare ( Object arg0, Object arg1 ) { if ( arg0 instanceof Integer ) { Integer loc0 = ( Integer ) arg0 ; Integer loc1 = ( Integer ) arg1 ; return ( loc0 == loc1 )? ( loc0 == loc1 : loc0. compareTo ( loc1 ) ) ; } else { return false ; } }",
        "@Override\npublic boolean compare ( Object arg0, Object arg1 ) { if ( arg0 instanceof Integer ) { Integer loc0 = ( Integer ) arg0 ; Integer loc1 = ( Integer ) arg1 ; return ( loc0 == loc1 ) ; } else if ( loc0 == null ) { return ( loc1 == null )? 0 : loc0. compareTo ( loc1 ) == 0 ; } else { return false ; } }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { return arg0 < arg1? - 1 : ( arg0 == arg1? 0 : 1 ) ; }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 < arg0 ) { return 1 ; } else if ( arg1 > arg1 ) { return 1 ; } else { return 0 ; } }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 < arg0 ) { return 1 ; } else if ( arg1 > arg1 ) { return 1 ; } return 0 ; }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 > 0 ) { return 1 ; } else if ( loc0 < 0 ) { return - 1 ; } else { return 0 ; } }",
        "@Override\npublic int compare ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg0 == arg1 ) { return 0 ; } else if ( arg1 == arg0 ) { return 1 ; } else if ( arg1 == arg1 ) { return 1 ; } else { return 0 ; } }"
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'}; \n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
      "target": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}; \n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
      "function range": "20,5-39,5",
      "raw_output": [
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( arg0. split ( \"srini_string\" ) ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { String loc2 = loc1. nextToken ( ) ; if ( loc2. equals ( \"srini_string\" ) ) loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( arg0. split ( \"srini_string\" ) ) ; for ( int loc1 = 0 ; loc1 < arg0. split ( \"srini_string\" ). length ; loc1 ++ ) loc0. add ( arg0. split ( \"srini_string\" ) [ loc1 ] ) ; return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + arg1 ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { String loc2 = arg0. substring ( loc1, loc1 + 1 ) ; if ( loc2. equals ( \"srini_string\" ) ) loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; return loc0 ; }",
        "List < Word > function ( String arg0 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( new Word ( loc1 ) ) ; } return loc0 ; }",
        "List < Word > function ( String arg0, int arg1 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( new Word ( arg0 ) ) ; } return loc0 ; }",
        "List < Word > function ( String arg0 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) loc0. add ( new Word ( loc1 ) ) ; return loc0 ; }",
        "List < Word > function ( String arg0, List < Word > arg1 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( String loc1 : arg1 ) { loc0. add ( new Word ( arg0, loc1 ) ) ; } return loc0 ; }",
        "List < Word > function ( String arg0 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; select ( arg0, loc0 ) ; return loc0 ; }",
        "List < String > function ( int arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( \"srini_string\" ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0 ) ; } return loc0 ; }",
        "List < Word > function ( int arg0 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( word ( ) ) ; } return loc0 ; }",
        "List < Word > function ( int arg0 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( new Word ( ) ) ; } return loc0 ; }",
        "List < String > function ( int arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1. toString ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + arg1 ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + arg1 ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "List < String > function ( int arg0, String arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( arg1. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Select n words from a string",
        "Select n words from a String",
        "Select n words from s.",
        "Select n words from string",
        "Select n words from string."
      ],
      "output": [
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( arg0. split ( \"srini_string\" ) ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { String loc2 = loc1. nextToken ( ) ; if ( loc2. equals ( \"srini_string\" ) ) loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( arg0. split ( \"srini_string\" ) ) ; for ( int loc1 = 0 ; loc1 < arg0. split ( \"srini_string\" ). length ; loc1 ++ ) loc0. add ( arg0. split ( \"srini_string\" ) [ loc1 ] ) ; return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + arg1 ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { String loc2 = arg0. substring ( loc1, loc1 + 1 ) ; if ( loc2. equals ( \"srini_string\" ) ) loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; return loc0 ; }",
        "public static List < Word > select_words ( String arg0 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( new Word ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Word > select_words ( String arg0, int arg1 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( new Word ( arg0 ) ) ; } return loc0 ; }",
        "public static List < Word > select_words ( String arg0 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) loc0. add ( new Word ( loc1 ) ) ; return loc0 ; }",
        "public static List < Word > select_words ( String arg0, List < Word > arg1 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( String loc1 : arg1 ) { loc0. add ( new Word ( arg0, loc1 ) ) ; } return loc0 ; }",
        "public static List < Word > select_words ( String arg0 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; select ( arg0, loc0 ) ; return loc0 ; }",
        "public static List < String > select_words ( int arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( \"srini_string\" ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0 ) ; } return loc0 ; }",
        "public static List < Word > select_words ( int arg0 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( word ( ) ) ; } return loc0 ; }",
        "public static List < Word > select_words ( int arg0 ) { List < Word > loc0 = new ArrayList < Word > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( new Word ( ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( int arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1. toString ( ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + arg1 ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + arg1 ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( arg0. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }",
        "public static List < String > select_words ( int arg0, String arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( arg1. substring ( loc1, loc1 + 1 ) ) ; } return loc0 ; }"
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = word.length() - 2; i >= 0; i--) { \n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
      "target": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = word.length() - 2; i > 0; i--) { \n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
      "function range": "23,5-34,5",
      "raw_output": [
        "int function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return 1 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 2 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 3 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 4 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 5 ; } else { return 6 ; } }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return arg0 ; } }",
        "int function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return 1 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 2 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 3 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 4 ; } else { return 5 ; } }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return arg0 ; } }",
        "Vowel function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new vowel ( \"srini_string\" ) ; } else { return null ; } }",
        "Vowel function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } return null ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\", false ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "Vowel function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new vowel ( \"srini_string\" ) ; } return null ; }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else return \"srini_string\" ; }",
        "Vowel function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else { throw new Exception ( \"srini_string\" ) ; } }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else throw new Exception ( \"srini_string\" ) ; }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { throw new Exception ( \"srini_string\" ) ; } }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { throw new Exception ( \"srini_string\" ) ; } }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else return \"srini_string\" ; }",
        "Vowel function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( ) ; } else { throw new Exception ( \"srini_string\" ) ; } }",
        "Vowel function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return ( Vowel ) arg0 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return ( Vowel ) arg0 ; } else { throw new Exception ( \"srini_string\" ) ; } }",
        "Set function ( String arg0 ) { Set loc0 = new HashSet ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "Set function ( String arg0 ) { Set loc0 = new HashSet ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\", false ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "Set function ( String arg0 ) { Set loc0 = new HashSet ( ) ; loc0. add ( new Set ( arg0. split ( \"srini_string\" ) ) ) ; loc0. add ( new Set ( \"srini_string\" ) ) ; loc0. add ( new Set ( \"srini_string\" ) ) ; return loc0 ; }",
        "Set function ( String arg0 ) { Set loc0 = null ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) =='' ) { loc0 = ( Set ) arg0. charAt ( loc2 + 1 ) ; break ; } } return loc0 ; }",
        "Set function ( String arg0 ) { Set loc0 = new HashSet ( ) ; loc0. add ( new Set ( arg0. split ( \"srini_string\" ) ) ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) =='' ) { loc0. add ( loc1 ) ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Gets thecloset vowel of a word.",
        "Get thecloset vowel of a word.",
        "get_closet_vowel This method returns thecloset vowel of a word.",
        "get_closet_vowel This method returns thecloset vowel of the word.",
        "Get thecloset vowel of a word"
      ],
      "output": [
        "public static int get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return 1 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 2 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 3 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 4 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 5 ; } else { return 6 ; } }",
        "public static String get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return arg0 ; } }",
        "public static int get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return 1 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 2 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 3 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return 4 ; } else { return 5 ; } }",
        "public static String get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return arg0 ; } }",
        "public static Vowel get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new vowel ( \"srini_string\" ) ; } else { return null ; } }",
        "public static Vowel get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } return null ; }",
        "public static List < String > get_closet_vowel ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > get_closet_vowel ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\", false ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static Vowel get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new vowel ( \"srini_string\" ) ; } return null ; }",
        "public static String get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else return \"srini_string\" ; }",
        "public static Vowel get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( \"srini_string\" ) ; } else { throw new Exception ( \"srini_string\" ) ; } }",
        "public static String get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else throw new Exception ( \"srini_string\" ) ; }",
        "public static String get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { throw new Exception ( \"srini_string\" ) ; } }",
        "public static String get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return \"srini_string\" ; } }",
        "public static String get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { throw new Exception ( \"srini_string\" ) ; } }",
        "public static String get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; else return \"srini_string\" ; }",
        "public static Vowel get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( ) ; } else if ( arg0. equals ( \"srini_string\" ) ) { return new Vowel ( ) ; } else { throw new Exception ( \"srini_string\" ) ; } }",
        "public static Vowel get_closet_vowel ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return ( Vowel ) arg0 ; } else if ( arg0. equals ( \"srini_string\" ) ) { return ( Vowel ) arg0 ; } else { throw new Exception ( \"srini_string\" ) ; } }",
        "public static Set get_closet_vowel ( String arg0 ) { Set loc0 = new HashSet ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static Set get_closet_vowel ( String arg0 ) { Set loc0 = new HashSet ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\", false ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static Set get_closet_vowel ( String arg0 ) { Set loc0 = new HashSet ( ) ; loc0. add ( new Set ( arg0. split ( \"srini_string\" ) ) ) ; loc0. add ( new Set ( \"srini_string\" ) ) ; loc0. add ( new Set ( \"srini_string\" ) ) ; return loc0 ; }",
        "public static Set get_closet_vowel ( String arg0 ) { Set loc0 = null ; int loc1 = arg0. loc1 ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) =='' ) { loc0 = ( Set ) arg0. charAt ( loc2 + 1 ) ; break ; } } return loc0 ; }",
        "public static Set get_closet_vowel ( String arg0 ) { Set loc0 = new HashSet ( ) ; loc0. add ( new Set ( arg0. split ( \"srini_string\" ) ) ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { if ( arg0. charAt ( loc1 ) =='' ) { loc0. add ( loc1 ) ; } } return loc0 ; }"
      ]
    },
    "MATCH_PARENS": {
      "loc": "22-24",
      "input": "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') val--; \n        else val++; \n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
      "target": "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') val++; \n        else val--; \n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
      "function range": "19,5-27,5",
      "raw_output": [
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0. charAt ( loc1 ) == SECTYPE. name ( ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0. charAt ( loc1 ) == SECTYPE. charValue ( ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0. charAt ( loc1 ) == SECTYPE. ID ) return true ; return false ; }",
        "boolean function ( String arg0 ) { return arg0. charAt ( 0 ) == SECTYPE ; }",
        "boolean function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if (! Character. isLetter ( arg0. charAt ( loc1 ) ) ) return false ; return true ; }",
        "boolean function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) return false ; return true ; }",
        "boolean function ( String arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) if (! Character. isLetter ( arg0. charAt ( loc0 ) ) ) return false ; return true ; }",
        "boolean function ( String arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) if ( Character. isLetter ( arg0. charAt ( loc0 ) ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) return true ; else return false ; }",
        "boolean function ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return true ; } else { return false ; } }",
        "boolean function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if (! Character. isLetter ( arg0. charAt ( loc1 ) ) ) return false ; return true ; }",
        "boolean function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if (! Character. isLetterOrDigit ( arg0. charAt ( loc1 ) ) ) return false ; return true ; }",
        "boolean function ( String arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) if (! Character. isLetter ( arg0. charAt ( loc0 ) ) ) return false ; return true ; }",
        "boolean function ( String arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) if ( Character. isLetter ( arg0. charAt ( loc0 ) ) ) return false ; return true ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0. charAt ( loc1 ) == SECTYPE ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0. charAt ( loc1 ) == CID. SECTYPE ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; int loc1 = arg0. loc1 ( ) ; if ( loc0 > 0 && loc1 > 0 ) return true ; return false ; }"
      ],
      "mid_translation": [
        "Check if the given string is a CID SECTYPE.",
        "Check if the given string is a valid CID SECTYPE.",
        "Check if the given string is a CID taxonomy.",
        "Checks if the given string is a valid CID SECTYPE.",
        "Check if the given string is a CID SECTYPE string."
      ],
      "output": [
        "public static boolean check ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0. charAt ( loc1 ) == SECTYPE. name ( ) ) return true ; return false ; }",
        "public static boolean check ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0. charAt ( loc1 ) == SECTYPE. charValue ( ) ) return true ; return false ; }",
        "public static boolean check ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) return true ; return false ; }",
        "public static boolean check ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0. charAt ( loc1 ) == SECTYPE. ID ) return true ; return false ; }",
        "public static boolean check ( String arg0 ) { return arg0. charAt ( 0 ) == SECTYPE ; }",
        "public static boolean check ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if (! Character. isLetter ( arg0. charAt ( loc1 ) ) ) return false ; return true ; }",
        "public static boolean check ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) return true ; return false ; }",
        "public static boolean check ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) return false ; return true ; }",
        "public static boolean check ( String arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) if (! Character. isLetter ( arg0. charAt ( loc0 ) ) ) return false ; return true ; }",
        "public static boolean check ( String arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) if ( Character. isLetter ( arg0. charAt ( loc0 ) ) ) return true ; return false ; }",
        "public static boolean check ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean check ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) return true ; else return false ; }",
        "public static boolean check ( String arg0 ) { return arg0. indexOf ( \"srini_string\" ) > - 1 ; }",
        "public static boolean check ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean check ( String arg0 ) { if ( \"srini_string\". equals ( arg0 ) ) { return true ; } else { return false ; } }",
        "public static boolean check ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if (! Character. isLetter ( arg0. charAt ( loc1 ) ) ) return false ; return true ; }",
        "public static boolean check ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( Character. isLetter ( arg0. charAt ( loc1 ) ) ) return true ; return false ; }",
        "public static boolean check ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if (! Character. isLetterOrDigit ( arg0. charAt ( loc1 ) ) ) return false ; return true ; }",
        "public static boolean check ( String arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) if (! Character. isLetter ( arg0. charAt ( loc0 ) ) ) return false ; return true ; }",
        "public static boolean check ( String arg0 ) { for ( int loc0 = 0 ; loc0 < arg0. length ( ) ; loc0 ++ ) if ( Character. isLetter ( arg0. charAt ( loc0 ) ) ) return false ; return true ; }",
        "public static boolean check ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean check ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean check ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0. charAt ( loc1 ) == SECTYPE ) return true ; return false ; }",
        "public static boolean check ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( arg0. charAt ( loc1 ) == CID. SECTYPE ) return true ; return false ; }",
        "public static boolean check ( String arg0 ) { if ( arg0 == null ) return false ; int loc0 = arg0. loc0 ( ) ; int loc1 = arg0. loc1 ( ) ; if ( loc0 > 0 && loc1 > 0 ) return true ; return false ; }"
      ]
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) { \n        result.add(arr.get(i));\n    }\n    return result;\n}",
      "target": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for(int i = arr.size() - k; i <= arr.size() - 1; i++) { \n        result.add(arr.get(i));\n    }\n    return result;\n}",
      "function range": "32,5-39,5",
      "raw_output": [
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 + 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 + 1 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 + 1 ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return Math. max ( 1, Math. min ( arg0, arg0 ) ) ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return Math. max ( 1, Math. min ( arg0, arg0 - 1 ) ) ; }",
        "int function ( int arg0 ) { if ( arg0 == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Math. max ( 1, Math. min ( arg0, arg0 - 1 ) ) ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, ( loc1 + 1 ) % arg0 ) ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Math. max ( 1, Math. min ( arg0, arg0 ) ) ; }"
      ],
      "mid_translation": [
        "Returns the maximum k elements of the array.",
        "Returns the maximum k elements in the array.",
        "Returns the maximum k elements of an array.",
        "Returns the maximum k elements of the given array",
        "Returns the maximum k elements of the array"
      ],
      "output": [
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; ++ loc1 ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 + 1 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 + 1 ; }",
        "public static int maximum_k ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg0 [ loc0 ] ) { loc0 = loc1 ; } } return loc0 + 1 ; }",
        "public static int maximum_k ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return Math. max ( 1, Math. min ( arg0, arg0 ) ) ; }",
        "public static int maximum_k ( int arg0 ) { if ( arg0 < 1 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return Math. max ( 1, Math. min ( arg0, arg0 - 1 ) ) ; }",
        "public static int maximum_k ( int arg0 ) { if ( arg0 == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Math. max ( 1, Math. min ( arg0, arg0 - 1 ) ) ; }",
        "public static int maximum_k ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, ( loc1 + 1 ) % arg0 ) ; } return loc0 ; }",
        "public static int maximum_k ( int arg0 ) { if ( arg0 == 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Math. max ( 1, Math. min ( arg0, arg0 ) ) ; }"
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) { \n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
      "target": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 0 && (lst.get(i) % 2) == 1) { \n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
      "function range": "16,5-24,5",
      "raw_output": [
        "List < Integer > function ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 ; for ( loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 - 1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0 [ ] ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 ; for ( loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 ; for ( loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 - 1 ) ) ; loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 ; for ( loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 ; for ( loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < arg0. size ( ) ; loc2 ++ ) { int loc3 = arg0. get ( loc2 - 1 ) ; loc0. add ( loc3 ) ; loc1 ++ ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0. add ( loc2 ) ; loc1 ++ ; } return loc0 ; }",
        "void function ( Integer arg0, Integer arg1 ) { System. out. println ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; }",
        "void function ( String [ ] arg0 ) { Mammoth loc0 = new Mammoth ( ) ; loc0. mix ( ) ; loc0. mix ( ) ; }",
        "void function ( String [ ] arg0 ) { Mammoth loc0 = new Mammoth ( ) ; loc0. observe ( ) ; }",
        "void function ( String arg0 [ ] ) { System. out. println ( \"srini_string\" ) ; }",
        "void function ( String [ ] arg0 ) { System. out. println ( \"srini_string\" ) ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; loc0 [ loc1 ] = loc2 ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { loc0 [ loc1 ] = loc2 ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 ) { loc0 [ loc1 ] = loc2 ; } else { loc0 [ loc1 ] = loc2 ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { loc0 [ loc2 ] = loc3 ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 < loc1 ) { loc0 [ loc2 ] = loc3 ; loc1 ++ ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < arg0 [ loc1 ] ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { for ( int loc2 = 1 ; loc2 < arg0 [ loc1 ] ; loc2 ++ ) { loc0 [ loc1 ] = arg0 [ loc2 ] ; } } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < arg0 [ loc1 ] ; loc2 ++ ) { loc0 [ loc1 ] = arg0 [ loc2 ] ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Solution of a list of integers.",
        "Solves the solution of a list of integers.",
        "Solution method.",
        "Solves the solution of an array of integers.",
        "Solution of an array of integers."
      ],
      "output": [
        "public static List < Integer > solution ( int [ ] arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static List < Integer > solution ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 ; for ( loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 - 1 ) ) ; } return loc0 ; }",
        "public static List < Integer > solution ( int arg0 [ ] ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static List < Integer > solution ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 ; for ( loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Integer > solution ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 ; for ( loc1 = 1 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 - 1 ) ) ; loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > solution ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 ; for ( loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Integer > solution ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < Integer > solution ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 ; for ( loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Integer > solution ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < arg0. size ( ) ; loc2 ++ ) { int loc3 = arg0. get ( loc2 - 1 ) ; loc0. add ( loc3 ) ; loc1 ++ ; } return loc0 ; }",
        "public static List < Integer > solution ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0. size ( ) ) ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < arg0. size ( ) ; loc2 ++ ) { loc0. add ( loc2 ) ; loc1 ++ ; } return loc0 ; }",
        "public static void solution ( Integer arg0, Integer arg1 ) { System. out. println ( \"srini_string\" + arg0 + \"srini_string\" + arg1 ) ; }",
        "public static void solution ( String [ ] arg0 ) { Mammoth loc0 = new Mammoth ( ) ; loc0. mix ( ) ; loc0. mix ( ) ; }",
        "public static void solution ( String [ ] arg0 ) { Mammoth loc0 = new Mammoth ( ) ; loc0. observe ( ) ; }",
        "public static void solution ( String arg0 [ ] ) { System. out. println ( \"srini_string\" ) ; }",
        "public static void solution ( String [ ] arg0 ) { System. out. println ( \"srini_string\" ) ; }",
        "public static int [ ] solution ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; loc0 [ loc1 ] = loc2 ; } return loc0 ; }",
        "public static int [ ] solution ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { loc0 [ loc1 ] = loc2 ; } } return loc0 ; }",
        "public static int [ ] solution ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < 0 ) { loc0 [ loc1 ] = loc2 ; } else { loc0 [ loc1 ] = loc2 ; } } return loc0 ; }",
        "public static int [ ] solution ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; for ( int loc3 = 1 ; loc3 < arg0. length ; loc3 ++ ) { loc0 [ loc2 ] = loc3 ; } } return loc0 ; }",
        "public static int [ ] solution ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 < loc1 ) { loc0 [ loc2 ] = loc3 ; loc1 ++ ; } } return loc0 ; }",
        "public static int [ ] solution ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] solution ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < arg0 [ loc1 ] ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int [ ] solution ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] solution ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { for ( int loc2 = 1 ; loc2 < arg0 [ loc1 ] ; loc2 ++ ) { loc0 [ loc1 ] = arg0 [ loc2 ] ; } } return loc0 ; }",
        "public static int [ ] solution ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < arg0 [ loc1 ] ; loc2 ++ ) { loc0 [ loc1 ] = arg0 [ loc2 ] ; } } return loc0 ; }"
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) { \n            result -= arr.get(i); \n        }\n    }\n    return result;\n}",
      "target": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() <= 2) { \n            result += arr.get(i); \n        }\n    }\n    return result;\n}",
      "function range": "21,5-29,5",
      "raw_output": [
        "double [ ] function ( double [ ] arg0, int arg1 ) { double [ ] loc0 = new double [ arg0. length + arg1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "T [ ] function ( T [ ] arg0, int arg1 ) { T [ ] loc0 = new T [ arg0. length + arg1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "void function ( T [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { T loc1 = arg0 [ loc0 ] ; arg0 [ loc0 ] = loc1 ; } }",
        "void function ( T [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { T loc1 = arg0 [ loc0 ] ; arg0 [ loc0 ] = loc1 ; } arg0 [ arg0. length - 1 ] = loc1 ; }",
        "void function ( T [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { T loc1 = arg0 [ loc0 ] ; arg0 [ loc0 ] = loc1 ; arg0 [ loc0 ] = loc1 ; } }",
        "ArrayList function ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "ArrayList function ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "ArrayList function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return new ArrayList ( loc0 ) ; }",
        "ArrayList function ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "ArrayList function ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "ArrayList < Integer > function ( Integer [ ] arg0, int arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( Integer [ ] arg0, int arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "ArrayList < Integer > function ( Integer [ ] arg0, int arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "ArrayList < Integer > function ( Integer arg0, int arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( arg1 ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( int arg0, Integer... arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg1. length ) ; for ( int loc1 = 0 ; loc1 < arg1. length ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "ArrayList function ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "ArrayList function ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "ArrayList function ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "ArrayList function ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length + arg1 ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "ArrayList function ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length + arg1 ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] += arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] += arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return arg0 ; }"
      ],
      "mid_translation": [
        "Add k elements to the array.",
        "Add k elements to an ArrayList of integers.",
        "Add k elements to an ArrayList of Integer.",
        "Add k elements to a ArrayList of integers.",
        "Add k elements to the array of integers."
      ],
      "output": [
        "public static double [ ] add_elements ( double [ ] arg0, int arg1 ) { double [ ] loc0 = new double [ arg0. length + arg1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static T [ ] add_elements ( T [ ] arg0, int arg1 ) { T [ ] loc0 = new T [ arg0. length + arg1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static void add_elements ( T [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { T loc1 = arg0 [ loc0 ] ; arg0 [ loc0 ] = loc1 ; } }",
        "public static void add_elements ( T [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { T loc1 = arg0 [ loc0 ] ; arg0 [ loc0 ] = loc1 ; } arg0 [ arg0. length - 1 ] = loc1 ; }",
        "public static void add_elements ( T [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { T loc1 = arg0 [ loc0 ] ; arg0 [ loc0 ] = loc1 ; arg0 [ loc0 ] = loc1 ; } }",
        "public static ArrayList add_elements ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static ArrayList add_elements ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static ArrayList add_elements ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return new ArrayList ( loc0 ) ; }",
        "public static ArrayList add_elements ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "public static ArrayList add_elements ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "public static ArrayList < Integer > add_elements ( Integer [ ] arg0, int arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static ArrayList < Integer > add_elements ( Integer [ ] arg0, int arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "public static ArrayList < Integer > add_elements ( Integer [ ] arg0, int arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "public static ArrayList < Integer > add_elements ( Integer arg0, int arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( arg1 ) ; } return loc0 ; }",
        "public static ArrayList < Integer > add_elements ( int arg0, Integer... arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg1. length ) ; for ( int loc1 = 0 ; loc1 < arg1. length ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static ArrayList add_elements ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static ArrayList add_elements ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "public static ArrayList add_elements ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static ArrayList add_elements ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length + arg1 ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0. add ( arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static ArrayList add_elements ( int [ ] arg0, int arg1 ) { ArrayList loc0 = new ArrayList ( arg0. length + arg1 ) ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0. add ( arg0 [ loc1 ] ) ; return loc0 ; }",
        "public static int [ ] add_elements ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] add_elements ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] add_elements ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] += arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] add_elements ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length + arg1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] add_elements ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return arg0 ; }"
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) { \n        if((n % 2) == 1) n /= 2; \n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
      "target": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) { \n        if((n % 2) == 0) n /= 2; \n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "24,5-34,5",
      "raw_output": [
        "int function ( int arg0 ) { if ( arg0 % 2 == 1 ) { return arg0 % 2 ; } else if ( arg0 % 2 == 1 ) { return arg0 % 2 ; } else { return arg0 % 2 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return arg0 ; } else if ( arg0 % 2 == 1 ) { return arg0 % 2 ; } else { return arg0 % 2 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) return arg0 ; if ( arg0 % 2 == 1 ) return arg0 % 2 ; if ( arg0 % 2 == 1 ) return arg0 % 2 ; return arg0 % 2 ; }",
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; return arg0 % 2 ; }",
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; return arg0 ; }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 1 ) { return arg0 % 2 ; } else if ( arg0 % 2 == 1 ) { return arg0 % 2 ; } else { return arg0 % 2 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return arg0 % 2 ; } else if ( arg0 % 2!= 0 ) { return arg0 % 2 ; } else { return arg0 % 2 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) return arg0 ; if ( arg0 % 2 == 1 ) return arg0 % 2 ; if ( arg0 % 2 == 1 ) return arg0 % 2 ; return arg0 % 2 ; }",
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; return arg0 ; }",
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return arg0 % 2 ; } else if ( arg0 < 0 ) { return arg0 ; } else { return arg0 % 2 ; } }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) { loc0. add ( loc2 & 1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) { loc0. add ( loc2 & 1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; int loc3 = arg0. get ( loc1 + 1 ) ; loc0. add ( loc2, loc3 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; int loc3 = arg0. get ( loc1 + 1 ) ; loc0. add ( loc2, loc3 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) loc0. add ( loc2 & 1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) { loc0. add ( loc2 & 1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) loc0. add ( loc2 & 1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) { loc0. add ( loc2 & 1 ) ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; int loc3 = arg0. get ( loc1 + 1 ) ; loc0. add ( loc2, loc3 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) loc0. add ( loc2 & 1 ) ; } return loc0 ; }",
        "int function ( N arg0 ) { if ( arg0. odd ( ) ) { return 1 ; } else if ( arg0. even ( ) ) { return 2 ; } else if ( arg0. odd ( ) ) { return 3 ; } return 0 ; }",
        "int function ( N arg0 ) { if ( arg0. odd ( ) ) { return 1 ; } else if ( arg0. even ( ) ) { return 2 ; } else if ( arg0. even ( ) ) { return 3 ; } return 0 ; }",
        "int function ( N arg0 ) { int loc0 = arg0. loc0 ( ) ; if ( ( loc0 & 1 )!= 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return loc0 ; }",
        "int function ( N arg0 ) { if ( arg0. odd ( ) ) { return 1 ; } else if ( arg0. even ( ) ) { return 2 ; } else { return 0 ; } }",
        "int function ( Integer arg0 ) { long loc0 = arg0. loc0 ( ) ; if ( ( loc0 & 1 )!= 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return ( int ) ( loc0 >> 1 ) ; }"
      ],
      "mid_translation": [
        "Gets the odd collatz.",
        "Get the odd collatz.",
        "Gets the odd collatz list.",
        "Get the odd collatz list.",
        "Get the odd collatz of n."
      ],
      "output": [
        "public static int get_odd_collatz ( int arg0 ) { if ( arg0 % 2 == 1 ) { return arg0 % 2 ; } else if ( arg0 % 2 == 1 ) { return arg0 % 2 ; } else { return arg0 % 2 ; } }",
        "public static int get_odd_collatz ( int arg0 ) { if ( arg0 % 2 == 0 ) { return arg0 ; } else if ( arg0 % 2 == 1 ) { return arg0 % 2 ; } else { return arg0 % 2 ; } }",
        "public static int get_odd_collatz ( int arg0 ) { if ( arg0 % 2 == 0 ) return arg0 ; if ( arg0 % 2 == 1 ) return arg0 % 2 ; if ( arg0 % 2 == 1 ) return arg0 % 2 ; return arg0 % 2 ; }",
        "public static int get_odd_collatz ( int arg0 ) { if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; return arg0 % 2 ; }",
        "public static int get_odd_collatz ( int arg0 ) { if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; return arg0 ; }",
        "public static int get_odd_collatz ( int arg0 ) { if ( arg0 % 2 == 1 ) { return arg0 % 2 ; } else if ( arg0 % 2 == 1 ) { return arg0 % 2 ; } else { return arg0 % 2 ; } }",
        "public static int get_odd_collatz ( int arg0 ) { if ( arg0 % 2!= 0 ) { return arg0 % 2 ; } else if ( arg0 % 2!= 0 ) { return arg0 % 2 ; } else { return arg0 % 2 ; } }",
        "public static int get_odd_collatz ( int arg0 ) { if ( arg0 % 2 == 0 ) return arg0 ; if ( arg0 % 2 == 1 ) return arg0 % 2 ; if ( arg0 % 2 == 1 ) return arg0 % 2 ; return arg0 % 2 ; }",
        "public static int get_odd_collatz ( int arg0 ) { if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; if ( arg0 % 2!= 0 ) return arg0 % 2 ; return arg0 ; }",
        "public static int get_odd_collatz ( int arg0 ) { if ( arg0 % 2!= 0 ) { return arg0 % 2 ; } else if ( arg0 < 0 ) { return arg0 ; } else { return arg0 % 2 ; } }",
        "public static List < Integer > get_odd_collatz ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) { loc0. add ( loc2 & 1 ) ; } } return loc0 ; }",
        "public static List < Integer > get_odd_collatz ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) { loc0. add ( loc2 & 1 ) ; } } return loc0 ; }",
        "public static List < Integer > get_odd_collatz ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; int loc3 = arg0. get ( loc1 + 1 ) ; loc0. add ( loc2, loc3 ) ; } return loc0 ; }",
        "public static List < Integer > get_odd_collatz ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; int loc3 = arg0. get ( loc1 + 1 ) ; loc0. add ( loc2, loc3 ) ; } return loc0 ; }",
        "public static List < Integer > get_odd_collatz ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) loc0. add ( loc2 & 1 ) ; } return loc0 ; }",
        "public static List < Integer > get_odd_collatz ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) { loc0. add ( loc2 & 1 ) ; } } return loc0 ; }",
        "public static List < Integer > get_odd_collatz ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) loc0. add ( loc2 & 1 ) ; } return loc0 ; }",
        "public static List < Integer > get_odd_collatz ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) { loc0. add ( loc2 & 1 ) ; } } return loc0 ; }",
        "public static List < Integer > get_odd_collatz ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; int loc3 = arg0. get ( loc1 + 1 ) ; loc0. add ( loc2, loc3 ) ; } return loc0 ; }",
        "public static List < Integer > get_odd_collatz ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( ( loc2 & 1 )!= 0 ) loc0. add ( loc2 & 1 ) ; } return loc0 ; }",
        "public static int get_odd_collatz ( N arg0 ) { if ( arg0. odd ( ) ) { return 1 ; } else if ( arg0. even ( ) ) { return 2 ; } else if ( arg0. odd ( ) ) { return 3 ; } return 0 ; }",
        "public static int get_odd_collatz ( N arg0 ) { if ( arg0. odd ( ) ) { return 1 ; } else if ( arg0. even ( ) ) { return 2 ; } else if ( arg0. even ( ) ) { return 3 ; } return 0 ; }",
        "public static int get_odd_collatz ( N arg0 ) { int loc0 = arg0. loc0 ( ) ; if ( ( loc0 & 1 )!= 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return loc0 ; }",
        "public static int get_odd_collatz ( N arg0 ) { if ( arg0. odd ( ) ) { return 1 ; } else if ( arg0. even ( ) ) { return 2 ; } else { return 0 ; } }",
        "public static int get_odd_collatz ( Integer arg0 ) { long loc0 = arg0. loc0 ( ) ; if ( ( loc0 & 1 )!= 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return ( int ) ( loc0 >> 1 ) ; }"
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false; \n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
      "target": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i] && (day < 1 || day > 31)) return false; \n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
      "function range": "25,5-50,5",
      "raw_output": [
        "boolean function ( Date arg0 ) { if ( arg0!= null ) { Calendar loc0 = Calendar. getInstance ( ) ; loc0. setTime ( arg0 ) ; return true ; } return false ; }",
        "boolean function ( Date arg0 ) { if ( arg0 == null ) { return false ; } return ( new SimpleDateFormat ( \"srini_string\" ) ). parse ( arg0. getTime ( ) ) ; }",
        "boolean function ( Date arg0 ) { if ( arg0!= null ) { Calendar loc0 = Calendar. getInstance ( ) ; return ( loc0. get ( Calendar. DATE ) == arg0 ) ; } return false ; }",
        "boolean function ( Date arg0 ) { return ( new SimpleDateFormat ( \"srini_string\" ) ). parse ( arg0 ) ; }",
        "boolean function ( Date arg0 ) { if ( arg0 == null ) return false ; return true ; }",
        "boolean function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return ( loc1!= null ) ; } catch ( ParseException loc0 ) { return false ; } }",
        "boolean function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return ( loc1!= null ) ; } catch ( ParseException loc0 ) { } return false ; }",
        "boolean function ( String arg0 ) { Date loc0 = null ; SimpleDateFormat loc1 = new SimpleDateFormat ( \"srini_string\" ) ; try { loc0 = loc1. parse ( arg0 ) ; } catch ( ParseException loc2 ) { return false ; } return true ; }",
        "boolean function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return loc1!= null ; } catch ( ParseException loc0 ) { return false ; } }",
        "boolean function ( String arg0 ) { Date loc0 = null ; SimpleDateFormat loc1 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc2 = loc1. parse ( arg0 ) ; return ( loc2!= null ) ; }",
        "boolean function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return ( loc1!= null ) ; } catch ( ParseException loc0 ) { return false ; } }",
        "boolean function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return ( loc1!= null ) ; } catch ( ParseException loc0 ) { } return false ; }",
        "boolean function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return loc1!= null ; } catch ( ParseException loc0 ) { return false ; } }",
        "Date function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return loc1 ; } catch ( ParseException loc0 ) { return null ; } }",
        "boolean function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Calendar loc1 = Calendar. getInstance ( ) ; return loc0. parse ( arg0 ) ; } catch ( ParseException loc0 ) { return false ; } }",
        "boolean function ( Date arg0 ) { return valid_date ( arg0 ) ; }",
        "boolean function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; return loc0. parse ( arg0 ) ; } catch ( ParseException loc0 ) { return false ; } }",
        "boolean function ( Date arg0 ) { try { Calendar loc0 = Calendar. getInstance ( ) ; return valid_date ( loc0. getTime ( ) ) ; } catch ( CalendarException loc0 ) { return false ; } }",
        "boolean function ( Date arg0 ) { Calendar loc0 = Calendar. getInstance ( ) ; loc0. setTime ( arg0 ) ; return valid_date ( loc0 ) ; }",
        "boolean function ( Date arg0 ) { try { Calendar loc0 = Calendar. getInstance ( ) ; return valid_date ( loc0. getTime ( ) ) ; } catch ( Exception loc0 ) { return false ; } }",
        "boolean function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return ( loc1!= null ) ; } catch ( ParseException loc0 ) { return false ; } }",
        "boolean function ( String arg0 ) { Date loc0 = null ; SimpleDateFormat loc1 = new SimpleDateFormat ( \"srini_string\" ) ; try { loc0 = loc1. parse ( arg0 ) ; } catch ( ParseException loc2 ) { return false ; } return ( loc0!= null ) ; }",
        "boolean function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return loc1!= null ; } catch ( ParseException loc0 ) { return false ; } }",
        "boolean function ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return true ; } catch ( ParseException loc0 ) { return false ; } }",
        "boolean function ( String arg0 ) { Date loc0 = null ; SimpleDateFormat loc1 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc2 = loc1. parse ( arg0 ) ; return ( loc2!= null ) ; }"
      ],
      "mid_translation": [
        "valid_date Method.",
        "valid_date This method checks if the given string is a valid date.",
        "valid_date This method checks if a string is a valid date.",
        "valid_date This method checks if the given date is a valid date.",
        "valid_date This method returns true if the given string is a valid date."
      ],
      "output": [
        "public static boolean valid_date ( Date arg0 ) { if ( arg0!= null ) { Calendar loc0 = Calendar. getInstance ( ) ; loc0. setTime ( arg0 ) ; return true ; } return false ; }",
        "public static boolean valid_date ( Date arg0 ) { if ( arg0 == null ) { return false ; } return ( new SimpleDateFormat ( \"srini_string\" ) ). parse ( arg0. getTime ( ) ) ; }",
        "public static boolean valid_date ( Date arg0 ) { if ( arg0!= null ) { Calendar loc0 = Calendar. getInstance ( ) ; return ( loc0. get ( Calendar. DATE ) == arg0 ) ; } return false ; }",
        "public static boolean valid_date ( Date arg0 ) { return ( new SimpleDateFormat ( \"srini_string\" ) ). parse ( arg0 ) ; }",
        "public static boolean valid_date ( Date arg0 ) { if ( arg0 == null ) return false ; return true ; }",
        "public static boolean valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return ( loc1!= null ) ; } catch ( ParseException loc0 ) { return false ; } }",
        "public static boolean valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return ( loc1!= null ) ; } catch ( ParseException loc0 ) { } return false ; }",
        "public static boolean valid_date ( String arg0 ) { Date loc0 = null ; SimpleDateFormat loc1 = new SimpleDateFormat ( \"srini_string\" ) ; try { loc0 = loc1. parse ( arg0 ) ; } catch ( ParseException loc2 ) { return false ; } return true ; }",
        "public static boolean valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return loc1!= null ; } catch ( ParseException loc0 ) { return false ; } }",
        "public static boolean valid_date ( String arg0 ) { Date loc0 = null ; SimpleDateFormat loc1 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc2 = loc1. parse ( arg0 ) ; return ( loc2!= null ) ; }",
        "public static boolean valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return ( loc1!= null ) ; } catch ( ParseException loc0 ) { return false ; } }",
        "public static boolean valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return ( loc1!= null ) ; } catch ( ParseException loc0 ) { } return false ; }",
        "public static boolean valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return loc1!= null ; } catch ( ParseException loc0 ) { return false ; } }",
        "public static Date valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return loc1 ; } catch ( ParseException loc0 ) { return null ; } }",
        "public static boolean valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Calendar loc1 = Calendar. getInstance ( ) ; return loc0. parse ( arg0 ) ; } catch ( ParseException loc0 ) { return false ; } }",
        "public static boolean valid_date ( Date arg0 ) { return valid_date ( arg0 ) ; }",
        "public static boolean valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; return loc0. parse ( arg0 ) ; } catch ( ParseException loc0 ) { return false ; } }",
        "public static boolean valid_date ( Date arg0 ) { try { Calendar loc0 = Calendar. getInstance ( ) ; return valid_date ( loc0. getTime ( ) ) ; } catch ( CalendarException loc0 ) { return false ; } }",
        "public static boolean valid_date ( Date arg0 ) { Calendar loc0 = Calendar. getInstance ( ) ; loc0. setTime ( arg0 ) ; return valid_date ( loc0 ) ; }",
        "public static boolean valid_date ( Date arg0 ) { try { Calendar loc0 = Calendar. getInstance ( ) ; return valid_date ( loc0. getTime ( ) ) ; } catch ( Exception loc0 ) { return false ; } }",
        "public static boolean valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return ( loc1!= null ) ; } catch ( ParseException loc0 ) { return false ; } }",
        "public static boolean valid_date ( String arg0 ) { Date loc0 = null ; SimpleDateFormat loc1 = new SimpleDateFormat ( \"srini_string\" ) ; try { loc0 = loc1. parse ( arg0 ) ; } catch ( ParseException loc2 ) { return false ; } return ( loc0!= null ) ; }",
        "public static boolean valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return loc1!= null ; } catch ( ParseException loc0 ) { return false ; } }",
        "public static boolean valid_date ( String arg0 ) { try { SimpleDateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0. parse ( arg0 ) ; return true ; } catch ( ParseException loc0 ) { return false ; } }",
        "public static boolean valid_date ( String arg0 ) { Date loc0 = null ; SimpleDateFormat loc1 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc2 = loc1. parse ( arg0 ) ; return ( loc2!= null ) ; }"
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++; \n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
      "target": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 1) count++; \n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
      "function range": "14,5-28,5",
      "raw_output": [
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = arg0. split ( arg1 ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ] ) ; } return loc0 ; }",
        "List < String > function ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = arg0. split ( arg1 ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) loc0. add ( loc1 [ loc2 ] ) ; return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) loc0. add ( loc2. trim ( ) ) ; return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "String [ ] function ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = new String [ arg0. split ( \"srini_string\" ). length ] ; for ( int loc1 = 0 ; loc1 < arg0. split ( \"srini_string\" ). length ; loc1 ++ ) loc0 [ loc1 ] = arg0. split ( \"srini_string\" ) [ 0 ] ; return loc0 ; }",
        "String [ ] function ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = new String [ arg0. split ( \"srini_string\" ). length ] ; for ( int loc1 = 0 ; loc1 < arg0. split ( \"srini_string\" ). length ; loc1 ++ ) loc0 [ loc1 ] = arg0. split ( \"srini_string\" ) [ 1 ] ; return loc0 ; }",
        "String [ ] function ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = new String [ arg0. split ( \"srini_string\" ). length ] ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0. split ( \"srini_string\" ) [ 0 ] ; return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "String [ ] function ( String arg0 ) { if ( arg0 == null ) { return null ; } String [ ] loc0 = new String [ arg0. split ( \"srini_string\" ). length ] ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0. split ( \"srini_string\" ) [ 0 ] ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) loc0. add ( loc2. trim ( ) ) ; return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) loc0. add ( loc2. trim ( ) ) ; return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) loc0. add ( loc2. trim ( ) ) ; return loc0 ; }"
      ],
      "mid_translation": [
        "Split words.",
        "split words.",
        "Split words of a string into an array of strings.",
        "Split words in a string.",
        "Split words from a string."
      ],
      "output": [
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = arg0. split ( arg1 ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ] ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0, int arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = arg0. split ( arg1 ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) loc0. add ( loc1 [ loc2 ] ) ; return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) loc0. add ( loc2. trim ( ) ) ; return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). trim ( ) ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "public static String [ ] split_words ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = new String [ arg0. split ( \"srini_string\" ). length ] ; for ( int loc1 = 0 ; loc1 < arg0. split ( \"srini_string\" ). length ; loc1 ++ ) loc0 [ loc1 ] = arg0. split ( \"srini_string\" ) [ 0 ] ; return loc0 ; }",
        "public static String [ ] split_words ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = new String [ arg0. split ( \"srini_string\" ). length ] ; for ( int loc1 = 0 ; loc1 < arg0. split ( \"srini_string\" ). length ; loc1 ++ ) loc0 [ loc1 ] = arg0. split ( \"srini_string\" ) [ 1 ] ; return loc0 ; }",
        "public static String [ ] split_words ( String arg0 ) { if ( arg0 == null ) return null ; String [ ] loc0 = new String [ arg0. split ( \"srini_string\" ). length ] ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0. split ( \"srini_string\" ) [ 0 ] ; return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static String [ ] split_words ( String arg0 ) { if ( arg0 == null ) { return null ; } String [ ] loc0 = new String [ arg0. split ( \"srini_string\" ). length ] ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0. split ( \"srini_string\" ) [ 0 ] ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). trim ( ) ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) loc0. add ( loc2. trim ( ) ) ; return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) loc0. add ( loc2. trim ( ) ) ; return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ) ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) { loc0. add ( loc1. nextToken ( ). trim ( ) ) ; } return loc0 ; }",
        "public static List < String > split_words ( String arg0 ) { if ( arg0 == null ) return null ; List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) loc0. add ( loc2. trim ( ) ) ; return loc0 ; }"
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false; \n    }\n    return true;\n}",
      "target": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false; \n    }\n    return true;\n}",
      "function range": "22,5-37,5",
      "raw_output": [
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) { return false ; } } return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; } return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length - 1 ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) > 0 ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length - 1 ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; } return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) { return false ; } } return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length - 1 ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; } return true ; }",
        "boolean function ( List arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. size ( ) ; loc0 ++ ) if ( arg0. get ( loc0 ) < arg0. get ( loc0 - 1 ) ) return false ; return true ; }",
        "boolean function ( List arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. size ( ) ; loc0 ++ ) if ( arg0. get ( loc0 ) > arg0. get ( loc0 - 1 ) ) return false ; return true ; }",
        "boolean function ( List arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) < arg0. get ( loc0 - 1 ) ) { return false ; } } return true ; }",
        "boolean function ( List arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) < arg0. get ( loc0 - 1 ) ) { return true ; } } return false ; }",
        "boolean function ( List arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > arg0. get ( loc0 - 1 ) ) { return false ; } } return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; if ( arg0 [ loc0 ] > arg0 [ loc0 - 1 ] ) return false ; } return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) { return false ; } } return true ; }",
        "boolean function ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; if ( arg0 [ loc0 ] > arg0 [ loc0 + 1 ] ) return false ; } return true ; }"
      ],
      "mid_translation": [
        "Check if the array is sorted.",
        "Is the array sorted.",
        "Checks if the array is sorted.",
        "Check if the list is sorted.",
        "Checks to see if the array is sorted."
      ],
      "output": [
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) { return false ; } } return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; } return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length - 1 ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) > 0 ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length - 1 ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; } return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) { return false ; } } return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length - 1 ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; } return true ; }",
        "public static boolean is_sorted ( List arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. size ( ) ; loc0 ++ ) if ( arg0. get ( loc0 ) < arg0. get ( loc0 - 1 ) ) return false ; return true ; }",
        "public static boolean is_sorted ( List arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. size ( ) ; loc0 ++ ) if ( arg0. get ( loc0 ) > arg0. get ( loc0 - 1 ) ) return false ; return true ; }",
        "public static boolean is_sorted ( List arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) < arg0. get ( loc0 - 1 ) ) { return false ; } } return true ; }",
        "public static boolean is_sorted ( List arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) < arg0. get ( loc0 - 1 ) ) { return true ; } } return false ; }",
        "public static boolean is_sorted ( List arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. size ( ) ; loc0 ++ ) { if ( arg0. get ( loc0 ) > arg0. get ( loc0 - 1 ) ) { return false ; } } return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; if ( arg0 [ loc0 ] > arg0 [ loc0 - 1 ] ) return false ; } return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 - 1 ] ) < 0 ) return false ; return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) { return false ; } } return true ; }",
        "public static boolean is_sorted ( Comparable [ ] arg0 ) { for ( int loc0 = 1 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg0 [ loc0 - 1 ] ) return false ; if ( arg0 [ loc0 ] > arg0 [ loc0 + 1 ] ) return false ; } return true ; }"
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]); \n    int r = Math.max(interval1[1], interval2[1]); \n    int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
      "target": "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.max(interval1[0], interval2[0]); \n    int r = Math.min(interval1[1], interval2[1]); \n    int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
      "function range": "33,5-39,5",
      "raw_output": [
        "int function ( int arg0, int arg1 ) { return arg0 & arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 & arg1 ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } if ( arg1 == arg0 ) { return arg1 ; } return arg0 & arg1 ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } if ( arg0 == arg1 ) { return arg1 ; } return arg0 & arg1 ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return arg0 & arg1 ; } else { return arg0 & arg1 ; } }",
        "int function ( int arg0, int arg1 ) { return arg0 & arg1 ; }",
        "int function ( final int arg0, final int arg1 ) { return arg0 & arg1 ; }",
        "IntIntersection function ( IntIntersection arg0, IntIntersection arg1 ) { IntIntersection loc0 = new IntIntersection ( arg0. intValue ( ), arg1. intValue ( ) ) ; return new IntIntersection ( loc0 ) ; }",
        "int function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } if ( arg1 == arg0 ) { return arg1 ; } return arg0 & arg1 ; }",
        "int function ( int arg0, int arg1 ) { return intersection ( arg0, arg1 ) ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ). intersection ( arg1. get ( loc1 ) ) ) ; } return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ). intersection ( arg0. get ( loc1 ) ) ) ; } return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. length ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "Vectors function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. set ( loc1, arg0. get ( loc1 ). intersection ( arg1. get ( loc1 ) ) ) ; } return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. set ( loc1, arg1. get ( loc1 ). intersection ( arg0. get ( loc1 ) ) ) ; } return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ). intersection ( arg1. get ( loc1 ) ) ) ; } return loc0 ; }",
        "Vector function ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. length ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "int function ( int [ ] arg0, int [ ] arg1 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == null || arg1 == null ) { throw new NullPointerException ( ) ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg1 [ loc1 ] == arg0 [ loc1 ] ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == null || arg1 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } for ( int loc0 : arg0 ) { if ( arg1. length < loc0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } } return intersection ( arg1, arg1 ) ; }",
        "int function ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == null || arg1 == null ) { throw new NullPointerException ( ) ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 [ loc1 ] ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == null || arg1 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } for ( int loc0 : arg0 ) { if ( arg1. length < loc0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } } return intersection ( arg1, arg1. length ) ; }"
      ],
      "mid_translation": [
        "Returns the intersection of two integers.",
        "Get the intersection of two integers.",
        "Get the intersection of two vectors.",
        "Returns the intersection of two vectors.",
        "Returns the intersection of two integer arrays."
      ],
      "output": [
        "public static int intersection ( int arg0, int arg1 ) { return arg0 & arg1 ; }",
        "public static int intersection ( final int arg0, final int arg1 ) { return arg0 & arg1 ; }",
        "public static int intersection ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } if ( arg1 == arg0 ) { return arg1 ; } return arg0 & arg1 ; }",
        "public static int intersection ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } if ( arg0 == arg1 ) { return arg1 ; } return arg0 & arg1 ; }",
        "public static int intersection ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return arg0 & arg1 ; } else { return arg0 & arg1 ; } }",
        "public static int intersection ( int arg0, int arg1 ) { return arg0 & arg1 ; }",
        "public static int intersection ( final int arg0, final int arg1 ) { return arg0 & arg1 ; }",
        "public static IntIntersection intersection ( IntIntersection arg0, IntIntersection arg1 ) { IntIntersection loc0 = new IntIntersection ( arg0. intValue ( ), arg1. intValue ( ) ) ; return new IntIntersection ( loc0 ) ; }",
        "public static int intersection ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return arg0 ; } if ( arg1 == arg0 ) { return arg1 ; } return arg0 & arg1 ; }",
        "public static int intersection ( int arg0, int arg1 ) { return intersection ( arg0, arg1 ) ; }",
        "public static Vector intersection ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static Vector intersection ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ). intersection ( arg1. get ( loc1 ) ) ) ; } return loc0 ; }",
        "public static Vector intersection ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ). intersection ( arg0. get ( loc1 ) ) ) ; } return loc0 ; }",
        "public static Vector intersection ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. length ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static Vectors intersection ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static Vector intersection ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static Vector intersection ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. set ( loc1, arg0. get ( loc1 ). intersection ( arg1. get ( loc1 ) ) ) ; } return loc0 ; }",
        "public static Vector intersection ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. set ( loc1, arg1. get ( loc1 ). intersection ( arg0. get ( loc1 ) ) ) ; } return loc0 ; }",
        "public static Vector intersection ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ). intersection ( arg1. get ( loc1 ) ) ) ; } return loc0 ; }",
        "public static Vector intersection ( Vector arg0, Vector arg1 ) { Vector loc0 = new Vector ( arg0. length ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static int intersection ( int [ ] arg0, int [ ] arg1 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { if ( loc1 >= loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int intersection ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == null || arg1 == null ) { throw new NullPointerException ( ) ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg1 [ loc1 ] == arg0 [ loc1 ] ) { loc0 ++ ; } } return loc0 ; }",
        "public static int intersection ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == null || arg1 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } for ( int loc0 : arg0 ) { if ( arg1. length < loc0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } } return intersection ( arg1, arg1 ) ; }",
        "public static int intersection ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == null || arg1 == null ) { throw new NullPointerException ( ) ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 [ loc1 ] ) { loc0 ++ ; } } return loc0 ; }",
        "public static int intersection ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == null || arg1 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } for ( int loc0 : arg0 ) { if ( arg1. length < loc0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } } return intersection ( arg1, arg1. length ) ; }"
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1; \n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
      "target": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] < 0) prod *= -1; \n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
      "function range": "16,5-28,5",
      "raw_output": [
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= 1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= 1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = - loc0 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 = 1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } else { loc0 *= 1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = - loc0 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 = 1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 = 2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= 2 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= 2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 = 1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = 1 ; } } return loc0 ; }",
        "long function ( final int [ ] arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "double function ( final int [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > 0 ) { loc0 *= arg0 [ loc1 ] ; } } return loc0 ; }",
        "long function ( final int [ ] arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > 0 ) { loc0 *= arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= 1 ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= arg0 [ loc1 ] ; } else { loc0 *= arg0 [ loc1 ] ; } } return loc0 ; }",
        "float function ( float [ ] arg0 ) { float loc0 = 0f ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 = 1 ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= arg0 [ loc1 ] ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= arg0 [ loc1 ] ; } } return loc0 ; }",
        "double function ( double arg0 [ ] ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= arg0 [ loc1 ] ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= arg0 [ loc1 ] ; } } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= 1 ; } } return loc0 ; }",
        "float function ( float [ ] arg0 ) { float loc0 = 0f ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Compute the product of the sign of an array of integers.",
        "Compute the product of the sign of the array.",
        "Compute the product of all sign values in an array of integers.",
        "Compute the product of the significance of the array.",
        "Compute the product of the significance of an array."
      ],
      "output": [
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= 1 ; } } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= 1 ; } } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = - loc0 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 = 1 ; } } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } else { loc0 *= 1 ; } } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = - loc0 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 = 1 ; } } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 = 2 ; } } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= 2 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= 2 ; } } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 = 1 ; } } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = 1 ; } } return loc0 ; }",
        "public static long prod_signs ( final int [ ] arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double prod_signs ( final int [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > 0 ) { loc0 *= arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static long prod_signs ( final int [ ] arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > 0 ) { loc0 *= arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } } return loc0 ; }",
        "public static double prod_signs ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double prod_signs ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= 1 ; } } return loc0 ; }",
        "public static double prod_signs ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= arg0 [ loc1 ] ; } else { loc0 *= arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static float prod_signs ( float [ ] arg0 ) { float loc0 = 0f ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int prod_signs ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 = 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 = 1 ; } } return loc0 ; }",
        "public static double prod_signs ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= arg0 [ loc1 ] ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static double prod_signs ( double arg0 [ ] ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= arg0 [ loc1 ] ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static double prod_signs ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double prod_signs ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 *= - 1 ; } else if ( arg0 [ loc1 ] > 0 ) { loc0 *= 1 ; } } return loc0 ; }",
        "public static float prod_signs ( float [ ] arg0 ) { float loc0 = 0f ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 *= arg0 [ loc1 ] ; } return loc0 ; }"
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]); \n                if(j != 0) val = Math.min(val, grid[i - 1][j]); \n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]); \n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]); \n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
      "target": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.min(val, grid[i - 1][j]); \n                if(j != 0) val = Math.min(val, grid[i][j - 1]); \n                if(i != n - 1) val = Math.min(val, grid[i + 1][j]); \n                if(j != n - 1) val = Math.min(val, grid[i][j + 1]); \n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
      "function range": "35,5-54,5",
      "raw_output": [
        "Path function ( Path arg0 ) { return new Path ( arg0, \"srini_string\" ) ; }",
        "Path function ( Container arg0 ) { return new Path ( arg0. getRoot ( ), \"srini_string\" ) ; }",
        "Path function ( Container arg0 ) { return new Path ( arg0, \"srini_string\" ) ; }",
        "Path function ( Path arg0, double arg1 ) { return new Path ( arg0, arg1 ) ; }",
        "List < Path > function ( Container arg0 ) { return arg0. getComponent ( Path. class ). getMinimumPath ( ) ; }",
        "List < String > function ( List < Image > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( loc1. getMin ( ) ) ; } return loc0 ; }",
        "List < Path > function ( List < Image > arg0 ) { List < Path > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( new Path ( loc1. getName ( ), \"srini_string\" ) ) ; } return loc0 ; }",
        "List < Path > function ( List < Image > arg0 ) { List < Path > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( new Path ( loc1. getPath ( ) ) ) ; } return loc0 ; }",
        "List < Path > function ( List < Image > arg0 ) { List < Path > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( new Path ( loc1. getPath ( ), \"srini_string\" ) ) ; } return loc0 ; }",
        "List < String > function ( List < Image > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( loc1. getPath ( ). min ( ) ) ; } return loc0 ; }",
        "int [ ] [ ] function ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0. length ] [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "int [ ] [ ] function ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0. length / 2 ] [ arg0. length / 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] [ loc2 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ]. length ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] [ loc2 ] ; if ( loc3 < loc1 ) { loc1 = loc3 ; } } return loc1 ; }",
        "int [ ] [ ] function ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0 [ 0 ]. length ] [ arg0. length ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] [ loc2 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "int [ ] [ ] function ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0 [ 0 ]. length ] [ arg0. length ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "int [ ] [ ] function ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0. length / 2 ] [ arg0. length / 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] [ loc2 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "int [ ] function ( int [ ] [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length / 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ] ) { loc0 [ loc1 ] = loc2 ; } } return loc0 ; }",
        "int [ ] [ ] function ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0. length / 2 ] [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "int [ ] [ ] function ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0 [ 0 ]. length ] [ arg0. length ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] [ loc2 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "int [ ] [ ] function ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0. length / 2 ] [ arg0. length / 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "List < Path > function ( List < Image > arg0 ) { List < Path > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( new Path ( loc1. getPath ( ) ) ) ; } return loc0 ; }",
        "List < Path > function ( List < Image > arg0 ) { List < Path > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( new Path ( loc1. getPath ( ), \"srini_string\" ) ) ; } return loc0 ; }",
        "Path function ( Image... arg0 ) { Path loc0 = new Path ( arg0 [ 0 ] ) ; for ( Image loc1 : arg0 ) { loc0. add ( loc1. getMinimumPath ( ) ) ; } return loc0 ; }",
        "List < String > function ( List < Image > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( loc1. getPath ( ). min ( ) ) ; } return loc0 ; }",
        "Path function ( Image... arg0 ) { Path loc0 = new Path ( arg0 [ 0 ] ) ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Get the minimum path.",
        "Get the minimum path for a set of images.",
        "Get the minimum path of a 2D array of integers.",
        "Get the minimum path from a 2D array of integers.",
        "Get the minimum path of a set of images."
      ],
      "output": [
        "public static Path min_path ( Path arg0 ) { return new Path ( arg0, \"srini_string\" ) ; }",
        "public static Path min_path ( Container arg0 ) { return new Path ( arg0. getRoot ( ), \"srini_string\" ) ; }",
        "public static Path min_path ( Container arg0 ) { return new Path ( arg0, \"srini_string\" ) ; }",
        "public static Path min_path ( Path arg0, double arg1 ) { return new Path ( arg0, arg1 ) ; }",
        "public static List < Path > min_path ( Container arg0 ) { return arg0. getComponent ( Path. class ). getMinimumPath ( ) ; }",
        "public static List < String > min_path ( List < Image > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( loc1. getMin ( ) ) ; } return loc0 ; }",
        "public static List < Path > min_path ( List < Image > arg0 ) { List < Path > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( new Path ( loc1. getName ( ), \"srini_string\" ) ) ; } return loc0 ; }",
        "public static List < Path > min_path ( List < Image > arg0 ) { List < Path > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( new Path ( loc1. getPath ( ) ) ) ; } return loc0 ; }",
        "public static List < Path > min_path ( List < Image > arg0 ) { List < Path > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( new Path ( loc1. getPath ( ), \"srini_string\" ) ) ; } return loc0 ; }",
        "public static List < String > min_path ( List < Image > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( loc1. getPath ( ). min ( ) ) ; } return loc0 ; }",
        "public static int [ ] [ ] min_path ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0. length ] [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "public static int [ ] [ ] min_path ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0. length / 2 ] [ arg0. length / 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] [ loc2 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "public static int min_path ( int [ ] [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = arg0 [ 0 ]. length ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] [ loc2 ] ; if ( loc3 < loc1 ) { loc1 = loc3 ; } } return loc1 ; }",
        "public static int [ ] [ ] min_path ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0 [ 0 ]. length ] [ arg0. length ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] [ loc2 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "public static int [ ] [ ] min_path ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0 [ 0 ]. length ] [ arg0. length ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "public static int [ ] [ ] min_path ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0. length / 2 ] [ arg0. length / 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] [ loc2 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "public static int [ ] min_path ( int [ ] [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length / 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ] ) { loc0 [ loc1 ] = loc2 ; } } return loc0 ; }",
        "public static int [ ] [ ] min_path ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0. length / 2 ] [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "public static int [ ] [ ] min_path ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0 [ 0 ]. length ] [ arg0. length ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] [ loc2 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "public static int [ ] [ ] min_path ( int [ ] [ ] arg0 ) { int [ ] [ ] loc0 = new int [ arg0. length / 2 ] [ arg0. length / 2 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] [ loc0. length - 1 ] ; if ( loc2 < loc0 [ loc1 ]. length ) { loc0 [ loc1 ] = loc0 [ loc1 ] ; } } return loc0 ; }",
        "public static List < Path > min_path ( List < Image > arg0 ) { List < Path > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( new Path ( loc1. getPath ( ) ) ) ; } return loc0 ; }",
        "public static List < Path > min_path ( List < Image > arg0 ) { List < Path > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( new Path ( loc1. getPath ( ), \"srini_string\" ) ) ; } return loc0 ; }",
        "public static Path min_path ( Image... arg0 ) { Path loc0 = new Path ( arg0 [ 0 ] ) ; for ( Image loc1 : arg0 ) { loc0. add ( loc1. getMinimumPath ( ) ) ; } return loc0 ; }",
        "public static List < String > min_path ( List < Image > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( Image loc1 : arg0 ) { loc0. add ( loc1. getPath ( ). min ( ) ) ; } return loc0 ; }",
        "public static Path min_path ( Image... arg0 ) { Path loc0 = new Path ( arg0 [ 0 ] ) ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }"
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = -3; \n    for(int i = 2; i < n - 1; i--) { \n        if(i % 2 == 0) sequence[i] = i / 2 - 1; \n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2; \n    }\n    return sequence;\n}",
      "target": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 3; \n    for(int i = 2; i < n + 1; i++) { \n        if(i % 2 == 0) sequence[i] = i / 2 + 1; \n        else sequence[i] = sequence[i - 1] + sequence[i - 2] + (i + 3) / 2; \n    }\n    return sequence;\n}",
      "function range": "23,5-37,5",
      "raw_output": [
        "List < List < Integer >> function ( int arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, 0 ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( int arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, loc1 ) ; } return loc0 ; }",
        "List < List < Integer >> function ( int arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( new ArrayList < > ( arg0 ) ) ; } return loc0 ; }",
        "List < List < Integer >> function ( int arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, loc1 ) ; } return loc0 ; }",
        "List < List < Integer >> function ( int arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, arg0 % loc1 ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( int arg0, int arg1 ) { int loc0 = arg0 * arg1 ; ArrayList < Integer > loc1 = new ArrayList < Integer > ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1. add ( loc2, 0 ) ; } return loc1 ; }",
        "ArrayList < Integer > function ( int arg0, int arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, arg1 ) ; } return loc0 ; }",
        "TriangularSequence function ( int arg0 ) { int loc0 = 3 * arg0 ; TriangularSequence loc1 = new TriangularSequence ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = new TriangularSequence ( arg0, loc2 ) ; } return loc1 ; }",
        "TriangularSequence function ( int arg0, int arg1 ) { final TriangularSequence loc0 = new TriangularSequence ( arg0, arg1 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, arg0 - loc1 - 1 ) ; } return loc0 ; }",
        "TriangularSequence function ( int arg0 ) { int loc0 = 3 * arg0 ; TriangularSequence loc1 = new TriangularSequence ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = new TriangularSequence ( arg0 ) ; } return loc1 ; }",
        "IntSequence function ( int arg0 ) { IntSequence loc0 = new IntSequence ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "IntList function ( int arg0 ) { IntList loc0 = new IntList ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "IntSequence function ( int arg0 ) { IntSequence loc0 = new IntSequence ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "Iterable < Integer > function ( int arg0 ) { return new Iterable < Integer > ( ) { @ Override public Iterator < Integer > iterator ( ) { return arg0 - 1 ; } } ; }",
        "IntSequence function ( int arg0 ) { return new IntSequence ( arg0 ) ; }",
        "IntSequence function ( int arg0 ) { IntSequence loc0 = new IntSequence ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. addElement ( loc1 ) ; } return loc0 ; }",
        "IntSequence function ( int arg0 ) { IntSequence loc0 = new IntSequence ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "IntSequence function ( int arg0 ) { IntSequence loc0 = new IntSequence ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. addElement ( loc1 ) ; return loc0 ; }",
        "IntSequence function ( int arg0 ) { IntSequence loc0 = new IntSequence ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. addElement ( loc1 ) ; } return loc0 ; }",
        "IntSequence function ( int arg0 ) { IntSequence loc0 = new IntSequence ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "int [ ] function ( int arg0 ) { int [ ] loc0 = new int [ arg0 - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "int [ ] function ( int arg0 ) { int [ ] loc0 = new int [ arg0 - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0 [ loc1 - 1 ] = loc1 ; return loc0 ; }",
        "int [ ] function ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 - 1 ] = loc1 ; } return loc0 ; }",
        "int [ ] function ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "IntSequence function ( int arg0 ) { IntSequence loc0 = new IntSequence ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Returns a triangular sequence of size n.",
        "Returns a triangular sequence of size n",
        "Returns a sequence of n - 1 integers.",
        "This method returns a sequence of n - 1 integers.",
        "Get a sequence of n - 1 integers."
      ],
      "output": [
        "public static List < List < Integer >> tri ( int arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, 0 ) ; } return loc0 ; }",
        "public static ArrayList < Integer > tri ( int arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, loc1 ) ; } return loc0 ; }",
        "public static List < List < Integer >> tri ( int arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( new ArrayList < > ( arg0 ) ) ; } return loc0 ; }",
        "public static List < List < Integer >> tri ( int arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, loc1 ) ; } return loc0 ; }",
        "public static List < List < Integer >> tri ( int arg0 ) { List < List < Integer >> loc0 = new ArrayList < List < Integer >> ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, arg0 % loc1 ) ; } return loc0 ; }",
        "public static ArrayList < Integer > tri ( int arg0, int arg1 ) { int loc0 = arg0 * arg1 ; ArrayList < Integer > loc1 = new ArrayList < Integer > ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1. add ( loc2, 0 ) ; } return loc1 ; }",
        "public static ArrayList < Integer > tri ( int arg0, int arg1 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, arg1 ) ; } return loc0 ; }",
        "public static TriangularSequence tri ( int arg0 ) { int loc0 = 3 * arg0 ; TriangularSequence loc1 = new TriangularSequence ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = new TriangularSequence ( arg0, loc2 ) ; } return loc1 ; }",
        "public static TriangularSequence tri ( int arg0, int arg1 ) { final TriangularSequence loc0 = new TriangularSequence ( arg0, arg1 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1, arg0 - loc1 - 1 ) ; } return loc0 ; }",
        "public static TriangularSequence tri ( int arg0 ) { int loc0 = 3 * arg0 ; TriangularSequence loc1 = new TriangularSequence ( loc0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = new TriangularSequence ( arg0 ) ; } return loc1 ; }",
        "public static IntSequence tri ( int arg0 ) { IntSequence loc0 = new IntSequence ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static IntList tri ( int arg0 ) { IntList loc0 = new IntList ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static IntSequence tri ( int arg0 ) { IntSequence loc0 = new IntSequence ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. add ( loc1 ) ; return loc0 ; }",
        "public static Iterator < Integer > tri ( ) { return arg0 - 1 ; } } ; }",
        "public static IntSequence tri ( int arg0 ) { return new IntSequence ( arg0 ) ; }",
        "public static IntSequence tri ( int arg0 ) { IntSequence loc0 = new IntSequence ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. addElement ( loc1 ) ; } return loc0 ; }",
        "public static IntSequence tri ( int arg0 ) { IntSequence loc0 = new IntSequence ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static IntSequence tri ( int arg0 ) { IntSequence loc0 = new IntSequence ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0. addElement ( loc1 ) ; return loc0 ; }",
        "public static IntSequence tri ( int arg0 ) { IntSequence loc0 = new IntSequence ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. addElement ( loc1 ) ; } return loc0 ; }",
        "public static IntSequence tri ( int arg0 ) { IntSequence loc0 = new IntSequence ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static int [ ] tri ( int arg0 ) { int [ ] loc0 = new int [ arg0 - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "public static int [ ] tri ( int arg0 ) { int [ ] loc0 = new int [ arg0 - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) loc0 [ loc1 - 1 ] = loc1 ; return loc0 ; }",
        "public static int [ ] tri ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 - 1 ] = loc1 ; } return loc0 ; }",
        "public static int [ ] tri ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "public static IntSequence tri ( int arg0 ) { IntSequence loc0 = new IntSequence ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }"
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n >= 0) { \n        int digit = n * 10; \n        if(digit % 2 == 0) { \n            product /= digit; \n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
      "target": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n > 0) { \n        int digit = n % 10; \n        if(digit % 2 == 1) { \n            product *= digit; \n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
      "function range": "13,5-26,5",
      "raw_output": [
        "int function ( BigInteger arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "int function ( Integer arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "int function ( Integer arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0. digits ( ) ; }",
        "int function ( BigInteger arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. digits ( ). length ( ) ; loc1 ++ ) { loc0 += arg0. digits ( loc1 ). loc0 ( ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. digits ( ). length ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "int function ( BigInteger arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; ++ loc1 ) { loc0 ++ ; } return loc0 ; }",
        "int function ( BigInteger arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 += arg0. bitCount ( loc1 - 1 ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. digits ( ) ; loc1 ++ ) { loc0 |= ( arg0. digits ( loc1 ) << loc1 ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. digits ( ) ; loc1 ++ ) { loc0 |= ( arg0. digits ( loc1 ) << loc1 ) ; } return loc0 ; }",
        "int function ( BigInteger arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 |= ( arg0. getByte ( loc1 ) << loc1 ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. digits ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. digits ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "int function ( ) { return 9 ; }",
        "int function ( ) { return 10 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 10 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return 10 - arg0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( arg0 + 1 ) ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 0 ; while ( ( arg0 > 0 ) && ( arg0 < 9 ) ) { loc0 ++ ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 0 ; while ( ( arg0 > 0 ) && ( arg0!= 0 ) ) { loc0 ++ ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return 10 - arg0 ; }",
        "int function ( long arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( int ) ( arg0 / ( arg0 + 1 ) ) ; }"
      ],
      "mid_translation": [
        "Returns the number of digits of n.",
        "Returns the number of digits in n.",
        "Returns the digits of n.",
        "Returns the number of digits.",
        "Returns the number of digits of a number."
      ],
      "output": [
        "public static int digits ( BigInteger arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( Integer arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( Integer arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0. digits ( ) ; }",
        "public static int digits ( BigInteger arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. digits ( ). length ( ) ; loc1 ++ ) { loc0 += arg0. digits ( loc1 ). loc0 ( ) ; } return loc0 ; }",
        "public static int digits ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. digits ( ). length ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( BigInteger arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; ++ loc1 ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( BigInteger arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 += arg0. bitCount ( loc1 - 1 ) ; } return loc0 ; }",
        "public static int digits ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. digits ( ) ; loc1 ++ ) { loc0 |= ( arg0. digits ( loc1 ) << loc1 ) ; } return loc0 ; }",
        "public static int digits ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. digits ( ) ; loc1 ++ ) { loc0 |= ( arg0. digits ( loc1 ) << loc1 ) ; } return loc0 ; }",
        "public static int digits ( BigInteger arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. bitLength ( ) ; loc1 ++ ) { loc0 |= ( arg0. getByte ( loc1 ) << loc1 ) ; } return loc0 ; }",
        "public static int digits ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. digits ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. digits ( ) ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( ) { return 9 ; }",
        "public static int digits ( ) { return 10 ; }",
        "public static int digits ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( int arg0 ) { if ( arg0 < 10 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return 10 - arg0 ; }",
        "public static int digits ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( arg0 + 1 ) ; }",
        "public static int digits ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 0 ; while ( ( arg0 > 0 ) && ( arg0 < 9 ) ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } int loc0 = 0 ; while ( ( arg0 > 0 ) && ( arg0!= 0 ) ) { loc0 ++ ; } return loc0 ; }",
        "public static int digits ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return 10 - arg0 ; }",
        "public static int digits ( long arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( int ) ( arg0 / ( arg0 + 1 ) ) ; }"
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    Collections.reverse(opening_brackets); \n    int cnt = 0, i = 0, l = opening_brackets.size(); \n    for(int idx : closing_brackets) { \n        if(i < l || idx >= opening_brackets.get(i)) { \n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
      "target": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    Collections.reverse(closing_brackets); \n    int cnt = 0, i = 0, l = closing_brackets.size(); \n    for(int idx : opening_brackets) { \n        if(i < l && idx < closing_brackets.get(i)) { \n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
      "function range": "21,5-37,5",
      "raw_output": [
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ) { return true ; } return false ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String [ ] arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "boolean function ( String arg0, String arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg1. equals ( arg0. charAt ( loc1 ) ) ) { return true ; } } return false ; }",
        "boolean function ( String [ ] arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) return true ; } return false ; }",
        "boolean function ( String [ ] arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return true ; } for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "boolean function ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. endsWith ( \"srini_string\" ) || arg0. endsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }"
      ],
      "mid_translation": [
        "is_nested returns true if the brackets are nested.",
        "Returns true if the brackets are nested.",
        "Returns true if the given brackets are nested.",
        "is_nested returns true if brackets is nested.",
        "Checks if the given string is nested."
      ],
      "output": [
        "public static boolean is_nested ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ) { return true ; } return false ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String [ ] arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "public static boolean is_nested ( String arg0, String arg1 ) { int loc0 = arg0. length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg1. equals ( arg0. charAt ( loc1 ) ) ) { return true ; } } return false ; }",
        "public static boolean is_nested ( String [ ] arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) return true ; } return false ; }",
        "public static boolean is_nested ( String [ ] arg0 ) { if ( arg0 == null || arg0. length == 0 ) { return true ; } for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "public static boolean is_nested ( String arg0, String arg1 ) { return arg0. equals ( arg1 ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. equals ( \"srini_string\" ) || arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. contains ( \"srini_string\" ) || arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. contains ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. endsWith ( \"srini_string\" ) || arg0. endsWith ( \"srini_string\" ) ; }",
        "public static boolean is_nested ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }"
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0; \n    for(int j = 0; j < lst.length; j++) { \n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i])); \n    }\n    return result;\n}",
      "target": "public static long sum_squared_nums(double[] lst) {\n    int result = 0; \n    for(int i = 0; i < lst.length; i++) { \n        result += (Math.ceil(lst[i])) * (Math.ceil(lst[i])); \n    }\n    return result;\n}",
      "function range": "16,5-22,5",
      "raw_output": [
        "int function ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "double function ( List < Number > arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "double function ( Number... arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "double function ( List <? extends Number > arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "double function ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "int function ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "double function ( List <? extends Number > arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "double function ( List < Number > arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "double function ( Number... arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "double function ( List <? extends Number > arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "double function ( double arg0 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) ( arg0 * arg0 ) ; double loc2 = ( double ) ( arg0 * arg0 ) ; double loc3 = ( double ) ( arg0 * arg0 ) ; return ( loc0 * loc0 + loc1 * loc1 ) / loc2 ; }",
        "double function ( double arg0 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) arg0 / loc0 ; double loc2 = ( double ) arg0 / loc0 ; double loc3 = ( double ) arg0 / loc1 ; return loc2 * loc3 ; }",
        "double function ( double arg0 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) ( arg0 * arg0 ) ; double loc2 = ( double ) ( arg0 * arg0 ) ; double loc3 = ( double ) ( arg0 / loc1 ) ; return loc0 * loc2 + loc3 * loc3 ; }",
        "double function ( double arg0 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) ( arg0 * arg0 ) ; double loc2 = ( double ) ( arg0 * arg0 ) ; double loc3 = ( double ) ( arg0 * arg0 ) ; return ( loc0 * loc0 ) + loc1 * loc1 ; }",
        "double function ( double arg0 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) arg0 / loc0 ; double loc2 = ( double ) arg0 / loc0 ; return loc2 * loc1 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 * loc1 ; } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = 0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 * loc1 ; } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = 0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = 0.0 ; double loc1 = 0.0 ; for ( Double loc2 : arg0 ) { loc0 += loc2 * loc2 ; } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 * loc1 ; } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = 0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 * loc1 ; } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = 0.0 ; double loc1 = 0.0 ; for ( Double loc2 : arg0 ) { loc0 += loc2 * loc2 ; } return loc0 ; }",
        "double function ( List < double > arg0 ) { double loc0 = 0.0 ; for ( double loc1 : arg0 ) { loc0 += loc1 * loc1 ; } return loc0 ; }",
        "double function ( List < Double > arg0 ) { double loc0 = 0 ; for ( Double loc1 : arg0 ) { loc0 += ( loc1 == null? 0 : loc1. doubleValue ( ) ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Sums the squared numbers of a list of numbers.",
        "Sums squared numbers of a list of numbers.",
        "Sums squared numbers.",
        "Sums the squared numbers of a list of doubles.",
        "Sums squared numbers of a list of doubles."
      ],
      "output": [
        "public static int sum_squared_nums ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static double sum_squared_nums ( List < Number > arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static double sum_squared_nums ( Number... arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static double sum_squared_nums ( List <? extends Number > arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static double sum_squared_nums ( Number... arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static int sum_squared_nums ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static double sum_squared_nums ( List <? extends Number > arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static double sum_squared_nums ( List < Number > arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static double sum_squared_nums ( Number... arg0 ) { double loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static double sum_squared_nums ( List <? extends Number > arg0 ) { double loc0 = 0.0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static double sum_squared_nums ( double arg0 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) ( arg0 * arg0 ) ; double loc2 = ( double ) ( arg0 * arg0 ) ; double loc3 = ( double ) ( arg0 * arg0 ) ; return ( loc0 * loc0 + loc1 * loc1 ) / loc2 ; }",
        "public static double sum_squared_nums ( double arg0 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) arg0 / loc0 ; double loc2 = ( double ) arg0 / loc0 ; double loc3 = ( double ) arg0 / loc1 ; return loc2 * loc3 ; }",
        "public static double sum_squared_nums ( double arg0 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) ( arg0 * arg0 ) ; double loc2 = ( double ) ( arg0 * arg0 ) ; double loc3 = ( double ) ( arg0 / loc1 ) ; return loc0 * loc2 + loc3 * loc3 ; }",
        "public static double sum_squared_nums ( double arg0 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) ( arg0 * arg0 ) ; double loc2 = ( double ) ( arg0 * arg0 ) ; double loc3 = ( double ) ( arg0 * arg0 ) ; return ( loc0 * loc0 ) + loc1 * loc1 ; }",
        "public static double sum_squared_nums ( double arg0 ) { double loc0 = ( double ) arg0 ; double loc1 = ( double ) arg0 / loc0 ; double loc2 = ( double ) arg0 / loc0 ; return loc2 * loc1 ; }",
        "public static double sum_squared_nums ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 * loc1 ; } return loc0 ; }",
        "public static double sum_squared_nums ( List < Double > arg0 ) { double loc0 = 0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 * loc1 ; } return loc0 ; }",
        "public static double sum_squared_nums ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static double sum_squared_nums ( List < Double > arg0 ) { double loc0 = 0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static double sum_squared_nums ( List < Double > arg0 ) { double loc0 = 0.0 ; double loc1 = 0.0 ; for ( Double loc2 : arg0 ) { loc0 += loc2 * loc2 ; } return loc0 ; }",
        "public static double sum_squared_nums ( List < Double > arg0 ) { double loc0 = 0.0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 * loc1 ; } return loc0 ; }",
        "public static double sum_squared_nums ( List < Double > arg0 ) { double loc0 = 0 ; for ( Double loc1 : arg0 ) { loc0 += loc1 * loc1 ; } return loc0 ; }",
        "public static double sum_squared_nums ( List < Double > arg0 ) { double loc0 = 0.0 ; double loc1 = 0.0 ; for ( Double loc2 : arg0 ) { loc0 += loc2 * loc2 ; } return loc0 ; }",
        "public static double sum_squared_nums ( List < double > arg0 ) { double loc0 = 0.0 ; for ( double loc1 : arg0 ) { loc0 += loc1 * loc1 ; } return loc0 ; }",
        "public static double sum_squared_nums ( List < Double > arg0 ) { double loc0 = 0 ; for ( Double loc1 : arg0 ) { loc0 += ( loc1 == null? 0 : loc1. doubleValue ( ) ) ; } return loc0 ; }"
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    last = parts[parts.length - 1]; \n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \"; \n    if(txt.length() == 1) last = \" \"; \n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a'; \n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25); \n}",
      "target": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if(parts.length != 0) last = parts[parts.length - 1]; \n    if(txt.length() != 0 && txt.charAt(txt.length() - 1) == ' ') last = \" \"; \n    if(txt.length() == 0) last = \" \"; \n    int last_char_pos = Character.toLowerCase(last.charAt(0)) - 'a'; \n    return (last.length() == 1) && (0 <= last_char_pos && last_char_pos <= 25); \n}",
      "function range": "18,5-26,5",
      "raw_output": [
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) || ( arg0 >= 'a' && arg0 <= 'f' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'F' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'f' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "boolean function ( char arg0 ) { return ( ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 == 'a' || arg0 == 'e' || arg0 == 'i' || arg0 == 'o' || arg0 == 'u' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "boolean function ( char arg0 ) { return ( ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) ; }",
        "boolean function ( char arg0 ) { return ( ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "boolean function ( char arg0 ) { return ( ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 == 'a' || arg0 == 'e' || arg0 == 'i' || arg0 == 'o' || arg0 == 'u' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ; }",
        "boolean function ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) ; }"
      ],
      "mid_translation": [
        "check if last character is a letter",
        "Checks if the last character is a letter.",
        "check if the last character is a letter",
        "Check if the last character is a letter",
        "Check if the last character is a letter."
      ],
      "output": [
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) || ( arg0 >= 'a' && arg0 <= 'f' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'F' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'f' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 == 'a' || arg0 == 'e' || arg0 == 'i' || arg0 == 'o' || arg0 == 'u' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'a' && arg0 <= 'z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 == 'a' || arg0 == 'e' || arg0 == 'i' || arg0 == 'o' || arg0 == 'u' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' ) && ( arg0 <= 'z' ) ; }",
        "public static boolean check_if_last_char_is_a_letter ( char arg0 ) { return ( arg0 >= 'a' && arg0 <= 'z' ) || ( arg0 >= 'A' && arg0 <= 'Z' ) ; }"
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n    int ind = 1; \n    for(int i = 0; i < arr.length - 1; i++) { \n        if(arr[i] < arr[i + 1]) ind = i + 1; \n    }\n    return ind;\n}",
      "target": "public static int can_arrange(int[] arr) {\n    int ind = -1; \n    for(int i = 1; i < arr.length; i++) { \n        if(arr[i] < arr[i - 1]) ind = i; \n    }\n    return ind;\n}",
      "function range": "16,5-22,5",
      "raw_output": [
        "int function ( Comparable [ ] arg0, Comparable arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( Comparable [ ] arg0, Comparable [ ] arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg1 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( T [ ] arg0, T [ ] arg1, T arg2 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; break ; } } return loc0 ; }",
        "int function ( Comparable [ ] arg0, Comparable [ ] arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg1 [ loc0 ] ) < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( Comparable [ ] arg0, Comparable [ ] arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg1 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( T [ ] arg0 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { T loc2 = arg0 [ loc1 ] ; if ( loc2. compareTo ( loc0 ) < 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( Comparable [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 ] ) < 0 ) { return loc0 ; } } return - 1 ; }",
        "int function ( Comparable [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 ] ) > 0 ) { return loc0 ; } } return - 1 ; }",
        "int function ( Comparable [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( Comparable [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc0 ] ) < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( T [ ] arg0, T arg1 ) { if ( arg0. length == 0 || arg1 == null ) { throw new NullPointerException ( ) ; } int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( T [ ] arg0, T [ ] arg1, int arg2 ) { T loc0 = arg0 [ arg2 ] ; for ( int loc1 = 1 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; break ; } } return loc0 ; }",
        "int function ( T [ ] arg0, T [ ] arg1, int arg2 ) { T loc0 = arg0 [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; break ; } } return loc0 ; }",
        "int function ( Comparable [ ] arg0, Comparable [ ] arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg1 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( T [ ] arg0, T [ ] arg1, int arg2 ) { T loc0 = arg0 [ arg2 ] ; for ( int loc1 = 1 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = arg1 [ loc1 ] ; break ; } } return loc0 ; }",
        "int function ( Comparable [ ] arg0, Comparable [ ] arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg1 [ loc0 ] ) < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( T [ ] arg0, T arg1, T arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg2 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( T [ ] arg0, T [ ] arg1, T arg2 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg1 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; break ; } } return loc0 ; }",
        "int function ( Comparable [ ] arg0, int arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( T [ ] arg0, T arg1, T arg2 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg2 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; } return loc0 ; } return - 1 ; }",
        "int function ( T [ ] arg0, T arg1, T arg2 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg2 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; break ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Returns the index of the first element in the array that is less than the second element.",
        "Returns the index of the smallest element in the array.",
        "Returns the index of the first element in the array that is less than the last element.",
        "Returns the index of the first element of the array that is less than the second element.",
        "Returns the index of the first element in the array that is greater than the second element."
      ],
      "output": [
        "public static int can_arrange ( Comparable [ ] arg0, Comparable arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( Comparable [ ] arg0, Comparable [ ] arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg1 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0, T [ ] arg1, T arg2 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; break ; } } return loc0 ; }",
        "public static int can_arrange ( Comparable [ ] arg0, Comparable [ ] arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg1 [ loc0 ] ) < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( Comparable [ ] arg0, Comparable [ ] arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg1 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0 ) { T loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { T loc2 = arg0 [ loc1 ] ; if ( loc2. compareTo ( loc0 ) < 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( Comparable [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 ] ) < 0 ) { return loc0 ; } } return - 1 ; }",
        "public static int can_arrange ( Comparable [ ] arg0, int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ]. compareTo ( arg0 [ loc0 ] ) > 0 ) { return loc0 ; } } return - 1 ; }",
        "public static int can_arrange ( Comparable [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( Comparable [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc0 ] ) < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0, T arg1 ) { if ( arg0. length == 0 || arg1 == null ) { throw new NullPointerException ( ) ; } int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0, T [ ] arg1, int arg2 ) { T loc0 = arg0 [ arg2 ] ; for ( int loc1 = 1 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; break ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0, T [ ] arg1, int arg2 ) { T loc0 = arg0 [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; break ; } } return loc0 ; }",
        "public static int can_arrange ( Comparable [ ] arg0, Comparable [ ] arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg1 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0, T [ ] arg1, int arg2 ) { T loc0 = arg0 [ arg2 ] ; for ( int loc1 = 1 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = arg1 [ loc1 ] ; break ; } } return loc0 ; }",
        "public static int can_arrange ( Comparable [ ] arg0, Comparable [ ] arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg1 [ loc0 ] ) < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0, T arg1, T arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg2 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0, T [ ] arg1, T arg2 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg1 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; break ; } } return loc0 ; }",
        "public static int can_arrange ( Comparable [ ] arg0, int arg1, int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc0 ] ) > 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int can_arrange ( T [ ] arg0, T arg1, T arg2 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg2 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; } return loc0 ; } return - 1 ; }",
        "public static int can_arrange ( T [ ] arg0, T arg1, T arg2 ) { T loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg2 [ loc1 ] ) { loc0 = arg0 [ loc1 ] ; break ; } } return loc0 ; }"
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true; \n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;  \n    for(int i = 1; i < lst.length; i++) { \n        if(lst[i] < 0) { \n            negative = false; \n            max_negative = Math.min(max_negative, lst[i]); \n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
      "target": "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = false, positive = false; \n    int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE;  \n    for(int i = 0; i < lst.length; i++) { \n        if(lst[i] < 0) { \n            negative = true; \n            max_negative = Math.max(max_negative, lst[i]); \n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
      "function range": "16,5-32,5",
      "raw_output": [
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { if ( arg0. length > 1 ) { return arg0 [ 0 ] ; } else if ( arg0 [ 0 ] < arg0 [ 1 ] ) { return arg0 [ 1 ] ; } else { return arg0 [ 1 ] ; } }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } if ( loc0 > loc0 ) { loc0 = loc0 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 > loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 > loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int... arg0 ) { if ( arg0. length == 0 ) { return - 1 ; } int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { int loc2 = loc1 ; if ( loc2 > loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) loc0 = loc2 ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Method largest_smallest_integers.",
        "Get the largest smallest integer values from an array of integers.",
        "Get the largest smallest integers from an array of integers.",
        "Get the largest smaller integer values from an array of integers.",
        "Get the largest smallest integers."
      ],
      "output": [
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { if ( arg0. length > 1 ) { return arg0 [ 0 ] ; } else if ( arg0 [ 0 ] < arg0 [ 1 ] ) { return arg0 [ 1 ] ; } else { return arg0 [ 1 ] ; } }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } if ( loc0 > loc0 ) { loc0 = loc0 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 > loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 > loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int... arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int... arg0 ) { if ( arg0. length == 0 ) { return - 1 ; } int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc1 < loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { if ( loc0 < loc1 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { int loc2 = loc1 ; if ( loc2 > loc0 ) { loc0 = loc2 ; } } return loc0 ; }",
        "public static int largest_smallest_integers ( Integer [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; if ( loc2 < loc0 ) loc0 = loc2 ; } return loc0 ; }"
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double) temp_a = ((Integer) b).doubleValue(); \n    if(b instanceof Double) temp_b = ((Integer) a).doubleValue(); \n    if(a instanceof Integer) temp_a = (Double) a; \n    if(b instanceof Integer) temp_b = (Double) b; \n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
      "target": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double) temp_a = (Double) a; \n    if(b instanceof Double) temp_b = (Double) b; \n    if(a instanceof Integer) temp_a = ((Integer) a).doubleValue(); \n    if(b instanceof Integer) temp_b = ((Integer) b).doubleValue(); \n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
      "function range": "17,5-36,5",
      "raw_output": [
        "int function ( Object arg0, Object arg1 ) { Comparable loc0 = ( Comparable ) arg0 ; Comparable loc1 = ( Comparable ) arg1 ; return loc0. compareTo ( loc1 ) ; }",
        "int function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else if ( arg0 == null ) { return 1 ; } else if ( arg1 == null ) { return 0 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "int function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else if ( arg0 == null ) { return 1 ; } else if ( arg1 == null ) { return 1 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg1 == null ) { return false ; } else { return arg0. equals ( arg1 ) ; } } else { return arg0. equals ( arg1 ) ; } }",
        "int function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else if ( arg0 == null ) { return 1 ; } else if ( arg1 == null ) { return 0 ; } else { return arg1. compareTo ( arg0 ) ; } }",
        "int function ( Resource arg0, Resource arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == null ) { return - 1 ; } else if ( arg1 == null ) { return 1 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "int function ( Resource arg0, Resource arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == arg1 ) { return - 1 ; } else if ( arg1 == null ) { return 1 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "int function ( Resource arg0, Resource arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == arg1 ) { return - 1 ; } else if ( arg1 == null ) { return 0 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "int function ( Resource arg0, Resource arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == null ) { return - 1 ; } else if ( arg1 == null ) { return + 1 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "boolean function ( Resource arg0, Resource arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == null ) { return arg1 == null ; } else if ( arg1 == null ) { return arg0 == arg1 ; } return arg0. compareTo ( arg1 ) == 0 ; }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } if ( arg1 == null ) { return arg0 == arg1 ; } return arg0. equals ( arg1 ) ; }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg0 == null ) { return arg1 == null ; } else if ( arg1 == null ) { return arg0 == arg1 ; } else { return arg0. equals ( arg1 ) ; } } else { return false ; } }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return arg0 == arg1 ; } else if ( arg1 == null ) { return arg0 == arg1 ; } else { return arg0. equals ( arg1 ) ; } } else { return arg0. equals ( arg1 ) ; } }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg1 == null ) { return false ; } else if ( arg0 == null ) { return arg1 == null ; } return arg0. equals ( arg1 ) ; } else { return arg0. equals ( arg1 ) ; } }",
        "boolean function ( RecordSet arg0, RecordSet arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == null ) { return arg1 == null ; } else if ( arg1 == null ) { return arg0 == arg1 ; } else { return arg0. equals ( arg1 ) ; } }",
        "boolean function ( XMLObject arg0, XMLObject arg1 ) { return ( arg0 == null )? ( arg1 == null ) : arg0. equals ( arg1 ) ; }",
        "boolean function ( Object arg0, Object arg1 ) { return ( arg0 == null )? ( arg1 == null ) : arg0. equals ( arg1 ) ; }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg0 == null ) { return ( arg1 == null )? ( arg0 == null ) : ( arg1 == null ) ; } else { return arg0. equals ( arg1 ) ; } } else { return false ; } }",
        "boolean function ( Object arg0, Object arg1 ) { return arg0 == null? arg1 == null : arg0. equals ( arg1 ) ; }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return ( arg0 == arg1 ) ; } else if ( arg1 == null ) { return ( arg0 == arg1 ) ; } else { return arg0. equals ( arg1 ) ; } } else { return false ; } }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg1 == null ) { return false ; } else { return arg0. equals ( arg1 ) ; } } else { return arg0. equals ( arg1 ) ; } }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg0 == null ) { return arg1 == null ; } else if ( arg1 == null ) { return arg0 == arg1 ; } else { return arg0. equals ( arg1 ) ; } } else { return false ; } }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } if ( arg1 == null ) { return arg0 == arg1 ; } return arg0. equals ( arg1 ) ; }",
        "boolean function ( Object arg0, Object arg1 ) { return arg0 == null? arg1 == null : arg0. equals ( arg1 ) ; }",
        "boolean function ( Object arg0, Object arg1 ) { if ( arg0 == null ) { return ( arg1 == null )? ( arg0 == null ) : arg0. equals ( arg1 ) ; } return arg0. equals ( arg1 ) ; }"
      ],
      "mid_translation": [
        "Compare two objects.",
        "Compare two resources.",
        "Compare two recordsets.",
        "Compare two XML objects.",
        "Compare two objects"
      ],
      "output": [
        "public static int compare_one ( Object arg0, Object arg1 ) { Comparable loc0 = ( Comparable ) arg0 ; Comparable loc1 = ( Comparable ) arg1 ; return loc0. compareTo ( loc1 ) ; }",
        "public static int compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else if ( arg0 == null ) { return 1 ; } else if ( arg1 == null ) { return 0 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "public static int compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else if ( arg0 == null ) { return 1 ; } else if ( arg1 == null ) { return 1 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg1 == null ) { return false ; } else { return arg0. equals ( arg1 ) ; } } else { return arg0. equals ( arg1 ) ; } }",
        "public static int compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else if ( arg0 == null ) { return 1 ; } else if ( arg1 == null ) { return 0 ; } else { return arg1. compareTo ( arg0 ) ; } }",
        "public static int compare_one ( Resource arg0, Resource arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == null ) { return - 1 ; } else if ( arg1 == null ) { return 1 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "public static int compare_one ( Resource arg0, Resource arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == arg1 ) { return - 1 ; } else if ( arg1 == null ) { return 1 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "public static int compare_one ( Resource arg0, Resource arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == arg1 ) { return - 1 ; } else if ( arg1 == null ) { return 0 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "public static int compare_one ( Resource arg0, Resource arg1 ) { if ( arg0 == arg1 ) { return 0 ; } else if ( arg0 == null ) { return - 1 ; } else if ( arg1 == null ) { return + 1 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "public static boolean compare_one ( Resource arg0, Resource arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == null ) { return arg1 == null ; } else if ( arg1 == null ) { return arg0 == arg1 ; } return arg0. compareTo ( arg1 ) == 0 ; }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } if ( arg1 == null ) { return arg0 == arg1 ; } return arg0. equals ( arg1 ) ; }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg0 == null ) { return arg1 == null ; } else if ( arg1 == null ) { return arg0 == arg1 ; } else { return arg0. equals ( arg1 ) ; } } else { return false ; } }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return arg0 == arg1 ; } else if ( arg1 == null ) { return arg0 == arg1 ; } else { return arg0. equals ( arg1 ) ; } } else { return arg0. equals ( arg1 ) ; } }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg1 == null ) { return false ; } else if ( arg0 == null ) { return arg1 == null ; } return arg0. equals ( arg1 ) ; } else { return arg0. equals ( arg1 ) ; } }",
        "public static boolean compare_one ( RecordSet arg0, RecordSet arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == null ) { return arg1 == null ; } else if ( arg1 == null ) { return arg0 == arg1 ; } else { return arg0. equals ( arg1 ) ; } }",
        "public static boolean compare_one ( XMLObject arg0, XMLObject arg1 ) { return ( arg0 == null )? ( arg1 == null ) : arg0. equals ( arg1 ) ; }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { return ( arg0 == null )? ( arg1 == null ) : arg0. equals ( arg1 ) ; }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg0 == null ) { return ( arg1 == null )? ( arg0 == null ) : ( arg1 == null ) ; } else { return arg0. equals ( arg1 ) ; } } else { return false ; } }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { return arg0 == null? arg1 == null : arg0. equals ( arg1 ) ; }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return ( arg0 == arg1 ) ; } else if ( arg1 == null ) { return ( arg0 == arg1 ) ; } else { return arg0. equals ( arg1 ) ; } } else { return false ; } }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg1 == null ) { return false ; } else { return arg0. equals ( arg1 ) ; } } else { return arg0. equals ( arg1 ) ; } }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else if ( arg0 == null ) { return arg1 == null ; } else if ( arg1 == null ) { return arg0 == arg1 ; } else { return arg0. equals ( arg1 ) ; } } else { return false ; } }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } if ( arg1 == null ) { return arg0 == arg1 ; } return arg0. equals ( arg1 ) ; }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { return arg0 == null? arg1 == null : arg0. equals ( arg1 ) ; }",
        "public static boolean compare_one ( Object arg0, Object arg1 ) { if ( arg0 == null ) { return ( arg1 == null )? ( arg0 == null ) : arg0. equals ( arg1 ) ; } return arg0. equals ( arg1 ) ; }"
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8)); \n}",
      "target": "public static boolean is_equal_to_sum_even(int n) {\n    return ((n % 2 == 0) && (n >= 8)); \n}",
      "function range": "13,5-15,5",
      "raw_output": [
        "boolean function ( long arg0, long arg1 ) { if ( arg0 <= arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( arg0 < arg1 ) { return false ; } else if ( arg0 > arg1 ) { return true ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( ( arg0 % arg1 ) == 0 ) { return true ; } else { return false ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( ( arg0 % arg1 ) == 0 ) { return true ; } else if ( ( arg0 % arg1 ) == 0 ) { return true ; } else { return false ; } }",
        "boolean function ( int arg0 ) { return arg0 % 2 == 0 ; }",
        "boolean function ( T arg0, T arg1 ) { if ( arg0. compareTo ( arg1 ) == 0 ) { return true ; } else if ( arg0. compareTo ( arg1 ) == 0 ) { return false ; } else { return true ; } }",
        "boolean function ( T arg0, T arg1 ) { if ( arg0 == null && arg1 == null ) { return true ; } else if ( arg0 == null || arg1 == null ) { return false ; } else { return arg0. equals ( arg1 ) ; } }",
        "boolean function ( T arg0, T arg1 ) { if ( arg0 == null && arg1 == null ) return false ; if ( arg0 == null || arg1 == null ) return true ; return arg0. equals ( arg1 ) ; }",
        "boolean function ( T arg0, T arg1 ) { if ( arg0 == null && arg1 == null ) { return false ; } else if ( arg0 == null || arg1 == null ) { return false ; } else { return arg0. equals ( arg1 ) ; } }",
        "boolean function ( T arg0, T arg1 ) { if ( arg0. getClass ( ). equals ( arg1. getClass ( ) ) ) { return true ; } else if ( arg0. equals ( arg1 ) ) { return false ; } else { return true ; } }",
        "boolean function ( int arg0 ) { return arg0 % 2 == 0 ; }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return true ; } else if ( arg0 % arg1 == 0 ) { return true ; } else { return false ; } }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return true ; } else if ( arg0 % arg1 == 1 ) { return true ; } else { return false ; } }",
        "boolean function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return true ; } else if ( arg0 % 2 == 1 ) { return true ; } else { return false ; } }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return true ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( arg0 < ( arg1 + 1 ) ) { return false ; } else if ( arg0 < ( arg1 + 1 ) ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( arg0 <= arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( arg0 < ( arg1 + 1 ) ) { return false ; } else if ( arg0 < ( arg1 + 1 ) ) { return false ; } else { return ( arg0 % arg1 == arg1 ) ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( arg0 < ( arg1 + 1 ) ) { return false ; } else if ( arg0 == arg1 ) { return true ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( arg0 < ( arg1 + 1 ) ) { return false ; } else if ( arg0 % arg1 == 0 ) { return true ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( arg0 <= arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( arg0 < arg1 ) { return false ; } else if ( arg0 > arg1 ) { return true ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( ( arg0 % arg1 ) == 0 ) { return true ; } else { return false ; } }",
        "boolean function ( long arg0, long arg1 ) { if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 % arg1 == 0 ) { return true ; } else { return false ; } }"
      ],
      "mid_translation": [
        "is_equal_to_sum_even returns true if n is an even number.",
        "is_equal_to_sum_even.",
        "is_equal_to_sum_even returns true if n is an odd number.",
        "is_equal_to_sum_even returns true if n is less than 8.",
        "is_equal_to_sum_even returns true if n is an even number"
      ],
      "output": [
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 <= arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 < arg1 ) { return false ; } else if ( arg0 > arg1 ) { return true ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( ( arg0 % arg1 ) == 0 ) { return true ; } else { return false ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( ( arg0 % arg1 ) == 0 ) { return true ; } else if ( ( arg0 % arg1 ) == 0 ) { return true ; } else { return false ; } }",
        "public static boolean is_equal_to_sum_even ( int arg0 ) { return arg0 % 2 == 0 ; }",
        "public static boolean is_equal_to_sum_even ( T arg0, T arg1 ) { if ( arg0. compareTo ( arg1 ) == 0 ) { return true ; } else if ( arg0. compareTo ( arg1 ) == 0 ) { return false ; } else { return true ; } }",
        "public static boolean is_equal_to_sum_even ( T arg0, T arg1 ) { if ( arg0 == null && arg1 == null ) { return true ; } else if ( arg0 == null || arg1 == null ) { return false ; } else { return arg0. equals ( arg1 ) ; } }",
        "public static boolean is_equal_to_sum_even ( T arg0, T arg1 ) { if ( arg0 == null && arg1 == null ) return false ; if ( arg0 == null || arg1 == null ) return true ; return arg0. equals ( arg1 ) ; }",
        "public static boolean is_equal_to_sum_even ( T arg0, T arg1 ) { if ( arg0 == null && arg1 == null ) { return false ; } else if ( arg0 == null || arg1 == null ) { return false ; } else { return arg0. equals ( arg1 ) ; } }",
        "public static boolean is_equal_to_sum_even ( T arg0, T arg1 ) { if ( arg0. getClass ( ). equals ( arg1. getClass ( ) ) ) { return true ; } else if ( arg0. equals ( arg1 ) ) { return false ; } else { return true ; } }",
        "public static boolean is_equal_to_sum_even ( int arg0 ) { return arg0 % 2 == 0 ; }",
        "public static boolean is_equal_to_sum_even ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return true ; } else if ( arg0 % arg1 == 0 ) { return true ; } else { return false ; } }",
        "public static boolean is_equal_to_sum_even ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return true ; } else if ( arg0 % arg1 == 1 ) { return true ; } else { return false ; } }",
        "public static boolean is_equal_to_sum_even ( int arg0 ) { if ( arg0 % 2 == 0 ) { return true ; } else if ( arg0 % 2 == 1 ) { return true ; } else { return false ; } }",
        "public static boolean is_equal_to_sum_even ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return true ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 < ( arg1 + 1 ) ) { return false ; } else if ( arg0 < ( arg1 + 1 ) ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 <= arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 < ( arg1 + 1 ) ) { return false ; } else if ( arg0 < ( arg1 + 1 ) ) { return false ; } else { return ( arg0 % arg1 == arg1 ) ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 < ( arg1 + 1 ) ) { return false ; } else if ( arg0 == arg1 ) { return true ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 < ( arg1 + 1 ) ) { return false ; } else if ( arg0 % arg1 == 0 ) { return true ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 <= arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 < arg1 ) { return false ; } else if ( arg0 > arg1 ) { return true ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( ( arg0 % arg1 ) == 0 ) { return true ; } else { return false ; } }",
        "public static boolean is_equal_to_sum_even ( long arg0, long arg1 ) { if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }",
        "public static boolean is_equal_to_sum_even ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 % arg1 == 0 ) { return true ; } else { return false ; } }"
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(long i = n; i >= 1; i--) { \n        fact_i *= i * fact_i; \n        special_fact += i * fact_i; \n    }\n    return special_fact;\n}",
      "target": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(int i = 1; i <= n; i++) { \n        fact_i *= i; \n        special_fact *= fact_i; \n    }\n    return special_fact;\n}",
      "function range": "18,5-25,5",
      "raw_output": [
        "Factorial function ( Integer arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Factorial ( arg0. intValue ( ) ) ; }",
        "Factorial function ( Integer arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0. intValue ( ) ) ; }",
        "double function ( final double arg0 ) { if ( arg0 == 0.0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1.0 / arg0 ; return arg0 * loc0 ; }",
        "Factorial function ( Number arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Factorial ( arg0. bitLength ( ) ) ; }",
        "Factorial function ( Integer arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Factorial ( arg0 ) ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "Factorial function ( Integer arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Factorial ( arg0. bitLength ( ) ) ; }",
        "Factorial function ( Integer arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Factorial ( arg0 ) ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "double function ( final double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; ++ loc1 ) { loc0 *= Math. pow ( arg0, loc1 ) ; } return loc0 ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 <= 0 ) { throw new ArithmeticException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "double function ( final double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0, loc1 ) ; } return loc0 ; }",
        "double function ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - 1, loc1 ) ; } return loc0 ; }",
        "double function ( final double arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0, loc1 ) ; } return loc0 ; }",
        "double function ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - 1, 2 ) ; } return loc0 ; }",
        "double function ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( 10, loc1 ) ; } return loc0 ; }",
        "double function ( final double arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - 1, 2 ) ; } return loc0 ; }",
        "double function ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - 1, loc1 ) ; } return loc0 ; }",
        "double function ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - 1, 2 ) ; } return loc0 ; }",
        "Factorial function ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "double function ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( 10, loc1 ) ; } return loc0 ; }",
        "double function ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; ++ loc1 ) { loc0 *= Math. pow ( arg0 - 1, loc1 ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Returns the special factorial of n.",
        "Get the special factorial of n.",
        "Gets the special factorial of n.",
        "Returns the special factorial of n",
        "Get the special factorial of n"
      ],
      "output": [
        "public static Factorial special_factorial ( Integer arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Factorial ( arg0. intValue ( ) ) ; }",
        "public static Factorial special_factorial ( Integer arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0. intValue ( ) ) ; }",
        "public static double special_factorial ( final double arg0 ) { if ( arg0 == 0.0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1.0 / arg0 ; return arg0 * loc0 ; }",
        "public static Factorial special_factorial ( Number arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Factorial ( arg0. bitLength ( ) ) ; }",
        "public static Factorial special_factorial ( Integer arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Factorial ( arg0 ) ; }",
        "public static Factorial special_factorial ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static Factorial special_factorial ( final int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static Factorial special_factorial ( Integer arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Factorial ( arg0. bitLength ( ) ) ; }",
        "public static Factorial special_factorial ( Integer arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new Factorial ( arg0 ) ; }",
        "public static Factorial special_factorial ( final int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static Factorial special_factorial ( final int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static Factorial special_factorial ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static double special_factorial ( final double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; ++ loc1 ) { loc0 *= Math. pow ( arg0, loc1 ) ; } return loc0 ; }",
        "public static Factorial special_factorial ( final int arg0 ) { if ( arg0 <= 0 ) { throw new ArithmeticException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static double special_factorial ( final double arg0 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0, loc1 ) ; } return loc0 ; }",
        "public static double special_factorial ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - 1, loc1 ) ; } return loc0 ; }",
        "public static double special_factorial ( final double arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0, loc1 ) ; } return loc0 ; }",
        "public static double special_factorial ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - 1, 2 ) ; } return loc0 ; }",
        "public static double special_factorial ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( 10, loc1 ) ; } return loc0 ; }",
        "public static double special_factorial ( final double arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - 1, 2 ) ; } return loc0 ; }",
        "public static double special_factorial ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - 1, loc1 ) ; } return loc0 ; }",
        "public static double special_factorial ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( arg0 - 1, 2 ) ; } return loc0 ; }",
        "public static Factorial special_factorial ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Factorial ( arg0 ) ; }",
        "public static double special_factorial ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 *= Math. pow ( 10, loc1 ) ; } return loc0 ; }",
        "public static double special_factorial ( final int arg0 ) { if ( arg0 == 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < arg0 ; ++ loc1 ) { loc0 *= Math. pow ( arg0 - 1, loc1 ) ; } return loc0 ; }"
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text; \n}",
      "target": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\"; \n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n    }\n    return new_text;\n}",
      "function range": "13,5-37,5",
      "raw_output": [
        "String function ( String arg0 ) { return arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "String function ( String arg0 ) { return arg0. replaceAll ( \"srini_string\", \"srini_string\" ). replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "String function ( Class <? > arg0 ) { String loc0 = arg0. getName ( ) ; int loc1 = loc0. indexOf ('' ) ; if ( loc1!= - 1 ) { loc0 = loc0. substring ( 0, loc1 ) ; } return loc0 ; }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } return arg0 ; }",
        "String function ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) ) { arg0 = arg0. substring ( 0, arg0. length ( ) - 1 ) ; } return arg0. replace ('','' ) ; }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } return arg0 ; }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } return arg0 ; }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; return arg0 ; }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return arg0 ; } else { return arg0 ; } }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return arg0 ; } return arg0 ; }",
        "String function ( Class <? > arg0 ) { return arg0. getName ( ). replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "String function ( Class <? > arg0, String arg1 ) { return arg0. getName ( ). replaceAll ( \"srini_string\", arg1 ) ; }",
        "String function ( Class <? > arg0 ) { return arg0. getName ( ). replace ( \"srini_string\", \"srini_string\" ) ; }",
        "String function ( Object arg0 ) { return arg0 == null? \"srini_string\" : arg0. toString ( ) ; }",
        "String function ( Class <? > arg0, String arg1 ) { return arg0. getName ( ). replace ( '.', '/' ) ; }",
        "String function ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return arg0 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuilder loc1 = new StringBuilder ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == 32 ) { loc1. append ('' ) ; } else if ( arg0. charAt ( loc2 ) == 32 ) { loc1. append ('' ) ; } } return loc1. toString ( ) ; }",
        "String function ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; String loc0 = arg0. replace ( \"srini_string\", \"srini_string\" ) ; return loc0 ; }",
        "String function ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; String loc0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return loc0 ; }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuilder loc1 = new StringBuilder ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { char loc3 = arg0. charAt ( loc2 ) ; if (! Character. isWhitespace ( loc3 ) ) { loc1. append ( loc3 ) ; } } return loc1. toString ( ) ; }",
        "String function ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return arg0 ; }",
        "String function ( String arg0 ) { arg0 = arg0. replace ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replace ( \"srini_string\", \"srini_string\" ) ; return arg0 ; }",
        "String function ( String arg0 ) { arg0 = arg0. replace ('','' ) ; arg0 = arg0. replace ('','' ) ; arg0 = arg0. replace ('','' ) ; return arg0 ; }",
        "String function ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return arg0 ; }",
        "String function ( String arg0 ) { return arg0. replace ( \"srini_string\", \"srini_string\" ) ; }"
      ],
      "mid_translation": [
        "Fix_spaces Method.",
        "fix_spaces Method.",
        "Fixspaces Method.",
        "Fix spaces in a string.",
        "Fixes the spaces in the text."
      ],
      "output": [
        "public static String fix_spaces ( String arg0 ) { return arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "public static String fix_spaces ( String arg0 ) { return arg0. replaceAll ( \"srini_string\", \"srini_string\" ). replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "public static String fix_spaces ( Class <? > arg0 ) { String loc0 = arg0. getName ( ) ; int loc1 = loc0. indexOf ('' ) ; if ( loc1!= - 1 ) { loc0 = loc0. substring ( 0, loc1 ) ; } return loc0 ; }",
        "public static String fix_spaces ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } return arg0 ; }",
        "public static String fix_spaces ( String arg0 ) { if ( arg0. contains ( \"srini_string\" ) ) { arg0 = arg0. substring ( 0, arg0. length ( ) - 1 ) ; } return arg0. replace ('','' ) ; }",
        "public static String fix_spaces ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } return arg0 ; }",
        "public static String fix_spaces ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } return arg0 ; }",
        "public static String fix_spaces ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; return arg0 ; }",
        "public static String fix_spaces ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return arg0 ; } else { return arg0 ; } }",
        "public static String fix_spaces ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } if ( arg0. equals ( \"srini_string\" ) ) { return arg0 ; } return arg0 ; }",
        "public static String fix_spaces ( Class <? > arg0 ) { return arg0. getName ( ). replaceAll ( \"srini_string\", \"srini_string\" ) ; }",
        "public static String fix_spaces ( Class <? > arg0, String arg1 ) { return arg0. getName ( ). replaceAll ( \"srini_string\", arg1 ) ; }",
        "public static String fix_spaces ( Class <? > arg0 ) { return arg0. getName ( ). replace ( \"srini_string\", \"srini_string\" ) ; }",
        "public static String fix_spaces ( Object arg0 ) { return arg0 == null? \"srini_string\" : arg0. toString ( ) ; }",
        "public static String fix_spaces ( Class <? > arg0, String arg1 ) { return arg0. getName ( ). replace ( '.', '/' ) ; }",
        "public static String fix_spaces ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return arg0 ; }",
        "public static String fix_spaces ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuilder loc1 = new StringBuilder ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0. charAt ( loc2 ) == 32 ) { loc1. append ('' ) ; } else if ( arg0. charAt ( loc2 ) == 32 ) { loc1. append ('' ) ; } } return loc1. toString ( ) ; }",
        "public static String fix_spaces ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; String loc0 = arg0. replace ( \"srini_string\", \"srini_string\" ) ; return loc0 ; }",
        "public static String fix_spaces ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; String loc0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return loc0 ; }",
        "public static String fix_spaces ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; StringBuilder loc1 = new StringBuilder ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { char loc3 = arg0. charAt ( loc2 ) ; if (! Character. isWhitespace ( loc3 ) ) { loc1. append ( loc3 ) ; } } return loc1. toString ( ) ; }",
        "public static String fix_spaces ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return arg0 ; }",
        "public static String fix_spaces ( String arg0 ) { arg0 = arg0. replace ( \"srini_string\", \"srini_string\" ) ; arg0 = arg0. replace ( \"srini_string\", \"srini_string\" ) ; return arg0 ; }",
        "public static String fix_spaces ( String arg0 ) { arg0 = arg0. replace ('','' ) ; arg0 = arg0. replace ('','' ) ; arg0 = arg0. replace ('','' ) ; return arg0 ; }",
        "public static String fix_spaces ( String arg0 ) { arg0 = arg0. replaceAll ( \"srini_string\", \"srini_string\" ) ; return arg0 ; }",
        "public static String fix_spaces ( String arg0 ) { return arg0. replace ( \"srini_string\", \"srini_string\" ) ; }"
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z') \n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
      "target": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if (! (('a' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'z') || ('A' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'Z'))) \n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
      "function range": "17,5-35,5",
      "raw_output": [
        "boolean function ( String arg0 ) { return arg0!= null && arg0. matches ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { boolean loc0 = false ; if ( arg0!= null ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; if ( loc1. length > 2 ) { loc0 = true ; } } return loc0 ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. matches ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. endsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. matches ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "boolean function ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "boolean function ( File arg0 ) { String loc0 = arg0. getName ( ). toLowerCase ( Locale. ENGLISH ) ; return loc0. endsWith ( \"srini_string\" ) ; }",
        "boolean function ( File arg0 ) { String loc0 = arg0. getName ( ) ; return loc0. endsWith ( \"srini_string\" ) || loc0. endsWith ( File. separator ) ; }",
        "boolean function ( File arg0 ) { String loc0 = arg0. getName ( ). toLowerCase ( Locale. ENGLISH ) ; return loc0. endsWith ( File. separator ) ; }",
        "boolean function ( File arg0 ) { String loc0 = arg0. getCanonicalFile ( ). toLowerCase ( Locale. ENGLISH ) ; return loc0. endsWith ( File. separator ) ; }",
        "boolean function ( File arg0 ) { String loc0 = arg0. getAbsolutePath ( ). toLowerCase ( Locale. ENGLISH ) ; return loc0. endsWith ( File. separator ) ; }",
        "boolean function ( String arg0 ) { String loc0 = arg0. toLowerCase ( Locale. ENGLISH ) ; return ( loc0. endsWith ( \"srini_string\" ) || loc0. endsWith ( \"srini_string\" ) ) ; }",
        "boolean function ( File arg0 ) { String loc0 = arg0. getName ( ) ; return ( loc0. endsWith ( \"srini_string\" ) || loc0. endsWith ( \"srini_string\" ) ) ; }",
        "boolean function ( String arg0 ) { String loc0 = arg0. toLowerCase ( ) ; return ( loc0. endsWith ( \"srini_string\" ) || loc0. endsWith ( \"srini_string\" ) ) ; }",
        "boolean function ( String arg0 ) { String loc0 = arg0. toLowerCase ( Locale. ENGLISH ) ; return loc0. endsWith ( \"srini_string\" ) || loc0. endsWith ( \"srini_string\" ) ; }",
        "boolean function ( String arg0 ) { return arg0!= null && arg0. matches ( \"srini_string\" ) ; }"
      ],
      "mid_translation": [
        "check if the file_name is a valid log file name",
        "check if file_name is a valid log file name",
        "Check if the file_name is a valid log file name",
        "check if the file_name is valid",
        "check if the file_name is a valid image file name"
      ],
      "output": [
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && arg0. matches ( \"srini_string\" ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean file_name_check ( String arg0 ) { boolean loc0 = false ; if ( arg0!= null ) { String [ ] loc1 = arg0. split ( \"srini_string\" ) ; if ( loc1. length > 2 ) { loc0 = true ; } } return loc0 ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && arg0. matches ( \"srini_string\" ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && arg0. endsWith ( \"srini_string\" ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && arg0. matches ( \"srini_string\" ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && ( arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) || arg0. startsWith ( \"srini_string\" ) ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0. startsWith ( \"srini_string\" ) ; }",
        "public static boolean file_name_check ( File arg0 ) { String loc0 = arg0. getName ( ). toLowerCase ( Locale. ENGLISH ) ; return loc0. endsWith ( \"srini_string\" ) ; }",
        "public static boolean file_name_check ( File arg0 ) { String loc0 = arg0. getName ( ) ; return loc0. endsWith ( \"srini_string\" ) || loc0. endsWith ( File. separator ) ; }",
        "public static boolean file_name_check ( File arg0 ) { String loc0 = arg0. getName ( ). toLowerCase ( Locale. ENGLISH ) ; return loc0. endsWith ( File. separator ) ; }",
        "public static boolean file_name_check ( File arg0 ) { String loc0 = arg0. getCanonicalFile ( ). toLowerCase ( Locale. ENGLISH ) ; return loc0. endsWith ( File. separator ) ; }",
        "public static boolean file_name_check ( File arg0 ) { String loc0 = arg0. getAbsolutePath ( ). toLowerCase ( Locale. ENGLISH ) ; return loc0. endsWith ( File. separator ) ; }",
        "public static boolean file_name_check ( String arg0 ) { String loc0 = arg0. toLowerCase ( Locale. ENGLISH ) ; return ( loc0. endsWith ( \"srini_string\" ) || loc0. endsWith ( \"srini_string\" ) ) ; }",
        "public static boolean file_name_check ( File arg0 ) { String loc0 = arg0. getName ( ) ; return ( loc0. endsWith ( \"srini_string\" ) || loc0. endsWith ( \"srini_string\" ) ) ; }",
        "public static boolean file_name_check ( String arg0 ) { String loc0 = arg0. toLowerCase ( ) ; return ( loc0. endsWith ( \"srini_string\" ) || loc0. endsWith ( \"srini_string\" ) ) ; }",
        "public static boolean file_name_check ( String arg0 ) { String loc0 = arg0. toLowerCase ( Locale. ENGLISH ) ; return loc0. endsWith ( \"srini_string\" ) || loc0. endsWith ( \"srini_string\" ) ; }",
        "public static boolean file_name_check ( String arg0 ) { return arg0!= null && arg0. matches ( \"srini_string\" ) ; }"
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0) \n            result += lst[i] * lst[i]; \n        else if (i % 3 == 0) \n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
      "target": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 3 == 0) \n            result += lst[i] * lst[i]; \n        else if (i % 4 == 0) \n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
      "function range": "13,5-24,5",
      "raw_output": [
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 / arg0. length ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "float function ( float [ ] arg0 ) { float loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; } return loc0 ; }",
        "double function ( int [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; } return loc0 ; }",
        "float function ( float [ ] arg0 ) { float loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; } return loc0 ; }",
        "double function ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Sums the squares of an array of integers.",
        "Sum squares of an array of integers.",
        "Sum squares of the array of integers.",
        "Sums the squares of the array of integers.",
        "Sum squares of the array of images."
      ],
      "output": [
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 / arg0. length ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_squares ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_squares ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static float sum_squares ( float [ ] arg0 ) { float loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sum_squares ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double sum_squares ( int [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; } return loc0 ; }",
        "public static float sum_squares ( float [ ] arg0 ) { float loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double sum_squares ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg0 [ loc1 ] ; } return loc0 ; }"
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1){ \n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
      "target": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        if (word.length() == 1) flag = 1; \n        for (int i = 2; i < word.length(); i += 1){\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
      "function range": "22,5-34,5",
      "raw_output": [
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. trim ( ) ) ; return loc0 ; }",
        "Set < String > function ( List < String > arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. toLowerCase ( ) ) ; return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. trim ( ) ) ; return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. trim ( ) ) ; return loc0 ; }",
        "Set < String > function ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "Set < String > function ( Set < String > arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. trim ( ) ) ; return loc0 ; }",
        "Set < String > function ( Set < String > arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( loc1. toLowerCase ( ) ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. toLowerCase ( ) ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. trim ( ) ) ; return loc0 ; }",
        "Set < String > function ( List < String > arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "Set < String > function ( ) { Set < String > loc0 = new HashSet < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; String [ ] loc1 = { \"srini_string\" } ; return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. toLowerCase ( ) ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Words in sentence.",
        "Words in a sentence.",
        "words_in_sentence.",
        "words_in_sentence Method.",
        "words_in_sentence method."
      ],
      "output": [
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. trim ( ) ) ; return loc0 ; }",
        "public static Set < String > words_in_sentence ( List < String > arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. toLowerCase ( ) ) ; return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. trim ( ) ) ; return loc0 ; }",
        "public static List < String > words_in_sentence ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0, \"srini_string\" ) ; while ( loc1. hasMoreTokens ( ) ) loc0. add ( loc1. nextToken ( ) ) ; return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( arg0. size ( ) ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. trim ( ) ) ; return loc0 ; }",
        "public static Set < String > words_in_sentence ( String arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "public static Set < String > words_in_sentence ( Set < String > arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. trim ( ) ) ; return loc0 ; }",
        "public static Set < String > words_in_sentence ( Set < String > arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( String arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0. split ( \"srini_string\" ) ) { loc0. add ( loc1. toLowerCase ( ) ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. toLowerCase ( ) ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) loc0. add ( loc1. trim ( ) ) ; return loc0 ; }",
        "public static Set < String > words_in_sentence ( List < String > arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "public static Set < String > words_in_sentence ( ) { Set < String > loc0 = new HashSet < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; String [ ] loc1 = { \"srini_string\" } ; return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. toLowerCase ( ) ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1. trim ( ) ) ; } return loc0 ; }",
        "public static List < String > words_in_sentence ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }"
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator / denom == (int) (numerator / denom)) \n        return true;\n    return false;\n}",
      "target": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (1.0 * numerator / denom == (int) (numerator / denom)) \n        return true;\n    return false;\n}",
      "function range": "15,5-26,5",
      "raw_output": [
        "boolean function ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof SimpleNumber ) { SimpleNumber loc0 = ( SimpleNumber ) arg0 ; return ( loc0. longValue ( ) == 1 || loc0. longValue ( ) == 1 ) ; } return arg0 instanceof SimpleNumber ; }",
        "boolean function ( X arg0, N arg1 ) { if ( arg0 == arg1 ) { return true ; } else { if ( arg0 == arg1 ) { return true ; } else { return false ; } } }",
        "boolean function ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof SimpleNumber ) { SimpleNumber loc0 = ( SimpleNumber ) arg0 ; return ( loc0. longValue ( ) == 1 || loc0. longValue ( ) == 1 ) ; } else { return true ; } }",
        "boolean function ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof SimpleNumber ) { SimpleNumber loc0 = ( SimpleNumber ) arg0 ; return ( loc0. longValue ( ) == 1 || loc0. longValue ( ) == 1 ) ; } return true ; }",
        "boolean function ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof SimpleNumber ) { SimpleNumber loc0 = ( SimpleNumber ) arg0 ; return ( loc0. compareTo ( \"srini_string\" ) == 0 ) ; } else { return true ; } }",
        "R function ( R arg0, N arg1 ) { R loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "R function ( R arg0, N arg1 ) { R loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 = loc0. add ( arg1. get ( loc1 ) ) ; return loc0 ; }",
        "R function ( R arg0 ) { R loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = loc0. add ( loc1 ) ; } return loc0 ; }",
        "R function ( R arg0 ) { R loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 = loc0. add ( arg0. get ( loc1 ) ) ; return loc0 ; }",
        "R function ( R arg0 ) { R loc0 = arg0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = loc0. add ( loc1 ) ; } return loc0 ; }",
        "boolean function ( N arg0 ) { return arg0 == null || arg0. getClass ( ) == N. class ; }",
        "boolean function ( X arg0 ) { if ( arg0 == null ) return false ; return arg0. getClass ( ). getName ( ). equals ( \"srini_string\" ) ; }",
        "boolean function ( X arg0 ) { if ( arg0 == null ) return false ; return arg0. getClass ( ). getSimpleName ( ). equals ( \"srini_string\" ) ; }",
        "boolean function ( N arg0 ) { if ( arg0 == null ) { return false ; } return arg0. getClass ( ) == N. class ; }",
        "boolean function ( X arg0 ) { if ( arg0 == null ) return false ; return arg0. getClass ( ). getSimpleName ( ). compareTo ( \"srini_string\" ) >= 0 ; }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = arg0 / arg1 ; double loc1 = arg1 / ( arg1 + 1 ) ; if ( loc0 == loc1 ) { return true ; } else if ( loc0 == loc1 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = arg0 / arg1 ; double loc1 = arg1 / ( arg1 + 1 ) ; return ( loc0 * loc0 ) / loc1 ; }",
        "boolean function ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( double arg0, double arg1 ) { double loc0 = arg0 / arg1 ; double loc1 = arg1 / ( arg1 + 1 ) ; if ( loc0 == loc1 ) { return true ; } else if ( loc0 == loc1 ) { return false ; } else { return true ; } }",
        "boolean function ( N arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0. compareTo ( \"srini_string\" ) == 0 || arg0. compareTo ( \"srini_string\" ) == 0 || arg0. compareTo ( \"srini_string\" ) == 0 ) { return true ; } return false ; }",
        "boolean function ( N arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0. compareTo ( \"srini_string\" ) == 0 || arg0. compareTo ( \"srini_string\" ) == 0 ) { return true ; } return false ; }",
        "boolean function ( N arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0. compareTo ( \"srini_string\" ) == 0 || arg0. compareTo ( \"srini_string\" ) == 0 ) { return true ; } else { return false ; } }",
        "boolean function ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0. doubleValue ( ) == 1 || arg0. doubleValue ( ) == 2 || arg0. doubleValue ( ) == 3 || arg0. doubleValue ( ) == 4 ) { return true ; } else { return false ; } }",
        "boolean function ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0. doubleValue ( ) == 1 || arg0. doubleValue ( ) == 2 || arg0. doubleValue ( ) == 3 || arg0. doubleValue ( ) == 4 ) { return true ; } return false ; }"
      ],
      "mid_translation": [
        "Returns true if x is simplified to n.",
        "Simplify x and n.",
        "Returns true if x is simplify to n.",
        "Returns true if x and n are simplified.",
        "Returns true if x is simplified by n."
      ],
      "output": [
        "public static boolean simplify ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof SimpleNumber ) { SimpleNumber loc0 = ( SimpleNumber ) arg0 ; return ( loc0. longValue ( ) == 1 || loc0. longValue ( ) == 1 ) ; } return arg0 instanceof SimpleNumber ; }",
        "public static boolean simplify ( X arg0, N arg1 ) { if ( arg0 == arg1 ) { return true ; } else { if ( arg0 == arg1 ) { return true ; } else { return false ; } } }",
        "public static boolean simplify ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof SimpleNumber ) { SimpleNumber loc0 = ( SimpleNumber ) arg0 ; return ( loc0. longValue ( ) == 1 || loc0. longValue ( ) == 1 ) ; } else { return true ; } }",
        "public static boolean simplify ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof SimpleNumber ) { SimpleNumber loc0 = ( SimpleNumber ) arg0 ; return ( loc0. longValue ( ) == 1 || loc0. longValue ( ) == 1 ) ; } return true ; }",
        "public static boolean simplify ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof SimpleNumber ) { SimpleNumber loc0 = ( SimpleNumber ) arg0 ; return ( loc0. compareTo ( \"srini_string\" ) == 0 ) ; } else { return true ; } }",
        "public static R simplify ( R arg0, N arg1 ) { R loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = loc0. add ( arg1. get ( loc1 ) ) ; } return loc0 ; }",
        "public static R simplify ( R arg0, N arg1 ) { R loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 = loc0. add ( arg1. get ( loc1 ) ) ; return loc0 ; }",
        "public static R simplify ( R arg0 ) { R loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static R simplify ( R arg0 ) { R loc0 = arg0 ; for ( int loc1 = 1 ; loc1 < arg0. length ( ) ; loc1 ++ ) loc0 = loc0. add ( arg0. get ( loc1 ) ) ; return loc0 ; }",
        "public static R simplify ( R arg0 ) { R loc0 = arg0 ; for ( int loc1 = 0 ; loc1 < arg0. length ( ) ; loc1 ++ ) { loc0 = loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static boolean simplify ( N arg0 ) { return arg0 == null || arg0. getClass ( ) == N. class ; }",
        "public static boolean simplify ( X arg0 ) { if ( arg0 == null ) return false ; return arg0. getClass ( ). getName ( ). equals ( \"srini_string\" ) ; }",
        "public static boolean simplify ( X arg0 ) { if ( arg0 == null ) return false ; return arg0. getClass ( ). getSimpleName ( ). equals ( \"srini_string\" ) ; }",
        "public static boolean simplify ( N arg0 ) { if ( arg0 == null ) { return false ; } return arg0. getClass ( ) == N. class ; }",
        "public static boolean simplify ( X arg0 ) { if ( arg0 == null ) return false ; return arg0. getClass ( ). getSimpleName ( ). compareTo ( \"srini_string\" ) >= 0 ; }",
        "public static boolean simplify ( double arg0, double arg1 ) { double loc0 = arg0 / arg1 ; double loc1 = arg1 / ( arg1 + 1 ) ; if ( loc0 == loc1 ) { return true ; } else if ( loc0 == loc1 ) { return true ; } else { return false ; } }",
        "public static boolean simplify ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean simplify ( double arg0, double arg1 ) { double loc0 = arg0 / arg1 ; double loc1 = arg1 / ( arg1 + 1 ) ; return ( loc0 * loc0 ) / loc1 ; }",
        "public static boolean simplify ( double arg0, double arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg0 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean simplify ( double arg0, double arg1 ) { double loc0 = arg0 / arg1 ; double loc1 = arg1 / ( arg1 + 1 ) ; if ( loc0 == loc1 ) { return true ; } else if ( loc0 == loc1 ) { return false ; } else { return true ; } }",
        "public static boolean simplify ( N arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0. compareTo ( \"srini_string\" ) == 0 || arg0. compareTo ( \"srini_string\" ) == 0 || arg0. compareTo ( \"srini_string\" ) == 0 ) { return true ; } return false ; }",
        "public static boolean simplify ( N arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0. compareTo ( \"srini_string\" ) == 0 || arg0. compareTo ( \"srini_string\" ) == 0 ) { return true ; } return false ; }",
        "public static boolean simplify ( N arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0. compareTo ( \"srini_string\" ) == 0 || arg0. compareTo ( \"srini_string\" ) == 0 ) { return true ; } else { return false ; } }",
        "public static boolean simplify ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0. doubleValue ( ) == 1 || arg0. doubleValue ( ) == 2 || arg0. doubleValue ( ) == 3 || arg0. doubleValue ( ) == 4 ) { return true ; } else { return false ; } }",
        "public static boolean simplify ( Number arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0. doubleValue ( ) == 1 || arg0. doubleValue ( ) == 2 || arg0. doubleValue ( ) == 3 || arg0. doubleValue ( ) == 4 ) { return true ; } return false ; }"
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg; \n        } \n        digits.add(digit); \n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
      "target": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            if (j == 0) \n                digit += ((n + \"\").toCharArray()[j] - '0') * neg; \n            else  \n                digit += (n + \"\").toCharArray()[j] - '0';\n        }\n        if (! digits.contains(digit))\n            digits.add(digit);\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
      "function range": "17,5-44,5",
      "raw_output": [
        "List < Point > function ( List < Point > arg0 ) { List < Point > loc0 = new ArrayList < Point > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Point > ( ) { public int compare ( Point arg1, Point arg2 ) { return loc0. size ( ) ; } } ) ; return loc0 ; }",
        "List < Point > function ( List < Point > arg0 ) { Collections. sort ( arg0, new Comparator < Point > ( ) { public int compare ( Point arg1, Point arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return arg0 ; }",
        "List < Point > function ( List < Point > arg0 ) { List < Point > loc0 = new ArrayList < Point > ( ) ; Collections. sort ( arg0, new Comparator < Point > ( ) { public int compare ( Point arg1, Point arg2 ) { return loc0. compareTo ( arg1 ) ; } } ) ; return loc0 ; }",
        "List < Point > function ( List < Point > arg0, Point arg1 ) { List < Point > loc0 = new ArrayList < Point > ( ) ; for ( Point loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Point > function ( List < Point > arg0 ) { List < Point > loc0 = new ArrayList < Point > ( ) ; Collections. sort ( arg0, new Comparator < Point > ( ) { public int compare ( Point arg1, Point arg2 ) { return loc0. size ( ) ; } } ) ; return loc0 ; }",
        "int function ( T arg0, T arg1 ) { if ( arg0 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "int function ( T arg0, T arg1 ) { return arg0. compareTo ( arg1 ) ; }",
        "int function ( T arg0, T arg1 ) { if ( arg0 == null ) { return 0 ; } if ( arg1 == null ) { return - 1 ; } return arg0. compareTo ( arg1 ) ; }",
        "int function ( T arg0, T arg1 ) { if ( arg0 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else { return arg1. compareTo ( arg0 ) ; } }",
        "int function ( T arg0, T arg1 ) { if ( arg0 == null ) { return 0 ; } int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 < 0 ) { loc0 = - 1 ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return arg0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 = loc1 ; } } return arg0 ; }",
        "int function ( Point [ ] arg0 ) { int loc0 = 0 ; for ( Point loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1. compareTo ( loc1 ) ; } } return loc0 ; }",
        "int function ( Point [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( Point [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( Point [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) ; if ( loc2 < 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Point [ ] arg0 ) { int loc0 = 0 ; for ( Point loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1. compareTo ( arg0 [ loc0 ] ) ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; Collections. sort ( arg0, new Comparator < Integer > ( ) { @ Override public int compare ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 - 1 ] < arg0 [ loc1 ] ) { loc1 ++ ; } } return loc1 ; }"
      ],
      "mid_translation": [
        "Method order_by_points.",
        "Order by points.",
        "Order by points in an array of integers.",
        "order_by_points Method.",
        "Order by points in the array of integers."
      ],
      "output": [
        "public static int order_by_points ( Point arg1, Point arg2 ) { return loc0. size ( ) ; } } ) ; return loc0 ; }",
        "public static int order_by_points ( Point arg1, Point arg2 ) { return arg1. compareTo ( arg2 ) ; } } ) ; return arg0 ; }",
        "public static int order_by_points ( Point arg1, Point arg2 ) { return loc0. compareTo ( arg1 ) ; } } ) ; return loc0 ; }",
        "public static List < Point > order_by_points ( List < Point > arg0, Point arg1 ) { List < Point > loc0 = new ArrayList < Point > ( ) ; for ( Point loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static int order_by_points ( Point arg1, Point arg2 ) { return loc0. size ( ) ; } } ) ; return loc0 ; }",
        "public static int order_by_points ( T arg0, T arg1 ) { if ( arg0 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else { return arg0. compareTo ( arg1 ) ; } }",
        "public static int order_by_points ( T arg0, T arg1 ) { return arg0. compareTo ( arg1 ) ; }",
        "public static int order_by_points ( T arg0, T arg1 ) { if ( arg0 == null ) { return 0 ; } if ( arg1 == null ) { return - 1 ; } return arg0. compareTo ( arg1 ) ; }",
        "public static int order_by_points ( T arg0, T arg1 ) { if ( arg0 == null ) { return 0 ; } else if ( arg1 == null ) { return - 1 ; } else { return arg1. compareTo ( arg0 ) ; } }",
        "public static int order_by_points ( T arg0, T arg1 ) { if ( arg0 == null ) { return 0 ; } int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 < 0 ) { loc0 = - 1 ; } return loc0 ; }",
        "public static int [ ] order_by_points ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return arg0 ; }",
        "public static int [ ] order_by_points ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return arg0 ; }",
        "public static int [ ] order_by_points ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return arg0 ; }",
        "public static int [ ] order_by_points ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 = loc1 ; } } return arg0 ; }",
        "public static int [ ] order_by_points ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 = loc1 ; } } return arg0 ; }",
        "public static int order_by_points ( Point [ ] arg0 ) { int loc0 = 0 ; for ( Point loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1. compareTo ( loc1 ) ; } } return loc0 ; }",
        "public static int order_by_points ( Point [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }",
        "public static int order_by_points ( Point [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int order_by_points ( Point [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) ; if ( loc2 < 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int order_by_points ( Point [ ] arg0 ) { int loc0 = 0 ; for ( Point loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1. compareTo ( arg0 [ loc0 ] ) ; } } return loc0 ; }",
        "public static int order_by_points ( int arg1, int arg2 ) { return arg1 - arg2 ; } } ) ; return loc0 ; }",
        "public static int order_by_points ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }",
        "public static int order_by_points ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; }",
        "public static int order_by_points ( int [ ] arg0 ) { int loc0 = arg0. length ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 - 1 ] < arg0 [ loc0 - 1 ] ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int order_by_points ( int [ ] arg0 ) { int loc0 = arg0. length ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 - 1 ] < arg0 [ loc1 ] ) { loc1 ++ ; } } return loc1 ; }"
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            if (odd_digits.contains(number_as_string.charAt(0)) \n                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) \n                count += 1;\n        }\n    }\n    return count;\n}",
      "target": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            if (odd_digits.contains(number_as_string.charAt(0) - '0') \n                    && odd_digits.contains(number_as_string.charAt(number_as_string.length() - 1) - '0')) \n                count += 1;\n        }\n    }\n    return count;\n}",
      "function range": "14,5-26,5",
      "raw_output": [
        "Filter function ( ) { return new SpecialFilter ( ) ; }",
        "Filter function ( ) { return new Special_filter ( ) ; }",
        "Filter function ( Map arg0 ) { return filter ( arg0, null ) ; }",
        "Filter function ( ) { return new Filter ( ) ; }",
        "Filter function ( ) { return new MyFilter ( ) ; }",
        "void function ( HttpServletRequest arg0, HttpServletResponse arg1 ) { arg1. setContentType ( \"srini_string\" ) ; arg1. setContentLength ( 0 ) ; arg1. setContentType ( \"srini_string\" ) ; }",
        "void function ( HttpServletRequest arg0, HttpServletResponse arg1 ) { arg1. setContentType ( \"srini_string\" ) ; arg1. setContentType ( \"srini_string\" ) ; arg1. setContentType ( \"srini_string\" ) ; }",
        "Filter function ( final String arg0, final String arg1 ) { return new SimpleTimePeriod ( arg0, arg1 ) ; }",
        "void function ( HttpServletRequest arg0, HttpServletResponse arg1 ) { arg1. setContentType ( \"srini_string\" ) ; arg1. setContentType ( \"srini_string\" ) ; arg1. setContentLength ( 0 ) ; }",
        "void function ( ServletRequest arg0, ServletResponse arg1 ) { arg1. setContentType ( \"srini_string\" ) ; arg0. getWriter ( ). write ( \"srini_string\" ) ; }",
        "int function ( Number [ ] arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { if ( loc1!= null ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( Number [ ] arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1. intValue ( ) ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( Number [ ] arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { if ( ( loc1!= null ) && ( loc1 instanceof Number ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( ) { return 0 ; }",
        "int function ( ) { throw new UnsupportedOperationException ( \"srini_string\" ) ; }",
        "int function ( ) { return 9 ; }",
        "int function ( ) { String loc0 = \"srini_string\" ; return loc0. length ( ) ; }",
        "int function ( ) { throw new UnsupportedOperationException ( \"srini_string\" + \"srini_string\" ) ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( ( arg0 [ loc1 ] < 0 ) || ( arg0 [ loc1 ] > 0x7F ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( int arg0 [ ] ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Method special_filter.",
        "Special filter method.",
        "special_filter This method returns the number of special numbers.",
        "This method returns the number of special numbers.",
        "This method returns the number of special numbers in an array."
      ],
      "output": [
        "public static Filter special_filter ( ) { return new SpecialFilter ( ) ; }",
        "public static Filter special_filter ( ) { return new Special_filter ( ) ; }",
        "public static Filter special_filter ( Map arg0 ) { return filter ( arg0, null ) ; }",
        "public static Filter special_filter ( ) { return new Filter ( ) ; }",
        "public static Filter special_filter ( ) { return new MyFilter ( ) ; }",
        "public static void special_filter ( HttpServletRequest arg0, HttpServletResponse arg1 ) { arg1. setContentType ( \"srini_string\" ) ; arg1. setContentLength ( 0 ) ; arg1. setContentType ( \"srini_string\" ) ; }",
        "public static void special_filter ( HttpServletRequest arg0, HttpServletResponse arg1 ) { arg1. setContentType ( \"srini_string\" ) ; arg1. setContentType ( \"srini_string\" ) ; arg1. setContentType ( \"srini_string\" ) ; }",
        "public static Filter special_filter ( final String arg0, final String arg1 ) { return new SimpleTimePeriod ( arg0, arg1 ) ; }",
        "public static void special_filter ( HttpServletRequest arg0, HttpServletResponse arg1 ) { arg1. setContentType ( \"srini_string\" ) ; arg1. setContentType ( \"srini_string\" ) ; arg1. setContentLength ( 0 ) ; }",
        "public static void special_filter ( ServletRequest arg0, ServletResponse arg1 ) { arg1. setContentType ( \"srini_string\" ) ; arg0. getWriter ( ). write ( \"srini_string\" ) ; }",
        "public static int special_filter ( Number [ ] arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { if ( loc1!= null ) { loc0 ++ ; } } return loc0 ; }",
        "public static int special_filter ( Number [ ] arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { if ( loc1!= null ) { loc0 = loc1. intValue ( ) ; } } return loc0 ; }",
        "public static int special_filter ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int special_filter ( Number [ ] arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { if ( ( loc1!= null ) && ( loc1 instanceof Number ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int special_filter ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int special_filter ( ) { return 0 ; }",
        "public static int special_filter ( ) { throw new UnsupportedOperationException ( \"srini_string\" ) ; }",
        "public static int special_filter ( ) { return 9 ; }",
        "public static int special_filter ( ) { String loc0 = \"srini_string\" ; return loc0. length ( ) ; }",
        "public static int special_filter ( ) { throw new UnsupportedOperationException ( \"srini_string\" + \"srini_string\" ) ; }",
        "public static int special_filter ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int special_filter ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( ( arg0 [ loc1 ] < 0 ) || ( arg0 [ loc1 ] > 0x7F ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int special_filter ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }",
        "public static int special_filter ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int special_filter ( int arg0 [ ] ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { loc0 ++ ; } } return loc0 ; }"
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 0; i < n-2; i += 1) { \n        for (int j = 0; j < n-1; j += 1) { \n            for (int k = 0; k < n; k += 1) { \n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "target": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 0; i < n-2; i += 1) { \n        for (int j = i + 1; j < n-1; j += 1) { \n            for (int k = j + 1; k < n; k += 1) { \n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "16,5-30,5",
      "raw_output": [
        "int function ( ) { return 10 ; }",
        "int function ( ) { return 5 ; }",
        "int function ( ) { return 1 ; }",
        "int function ( ) { return 3 ; }",
        "int function ( ) { return 50 ; }",
        "int function ( ) { return triples. size ( ) ; }",
        "int function ( ) { return 3 ; }",
        "int function ( ) { return 10 ; }",
        "int function ( ) { return 5 ; }",
        "int function ( ) { return 30 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. get_triples ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get_triples ( loc1 ). size ( ) ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). getTriples ( ) ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). toString ( ) ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). getTriangleCount ( ) ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. getTriples ( ). size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( arg0. getTriples ( ) [ loc1 ] ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). triples ( ). size ( ) ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). getTriples ( ) ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). getTriangleCount ( ) ) ; } return loc0 ; }",
        "int function ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ]. toString ( ) ) ; } return loc0 ; }",
        "int function ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 = ( loc0 + 1 ) % arg0 ; } return loc0 ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 = ( loc0 + 1 ) / arg0 ; } return loc0 ; }",
        "int function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 * get_max_triples ( 1 ) ; }",
        "int function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 * get_max_triples ( 1 ) ; }",
        "int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 = ( loc0 + 1 ) / arg0 ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Get the maximum number of triples.",
        "Get the number of max triples.",
        "get_max_triples This method returns the number of max triples in a sequence of n.",
        "get_max_triples This method returns the maximum number of triples in a sequence of n.",
        "get_max_triples This method returns the maximum number of triples in a given number of grams."
      ],
      "output": [
        "public static int get_max_triples ( ) { return 10 ; }",
        "public static int get_max_triples ( ) { return 5 ; }",
        "public static int get_max_triples ( ) { return 1 ; }",
        "public static int get_max_triples ( ) { return 3 ; }",
        "public static int get_max_triples ( ) { return 50 ; }",
        "public static int get_max_triples ( ) { return triples. size ( ) ; }",
        "public static int get_max_triples ( ) { return 3 ; }",
        "public static int get_max_triples ( ) { return 10 ; }",
        "public static int get_max_triples ( ) { return 5 ; }",
        "public static int get_max_triples ( ) { return 30 ; }",
        "public static int get_max_triples ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. get_triples ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get_triples ( loc1 ). size ( ) ) ; } return loc0 ; }",
        "public static int get_max_triples ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). getTriples ( ) ) ; } return loc0 ; }",
        "public static int get_max_triples ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). toString ( ) ) ; } return loc0 ; }",
        "public static int get_max_triples ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). getTriangleCount ( ) ) ; } return loc0 ; }",
        "public static int get_max_triples ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. getTriples ( ). size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( arg0. getTriples ( ) [ loc1 ] ) ; } return loc0 ; }",
        "public static int get_max_triples ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). triples ( ). size ( ) ) ; } return loc0 ; }",
        "public static int get_max_triples ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). getTriples ( ) ) ; } return loc0 ; }",
        "public static int get_max_triples ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ). getTriangleCount ( ) ) ; } return loc0 ; }",
        "public static int get_max_triples ( Integer [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0 [ loc1 ]. toString ( ) ) ; } return loc0 ; }",
        "public static int get_max_triples ( N arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = Math. loc0 ( loc0, arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static int get_max_triples ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 = ( loc0 + 1 ) % arg0 ; } return loc0 ; }",
        "public static int get_max_triples ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 = ( loc0 + 1 ) / arg0 ; } return loc0 ; }",
        "public static int get_max_triples ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 * get_max_triples ( 1 ) ; }",
        "public static int get_max_triples ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return arg0 * get_max_triples ( 1 ) ; }",
        "public static int get_max_triples ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 = ( loc0 + 1 ) / arg0 ; } return loc0 ; }"
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i < planet2_index; i += 1) \n        result.add(planet_names.get(i)); \n    return result;\n}",
      "target": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index < planet2_index) { \n        for (int i = planet1_index + 1; i < planet2_index; i += 1) \n            result.add(planet_names.get(i));\n    } else {\n        for (int i = planet2_index + 1; i < planet1_index; i += 1)\n            result.add(planet_names.get(i));\n    }\n    return result;\n}",
      "function range": "21,5-34,5",
      "raw_output": [
        "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "List < String > function ( Planet arg0, Planet arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( Planet loc1 : arg0. planets ( ) ) { loc0. add ( loc1. toString ( ) ) ; } return loc0 ; }",
        "ArrayList < String > function ( int arg0, int arg1 ) { ArrayList < String > loc0 = new ArrayList < String > ( ) ; loc0. add ( arg0 ) ; loc0. add ( arg1 ) ; return loc0 ; }",
        "List < String > function ( Planets arg0, Planets arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( Planet loc1 : arg0 ) { loc0. add ( loc1. getClass ( ). getName ( ) ) ; } return loc0 ; }",
        "List < String > function ( Planets arg0, Planets arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( Planet loc1 : arg0 ) { loc0. add ( loc1. getClass ( ). getName ( ) ) ; } return loc0 ; }",
        "List < String > function ( Planets arg0, Planets arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( Planets loc1 : arg0 ) { loc0. add ( loc1. getClass ( ). getName ( ) ) ; } return loc0 ; }",
        "List < String > function ( Planet arg0, Planet arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; loc0. addAll ( arg0. getClassNames ( ) ) ; loc0. addAll ( arg1. getClassNames ( ) ) ; return loc0 ; }",
        "List < String > function ( Planets arg0, Planets arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; loc0. addAll ( arg0. getClassNames ( ) ) ; loc0. addAll ( arg1. getClassNames ( ) ) ; return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = new String [ 2 ] ; loc0 [ 0 ] = \"srini_string\" ; loc0 [ 1 ] = \"srini_string\" ; loc0 [ 2 ] = \"srini_string\" ; loc0 [ 3 ] = \"srini_string\" ; loc0 [ 4 ] = \"srini_string\" ; return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "List < String > function ( String arg0, String arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } return loc0 ; }",
        "List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "List < String > function ( String arg0, String arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { String loc3 = loc1 [ loc2 ] ; loc0. add ( loc3 ) ; } return loc0 ; }",
        "List < String > function ( String arg0, String arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ] ) ; } return loc0 ; }",
        "List < String > function ( String arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "This method returns a list of strings for the two planets.",
        "This method returns a list of class names for the two given planets.",
        "This method returns a list of strings for the two planets",
        "This method returns a list of the names of the two images.",
        "This method returns a list of all the names of the two images in a single file."
      ],
      "output": [
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "public static List < String > bf ( Planet arg0, Planet arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( Planet loc1 : arg0. planets ( ) ) { loc0. add ( loc1. toString ( ) ) ; } return loc0 ; }",
        "public static ArrayList < String > bf ( int arg0, int arg1 ) { ArrayList < String > loc0 = new ArrayList < String > ( ) ; loc0. add ( arg0 ) ; loc0. add ( arg1 ) ; return loc0 ; }",
        "public static List < String > bf ( Planets arg0, Planets arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( Planet loc1 : arg0 ) { loc0. add ( loc1. getClass ( ). getName ( ) ) ; } return loc0 ; }",
        "public static List < String > bf ( Planets arg0, Planets arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( Planet loc1 : arg0 ) { loc0. add ( loc1. getClass ( ). getName ( ) ) ; } return loc0 ; }",
        "public static List < String > bf ( Planets arg0, Planets arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; for ( Planets loc1 : arg0 ) { loc0. add ( loc1. getClass ( ). getName ( ) ) ; } return loc0 ; }",
        "public static List < String > bf ( Planet arg0, Planet arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; loc0. addAll ( arg0. getClassNames ( ) ) ; loc0. addAll ( arg1. getClassNames ( ) ) ; return loc0 ; }",
        "public static List < String > bf ( Planets arg0, Planets arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; loc0. addAll ( arg0. getClassNames ( ) ) ; loc0. addAll ( arg1. getClassNames ( ) ) ; return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0 = new ArrayList < String > ( ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; loc0. add ( \"srini_string\" ) ; return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = new String [ 2 ] ; loc0 [ 0 ] = \"srini_string\" ; loc0 [ 1 ] = \"srini_string\" ; loc0 [ 2 ] = \"srini_string\" ; loc0 [ 3 ] = \"srini_string\" ; loc0 [ 4 ] = \"srini_string\" ; return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "public static List < String > bf ( String arg0, String arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } return loc0 ; }",
        "public static List < String > bf ( ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = { \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\", \"srini_string\" } ; return loc0 ; }",
        "public static List < String > bf ( String arg0, String arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { String loc3 = loc1 [ loc2 ] ; loc0. add ( loc3 ) ; } return loc0 ; }",
        "public static List < String > bf ( String arg0, String arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( int loc2 = 0 ; loc2 < loc1. length ; loc2 ++ ) { loc0. add ( loc1 [ loc2 ] ) ; } return loc0 ; }",
        "public static List < String > bf ( String arg0, String arg1 ) { List < String > loc0 = new ArrayList < > ( ) ; String [ ] loc1 = arg0. split ( \"srini_string\" ) ; for ( String loc2 : loc1 ) { loc0. add ( loc2 ) ; } return loc0 ; }"
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> s1.length() - s2.length() \n    );\n    return result;\n}",
      "target": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> { \n            if (s1.length() == s2.length()) return s1.compareTo(s2);\n            return s1.length() - s2.length();\n        }\n    );\n    return result;\n}",
      "function range": "21,5-34,5",
      "raw_output": [
        "int function ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) loc0 ++ ; else if ( arg0 [ loc1 ] > arg0 [ loc0 - 1 ] ) loc0 ++ ; } return loc0 ; }",
        "int function ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) loc0 ++ ; else if ( arg0 [ loc1 ] > arg0 [ loc0 - 1 ] ) loc0 ++ ; } return loc0 ; } return - 1 ; }",
        "int function ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; } catch ( Exception loc1 ) { loc1. printStackTrace ( ) ; } return - 1 ; }",
        "int function ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; } catch ( Exception loc1 ) { loc1. printStackTrace ( ) ; } return 0 ; }",
        "long function ( T [ ] arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "List < E > function ( List <? extends E > arg0 ) { return arg0. stream ( ). sorted ( ( e1, e2 ) -> e1. compareTo ( e2 ) ) ; }",
        "List < E > function ( List <? extends E > arg0 ) { return arg0. stream ( ). sorted ( ( e1, e2 ) -> e1. getKey ( ). compareTo ( e2. getKey ( ) ) ) ; }",
        "List < E > function ( List <? extends E > arg0 ) { return arg0. stream ( ). sorted ( e -> e. getKey ( ). compareTo ( e. getKey ( ) ) ) ; }",
        "List function ( List <? extends E > arg0 ) { return arg0. stream ( ). sorted ( ( e1, e2 ) -> e1. compareTo ( e2 ) ) ; }",
        "List < E > function ( List <? extends E > arg0 ) { return arg0. stream ( ). sorted ( e -> e. compareTo ( e. compareTo ( e. compareTo ( e ) ) ) ) ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; Iterator < String > loc1 = arg0. loc1 ( ) ; while ( loc1. hasNext ( ) ) { loc0 += loc1. next ( ) ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1. compareTo ( loc1 ) ; } return loc0 ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ]. hashCode ( ) ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "List < T > function ( T... arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "List < T > function ( T... arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < T > function ( T... arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0. length ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "List < Integer > function ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = arg0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "int function ( String... arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1. hashCode ( ) ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1. hashCode ( ) ; } return loc0 ; }",
        "int function ( String... arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1. compareTo ( loc1 ) ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int function ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1. compareTo ( loc1 ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "sorted_list_sum.",
        "Sorted list sum.",
        "Returns sorted list sum of strings.",
        "sorted_list_sum",
        "Sorted list sum of strings."
      ],
      "output": [
        "public static int sorted_list_sum ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) loc0 ++ ; else if ( arg0 [ loc1 ] > arg0 [ loc0 - 1 ] ) loc0 ++ ; } return loc0 ; }",
        "public static int sorted_list_sum ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) loc0 ++ ; else if ( arg0 [ loc1 ] > arg0 [ loc0 - 1 ] ) loc0 ++ ; } return loc0 ; } return - 1 ; }",
        "public static int sorted_list_sum ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; } catch ( Exception loc1 ) { loc1. printStackTrace ( ) ; } return - 1 ; }",
        "public static int sorted_list_sum ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg0 [ loc0 ] ) { loc0 ++ ; } } return loc0 ; } catch ( Exception loc1 ) { loc1. printStackTrace ( ) ; } return 0 ; }",
        "public static long sorted_list_sum ( T [ ] arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static List < E > sorted_list_sum ( List <? extends E > arg0 ) { return arg0. stream ( ). sorted ( ( e1, e2 ) -> e1. compareTo ( e2 ) ) ; }",
        "public static List < E > sorted_list_sum ( List <? extends E > arg0 ) { return arg0. stream ( ). sorted ( ( e1, e2 ) -> e1. getKey ( ). compareTo ( e2. getKey ( ) ) ) ; }",
        "public static List < E > sorted_list_sum ( List <? extends E > arg0 ) { return arg0. stream ( ). sorted ( e -> e. getKey ( ). compareTo ( e. getKey ( ) ) ) ; }",
        "public static List sorted_list_sum ( List <? extends E > arg0 ) { return arg0. stream ( ). sorted ( ( e1, e2 ) -> e1. compareTo ( e2 ) ) ; }",
        "public static List < E > sorted_list_sum ( List <? extends E > arg0 ) { return arg0. stream ( ). sorted ( e -> e. compareTo ( e. compareTo ( e. compareTo ( e ) ) ) ) ; }",
        "public static int sorted_list_sum ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int sorted_list_sum ( List < String > arg0 ) { int loc0 = 0 ; Iterator < String > loc1 = arg0. loc1 ( ) ; while ( loc1. hasNext ( ) ) { loc0 += loc1. next ( ) ; } return loc0 ; }",
        "public static int sorted_list_sum ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1. compareTo ( loc1 ) ; } return loc0 ; }",
        "public static int sorted_list_sum ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ]. hashCode ( ) ; } return loc0 ; }",
        "public static int sorted_list_sum ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static List < T > sorted_list_sum ( T... arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "public static List < T > sorted_list_sum ( T... arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( T loc1 : arg0 ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < T > sorted_list_sum ( T... arg0 ) { List < T > loc0 = new ArrayList < T > ( arg0. length ) ; Collections. sort ( loc0, new Comparator < T > ( ) ) ; return loc0 ; }",
        "public static List < Integer > sorted_list_sum ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = arg0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > sorted_list_sum ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < > ( arg0 ) ; Collections. sort ( loc0, new Comparator < Integer > ( ) ) ; return loc0 ; }",
        "public static int sorted_list_sum ( String... arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1. hashCode ( ) ; } return loc0 ; }",
        "public static int sorted_list_sum ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1. hashCode ( ) ; } return loc0 ; }",
        "public static int sorted_list_sum ( String... arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1. compareTo ( loc1 ) ; } return loc0 ; }",
        "public static int sorted_list_sum ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int sorted_list_sum ( List < String > arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { loc0 += loc1. compareTo ( loc1 ) ; } return loc0 ; }"
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x; \n    } \n    return y; \n}",
      "target": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return y; \n    } \n    return x; \n}",
      "function range": "11,5-17,5",
      "raw_output": [
        "T function ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg0 == null ) { return arg1 ; } else { return arg0. or ( arg1 ) ; } }",
        "T function ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg0 == null ) { return arg1 ; } else { return arg0. xor ( arg1 ) ; } }",
        "R function ( R arg0, R arg1 ) { R loc0 = arg0 ; R loc1 = arg1 ; if ( loc0 == null ) { loc0 = arg0 ; } else if ( loc0 == null ) { loc1 = arg1 ; } else { loc1 = loc0. or ( arg0 ) ; } return loc1 ; }",
        "R function ( R arg0, R arg1 ) { R loc0 = arg0 ; R loc1 = arg1 ; if ( loc0 == null ) { loc0 = arg1 ; } else if ( loc0 == null ) { loc1 = arg1 ; } else { loc1 = loc0. or ( arg0 ) ; } return loc1 ; }",
        "T function ( T arg0, T arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } if ( arg1 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return arg0 ; }",
        "R function ( R arg0 ) { R loc0 = arg0 ; R loc1 = arg0. or ( arg0 ) ; R loc2 = arg0. or ( arg0 ) ; return new R ( loc0, loc1, loc2 ) ; }",
        "R function ( R arg0 ) { R loc0 = arg0 ; if ( loc0 instanceof Or ) loc0 = ( Or ) loc0 ; else loc0 = ( Or ) loc0 ; return new R ( loc0 ) ; }",
        "R function ( R arg0 ) { R loc0 = arg0 ; if ( loc0 instanceof Or ) loc0 = ( Or ) loc0 ; return new R ( loc0 ) ; }",
        "R function ( R arg0 ) { R loc0 = arg0 ; arg0 = arg0. or ( ) ; arg0 = arg0. or ( ) ; return loc0 ; }",
        "R function ( R arg0 ) { R loc0 = arg0 ; arg0 = ( arg0 instanceof Or )? arg0 : arg0 ; return new R ( loc0 ) ; }",
        "T function ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg0 == null ) { return arg1 ; } else { return arg0. xor ( arg1 ) ; } }",
        "T function ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg1 == null ) { return arg0 ; } else { return arg0. xor ( arg1 ) ; } }",
        "T function ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg0 == null ) { return arg1 ; } else { return arg0. or ( arg1 ) ; } }",
        "T function ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg1 == null ) { return arg0 ; } else { return arg0. or ( arg1 ) ; } }",
        "T function ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg0 == null ) { return arg1 ; } else { return arg0. OR ( arg1 ) ; } }",
        "int function ( ) { return 0 ; }",
        "T function ( T arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return arg0 ; }",
        "double function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( double ) arg0 ; }",
        "double function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Double. valueOf ( arg0 ) ; }",
        "T function ( ) { return ( T ) this ; }",
        "T function ( T arg0 ) { return arg0 ; }",
        "T function ( T arg0 ) { return arg0 == null? null : arg0. get ( ) ; }",
        "T function ( T arg0 ) { return arg0 == null? null : arg0. getClass ( ). getName ( ) ; }",
        "T function ( T arg0 ) { return arg0 == null? null : arg0. getClass ( ) ; }",
        "R function ( R arg0 ) { return arg0. x || arg0. y ; }"
      ],
      "mid_translation": [
        "x_or_y returns x or y",
        "x_or_y = x or y",
        "X_or_y returns x or y",
        "Get the x or y value.",
        "returns x or y for n"
      ],
      "output": [
        "public static T x_or_y ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg0 == null ) { return arg1 ; } else { return arg0. or ( arg1 ) ; } }",
        "public static T x_or_y ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg0 == null ) { return arg1 ; } else { return arg0. xor ( arg1 ) ; } }",
        "public static R x_or_y ( R arg0, R arg1 ) { R loc0 = arg0 ; R loc1 = arg1 ; if ( loc0 == null ) { loc0 = arg0 ; } else if ( loc0 == null ) { loc1 = arg1 ; } else { loc1 = loc0. or ( arg0 ) ; } return loc1 ; }",
        "public static R x_or_y ( R arg0, R arg1 ) { R loc0 = arg0 ; R loc1 = arg1 ; if ( loc0 == null ) { loc0 = arg1 ; } else if ( loc0 == null ) { loc1 = arg1 ; } else { loc1 = loc0. or ( arg0 ) ; } return loc1 ; }",
        "public static T x_or_y ( T arg0, T arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } if ( arg1 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return arg0 ; }",
        "public static R x_or_y ( R arg0 ) { R loc0 = arg0 ; R loc1 = arg0. or ( arg0 ) ; R loc2 = arg0. or ( arg0 ) ; return new R ( loc0, loc1, loc2 ) ; }",
        "public static R x_or_y ( R arg0 ) { R loc0 = arg0 ; if ( loc0 instanceof Or ) loc0 = ( Or ) loc0 ; else loc0 = ( Or ) loc0 ; return new R ( loc0 ) ; }",
        "public static R x_or_y ( R arg0 ) { R loc0 = arg0 ; if ( loc0 instanceof Or ) loc0 = ( Or ) loc0 ; return new R ( loc0 ) ; }",
        "public static R x_or_y ( R arg0 ) { R loc0 = arg0 ; arg0 = arg0. or ( ) ; arg0 = arg0. or ( ) ; return loc0 ; }",
        "public static R x_or_y ( R arg0 ) { R loc0 = arg0 ; arg0 = ( arg0 instanceof Or )? arg0 : arg0 ; return new R ( loc0 ) ; }",
        "public static T x_or_y ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg0 == null ) { return arg1 ; } else { return arg0. xor ( arg1 ) ; } }",
        "public static T x_or_y ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg1 == null ) { return arg0 ; } else { return arg0. xor ( arg1 ) ; } }",
        "public static T x_or_y ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg0 == null ) { return arg1 ; } else { return arg0. or ( arg1 ) ; } }",
        "public static T x_or_y ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg1 == null ) { return arg0 ; } else { return arg0. or ( arg1 ) ; } }",
        "public static T x_or_y ( T arg0, T arg1 ) { if ( arg0 == null ) { return arg1 ; } else if ( arg0 == null ) { return arg1 ; } else { return arg0. OR ( arg1 ) ; } }",
        "public static int x_or_y ( ) { return 0 ; }",
        "public static T x_or_y ( T arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } return arg0 ; }",
        "public static double x_or_y ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return ( double ) arg0 ; }",
        "public static double x_or_y ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return Double. valueOf ( arg0 ) ; }",
        "public static T x_or_y ( ) { return ( T ) this ; }",
        "public static T x_or_y ( T arg0 ) { return arg0 ; }",
        "public static T x_or_y ( T arg0 ) { return arg0 == null? null : arg0. get ( ) ; }",
        "public static T x_or_y ( T arg0 ) { return arg0 == null? null : arg0. getClass ( ). getName ( ) ; }",
        "public static T x_or_y ( T arg0 ) { return arg0 == null? null : arg0. getClass ( ) ; }",
        "public static R x_or_y ( R arg0 ) { return arg0. x || arg0. y ; }"
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int; \n            }\n        }\n    }\n    return result;\n}",
      "target": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * d_int; \n            }\n        }\n    }\n    return result;\n}",
      "function range": "14,5-25,5",
      "raw_output": [
        "double [ ] function ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "double [ ] function ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "double [ ] function ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0 ) ; return loc0 ; }",
        "double function ( double arg0, double arg1 ) { if ( arg0 < arg1 ) { return arg0 - arg1 ; } else if ( arg0 > arg1 ) { return arg1 ; } else if ( arg0 < arg1 ) { return arg0 + arg1 ; } else { return arg0 ; } }",
        "void function ( Double arg0, Double arg1 ) { Double_the_difference_Bloom loc0 = new Double_the_difference_Bloom ( arg0, arg1 ) ; }",
        "double function ( Double arg0, Double arg1 ) { return arg0 - arg1 ; }",
        "void function ( Double arg0, Double arg1 ) { Integer loc0 = Double. valueOf ( arg0 ) ; Integer loc1 = Double. valueOf ( arg1 ) ; assertEquals ( loc0, loc1 ) ; }",
        "void function ( Double arg0, Double arg1 ) { Double loc0 = new Double ( arg0 ) ; Double loc1 = new Double ( arg1 ) ; loc0. add ( loc1 ) ; }",
        "void function ( Double arg0, Double arg1 ) { Double loc0 = new Double ( arg0 ) ; Double loc1 = new Double ( arg1 ) ; loc0. subtract ( loc1 ) ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = Double. doubleToLongBits ( arg0 ) ; double loc1 = Double. doubleToLongBits ( arg1 ) ; return loc0 < loc1? loc0 : loc1 ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = Double. doubleToLongBits ( arg0 ) ; double loc1 = Double. doubleToLongBits ( arg1 ) ; return loc0 - loc1 ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = arg0 - arg1 ; double loc1 = arg1 - arg0 ; return new Double ( loc0 ). add ( loc1 ) ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = Double. doubleToLongBits ( arg0 ) ; double loc1 = Double. doubleToLongBits ( arg1 ) ; return loc0 + loc1 ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = Double. doubleToLongBits ( arg0 ) ; double loc1 = Double. doubleToLongBits ( arg1 ) ; return new Double ( loc0, loc1 ) ; }",
        "double function ( double arg0, double arg1 ) { if ( arg0 < arg1 ) { return arg0 - arg1 ; } else if ( arg0 > arg1 ) { return arg1 ; } else if ( arg0 < arg1 ) { return arg0 + arg1 ; } else { return arg0 ; } }",
        "double function ( double arg0, double arg1 ) { if ( arg0 < arg1 ) { return arg0 - arg1 ; } else if ( arg0 > arg1 ) { return arg1 - arg0 ; } else if ( arg0 < arg1 ) { return arg0 + arg1 ; } else { return arg0 ; } }",
        "double function ( double arg0, double arg1 ) { if ( arg0 < arg1 ) { return arg0 + arg1 ; } else if ( arg0 > arg1 ) { return arg1 - arg0 ; } else if ( arg0 < arg1 ) { return arg0 + arg1 ; } else { return arg0 ; } }",
        "double function ( double arg0, double arg1 ) { double loc0 = arg0 - arg1 ; double loc1 = arg1 - arg0 ; if ( loc0 > loc1 ) { loc0 = loc1 ; } else if ( loc0 < loc1 ) { loc0 = loc0 + arg1 ; } return loc0 ; }",
        "double function ( double arg0, double arg1 ) { if ( arg0 < arg1 ) { return arg0 + arg1 ; } else if ( arg0 > arg1 ) { return arg1 - arg0 ; } else if ( arg1 < arg0 ) { return arg0 + arg1 ; } else { return arg0 ; } }",
        "double function ( double arg0, double arg1 ) { return arg0 - arg1 ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = arg0 - arg1 ; if ( loc0 == 0.0 ) { return 0.0 ; } else if ( loc0 == 1.0 ) { return 1.0 ; } else { return loc0 ; } }",
        "double function ( double arg0, double arg1 ) { double loc0 = arg0 - arg1 ; return loc0 ; }",
        "double function ( double arg0, double arg1 ) { double loc0 = arg0 - arg1 ; if ( loc0 == 0.0 ) return 0.0 ; else return Math. abs ( loc0 ) ; }",
        "double function ( Double arg0, Double arg1 ) { return arg0 - arg1 ; }"
      ],
      "mid_translation": [
        "Method double_the_difference.",
        "Double_the_difference Method.",
        "double_the_difference Method.",
        "method double_the_difference.",
        "double_the_difference This method returns the difference between two doubles."
      ],
      "output": [
        "public static double [ ] double_the_difference ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static double [ ] double_the_difference ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static double [ ] double_the_difference ( double [ ] arg0 ) { double [ ] loc0 = new double [ arg0. length - 1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static List < Integer > double_the_difference ( List < Integer > arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; Collections. sort ( loc0 ) ; return loc0 ; }",
        "public static double double_the_difference ( double arg0, double arg1 ) { if ( arg0 < arg1 ) { return arg0 - arg1 ; } else if ( arg0 > arg1 ) { return arg1 ; } else if ( arg0 < arg1 ) { return arg0 + arg1 ; } else { return arg0 ; } }",
        "public static void double_the_difference ( Double arg0, Double arg1 ) { Double_the_difference_Bloom loc0 = new Double_the_difference_Bloom ( arg0, arg1 ) ; }",
        "public static double double_the_difference ( Double arg0, Double arg1 ) { return arg0 - arg1 ; }",
        "public static void double_the_difference ( Double arg0, Double arg1 ) { Integer loc0 = Double. valueOf ( arg0 ) ; Integer loc1 = Double. valueOf ( arg1 ) ; assertEquals ( loc0, loc1 ) ; }",
        "public static void double_the_difference ( Double arg0, Double arg1 ) { Double loc0 = new Double ( arg0 ) ; Double loc1 = new Double ( arg1 ) ; loc0. add ( loc1 ) ; }",
        "public static void double_the_difference ( Double arg0, Double arg1 ) { Double loc0 = new Double ( arg0 ) ; Double loc1 = new Double ( arg1 ) ; loc0. subtract ( loc1 ) ; }",
        "public static double double_the_difference ( double arg0, double arg1 ) { double loc0 = Double. doubleToLongBits ( arg0 ) ; double loc1 = Double. doubleToLongBits ( arg1 ) ; return loc0 < loc1? loc0 : loc1 ; }",
        "public static double double_the_difference ( double arg0, double arg1 ) { double loc0 = Double. doubleToLongBits ( arg0 ) ; double loc1 = Double. doubleToLongBits ( arg1 ) ; return loc0 - loc1 ; }",
        "public static double double_the_difference ( double arg0, double arg1 ) { double loc0 = arg0 - arg1 ; double loc1 = arg1 - arg0 ; return new Double ( loc0 ). add ( loc1 ) ; }",
        "public static double double_the_difference ( double arg0, double arg1 ) { double loc0 = Double. doubleToLongBits ( arg0 ) ; double loc1 = Double. doubleToLongBits ( arg1 ) ; return loc0 + loc1 ; }",
        "public static double double_the_difference ( double arg0, double arg1 ) { double loc0 = Double. doubleToLongBits ( arg0 ) ; double loc1 = Double. doubleToLongBits ( arg1 ) ; return new Double ( loc0, loc1 ) ; }",
        "public static double double_the_difference ( double arg0, double arg1 ) { if ( arg0 < arg1 ) { return arg0 - arg1 ; } else if ( arg0 > arg1 ) { return arg1 ; } else if ( arg0 < arg1 ) { return arg0 + arg1 ; } else { return arg0 ; } }",
        "public static double double_the_difference ( double arg0, double arg1 ) { if ( arg0 < arg1 ) { return arg0 - arg1 ; } else if ( arg0 > arg1 ) { return arg1 - arg0 ; } else if ( arg0 < arg1 ) { return arg0 + arg1 ; } else { return arg0 ; } }",
        "public static double double_the_difference ( double arg0, double arg1 ) { if ( arg0 < arg1 ) { return arg0 + arg1 ; } else if ( arg0 > arg1 ) { return arg1 - arg0 ; } else if ( arg0 < arg1 ) { return arg0 + arg1 ; } else { return arg0 ; } }",
        "public static double double_the_difference ( double arg0, double arg1 ) { double loc0 = arg0 - arg1 ; double loc1 = arg1 - arg0 ; if ( loc0 > loc1 ) { loc0 = loc1 ; } else if ( loc0 < loc1 ) { loc0 = loc0 + arg1 ; } return loc0 ; }",
        "public static double double_the_difference ( double arg0, double arg1 ) { if ( arg0 < arg1 ) { return arg0 + arg1 ; } else if ( arg0 > arg1 ) { return arg1 - arg0 ; } else if ( arg1 < arg0 ) { return arg0 + arg1 ; } else { return arg0 ; } }",
        "public static double double_the_difference ( double arg0, double arg1 ) { return arg0 - arg1 ; }",
        "public static double double_the_difference ( double arg0, double arg1 ) { double loc0 = arg0 - arg1 ; if ( loc0 == 0.0 ) { return 0.0 ; } else if ( loc0 == 1.0 ) { return 1.0 ; } else { return loc0 ; } }",
        "public static double double_the_difference ( double arg0, double arg1 ) { double loc0 = arg0 - arg1 ; return loc0 ; }",
        "public static double double_the_difference ( double arg0, double arg1 ) { double loc0 = arg0 - arg1 ; if ( loc0 == 0.0 ) return 0.0 ; else return Math. abs ( loc0 ) ; }",
        "public static double double_the_difference ( Double arg0, Double arg1 ) { return arg0 - arg1 ; }"
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]); \n    }\n    return result;\n}",
      "target": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.abs(game[i] - guess[i]); \n    }\n    return result;\n}",
      "function range": "12,5-20,5",
      "raw_output": [
        "boolean function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return false ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return true ; } else if ( arg1 < arg0 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } else { return false ; } }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return false ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } return false ; }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } return arg0 < arg1 ; }",
        "boolean function ( int [ ] arg0, int [ ] arg1 ) { if ( arg0. length == arg1. length ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) { return true ; } } } return false ; }",
        "boolean function ( int [ ] arg0, int [ ] arg1 ) { if ( arg0. length == arg1. length ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] > arg1 [ loc0 ] ) return false ; } else if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) return false ; else return true ; }",
        "boolean function ( int [ ] arg0, int [ ] arg1 ) { if ( arg0. length == arg1. length ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] > arg1 [ loc0 ] ) { return false ; } } } return true ; }",
        "boolean function ( int [ ] arg0, int [ ] arg1 ) { if ( arg0. length == arg1. length ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; } else if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; else return false ; }",
        "boolean function ( int [ ] arg0, int [ ] arg1 ) { if ( arg0. length == arg1. length ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] > arg1 [ loc0 ] ) return false ; } else if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) return false ; return true ; }",
        "int function ( int arg0, int arg1 ) { return arg0 < arg1? - 1 : ( arg0 == arg1? 0 : 1 ) ; }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 == 1 ) { return 1 ; } else if ( loc0 == 0 ) { return - 1 ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 > 0 ) { return 1 ; } else if ( loc0 < 0 ) { return - 1 ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 > 0 ) { return 1 ; } else if ( loc0 == 0 ) { return - 1 ; } else { return 0 ; } }",
        "int function ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg1 < arg0 ) { return + 1 ; } else if ( arg1 > arg1 ) { return 1 ; } else { return 0 ; } }",
        "boolean function ( IntegerSet arg0, IntegerSet arg1 ) { if ( arg0 == null || arg1 == null ) { return arg0 == null ; } if ( arg0 == null || arg1 == null ) { return arg1 == null ; } return arg0. compareTo ( arg1 ) == 0 ; }",
        "boolean function ( IntegerSet arg0, IntegerSet arg1 ) { if ( arg0 == null || arg1 == null ) { return true ; } if ( arg0 == null || arg1 == null ) { return false ; } if ( arg0 == null || arg1 == null ) { return true ; } return arg0. compareTo ( arg1 ) == 0 ; }",
        "boolean function ( IntegerSet arg0, IntegerSet arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } if ( arg0 == null || arg1 == null ) { return true ; } return arg0. compareTo ( arg1 ) == 0 ; }",
        "boolean function ( IntegerSet arg0, IntegerSet arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } if ( arg0 == null || arg1 == null ) { return true ; } if ( arg0 == null || arg1 == null ) { return true ; } return arg0. compareTo ( arg1 ) == 0 ; }",
        "boolean function ( IntegerSet arg0, IntegerSet arg1 ) { if ( arg0. compareTo ( arg1 ) == 0 ) { return true ; } else if ( arg0. compareTo ( arg1 ) == 1 ) { return true ; } else { return false ; } }",
        "boolean function ( int [ ] arg0, int [ ] arg1 ) { boolean loc0 = true ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = false ; break ; } } return loc0 ; }",
        "boolean function ( int [ ] arg0, int [ ] arg1 ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = true ; break ; } } return loc0 ; }",
        "boolean function ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == null || arg1 == null ) { return false ; } else { for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) { return false ; } } return true ; } }",
        "boolean function ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == null || arg1 == null ) { return false ; } else { for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) { return true ; } } return false ; } }",
        "boolean function ( int [ ] arg0, int [ ] arg1 ) { boolean loc0 = true ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg1 [ loc1 ] ) { loc0 = false ; break ; } } return loc0 ; }"
      ],
      "mid_translation": [
        "Compare two sets of integers",
        "Compare two arrays of integers",
        "Compare two integers.",
        "Compare two set of integers",
        "Compare two int arrays."
      ],
      "output": [
        "public static boolean compare ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return false ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean compare ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean compare ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return true ; } else if ( arg1 < arg0 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } else { return false ; } }",
        "public static boolean compare ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return false ; } else if ( arg0 == arg1 ) { return true ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } return false ; }",
        "public static boolean compare ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else if ( arg1 == arg1 ) { return true ; } return arg0 < arg1 ; }",
        "public static boolean compare ( int [ ] arg0, int [ ] arg1 ) { if ( arg0. length == arg1. length ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) { return true ; } } } return false ; }",
        "public static boolean compare ( int [ ] arg0, int [ ] arg1 ) { if ( arg0. length == arg1. length ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] > arg1 [ loc0 ] ) return false ; } else if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) return false ; else return true ; }",
        "public static boolean compare ( int [ ] arg0, int [ ] arg1 ) { if ( arg0. length == arg1. length ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) { if ( arg0 [ loc0 ] > arg1 [ loc0 ] ) { return false ; } } } return true ; }",
        "public static boolean compare ( int [ ] arg0, int [ ] arg1 ) { if ( arg0. length == arg1. length ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; } else if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) return true ; else return false ; }",
        "public static boolean compare ( int [ ] arg0, int [ ] arg1 ) { if ( arg0. length == arg1. length ) { for ( int loc0 = 0 ; loc0 < arg0. length ; loc0 ++ ) if ( arg0 [ loc0 ] > arg1 [ loc0 ] ) return false ; } else if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) return false ; return true ; }",
        "public static int compare ( int arg0, int arg1 ) { return arg0 < arg1? - 1 : ( arg0 == arg1? 0 : 1 ) ; }",
        "public static int compare ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 == 1 ) { return 1 ; } else if ( loc0 == 0 ) { return - 1 ; } else { return 0 ; } }",
        "public static int compare ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 > 0 ) { return 1 ; } else if ( loc0 < 0 ) { return - 1 ; } else { return 0 ; } }",
        "public static int compare ( int arg0, int arg1 ) { int loc0 = arg0 - arg1 ; if ( loc0 == 0 ) { return 0 ; } else if ( loc0 > 0 ) { return 1 ; } else if ( loc0 == 0 ) { return - 1 ; } else { return 0 ; } }",
        "public static int compare ( int arg0, int arg1 ) { if ( arg0 < arg1 ) { return - 1 ; } else if ( arg1 < arg0 ) { return + 1 ; } else if ( arg1 > arg1 ) { return 1 ; } else { return 0 ; } }",
        "public static boolean compare ( IntegerSet arg0, IntegerSet arg1 ) { if ( arg0 == null || arg1 == null ) { return arg0 == null ; } if ( arg0 == null || arg1 == null ) { return arg1 == null ; } return arg0. compareTo ( arg1 ) == 0 ; }",
        "public static boolean compare ( IntegerSet arg0, IntegerSet arg1 ) { if ( arg0 == null || arg1 == null ) { return true ; } if ( arg0 == null || arg1 == null ) { return false ; } if ( arg0 == null || arg1 == null ) { return true ; } return arg0. compareTo ( arg1 ) == 0 ; }",
        "public static boolean compare ( IntegerSet arg0, IntegerSet arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } if ( arg0 == null || arg1 == null ) { return true ; } return arg0. compareTo ( arg1 ) == 0 ; }",
        "public static boolean compare ( IntegerSet arg0, IntegerSet arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } if ( arg0 == null || arg1 == null ) { return true ; } if ( arg0 == null || arg1 == null ) { return true ; } return arg0. compareTo ( arg1 ) == 0 ; }",
        "public static boolean compare ( IntegerSet arg0, IntegerSet arg1 ) { if ( arg0. compareTo ( arg1 ) == 0 ) { return true ; } else if ( arg0. compareTo ( arg1 ) == 1 ) { return true ; } else { return false ; } }",
        "public static boolean compare ( int [ ] arg0, int [ ] arg1 ) { boolean loc0 = true ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = false ; break ; } } return loc0 ; }",
        "public static boolean compare ( int [ ] arg0, int [ ] arg1 ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] < arg1 [ loc1 ] ) { loc0 = true ; break ; } } return loc0 ; }",
        "public static boolean compare ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == null || arg1 == null ) { return false ; } else { for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) { if ( arg0 [ loc0 ] < arg1 [ loc0 ] ) { return false ; } } return true ; } }",
        "public static boolean compare ( int [ ] arg0, int [ ] arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 == null || arg1 == null ) { return false ; } else { for ( int loc0 = 0 ; loc0 < arg1. length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 [ loc0 ] ) { return true ; } } return false ; } }",
        "public static boolean compare ( int [ ] arg0, int [ ] arg1 ) { boolean loc0 = true ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ] > arg1 [ loc1 ] ) { loc0 = false ; break ; } } return loc0 ; }"
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1; \n            if (Character.toLowerCase(c) == c) CAP += 1; \n        } \n        val = CAP - SM; \n        strong = s; \n    }\n    return class_name + \".\" + strong;\n}",
      "target": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) CAP += 1; \n            if (Character.toLowerCase(c) == c) SM += 1; \n        } \n        if (CAP - SM > val) { \n            val = CAP - SM; \n            strong = s;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
      "function range": "20,5-35,5",
      "raw_output": [
        "String function ( Class <? > arg0 ) { return arg0. getName ( ). toLowerCase ( Locale. ENGLISH ) ; }",
        "String function ( Class <? > arg0 ) { return arg0. getName ( ). toLowerCase ( ) ; }",
        "String function ( Class <? > arg0 ) { return arg0. getName ( ) ; }",
        "String function ( Class <? > arg0 ) { return ExtensionList. strongest ( arg0. getSimpleName ( ) ) ; }",
        "String function ( Class <? > arg0 ) { return arg0. getSimpleName ( ) ; }",
        "String function ( Class <? > arg0 ) { return arg0. getName ( ). toLowerCase ( Locale. ENGLISH ) ; }",
        "String function ( String arg0 ) { return arg0. substring ( arg0. lastIndexOf ( '.' ) + 1 ) ; }",
        "String function ( String arg0 ) { return arg0. toLowerCase ( Locale. ENGLISH ) ; }",
        "String function ( Class <? > arg0 ) { return arg0. getName ( ). toLowerCase ( ) ; }",
        "String function ( Class <? > arg0 ) { return arg0. getName ( ) ; }",
        "String function ( String arg0 ) { return arg0. substring ( arg0. lastIndexOf ( '.' ) + 1 ) ; }",
        "String function ( String arg0 ) { return arg0. substring ( arg0. lastIndexOf ( '.' ) ) ; }",
        "String function ( String arg0 ) { return arg0. toLowerCase ( Locale. ENGLISH ) ; }",
        "String function ( JavaClass arg0 ) { return arg0. getName ( ) ; }",
        "String function ( Class <? > arg0 ) { return arg0. getName ( ) ; }",
        "String function ( String arg0, List arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } return null ; }",
        "String function ( String arg0, List < String > arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } return null ; }",
        "String function ( String arg0, List <? extends Extension > arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } return null ; }",
        "String function ( String arg0, List arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } return \"srini_string\" ; }",
        "String function ( String arg0, List < String > arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return arg1. get ( loc0 ) ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } return null ; }",
        "String function ( String arg0, String [ ] arg1 ) { int loc0 = arg1. loc0 ; String loc1 = null ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 = arg1 [ loc2 ] ; if ( loc1. equals ( \"srini_string\" ) ) { loc1 = arg1 [ loc2 + 1 ] ; } } return loc1 ; }",
        "String function ( String arg0, String [ ] arg1 ) { int loc0 = arg1. loc0 ; String loc1 = null ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 = arg1 [ loc2 ] ; if ( loc1. equals ( \"srini_string\" ) ) { loc0 = loc2 ; } } return loc1 ; }",
        "String function ( String arg0, String [ ] arg1 ) { int loc0 = arg1. length ; String loc1 = null ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 = arg1 [ loc2 ] ; if ( loc1. equals ( \"srini_string\" ) ) { loc1 = arg1 [ loc2 + 1 ] ; } } return loc1 ; }",
        "String function ( String arg0, String [ ] arg1 ) { int loc0 = arg1. length ; String loc1 = null ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 = arg1 [ loc2 ] ; if ( loc1. equals ( \"srini_string\" ) ) { loc0 = loc2 ; } } return loc1 ; }",
        "String function ( String arg0, String [ ] arg1 ) { int loc0 = arg1. loc0 ; int loc1 = arg1. loc1 ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { String loc3 = arg1 [ loc2 ] ; if ( loc3. equals ( \"srini_string\" ) ) { return loc2 ; } } return null ; }"
      ],
      "mid_translation": [
        "Get the strongest extension of class_name and extensions.",
        "Get the strongest extension of the class_name and extensions.",
        "Get the strongest extension of the class_name and the extensions.",
        "Get the strongest extension of a class name and a list of extensions",
        "Get the strongest extension of a class name and an array of extensions"
      ],
      "output": [
        "public static String strongest_extension ( Class <? > arg0 ) { return arg0. getName ( ). toLowerCase ( Locale. ENGLISH ) ; }",
        "public static String strongest_extension ( Class <? > arg0 ) { return arg0. getName ( ). toLowerCase ( ) ; }",
        "public static String strongest_extension ( Class <? > arg0 ) { return arg0. getName ( ) ; }",
        "public static String strongest_extension ( Class <? > arg0 ) { return ExtensionList. strongest ( arg0. getSimpleName ( ) ) ; }",
        "public static String strongest_extension ( Class <? > arg0 ) { return arg0. getSimpleName ( ) ; }",
        "public static String strongest_extension ( Class <? > arg0 ) { return arg0. getName ( ). toLowerCase ( Locale. ENGLISH ) ; }",
        "public static String strongest_extension ( String arg0 ) { return arg0. substring ( arg0. lastIndexOf ( '.' ) + 1 ) ; }",
        "public static String strongest_extension ( String arg0 ) { return arg0. toLowerCase ( Locale. ENGLISH ) ; }",
        "public static String strongest_extension ( Class <? > arg0 ) { return arg0. getName ( ). toLowerCase ( ) ; }",
        "public static String strongest_extension ( Class <? > arg0 ) { return arg0. getName ( ) ; }",
        "public static String strongest_extension ( String arg0 ) { return arg0. substring ( arg0. lastIndexOf ( '.' ) + 1 ) ; }",
        "public static String strongest_extension ( String arg0 ) { return arg0. substring ( arg0. lastIndexOf ( '.' ) ) ; }",
        "public static String strongest_extension ( String arg0 ) { return arg0. toLowerCase ( Locale. ENGLISH ) ; }",
        "public static String strongest_extension ( JavaClass arg0 ) { return arg0. getName ( ) ; }",
        "public static String strongest_extension ( Class <? > arg0 ) { return arg0. getName ( ) ; }",
        "public static String strongest_extension ( String arg0, List arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } return null ; }",
        "public static String strongest_extension ( String arg0, List < String > arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } return null ; }",
        "public static String strongest_extension ( String arg0, List <? extends Extension > arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } return null ; }",
        "public static String strongest_extension ( String arg0, List arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } return \"srini_string\" ; }",
        "public static String strongest_extension ( String arg0, List < String > arg1 ) { int loc0 = arg0. lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return arg1. get ( loc0 ) ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } else if ( loc0 < arg1. size ( ) ) { return \"srini_string\" ; } return null ; }",
        "public static String strongest_extension ( String arg0, String [ ] arg1 ) { int loc0 = arg1. loc0 ; String loc1 = null ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 = arg1 [ loc2 ] ; if ( loc1. equals ( \"srini_string\" ) ) { loc1 = arg1 [ loc2 + 1 ] ; } } return loc1 ; }",
        "public static String strongest_extension ( String arg0, String [ ] arg1 ) { int loc0 = arg1. loc0 ; String loc1 = null ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 = arg1 [ loc2 ] ; if ( loc1. equals ( \"srini_string\" ) ) { loc0 = loc2 ; } } return loc1 ; }",
        "public static String strongest_extension ( String arg0, String [ ] arg1 ) { int loc0 = arg1. length ; String loc1 = null ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 = arg1 [ loc2 ] ; if ( loc1. equals ( \"srini_string\" ) ) { loc1 = arg1 [ loc2 + 1 ] ; } } return loc1 ; }",
        "public static String strongest_extension ( String arg0, String [ ] arg1 ) { int loc0 = arg1. length ; String loc1 = null ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 = arg1 [ loc2 ] ; if ( loc1. equals ( \"srini_string\" ) ) { loc0 = loc2 ; } } return loc1 ; }",
        "public static String strongest_extension ( String arg0, String [ ] arg1 ) { int loc0 = arg1. loc0 ; int loc1 = arg1. loc1 ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { String loc3 = arg1 [ loc2 ] ; if ( loc3. equals ( \"srini_string\" ) ) { return loc2 ; } } return null ; }"
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    String pat = b; \n    for (int i = 0; i < a.length(); i += 1) { \n        for (int j = 0; j < l; j += 1) { \n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
      "target": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    String pat = b + b; \n    for (int i = 0; i < a.length() - l + 1; i += 1) { \n        for (int j = 0; j < l + 1; j += 1) { \n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
      "function range": "12,5-21,5",
      "raw_output": [
        "boolean function ( List < String > arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "boolean function ( List < String > arg0, List < String > arg1 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( arg1. get ( loc0 ) ) ) { return true ; } } return false ; }",
        "boolean function ( List < String > arg0, List < String > arg1 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( arg1. get ( loc0 ) ) ) { loc0 = false ; break ; } } return loc0 ; }",
        "boolean function ( List < String > arg0, List < String > arg1 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( arg1 ) ) { loc0 = false ; break ; } } return loc0 ; }",
        "boolean function ( List < String > arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "boolean function ( String arg0 ) { try { Pattern loc0 = Pattern. compile ( arg0 ) ; return loc0. matcher ( ). matches ( ) ; } catch ( PatternSyntaxException loc0 ) { return false ; } }",
        "boolean function ( String arg0 ) { try { Pattern loc0 = Pattern. compile ( arg0 ) ; return loc0. matcher ( \"srini_string\" ). matches ( ) ; } catch ( PatternSyntaxException loc0 ) { return false ; } }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; return true ; }",
        "boolean function ( List < String > arg0 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( \"srini_string\" ) ) { loc0 = false ; break ; } } return loc0 ; }",
        "boolean function ( List < String > arg0 ) { boolean loc0 = true ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) == null ) { loc0 = false ; break ; } } return loc0 ; }",
        "boolean function ( List < String > arg0 ) { boolean loc0 = true ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 )!= null ) { loc0 = false ; break ; } } return loc0 ; }",
        "boolean function ( List < String > arg0 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( \"srini_string\" ) ) { loc0 = false ; break ; } } if ( loc0 ) { return true ; } return false ; }",
        "boolean function ( List < String > arg0 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( \"srini_string\" ) ) { loc0 = false ; break ; } } if ( loc0 ) { return false ; } return loc0 ; }",
        "boolean function ( List < String > arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "boolean function ( List < String > arg0, List < String > arg1 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( arg1. get ( loc0 ) ) ) { return true ; } } return false ; }",
        "boolean function ( List < String > arg0, List < String > arg1 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( arg1. get ( loc0 ) ) ) { loc0 = false ; break ; } } return loc0 ; }",
        "boolean function ( List < String > arg0, List < String > arg1 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( arg1 ) ) { loc0 = false ; break ; } } return loc0 ; }",
        "boolean function ( List < String > arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "void function ( Map < String, List < Integer >> arg0, List < Integer > arg1 ) { List < Integer > loc0 = Lists. newArrayList ( ) ; for ( Map. Entry < String, List < Integer >> loc1 : arg0. entrySet ( ) ) { loc0. add ( new Integer ( loc1. getKey ( ) ) ) ; } }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( String loc1 : arg0 ) { if ( loc1. equals ( \"srini_string\" ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "void function ( Map < String, List < Integer >> arg0, List < Integer > arg1 ) { List < Integer > loc0 = Lists. newArrayList ( ) ; for ( Map. Entry < String, List < Integer >> loc1 : arg0. entrySet ( ) ) { loc0. add ( loc1. getValue ( ) ) ; } }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ). toUpperCase ( ) ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Cycpattern check.",
        "cycpattern check.",
        "cycpattern_check.",
        "Cycpattern check.",
        "cycpattern - check."
      ],
      "output": [
        "public static boolean cycpattern_check ( List < String > arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "public static boolean cycpattern_check ( List < String > arg0, List < String > arg1 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( arg1. get ( loc0 ) ) ) { return true ; } } return false ; }",
        "public static boolean cycpattern_check ( List < String > arg0, List < String > arg1 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( arg1. get ( loc0 ) ) ) { loc0 = false ; break ; } } return loc0 ; }",
        "public static boolean cycpattern_check ( List < String > arg0, List < String > arg1 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( arg1 ) ) { loc0 = false ; break ; } } return loc0 ; }",
        "public static boolean cycpattern_check ( List < String > arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "public static boolean cycpattern_check ( String arg0 ) { try { Pattern loc0 = Pattern. compile ( arg0 ) ; return loc0. matcher ( ). matches ( ) ; } catch ( PatternSyntaxException loc0 ) { return false ; } }",
        "public static boolean cycpattern_check ( String arg0 ) { try { Pattern loc0 = Pattern. compile ( arg0 ) ; return loc0. matcher ( \"srini_string\" ). matches ( ) ; } catch ( PatternSyntaxException loc0 ) { return false ; } }",
        "public static boolean cycpattern_check ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "public static boolean cycpattern_check ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "public static boolean cycpattern_check ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; return true ; }",
        "public static boolean cycpattern_check ( List < String > arg0 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( \"srini_string\" ) ) { loc0 = false ; break ; } } return loc0 ; }",
        "public static boolean cycpattern_check ( List < String > arg0 ) { boolean loc0 = true ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ) == null ) { loc0 = false ; break ; } } return loc0 ; }",
        "public static boolean cycpattern_check ( List < String > arg0 ) { boolean loc0 = true ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 )!= null ) { loc0 = false ; break ; } } return loc0 ; }",
        "public static boolean cycpattern_check ( List < String > arg0 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( \"srini_string\" ) ) { loc0 = false ; break ; } } if ( loc0 ) { return true ; } return false ; }",
        "public static boolean cycpattern_check ( List < String > arg0 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( \"srini_string\" ) ) { loc0 = false ; break ; } } if ( loc0 ) { return false ; } return loc0 ; }",
        "public static boolean cycpattern_check ( List < String > arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "public static boolean cycpattern_check ( List < String > arg0, List < String > arg1 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( arg1. get ( loc0 ) ) ) { return true ; } } return false ; }",
        "public static boolean cycpattern_check ( List < String > arg0, List < String > arg1 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( arg1. get ( loc0 ) ) ) { loc0 = false ; break ; } } return loc0 ; }",
        "public static boolean cycpattern_check ( List < String > arg0, List < String > arg1 ) { boolean loc0 = true ; for ( String loc1 : arg0 ) { if ( loc1. equals ( arg1 ) ) { loc0 = false ; break ; } } return loc0 ; }",
        "public static boolean cycpattern_check ( List < String > arg0 ) { for ( String loc0 : arg0 ) { if ( loc0. equals ( \"srini_string\" ) || loc0. equals ( \"srini_string\" ) ) { return true ; } } return false ; }",
        "public static List < String > cycpattern_check ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static void cycpattern_check ( Map < String, List < Integer >> arg0, List < Integer > arg1 ) { List < Integer > loc0 = Lists. newArrayList ( ) ; for ( Map. Entry < String, List < Integer >> loc1 : arg0. entrySet ( ) ) { loc0. add ( new Integer ( loc1. getKey ( ) ) ) ; } }",
        "public static List < String > cycpattern_check ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( String loc1 : arg0 ) { if ( loc1. equals ( \"srini_string\" ) ) { loc0. add ( loc1 ) ; } } return loc0 ; }",
        "public static void cycpattern_check ( Map < String, List < Integer >> arg0, List < Integer > arg1 ) { List < Integer > loc0 = Lists. newArrayList ( ) ; for ( Map. Entry < String, List < Integer >> loc1 : arg0. entrySet ( ) ) { loc0. add ( loc1. getValue ( ) ) ; } }",
        "public static List < String > cycpattern_check ( List < String > arg0 ) { List < String > loc0 = Lists. newArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0. add ( arg0. get ( loc1 ). toUpperCase ( ) ) ; } return loc0 ; }"
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (char c : (num + \"\").toCharArray()) { \n        if ((int)c % 2 == 0) even_count += 1; \n        if ((int)c % 2 == 1) odd_count += 1; \n    }\n    return new int[] {even_count, odd_count};\n}",
      "target": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (char c : (Math.abs(num) + \"\").toCharArray()) { \n        int n = c - '0'; \n        if (n % 2 == 0) even_count += 1; \n        if (n % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}",
      "function range": "10,5-19,5",
      "raw_output": [
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return arg0 + 1 ; } else { return arg0 - 1 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return arg0 + 1 ; } return arg0 ; }",
        "int function ( int arg0 ) { return arg0 >> 1 ; }",
        "int function ( int arg0 ) { return arg0 & ( 1 << 1 ) ; }",
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 % 2 ; }",
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return 1 ; } else if ( arg0 % 2!= 0 ) { return 2 ; } else { return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1 ; } else if ( arg0 % 2 == 1 ) { return 2 ; } else { return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return 1 ; } else { return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return 1 ; } else if ( arg0 < 0 ) { return 2 ; } else { return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2!= 0 ) { return 1 ; } else if ( arg0 < 0 ) { return - 1 ; } else { return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1, 0 ; } else if ( arg0 % 2 == 1 ) { return 2, 1 ; } else { return 0, 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 0, 1 ; } else if ( arg0 % 2 == 1 ) { return 1, 0 ; } else { return 0, 1 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 2, 0 ; } else if ( arg0 % 2 == 1 ) { return 1, 1 ; } else { return 0, 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 2, 0 ; } else if ( arg0 % 2 == 1 ) { return 1, 0 ; } else { return 0, 1 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1, 0 ; } else if ( arg0 % 2 == 1 ) { return 1, 1 ; } else { return 0, 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 0 ; } else if ( arg0 % 2 == 1 ) { return 1 ; } else { return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1 ; } else if ( arg0 % 2 == 1 ) { return 2 ; } else { return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1 ; } else if ( arg0 % 2 == 1 ) { return 2 ; } else { return 3 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 0 ; } else if ( arg0 % 2 == 1 ) { return 1 ; } else { return 2 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return arg0 ; } else if ( arg0 % 2 == 1 ) { return arg0 ; } else { return arg0 & 0x1f ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1 ; } else if ( arg0 % 2 == 1 ) { return 2 ; } else { return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1 ; } else if ( arg0 % 2 == 1 ) { return 2 ; } else { return 3 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 2 ; } else if ( arg0 % 2 == 1 ) { return 1 ; } else { return 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1, 0 ; } else if ( arg0 % 2 == 1 ) { return 2, 1 ; } else { return 0, 0 ; } }",
        "int function ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 2 ; } else if ( arg0 % 2 == 1 ) { return 3 ; } else { return 0 ; } }"
      ],
      "mid_translation": [
        "Get even and odd count.",
        "Get the even and odd count of a number.",
        "Returns the even and odd count for a given number.",
        "Returns the even and odd count of the given number.",
        "Get the even and odd count for a given number."
      ],
      "output": [
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2!= 0 ) { return arg0 + 1 ; } else { return arg0 - 1 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2!= 0 ) { return arg0 + 1 ; } return arg0 ; }",
        "public static int even_odd_count ( int arg0 ) { return arg0 >> 1 ; }",
        "public static int even_odd_count ( int arg0 ) { return arg0 & ( 1 << 1 ) ; }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2!= 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return arg0 % 2 ; }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2!= 0 ) { return 1 ; } else if ( arg0 % 2!= 0 ) { return 2 ; } else { return 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1 ; } else if ( arg0 % 2 == 1 ) { return 2 ; } else { return 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2!= 0 ) { return 1 ; } else { return 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2!= 0 ) { return 1 ; } else if ( arg0 < 0 ) { return 2 ; } else { return 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2!= 0 ) { return 1 ; } else if ( arg0 < 0 ) { return - 1 ; } else { return 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1, 0 ; } else if ( arg0 % 2 == 1 ) { return 2, 1 ; } else { return 0, 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 0, 1 ; } else if ( arg0 % 2 == 1 ) { return 1, 0 ; } else { return 0, 1 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 2, 0 ; } else if ( arg0 % 2 == 1 ) { return 1, 1 ; } else { return 0, 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 2, 0 ; } else if ( arg0 % 2 == 1 ) { return 1, 0 ; } else { return 0, 1 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1, 0 ; } else if ( arg0 % 2 == 1 ) { return 1, 1 ; } else { return 0, 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 0 ; } else if ( arg0 % 2 == 1 ) { return 1 ; } else { return 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1 ; } else if ( arg0 % 2 == 1 ) { return 2 ; } else { return 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1 ; } else if ( arg0 % 2 == 1 ) { return 2 ; } else { return 3 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 0 ; } else if ( arg0 % 2 == 1 ) { return 1 ; } else { return 2 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return arg0 ; } else if ( arg0 % 2 == 1 ) { return arg0 ; } else { return arg0 & 0x1f ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1 ; } else if ( arg0 % 2 == 1 ) { return 2 ; } else { return 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1 ; } else if ( arg0 % 2 == 1 ) { return 2 ; } else { return 3 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 2 ; } else if ( arg0 % 2 == 1 ) { return 1 ; } else { return 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 1, 0 ; } else if ( arg0 % 2 == 1 ) { return 2, 1 ; } else { return 0, 0 ; } }",
        "public static int even_odd_count ( int arg0 ) { if ( arg0 % 2 == 0 ) { return 2 ; } else if ( arg0 % 2 == 1 ) { return 3 ; } else { return 0 ; } }"
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i]; \n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
      "target": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        int div = (int) (number / num[i]); \n        while (div > 0) {\n            result += sym[i];\n            div -= 1;\n        }\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
      "function range": "13,5-27,5",
      "raw_output": [
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new RomanNumber ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new RomanNumber ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new RomanNumber ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) { return new RomanNumber ( 0 ) ; } else { return new RomanNumber ( arg0 ) ; } }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) return new RomanNumber ( 1 ) ; return new RomanNumber ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; } return new RomanNumber ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new RomanNumber ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) return new RomanNumber ( 1 ) ; return new RomanNumber ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) return new RomanNumber ( 0 ) ; return new RomanNumber ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) { return new RomanNumber ( 0 ) ; } else { return new RomanNumber ( arg0 ) ; } }",
        "String function ( int arg0 ) { switch ( arg0 ) { case 0 : return \"srini_string\" ; case 1 : return \"srini_string\" ; case 2 : return \"srini_string\" ; default : return \"srini_string\" ; } }",
        "String function ( int arg0 ) { switch ( arg0 ) { case 0 : return \"srini_string\" ; case 1 : return \"srini_string\" ; case 2 : return \"srini_string\" ; case 3 : return \"srini_string\" ; default : return \"srini_string\" ; } }",
        "String function ( int arg0 ) { if ( arg0 < 0 ) return \"srini_string\" ; else return \"srini_string\" ; }",
        "String function ( int arg0 ) { switch ( arg0 ) { case 0 : return \"srini_string\" ; case 1 : return \"srini_string\" ; case 2 : return \"srini_string\" ; case 4 : return \"srini_string\" ; default : return \"srini_string\" ; } }",
        "String function ( int arg0 ) { switch ( arg0 ) { case 0 : return \"srini_string\" ; case 1 : return \"srini_string\" ; case 2 : return \"srini_string\" ; default : throw new IllegalArgumentException ( \"srini_string\" ) ; } }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new RomanNumber ( arg0 ) ; }",
        "Roman function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new Roman ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new RomanNumber ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) { return new RomanNumber ( 0 ) ; } else { return new RomanNumber ( arg0 ) ; } }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) return new RomanNumber ( 0 ) ; return new RomanNumber ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new RomanNumber ( arg0 ) ; }",
        "Roman function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Roman ( arg0 ) ; }",
        "Roman function ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; } return new Roman ( arg0 ) ; }",
        "Roman function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new Roman ( arg0 ) ; }",
        "RomanNumber function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new RomanNumber ( arg0 ) ; }"
      ],
      "mid_translation": [
        "Convert an integer to a minimal Roman number.",
        "Convert an integer to a minimal roman number.",
        "Convert an integer to a minimal Roman string.",
        "Convert an int to a minimal Roman number.",
        "Converts an integer to a minimal Roman number."
      ],
      "output": [
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new RomanNumber ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new RomanNumber ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new RomanNumber ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) { return new RomanNumber ( 0 ) ; } else { return new RomanNumber ( arg0 ) ; } }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) return new RomanNumber ( 1 ) ; return new RomanNumber ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; } return new RomanNumber ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new RomanNumber ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) return new RomanNumber ( 1 ) ; return new RomanNumber ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) return new RomanNumber ( 0 ) ; return new RomanNumber ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) { return new RomanNumber ( 0 ) ; } else { return new RomanNumber ( arg0 ) ; } }",
        "",
        "",
        "public static String int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) return \"srini_string\" ; else return \"srini_string\" ; }",
        "",
        "public static : throw new int_to_mini_roman ( \"srini_string\" ) ; } }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new RomanNumber ( arg0 ) ; }",
        "public static Roman int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new Roman ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" ) ; return new RomanNumber ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) { return new RomanNumber ( 0 ) ; } else { return new RomanNumber ( arg0 ) ; } }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) return new RomanNumber ( 0 ) ; return new RomanNumber ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new RomanNumber ( arg0 ) ; }",
        "public static Roman int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } return new Roman ( arg0 ) ; }",
        "public static Roman int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; } return new Roman ( arg0 ) ; }",
        "public static Roman int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new Roman ( arg0 ) ; }",
        "public static RomanNumber int_to_mini_roman ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; return new RomanNumber ( arg0 ) ; }"
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c; \n}",
      "target": "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b; \n}",
      "function range": "12,5-14,5",
      "raw_output": [
        "boolean function ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) || ( loc0. x >= arg0. x && loc0. y <= arg0. y ) ; }",
        "boolean function ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { double loc0 = arg2. x - arg0. x ; double loc1 = arg2. y - arg0. y ; return ( loc0 * loc0 + loc1 * loc1 ) / 2.0 ; }",
        "boolean function ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) && ( loc1. x >= arg0. x && loc1. y <= arg0. y ) ; }",
        "boolean function ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) && ( loc0. x >= arg0. x && loc0. y <= arg0. y ) ; }",
        "boolean function ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) && ( loc0. z >= arg0. z ) ; }",
        "boolean function ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) || ( loc0. x >= arg0. x && loc0. y <= arg0. y ) ; }",
        "boolean function ( Coordinate arg0, Coordinate arg1, Coordinate arg2, Coordinate arg3 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x - loc1. x ) * ( loc0. y - loc1. y ) - ( loc0. x - loc1. x ) * ( loc0. y - loc1. y ) * ( loc0. x - loc1. x ) ) ; }",
        "boolean function ( Coordinate arg0, Coordinate arg1, Coordinate arg2, Coordinate arg3 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x - loc1. x ) * ( loc0. y - loc1. y ) - ( loc0. x - loc1. x ) * ( loc0. x - loc1. x ) * ( loc0. y - loc1. y ) ) ; }",
        "boolean function ( Coordinate arg0, Coordinate arg1, Coordinate arg2, Coordinate arg3 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x - loc1. x ) * ( loc0. y - loc1. y ) - ( loc0. x - loc1. x ) * ( loc0. x - loc1. x ) ; }",
        "boolean function ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) && ( loc1. x >= arg0. x && loc1. y <= arg0. y ) ; }",
        "boolean function ( Vec2 arg0, Vec2 arg1 ) { if ( arg0. x == arg1. x ) { if ( arg0. y == arg1. y ) { return true ; } else if ( arg0. x == arg1. x ) { return true ; } else if ( arg0. y == arg1. y ) { return true ; } else { return false ; } } }",
        "boolean function ( Vec2 arg0, Vec2 arg1 ) { if ( arg0. x == arg1. x && arg0. y == arg1. y ) { return true ; } else if ( arg0. x == arg1. x && arg0. y == arg1. y ) { return true ; } else { return false ; } }",
        "boolean function ( Vec3 arg0, Vec3 arg1 ) { if ( arg0. x == arg1. x && arg0. y == arg1. y ) { return true ; } else if ( arg0. x == arg1. x && arg0. y == arg1. y ) { return true ; } else { return false ; } }",
        "boolean function ( Vec2 arg0, Vec2 arg1 ) { if ( arg0. x == arg1. x ) { if ( arg0. y == arg1. y ) { return true ; } else if ( arg0. x < arg1. x || arg0. y > arg1. y ) { return false ; } else { return true ; } } else { return false ; } }",
        "boolean function ( Vec2 arg0, Vec2 arg1 ) { if ( arg0. x == arg1. x ) { if ( arg0. y == arg1. y ) { return true ; } else if ( arg0. x < arg1. x || arg0. y > arg1. y ) { return false ; } else { return true ; } } else { return true ; } }",
        "boolean function ( Triangle arg0, Triangle arg1 ) { Triangle loc0 = arg0. clone ( ) ; Triangle loc1 = arg1. clone ( ) ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) return false ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) return false ; return true ; }",
        "boolean function ( Triangle arg0, Triangle arg1 ) { Triangle loc0 = arg0. clone ( ) ; Triangle loc1 = arg1. clone ( ) ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) { return false ; } if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) { return false ; } return true ; }",
        "boolean function ( Triangle arg0, Triangle arg1 ) { Triangle loc0 = arg0. clone ( ) ; Triangle loc1 = arg1. clone ( ) ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) return false ; if ( arg0. x!= loc1. x || arg0. y!= loc1. y ) return false ; return true ; }",
        "boolean function ( Triangle arg0, Triangle arg1 ) { Triangle loc0 = Triangle. rightAngleTriangulation ( arg0, arg1 ) ; Triangle loc1 = Triangle. rightAngleTriangulation ( arg0, arg1 ) ; if ( loc0 == loc1 ) { return true ; } else if ( loc0 == loc1 ) { return true ; } else { return false ; } }",
        "boolean function ( Triangle arg0, Triangle arg1 ) { Triangle loc0 = arg0. clone ( ) ; Triangle loc1 = arg1. clone ( ) ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) return false ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y || loc0. z!= loc1. z ) return false ; return true ; }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) || ( arg1 % arg1 == 0 ) ; } }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else { return ( arg1 % arg0 == 0 )? true : false ; } }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return true ; } else if ( arg1 % arg1 == 0 ) { return true ; } else { return false ; } }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return arg1 == 0 ; } else if ( arg1 % arg1 == 0 ) { return arg0 == arg1 ; } else { return arg0 % arg1 == 0 ; } }",
        "boolean function ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }"
      ],
      "mid_translation": [
        "Returns true if the given three points are on the right side of the triangle.",
        "Returns true if the given three points are on the right side of a triangle.",
        "Returns true if the right - angle triangulation of two vectors is the same.",
        "Returns true if the right - angle triangulation of two triangles is the same.",
        "Returns true if the right - angle triangulation of two integers is the same."
      ],
      "output": [
        "public static boolean right_angle_triangle ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) || ( loc0. x >= arg0. x && loc0. y <= arg0. y ) ; }",
        "public static boolean right_angle_triangle ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { double loc0 = arg2. x - arg0. x ; double loc1 = arg2. y - arg0. y ; return ( loc0 * loc0 + loc1 * loc1 ) / 2.0 ; }",
        "public static boolean right_angle_triangle ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) && ( loc1. x >= arg0. x && loc1. y <= arg0. y ) ; }",
        "public static boolean right_angle_triangle ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) && ( loc0. x >= arg0. x && loc0. y <= arg0. y ) ; }",
        "public static boolean right_angle_triangle ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) && ( loc0. z >= arg0. z ) ; }",
        "public static boolean right_angle_triangle ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) || ( loc0. x >= arg0. x && loc0. y <= arg0. y ) ; }",
        "public static boolean right_angle_triangle ( Coordinate arg0, Coordinate arg1, Coordinate arg2, Coordinate arg3 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x - loc1. x ) * ( loc0. y - loc1. y ) - ( loc0. x - loc1. x ) * ( loc0. y - loc1. y ) * ( loc0. x - loc1. x ) ) ; }",
        "public static boolean right_angle_triangle ( Coordinate arg0, Coordinate arg1, Coordinate arg2, Coordinate arg3 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x - loc1. x ) * ( loc0. y - loc1. y ) - ( loc0. x - loc1. x ) * ( loc0. x - loc1. x ) * ( loc0. y - loc1. y ) ) ; }",
        "public static boolean right_angle_triangle ( Coordinate arg0, Coordinate arg1, Coordinate arg2, Coordinate arg3 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x - loc1. x ) * ( loc0. y - loc1. y ) - ( loc0. x - loc1. x ) * ( loc0. x - loc1. x ) ; }",
        "public static boolean right_angle_triangle ( Coordinate arg0, Coordinate arg1, Coordinate arg2 ) { Coordinate loc0 = new Coordinate ( arg0, arg1, arg2 ) ; Coordinate loc1 = new Coordinate ( arg0, arg1, arg2 ) ; return ( loc0. x >= arg0. x && loc0. y >= arg0. y ) && ( loc1. x >= arg0. x && loc1. y <= arg0. y ) ; }",
        "public static boolean right_angle_triangle ( Vec2 arg0, Vec2 arg1 ) { if ( arg0. x == arg1. x ) { if ( arg0. y == arg1. y ) { return true ; } else if ( arg0. x == arg1. x ) { return true ; } else if ( arg0. y == arg1. y ) { return true ; } else { return false ; } } }",
        "public static boolean right_angle_triangle ( Vec2 arg0, Vec2 arg1 ) { if ( arg0. x == arg1. x && arg0. y == arg1. y ) { return true ; } else if ( arg0. x == arg1. x && arg0. y == arg1. y ) { return true ; } else { return false ; } }",
        "public static boolean right_angle_triangle ( Vec3 arg0, Vec3 arg1 ) { if ( arg0. x == arg1. x && arg0. y == arg1. y ) { return true ; } else if ( arg0. x == arg1. x && arg0. y == arg1. y ) { return true ; } else { return false ; } }",
        "public static boolean right_angle_triangle ( Vec2 arg0, Vec2 arg1 ) { if ( arg0. x == arg1. x ) { if ( arg0. y == arg1. y ) { return true ; } else if ( arg0. x < arg1. x || arg0. y > arg1. y ) { return false ; } else { return true ; } } else { return false ; } }",
        "public static boolean right_angle_triangle ( Vec2 arg0, Vec2 arg1 ) { if ( arg0. x == arg1. x ) { if ( arg0. y == arg1. y ) { return true ; } else if ( arg0. x < arg1. x || arg0. y > arg1. y ) { return false ; } else { return true ; } } else { return true ; } }",
        "public static boolean right_angle_triangle ( Triangle arg0, Triangle arg1 ) { Triangle loc0 = arg0. clone ( ) ; Triangle loc1 = arg1. clone ( ) ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) return false ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) return false ; return true ; }",
        "public static boolean right_angle_triangle ( Triangle arg0, Triangle arg1 ) { Triangle loc0 = arg0. clone ( ) ; Triangle loc1 = arg1. clone ( ) ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) { return false ; } if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) { return false ; } return true ; }",
        "public static boolean right_angle_triangle ( Triangle arg0, Triangle arg1 ) { Triangle loc0 = arg0. clone ( ) ; Triangle loc1 = arg1. clone ( ) ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) return false ; if ( arg0. x!= loc1. x || arg0. y!= loc1. y ) return false ; return true ; }",
        "public static boolean right_angle_triangle ( Triangle arg0, Triangle arg1 ) { Triangle loc0 = Triangle. rightAngleTriangulation ( arg0, arg1 ) ; Triangle loc1 = Triangle. rightAngleTriangulation ( arg0, arg1 ) ; if ( loc0 == loc1 ) { return true ; } else if ( loc0 == loc1 ) { return true ; } else { return false ; } }",
        "public static boolean right_angle_triangle ( Triangle arg0, Triangle arg1 ) { Triangle loc0 = arg0. clone ( ) ; Triangle loc1 = arg1. clone ( ) ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y ) return false ; if ( loc0. x!= loc1. x || loc0. y!= loc1. y || loc0. z!= loc1. z ) return false ; return true ; }",
        "public static boolean right_angle_triangle ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) || ( arg1 % arg1 == 0 ) ; } }",
        "public static boolean right_angle_triangle ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else if ( arg1 == arg0 ) { return true ; } else { return ( arg1 % arg0 == 0 )? true : false ; } }",
        "public static boolean right_angle_triangle ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return true ; } else if ( arg1 % arg1 == 0 ) { return true ; } else { return false ; } }",
        "public static boolean right_angle_triangle ( int arg0, int arg1 ) { if ( arg0 % arg1 == 0 ) { return arg1 == 0 ; } else if ( arg1 % arg1 == 0 ) { return arg0 == arg1 ; } else { return arg0 % arg1 == 0 ; } }",
        "public static boolean right_angle_triangle ( int arg0, int arg1 ) { if ( arg0 == arg1 ) { return true ; } else if ( arg0 < arg1 ) { return false ; } else { return ( arg0 % arg1 == 0 ) ; } }"
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size(); \n        }\n    );\n    return words_list.get(0);\n}",
      "target": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            if (s2.size() != s1.size()) return s2.size() - s1.size(); \n            else return w1.compareTo(w2);\n        }\n    );\n    return words_list.get(0);\n}",
      "function range": "18,5-31,5",
      "raw_output": [
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = find_max ( arg0. get ( loc1 ), arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "List < Integer > function ( List <? extends Integer > arg0 ) { List < Integer > loc0 = null ; for ( Integer loc1 : arg0 ) { loc0 = find_max ( loc0, loc1 ) ; if ( loc0 == null ) loc0 = arg0 ; } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = find_max ( arg0. get ( loc1 ), loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( List <? extends Integer > arg0 ) { List < Integer > loc0 = null ; for ( Integer loc1 : arg0 ) { loc0 = find_max ( loc0, loc1 ) ; if ( loc0 == null ) { loc0 = arg0 ; } } return loc0 ; }",
        "List < Integer > function ( List < Integer > arg0 ) { List < Integer > loc0 = null ; for ( Integer loc1 : arg0 ) { loc0 = find_max ( loc0, loc1 ) ; if ( loc0 == null ) loc0 = arg0 ; } return loc0 ; }",
        "int function ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "int function ( List <? extends E > arg0 ) { int loc0 = 0 ; for ( E loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1. compareTo ( loc0 ) ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1 ) ; } return loc0 ; }",
        "int function ( List <? extends E > arg0 ) { int loc0 = 0 ; for ( E loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Class [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( ) { Class [ ] loc0 = { Integer. class, Float. class } ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < loc0. length ; loc2 ++ ) { if ( loc0 [ loc2 ] > loc1 ) { loc1 = loc2 ; } } return loc1 ; }",
        "int function ( Class [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Class [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( Class [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1 ) ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1 ) ; } return loc0 + 1 ; }",
        "int function ( List <? extends T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) loc0 = loc1 ; } return loc0 + 1 ; }",
        "int function ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) loc0 = loc1 ; } return loc0 + 1 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( arg0. get ( loc1 ) > loc2 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) % arg0. size ( ) ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1 ) ; } return loc0 ; }",
        "int function ( List < Word > arg0 ) { int loc0 = 0 ; for ( Word loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1. word ( ) ) ; } return loc0 ; }",
        "int function ( List < Word > arg0 ) { int loc0 = 0 ; for ( Word loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1. getMin ( ) ) ; } return loc0 ; }",
        "int function ( List < Word > arg0 ) { int loc0 = 0 ; for ( Word loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1. getMin ( ) ) ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Method find_max.",
        "find_max method.",
        "find_max Method.",
        "Find max.",
        "Find the max of words."
      ],
      "output": [
        "public static List < Integer > find_max ( List < Integer > arg0 ) { List < Integer > loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = find_max ( arg0. get ( loc1 ), arg0. get ( loc1 ) ) ; } return loc0 ; }",
        "public static List < Integer > find_max ( List <? extends Integer > arg0 ) { List < Integer > loc0 = null ; for ( Integer loc1 : arg0 ) { loc0 = find_max ( loc0, loc1 ) ; if ( loc0 == null ) loc0 = arg0 ; } return loc0 ; }",
        "public static List < Integer > find_max ( List < Integer > arg0 ) { List < Integer > loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 = find_max ( arg0. get ( loc1 ), loc1 ) ; } return loc0 ; }",
        "public static List < Integer > find_max ( List <? extends Integer > arg0 ) { List < Integer > loc0 = null ; for ( Integer loc1 : arg0 ) { loc0 = find_max ( loc0, loc1 ) ; if ( loc0 == null ) { loc0 = arg0 ; } } return loc0 ; }",
        "public static List < Integer > find_max ( List < Integer > arg0 ) { List < Integer > loc0 = null ; for ( Integer loc1 : arg0 ) { loc0 = find_max ( loc0, loc1 ) ; if ( loc0 == null ) loc0 = arg0 ; } return loc0 ; }",
        "public static int find_max ( T [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 = Math. max ( loc0, arg0 [ loc1 ] ) ; } return loc0 ; }",
        "public static int find_max ( List <? extends E > arg0 ) { int loc0 = 0 ; for ( E loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1. compareTo ( loc0 ) ; } } return loc0 ; }",
        "public static int find_max ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1 ) ; } return loc0 ; }",
        "public static int find_max ( List <? extends E > arg0 ) { int loc0 = 0 ; for ( E loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_max ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { if ( loc1 > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_max ( Class [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_max ( ) { Class [ ] loc0 = { Integer. class, Float. class } ; int loc1 = 0 ; for ( int loc2 = 1 ; loc2 < loc0. length ; loc2 ++ ) { if ( loc0 [ loc2 ] > loc1 ) { loc1 = loc2 ; } } return loc1 ; }",
        "public static int find_max ( Class [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) > loc0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_max ( Class [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_max ( Class [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. compareTo ( arg0 [ loc1 ] ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }",
        "public static int find_max ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1 ) ; } return loc0 ; }",
        "public static int find_max ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1 ) ; } return loc0 + 1 ; }",
        "public static int find_max ( List <? extends T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) loc0 = loc1 ; } return loc0 + 1 ; }",
        "public static int find_max ( List < T > arg0 ) { int loc0 = 0 ; for ( T loc1 : arg0 ) { if ( loc1. compareTo ( loc0 ) > 0 ) loc0 = loc1 ; } return loc0 + 1 ; }",
        "public static int find_max ( List < Integer > arg0 ) { int loc0 = arg0. size ( ) ; for ( int loc1 = 1 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0. get ( loc1 ) ; if ( arg0. get ( loc1 ) > loc2 ) { loc0 = loc1 ; } } return ( loc0 + 1 ) % arg0. size ( ) ; }",
        "public static int find_max ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1 ) ; } return loc0 ; }",
        "public static int find_max ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1 ) ; } return loc0 ; }",
        "public static int find_max ( List < Word > arg0 ) { int loc0 = 0 ; for ( Word loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1. word ( ) ) ; } return loc0 ; }",
        "public static int find_max ( List < Word > arg0 ) { int loc0 = 0 ; for ( Word loc1 : arg0 ) { loc0 = Math. loc0 ( loc0, loc1. getMin ( ) ) ; } return loc0 ; }",
        "public static int find_max ( List < Word > arg0 ) { int loc0 = 0 ; for ( Word loc1 : arg0 ) { loc0 = Math. max ( loc0, loc1. getMin ( ) ) ; } return loc0 ; }"
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need}; \n}",
      "target": "public static int[] eat(int number, int need, int remaining) {\n    if (need <= remaining) { \n        return new int[] {number + need,  remaining - need};\n    }\n    else {\n        return new int[] {number + remaining , 0};\n    }\n}",
      "function range": "31,5-33,5",
      "raw_output": [
        "String function ( final CharSequence arg0, final int arg1 ) { if ( arg0 == null ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. append ( arg0. charAt ( loc1 ) ) ; } return loc0. toString ( ) ; }",
        "String function ( final CharSequence arg0, final int arg1 ) { if ( arg0 == null ) { return \"srini_string\" ; } final StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. append ( arg0. charAt ( loc1 ) ) ; } return loc0. toString ( ) ; }",
        "String function ( final CharSequence arg0, final int arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. append ( arg0. charAt ( loc1 ) ) ; } return loc0. toString ( ) ; }",
        "String function ( final CharSequence arg0, final int arg1 ) { if ( arg0 == null ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; ++ loc1 ) { loc0. append ( arg0. charAt ( loc1 ) ) ; } return loc0. toString ( ) ; }",
        "String function ( final CharSequence arg0, final int arg1 ) { if ( arg0 == null ) { return \"srini_string\" ; } final StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; ++ loc1 ) { loc0. append ( arg0. charAt ( loc1 ) ) ; } return loc0. toString ( ) ; }",
        "int function ( final Seq < Integer > arg0, final int arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } final int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "int function ( final Seq < Integer > arg0, final int arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } final int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { final int loc2 = arg0. next ( ) ; loc0 += loc2 ; } return loc0 ; }",
        "int function ( final Seq < Integer > arg0, final int arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } final int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "int function ( final Seq < Integer > arg0, final int arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } final int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { final int loc2 = arg0. next ( ) ; loc0 += loc2 ; } return loc0 ; }",
        "int function ( final Seq < Integer > arg0, final int arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } final int loc0 = 0 ; for ( final Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int... arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int... arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "int function ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "String function ( int arg0, int arg1, int arg2 ) { char [ ] loc0 = new char [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { loc0 [ loc1 ] = ( char ) arg0. charAt ( loc1 ) ; } return new String ( loc0, 0, arg2 ) ; }",
        "String function ( int arg0, int arg1, int arg2 ) { char [ ] loc0 = new char [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; ++ loc1 ) { loc0 [ loc1 ] = ( char ) arg0. charAt ( loc1 ) ; } return new String ( loc0, 0, arg2 ) ; }",
        "String function ( int arg0, int arg1, int arg2 ) { char [ ] loc0 = new char [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { loc0 [ loc1 ] = ( char ) arg0. charAt ( loc1 ) ; } return new String ( loc0, 0, loc0. length ) ; }",
        "String function ( int arg0, int arg1, int arg2 ) { char [ ] loc0 = new char [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; ++ loc1 ) { loc0 [ loc1 ] = ( char ) arg0. charAt ( loc1 ) ; } return new String ( loc0, 0, loc0. length ) ; }",
        "String function ( int arg0, int arg1, int arg2 ) { char [ ] loc0 = new char [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { loc0 [ loc1 ] = ( char ) arg0. charAt ( loc1 ++ ) ; } return new String ( loc0, 0, arg2 ) ; }",
        "int [ ] function ( int arg0, byte [ ] arg1 ) { int [ ] loc0 = new int [ arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg1. length ; loc1 ++ ) { loc0 [ loc1 ] = ( int ) arg1 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int arg0, byte [ ] arg1 ) { int [ ] loc0 = new int [ arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg1. length ; loc1 ++ ) { loc0 [ loc1 ] = ( byte ) arg1 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int arg0, int arg1 ) { int [ ] loc0 = new int [ arg1 ] ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 [ loc1 ] = ( int ) arg0 ; } return loc0 ; }",
        "int [ ] function ( int arg0, byte [ ] arg1 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = ( int ) arg1 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int arg0, int arg1 ) { int [ ] loc0 = new int [ arg1 ] ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 [ loc1 ] = ( int ) ( arg0 >> 24 ) ; arg0 >>= 8 ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Eats a sequence of characters from a sequence of characters.",
        "Eats a sequence of integers from a sequence of integers.",
        "Eats a sequence of integers.",
        "Eats the specified number of characters from the specified position.",
        "Eats a sequence of integers from a given number of bytes."
      ],
      "output": [
        "public static String eat ( final CharSequence arg0, final int arg1 ) { if ( arg0 == null ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. append ( arg0. charAt ( loc1 ) ) ; } return loc0. toString ( ) ; }",
        "public static String eat ( final CharSequence arg0, final int arg1 ) { if ( arg0 == null ) { return \"srini_string\" ; } final StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. append ( arg0. charAt ( loc1 ) ) ; } return loc0. toString ( ) ; }",
        "public static String eat ( final CharSequence arg0, final int arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0. append ( arg0. charAt ( loc1 ) ) ; } return loc0. toString ( ) ; }",
        "public static String eat ( final CharSequence arg0, final int arg1 ) { if ( arg0 == null ) { return \"srini_string\" ; } StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; ++ loc1 ) { loc0. append ( arg0. charAt ( loc1 ) ) ; } return loc0. toString ( ) ; }",
        "public static String eat ( final CharSequence arg0, final int arg1 ) { if ( arg0 == null ) { return \"srini_string\" ; } final StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; ++ loc1 ) { loc0. append ( arg0. charAt ( loc1 ) ) ; } return loc0. toString ( ) ; }",
        "public static int eat ( final Seq < Integer > arg0, final int arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } final int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static int eat ( final Seq < Integer > arg0, final int arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } final int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { final int loc2 = arg0. next ( ) ; loc0 += loc2 ; } return loc0 ; }",
        "public static int eat ( final Seq < Integer > arg0, final int arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } final int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { loc0 += arg0. get ( loc1 ) ; } return loc0 ; }",
        "public static int eat ( final Seq < Integer > arg0, final int arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( \"srini_string\" ) ; } final int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { final int loc2 = arg0. next ( ) ; loc0 += loc2 ; } return loc0 ; }",
        "public static int eat ( final Seq < Integer > arg0, final int arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( \"srini_string\" ) ; } final int loc0 = 0 ; for ( final Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static int [ ] eat ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] eat ( int... arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] eat ( int... arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] eat ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; ++ loc1 ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static int eat ( int... arg0 ) { int loc0 = 0 ; for ( int loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }",
        "public static String eat ( int arg0, int arg1, int arg2 ) { char [ ] loc0 = new char [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { loc0 [ loc1 ] = ( char ) arg0. charAt ( loc1 ) ; } return new String ( loc0, 0, arg2 ) ; }",
        "public static String eat ( int arg0, int arg1, int arg2 ) { char [ ] loc0 = new char [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; ++ loc1 ) { loc0 [ loc1 ] = ( char ) arg0. charAt ( loc1 ) ; } return new String ( loc0, 0, arg2 ) ; }",
        "public static String eat ( int arg0, int arg1, int arg2 ) { char [ ] loc0 = new char [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { loc0 [ loc1 ] = ( char ) arg0. charAt ( loc1 ) ; } return new String ( loc0, 0, loc0. length ) ; }",
        "public static String eat ( int arg0, int arg1, int arg2 ) { char [ ] loc0 = new char [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; ++ loc1 ) { loc0 [ loc1 ] = ( char ) arg0. charAt ( loc1 ) ; } return new String ( loc0, 0, loc0. length ) ; }",
        "public static String eat ( int arg0, int arg1, int arg2 ) { char [ ] loc0 = new char [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { loc0 [ loc1 ] = ( char ) arg0. charAt ( loc1 ++ ) ; } return new String ( loc0, 0, arg2 ) ; }",
        "public static int [ ] eat ( int arg0, byte [ ] arg1 ) { int [ ] loc0 = new int [ arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg1. length ; loc1 ++ ) { loc0 [ loc1 ] = ( int ) arg1 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] eat ( int arg0, byte [ ] arg1 ) { int [ ] loc0 = new int [ arg1. length ] ; for ( int loc1 = 0 ; loc1 < arg1. length ; loc1 ++ ) { loc0 [ loc1 ] = ( byte ) arg1 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] eat ( int arg0, int arg1 ) { int [ ] loc0 = new int [ arg1 ] ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 [ loc1 ] = ( int ) arg0 ; } return loc0 ; }",
        "public static int [ ] eat ( int arg0, byte [ ] arg1 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = ( int ) arg1 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] eat ( int arg0, int arg1 ) { int [ ] loc0 = new int [ arg1 ] ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 [ loc1 ] = ( int ) ( arg0 >> 24 ) ; arg0 >>= 8 ; } return loc0 ; }"
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\"; \n    for (int i = 0; i < operand.length; i += 1) { \n        expression += operator[i] + operand[i]; \n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
      "target": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = operand[0] + \"\"; \n    for (int i = 0; i < operator.length; i += 1) { \n        expression += operator[i] + operand[i + 1]; \n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
      "function range": "30,5-38,5",
      "raw_output": [
        "int [ ] function ( String [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ]. trim ( ) ; return loc0 ; }",
        "int [ ] function ( String [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ]. toUpperCase ( ) ; return loc0 ; }",
        "int [ ] function ( String [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. trim ( ) ; } return loc0 ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ]. hashCode ( ) ; return loc0 ; }",
        "int [ ] function ( String [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ]. hashCode ( ) ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = loc1 ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = arg0 [ loc2 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; loc1 ++ ; } return loc0 ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) { loc0 ++ ; } } return loc0 ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 ++ ; else loc0 ++ ; } return loc0 ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ]. hashCode ( ) ; return loc0 ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 ++ ; } return loc0 ; }",
        "int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ]. hashCode ( ) ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "int function ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "int function ( Number [ ] arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "int function ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "int function ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }"
      ],
      "mid_translation": [
        "Do an algebra on an array of strings.",
        "Do an algebra on a set of integers.",
        "Do an algebra on a sequence of integers.",
        "Do an algebra on an array of strings",
        "Do an algebra on a set of numbers."
      ],
      "output": [
        "public static int [ ] do_algebra ( String [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ]. trim ( ) ; return loc0 ; }",
        "public static int [ ] do_algebra ( String [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ]. toUpperCase ( ) ; return loc0 ; }",
        "public static int [ ] do_algebra ( String [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ]. trim ( ) ; } return loc0 ; }",
        "public static int do_algebra ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ]. hashCode ( ) ; return loc0 ; }",
        "public static int [ ] do_algebra ( String [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ]. hashCode ( ) ; return loc0 ; }",
        "public static int [ ] do_algebra ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] do_algebra ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = loc1 ; return loc0 ; }",
        "public static int [ ] do_algebra ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] do_algebra ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] do_algebra ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] do_algebra ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] do_algebra ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int [ ] do_algebra ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) loc0 [ loc2 ] = arg0 [ loc2 ] ; return loc0 ; }",
        "public static int [ ] do_algebra ( int [ ] arg0, int arg1 ) { int [ ] loc0 = new int [ arg0. length ] ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }",
        "public static int [ ] do_algebra ( int [ ] arg0 ) { int [ ] loc0 = new int [ arg0. length ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < arg0. length ; loc2 ++ ) { loc0 [ loc2 ] = arg0 [ loc2 ] ; loc1 ++ ; } return loc0 ; }",
        "public static int do_algebra ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) { loc0 ++ ; } } return loc0 ; }",
        "public static int do_algebra ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 ++ ; else loc0 ++ ; } return loc0 ; }",
        "public static int do_algebra ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ]. hashCode ( ) ; return loc0 ; }",
        "public static int do_algebra ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { if ( arg0 [ loc1 ]. equals ( \"srini_string\" ) ) loc0 ++ ; } return loc0 ; }",
        "public static int do_algebra ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ]. hashCode ( ) ; } return loc0 ; }",
        "public static int do_algebra ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }",
        "public static int do_algebra ( Number... arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static int do_algebra ( Number [ ] arg0 ) { int loc0 = 0 ; for ( Number loc1 : arg0 ) { loc0 += loc1. doubleValue ( ) ; } return loc0 ; }",
        "public static int do_algebra ( int [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) loc0 += arg0 [ loc1 ] ; return loc0 ; }",
        "public static int do_algebra ( int [ ] arg0, int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0. length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] ; } return loc0 ; }"
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c)); \n        else sb.append(Character.toLowerCase(c)); \n        flg = 1; \n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
      "target": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isAlphabetic(c)){ \n            if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c)); \n            else sb.append(Character.toLowerCase(c)); \n            flg = 1;\n        }\n        else sb.append(c);\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "raw_output": [
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; return arg0 ; }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; return \"srini_string\" ; }",
        "String function ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return arg0 ; } }",
        "String function ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "List < String > function ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( \"srini_string\" ) ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "int function ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0. compareTo ( arg1 ) ; } else if ( loc0 < 0 ) { return arg0. compareTo ( arg1 ) ; } else { return loc0 ; } }",
        "int function ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0. compareTo ( arg1 ) ; } else if ( loc0 > 0 ) { return arg0. compareTo ( arg1 ) ; } else { return 0 ; } }",
        "String function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return arg0 ; } else if ( arg0. compareTo ( arg1 ) == 0 ) { return \"srini_string\" ; } else if ( arg0. compareTo ( arg1 ) == 0 ) { return arg1 ; } else { return arg0 ; } }",
        "int function ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0. compareTo ( \"srini_string\" ) ; } else if ( loc0 < 0 ) { return arg0. compareTo ( \"srini_string\" ) ; } else { return loc0 ; } }",
        "int function ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0. compareTo ( arg1 ) ; } else if ( loc0 > 0 ) { return arg0. compareTo ( arg1 ) ; } else { return loc0 ; } }",
        "String function ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0 ; } else if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 > 0 ) { return arg0. substring ( 0, loc0 ) ; } else { return arg0 ; } }",
        "String function ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0 ; } else if ( loc0 > 0 ) { return arg0. substring ( 0, loc0 ) ; } else { return arg0 ; } }",
        "String function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return arg0 ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return arg1 ; } else { return arg0 ; } }",
        "String function ( String arg0, String arg1 ) { return arg0. substring ( 0, arg0. length ( ) - arg1. length ( ) ) ; }",
        "String function ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0 ; } else if ( loc0 < 0 ) { return arg0 + arg1 ; } else { return arg0 + arg1 ; } }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; return arg0. equals ( \"srini_string\" ) ; }",
        "boolean function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return true ; } else if ( arg0. equals ( \"srini_string\" ) ) { if ( arg1. equals ( \"srini_string\" ) ) { return true ; } else { return false ; } } else { return false ; } }",
        "boolean function ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "String function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return arg1 ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return arg1. substring ( 0, arg1. length ( ) - 1 ) ; } else { return arg1 ; } }",
        "String function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return arg0 ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return arg1. substring ( 0, arg1. length ( ) - 1 ) ; } else { return arg0 ; } }",
        "String function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return arg0 ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else { return arg0 ; } }",
        "String function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return arg1 ; } else { return arg0 ; } }",
        "String function ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return arg1 ; } else { return arg0 ; } }"
      ],
      "mid_translation": [
        "Solves a string.",
        "Solves a string that is the same as the given string.",
        "Solves a string that is the same as the input string.",
        "Solves a string that is the same as a String.",
        "Solves a string that is the same as the given String."
      ],
      "output": [
        "public static String solve_string ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; return arg0 ; }",
        "public static String solve_string ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; if ( arg0. equals ( \"srini_string\" ) ) return \"srini_string\" ; return \"srini_string\" ; }",
        "public static String solve_string ( String arg0 ) { if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else if ( arg0. equals ( \"srini_string\" ) ) { return \"srini_string\" ; } else { return arg0 ; } }",
        "public static String solve_string ( String arg0 ) { int loc0 = arg0. loc0 ( ) ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = arg0. charAt ( loc2 ) ; } return new String ( loc1 ) ; }",
        "public static List < String > solve_string ( List < String > arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0. size ( ) ; loc1 ++ ) { if ( arg0. get ( loc1 ). equals ( \"srini_string\" ) ) { loc0. add ( arg0. get ( loc1 ) ) ; } } return loc0 ; }",
        "public static int solve_string ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0. compareTo ( arg1 ) ; } else if ( loc0 < 0 ) { return arg0. compareTo ( arg1 ) ; } else { return loc0 ; } }",
        "public static int solve_string ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0. compareTo ( arg1 ) ; } else if ( loc0 > 0 ) { return arg0. compareTo ( arg1 ) ; } else { return 0 ; } }",
        "public static String solve_string ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return arg0 ; } else if ( arg0. compareTo ( arg1 ) == 0 ) { return \"srini_string\" ; } else if ( arg0. compareTo ( arg1 ) == 0 ) { return arg1 ; } else { return arg0 ; } }",
        "public static int solve_string ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0. compareTo ( \"srini_string\" ) ; } else if ( loc0 < 0 ) { return arg0. compareTo ( \"srini_string\" ) ; } else { return loc0 ; } }",
        "public static int solve_string ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0. compareTo ( arg1 ) ; } else if ( loc0 > 0 ) { return arg0. compareTo ( arg1 ) ; } else { return loc0 ; } }",
        "public static String solve_string ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0 ; } else if ( loc0 < 0 ) { return \"srini_string\" ; } else if ( loc0 > 0 ) { return arg0. substring ( 0, loc0 ) ; } else { return arg0 ; } }",
        "public static String solve_string ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0 ; } else if ( loc0 > 0 ) { return arg0. substring ( 0, loc0 ) ; } else { return arg0 ; } }",
        "public static String solve_string ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return arg0 ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return arg1 ; } else { return arg0 ; } }",
        "public static String solve_string ( String arg0, String arg1 ) { return arg0. substring ( 0, arg0. length ( ) - arg1. length ( ) ) ; }",
        "public static String solve_string ( String arg0, String arg1 ) { int loc0 = arg0. compareTo ( arg1 ) ; if ( loc0 == 0 ) { return arg0 ; } else if ( loc0 < 0 ) { return arg0 + arg1 ; } else { return arg0 + arg1 ; } }",
        "public static boolean solve_string ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "public static boolean solve_string ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "public static boolean solve_string ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; return arg0. equals ( \"srini_string\" ) ; }",
        "public static boolean solve_string ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return true ; } else if ( arg0. equals ( \"srini_string\" ) ) { if ( arg1. equals ( \"srini_string\" ) ) { return true ; } else { return false ; } } else { return false ; } }",
        "public static boolean solve_string ( String arg0 ) { if ( arg0 == null ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; if ( arg0. equals ( \"srini_string\" ) ) return false ; if ( arg0. equals ( \"srini_string\" ) ) return true ; return false ; }",
        "public static String solve_string ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return arg1 ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return arg1. substring ( 0, arg1. length ( ) - 1 ) ; } else { return arg1 ; } }",
        "public static String solve_string ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return arg0 ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return arg1. substring ( 0, arg1. length ( ) - 1 ) ; } else { return arg0 ; } }",
        "public static String solve_string ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return arg0 ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else { return arg0 ; } }",
        "public static String solve_string ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return arg1 ; } else { return arg0 ; } }",
        "public static String solve_string ( String arg0, String arg1 ) { if ( arg0. equals ( arg1 ) ) { return \"srini_string\" ; } else if ( arg0. equals ( arg1 ) ) { return arg1 ; } else { return arg0 ; } }"
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\"); \n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
      "target": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\"); \n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
      "function range": "13,5-20,5",
      "raw_output": [
        "byte [ ] function ( String arg0 ) { return MD5. digest ( arg0 ) ; }",
        "String function ( String arg0 ) { return MD5. digest ( arg0 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0. getBytes ( ) ) ; }",
        "byte [ ] function ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0. getBytes ( ) ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0 ) ; }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( loc0. toString ( ) ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0. getBytes ( ) ) ; }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( loc0. toString ( ) ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0 ) ; }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( loc0. toString ( ) ) ; } }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( loc0. toString ( ) ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0. getBytes ( ) ) ; }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( loc0. toString ( ) ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } byte [ ] loc0 = MD5. digest ( arg0 ) ; return new String ( loc0 ) ; }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0 ) ; }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0 ) ; }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( loc0. toString ( ) ) ; } }",
        "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0. getBytes ( ) ) ; }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "String function ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( loc0. toString ( ) ) ; } }"
      ],
      "mid_translation": [
        "Returns the MD5 hash of the given text.",
        "Converts a string to a MD5 hash.",
        "Converts a string to an MD5 hash.",
        "Converts a string to a MD5 encoded string.",
        "Converts a string to an MD5 hash string."
      ],
      "output": [
        "public static byte [ ] string_to_md5 ( String arg0 ) { return MD5. digest ( arg0 ) ; }",
        "public static String string_to_md5 ( String arg0 ) { return MD5. digest ( arg0 ) ; }",
        "public static String string_to_md5 ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0 ) ; }",
        "public static String string_to_md5 ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0. getBytes ( ) ) ; }",
        "public static byte [ ] string_to_md5 ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0. getBytes ( ) ) ; }",
        "public static String string_to_md5 ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0 ) ; }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( loc0. toString ( ) ) ; } }",
        "public static String string_to_md5 ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0. getBytes ( ) ) ; }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( loc0. toString ( ) ) ; } }",
        "public static String string_to_md5 ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0 ) ; }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( loc0. toString ( ) ) ; } }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( loc0. toString ( ) ) ; } }",
        "public static String string_to_md5 ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0. getBytes ( ) ) ; }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( loc0. toString ( ) ) ; } }",
        "public static String string_to_md5 ( String arg0 ) { if ( arg0 == null ) { return null ; } byte [ ] loc0 = MD5. digest ( arg0 ) ; return new String ( loc0 ) ; }",
        "public static String string_to_md5 ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0 ) ; }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( \"srini_string\", loc0 ) ; } }",
        "public static String string_to_md5 ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0 ) ; }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( loc0. toString ( ) ) ; } }",
        "public static String string_to_md5 ( String arg0 ) { if ( arg0 == null ) { return null ; } return MD5. digest ( arg0. getBytes ( ) ) ; }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( \"srini_string\", loc0 ) ; } }",
        "public static String string_to_md5 ( String arg0 ) { try { return MD5. digest ( arg0 ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new Error ( loc0. toString ( ) ) ; } }"
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a); \n    int upper = Math.min(8, b); \n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
      "target": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, Math.min(a, b)); \n    int upper = Math.min(8, Math.max(a, b)); \n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
      "function range": "14,5-23,5",
      "raw_output": [
        "int [ ] function ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "int [ ] function ( int arg0, int arg1 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = arg1 ; } return loc0 ; }",
        "int [ ] function ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "int [ ] function ( int arg0, int arg1 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "int [ ] function ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = arg0 ; } return loc0 ; }",
        "List < Integer > function ( int arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( arg1 ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( arg1 ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "ArrayList < Integer > function ( int arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( int arg0 ) { java. util. ArrayList loc0 = new java. util. ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( int arg0 ) { ArrayList < Integer > loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "ArrayList < Integer > function ( int arg0 ) { java. util. ArrayList loc0 = new java. util. ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( ( int ) arg0 ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = arg0 ; loc1 <= arg1 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = arg0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 ; for ( loc1 = arg0 ; loc1 <= arg1 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "List < Integer > function ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 = arg0 ; for ( int loc2 = 0 ; loc2 < arg0 ; loc2 ++ ) { loc0. add ( loc2 ) ; loc1 ++ ; } return loc0 ; }",
        "int [ ] function ( int arg0, int arg1 ) { int loc0 = ( arg0 >> arg1 ) ; int loc1 = ( arg0 >> arg1 ) ; int loc2 = ( arg0 >> arg1 ) ; int loc3 = ( arg0 >> arg1 ) ; int loc4 = ( arg0 >> arg1 ) ; int loc5 = ( arg0 >> arg1 ) ; return new int [ ] { loc0, loc1, loc2, loc3 } ; }",
        "int [ ] function ( int arg0, int arg1 ) { int loc0 = ( arg0 >> arg1 ) ; int loc1 = ( arg0 >> arg1 ) ; int loc2 = ( arg0 >> arg1 ) ; int loc3 = ( arg0 >> arg1 ) ; int loc4 = ( arg0 >> arg1 ) ; int loc5 = ( arg0 >> arg1 ) ; int loc6 = ( arg0 >> arg1 ) ; return new int [ ] { loc2, loc3, loc4, loc5 } ; }",
        "int [ ] function ( int arg0, int arg1 ) { int loc0 = ( arg0 >> arg1 ) ; int loc1 = ( arg0 >> arg1 ) ; int loc2 = ( arg0 >> arg1 ) ; int loc3 = ( arg0 >> arg1 ) ; int loc4 = ( arg0 >> arg1 ) ; int loc5 = ( arg0 >> arg1 ) ; int loc6 = ( arg0 >> arg1 ) ; return new int [ loc0, loc1, loc2, loc3 ) ; }",
        "int [ ] function ( int arg0, int arg1 ) { int loc0 = ( arg0 >> arg1 ) ; int loc1 = ( arg0 >> arg1 ) ; int loc2 = ( arg0 >> arg1 ) ; int loc3 = ( arg0 >> arg1 ) ; int loc4 = ( arg0 >> arg1 ) ; return new int [ ] { loc0, loc1, loc2, loc3 } ; }",
        "int [ ] function ( int arg0, int arg1 ) { int loc0 = ( arg0 >> arg1 ) ; int loc1 = ( arg0 >> arg1 ) ; int loc2 = ( arg0 >> arg1 ) ; int loc3 = ( arg0 >> arg1 ) ; int loc4 = ( arg0 >> arg1 ) ; int loc5 = ( arg0 >> arg1 ) ; int loc6 = ( arg0 >> arg1 ) ; return new int [ ] { loc0, loc1, loc2, loc3 } ; }"
      ],
      "mid_translation": [
        "Generate an array of integers.",
        "Generate a list of integers.",
        "Generate an ArrayList of integers.",
        "Generate a list of integers in the range [ a b )",
        "Generate an array of integers from 2 to 8."
      ],
      "output": [
        "public static int [ ] generate_integers ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "public static int [ ] generate_integers ( int arg0, int arg1 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = arg1 ; } return loc0 ; }",
        "public static int [ ] generate_integers ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < loc0. length ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "public static int [ ] generate_integers ( int arg0, int arg1 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "public static int [ ] generate_integers ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = arg0 ; } return loc0 ; }",
        "public static List < Integer > generate_integers ( int arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > generate_integers ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( arg1 ) ; } return loc0 ; }",
        "public static List < Integer > generate_integers ( int arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > generate_integers ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( arg1 ) ; } return loc0 ; }",
        "public static List < Integer > generate_integers ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static ArrayList < Integer > generate_integers ( int arg0 ) { int [ ] loc0 = new int [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = loc1 ; } return loc0 ; }",
        "public static ArrayList < Integer > generate_integers ( int arg0 ) { ArrayList < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static ArrayList < Integer > generate_integers ( int arg0 ) { java. util. ArrayList loc0 = new java. util. ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static ArrayList < Integer > generate_integers ( int arg0 ) { ArrayList < Integer > loc0 = new ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static ArrayList < Integer > generate_integers ( int arg0 ) { java. util. ArrayList loc0 = new java. util. ArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( ( int ) arg0 ) ; } return loc0 ; }",
        "public static List < Integer > generate_integers ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = arg0 ; loc1 <= arg1 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > generate_integers ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = arg0 ; loc1 < arg1 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > generate_integers ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > generate_integers ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 ; for ( loc1 = arg0 ; loc1 <= arg1 ; loc1 ++ ) { loc0. add ( loc1 ) ; } return loc0 ; }",
        "public static List < Integer > generate_integers ( int arg0, int arg1 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; int loc1 = arg0 ; for ( int loc2 = 0 ; loc2 < arg0 ; loc2 ++ ) { loc0. add ( loc2 ) ; loc1 ++ ; } return loc0 ; }",
        "public static int [ ] generate_integers ( int arg0, int arg1 ) { int loc0 = ( arg0 >> arg1 ) ; int loc1 = ( arg0 >> arg1 ) ; int loc2 = ( arg0 >> arg1 ) ; int loc3 = ( arg0 >> arg1 ) ; int loc4 = ( arg0 >> arg1 ) ; int loc5 = ( arg0 >> arg1 ) ; return new int [ ] { loc0, loc1, loc2, loc3 } ; }",
        "public static int [ ] generate_integers ( int arg0, int arg1 ) { int loc0 = ( arg0 >> arg1 ) ; int loc1 = ( arg0 >> arg1 ) ; int loc2 = ( arg0 >> arg1 ) ; int loc3 = ( arg0 >> arg1 ) ; int loc4 = ( arg0 >> arg1 ) ; int loc5 = ( arg0 >> arg1 ) ; int loc6 = ( arg0 >> arg1 ) ; return new int [ ] { loc2, loc3, loc4, loc5 } ; }",
        "public static int [ ] generate_integers ( int arg0, int arg1 ) { int loc0 = ( arg0 >> arg1 ) ; int loc1 = ( arg0 >> arg1 ) ; int loc2 = ( arg0 >> arg1 ) ; int loc3 = ( arg0 >> arg1 ) ; int loc4 = ( arg0 >> arg1 ) ; int loc5 = ( arg0 >> arg1 ) ; int loc6 = ( arg0 >> arg1 ) ; return new int [ loc0, loc1, loc2, loc3 ) ; }",
        "public static int [ ] generate_integers ( int arg0, int arg1 ) { int loc0 = ( arg0 >> arg1 ) ; int loc1 = ( arg0 >> arg1 ) ; int loc2 = ( arg0 >> arg1 ) ; int loc3 = ( arg0 >> arg1 ) ; int loc4 = ( arg0 >> arg1 ) ; return new int [ ] { loc0, loc1, loc2, loc3 } ; }",
        "public static int [ ] generate_integers ( int arg0, int arg1 ) { int loc0 = ( arg0 >> arg1 ) ; int loc1 = ( arg0 >> arg1 ) ; int loc2 = ( arg0 >> arg1 ) ; int loc3 = ( arg0 >> arg1 ) ; int loc4 = ( arg0 >> arg1 ) ; int loc5 = ( arg0 >> arg1 ) ; int loc6 = ( arg0 >> arg1 ) ; return new int [ ] { loc0, loc1, loc2, loc3 } ; }"
      ]
    }
  },
  "model": "codet5-java-nl-java",
  "seed": 770695
}