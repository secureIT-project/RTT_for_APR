{
  "config": "CODET5_REFINE_CODEFORM_NOCOMMENT",
  "data": {
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"\".length(); j += 1){ \n                if (i + \"\".substring(j, j + 1) == \"7\") \n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "target": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < (i + \"\").length(); j += 1){ \n                if ((i + \"\").substring(j, j + 1).equals(\"7\")) \n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-16,5",
      "raw_output": [
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static final int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static final int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . charAt ( j ) == \"7\" ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . charAt ( j ) == \"7\" ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . charAt ( j ) == '7' ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizzBuzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . charAt ( j ) == '7' ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . charAt ( j ) == \"7\" ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substr ( j , 1 ) == \"7\" ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substr ( j , 1 ) == \"7\" ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public : int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) == \"7\" ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) == \"7\" ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" [ j ] == \"7\" ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . substring ( j , j + 1 ) . equals ( \"7\" ) ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . charAt ( j ) == \"7\" ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . charAt ( j ) == \"7\" ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . charAt ( j ) == '7' ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . charAt ( j ) == '7' ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      for ( int j = 0 ;\n      j < i + \"\" . length ( ) ;\n      j += 1 ) {\n        if ( i + \"\" . charAt ( j ) == \"7\" ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, begin) * poly(xs, end) < 0) { \n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
      "target": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) > 0){ \n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
      "function range": "14,5-32,5",
      "raw_output": [
        "public static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}\n",
        "static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double findZero ( List < Double > xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}\n",
        "public static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double findZero ( List < Double > xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}\n",
        "public static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}\n",
        "public static double findZero ( List < Double > xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double findZero ( List < Double > xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}\n",
        "public static double findZero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}\n"
      ],
      "mid_translation": [
        "double find_zero ( const std :: vector < double > & xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e - 10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}\n",
        "double find_zero ( std :: vector < double > xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e - 10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}\n",
        "double find_zero ( std :: vector < double > & xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e - 10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}\n",
        "template < typename T > T find_zero ( const std :: vector < T > & xs ) {\n  T begin = - 1. ;\n  T end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e - 10 ) {\n    T center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}\n",
        "double find_zero ( std :: vector < double > const & xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e - 10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( List < Double > xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( List < Double > xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( List < Double > xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( List < Double > xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) {\n      begin = center ;\n    }\n    else {\n      end = center ;\n    }\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double find_zero ( double [ ] xs ) {\n  double begin = - 1. ;\n  double end = 1. ;\n  while ( poly ( xs , begin ) * poly ( xs , end ) > 0 ) {\n    begin *= 2. ;\n    end *= 2. ;\n  }\n  while ( end - begin > 1e-10 ) {\n    double center = ( begin + end ) / 2. ;\n    if ( poly ( xs , begin ) * poly ( xs , end ) < 0 ) begin = center ;\n    else end = center ;\n  }\n  return begin ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c); \n    }\n    return distinct.size();\n}",
      "target": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c)); \n    }\n    return distinct.size();\n}",
      "function range": "6,5-14,5",
      "raw_output": [
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( Character c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  HashSet < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  HashSet < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . valueOf ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  HashSet < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . valueOf ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . toUpperCase ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . valueOf ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . valueOf ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( Character c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  HashSet < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . valueOf ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  HashSet < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . valueOf ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . valueOf ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "public static int countDistinctCharacters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . toUpperCase ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n"
      ],
      "mid_translation": [
        "size_t count_distinct_characters ( const std :: string & string ) {\n  std :: set < char > distinct ;\n  for ( auto c : string ) {\n    if ( ! distinct . count ( std :: tolower ( c ) ) ) {\n      distinct . insert ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "int count_distinct_characters ( const std :: string & string ) {\n  std :: set < char > distinct ;\n  for ( char c : string ) {\n    if ( ! distinct . count ( std :: tolower ( c ) ) ) {\n      distinct . insert ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "unsigned countDistinctCharacters ( const String & string ) {\n  HashSet < UChar > distinct ;\n  for ( unsigned i = 0 ;\n  i < string . length ( ) ;\n  ++ i ) {\n    if ( ! distinct . contains ( UChar ( string [ i ] ) ) ) distinct . add ( string [ i ] ) ;\n  }\n  return distinct . size ( ) ;\n}\n",
        "int count_distinct_characters ( const std :: string & string ) {\n  std :: set < char > distinct ;\n  for ( auto c : string ) {\n    if ( ! distinct . count ( std :: tolower ( c ) ) ) {\n      distinct . insert ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}\n",
        "unsigned countDistinctCharacters ( const String & string ) {\n  HashSet < UChar > distinct ;\n  for ( unsigned i = 0 ;\n  i < string . length ( ) ;\n  ++ i ) {\n    if ( ! distinct . contains ( toASCIILower ( string [ i ] ) ) ) distinct . add ( string [ i ] ) ;\n  }\n  return distinct . size ( ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( Character c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  HashSet < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  HashSet < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . valueOf ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  HashSet < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . valueOf ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . toUpperCase ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . valueOf ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . valueOf ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( Character c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  HashSet < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( c ) ) ) distinct . add ( c ) ;\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . valueOf ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  HashSet < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . valueOf ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . toLowerCase ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( ! distinct . contains ( Character . valueOf ( c ) ) ) {\n      distinct . add ( c ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters ( String string ) {\n  Set < Character > distinct = new HashSet < Character > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( ! distinct . contains ( Character . toUpperCase ( string . charAt ( i ) ) ) ) {\n      distinct . add ( string . charAt ( i ) ) ;\n    }\n  }\n  return distinct . size ( ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix); \n    return result;\n}",
      "target": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    for (int i = beginning_of_suffix - 1; i >= 0; i -= 1){ \n        result += String.valueOf(str.charAt(i));\n    }\n    return result;\n}",
      "function range": "12,5-24,5",
      "raw_output": [
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  String result = str ;\n  result += str . substring ( 0 , beginningOfSuffix ) ;\n  return result ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  String result = str ;\n  result += str . substring ( 0 , beginningOfSuffix ) ;\n  return result ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String makePalindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str . length ( ) ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string make_palindrome ( string str ) {\n  if ( str . size ( ) == 0 ) return \"\" ;\n  int beginning_of_suffix = 0 ;\n  while ( ! is_palindrome ( str [ beginning_of_suffix ] ) ) beginning_of_suffix += 1 ;\n  string result = str ;\n  result += str . substr ( 0 , beginning_of_suffix ) ;\n  return result ;\n}\n",
        "string make_palindrome ( string str ) {\n  if ( str . size ( ) == 0 ) return \"\" ;\n  int beginning_of_suffix = 0 ;\n  while ( ! is_palindrome ( str . substr ( beginning_of_suffix ) ) ) beginning_of_suffix += 1 ;\n  string result = str ;\n  result += str . substr ( 0 , beginning_of_suffix ) ;\n  return result ;\n}\n",
        "string make_palindrome ( const string & str ) {\n  if ( str . size ( ) == 0 ) return \"\" ;\n  int beginning_of_suffix = 0 ;\n  while ( ! is_palindrome ( str . substr ( beginning_of_suffix ) ) ) beginning_of_suffix += 1 ;\n  string result = str ;\n  result += str . substr ( 0 , beginning_of_suffix ) ;\n  return result ;\n}\n",
        "string make_palindrome ( string str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginning_of_suffix = 0 ;\n  while ( ! is_palindrome ( str [ beginning_of_suffix ] ) ) beginning_of_suffix += 1 ;\n  string result = str ;\n  result += str . substr ( 0 , beginning_of_suffix ) ;\n  return result ;\n}\n",
        "string make_palindrome ( const string & str ) {\n  if ( str . size ( ) == 0 ) return \"\" ;\n  int beginning_of_suffix = 0 ;\n  while ( ! is_palindrome ( str [ beginning_of_suffix ] ) ) beginning_of_suffix += 1 ;\n  string result = str ;\n  result += str . substr ( 0 , beginning_of_suffix ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  String result = str ;\n  result += str . substring ( 0 , beginningOfSuffix ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . substring ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  String result = str ;\n  result += str . substring ( 0 , beginningOfSuffix ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuffer sb = new StringBuffer ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) return \"\" ;\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String make_palindrome ( String str ) {\n  if ( str . length ( ) == 0 ) {\n    return \"\" ;\n  }\n  int beginningOfSuffix = 0 ;\n  while ( ! is_palindrome ( str . charAt ( beginningOfSuffix ) ) ) {\n    beginningOfSuffix += 1 ;\n  }\n  StringBuilder sb = new StringBuilder ( str . length ( ) ) ;\n  sb . append ( str . substring ( 0 , beginningOfSuffix ) ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i += 3){ \n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
      "target": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length() - s.length() % 3; i += 3){ \n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
      "function range": "8,13-26,13",
      "raw_output": [
        "public static String encodeCyclic ( String s ) {\n  List < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  String [ ] groups = new String [ s . length ( ) / 3 ] ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups [ i ] = s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . length ;\n  i ++ ) {\n    sb . append ( groups [ i ] . substring ( 1 ) ) . append ( groups [ i ] . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  List < String > groups = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  String [ ] groups = new String [ s . length ( ) / 3 ] ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups [ i ] = s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < groups . length ;\n  i ++ ) {\n    sb . append ( groups [ i ] . substring ( 1 ) ) . append ( groups [ i ] . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  List < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  List < String > groups = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  String [ ] groups = new String [ s . length ( ) / 3 ] ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups [ i ] = s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . length ;\n  i ++ ) {\n    sb . append ( groups [ i ] . substring ( 1 ) ) . append ( groups [ i ] . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  List < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) + groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    result += groups . get ( i ) . substring ( 1 ) + groups . get ( i ) . substring ( 0 , 1 ) ;\n  }\n  if ( remain > 0 ) {\n    result += s . substring ( s . length ( ) - remain ) ;\n  }\n  return result ;\n}\n",
        "static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) + groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  List < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String group : groups ) {\n    sb . append ( group . substring ( 1 ) ) . append ( group . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  List < String > groups = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String group : groups ) {\n    sb . append ( group . substring ( 1 ) ) . append ( group . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String group : groups ) {\n    sb . append ( group . substring ( 1 ) ) . append ( group . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  List < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( String group : groups ) {\n    sb . append ( group . substring ( 1 ) ) . append ( group . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  String [ ] groups = new String [ s . length ( ) / 3 ] ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups [ i ] = s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String group : groups ) {\n    sb . append ( group . substring ( 1 ) ) . append ( group . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    result += groups . get ( i ) . substring ( 1 ) + groups . get ( i ) . substring ( 0 , 1 ) ;\n  }\n  if ( remain > 0 ) {\n    result += s . substring ( s . length ( ) - remain ) ;\n  }\n  return result ;\n}\n",
        "public static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String encodeCyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string encode_cyclic ( string s ) {\n  vector < string > groups ;\n  for ( size_t i = 0 ;\n  i < s . size ( ) ;\n  i += 3 ) groups . push_back ( s . substr ( i , min ( s . size ( ) , i + 3 ) ) ) ;\n  size_t remain = s . size ( ) % 3 ;\n  string result ;\n  for ( size_t i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) result += groups [ i ] . substr ( 1 ) + groups [ i ] . substr ( 0 , 1 ) ;\n  if ( remain ) result += s . substr ( s . size ( ) - remain ) ;\n  return result ;\n}\n",
        "string encode_cyclic ( string s ) {\n  vector < string > groups ;\n  for ( size_t i = 0 ;\n  i < s . size ( ) ;\n  i += 3 ) groups . push_back ( s . substr ( i , min ( s . size ( ) , i + 3 ) ) ) ;\n  size_t remain = s . size ( ) % 3 ;\n  string result ;\n  for ( size_t i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) result += groups [ i ] . substr ( 1 ) + groups [ i ] . substr ( 0 , 1 ) ;\n  if ( remain > 0 ) result += s . substr ( s . size ( ) - remain ) ;\n  return result ;\n}\n",
        "String encode_cyclic ( const String & s ) {\n  vector < String > groups ;\n  for ( size_t i = 0 ;\n  i < s . size ( ) ;\n  i += 3 ) groups . push_back ( s . substr ( i , min ( s . size ( ) , i + 3 ) ) ) ;\n  size_t remain = s . size ( ) % 3 ;\n  String result ;\n  for ( size_t i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) result += groups [ i ] . substr ( 1 ) + groups [ i ] . substr ( 0 , 1 ) ;\n  if ( remain ) result += s . substr ( s . size ( ) - remain ) ;\n  return result ;\n}\n",
        "string encode_cyclic ( string s ) {\n  vector < string > groups ;\n  for ( size_t i = 0 ;\n  i < s . size ( ) ;\n  i += 3 ) groups . push_back ( s . substr ( i , min ( s . size ( ) , i + 3 ) ) ) ;\n  size_t remain = s . size ( ) % 3 ;\n  string result ;\n  for ( auto & group : groups ) result += group . substr ( 1 ) + group . substr ( 0 , 1 ) ;\n  if ( remain ) result += s . substr ( s . size ( ) - remain ) ;\n  return result ;\n}\n",
        "String encode_cyclic ( const String & s ) {\n  vector < String > groups ;\n  for ( size_t i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) groups . push_back ( s . substr ( i , min ( s . length ( ) , i + 3 ) ) ) ;\n  size_t remain = s . length ( ) % 3 ;\n  String result ;\n  for ( size_t i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) result += groups [ i ] . substr ( 1 ) + groups [ i ] . substr ( 0 , 1 ) ;\n  if ( remain ) result += s . substr ( s . length ( ) - remain ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "String encode_cyclic ( String s ) {\n  List < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  String [ ] groups = new String [ s . length ( ) / 3 ] ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups [ i ] = s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . length ;\n  i ++ ) {\n    sb . append ( groups [ i ] . substring ( 1 ) ) . append ( groups [ i ] . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  List < String > groups = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  String [ ] groups = new String [ s . length ( ) / 3 ] ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups [ i ] = s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < groups . length ;\n  i ++ ) {\n    sb . append ( groups [ i ] . substring ( 1 ) ) . append ( groups [ i ] . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  List < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  List < String > groups = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  String [ ] groups = new String [ s . length ( ) / 3 ] ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups [ i ] = s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . length ;\n  i ++ ) {\n    sb . append ( groups [ i ] . substring ( 1 ) ) . append ( groups [ i ] . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  List < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) + groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    result += groups . get ( i ) . substring ( 1 ) + groups . get ( i ) . substring ( 0 , 1 ) ;\n  }\n  if ( remain > 0 ) {\n    result += s . substring ( s . length ( ) - remain ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) + groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  List < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String group : groups ) {\n    sb . append ( group . substring ( 1 ) ) . append ( group . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  List < String > groups = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String group : groups ) {\n    sb . append ( group . substring ( 1 ) ) . append ( group . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String group : groups ) {\n    sb . append ( group . substring ( 1 ) ) . append ( group . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  List < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( String group : groups ) {\n    sb . append ( group . substring ( 1 ) ) . append ( group . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  String [ ] groups = new String [ s . length ( ) / 3 ] ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups [ i ] = s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String group : groups ) {\n    sb . append ( group . substring ( 1 ) ) . append ( group . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    result += groups . get ( i ) . substring ( 1 ) + groups . get ( i ) . substring ( 0 , 1 ) ;\n  }\n  if ( remain > 0 ) {\n    result += s . substring ( s . length ( ) - remain ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic ( String s ) {\n  ArrayList < String > groups = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 3 ) {\n    groups . add ( s . substring ( i , Math . min ( s . length ( ) , i + 3 ) ) ) ;\n  }\n  int remain = s . length ( ) % 3 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < groups . size ( ) ;\n  i ++ ) {\n    sb . append ( groups . get ( i ) . substring ( 1 ) ) . append ( groups . get ( i ) . substring ( 0 , 1 ) ) ;\n  }\n  if ( remain > 0 ) {\n    sb . append ( s . substring ( s . length ( ) - remain ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>(); \n    ArrayList<Character> set1 = new ArrayList<Character>(); \n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
      "target": "public static boolean same_chars(String s0, String s1) {\n    HashSet<Character> set0 = new HashSet<Character>(); \n    HashSet<Character> set1 = new HashSet<Character>(); \n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
      "function range": "20,5-31,5",
      "raw_output": [
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) {\n    set0 [ c0 ] = 0 ;\n  }\n  for ( char c1 : s1 ) {\n    set1 [ c1 ] = 0 ;\n  }\n  return set0 . length == set1 . length ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 [ 0 ] = c0 ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 [ 0 ] = c1 ;\n  }\n  return set0 . length == set1 . length ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 [ c0 ] = 0 ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 [ c1 ] = 0 ;\n  }\n  return set0 . length == set1 . length ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) {\n    set0 [ c0 ] = 0 ;\n  }\n  for ( char c1 : s1 ) {\n    set1 [ c1 ] = 0 ;\n  }\n  return set0 . length == set1 . length ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( CharSequence s0 , CharSequence s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean isSameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) set0 . add ( c0 ) ;\n  for ( char c1 : s1 . toCharArray ( ) ) set1 . add ( c1 ) ;\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) set0 . add ( c0 ) ;\n  for ( char c1 : s1 . toCharArray ( ) ) set1 . add ( c1 ) ;\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) set0 [ c0 ] = 0 ;\n  for ( char c1 : s1 ) set1 [ c1 ] = 0 ;\n  return set0 . length == set1 . length ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) set0 [ 0 ] = c0 ;\n  for ( char c1 : s1 ) set1 [ 0 ] = c1 ;\n  return set0 . length == set1 . length ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( Character c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( Character c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) {\n    set0 [ c0 ] = 0 ;\n  }\n  for ( char c1 : s1 ) {\n    set1 [ c1 ] = 0 ;\n  }\n  return set0 . length == set1 . length ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) {\n    set0 [ 0 ] = c0 ;\n  }\n  for ( char c1 : s1 ) {\n    set1 [ 0 ] = c1 ;\n  }\n  return set0 . length == set1 . length ;\n}\n",
        "public static boolean sameChars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 [ c0 ] = 0 ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 [ c1 ] = 0 ;\n  }\n  return set0 . length == set1 . length ;\n}\n"
      ],
      "mid_translation": [
        "bool same_chars ( string s0 , string s1 ) {\n  vector < char > set0 ;\n  vector < char > set1 ;\n  for ( char c0 : s0 ) set0 . push_back ( c0 ) ;\n  for ( char c1 : s1 ) set1 . push_back ( c1 ) ;\n  return set0 == set1 ;\n}\n",
        "bool same_chars ( const string & s0 , const string & s1 ) {\n  vector < char > set0 ;\n  vector < char > set1 ;\n  for ( char c0 : s0 ) set0 . push_back ( c0 ) ;\n  for ( char c1 : s1 ) set1 . push_back ( c1 ) ;\n  return set0 == set1 ;\n}\n",
        "bool same_chars ( const std :: string & s0 , const std :: string & s1 ) {\n  vector < char > set0 ;\n  vector < char > set1 ;\n  for ( char c0 : s0 ) set0 . push_back ( c0 ) ;\n  for ( char c1 : s1 ) set1 . push_back ( c1 ) ;\n  return set0 == set1 ;\n}\n",
        "bool same_chars ( string s0 , string s1 ) {\n  vector < char > set0 ;\n  vector < char > set1 ;\n  for ( char c0 : s0 ) {\n    set0 . push_back ( c0 ) ;\n  }\n  for ( char c1 : s1 ) {\n    set1 . push_back ( c1 ) ;\n  }\n  return set0 == set1 ;\n}\n",
        "bool same_chars ( string s0 , string s1 ) {\n  vector < char > set0 ;\n  vector < char > set1 ;\n  for ( auto c0 : s0 ) set0 . push_back ( c0 ) ;\n  for ( auto c1 : s1 ) set1 . push_back ( c1 ) ;\n  return set0 == set1 ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) {\n    set0 [ c0 ] = 0 ;\n  }\n  for ( char c1 : s1 ) {\n    set1 [ c1 ] = 0 ;\n  }\n  return set0 . length == set1 . length ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 [ 0 ] = c0 ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 [ 0 ] = c1 ;\n  }\n  return set0 . length == set1 . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 [ c0 ] = 0 ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 [ c1 ] = 0 ;\n  }\n  return set0 . length == set1 . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) {\n    set0 [ c0 ] = 0 ;\n  }\n  for ( char c1 : s1 ) {\n    set1 [ c1 ] = 0 ;\n  }\n  return set0 . length == set1 . length ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( CharSequence s0 , CharSequence s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) set0 . add ( c0 ) ;\n  for ( char c1 : s1 . toCharArray ( ) ) set1 . add ( c1 ) ;\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) set0 . add ( c0 ) ;\n  for ( char c1 : s1 . toCharArray ( ) ) set1 . add ( c1 ) ;\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) set0 [ c0 ] = 0 ;\n  for ( char c1 : s1 ) set1 [ c1 ] = 0 ;\n  return set0 . length == set1 . length ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) set0 [ 0 ] = c0 ;\n  for ( char c1 : s1 ) set1 [ 0 ] = c1 ;\n  return set0 . length == set1 . length ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  ArrayList < Character > set0 = new ArrayList < Character > ( ) ;\n  ArrayList < Character > set1 = new ArrayList < Character > ( ) ;\n  for ( Character c0 : s0 . toCharArray ( ) ) {\n    set0 . add ( c0 ) ;\n  }\n  for ( Character c1 : s1 . toCharArray ( ) ) {\n    set1 . add ( c1 ) ;\n  }\n  return set0 . equals ( set1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) {\n    set0 [ c0 ] = 0 ;\n  }\n  for ( char c1 : s1 ) {\n    set1 [ c1 ] = 0 ;\n  }\n  return set0 . length == set1 . length ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 ) {\n    set0 [ 0 ] = c0 ;\n  }\n  for ( char c1 : s1 ) {\n    set1 [ 0 ] = c1 ;\n  }\n  return set0 . length == set1 . length ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars ( String s0 , String s1 ) {\n  char [ ] set0 = new char [ s0 . length ( ) ] ;\n  char [ ] set1 = new char [ s1 . length ( ) ] ;\n  for ( char c0 : s0 . toCharArray ( ) ) {\n    set0 [ c0 ] = 0 ;\n  }\n  for ( char c1 : s1 . toCharArray ( ) ) {\n    set1 [ c1 ] = 0 ;\n  }\n  return set0 . length == set1 . length ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2]; \n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
      "target": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[]{0, 1}; \n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
      "function range": "6,5-13,5",
      "raw_output": [
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( List < Integer > numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static BigInteger [ ] sumProduct ( BigInteger [ ] numbers ) {\n  BigInteger [ ] result = new BigInteger [ 2 ] ;\n  for ( BigInteger n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int result [ ] = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int ... numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static BigInteger [ ] sumProduct ( BigInteger [ ] numbers ) {\n  BigInteger [ ] result = new BigInteger [ 2 ] ;\n  for ( BigInteger n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( List < Integer > numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int result [ ] = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int ... numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( List < Integer > numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int result [ ] = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static BigInteger [ ] sumProduct ( BigInteger [ ] numbers ) {\n  BigInteger [ ] result = new BigInteger [ 2 ] ;\n  for ( BigInteger n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] = n ;\n    result [ 1 ] = n * n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ n ] = n ;\n    result [ n ] = n * n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ n ] = n ;\n    result [ n * n ] = n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ n ] = n ;\n    result [ n ] += n * n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] += n * n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ n ] += n ;\n    result [ n ] *= n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] sumProduct ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ n ] += n ;\n    result [ n - 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public static BigInteger sumProduct ( BigInteger [ ] numbers ) {\n  BigInteger result = BigInteger . ONE ;\n  for ( BigInteger n : numbers ) {\n    result . add ( n ) ;\n    result . multiply ( n ) ;\n  }\n  return result ;\n}\n",
        "public static long [ ] sumProduct ( long [ ] numbers ) {\n  long [ ] result = new long [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    result [ i ] += numbers [ i ] ;\n    result [ i ] *= numbers [ i ] ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < int > sum_product ( vector < int > numbers ) {\n  vector < int > result ( 2 ) ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public : vector < int > sum_product ( vector < int > numbers ) {\n  vector < int > result ( 2 ) ;\n  for ( auto n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public : vector < int > sumProduct ( vector < int > numbers ) {\n  vector < int > result ( 2 ) ;\n  for ( auto n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}\n",
        "public : vector < int > sum_product ( vector < int > numbers ) {\n  vector < int > result ;\n  for ( int n : numbers ) {\n    result . push_back ( n ) ;\n    result . push_back ( n * n ) ;\n  }\n  return result ;\n}\n",
        "public : vector < int > sum_product ( vector < int > numbers ) {\n  vector < int > result ;\n  for ( auto n : numbers ) {\n    result += n ;\n    result *= n ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( List < Integer > numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static BigInteger [ ] sum_product ( BigInteger [ ] numbers ) {\n  BigInteger [ ] result = new BigInteger [ 2 ] ;\n  for ( BigInteger n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int result [ ] = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int ... numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static BigInteger [ ] sum_product ( BigInteger [ ] numbers ) {\n  BigInteger [ ] result = new BigInteger [ 2 ] ;\n  for ( BigInteger n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sum_product ( List < Integer > numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int result [ ] = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int ... numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( List < Integer > numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int result [ ] = new int [ 2 ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static BigInteger [ ] sum_product ( BigInteger [ ] numbers ) {\n  BigInteger [ ] result = new BigInteger [ 2 ] ;\n  for ( BigInteger n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] = n ;\n    result [ 1 ] = n * n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ n ] = n ;\n    result [ n ] = n * n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ n ] = n ;\n    result [ n * n ] = n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ n ] = n ;\n    result [ n ] += n * n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] += n * n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ 0 ] += n ;\n    result [ 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ n ] += n ;\n    result [ n ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] sum_product ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  for ( int n : numbers ) {\n    result [ n ] += n ;\n    result [ n - 1 ] *= n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static BigInteger sum_product ( BigInteger [ ] numbers ) {\n  BigInteger result = BigInteger . ONE ;\n  for ( BigInteger n : numbers ) {\n    result . add ( n ) ;\n    result . multiply ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long [ ] sum_product ( long [ ] numbers ) {\n  long [ ] result = new long [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    result [ i ] += numbers [ i ] ;\n    result [ i ] *= numbers [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        }
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){ \n            maxlen = strings.size(); \n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
      "target": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){ \n            maxlen = string.length(); \n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
      "function range": "6,5-19,5",
      "raw_output": [
        "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > strings [ i ] . length ( ) ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > maxlen ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( ArrayList < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > strings . get ( i ) . length ( ) ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > strings . get ( i ) . length ( ) ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( String s : strings ) {\n    if ( s . length ( ) > maxlen ) {\n      maxlen = s . length ( ) ;\n    }\n  }\n  for ( String s : strings ) {\n    if ( s . length ( ) == maxlen ) {\n      return s ;\n    }\n  }\n  return null ;\n}\n",
        "static public String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) return strings [ i ] ;\n  }\n  return null ;\n}\n",
        "public static String longest ( String ... strings ) {\n  int maxlen = 0 ;\n  for ( String s : strings ) {\n    if ( s . length ( ) > maxlen ) {\n      maxlen = s . length ( ) ;\n    }\n  }\n  for ( String s : strings ) {\n    if ( s . length ( ) == maxlen ) {\n      return s ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > strings [ i ] . length ( ) ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( ArrayList < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > strings . get ( i ) . length ( ) ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > strings . get ( i ) . length ( ) ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > maxlen ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > maxlen ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( ArrayList < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . size ( ) > i ) {\n      maxlen = strings . size ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . size ( ) > i ) {\n      maxlen = strings . size ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( ArrayList < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > maxlen ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > strings [ i ] . length ( ) ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > maxlen ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( String s : strings ) {\n    if ( s . length ( ) > maxlen ) {\n      maxlen = s . length ( ) ;\n    }\n  }\n  for ( String s : strings ) {\n    if ( s . length ( ) == maxlen ) {\n      return s ;\n    }\n  }\n  return null ;\n}\n",
        "public static String longest ( ArrayList < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > strings . get ( i ) . length ( ) ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}\n"
      ],
      "mid_translation": [
        "string longest ( vector < string > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > strings [ i ] . length ( ) ) maxlen = strings [ i ] . length ( ) ;\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) return strings [ i ] ;\n  }\n  return string ( ) ;\n}\n",
        "QString longest ( const QStringList & strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  ++ i ) {\n    if ( strings . at ( i ) . length ( ) > maxlen ) maxlen = strings . at ( i ) . length ( ) ;\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  ++ i ) {\n    if ( strings . at ( i ) . length ( ) == maxlen ) return strings . at ( i ) ;\n  }\n  return QString ( ) ;\n}\n",
        "string longest ( vector < string > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . at ( i ) . length ( ) > strings . at ( i ) . length ( ) ) maxlen = strings . at ( i ) . length ( ) ;\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . at ( i ) . length ( ) == maxlen ) return strings . at ( i ) ;\n  }\n  return string ( ) ;\n}\n",
        "string longest ( vector < string > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . size ( ) > i ) maxlen = strings . size ( ) ;\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) return strings [ i ] ;\n  }\n  return string ( ) ;\n}\n",
        "string longest ( vector < string > strings ) {\n  size_t maxlen = 0 ;\n  for ( size_t i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > strings [ i ] . length ( ) ) maxlen = strings [ i ] . length ( ) ;\n  }\n  for ( size_t i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) return strings [ i ] ;\n  }\n  return string ( ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > strings [ i ] . length ( ) ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > maxlen ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String longest ( ArrayList < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > strings . get ( i ) . length ( ) ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > strings . get ( i ) . length ( ) ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( String s : strings ) {\n    if ( s . length ( ) > maxlen ) {\n      maxlen = s . length ( ) ;\n    }\n  }\n  for ( String s : strings ) {\n    if ( s . length ( ) == maxlen ) {\n      return s ;\n    }\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) return strings [ i ] ;\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest ( String ... strings ) {\n  int maxlen = 0 ;\n  for ( String s : strings ) {\n    if ( s . length ( ) > maxlen ) {\n      maxlen = s . length ( ) ;\n    }\n  }\n  for ( String s : strings ) {\n    if ( s . length ( ) == maxlen ) {\n      return s ;\n    }\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > strings [ i ] . length ( ) ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest ( ArrayList < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > strings . get ( i ) . length ( ) ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > strings . get ( i ) . length ( ) ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > maxlen ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > maxlen ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String longest ( ArrayList < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . size ( ) > i ) {\n      maxlen = strings . size ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . size ( ) > i ) {\n      maxlen = strings . size ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest ( ArrayList < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > maxlen ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > maxlen ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest ( String [ ] strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) > strings [ i ] . length ( ) ) {\n      maxlen = strings [ i ] . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    if ( strings [ i ] . length ( ) == maxlen ) {\n      return strings [ i ] ;\n    }\n  }\n  return null ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > maxlen ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String longest ( List < String > strings ) {\n  int maxlen = 0 ;\n  for ( String s : strings ) {\n    if ( s . length ( ) > maxlen ) {\n      maxlen = s . length ( ) ;\n    }\n  }\n  for ( String s : strings ) {\n    if ( s . length ( ) == maxlen ) {\n      return s ;\n    }\n  }\n  return null ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String longest ( ArrayList < String > strings ) {\n  int maxlen = 0 ;\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) > strings . get ( i ) . length ( ) ) {\n      maxlen = strings . get ( i ) . length ( ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    if ( strings . get ( i ) . length ( ) == maxlen ) {\n      return strings . get ( i ) ;\n    }\n  }\n  return null ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n); \n    }\n    Collections.sort(result);\n    return result;\n}",
      "target": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        if (result.contains(n)) \n            continue;\n        result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "8,5-17,5",
      "raw_output": [
        "public static int [ ] unique ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] unique ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] unique ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] unique ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] unique ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] unique ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < int > unique ( vector < int > l ) {\n  vector < int > result ;\n  for ( int n : l ) result . push_back ( n ) ;\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n",
        "public : vector < int > unique ( vector < int > l ) {\n  vector < int > result ;\n  for ( auto n : l ) result . push_back ( n ) ;\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n",
        "vector < int > unique ( vector < int > l ) {\n  vector < int > result ;\n  for ( int n : l ) result . push_back ( n ) ;\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n",
        "public : vector < int > unique ( vector < int > l ) {\n  vector < int > result ;\n  for ( auto & n : l ) result . push_back ( n ) ;\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n",
        "vector < int > unique ( vector < int > l ) {\n  vector < int > result ;\n  for ( auto n : l ) result . push_back ( n ) ;\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] unique ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] unique ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] unique ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] unique ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] unique ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > unique ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] unique ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  for ( int n : l ) {\n    result [ n ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)]; \n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
      "target": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[(int) Math.ceil(l.length / 2.)]; \n    for (int i = 0; i < l.length; i += 2){\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1){\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
      "function range": "6,5-22,5",
      "raw_output": [
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length / 2 ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . size ( ) / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l . get ( i ) ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l . get ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ ( int ) i / 2 ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > sortEven ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > evens = new ArrayList < Integer > ( 1 + ( int ) ( l . size ( ) / 2. ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens . add ( ( int ) i / 2 ) ;\n  }\n  Collections . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . add ( evens . get ( ( int ) i / 2 ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . add ( evens [ ( int ) i / 2 ] ) ;\n    }\n    else {\n      result . add ( l [ i ] ) ;\n    }\n  }\n  return result . toArray ( new int [ result . size ( ) ] ) ;\n}\n",
        "public static List < Integer > sortEven ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . size ( ) / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l . get ( i ) ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . add ( evens [ ( int ) i / 2 ] ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . size ( ) / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l . get ( i ) ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l . get ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . size ( ) / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l . get ( i ) ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l . get ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( int [ ] l ) {\n  int [ ] result = new int [ l . length / 2 ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortEven ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . size ( ) / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l . get ( i ) ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l . get ( i ) ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > sort_even ( vector < int > l ) {\n  vector < int > result ;\n  vector < int > evens ( 1 + ( int ) ( l . size ( ) / 2. ) , 0 ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) evens [ ( int ) i / 2 ] = l [ i ] ;\n  sort ( evens . begin ( ) , evens . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = evens [ ( int ) i / 2 ] ;\n    else result [ i ] = l [ i ] ;\n  }\n  return result ;\n}\n",
        "vector < int > sort_even ( vector < int > l ) {\n  vector < int > result ;\n  vector < int > evens ( 1 + ( int ) ( l . size ( ) / 2. ) , 0 ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) evens [ ( int ) i / 2 ] = l [ i ] ;\n  sort ( evens . begin ( ) , evens . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . push_back ( evens [ ( int ) i / 2 ] ) ;\n    else result . push_back ( l [ i ] ) ;\n  }\n  return result ;\n}\n",
        "vector < int > sort_even ( vector < int > l ) {\n  vector < int > result ( l . size ( ) ) ;\n  vector < int > evens ( 1 + ( int ) ( l . size ( ) / 2. ) , 0 ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) evens [ ( int ) i / 2 ] = l [ i ] ;\n  sort ( evens . begin ( ) , evens . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = evens [ ( int ) i / 2 ] ;\n    else result [ i ] = l [ i ] ;\n  }\n  return result ;\n}\n",
        "vector < int > sort_even ( vector < int > l ) {\n  vector < int > result ( l . size ( ) , 0 ) ;\n  vector < int > evens ( 1 + ( int ) ( l . size ( ) / 2. ) , 0 ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) evens [ ( int ) i / 2 ] = l [ i ] ;\n  sort ( evens . begin ( ) , evens . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = evens [ ( int ) i / 2 ] ;\n    else result [ i ] = l [ i ] ;\n  }\n  return result ;\n}\n",
        "vector < int > sort_even ( vector < int > l ) {\n  vector < int > result ;\n  vector < int > evens ( 1 + ( int ) ( l . size ( ) / 2. ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) evens [ ( int ) i / 2 ] = l [ i ] ;\n  sort ( evens . begin ( ) , evens . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = evens [ ( int ) i / 2 ] ;\n    else result [ i ] = l [ i ] ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length / 2 ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . size ( ) / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l . get ( i ) ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l . get ( i ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ ( int ) i / 2 ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > sort_even ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > evens = new ArrayList < Integer > ( 1 + ( int ) ( l . size ( ) / 2. ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens . add ( ( int ) i / 2 ) ;\n  }\n  Collections . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . add ( evens . get ( ( int ) i / 2 ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . add ( evens [ ( int ) i / 2 ] ) ;\n    }\n    else {\n      result . add ( l [ i ] ) ;\n    }\n  }\n  return result . toArray ( new int [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > sort_even ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . size ( ) / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l . get ( i ) ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . add ( evens [ ( int ) i / 2 ] ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . size ( ) / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l . get ( i ) ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l . get ( i ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . size ( ) / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l . get ( i ) ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l . get ( i ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length / 2 ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . length / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l [ i ] ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_even ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  int [ ] evens = new int [ 1 + ( int ) ( l . size ( ) / 2. ) ] ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 2 ) {\n    evens [ ( int ) i / 2 ] = l . get ( i ) ;\n  }\n  Arrays . sort ( evens ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = evens [ ( int ) i / 2 ] ;\n    }\n    else {\n      result [ i ] = l . get ( i ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){ \n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
      "target": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = i + 1; j < numbers.length; j += 1){ \n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-24,5",
      "raw_output": [
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ j ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ j ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ 0 ] = numbers [ i ] ;\n          result [ 1 ] = numbers [ j ] ;\n        }\n        else {\n          result [ 0 ] = numbers [ j ] ;\n          result [ 1 ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Double > findClosestElements ( double [ ] numbers ) {\n  ArrayList < Double > result = new ArrayList < Double > ( ) ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . add ( numbers [ i ] ) ;\n          result . add ( numbers [ j ] ) ;\n        }\n        else {\n          result . add ( numbers [ j ] ) ;\n          result . add ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ j ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ j ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ 0 ] = numbers [ i ] ;\n          result [ 1 ] = numbers [ j ] ;\n        }\n        else {\n          result [ 0 ] = numbers [ j ] ;\n          result [ 1 ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Double > findClosestElements ( double [ ] numbers ) {\n  ArrayList < Double > result = new ArrayList < Double > ( ) ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . add ( numbers [ i ] ) ;\n          result . add ( numbers [ j ] ) ;\n        }\n        else {\n          result . add ( numbers [ j ] ) ;\n          result . add ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ j ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ j ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ 0 ] = numbers [ i ] ;\n          result [ 1 ] = numbers [ j ] ;\n        }\n        else {\n          result [ 0 ] = numbers [ j ] ;\n          result [ 1 ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Double > findClosestElements ( double [ ] numbers ) {\n  ArrayList < Double > result = new ArrayList < Double > ( ) ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . add ( numbers [ i ] ) ;\n          result . add ( numbers [ j ] ) ;\n        }\n        else {\n          result . add ( numbers [ j ] ) ;\n          result . add ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ j ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ j ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < Double > findClosestElements ( double [ ] numbers ) {\n  List < Double > result = new ArrayList < Double > ( ) ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . add ( numbers [ i ] ) ;\n          result . add ( numbers [ j ] ) ;\n        }\n        else {\n          result . add ( numbers [ j ] ) ;\n          result . add ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ 0 ] = numbers [ i ] ;\n          result [ 1 ] = numbers [ j ] ;\n        }\n        else {\n          result [ 0 ] = numbers [ j ] ;\n          result [ 1 ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ j ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ j ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static double [ ] findClosestElements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ 0 ] = numbers [ i ] ;\n          result [ 1 ] = numbers [ j ] ;\n        }\n        else {\n          result [ 0 ] = numbers [ j ] ;\n          result [ 1 ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Double > findClosestElements ( double [ ] numbers ) {\n  ArrayList < Double > result = new ArrayList < Double > ( ) ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . add ( numbers [ i ] ) ;\n          result . add ( numbers [ j ] ) ;\n        }\n        else {\n          result . add ( numbers [ j ] ) ;\n          result . add ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < double > find_closest_elements ( vector < double > numbers ) {\n  vector < double > result ;\n  double distance = numeric_limits < double > :: max ( ) ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double new_distance = fabs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( new_distance < distance ) {\n        distance = new_distance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . push_back ( numbers [ i ] ) ;\n          result . push_back ( numbers [ j ] ) ;\n        }\n        else {\n          result . push_back ( numbers [ j ] ) ;\n          result . push_back ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "vector < double > find_closest_elements ( vector < double > numbers ) {\n  vector < double > result ;\n  double distance = numeric_limits < double > :: max ( ) ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double new_distance = abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( new_distance < distance ) {\n        distance = new_distance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . push_back ( numbers [ i ] ) ;\n          result . push_back ( numbers [ j ] ) ;\n        }\n        else {\n          result . push_back ( numbers [ j ] ) ;\n          result . push_back ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "vector < double > find_closest_elements ( vector < double > & numbers ) {\n  vector < double > result ;\n  double distance = numeric_limits < double > :: max ( ) ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double new_distance = fabs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( new_distance < distance ) {\n        distance = new_distance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . push_back ( numbers [ i ] ) ;\n          result . push_back ( numbers [ j ] ) ;\n        }\n        else {\n          result . push_back ( numbers [ j ] ) ;\n          result . push_back ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public : vector < double > findClosestElements ( vector < double > numbers ) {\n  vector < double > result ;\n  double distance = numeric_limits < double > :: max ( ) ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double newDistance = fabs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . push_back ( numbers [ i ] ) ;\n          result . push_back ( numbers [ j ] ) ;\n        }\n        else {\n          result . push_back ( numbers [ j ] ) ;\n          result . push_back ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "vector < double > find_closest_elements ( vector < double > numbers ) {\n  vector < double > result ;\n  double distance = numeric_limits < double > :: max ( ) ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( size_t j = 0 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double new_distance = fabs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( new_distance < distance ) {\n        distance = new_distance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . push_back ( numbers [ i ] ) ;\n          result . push_back ( numbers [ j ] ) ;\n        }\n        else {\n          result . push_back ( numbers [ j ] ) ;\n          result . push_back ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ j ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ j ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ 0 ] = numbers [ i ] ;\n          result [ 1 ] = numbers [ j ] ;\n        }\n        else {\n          result [ 0 ] = numbers [ j ] ;\n          result [ 1 ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Double > find_closest_elements ( double [ ] numbers ) {\n  ArrayList < Double > result = new ArrayList < Double > ( ) ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . add ( numbers [ i ] ) ;\n          result . add ( numbers [ j ] ) ;\n        }\n        else {\n          result . add ( numbers [ j ] ) ;\n          result . add ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ j ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ j ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ 0 ] = numbers [ i ] ;\n          result [ 1 ] = numbers [ j ] ;\n        }\n        else {\n          result [ 0 ] = numbers [ j ] ;\n          result [ 1 ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Double > find_closest_elements ( double [ ] numbers ) {\n  ArrayList < Double > result = new ArrayList < Double > ( ) ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . add ( numbers [ i ] ) ;\n          result . add ( numbers [ j ] ) ;\n        }\n        else {\n          result . add ( numbers [ j ] ) ;\n          result . add ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ j ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ j ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ 0 ] = numbers [ i ] ;\n          result [ 1 ] = numbers [ j ] ;\n        }\n        else {\n          result [ 0 ] = numbers [ j ] ;\n          result [ 1 ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Double > find_closest_elements ( double [ ] numbers ) {\n  ArrayList < Double > result = new ArrayList < Double > ( ) ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . add ( numbers [ i ] ) ;\n          result . add ( numbers [ j ] ) ;\n        }\n        else {\n          result . add ( numbers [ j ] ) ;\n          result . add ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ j ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ j ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Double > find_closest_elements ( double [ ] numbers ) {\n  List < Double > result = new ArrayList < Double > ( ) ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . add ( numbers [ i ] ) ;\n          result . add ( numbers [ j ] ) ;\n        }\n        else {\n          result . add ( numbers [ j ] ) ;\n          result . add ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ 0 ] = numbers [ i ] ;\n          result [ 1 ] = numbers [ j ] ;\n        }\n        else {\n          result [ 0 ] = numbers [ j ] ;\n          result [ 1 ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ j ] = numbers [ j ] ;\n          result [ i ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ i ] = numbers [ i ] ;\n          result [ j ] = numbers [ j ] ;\n        }\n        else {\n          result [ i ] = numbers [ j ] ;\n          result [ j ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] find_closest_elements ( double [ ] numbers ) {\n  double [ ] result = new double [ numbers . length ] ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result [ 0 ] = numbers [ i ] ;\n          result [ 1 ] = numbers [ j ] ;\n        }\n        else {\n          result [ 0 ] = numbers [ j ] ;\n          result [ 1 ] = numbers [ i ] ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Double > find_closest_elements ( double [ ] numbers ) {\n  ArrayList < Double > result = new ArrayList < Double > ( ) ;\n  double distance = Double . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double newDistance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;\n      if ( newDistance < distance ) {\n        distance = newDistance ;\n        if ( numbers [ i ] < numbers [ j ] ) {\n          result . add ( numbers [ i ] ) ;\n          result . add ( numbers [ j ] ) ;\n        }\n        else {\n          result . add ( numbers [ j ] ) ;\n          result . add ( numbers [ i ] ) ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n    return number / 1.0; \n}",
      "target": "public static double truncate_number(double number) {\n    return number % 1.0; \n}",
      "function range": "4,5-6,5",
      "raw_output": [
        "public static double truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n",
        "static double truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n",
        "public static Double truncateNumber ( Double number ) {\n  return number / 1.0 ;\n}\n",
        "public static double truncateNumber ( Double number ) {\n  return number / 1.0 ;\n}\n",
        "static public double truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n",
        "public static double truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n",
        "public static long truncateNumber ( long number ) {\n  return number / 1.0 ;\n}\n",
        "static double truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n",
        "public static Double truncateNumber ( Double number ) {\n  return number / 1.0 ;\n}\n",
        "public static double truncateNumber ( Double number ) {\n  return number / 1.0 ;\n}\n",
        "public static double truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n",
        "public static Number truncateNumber ( Number number ) {\n  return number . doubleValue ( ) / 1.0 ;\n}\n",
        "public static double truncateNumber ( Number number ) {\n  return number . doubleValue ( ) / 1.0 ;\n}\n",
        "public static long truncateNumber ( long number ) {\n  return number / 1.0 ;\n}\n",
        "public static Number truncateNumber ( Number number ) {\n  return number . floatValue ( ) / 1.0 ;\n}\n",
        "public static double truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n",
        "static double truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n",
        "public static Double truncateNumber ( Double number ) {\n  return number / 1.0 ;\n}\n",
        "public static double truncateNumber ( Double number ) {\n  return number / 1.0 ;\n}\n",
        "public static double truncateNumber ( Double number ) {\n  return number . doubleValue ( ) / 1.0 ;\n}\n",
        "public static double truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n",
        "static double truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n",
        "public static double truncateNumber ( Double number ) {\n  return number / 1.0 ;\n}\n",
        "public static Double truncateNumber ( Double number ) {\n  return number / 1.0 ;\n}\n",
        "public static long truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n"
      ],
      "mid_translation": [
        "double truncate_number ( double number ) {\n  return number / 1.0 ;\n}\n",
        "template < typename T > T truncate_number ( T number ) {\n  return number / 1.0 ;\n}\n",
        "template < typename Number > Number truncate_number ( Number number ) {\n  return number / 1.0 ;\n}\n",
        "double truncateNumber ( double number ) {\n  return number / 1.0 ;\n}\n",
        "template < > double truncate_number ( double number ) {\n  return number / 1.0 ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static double truncate_number ( double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double truncate_number ( Double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( Double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public double truncate_number ( double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number ( double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long truncate_number ( long number ) {\n  return number / 1.0 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number ( double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double truncate_number ( Double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( Double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Number truncate_number ( Number number ) {\n  return number . doubleValue ( ) / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( Number number ) {\n  return number . doubleValue ( ) / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long truncate_number ( long number ) {\n  return number / 1.0 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Number truncate_number ( Number number ) {\n  return number . floatValue ( ) / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double truncate_number ( Double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( Double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( Double number ) {\n  return number . doubleValue ( ) / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number ( Double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double truncate_number ( Double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long truncate_number ( double number ) {\n  return number / 1.0 ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t) \n            return true; \n    } \n    return false; \n}",
      "target": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] >= t) \n            return false; \n    } \n    return true; \n}",
      "function range": "10,5-16,5",
      "raw_output": [
        "public static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n",
        "static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int l [ ] , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n",
        "static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( ArrayList < Integer > l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l . get ( i ) <= t ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( ArrayList < Integer > l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l . get ( i ) <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int l [ ] , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( ArrayList < Integer > l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l . get ( i ) <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int l [ ] , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n",
        "static boolean belowThreshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean belowThreshold ( ArrayList < Integer > l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l . get ( i ) <= t ) return true ;\n  }\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool below_threshold ( vector < int > l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n",
        "bool below_threshold ( vector < int > & l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n",
        "bool below_threshold ( vector < int > l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool below_threshold ( vector < int > & l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool below_threshold ( vector < int > l , int t ) {\n  for ( size_t i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int l [ ] , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( ArrayList < Integer > l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l . get ( i ) <= t ) return true ;\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( ArrayList < Integer > l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l . get ( i ) <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean below_threshold ( int l [ ] , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( ArrayList < Integer > l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l . get ( i ) <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean below_threshold ( int l [ ] , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( int [ ] l , int t ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( l [ i ] <= t ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold ( ArrayList < Integer > l , int t ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( l . get ( i ) <= t ) return true ;\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i)); \n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
      "target": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get((int)(i / 3))); \n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
      "function range": "8,5-25,5",
      "raw_output": [
        "public static List < Integer > sortThird ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortThird ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > sortThird ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > sortThird ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  List < Integer > thirds = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortThird ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i + 1 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > sortThird ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortThird ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > sortThird ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  List < Integer > thirds = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortThird ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i + 1 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortThird ( int [ ] l ) {\n  int [ ] result = new int [ l . length / 3 ] ;\n  int [ ] thirds = new int [ l . length / 3 ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i / 3 ] = thirds [ i ] ;\n    }\n    else {\n      result [ i / 3 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > sortThird ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortThird ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > sortThird ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > sortThird ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  List < Integer > thirds = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortThird ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i + 1 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > sortThird ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortThird ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > sortThird ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > sortThird ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  List < Integer > thirds = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortThird ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i + 1 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > sortThird ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortThird ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > sortThird ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  List < Integer > thirds = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] sortThird ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i + 1 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > sortThird ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > sort_third ( vector < int > l ) {\n  vector < int > result ;\n  vector < int > thirds ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) thirds . push_back ( l [ i ] ) ;\n  sort ( thirds . begin ( ) , thirds . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) result . push_back ( thirds [ i ] ) ;\n    else result . push_back ( l [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public : vector < int > sort_third ( vector < int > l ) {\n  vector < int > result ;\n  vector < int > thirds ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) thirds . push_back ( l [ i ] ) ;\n  sort ( thirds . begin ( ) , thirds . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) result . push_back ( thirds [ i ] ) ;\n    else result . push_back ( l [ i ] ) ;\n  }\n  return result ;\n}\n",
        "vector < int > sort_third ( vector < int > l ) {\n  vector < int > result ;\n  vector < int > thirds ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) thirds . push_back ( l [ i ] ) ;\n  std :: sort ( thirds . begin ( ) , thirds . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) result . push_back ( thirds [ i ] ) ;\n    else result . push_back ( l [ i ] ) ;\n  }\n  return result ;\n}\n",
        "vector < int > sort_third ( vector < int > & l ) {\n  vector < int > result ;\n  vector < int > thirds ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) thirds . push_back ( l [ i ] ) ;\n  sort ( thirds . begin ( ) , thirds . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) result . push_back ( thirds [ i ] ) ;\n    else result . push_back ( l [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public : vector < int > sort_third ( vector < int > & l ) {\n  vector < int > result ;\n  vector < int > thirds ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) thirds . push_back ( l [ i ] ) ;\n  sort ( thirds . begin ( ) , thirds . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) result . push_back ( thirds [ i ] ) ;\n    else result . push_back ( l [ i ] ) ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < Integer > sort_third ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_third ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > sort_third ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > sort_third ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  List < Integer > thirds = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_third ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i + 1 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > sort_third ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_third ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > sort_third ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  List < Integer > thirds = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_third ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i + 1 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_third ( int [ ] l ) {\n  int [ ] result = new int [ l . length / 3 ] ;\n  int [ ] thirds = new int [ l . length / 3 ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i / 3 ] = thirds [ i ] ;\n    }\n    else {\n      result [ i / 3 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > sort_third ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_third ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > sort_third ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > sort_third ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  List < Integer > thirds = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_third ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i + 1 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > sort_third ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_third ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > sort_third ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > sort_third ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  List < Integer > thirds = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_third ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i + 1 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > sort_third ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_third ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > sort_third ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  List < Integer > thirds = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_third ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  int [ ] thirds = new int [ l . length ] ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 3 ) {\n    thirds [ i ] = l [ i ] ;\n  }\n  Arrays . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result [ i ] = thirds [ i ] ;\n    }\n    else {\n      result [ i + 1 ] = l [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > sort_third ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  List < Integer > thirds = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 3 ) {\n    thirds . add ( l . get ( i ) ) ;\n  }\n  Collections . sort ( thirds ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    if ( i % 3 == 0 ) {\n      result . add ( thirds . get ( i ) ) ;\n    }\n    else {\n      result . add ( l . get ( i ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean); \n    }\n    return deviation_sum / numbers.size();\n}",
      "target": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean); \n    }\n    return deviation_sum / numbers.size();\n}",
      "function range": "6,5-17,5",
      "raw_output": [
        "public static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "public static double meanAbsoluteDeviation ( List < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}\n",
        "public static double meanAbsoluteDeviation ( List < Double > numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}\n",
        "public static double meanAbsoluteDeviation ( Collection < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}\n",
        "public static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "public static double meanAbsoluteDeviation ( List < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}\n",
        "public static double meanAbsoluteDeviation ( List < Double > numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}\n",
        "public static double meanAbsoluteDeviation ( Collection < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}\n",
        "public static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "public static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "public static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0. ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0. ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "public static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationsSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationsSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationsSum / numbers . length ;\n}\n",
        "public static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "public static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "public static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0. ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0. ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "public static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  ++ i ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  ++ i ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "public static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "static double meanAbsoluteDeviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n",
        "public static double meanAbsoluteDeviation ( List < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}\n",
        "public static double meanAbsoluteDeviation ( Collection < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}\n",
        "public static double meanAbsoluteDeviation ( double ... numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}\n"
      ],
      "mid_translation": [
        "double mean_absolute_deviation ( const std :: vector < double > & numbers ) {\n  double sum = 0. ;\n  for ( auto & number : numbers ) sum += number ;\n  double mean = sum / numbers . size ( ) ;\n  double deviation_sum = 0. ;\n  for ( auto & number : numbers ) deviation_sum += ( number - mean ) * ( number - mean ) ;\n  return deviation_sum / numbers . size ( ) ;\n}\n",
        "double mean_absolute_deviation ( const std :: vector < double > & numbers ) {\n  double sum = 0. ;\n  for ( auto number : numbers ) sum += number ;\n  double mean = sum / numbers . size ( ) ;\n  double deviation_sum = 0. ;\n  for ( auto number : numbers ) deviation_sum += ( number - mean ) * ( number - mean ) ;\n  return deviation_sum / numbers . size ( ) ;\n}\n",
        "double mean_absolute_deviation ( const std :: vector < double > & numbers ) {\n  double sum = 0. ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i ++ ) sum += numbers [ i ] ;\n  double mean = sum / numbers . size ( ) ;\n  double deviation_sum = 0. ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i ++ ) deviation_sum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  return deviation_sum / numbers . size ( ) ;\n}\n",
        "double mean_absolute_deviation ( const std :: vector < double > & numbers ) {\n  double sum = 0. ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  ++ i ) sum += numbers [ i ] ;\n  double mean = sum / numbers . size ( ) ;\n  double deviation_sum = 0. ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  ++ i ) deviation_sum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  return deviation_sum / numbers . size ( ) ;\n}\n",
        "double mean_absolute_deviation ( const std :: vector < double > & numbers ) {\n  double sum = 0. ;\n  for ( const auto & number : numbers ) sum += number ;\n  double mean = sum / numbers . size ( ) ;\n  double deviation_sum = 0. ;\n  for ( const auto & number : numbers ) deviation_sum += ( number - mean ) * ( number - mean ) ;\n  return deviation_sum / numbers . size ( ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static double mean_absolute_deviation ( List < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( List < Double > numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( Collection < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( List < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( List < Double > numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( Collection < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0. ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0. ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationsSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationsSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationsSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0. ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0. ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i ++ ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  ++ i ) {\n    sum += numbers [ i ] ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  ++ i ) {\n    deviationSum += ( numbers [ i ] - mean ) * ( numbers [ i ] - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double [ ] numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( List < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation ( Collection < Double > numbers ) {\n  double sum = 0d ;\n  for ( Double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . size ( ) ;\n  double deviationSum = 0d ;\n  for ( Double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double mean_absolute_deviation ( double ... numbers ) {\n  double sum = 0d ;\n  for ( double number : numbers ) {\n    sum += number ;\n  }\n  double mean = sum / numbers . length ;\n  double deviationSum = 0d ;\n  for ( double number : numbers ) {\n    deviationSum += ( number - mean ) * ( number - mean ) ;\n  }\n  return deviationSum / numbers . length ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j); \n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
      "target": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = Math.abs(numbers.get(i) - numbers.get(j)); \n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "6,5-15,5",
      "raw_output": [
        "public static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( List < Double > numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers . get ( i ) - numbers . get ( j ) ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( List < Double > numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers . get ( i ) - numbers . get ( j ) ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( ArrayList < Double > numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers . get ( i ) - numbers . get ( j ) ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( double [ ] [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] [ j ] - numbers [ j ] [ i ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( final double [ ] numbers , final double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      final double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( List < Double > numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers . get ( i ) - numbers . get ( j ) ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( double [ ] [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] [ j ] - numbers [ j ] [ i ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean hasCloseElements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean hasCloseElements ( ArrayList < Double > numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers . get ( i ) - numbers . get ( j ) ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool has_close_elements ( std :: vector < double > numbers , double threshold ) {\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( size_t j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool has_close_elements ( vector < double > numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool has_close_elements ( const std :: vector < double > & numbers , double threshold ) {\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( size_t j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool has_close_elements ( std :: vector < double > numbers , double threshold ) {\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( size_t j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "bool has_close_elements ( vector < double > numbers , double threshold ) {\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( size_t j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static boolean has_close_elements ( List < Double > numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers . get ( i ) - numbers . get ( j ) ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( List < Double > numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers . get ( i ) - numbers . get ( j ) ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( ArrayList < Double > numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers . get ( i ) - numbers . get ( j ) ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] [ j ] - numbers [ j ] [ i ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( final double [ ] numbers , final double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      final double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( List < Double > numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers . get ( i ) - numbers . get ( j ) ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] [ j ] - numbers [ j ] [ i ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( double [ ] numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . length ;\n    j += 1 ) {\n      double distance = numbers [ i ] - numbers [ j ] ;\n      if ( distance < threshold ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements ( ArrayList < Double > numbers , double threshold ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i + 1 ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      double distance = numbers . get ( i ) - numbers . get ( j ) ;\n      if ( distance < threshold ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value); \n    }\n    return result;\n}",
      "target": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        if (value instanceof Integer){ \n            result.add((Integer) value);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-14,5",
      "raw_output": [
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . parseInt ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( values . size ( ) ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < ? > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( Collection < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . parseInt ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( values . size ( ) ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < ? > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new LinkedList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > filterIntegers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . parseInt ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "QList < int > filter_integers ( const QList < QVariant > & values ) {\n  QList < int > result ;\n  foreach ( const QVariant & value , values ) result . append ( static_cast < int > ( value . toInt ( ) ) ) ;\n  return result ;\n}\n",
        "QList < int > filter_integers ( const QList < QVariant > & values ) {\n  QList < int > result ;\n  foreach ( const QVariant & value , values ) result . append ( ( int ) value . toInt ( ) ) ;\n  return result ;\n}\n",
        "QList < int > filter_integers ( const QList < QVariant > & values ) {\n  QList < int > result ;\n  foreach ( const QVariant & value , values ) result << static_cast < int > ( value . toInt ( ) ) ;\n  return result ;\n}\n",
        "QList < int > filter_integers ( QList < QVariant > values ) {\n  QList < int > result ;\n  foreach ( QVariant value , values ) result . append ( ( int ) value . toInt ( ) ) ;\n  return result ;\n}\n",
        "QList < int > filter_integers ( QList < QVariant > values ) {\n  QList < int > result ;\n  foreach ( QVariant value , values ) result . append ( static_cast < int > ( value . toInt ( ) ) ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . parseInt ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( values . size ( ) ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < ? > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( Collection < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . parseInt ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( values . size ( ) ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < ? > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new LinkedList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( ( Integer ) value ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . valueOf ( value ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > filter_integers ( List < Object > values ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Object value : values ) {\n    result . add ( Integer . parseInt ( value . toString ( ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number); \n    }\n    return result;\n}",
      "target": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0){ \n            result.add(number);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-14,5",
      "raw_output": [
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toIntegerList ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toIntegerList ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toIntegerList ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n  ",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toIntegerList ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result",
        "public static List < Integer > toIntegerList ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toIntegerList ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateNumbers ( int [ ] numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > toNumbers ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "foreach ( int number , numbers ) {\n  result . append ( number ) ;\n}\n",
        "foreach ( int number , numbers ) {\n  result . push_back ( number ) ;\n}\n",
        "foreach ( int number , numbers ) {\n  result << number ;\n}\n",
        "foreach ( int number , numbers ) {\n  result += number ;\n}\n",
        "foreach ( int number , numbers ) {\n  result . insert ( number ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n  ",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( int [ ] numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_positive ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( numbers . size ( ) ) ;\n  for ( int number : numbers ) {\n    result . add ( number ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } \n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
      "target": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else { \n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
      "function range": "7,5-24,5",
      "raw_output": [
        "public static int [ ] parseNestedParens ( String parenString ) {\n  String parenGroups = parenString . replaceAll ( \" \" , \"\" ) ;\n  int [ ] result = new int [ parenGroups . length ( ) ] ;\n  for ( String parenGroup : parenGroups . split ( \" \" ) ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}\n",
        "public static int [ ] parseNestedParens ( String parenString ) {\n  String parenGroups = parenString . trim ( ) ;\n  int [ ] result = new int [ parenGroups . length ( ) ] ;\n  for ( String parenGroup : parenGroups . split ( \" \" ) ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}\n",
        "public static int [ ] parseNestedParens ( String parenString ) {\n  String parenGroups = parenString . substring ( 0 , parenString . indexOf ( ' ' ) ) ;\n  int [ ] result = new int [ parenGroups . length ( ) ] ;\n  for ( String parenGroup : parenGroups . split ( \" \" ) ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}\n",
        "public static int [ ] parseNestedParens ( String parenString ) {\n  String parenGroups = parenString . replaceAll ( \"\\\\s+\" , \"\" ) ;\n  int [ ] result = new int [ parenGroups . length ( ) ] ;\n  for ( String parenGroup : parenGroups . split ( \" \" ) ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String parenGroups = parenString . replaceAll ( \" \" , \"\" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups . split ( \" \" ) ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  int [ ] result = new int [ parenGroups . length ] ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  int [ ] result = new int [ parenGroups . length ] ;\n  for ( int i = 0 ;\n  i < parenGroups . length ;\n  i ++ ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroups [ i ] . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ i ] = max_depth ;\n  }\n  return result ;\n}\n",
        "public static int [ ] parseNestedParens ( String parenString ) {\n  String parenGroups [ ] = parenString . split ( \" \" ) ;\n  int result [ ] = new int [ parenGroups . length ] ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParentheses ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new LinkedList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  int [ ] result = new int [ parenGroups . length ] ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( int i = 0 ;\n    i < parenGroup . length ( ) ;\n    i ++ ) {\n      if ( parenGroup . charAt ( i ) == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( int i = 0 ;\n    i < parenGroup . length ( ) ;\n    i ++ ) {\n      if ( parenGroup . charAt ( i ) == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParentheses ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParentheses ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  int [ ] result = new int [ parenGroups . length ] ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseNestedParens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new LinkedList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > parse_nested_parens ( string paren_string ) {\n  string paren_groups = paren_string . substr ( 0 , paren_string . find_first_of ( ' ' ) ) ;\n  vector < int > result ;\n  for ( string paren_group : paren_groups . split ( \" \" ) ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : paren_group ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = max ( depth , max_depth ) ;\n      }\n    }\n    result . push_back ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "vector < int > parse_nested_parens ( string paren_string ) {\n  string paren_groups = paren_string . substr ( 0 , paren_string . find_first_of ( ' ' ) ) ;\n  vector < int > result ;\n  for ( string paren_group : paren_groups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : paren_group ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = max ( depth , max_depth ) ;\n      }\n    }\n    result . push_back ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "QList < int > parse_nested_parens ( const QString & paren_string ) {\n  QStringList paren_groups = paren_string . split ( ' ' ) ;\n  QList < int > result ;\n  for ( QString paren_group : paren_groups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( QChar c : paren_group ) {\n      if ( c == QLatin1Char ( '(' ) ) {\n        depth += 1 ;\n        max_depth = qMax ( depth , max_depth ) ;\n      }\n    }\n    result . append ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "QList < int > parse_nested_parens ( const QString & paren_string ) {\n  QStringList paren_groups = paren_string . split ( QLatin1Char ( ' ' ) ) ;\n  QList < int > result ;\n  for ( const QString & paren_group : paren_groups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( const QChar & c : paren_group ) {\n      if ( c == QLatin1Char ( '(' ) ) {\n        depth += 1 ;\n        max_depth = qMax ( depth , max_depth ) ;\n      }\n    }\n    result . append ( max_depth ) ;\n  }\n  return result ;\n}\n",
        "QList < int > parse_nested_parens ( const QString & paren_string ) {\n  QStringList paren_groups = paren_string . split ( \" \" ) ;\n  QList < int > result ;\n  for ( QString paren_group : paren_groups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( QChar c : paren_group ) {\n      if ( c == QLatin1Char ( '(' ) ) {\n        depth += 1 ;\n        max_depth = qMax ( depth , max_depth ) ;\n      }\n    }\n    result . append ( max_depth ) ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] parse_nested_parens ( String parenString ) {\n  String parenGroups = parenString . replaceAll ( \" \" , \"\" ) ;\n  int [ ] result = new int [ parenGroups . length ( ) ] ;\n  for ( String parenGroup : parenGroups . split ( \" \" ) ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] parse_nested_parens ( String parenString ) {\n  String parenGroups = parenString . trim ( ) ;\n  int [ ] result = new int [ parenGroups . length ( ) ] ;\n  for ( String parenGroup : parenGroups . split ( \" \" ) ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] parse_nested_parens ( String parenString ) {\n  String parenGroups = parenString . substring ( 0 , parenString . indexOf ( ' ' ) ) ;\n  int [ ] result = new int [ parenGroups . length ( ) ] ;\n  for ( String parenGroup : parenGroups . split ( \" \" ) ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] parse_nested_parens ( String parenString ) {\n  String parenGroups = parenString . replaceAll ( \"\\\\s+\" , \"\" ) ;\n  int [ ] result = new int [ parenGroups . length ( ) ] ;\n  for ( String parenGroup : parenGroups . split ( \" \" ) ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String parenGroups = parenString . replaceAll ( \" \" , \"\" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups . split ( \" \" ) ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  int [ ] result = new int [ parenGroups . length ] ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  int [ ] result = new int [ parenGroups . length ] ;\n  for ( int i = 0 ;\n  i < parenGroups . length ;\n  i ++ ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroups [ i ] . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ i ] = max_depth ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] parse_nested_parens ( String parenString ) {\n  String parenGroups [ ] = parenString . split ( \" \" ) ;\n  int result [ ] = new int [ parenGroups . length ] ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new LinkedList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  int [ ] result = new int [ parenGroups . length ] ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( int i = 0 ;\n    i < parenGroup . length ( ) ;\n    i ++ ) {\n      if ( parenGroup . charAt ( i ) == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( int i = 0 ;\n    i < parenGroup . length ( ) ;\n    i ++ ) {\n      if ( parenGroup . charAt ( i ) == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  int [ ] result = new int [ parenGroups . length ] ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result [ depth ] = max_depth ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_nested_parens ( String parenString ) {\n  String [ ] parenGroups = parenString . split ( \" \" ) ;\n  List < Integer > result = new LinkedList < Integer > ( ) ;\n  for ( String parenGroup : parenGroups ) {\n    int depth = 0 ;\n    int max_depth = 0 ;\n    for ( char c : parenGroup . toCharArray ( ) ) {\n      if ( c == '(' ) {\n        depth += 1 ;\n        max_depth = Math . max ( depth , max_depth ) ;\n      }\n    }\n    result . add ( max_depth ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n    String result = null; \n    for (String string : strings)\n        result += string;\n    return result;\n}",
      "target": "public static String concatenate(String[] strings) {\n    String result = \"\"; \n    for (String string : strings)\n        result += string;\n    return result;\n}",
      "function range": "4,5-9,5",
      "raw_output": [
        "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) sb . append ( strings [ i ] ) ;\n  return sb . toString ( ) ;\n}\n",
        "static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) sb . append ( strings [ i ] ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) result . append ( strings [ i ] ) ;\n  return result . toString ( ) ;\n}\n",
        "static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) result . append ( strings [ i ] ) ;\n  return result . toString ( ) ;\n}\n",
        "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result . append ( strings [ i ] ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result . append ( strings [ i ] ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "static String concatenate ( String [ ] strings ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) sb . append ( strings [ i ] ) ;\n  return sb . toString ( ) ;\n}\n",
        "static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) sb . append ( strings [ i ] ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) result . append ( strings [ i ] ) ;\n  return result . toString ( ) ;\n}\n",
        "static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) result . append ( strings [ i ] ) ;\n  return result . toString ( ) ;\n}\n",
        "static String concatenate ( String [ ] strings ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) sb . append ( strings [ i ] ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result . append ( strings [ i ] ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result . append ( strings [ i ] ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "static String concatenate ( String [ ] strings ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static int [ ] concatenate ( int [ ] a , int [ ] b ) {\n  int [ ] result = new int [ a . length + b . length ] ;\n  System . arraycopy ( a , 0 , result , 0 , a . length ) ;\n  System . arraycopy ( b , 0 , result , a . length , b . length ) ;\n  return result ;\n}\n",
        "public static String [ ] concatenate ( String [ ] a , String [ ] b ) {\n  String [ ] result = new String [ a . length + b . length ] ;\n  System . arraycopy ( a , 0 , result , 0 , a . length ) ;\n  System . arraycopy ( b , 0 , result , a . length , b . length ) ;\n  return result ;\n}\n",
        "public static String [ ] concatenate ( String [ ] a , String [ ] b ) {\n  return concatenate ( Arrays . asList ( a ) , Arrays . asList ( b ) ) ;\n}\n",
        "public static String [ ] concatenate ( String [ ] a , String [ ] b ) {\n  return concatenate ( a , b , null ) ;\n}\n",
        "public static String [ ] concatenate ( String [ ] a , String [ ] b ) {\n  return concatenate ( a , b , false ) ;\n}\n"
      ],
      "mid_translation": [
        "String concatenate ( const Vector < String > & strings ) {\n  String result ;\n  for ( size_t i = 0 ;\n  i < strings . size ( ) ;\n  ++ i ) {\n    result += strings [ i ] ;\n  }\n  return result ;\n}\n",
        "String concatenate ( const Vector < String > & strings ) {\n  String result ;\n  for ( size_t i = 0 ;\n  i < strings . size ( ) ;\n  ++ i ) result += strings [ i ] ;\n  return result ;\n}\n",
        "String concatenate ( const Vector < String > & strings ) {\n  String result ;\n  for ( size_t i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) {\n    result += strings [ i ] ;\n  }\n  return result ;\n}\n",
        "String concatenate ( const Vector < String > & strings ) {\n  String result ;\n  for ( size_t i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) result += strings [ i ] ;\n  return result ;\n}\n",
        "U_CAPI int32_t U_EXPORT2 uset_concatenate ( const USet * set1 , const USet * set2 ) {\n  return ( ( UnicodeSet * ) set1 ) -> UnicodeSet : : concatenate ( * ( const UnicodeSet * ) set2 ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) sb . append ( strings [ i ] ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) sb . append ( strings [ i ] ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) result . append ( strings [ i ] ) ;\n  return result . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) result . append ( strings [ i ] ) ;\n  return result . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result . append ( strings [ i ] ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result . append ( strings [ i ] ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) sb . append ( strings [ i ] ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) sb . append ( strings [ i ] ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) result . append ( strings [ i ] ) ;\n  return result . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) result . append ( strings [ i ] ) ;\n  return result . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) sb . append ( strings [ i ] ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result . append ( strings [ i ] ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result . append ( strings [ i ] ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate ( String [ ] strings ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    sb . append ( strings [ i ] ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int [ ] concatenate ( int [ ] a , int [ ] b ) {\n  int [ ] result = new int [ a . length + b . length ] ;\n  System . arraycopy ( a , 0 , result , 0 , a . length ) ;\n  System . arraycopy ( b , 0 , result , a . length , b . length ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] concatenate ( String [ ] a , String [ ] b ) {\n  String [ ] result = new String [ a . length + b . length ] ;\n  System . arraycopy ( a , 0 , result , 0 , a . length ) ;\n  System . arraycopy ( b , 0 , result , a . length , b . length ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] concatenate ( String [ ] a , String [ ] b ) {\n  return concatenate ( Arrays . asList ( a ) , Arrays . asList ( b ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] concatenate ( String [ ] a , String [ ] b ) {\n  return concatenate ( a , b , null ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] concatenate ( String [ ] a , String [ ] b ) {\n  return concatenate ( a , b , false ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a')); \n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "target": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c + 21 - (int)('a')) % 26) + (int)('a')); \n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-23,5",
      "raw_output": [
        "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decode_shift ( String string ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( Character c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decodeShift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String decode_shift ( String string ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string decode_shift ( string string ) {\n  string result ;\n  for ( char c : string ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    result += c ;\n  }\n  return result ;\n}\n",
        "string decode_shift ( string string ) {\n  string result ;\n  for ( char c : string ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    result . push_back ( c ) ;\n  }\n  return result ;\n}\n",
        "string decode_shift ( string string ) {\n  string result ;\n  for ( auto c : string ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    result += c ;\n  }\n  return result ;\n}\n",
        "string decode_shift ( string string ) {\n  string result ;\n  for ( char c : string ) {\n    c = ( char ) ( ( ( ( unsigned int ) c - 5 - ( unsigned int ) ( 'a' ) ) % 26 ) + ( unsigned int ) ( 'a' ) ) ;\n    result += c ;\n  }\n  return result ;\n}\n",
        "string decode_shift ( string string ) {\n  string result ;\n  for ( char c : string ) {\n    c = char ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    result += c ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( Character c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift ( String string ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ;\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth >= 0) \n            return true; \n    } \n    return false; \n}",
      "target": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0) \n            return false; \n    } \n    return depth == 0; \n}",
      "function range": "16,5-27,5",
      "raw_output": [
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( byte b : brackets . getBytes ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketeting ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean correctBracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctBracketing ( final String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool correct_bracketing ( string brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets ) {\n    if ( b == '<' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool correct_bracketing ( string & brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets ) {\n    if ( b == '<' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool correct_bracketing ( string brackets ) {\n  int depth = 0 ;\n  for ( auto b : brackets ) {\n    if ( b == '<' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool correct_bracketing ( string brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets ) {\n    if ( b == '<' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "bool correct_bracketing ( const string & brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets ) {\n    if ( b == '<' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( byte b : brackets . getBytes ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( final String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing ( String brackets ) {\n  int depth = 0 ;\n  for ( char b : brackets . toCharArray ( ) ) {\n    if ( b == '<' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n) + 1); \n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
      "target": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (! count.containsKey(n)) \n            count.put(n, 0);\n        count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
      "function range": "8,5-22,5",
      "raw_output": [
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > removeDuplicates ( ArrayList < Integer > numbers ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > removeDuplicates ( ArrayList < Integer > numbers ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( int n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( int n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > removeDuplicates ( ArrayList < Integer > numbers ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( int n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( int n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > removeDuplicates ( ArrayList < Integer > numbers ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( int n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( int n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > removeDuplicates ( int [ ] numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( int n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( int n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < int > remove_duplicates ( vector < int > numbers ) {\n  vector < int > result ;\n  unordered_map < int , int > count ;\n  for ( auto n : numbers ) count [ n ] = count [ n ] + 1 ;\n  for ( auto n : numbers ) {\n    if ( count [ n ] == 1 ) {\n      result . push_back ( n ) ;\n    }\n  }\n  return result ;\n}\n",
        "public : vector < int > remove_duplicates ( vector < int > numbers ) {\n  vector < int > result ;\n  unordered_map < int , int > count ;\n  for ( auto n : numbers ) {\n    count [ n ] = count [ n ] + 1 ;\n  }\n  for ( auto n : numbers ) {\n    if ( count [ n ] == 1 ) {\n      result . push_back ( n ) ;\n    }\n  }\n  return result ;\n}\n",
        "public : vector < int > removeDuplicates ( vector < int > numbers ) {\n  vector < int > result ;\n  unordered_map < int , int > count ;\n  for ( auto n : numbers ) {\n    count [ n ] = count [ n ] + 1 ;\n  }\n  for ( auto n : numbers ) {\n    if ( count [ n ] == 1 ) {\n      result . push_back ( n ) ;\n    }\n  }\n  return result ;\n}\n",
        "public : vector < int > removeDuplicates ( vector < int > numbers ) {\n  vector < int > result ;\n  unordered_map < int , int > count ;\n  for ( auto n : numbers ) count [ n ] = count [ n ] + 1 ;\n  for ( auto n : numbers ) {\n    if ( count [ n ] == 1 ) {\n      result . push_back ( n ) ;\n    }\n  }\n  return result ;\n}\n",
        "public : vector < int > remove_duplicates ( vector < int > numbers ) {\n  vector < int > result ;\n  unordered_map < int , int > count ;\n  for ( int n : numbers ) count [ n ] = count [ n ] + 1 ;\n  for ( int n : numbers ) {\n    if ( count [ n ] == 1 ) {\n      result . push_back ( n ) ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > remove_duplicates ( ArrayList < Integer > numbers ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > remove_duplicates ( ArrayList < Integer > numbers ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( int n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( int n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > remove_duplicates ( ArrayList < Integer > numbers ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( int n : numbers ) count . put ( n , count . get ( n ) + 1 ) ;\n  for ( int n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > remove_duplicates ( ArrayList < Integer > numbers ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) {\n      result . add ( n ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < > ( ) ;\n  for ( Integer n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( Integer n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( int n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( int n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > remove_duplicates ( int [ ] numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  for ( int n : numbers ) {\n    count . put ( n , count . get ( n ) + 1 ) ;\n  }\n  for ( int n : numbers ) {\n    if ( count . get ( n ) == 1 ) result . add ( n ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){ \n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
      "target": "public static int largest_divisor(int n) {\n    for (int i = n - 1; i >= 1; i -= 1){ \n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
      "function range": "4,5-10,5",
      "raw_output": [
        "public static int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}\n",
        "static int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}\n",
        "static int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int largeatestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}\n",
        "public static int largestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static final int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static final int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}\n",
        "public static int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "static int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int largeatestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int largestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "static int largestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static final int largegestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int largestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int largeatestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static final int largestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int LargestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int LargestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}\n",
        "static int LargestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}\n",
        "static int LargestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public static int largeDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n"
      ],
      "mid_translation": [
        "int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}\n",
        "public : int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}\n",
        "int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "public : int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}\n",
        "int LargestDivisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) return i ;\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor ( int n ) {\n  for ( int i = n ;\n  i >= 0 ;\n  i -= 1 ) {\n    if ( n % i == 0 ) {\n      return i ;\n    }\n  }\n  return 1 ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1)); \n    }\n    return result;\n}",
      "target": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(0, i + 1)); \n    }\n    return result;\n}",
      "function range": "7,5-15,5",
      "raw_output": [
        "public static List < String > allPrefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > allPrefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > allPrefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static String [ ] allPrefixes ( String string ) {\n  String [ ] result = new String [ string . length ( ) ] ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result [ i ] = string . substring ( i + 1 ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > allPrefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > allPrefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > allPrefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > allPrefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > allPrefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static String [ ] allPrefixes ( String string ) {\n  String [ ] result = new String [ string . length ( ) ] ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result [ i ] = string . substring ( i + 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > allPrefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > allPrefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > allPrefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static String [ ] allPrefixes ( String string ) {\n  String [ ] result = new String [ string . length ( ) ] ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result [ i ] = string . substring ( i + 1 ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > allPrefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > allPrefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > allPrefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static String [ ] allPrefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n",
        "public static String [ ] allPrefixes ( String string ) {\n  String [ ] result = new String [ string . length ( ) ] ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result [ i ] = string . substring ( i + 1 ) ;\n  }\n  return result ;\n}\n",
        "public static String [ ] allPrefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n",
        "public static List < String > allPrefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > allPrefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n",
        "public static String [ ] allPrefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n",
        "public static String [ ] allPrefixes ( String string ) {\n  String [ ] result = new String [ string . length ( ) ] ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result [ i ] = string . substring ( i + 1 ) ;\n  }\n  return result ;\n}\n",
        "static List < String > allPrefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < string > all_prefixes ( string string ) {\n  vector < string > result ;\n  for ( int i = 0 ;\n  i < string . size ( ) ;\n  i += 1 ) result . push_back ( string . substr ( i + 1 ) ) ;\n  return result ;\n}\n",
        "vector < string > all_prefixes ( string string ) {\n  vector < string > result ;\n  for ( size_t i = 0 ;\n  i < string . size ( ) ;\n  i += 1 ) result . push_back ( string . substr ( i + 1 ) ) ;\n  return result ;\n}\n",
        "vector < string > all_prefixes ( const string & string ) {\n  vector < string > result ;\n  for ( size_t i = 0 ;\n  i < string . size ( ) ;\n  i += 1 ) result . push_back ( string . substr ( i + 1 ) ) ;\n  return result ;\n}\n",
        "QStringList all_prefixes ( const QString & string ) {\n  QStringList result ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) result << string . mid ( i + 1 ) ;\n  return result ;\n}\n",
        "QStringList allPrefixes ( const QString & string ) {\n  QStringList result ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) result << string . mid ( i + 1 ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < String > all_prefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > all_prefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > all_prefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] all_prefixes ( String string ) {\n  String [ ] result = new String [ string . length ( ) ] ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result [ i ] = string . substring ( i + 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > all_prefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > all_prefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > all_prefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > all_prefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > all_prefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] all_prefixes ( String string ) {\n  String [ ] result = new String [ string . length ( ) ] ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result [ i ] = string . substring ( i + 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > all_prefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > all_prefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > all_prefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] all_prefixes ( String string ) {\n  String [ ] result = new String [ string . length ( ) ] ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result [ i ] = string . substring ( i + 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > all_prefixes ( String string ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > all_prefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > all_prefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] all_prefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] all_prefixes ( String string ) {\n  String [ ] result = new String [ string . length ( ) ] ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result [ i ] = string . substring ( i + 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] all_prefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > all_prefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > all_prefixes ( String string ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] all_prefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] all_prefixes ( String string ) {\n  String [ ] result = new String [ string . length ( ) ] ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result [ i ] = string . substring ( i + 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > all_prefixes ( String string ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    result . add ( string . substring ( i + 1 ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) { \n            for (int k = j; k < numbers.length; k += 1) { \n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "target": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) { \n            for (int k = j + 1; k < numbers.length; k += 1) { \n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "21,5-31,5",
      "raw_output": [
        "public static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean triplesSumToZero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool triples_sum_to_zero ( vector < int > numbers ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . size ( ) ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "bool triples_sum_to_zero ( vector < int > numbers ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . size ( ) ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "bool triples_sum_to_zero ( vector < int > & numbers ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . size ( ) ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "bool triples_sum_to_zero ( vector < int > & numbers ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . size ( ) ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "bool triples_sum_to_zero ( const vector < int > & numbers ) {\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . size ( ) ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . size ( ) ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero ( int [ ] numbers ) {\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    for ( int j = i ;\n    j < numbers . length ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < numbers . length ;\n      k += 1 ) {\n        if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    } \n    return result.get(result.size() - 1);\n}",
      "target": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.remove(0); \n    }\n    return result.get(result.size() - 1);\n}",
      "function range": "20,5-35,5",
      "raw_output": [
        "static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}\n",
        "static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}\n",
        "static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "static int fib4 ( int n ) {\n  int [ ] result = new int [ 4 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}\n",
        "static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}\n",
        "static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "static int fib4 ( int n ) {\n  int [ ] result = new int [ 4 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}\n",
        "static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}\n",
        "public static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}\n",
        "public static int fib4 ( int n ) {\n  int [ ] result = new int [ 4 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}\n",
        "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "public static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}\n",
        "public static int fib4 ( int n ) {\n  int [ ] result = new int [ 4 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}\n",
        "static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) {\n      return result [ n ] ;\n    }\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) {\n      return result [ n ] ;\n    }\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ 0 ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}\n",
        "static int fib4 ( int n ) {\n  int [ ] result = new int [ 4 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}\n",
        "static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    return result [ result . length - 1 ] ;\n  }\n  ",
        "static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}\n"
      ],
      "mid_translation": [
        "int fib4 ( int n ) {\n  vector < int > result ;\n  result . push_back ( 0 ) ;\n  result . push_back ( 0 ) ;\n  result . push_back ( 2 ) ;\n  result . push_back ( 0 ) ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result . push_back ( result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ) ;\n  return result [ result . size ( ) - 1 ] ;\n}\n",
        "int fib4 ( int n ) {\n  vector < int > result ;\n  result . push_back ( 0 ) ;\n  result . push_back ( 0 ) ;\n  result . push_back ( 2 ) ;\n  result . push_back ( 0 ) ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . size ( ) - 1 ] ;\n}\n",
        "public : int fib4 ( int n ) {\n  vector < int > result ;\n  result . push_back ( 0 ) ;\n  result . push_back ( 0 ) ;\n  result . push_back ( 2 ) ;\n  result . push_back ( 0 ) ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result . push_back ( result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ) ;\n  return result [ result . size ( ) - 1 ] ;\n}\n",
        "int fib4 ( int n ) {\n  vector < int > result = {\n    0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) result . push_back ( result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ) ;\n    return result [ result . size ( ) - 1 ] ;\n  }\n  ",
        "int fib4 ( int n ) {\n  vector < int > result ;\n  result . push_back ( 0 ) ;\n  result . push_back ( 0 ) ;\n  result . push_back ( 2 ) ;\n  result . push_back ( 0 ) ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result . push_back ( result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ) ;\n  }\n  return result [ result . size ( ) - 1 ] ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ 4 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ 4 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ 4 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) {\n    result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  }\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ 4 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) {\n      return result [ n ] ;\n    }\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) {\n      return result [ n ] ;\n    }\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) {\n      result [ 0 ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    }\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 0 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ 4 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = {\n    0 , 0 , 0 , 2 , 0 }\n    ;\n    if ( n < 4 ) return result [ n ] ;\n    for ( int i = 4 ;\n    i < n + 1 ;\n    i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n    return result [ result . length - 1 ] ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4 ( int n ) {\n  int [ ] result = new int [ n + 1 ] ;\n  result [ 0 ] = 0 ;\n  result [ 1 ] = 0 ;\n  result [ 2 ] = 2 ;\n  result [ 3 ] = 0 ;\n  if ( n < 4 ) return result [ n ] ;\n  for ( int i = 4 ;\n  i < n + 1 ;\n  i += 1 ) result [ i ] = result [ 0 ] + result [ 1 ] + result [ 2 ] + result [ 3 ] ;\n  return result [ result . length - 1 ] ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length(); i += 1) { \n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
      "target": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length() + 1; i += 1) { \n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
      "function range": "4,5-12,5",
      "raw_output": [
        "public static int howManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int houldManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "static int howManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int howlManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int howManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int houldManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "static int howManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int howlManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int howManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int houldManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "static int howManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int howlManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int howManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int houldManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "static int howManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int howlManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int howManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int houldManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "static int howManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n",
        "public static int howlManyTimes ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}\n"
      ],
      "mid_translation": [
        "int how_many_times ( string string , string substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substr ( i , i + substring . length ( ) ) == substring ) times += 1 ;\n  }\n  return times ;\n}\n",
        "int how_many_times ( string & string , string & substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substr ( i , i + substring . length ( ) ) == substring ) times += 1 ;\n  }\n  return times ;\n}\n",
        "int how_many_times ( string const & string , string const & substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . size ( ) - substring . size ( ) ;\n  i += 1 ) {\n    if ( string . substr ( i , i + substring . size ( ) ) == substring ) times += 1 ;\n  }\n  return times ;\n}\n",
        "int how_many_times ( string string , string substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . size ( ) - substring . size ( ) ;\n  i += 1 ) {\n    if ( string . substr ( i , i + substring . size ( ) ) == substring ) times += 1 ;\n  }\n  return times ;\n}\n",
        "int how_many_times ( string & string , string & substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . size ( ) - substring . size ( ) ;\n  i += 1 ) {\n    if ( string . substr ( i , i + substring . size ( ) ) == substring ) times += 1 ;\n  }\n  return times ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times ( String string , String substring ) {\n  int times = 0 ;\n  for ( int i = 0 ;\n  i < string . length ( ) - substring . length ( ) ;\n  i += 1 ) {\n    if ( string . substring ( i , i + substring . length ( ) ) . equals ( substring ) ) {\n      times += 1 ;\n    }\n  }\n  return times ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) == text.charAt(text.length() - i)) \n            return true; \n    } \n    return false; \n}",
      "target": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i - 1)) \n            return false; \n    } \n    return true; \n}",
      "function range": "14,5-20,5",
      "raw_output": [
        "public static boolean isPalindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isAlindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean isAlindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( final String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( CharSequence text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean isPalindrome ( final String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool is_palindrome ( string text ) {\n  for ( int i = 0 ;\n  i < text . size ( ) ;\n  i += 1 ) {\n    if ( text [ i ] == text [ text . size ( ) - i ] ) return true ;\n  }\n  return false ;\n}\n",
        "bool is_palindrome ( string text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text [ i ] == text [ text . length ( ) - i ] ) return true ;\n  }\n  return false ;\n}\n",
        "bool is_palindrome ( const string & text ) {\n  for ( int i = 0 ;\n  i < text . size ( ) ;\n  i += 1 ) {\n    if ( text [ i ] == text [ text . size ( ) - i ] ) return true ;\n  }\n  return false ;\n}\n",
        "bool is_palindrome ( const char * text ) {\n  for ( int i = 0 ;\n  i < strlen ( text ) ;\n  i += 1 ) {\n    if ( text [ i ] == text [ strlen ( text ) - i ] ) return true ;\n  }\n  return false ;\n}\n",
        "bool is_palindrome ( const string & text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text [ i ] == text [ text . length ( ) - i ] ) return true ;\n  }\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( final String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( CharSequence text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome ( final String text ) {\n  for ( int i = 0 ;\n  i < text . length ( ) ;\n  i += 1 ) {\n    if ( text . charAt ( i ) == text . charAt ( text . length ( ) - i ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<Integer>(); \n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
      "target": "public static int[] common(int[] l1, int[] l2) {\n    HashSet<Integer> common = new HashSet<Integer>(); \n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
      "function range": "12,5-29,5",
      "raw_output": [
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  ArrayList < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( Integer c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  ArrayList < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length + l2 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  ArrayList < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( Integer c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  ArrayList < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length + l2 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  ArrayList < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length + l2 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < int > common ( vector < int > l1 , vector < int > l2 ) {\n  vector < int > common ;\n  for ( int i = 0 ;\n  i < l1 . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . size ( ) ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) {\n        common . push_back ( l1 [ i ] ) ;\n      }\n    }\n  }\n  vector < int > result ( common . size ( ) , 0 ) ;\n  int index = 0 ;\n  for ( auto c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n",
        "public : vector < int > common ( vector < int > l1 , vector < int > l2 ) {\n  vector < int > common ;\n  for ( int i = 0 ;\n  i < l1 . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . size ( ) ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) {\n        common . push_back ( l1 [ i ] ) ;\n      }\n    }\n  }\n  vector < int > result ;\n  int index = 0 ;\n  for ( auto c : common ) {\n    result . push_back ( c ) ;\n    index += 1 ;\n  }\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n",
        "public : vector < int > common ( vector < int > l1 , vector < int > l2 ) {\n  vector < int > common ;\n  for ( int i = 0 ;\n  i < l1 . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . size ( ) ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) {\n        common . push_back ( l1 [ i ] ) ;\n      }\n    }\n  }\n  vector < int > result ( common . size ( ) ) ;\n  int index = 0 ;\n  for ( auto c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n",
        "public : vector < int > common ( vector < int > l1 , vector < int > l2 ) {\n  vector < int > common ;\n  for ( int i = 0 ;\n  i < l1 . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . size ( ) ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) {\n        common . push_back ( l1 [ i ] ) ;\n      }\n    }\n  }\n  vector < int > result ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result . push_back ( c ) ;\n    index += 1 ;\n  }\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n",
        "public : vector < int > common ( vector < int > l1 , vector < int > l2 ) {\n  vector < int > common ;\n  for ( int i = 0 ;\n  i < l1 . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . size ( ) ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) {\n        common . push_back ( l1 [ i ] ) ;\n      }\n    }\n  }\n  vector < int > result ( common . size ( ) , 0 ) ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  ArrayList < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( Integer c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  ArrayList < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length + l2 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  ArrayList < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( Integer c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  ArrayList < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length + l2 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  ArrayList < Integer > common = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  List < Integer > common = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common . add ( l1 [ i ] ) ;\n    }\n  }\n  int [ ] result = new int [ common . size ( ) ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] common ( int [ ] l1 , int [ ] l2 ) {\n  int [ ] common = new int [ l1 . length + l2 . length ] ;\n  for ( int i = 0 ;\n  i < l1 . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l2 . length ;\n    j += 1 ) {\n      if ( l1 [ i ] == l2 [ j ] ) common [ i ] = l1 [ i ] ;\n    }\n  }\n  int [ ] result = new int [ common . length ] ;\n  int index = 0 ;\n  for ( int c : common ) {\n    result [ index ] = c ;\n    index += 1 ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1); \n    }\n    return result;\n}",
      "target": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n + 1); \n    }\n    return result;\n}",
      "function range": "13,5-20,5",
      "raw_output": [
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > incrList ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > incrList ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] incrList ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  for ( int n : l ) {\n    result [ n - 1 ] ++ ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] incrList ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  for ( int n : l ) {\n    result [ n - 1 ] ++ ;\n  }\n  return result ;\n}\n",
        "public static int [ ] incrList ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  for ( int n : l ) {\n    result [ n - 1 ] ++ ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] incrList ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  for ( int n : l ) {\n    result [ n - 1 ] ++ ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > incrList ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > incrList ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > incr_list ( vector < int > l ) {\n  vector < int > result ;\n  for ( auto n : l ) result . push_back ( n - 1 ) ;\n  return result ;\n}\n",
        "vector < int > incr_list ( vector < int > l ) {\n  vector < int > result ;\n  for ( int n : l ) result . push_back ( n - 1 ) ;\n  return result ;\n}\n",
        "public : vector < int > incr_list ( vector < int > & l ) {\n  vector < int > result ;\n  for ( int n : l ) result . push_back ( n - 1 ) ;\n  return result ;\n}\n",
        "public : vector < int > incr_list ( vector < int > & l ) {\n  vector < int > result ;\n  for ( auto n : l ) result . push_back ( n - 1 ) ;\n  return result ;\n}\n",
        "vector < int > incr_list ( vector < int > l ) {\n  vector < int > result ;\n  for ( auto & n : l ) result . push_back ( n - 1 ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > incr_list ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > incr_list ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] incr_list ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  for ( int n : l ) {\n    result [ n - 1 ] ++ ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] incr_list ( int [ ] l ) {\n  int [ ] result = new int [ l . length ] ;\n  for ( int n : l ) {\n    result [ n - 1 ] ++ ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] incr_list ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  for ( int n : l ) {\n    result [ n - 1 ] ++ ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] incr_list ( List < Integer > l ) {\n  int [ ] result = new int [ l . size ( ) ] ;\n  for ( int n : l ) {\n    result [ n - 1 ] ++ ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > incr_list ( ArrayList < Integer > l ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > incr_list ( List < Integer > l ) {\n  List < Integer > result = new ArrayList < Integer > ( l . size ( ) ) ;\n  for ( Integer n : l ) {\n    result . add ( n - 1 ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)){ \n            result.add(string);\n        }\n    }\n    return result;\n}",
      "target": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix)){ \n            result.add(string);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "raw_output": [
        "public static List < String > filterByPrefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static String [ ] filterByPrefix ( String [ ] strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n",
        "public static List < String > filterByPrefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , false ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > filterByPrefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > filterByPrefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String string , String prefix , String separator ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , separator ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String string , String prefix , String delimiter ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , delimiter ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String prefix , String [ ] strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , 0 ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String prefix , List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String prefix , String [ ] strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > filterByPrefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static String [ ] filterByPrefix ( String [ ] strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n",
        "public static List < String > filterByPrefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , false ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > filterByPrefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > filterByPrefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String string , String prefix , String separator ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , separator ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String string , String prefix , String delimiter ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , delimiter ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String prefix , String [ ] strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , 0 ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String prefix , List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > filter ( String prefix , List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String string , String prefix , String separator ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , separator ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String string , String prefix , String delimiter ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , delimiter ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > split ( String prefix , String [ ] strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , 0 ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > filter ( String prefix , List < String > strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > getStrings ( String prefix , List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "QStringList filterByPrefix ( const QStringList & strings , const QString & prefix ) {\n  QStringList result ;\n  foreach ( const QString & string , strings ) {\n    if ( string . startsWith ( prefix , Qt :: CaseInsensitive ) ) result . append ( string ) ;\n  }\n  return result ;\n}\n",
        "foreach ( const QString & string , strings ) {\n  if ( string . startsWith ( prefix , Qt :: CaseInsensitive ) ) result . append ( string ) ;\n}\n",
        "QStringList filterByPrefix ( const QStringList & strings , const QString & prefix ) {\n  QStringList result ;\n  foreach ( const QString & string , strings ) {\n    if ( string . startsWith ( prefix , Qt :: CaseInsensitive ) ) result << string ;\n  }\n  return result ;\n}\n",
        "foreach ( QString string , strings ) {\n  if ( string . startsWith ( prefix , Qt :: CaseInsensitive ) ) result . append ( string ) ;\n}\n",
        "foreach ( const QString & string , strings ) {\n  if ( string . startsWith ( prefix , Qt :: CaseInsensitive ) ) result << string ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < String > filter_by_prefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] filter_by_prefix ( String [ ] strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , false ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String string , String prefix , String separator ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , separator ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String string , String prefix , String delimiter ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , delimiter ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String prefix , String [ ] strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , 0 ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String prefix , List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String prefix , String [ ] strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] filter_by_prefix ( String [ ] strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , false ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( List < String > strings , String prefix ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String string , String prefix , String separator ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , separator ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String string , String prefix , String delimiter ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , delimiter ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String prefix , String [ ] strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , 0 ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String prefix , List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String prefix , List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String string , String prefix , String separator ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , separator ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String string , String prefix , String delimiter ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , delimiter ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String prefix , String [ ] strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , 0 ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String prefix , List < String > strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_prefix ( String prefix , List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    if ( string . startsWith ( prefix , true ) ) {\n      result . add ( string ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (String note : music_string.split(\" \")){ \n        result.add(note_map.get(note));\n    }\n    return result;\n}",
      "target": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    if (music_string.trim().equals(\"\")) \n        return result;\n    for (String note : music_string.split(\" \")){\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
      "function range": "8,5-20,5",
      "raw_output": [
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result . toArray ( new int [ result . size ( ) ] ) ;\n}\n",
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) result . add ( noteMap . get ( note ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) result . add ( noteMap . get ( note ) ) ;\n  return result ;\n}\n",
        "public static List < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) result . add ( noteMap . get ( note ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result . toArray ( new int [ result . size ( ) ] ) ;\n}\n",
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > parseMusic ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > parse_music ( string music_string ) {\n  unordered_map < string , int > note_map ;\n  note_map [ \"o\" ] = 4 ;\n  note_map [ \"o|\" ] = 2 ;\n  note_map [ \".|\" ] = 1 ;\n  vector < int > result ;\n  for ( string note : music_string . split ( \" \" ) ) result . push_back ( note_map [ note ] ) ;\n  return result ;\n}\n",
        "vector < int > parse_music ( string music_string ) {\n  unordered_map < string , int > note_map ;\n  note_map [ \"o\" ] = 4 ;\n  note_map [ \"o|\" ] = 2 ;\n  note_map [ \".|\" ] = 1 ;\n  vector < int > result ;\n  for ( string note : music_string . split ( \" \" ) ) {\n    result . push_back ( note_map [ note ] ) ;\n  }\n  return result ;\n}\n",
        "vector < int > parse_music ( string music_string ) {\n  unordered_map < string , int > note_map = {\n    {\n      \"o\" , 4 }\n      , {\n        \"o|\" , 2 }\n        , {\n          \".|\" , 1 }\n        }\n        ;\n        vector < int > result ;\n        for ( string note : music_string . split ( \" \" ) ) {\n          result . push_back ( note_map [ note ] ) ;\n        }\n        return result ;\n      }\n      ",
        "vector < int > parse_music ( string music_string ) {\n  unordered_map < string , int > note_map = {\n    {\n      \"o\" , 4 }\n      , {\n        \"o|\" , 2 }\n        , {\n          \".|\" , 1 }\n        }\n        ;\n        vector < int > result ;\n        for ( string note : music_string . split ( \" \" ) ) result . push_back ( note_map [ note ] ) ;\n        return result ;\n      }\n      ",
        "vector < int > parse_music ( const string & music_string ) {\n  unordered_map < string , int > note_map ;\n  note_map [ \"o\" ] = 4 ;\n  note_map [ \"o|\" ] = 2 ;\n  note_map [ \".|\" ] = 1 ;\n  vector < int > result ;\n  for ( string note : music_string . split ( \" \" ) ) result . push_back ( note_map [ note ] ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result . toArray ( new int [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) result . add ( noteMap . get ( note ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) result . add ( noteMap . get ( note ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) result . add ( noteMap . get ( note ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result . toArray ( new int [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < String , Integer > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > parse_music ( String musicString ) {\n  HashMap < String , Integer > noteMap = new HashMap < > ( ) ;\n  noteMap . put ( \"o\" , 4 ) ;\n  noteMap . put ( \"o|\" , 2 ) ;\n  noteMap . put ( \".|\" , 1 ) ;\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  for ( String note : musicString . split ( \" \" ) ) {\n    result . add ( noteMap . get ( note ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base; \n        x = x - x / base; \n    }\n    return result;\n}",
      "target": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (x % base) + result; \n        x = (int) x / base; \n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "raw_output": [
        "public static String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  String result = new String ( ) ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x != 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "static public String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x != 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "static String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  String result = \"\" ;\n  while ( x ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  StringBuilder builder = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    builder . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return builder . toString ( ) ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    result . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String changeBase ( int x , int base ) {\n  StringBuilder stringBuilder = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    stringBuilder . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return stringBuilder . toString ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string change_base ( int x , int base ) {\n  string result ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "string change_base ( int x , int base ) {\n  string result ;\n  while ( x ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "string change_base ( int x , int base ) {\n  string result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "string change_base ( int x , int base ) {\n  string result = \"\" ;\n  while ( x ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n",
        "string change_base ( int x , int base ) {\n  string result ;\n  while ( x > 0 ) {\n    result . push_back ( x % base ) ;\n    x = x - x / base ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = new String ( ) ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x != 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static public String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x != 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x > 0 ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  String result = \"\" ;\n  while ( x ) {\n    result = result + x % base ;\n    x = x - x / base ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  while ( x > 0 ) {\n    sb . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  StringBuilder builder = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    builder . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return builder . toString ( ) ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    result . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base ( int x , int base ) {\n  StringBuilder stringBuilder = new StringBuilder ( ) ;\n  while ( x > 0 ) {\n    stringBuilder . append ( x % base ) ;\n    x = x - x / base ;\n  }\n  return stringBuilder . toString ( ) ;\n}",
          "correctness": "timeout"
        }
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2); \n}",
      "target": "public static int fib(int n) {\n    if (n == 0 || n == 1) \n        return n;\n    return fib(n - 1) + fib(n - 2);\n}",
      "function range": "12,5-14,5",
      "raw_output": [
        "static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static public int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static int fib ( int n ) {\n  return Fib . fib ( n - 1 ) + Fib . fib ( n - 2 ) ;\n}\n",
        "static long fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static int Fib ( int n ) {\n  return Fib ( n - 1 ) + Fib ( n - 2 ) ;\n}\n",
        "public static int Fib ( int n ) {\n  return Fib ( n - 1 ) + Fib ( n - 2 ) ;\n}\n",
        "static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static int fib ( int n ) {\n  return Fib ( n - 1 ) + Fib ( n - 2 ) ;\n}\n",
        "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "public static final int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static public int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static final int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static public int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static int fib ( int n ) {\n  return Fib . fib ( n - 1 ) + Fib . fib ( n - 2 ) ;\n}\n",
        "static long fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static int Fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "public static int Fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "static int Fib ( int n ) {\n  return Fib ( n - 1 ) + Fib ( n - 2 ) ;\n}\n"
      ],
      "mid_translation": [
        "int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "int Fib ( int n ) {\n  return Fib ( n - 1 ) + Fib ( n - 2 ) ;\n}\n",
        "public : int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "size_t fib ( size_t n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n",
        "int Fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return Fib . fib ( n - 1 ) + Fib . fib ( n - 2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return Fib ( n - 1 ) + Fib ( n - 2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return Fib ( n - 1 ) + Fib ( n - 2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return Fib ( n - 1 ) + Fib ( n - 2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return Fib . fib ( n - 1 ) + Fib . fib ( n - 2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return fib ( n - 1 ) + fib ( n - 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib ( int n ) {\n  return Fib ( n - 1 ) + Fib ( n - 2 ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    } \n    return result;\n}",
      "target": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n        else{ \n            result += \"1\";\n        }\n    }\n    return result;\n}",
      "function range": "4,5-12,5",
      "raw_output": [
        "public static String stringXor ( String a , String b ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result += \"0\" ;\n    }\n  }\n  return result ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String string_xor ( String a , String b ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result += \"0\" ;\n    }\n  }\n  return result ;\n}\n",
        "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result . append ( \"0\" ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result . append ( \"0\" ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String string_xor ( String a , String b ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result . append ( \"0\" ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String string_xor ( String a , String b ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result += \"0\" ;\n    }\n  }\n  return result ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String string_xor ( String a , String b ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result += \"0\" ;\n    }\n  }\n  return result ;\n}\n",
        "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result . append ( \"0\" ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) sb . append ( \"0\" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) sb . append ( \"0\" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) sb . append ( \"0\" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) result . append ( \"0\" ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String stringXor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string string_xor ( string a , string b ) {\n  string result = \"\" ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a [ i ] == b [ i ] ) result += \"0\" ;\n  }\n  return result ;\n}\n",
        "string string_xor ( string a , string b ) {\n  string result ;\n  for ( int i = 0 ;\n  i < a . size ( ) ;\n  i += 1 ) {\n    if ( a [ i ] == b [ i ] ) result += \"0\" ;\n  }\n  return result ;\n}\n",
        "string string_xor ( string a , string b ) {\n  string result ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a [ i ] == b [ i ] ) result += \"0\" ;\n  }\n  return result ;\n}\n",
        "string string_xor ( string a , string b ) {\n  string result = \"\" ;\n  for ( int i = 0 ;\n  i < a . size ( ) ;\n  i += 1 ) {\n    if ( a [ i ] == b [ i ] ) result += \"0\" ;\n  }\n  return result ;\n}\n",
        "string string_xor ( string a , string b ) {\n  string result ;\n  for ( int i = 0 ;\n  i < a . size ( ) ;\n  i += 1 ) {\n    if ( a [ i ] == b [ i ] ) {\n      result += \"0\" ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result += \"0\" ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result += \"0\" ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result . append ( \"0\" ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result . append ( \"0\" ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result . append ( \"0\" ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result += \"0\" ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result += \"0\" ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      result . append ( \"0\" ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) sb . append ( \"0\" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) sb . append ( \"0\" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) sb . append ( \"0\" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) result . append ( \"0\" ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor ( String a , String b ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    if ( a . charAt ( i ) == b . charAt ( i ) ) {\n      sb . append ( \"0\" ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j)){ \n            largest = n % j; \n        }\n    }\n    return largest;\n}",
      "target": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0 && is_prime(j)){ \n            largest = j; \n        }\n    }\n    return largest;\n}",
      "function range": "20,5-28,5",
      "raw_output": [
        "public static int largestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "static int largestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static int largegestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static int largestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static int largegestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static final int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static final int largestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static long largestPrimeFactor ( int n ) {\n  long largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static long largest_prime_factor ( int n ) {\n  long largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static BigInteger largestPrimeFactor ( int n ) {\n  BigInteger largest = BigInteger . ONE ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "static long largest_prime_factor ( int n ) {\n  long largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static ll largestPrimeFactor ( int n ) {\n  ll largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static int largestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "static int largestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static int largegestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static int largestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "static int largestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n",
        "public static int largegestPrimeFactor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}\n"
      ],
      "mid_translation": [
        "int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) largest = n % j ;\n  }\n  return largest ;\n}\n",
        "public : int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) largest = n % j ;\n  }\n  return largest ;\n}\n",
        "ll largest_prime_factor ( int n ) {\n  ll largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) largest = n % j ;\n  }\n  return largest ;\n}\n",
        "size_t largest_prime_factor ( size_t n ) {\n  size_t largest = 1 ;\n  for ( size_t j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) largest = n % j ;\n  }\n  return largest ;\n}\n",
        "unsigned largest_prime_factor ( unsigned n ) {\n  unsigned largest = 1 ;\n  for ( unsigned j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) largest = n % j ;\n  }\n  return largest ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long largest_prime_factor ( int n ) {\n  long largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long largest_prime_factor ( int n ) {\n  long largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static BigInteger largest_prime_factor ( int n ) {\n  BigInteger largest = BigInteger . ONE ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long largest_prime_factor ( int n ) {\n  long largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ll largest_prime_factor ( int n ) {\n  ll largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( is_prime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor ( int n ) {\n  int largest = 1 ;\n  for ( int j = 2 ;\n  j < n ;\n  j += 1 ) {\n    if ( isPrime ( j ) ) {\n      largest = n % j ;\n    }\n  }\n  return largest ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n    return x | y; \n}",
      "target": "public static int add(int x, int y) {\n    return x + y; \n}",
      "function range": "10,5-12,5",
      "raw_output": [
        "public static int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "static int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "static public int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "/**\n* Add two integers.\n*\n* @param x the first integer\n* @param y the second integer\n* @return x + y\n*/\npublic static int add",
        "/**\n* Add two integers.\n*\n* @param x the first integer\n* @param y the second integer\n* @return the result\n*/\npublic static int add ( int",
        "public static int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "static int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "static public int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "public static int Add ( int x , int y ) {\n  return x | y ;\n}\n",
        "public static int plus ( int x , int y ) {\n  return x | y ;\n}\n",
        "public static long add ( long x , long y ) {\n  return x | y ;\n}\n",
        "public static int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "public static double add ( double x , double y ) {\n  return x | y ;\n}\n",
        "static long add ( long x , long y ) {\n  return x | y ;\n}\n",
        "public static long [ ] add ( long [ ] x , long [ ] y ) {\n  long [ ] result = new long [ x . length + y . length ] ;\n  System . arraycopy ( x , 0 , result , 0 , x . length ) ;\n  System . arraycopy ( y , 0 , result , x . length , y . length ) ;\n  return result ;\n}\n",
        "public static int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "public static int Add ( int x , int y ) {\n  return x | y ;\n}\n",
        "static int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "static public int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "static int Add ( int x , int y ) {\n  return x | y ;\n}\n",
        "public static long add ( long x , long y ) {\n  return x | y ;\n}\n",
        "public static int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "public static double add ( double x , double y ) {\n  return x | y ;\n}\n",
        "public static long [ ] add ( long [ ] x , long [ ] y ) {\n  long [ ] result = new long [ x . length + y . length ] ;\n  System . arraycopy ( x , 0 , result , 0 , x . length ) ;\n  System . arraycopy ( y , 0 , result , x . length , y . length ) ;\n  return result ;\n}\n",
        "public static long [ ] add ( long [ ] x , long [ ] y ) {\n  return add ( x , y , 0 ) ;\n}\n"
      ],
      "mid_translation": [
        "int add ( int x , int y ) {\n  return x | y ;\n}\n",
        "u32 Add ( u32 x , u32 y ) {\n  return x | y ;\n}\n",
        "template < typename T > T add ( T x , T y ) {\n  return x | y ;\n}\n",
        "int Add ( int x , int y ) {\n  return x | y ;\n}\n",
        "template < typename T > inline T add ( T x , T y ) {\n  return x | y ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": " ",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add ( int",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long add ( long x , long y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double add ( double x , double y ) {\n  return x | y ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long add ( long x , long y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long [ ] add ( long [ ] x , long [ ] y ) {\n  long [ ] result = new long [ x . length + y . length ] ;\n  System . arraycopy ( x , 0 , result , 0 , x . length ) ;\n  System . arraycopy ( y , 0 , result , x . length , y . length ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long add ( long x , long y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add ( int x , int y ) {\n  return x | y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double add ( double x , double y ) {\n  return x | y ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long [ ] add ( long [ ] x , long [ ] y ) {\n  long [ ] result = new long [ x . length + y . length ] ;\n  System . arraycopy ( x , 0 , result , 0 , x . length ) ;\n  System . arraycopy ( y , 0 , result , x . length , y . length ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long [ ] add ( long [ ] x , long [ ] y ) {\n  return add ( x , y , 0 ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) { \n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
      "target": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n        if (numbers[i] < min){ \n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
      "function range": "4,5-22,5",
      "raw_output": [
        "public static double [ ] rescaleToUnit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static long [ ] rescaleToUnit ( long [ ] numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  long [ ] result = new long [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( int [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( List < Double > numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  double [ ] result = new double [ numbers . size ( ) ] ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result [ i ] = ( numbers . get ( i ) - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( double [ ] numbers ) {\n  double min = Double . NEGATIVE_INFINITY ;\n  double max = Double . POSITIVE_INFINITY ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double rescaleToUnit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}\n",
        "public static double rescaleToUnit ( List < Double > numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  double result = ( numbers . get ( 0 ) - min ) / ( max - min ) ;\n  return result ;\n}\n",
        "public static long rescaleToUnit ( long [ ] numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  long result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}\n",
        "public static long rescaleToUnit ( List < Long > numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  long result = ( numbers . get ( 0 ) - min ) / ( max - min ) ;\n  return result ;\n}\n",
        "public static double rescaleToUnit ( int [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}\n",
        "public static double rescaleToUnit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}\n",
        "public static long rescaleToUnit ( long [ ] numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  long result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}\n",
        "public static double rescaleToUnit ( List < Double > numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  double result = ( numbers . get ( 0 ) - min ) / ( max - min ) ;\n  return result ;\n}\n",
        "public static double rescaleToUnit ( int [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static long [ ] rescaleToUnit ( long [ ] numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  long [ ] result = new long [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( int [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( List < Double > numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  double [ ] result = new double [ numbers . size ( ) ] ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result [ i ] = ( numbers . get ( i ) - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( double [ ] numbers ) {\n  double min = Double . NEGATIVE_INFINITY ;\n  double max = Double . POSITIVE_INFINITY ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( int [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static long [ ] rescaleToUnit ( long [ ] numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  long [ ] result = new long [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( List < Double > numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  double [ ] result = new double [ numbers . size ( ) ] ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result [ i ] = ( numbers . get ( i ) - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n",
        "public static double [ ] rescaleToUnit ( double [ ] numbers ) {\n  double min = Double . NEGATIVE_INFINITY ;\n  double max = Double . POSITIVE_INFINITY ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "template < class T > void rescale_to_unit ( std :: vector < T > & numbers ) {\n  T min = std :: numeric_limits < T > :: max ( ) ;\n  T max = std :: numeric_limits < T > :: min ( ) ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) max = numbers [ i ] ;\n    else if ( numbers [ i ] < min ) min = numbers [ i ] ;\n  }\n  std :: vector < T > result ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) result . push_back ( ( numbers [ i ] - min ) / ( max - min ) ) ;\n}\n",
        "template < class T > T rescale_to_unit ( std :: vector < T > numbers ) {\n  T min = std :: numeric_limits < T > :: max ( ) ;\n  T max = std :: numeric_limits < T > :: min ( ) ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) max = numbers [ i ] ;\n    else if ( numbers [ i ] < min ) min = numbers [ i ] ;\n  }\n  T result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}\n",
        "template < class T > T rescale_to_unit ( const std :: vector < T > & numbers ) {\n  T min = std :: numeric_limits < T > :: max ( ) ;\n  T max = std :: numeric_limits < T > :: min ( ) ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) max = numbers [ i ] ;\n    else if ( numbers [ i ] < min ) min = numbers [ i ] ;\n  }\n  T result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}\n",
        "template < class T > void rescale_to_unit ( std :: vector < T > & numbers ) {\n  T min = std :: numeric_limits < T > :: max ( ) ;\n  T max = std :: numeric_limits < T > :: min ( ) ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) max = numbers [ i ] ;\n    else if ( numbers [ i ] < min ) min = numbers [ i ] ;\n  }\n  std :: vector < T > result ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . push_back ( ( numbers [ i ] - min ) / ( max - min ) ) ;\n  }\n}\n",
        "template < typename T > void rescale_to_unit ( std :: vector < T > & numbers ) {\n  T min = std :: numeric_limits < T > :: max ( ) ;\n  T max = std :: numeric_limits < T > :: min ( ) ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) max = numbers [ i ] ;\n    else if ( numbers [ i ] < min ) min = numbers [ i ] ;\n  }\n  std :: vector < T > result ;\n  for ( size_t i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) result . push_back ( ( numbers [ i ] - min ) / ( max - min ) ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static double [ ] rescale_to_unit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long [ ] rescale_to_unit ( long [ ] numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  long [ ] result = new long [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( int [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( List < Double > numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  double [ ] result = new double [ numbers . size ( ) ] ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result [ i ] = ( numbers . get ( i ) - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( double [ ] numbers ) {\n  double min = Double . NEGATIVE_INFINITY ;\n  double max = Double . POSITIVE_INFINITY ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double rescale_to_unit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double rescale_to_unit ( List < Double > numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  double result = ( numbers . get ( 0 ) - min ) / ( max - min ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long rescale_to_unit ( long [ ] numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  long result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long rescale_to_unit ( List < Long > numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  long result = ( numbers . get ( 0 ) - min ) / ( max - min ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double rescale_to_unit ( int [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double rescale_to_unit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long rescale_to_unit ( long [ ] numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  long result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double rescale_to_unit ( List < Double > numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  double result = ( numbers . get ( 0 ) - min ) / ( max - min ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double rescale_to_unit ( int [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double result = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ 0 ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long [ ] rescale_to_unit ( long [ ] numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  long [ ] result = new long [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( int [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( List < Double > numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  double [ ] result = new double [ numbers . size ( ) ] ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result [ i ] = ( numbers . get ( i ) - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( double [ ] numbers ) {\n  double min = Double . NEGATIVE_INFINITY ;\n  double max = Double . POSITIVE_INFINITY ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( double [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( int [ ] numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long [ ] rescale_to_unit ( long [ ] numbers ) {\n  long min = Long . MAX_VALUE ;\n  long max = Long . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  long [ ] result = new long [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( List < Double > numbers ) {\n  double min = Double . MAX_VALUE ;\n  double max = Double . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    if ( numbers . get ( i ) > max ) {\n      max = numbers . get ( i ) ;\n    }\n    else if ( numbers . get ( i ) < min ) {\n      min = numbers . get ( i ) ;\n    }\n  }\n  double [ ] result = new double [ numbers . size ( ) ] ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result [ i ] = ( numbers . get ( i ) - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double [ ] rescale_to_unit ( double [ ] numbers ) {\n  double min = Double . NEGATIVE_INFINITY ;\n  double max = Double . POSITIVE_INFINITY ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    if ( numbers [ i ] > max ) {\n      max = numbers [ i ] ;\n    }\n    else if ( numbers [ i ] < min ) {\n      min = numbers [ i ] ;\n    }\n  }\n  double [ ] result = new double [ numbers . length ] ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2; \n    }\n}",
      "target": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1]) / 2.; \n    }\n}",
      "function range": "12,5-20,5",
      "raw_output": [
        "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}\n",
        "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}\n",
        "static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}\n",
        "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}\n",
        "static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}\n",
        "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}\n",
        "static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 ) + 1 ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 ) + 1 ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 ) + 1 ] / 2 ;\n}\n",
        "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 ) + 1 ] / 2 ;\n}\n",
        "static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 ) + 1 ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] list ) {\n  Arrays . sort ( list ) ;\n  if ( list . length % 2 == 1 ) {\n    return list [ ( int ) ( list . length / 2 ) ] ;\n  }\n  else {\n    return list [ ( int ) ( list . length / 2 ) ] + list [ ( int ) ( list . length / 2 + 1 ) ] / 2 ;\n  }\n}\n",
        "public static double median ( int [ ] list ) {\n  Arrays . sort ( list ) ;\n  if ( list . length % 2 == 1 ) return list [ ( int ) ( list . length / 2 ) ] ;\n  else return list [ ( int ) ( list . length / 2 ) ] + list [ ( int ) ( list . length / 2 + 1 ) ] / 2 ;\n}\n",
        "public static double median ( ArrayList < Integer > list ) {\n  Collections . sort ( list ) ;\n  if ( list . size ( ) % 2 == 1 ) {\n    return list . get ( ( int ) ( list . size ( ) / 2 ) ) ;\n  }\n  else {\n    return list . get ( ( int ) ( list . size ( ) / 2 ) ) + list . get ( ( int ) ( list . size ( ) / 2 + 1 ) ) / 2 ;\n  }\n}\n",
        "public static double median ( List < Integer > list ) {\n  Collections . sort ( list ) ;\n  if ( list . size ( ) % 2 == 1 ) {\n    return list . get ( ( int ) ( list . size ( ) / 2 ) ) ;\n  }\n  else {\n    return list . get ( ( int ) ( list . size ( ) / 2 ) ) + list . get ( ( int ) ( list . size ( ) / 2 + 1 ) ) / 2 ;\n  }\n}\n",
        "static double median ( int [ ] list ) {\n  Arrays . sort ( list ) ;\n  if ( list . length % 2 == 1 ) {\n    return list [ ( int ) ( list . length / 2 ) ] ;\n  }\n  else {\n    return list [ ( int ) ( list . length / 2 ) ] + list [ ( int ) ( list . length / 2 + 1 ) ] / 2 ;\n  }\n}\n"
      ],
      "mid_translation": [
        "double median ( vector < int > & v ) {\n  sort ( v . begin ( ) , v . end ( ) ) ;\n  if ( v . size ( ) % 2 == 1 ) return v [ ( int ) ( v . size ( ) / 2 ) ] ;\n  else return v [ ( int ) ( v . size ( ) / 2 ) ] + v [ ( int ) ( v . size ( ) / 2 + 1 ) ] / 2 ;\n}\n",
        "double median ( vector < int > & vec ) {\n  sort ( vec . begin ( ) , vec . end ( ) ) ;\n  if ( vec . size ( ) % 2 == 1 ) return vec [ ( int ) ( vec . size ( ) / 2 ) ] ;\n  else return vec [ ( int ) ( vec . size ( ) / 2 ) ] + vec [ ( int ) ( vec . size ( ) / 2 + 1 ) ] / 2 ;\n}\n",
        "double median ( vector < int > & v ) {\n  sort ( v . begin ( ) , v . end ( ) ) ;\n  if ( v . size ( ) % 2 == 1 ) return v [ int ( v . size ( ) / 2 ) ] ;\n  else return v [ int ( v . size ( ) / 2 ) ] + v [ int ( v . size ( ) / 2 + 1 ) ] / 2 ;\n}\n",
        "double median ( vector < int > & v ) {\n  sort ( v . begin ( ) , v . end ( ) ) ;\n  if ( v . size ( ) % 2 == 1 ) return v [ ( int ) ( v . size ( ) / 2 ) ] ;\n  else return v [ ( int ) ( v . size ( ) / 2 ) ] + v [ ( int ) ( v . size ( ) / 2 ) + 1 ] / 2 ;\n}\n",
        "double median ( vector < int > & list ) {\n  sort ( list . begin ( ) , list . end ( ) ) ;\n  if ( list . size ( ) % 2 == 1 ) return list [ ( int ) ( list . size ( ) / 2 ) ] ;\n  else return list [ ( int ) ( list . size ( ) / 2 ) ] + list [ ( int ) ( list . size ( ) / 2 + 1 ) ] / 2 ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 + 1 ) ] / 2 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 ) + 1 ] / 2 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 ) + 1 ] / 2 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 ) + 1 ] / 2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  sort ( array ) ;\n  if ( array . length % 2 == 1 ) return array [ ( int ) ( array . length / 2 ) ] ;\n  else return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 ) + 1 ] / 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double median ( int [ ] array ) {\n  Arrays . sort ( array ) ;\n  if ( array . length % 2 == 1 ) {\n    return array [ ( int ) ( array . length / 2 ) ] ;\n  }\n  else {\n    return array [ ( int ) ( array . length / 2 ) ] + array [ ( int ) ( array . length / 2 ) + 1 ] / 2 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] list ) {\n  Arrays . sort ( list ) ;\n  if ( list . length % 2 == 1 ) {\n    return list [ ( int ) ( list . length / 2 ) ] ;\n  }\n  else {\n    return list [ ( int ) ( list . length / 2 ) ] + list [ ( int ) ( list . length / 2 + 1 ) ] / 2 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( int [ ] list ) {\n  Arrays . sort ( list ) ;\n  if ( list . length % 2 == 1 ) return list [ ( int ) ( list . length / 2 ) ] ;\n  else return list [ ( int ) ( list . length / 2 ) ] + list [ ( int ) ( list . length / 2 + 1 ) ] / 2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median ( ArrayList < Integer > list ) {\n  Collections . sort ( list ) ;\n  if ( list . size ( ) % 2 == 1 ) {\n    return list . get ( ( int ) ( list . size ( ) / 2 ) ) ;\n  }\n  else {\n    return list . get ( ( int ) ( list . size ( ) / 2 ) ) + list . get ( ( int ) ( list . size ( ) / 2 + 1 ) ) / 2 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double median ( List < Integer > list ) {\n  Collections . sort ( list ) ;\n  if ( list . size ( ) % 2 == 1 ) {\n    return list . get ( ( int ) ( list . size ( ) / 2 ) ) ;\n  }\n  else {\n    return list . get ( ( int ) ( list . size ( ) / 2 ) ) + list . get ( ( int ) ( list . size ( ) / 2 + 1 ) ) / 2 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double median ( int [ ] list ) {\n  Arrays . sort ( list ) ;\n  if ( list . length % 2 == 1 ) {\n    return list [ ( int ) ( list . length / 2 ) ] ;\n  }\n  else {\n    return list [ ( int ) ( list . length / 2 ) ] + list [ ( int ) ( list . length / 2 + 1 ) ] / 2 ;\n  }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        a = b; \n        b = a % b; \n    }\n    return a;\n}",
      "target": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int tmp = a; \n        a = b; \n        b = tmp % b;\n    }\n    return a;\n}",
      "function range": "4,5-10,5",
      "raw_output": [
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b != 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) a = b ;\n  b = a % b ;\n  return a ;\n}\n",
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "static public int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b != 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static final int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static final int greatestCommonDivisor ( int a , int b ) {\n  while ( b != 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) a = b ;\n  b = a % b ;\n  return a ;\n}\n",
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static final int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "static public int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public final static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static long greatestCommonDivisor ( long a , long b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static int greatestCommonDivisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static long greatestCommonDivisor ( long a , long b ) {\n  while ( b != 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static long greatestCommonDivisor ( long a , long b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public static double greatestCommonDivisor ( double a , double b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n"
      ],
      "mid_translation": [
        "int greatest_common_divisor ( int a , int b ) {\n  while ( b ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public : int greatest_common_divisor ( int a , int b ) {\n  while ( b ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "public : int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n",
        "template < typename T > T greatest_common_divisor ( T a , T b ) {\n  while ( b ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b != 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) a = b ;\n  b = a % b ;\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b != 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b != 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) a = b ;\n  b = a % b ;\n  return a ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long greatest_common_divisor ( long a , long b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor ( int a , int b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long greatest_common_divisor ( long a , long b ) {\n  while ( b != 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long greatest_common_divisor ( long a , long b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double greatest_common_divisor ( double a , double b ) {\n  while ( b > 0 ) {\n    a = b ;\n    b = a % b ;\n  }\n  return a ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n    int m = 0; \n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
      "target": "public static int max_element(List<Integer> l) {\n    int m = l.get(0); \n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
      "function range": "6,5-14,5",
      "raw_output": [
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e . compareTo ( m ) > 0 ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e . compareTo ( m ) > 0 ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( int [ ] l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "static int maxElement ( int [ ] l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( int [ ] l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( ArrayList < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n",
        "public static int maxElement ( ArrayList < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}\n"
      ],
      "mid_translation": [
        "int max_element ( std :: vector < int > l ) {\n  int m = 0 ;\n  for ( auto e : l ) {\n    if ( e > m ) m = e ;\n  }\n  return m ;\n}\n",
        "int max_element ( std :: list < int > l ) {\n  int m = 0 ;\n  for ( auto e : l ) {\n    if ( e > m ) m = e ;\n  }\n  return m ;\n}\n",
        "int max_element ( list < int > l ) {\n  int m = 0 ;\n  for ( auto e : l ) {\n    if ( e > m ) m = e ;\n  }\n  return m ;\n}\n",
        "int max_element ( vector < int > l ) {\n  int m = 0 ;\n  for ( auto e : l ) {\n    if ( e > m ) m = e ;\n  }\n  return m ;\n}\n",
        "public : int max_element ( vector < int > l ) {\n  int m = 0 ;\n  for ( auto e : l ) {\n    if ( e > m ) m = e ;\n  }\n  return m ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e . compareTo ( m ) > 0 ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e . compareTo ( m ) > 0 ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( int [ ] l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( int [ ] l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( int [ ] l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( List < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element ( ArrayList < Integer > l ) {\n  int m = 0 ;\n  for ( Integer e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_element ( ArrayList < Integer > l ) {\n  int m = 0 ;\n  for ( int e : l ) {\n    if ( e > m ) {\n      m = e ;\n    }\n  }\n  return m ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance > 0){ \n            return false; \n        } \n    } \n    return true; \n}",
      "target": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){ \n            return true; \n        } \n    } \n    return false; \n}",
      "function range": "6,5-15,5",
      "raw_output": [
        "public static boolean belowZero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean belowZero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( final int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( @ NotNull int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean belowZero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( @ NotNull int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean belowZero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( @ NotNull int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( @ NotNull List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean belowZero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( final int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean belowZero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n"
      ],
      "mid_translation": [
        "bool below_zero ( const std :: vector < int > & operations ) {\n  int balance = 0 ;\n  for ( auto & op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "bool below_zero ( std :: vector < int > operations ) {\n  int balance = 0 ;\n  for ( auto & op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "bool below_zero ( std :: vector < int > operations ) {\n  int balance = 0 ;\n  for ( auto op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "bool below_zero ( std :: vector < int > operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "bool below_zero ( const std :: vector < int > & operations ) {\n  int balance = 0 ;\n  for ( auto op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean below_zero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static boolean below_zero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static boolean below_zero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( final int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( @ NotNull int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean below_zero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( @ NotNull int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean below_zero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( @ NotNull int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean below_zero ( @ NotNull List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean below_zero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( Integer op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( final int [ ] operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero ( List < Integer > operations ) {\n  int balance = 0 ;\n  for ( int op : operations ) {\n    balance += op ;\n    if ( balance > 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    sorted = l; \n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
      "target": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    System.arraycopy(l, 0, sorted, 0, l.length); \n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
      "function range": "14,5-28,5",
      "raw_output": [
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , reverseSorted ) || Arrays . equals ( l , sorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , reverseSorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , reverseSorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( sorted , reverseSorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , reverseSorted ) || Arrays . equals ( l , sorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , reverseSorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( sorted , reverseSorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}\n",
        "public static boolean monotonic ( List < Integer > l ) {\n  int [ ] sorted = new int [ l . size ( ) ] ;\n  int [ ] reverseSorted = new int [ l . size ( ) ] ;\n  sorted = l . toArray ( sorted ) ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . size ( ) - i - 1 ] ;\n  if ( Arrays . equals ( sorted , reverseSorted ) || Arrays . equals ( sorted , reverseSorted ) ) return true ;\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool monotonic ( vector < int > & l ) {\n  vector < int > sorted ;\n  vector < int > reverse_sorted ;\n  sorted = l ;\n  sort ( sorted . begin ( ) , sorted . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    reverse_sorted . push_back ( sorted [ l . size ( ) - i - 1 ] ) ;\n  }\n  if ( std :: equal ( l . begin ( ) , l . end ( ) , sorted . begin ( ) , reverse_sorted . begin ( ) ) || std :: equal ( l . begin ( ) , l . end ( ) , reverse_sorted . begin ( ) , sorted . end ( ) ) ) return true ;\n  return false ;\n}\n",
        "bool monotonic ( vector < int > & l ) {\n  vector < int > sorted ;\n  vector < int > reverse_sorted ;\n  sorted = l ;\n  sort ( sorted . begin ( ) , sorted . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    reverse_sorted . push_back ( sorted [ l . size ( ) - i - 1 ] ) ;\n  }\n  if ( vector ( l ) == sorted || vector ( l ) == reverse_sorted ) return true ;\n  return false ;\n}\n",
        "bool monotonic ( vector < int > l ) {\n  vector < int > sorted ;\n  vector < int > reverse_sorted ;\n  sorted = l ;\n  sort ( sorted . begin ( ) , sorted . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    reverse_sorted . push_back ( sorted [ l . size ( ) - i - 1 ] ) ;\n  }\n  if ( vector < int > ( l ) == sorted || vector < int > ( l ) == reverse_sorted ) return true ;\n  return false ;\n}\n",
        "bool monotonic ( vector < int > & l ) {\n  vector < int > sorted ;\n  vector < int > reverse_sorted ;\n  sorted = l ;\n  sort ( sorted . begin ( ) , sorted . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    reverse_sorted . push_back ( sorted [ l . size ( ) - i - 1 ] ) ;\n  }\n  if ( vector < int > ( l ) == sorted || vector < int > ( l ) == reverse_sorted ) return true ;\n  return false ;\n}\n",
        "bool monotonic ( vector < int > l ) {\n  vector < int > sorted ;\n  vector < int > reverse_sorted ;\n  sorted = l ;\n  sort ( sorted . begin ( ) , sorted . end ( ) ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    reverse_sorted . push_back ( sorted [ l . size ( ) - i - 1 ] ) ;\n  }\n  if ( std :: equal ( l . begin ( ) , l . end ( ) , sorted . begin ( ) , reverse_sorted . begin ( ) ) || std :: equal ( l . begin ( ) , l . end ( ) , reverse_sorted . begin ( ) , sorted . end ( ) ) ) return true ;\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , reverseSorted ) || Arrays . equals ( l , sorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , reverseSorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , reverseSorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( sorted , reverseSorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted ;\n  int [ ] reverseSorted ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ l . length - i - 1 ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , reverseSorted ) || Arrays . equals ( l , sorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , sorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( l , reverseSorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( int [ ] l ) {\n  int [ ] sorted = new int [ l . length ] ;\n  int [ ] reverseSorted = new int [ l . length ] ;\n  sorted = l ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . length - i - 1 ] ;\n  if ( Arrays . equals ( sorted , reverseSorted ) || Arrays . equals ( l , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic ( List < Integer > l ) {\n  int [ ] sorted = new int [ l . size ( ) ] ;\n  int [ ] reverseSorted = new int [ l . size ( ) ] ;\n  sorted = l . toArray ( sorted ) ;\n  Arrays . sort ( sorted ) ;\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) reverseSorted [ i ] = sorted [ l . size ( ) - i - 1 ] ;\n  if ( Arrays . equals ( sorted , reverseSorted ) || Arrays . equals ( sorted , reverseSorted ) ) return true ;\n  return false ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n); \n        result.add(running_max);\n    }\n    return result;\n}",
      "target": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        if (running_max == null){ \n            running_max = n;\n        }\n        else{\n            running_max = Math.max(running_max, n);\n        }\n        result.add(running_max);\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "raw_output": [
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ n ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > rollingMax ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > rollingMax ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ n ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > rollingMax ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > rollingMax ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ n ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > rollingMax ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ 0 ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ n ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = n ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > rollingMax ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > rollingMax ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ n ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = n ;\n  }\n  return result ;\n}\n",
        "public static int [ ] rollingMax ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ 0 ] = runningMax ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > rollingMax ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > rolling_max ( vector < int > numbers ) {\n  vector < int > result ;\n  int running_max = 0 ;\n  for ( auto n : numbers ) {\n    running_max = max ( running_max , n ) ;\n    result . push_back ( running_max ) ;\n  }\n  return result ;\n}\n",
        "vector < int > rolling_max ( vector < int > numbers ) {\n  vector < int > result ;\n  int running_max = 0 ;\n  for ( int n : numbers ) {\n    running_max = max ( running_max , n ) ;\n    result . push_back ( running_max ) ;\n  }\n  return result ;\n}\n",
        "public : vector < int > rolling_max ( vector < int > numbers ) {\n  vector < int > result ;\n  int running_max = 0 ;\n  for ( auto n : numbers ) {\n    running_max = max ( running_max , n ) ;\n    result . push_back ( running_max ) ;\n  }\n  return result ;\n}\n",
        "vector < int > rolling_max ( vector < int > numbers ) {\n  vector < int > result ;\n  int running_max ;\n  for ( auto n : numbers ) {\n    running_max = max ( running_max , n ) ;\n    result . push_back ( running_max ) ;\n  }\n  return result ;\n}\n",
        "public : vector < int > rolling_max ( vector < int > numbers ) {\n  vector < int > result ;\n  int running_max = 0 ;\n  for ( int n : numbers ) {\n    running_max = max ( running_max , n ) ;\n    result . push_back ( running_max ) ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ n ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = n ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > rolling_max ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List < Integer > rolling_max ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ n ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = n ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > rolling_max ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List < Integer > rolling_max ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ n ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = n ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > rolling_max ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ 0 ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ n ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = n ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > rolling_max ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > rolling_max ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int runningMax = 0 ;\n  for ( Integer n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ n ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ runningMax ] = n ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] rolling_max ( int [ ] numbers ) {\n  int [ ] result = new int [ numbers . length ] ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result [ 0 ] = runningMax ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > rolling_max ( List < Integer > numbers ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int runningMax = 0 ;\n  for ( int n : numbers ) {\n    runningMax = Math . max ( runningMax , n ) ;\n    result . add ( runningMax ) ;\n  }\n  return result ;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len)); \n        if (is_prime(fib.get(len - 1))) \n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
      "target": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2)); \n        if (is_prime(fib.get(fib.size() - 1))) \n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
      "function range": "16,5-29,5",
      "raw_output": [
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ ] {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ fib . length - 1 ] ;\n    }\n  }\n  ",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ n ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ fib . length - 1 ] ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( fib . size ( ) - 1 ) ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ fib . length - 1 ] ;\n    }\n  }\n  ",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 2 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ fib . length - 1 ] ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ n ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ fib . length - 1 ] ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ ] {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ fib . length - 1 ] ;\n    }\n  }\n  ",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ fib . length - 1 ] ;\n    }\n  }\n  ",
        "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( fib . size ( ) - 1 ) ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 2 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ fib . length - 1 ] ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( fib . size ( ) - 1 ) ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( 0 ) ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 2 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ 0 ] ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ len - 1 ] ;\n    }\n  }\n  ",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ ] {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ len - 1 ] ;\n    }\n  }\n  ",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ ] {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ len - 1 ] ;\n    }\n  }\n  ",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ len - 1 ] ;\n    }\n  }\n  ",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ n ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ len - 1 ] ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( len - 1 ) ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 2 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ len - 1 ] ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ n ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ 0 ] ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( 0 ) ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( fib . size ( ) - 1 ) ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 2 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ 0 ] ;\n  }\n}\n",
        "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 1 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ 0 ] = fib [ len - 1 ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ 0 ] ;\n  }\n}\n"
      ],
      "mid_translation": [
        "int prime_fib ( int n ) {\n  vector < int > fib ;\n  fib . push_back ( 0 ) ;\n  fib . push_back ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . push_back ( fib [ len - 1 ] + fib [ len ] ) ;\n    if ( is_prime ( fib [ len - 1 ] ) ) {\n      n -= 1 ;\n    }\n    if ( n == 0 ) {\n      return fib [ fib . size ( ) - 1 ] ;\n    }\n  }\n}\n",
        "int prime_fib ( int n ) {\n  vector < int > fib ;\n  fib . push_back ( 0 ) ;\n  fib . push_back ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . push_back ( fib [ len - 1 ] + fib [ len ] ) ;\n    if ( is_prime ( fib [ len - 1 ] ) ) {\n      n -= 1 ;\n    }\n    if ( n == 0 ) return fib [ fib . size ( ) - 1 ] ;\n  }\n}\n",
        "int prime_fib ( int n ) {\n  vector < int > fib ;\n  fib . push_back ( 0 ) ;\n  fib . push_back ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . push_back ( fib [ len - 1 ] + fib [ len ] ) ;\n    if ( is_prime ( fib [ len - 1 ] ) ) {\n      n -= 1 ;\n    }\n    if ( n == 0 ) {\n      return fib . back ( ) ;\n    }\n  }\n}\n",
        "int prime_fib ( int n ) {\n  vector < int > fib ;\n  fib . push_back ( 0 ) ;\n  fib . push_back ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . push_back ( fib [ len - 1 ] + fib [ len ] ) ;\n    if ( is_prime ( fib [ len - 1 ] ) ) {\n      n -= 1 ;\n    }\n    if ( n == 0 ) {\n      return fib [ len - 1 ] ;\n    }\n  }\n}\n",
        "int prime_fib ( int n ) {\n  vector < int > fib ;\n  fib . push_back ( 0 ) ;\n  fib . push_back ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . push_back ( fib [ len - 1 ] + fib [ len ] ) ;\n    if ( is_prime ( fib [ len - 1 ] ) ) {\n      n -= 1 ;\n    }\n    if ( n == 0 ) return fib . back ( ) ;\n  }\n}\n"
      ],
      "output": [
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ ] {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ fib . length - 1 ] ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ n ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ fib . length - 1 ] ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( fib . size ( ) - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ fib . length - 1 ] ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 2 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ fib . length - 1 ] ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ n ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ fib . length - 1 ] ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ ] {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ fib . length - 1 ] ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ fib . length - 1 ] ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( fib . size ( ) - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 2 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ fib . length - 1 ] ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( fib . size ( ) - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( 0 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 2 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ 0 ] ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ len - 1 ] ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ ] {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ len - 1 ] ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ ] {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ len - 1 ] ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = {\n    0 , 1 }\n    ;\n    while ( true ) {\n      int len = fib . length ;\n      fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n      if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n      if ( n == 0 ) return fib [ len - 1 ] ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ n ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ len - 1 ] ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( len - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 2 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ len - 1 ] ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ n ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ 0 ] ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( 0 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  ArrayList < Integer > fib = new ArrayList < Integer > ( ) ;\n  fib . add ( 0 ) ;\n  fib . add ( 1 ) ;\n  while ( true ) {\n    int len = fib . size ( ) ;\n    fib . add ( fib . get ( len - 1 ) + fib . get ( len ) ) ;\n    if ( is_prime ( fib . get ( len - 1 ) ) ) n -= 1 ;\n    if ( n == 0 ) return fib . get ( fib . size ( ) - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 2 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ len - 1 ] = fib [ len ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ 0 ] ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib ( int n ) {\n  int [ ] fib = new int [ 1 ] ;\n  fib [ 0 ] = 0 ;\n  fib [ 1 ] = 1 ;\n  while ( true ) {\n    int len = fib . length ;\n    fib [ 0 ] = fib [ len - 1 ] + fib [ len ] ;\n    if ( is_prime ( fib [ len - 1 ] ) ) n -= 1 ;\n    if ( n == 0 ) return fib [ 0 ] ;\n  }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2); \n}",
      "target": "public static int sum_to_n(int n) {\n    return (n + 1) * n / 2; \n}",
      "function range": "16,5-18,5",
      "raw_output": [
        "static int sumToN ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static int sumToN ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "static int sumTon ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static int sumToN ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static final int sumToN ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static final int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static int sumTon ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static long sumToN ( long n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static double sumToN ( double n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "static long sum_to_n ( long n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "static long sumToN ( long n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static double sum_to_n ( double n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static int sumToN ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "static int sumToN ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static int sumTon ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static int Sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "static int Sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "static public int Sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static int SumToN ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n"
      ],
      "mid_translation": [
        "int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "public : int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "template < typename T > T sum_to_n ( T n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "unsigned int sum_to_n ( unsigned int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n",
        "int Sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_to_n ( long n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double sum_to_n ( double n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_to_n ( long n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_to_n ( long n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double sum_to_n ( double n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n ( int n ) {\n  return ( n + 1 ) * ( n / 2 ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        result.add(string); \n    }\n    return result;\n}",
      "target": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)){ \n            result.add(string);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-13,5",
      "raw_output": [
        "public static String [ ] filterBySubstring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n",
        "public static String [ ] filterBySubstring ( String [ ] strings , String substring ) {\n  String [ ] result = new String [ strings . length ] ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result [ i ] = strings [ i ] . substring ( substring ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static String [ ] filterBySubstring ( String [ ] strings , String substring ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n",
        "public static List < String > filterBySubstring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : strings ) {\n    result . add ( s ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : strings ) {\n    result . add ( s ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : strings ) {\n    result . add ( str ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > getStringList ( List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > toStringList ( List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > toStringList ( List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > getStringList ( List < String > strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > getStrings ( List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : strings ) {\n    result . add ( s ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : strings ) {\n    result . add ( s ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : strings ) {\n    result . add ( str ) ;\n  }\n  return result ;\n}\n",
        "public static String [ ] filterBySubstring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n",
        "public static List < String > filterBySubstring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static String [ ] filterBySubstring ( String [ ] strings , String substring ) {\n  String [ ] result = new String [ strings . length ] ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result [ i ] = strings [ i ] . substring ( substring ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > filterBySubstring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}\n",
        "public static String [ ] filterBySubstring ( String [ ] strings , String substring ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n"
      ],
      "mid_translation": [
        "QStringList filterBySubstring ( const QStringList & strings , const QString & substring ) {\n  QStringList result ;\n  foreach ( const QString & string , strings ) result . append ( string ) ;\n  return result ;\n}\n",
        "Vector < String > filterBySubstring ( const Vector < String > & strings , const String & substring ) {\n  Vector < String > result ;\n  for ( size_t i = 0 ;\n  i < strings . size ( ) ;\n  ++ i ) result . append ( strings [ i ] ) ;\n  return result ;\n}\n",
        "foreach ( const QString & string , strings ) {\n  result . append ( string ) ;\n}\n",
        "Vector < String > filterBySubstring ( const Vector < String > & strings , const String & substring ) {\n  Vector < String > result ;\n  for ( size_t i = 0 ;\n  i < strings . size ( ) ;\n  i ++ ) result . append ( strings [ i ] ) ;\n  return result ;\n}\n",
        "QStringList filterBySubstring ( const QStringList & strings , const QString & substring ) {\n  QStringList result ;\n  foreach ( const QString & string , strings ) result << string ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String [ ] filter_by_substring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String [ ] filter_by_substring ( String [ ] strings , String substring ) {\n  String [ ] result = new String [ strings . length ] ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result [ i ] = strings [ i ] . substring ( substring ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] filter_by_substring ( String [ ] strings , String substring ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : strings ) {\n    result . add ( s ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : strings ) {\n    result . add ( s ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : strings ) {\n    result . add ( str ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings ) {\n  List < String > result = new ArrayList < String > ( strings . size ( ) ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : strings ) {\n    result . add ( s ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : strings ) {\n    result . add ( s ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : strings ) {\n    result . add ( str ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] filter_by_substring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > filter_by_substring ( List < String > strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] filter_by_substring ( String [ ] strings , String substring ) {\n  String [ ] result = new String [ strings . length ] ;\n  for ( int i = 0 ;\n  i < strings . length ;\n  i ++ ) {\n    result [ i ] = strings [ i ] . substring ( substring ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > filter_by_substring ( String [ ] strings , String substring ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] filter_by_substring ( String [ ] strings , String substring ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String string : strings ) {\n    result . add ( string ) ;\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result; \n    } \n    return result % p; \n}",
      "target": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = (2 * result) % p; \n    } \n    return result; \n}",
      "function range": "16,5-22,5",
      "raw_output": [
        "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int modP ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "static int modP ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "static public int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static final int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "static final int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "static public int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int Modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "static int Modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int mod ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int modP ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int modp ( int n , int p ) {\n  long result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "static public int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int modP ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int modp ( int n , int p ) {\n  long result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}\n",
        "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result + result ;\n  }\n  return result % p ;\n}\n"
      ],
      "mid_translation": [
        "int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) result = 2 * result ;\n  return result % p ;\n}\n",
        "public : int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) result = 2 * result ;\n  return result % p ;\n}\n",
        "int Modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) result = 2 * result ;\n  return result % p ;\n}\n",
        "unsigned modp ( unsigned n , unsigned p ) {\n  unsigned result = 1 ;\n  for ( unsigned i = 0 ;\n  i < n ;\n  i += 1 ) result = 2 * result ;\n  return result % p ;\n}\n",
        "unsigned int modp ( unsigned int n , unsigned int p ) {\n  unsigned int result = 1 ;\n  for ( unsigned int i = 0 ;\n  i < n ;\n  i += 1 ) result = 2 * result ;\n  return result % p ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  long result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static public int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  long result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result ;\n  }\n  return result % p ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int modp ( int n , int p ) {\n  int result = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += 1 ) {\n    result = 2 * result + result ;\n  }\n  return result % p ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i += 1) \n        result.add(xs.get(i)); \n    return result;\n}",
      "target": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i += 1) \n        result.add(i * xs.get(i)); \n    return result;\n}",
      "function range": "15,5-21,5",
      "raw_output": [
        "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}\n",
        "static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}\n",
        "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) {\n    result [ i ] = xs [ i ] ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > derivative ( List < Integer > xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) result . add ( xs . get ( i ) ) ;\n  return result ;\n}\n",
        "public static List < Integer > derivative ( int [ ] xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result . add ( xs [ i ] ) ;\n  return result ;\n}\n",
        "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}\n",
        "static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}\n",
        "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) {\n    result [ i ] = xs [ i ] ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > derivative ( int [ ] xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result . add ( xs [ i ] ) ;\n  return result ;\n}\n",
        "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < result . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}\n",
        "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}\n",
        "static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}\n",
        "public static List < Integer > derivative ( List < Integer > xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) result . add ( xs . get ( i ) ) ;\n  return result ;\n}\n",
        "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) {\n    result [ i ] = xs [ i ] ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > derivative ( int [ ] xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result . add ( xs [ i ] ) ;\n  return result ;\n}\n",
        "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}\n",
        "static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}\n",
        "public static List < Integer > derivative ( List < Integer > xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) result . add ( xs . get ( i ) ) ;\n  return result ;\n}\n",
        "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) {\n    result [ i ] = xs [ i ] ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > derivative ( int [ ] xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result . add ( xs [ i ] ) ;\n  return result ;\n}\n",
        "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}\n",
        "static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}\n",
        "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) {\n    result [ i ] = xs [ i ] ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > derivative ( List < Integer > xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) result . add ( xs . get ( i ) ) ;\n  return result ;\n}\n",
        "public static List < Integer > derivative ( int [ ] xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result . add ( xs [ i ] ) ;\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > derivative ( vector < int > xs ) {\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) {\n    result . push_back ( xs [ i ] ) ;\n  }\n  return result ;\n}\n",
        "vector < int > derivative ( const vector < int > & xs ) {\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) {\n    result . push_back ( xs [ i ] ) ;\n  }\n  return result ;\n}\n",
        "vector < int > derivative ( vector < int > xs ) {\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) {\n    result . push_back ( xs . at ( i ) ) ;\n  }\n  return result ;\n}\n",
        "vector < int > derivative ( vector < int > & xs ) {\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) {\n    result . push_back ( xs [ i ] ) ;\n  }\n  return result ;\n}\n",
        "vector < int > derivative ( vector < int > xs ) {\n  vector < int > result ;\n  for ( size_t i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) {\n    result . push_back ( xs [ i ] ) ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) {\n    result [ i ] = xs [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > derivative ( List < Integer > xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) result . add ( xs . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > derivative ( int [ ] xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result . add ( xs [ i ] ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) {\n    result [ i ] = xs [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > derivative ( int [ ] xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result . add ( xs [ i ] ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < result . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > derivative ( List < Integer > xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) result . add ( xs . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) {\n    result [ i ] = xs [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > derivative ( int [ ] xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result . add ( xs [ i ] ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > derivative ( List < Integer > xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) result . add ( xs . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) {\n    result [ i ] = xs [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > derivative ( int [ ] xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result . add ( xs [ i ] ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result [ i ] = xs [ i ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] derivative ( int [ ] xs ) {\n  int [ ] result = new int [ xs . length ] ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) {\n    result [ i ] = xs [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > derivative ( List < Integer > xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . size ( ) ;\n  i += 1 ) result . add ( xs . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > derivative ( int [ ] xs ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < xs . length ;\n  i += 1 ) result . add ( xs [ i ] ) ;\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    for (int i = 0; i < numbers.size(); i += 1) { \n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
      "target": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    for (int i = 0; i < numbers.size() - 1; i += 1) { \n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
      "function range": "7,5-19,5",
      "raw_output": [
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}\n",
        "public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . add ( numbers . get ( i ) ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > intersperse ( int [ ] numbers , int delimeter ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result . add ( numbers [ i ] ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers [ numbers . length - 1 ] ) ;\n  return result ;\n}\n",
        "public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . add ( numbers . get ( i ) ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}\n",
        "public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . add ( numbers . get ( i ) ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}\n",
        "public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . add ( numbers . get ( i ) ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > intersperse ( int [ ] numbers , int delimeter ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result . add ( numbers [ i ] ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers [ numbers . length - 1 ] ) ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}\n",
        "public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . add ( numbers . get ( i ) ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > intersperse ( int [ ] numbers , int delimeter ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result . add ( numbers [ i ] ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers [ numbers . length - 1 ] ) ;\n  return result ;\n}\n",
        "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < int > intersperse ( vector < int > numbers , int delimeter ) {\n  vector < int > result ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . push_back ( numbers [ i ] ) ;\n    result . push_back ( delimeter ) ;\n  }\n  result . push_back ( numbers [ numbers . size ( ) - 1 ] ) ;\n  return result ;\n}\n",
        "vector < int > intersperse ( vector < int > numbers , int delimeter ) {\n  vector < int > result ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . push_back ( numbers [ i ] ) ;\n    result . push_back ( delimeter ) ;\n  }\n  result . push_back ( numbers [ numbers . size ( ) - 1 ] ) ;\n  return result ;\n}\n",
        "public : vector < int > intersperse ( vector < int > & numbers , int delimeter ) {\n  vector < int > result ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . push_back ( numbers [ i ] ) ;\n    result . push_back ( delimeter ) ;\n  }\n  result . push_back ( numbers [ numbers . size ( ) - 1 ] ) ;\n  return result ;\n}\n",
        "vector < int > intersperse ( const vector < int > & numbers , int delimeter ) {\n  vector < int > result ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . push_back ( numbers [ i ] ) ;\n    result . push_back ( delimeter ) ;\n  }\n  result . push_back ( numbers [ numbers . size ( ) - 1 ] ) ;\n  return result ;\n}\n",
        "vector < int > intersperse ( vector < int > & numbers , int delimeter ) {\n  vector < int > result ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . push_back ( numbers [ i ] ) ;\n    result . push_back ( delimeter ) ;\n  }\n  result . push_back ( numbers [ numbers . size ( ) - 1 ] ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . add ( numbers . get ( i ) ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > intersperse ( int [ ] numbers , int delimeter ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result . add ( numbers [ i ] ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers [ numbers . length - 1 ] ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . add ( numbers . get ( i ) ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . add ( numbers . get ( i ) ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . add ( numbers . get ( i ) ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > intersperse ( int [ ] numbers , int delimeter ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result . add ( numbers [ i ] ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers [ numbers . length - 1 ] ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . size ( ) == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . size ( ) ;\n  i += 1 ) {\n    result . add ( numbers . get ( i ) ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) {\n    return result ;\n  }\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > intersperse ( int [ ] numbers , int delimeter ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result . add ( numbers [ i ] ) ;\n    result . add ( delimeter ) ;\n  }\n  result . add ( numbers [ numbers . length - 1 ] ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] intersperse ( int [ ] numbers , int delimeter ) {\n  int [ ] result = new int [ numbers . length ] ;\n  if ( numbers . length == 0 ) return result ;\n  for ( int i = 0 ;\n  i < numbers . length ;\n  i += 1 ) {\n    result [ i ] = numbers [ i ] ;\n    result [ i + 1 ] = delimeter ;\n  }\n  result [ numbers . length - 1 ] = 0 ;\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "target": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        char c_lower = Character.toLowerCase(c); \n        if (c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "18,5-26,5",
      "raw_output": [
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder builder = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    builder . append ( c ) ;\n  }\n  return builder . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "static String removeVowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String removeVowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string remove_vowels ( string string ) {\n  string result ;\n  for ( char c : string ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue ;\n    result += c ;\n  }\n  return result ;\n}\n",
        "string remove_vowels ( string string ) {\n  string result ;\n  for ( char c : string ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue ;\n    result . push_back ( c ) ;\n  }\n  return result ;\n}\n",
        "String removeVowels ( const String & string ) {\n  String result ;\n  for ( unsigned i = 0 ;\n  i < string . length ( ) ;\n  ++ i ) {\n    if ( string [ i ] == 'a' || string [ i ] == 'e' || string [ i ] == 'i' || string [ i ] == 'o' || string [ i ] == 'u' ) continue ;\n    result . append ( string [ i ] ) ;\n  }\n  return result ;\n}\n",
        "String removeVowels ( const String & string ) {\n  String result ;\n  for ( unsigned i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string [ i ] == 'a' || string [ i ] == 'e' || string [ i ] == 'i' || string [ i ] == 'o' || string [ i ] == 'u' ) continue ;\n    result . append ( string [ i ] ) ;\n  }\n  return result ;\n}\n",
        "String removeVowels ( const String & string ) {\n  String result ;\n  for ( unsigned i = 0 ;\n  i < string . length ( ) ;\n  ++ i ) {\n    if ( string [ i ] == 'a' || string [ i ] == 'e' || string [ i ] == 'i' || string [ i ] == 'o' || string [ i ] == 'u' ) continue ;\n    result += string [ i ] ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : string ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue ;\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder builder = new StringBuilder ( ) ;\n  for ( char c : string . toCharArray ( ) ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) {\n      continue ;\n    }\n    builder . append ( c ) ;\n  }\n  return builder . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) {\n      continue ;\n    }\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels ( String string ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i ++ ) {\n    if ( string . charAt ( i ) == 'a' || string . charAt ( i ) == 'e' || string . charAt ( i ) == 'i' || string . charAt ( i ) == 'o' || string . charAt ( i ) == 'u' ) continue ;\n    sb . append ( string . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n    return string.length() - 1; \n}",
      "target": "public static int strlen(String string){\n    return string.length(); \n}",
      "function range": "4,5-6,5",
      "raw_output": [
        "public static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}\n",
        "public static int strlen ( String string ) {\n  return string . length ( ) ;\n}\n",
        "static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}\n",
        "public static int strlen ( CharSequence string ) {\n  return string . length ( ) - 1 ;\n}\n",
        "public static int strlen ( byte [ ] string ) {\n  return string . length - 1 ;\n}\n",
        "public static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}\n",
        "public static int strlen ( String string ) {\n  return string . length ( ) ;\n}\n",
        "public static int strlen ( byte [ ] string ) {\n  return string . length - 1 ;\n}\n",
        "public static int strlen ( CharSequence string ) {\n  return string . length ( ) - 1 ;\n}\n",
        "public static int strlen ( String string ) {\n  return string != null ? string . length ( ) : 0 ;\n}\n",
        "public static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}\n",
        "public static int strlen ( String string ) {\n  return string . length ( ) ;\n}\n",
        "public static int strlen ( String string ) {\n  return string != null ? string . length ( ) : 0 ;\n}\n",
        "public static int strlen ( final String string ) {\n  return string . length ( ) - 1 ;\n}\n",
        "public static int strlen ( String string ) {\n  return string == null ? 0 : string . length ( ) ;\n}\n",
        "public static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}\n",
        "public static int strlen ( String string ) {\n  return string . length ( ) ;\n}\n",
        "static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}\n",
        "public static int strlen ( final String string ) {\n  return string . length ( ) - 1 ;\n}\n",
        "public static int strlen ( String string ) {\n  return string != null ? string . length ( ) : 0 ;\n}\n",
        "public static int length ( String s ) {\n  return s . length ( ) ;\n}\n",
        "public static int length ( String str ) {\n  return str . length ( ) ;\n}\n",
        "public static int getLength ( String s ) {\n  return s . length ( ) ;\n}\n",
        "public static int length ( String string ) {\n  return string . length ( ) ;\n}\n",
        "public static int length ( String s ) {\n  return s != null ? s . length ( ) : 0 ;\n}\n"
      ],
      "mid_translation": [
        "int strlen ( const char * string ) {\n  return strlen ( string ) - 1 ;\n}\n",
        "size_t strlen ( const char * string ) {\n  return strlen ( string ) - 1 ;\n}\n",
        "size_t strlen ( const std :: string & string ) {\n  return string . size ( ) - 1 ;\n}\n",
        "int strlen ( const std :: string & string ) {\n  return string . size ( ) - 1 ;\n}\n",
        "size_t WKStringGetLength ( WKStringRef stringRef ) {\n  return toImpl ( stringRef ) -> length ( ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string . length ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( CharSequence string ) {\n  return string . length ( ) - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( byte [ ] string ) {\n  return string . length - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string . length ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( byte [ ] string ) {\n  return string . length - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( CharSequence string ) {\n  return string . length ( ) - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string != null ? string . length ( ) : 0 ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string . length ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string != null ? string . length ( ) : 0 ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( final String string ) {\n  return string . length ( ) - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string == null ? 0 : string . length ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string . length ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string . length ( ) - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( final String string ) {\n  return string . length ( ) - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string != null ? string . length ( ) : 0 ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( String s ) {\n  return s . length ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( String str ) {\n  return str . length ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( String s ) {\n  return s . length ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( String string ) {\n  return string . length ( ) ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen ( String s ) {\n  return s != null ? s . length ( ) : 0 ;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array); \n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
      "target": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>(){ \n        public int compare(String n1, String n2) {\n            return value_map.get(n1) - value_map.get(n2);\n        }\n    });\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
      "function range": "6,5-27,5",
      "raw_output": [
        "public static String sortNumbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \",\" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \",\" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final String [ ] numberArray = new String [ numbers . length ( ) ] ;\n  Arrays . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( numbers . split ( \" \" ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( numbers . split ( \" \" ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  List < String > numberArray = new ArrayList < String > ( numbers . split ( \" \" ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( numbers . split ( \" \" ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final String [ ] numberArray = new String [ valueMap . size ( ) ] ;\n  Arrays . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \",\" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \",\" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String sortNumbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \",\" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string sort_numbers ( string numbers ) {\n  static unordered_map < string , int > value_map = {\n    {\n      \"zero\" , 0 }\n      , {\n        \"one\" , 1 }\n        , {\n          \"two\" , 2 }\n          , {\n            \"three\" , 3 }\n            , {\n              \"four\" , 4 }\n              , {\n                \"five\" , 5 }\n                , {\n                  \"six\" , 6 }\n                  , {\n                    \"seven\" , 7 }\n                    , {\n                      \"eight\" , 8 }\n                      , {\n                        \"nine\" , 9 }\n                      }\n                      ;\n                      vector < string > number_array ( vector < string > ( numbers . begin ( ) , numbers . end ( ) ) ) ;\n                      sort ( number_array . begin ( ) , number_array . end ( ) ) ;\n                      string result ;\n                      for ( auto number : number_array ) result += number + \" \" ;\n                      return result . c_str ( ) ;\n                    }\n                    ",
        "string sort_numbers ( string numbers ) {\n  static unordered_map < string , int > value_map = {\n    {\n      \"zero\" , 0 }\n      , {\n        \"one\" , 1 }\n        , {\n          \"two\" , 2 }\n          , {\n            \"three\" , 3 }\n            , {\n              \"four\" , 4 }\n              , {\n                \"five\" , 5 }\n                , {\n                  \"six\" , 6 }\n                  , {\n                    \"seven\" , 7 }\n                    , {\n                      \"eight\" , 8 }\n                      , {\n                        \"nine\" , 9 }\n                      }\n                      ;\n                      vector < string > number_array ( std :: begin ( numbers ) , std :: end ( numbers ) ) ;\n                      sort ( number_array . begin ( ) , number_array . end ( ) ) ;\n                      string result ;\n                      for ( auto number : number_array ) result += number + \" \" ;\n                      return result . c_str ( ) ;\n                    }\n                    ",
        "string sort_numbers ( string numbers ) {\n  static unordered_map < string , int > value_map = {\n    {\n      \"zero\" , 0 }\n      , {\n        \"one\" , 1 }\n        , {\n          \"two\" , 2 }\n          , {\n            \"three\" , 3 }\n            , {\n              \"four\" , 4 }\n              , {\n                \"five\" , 5 }\n                , {\n                  \"six\" , 6 }\n                  , {\n                    \"seven\" , 7 }\n                    , {\n                      \"eight\" , 8 }\n                      , {\n                        \"nine\" , 9 }\n                      }\n                      ;\n                      vector < string > number_array ( numbers . begin ( ) , numbers . end ( ) ) ;\n                      sort ( number_array . begin ( ) , number_array . end ( ) ) ;\n                      string result ;\n                      for ( auto number : number_array ) result += number + \" \" ;\n                      return result . c_str ( ) ;\n                    }\n                    ",
        "string sort_numbers ( string numbers ) {\n  typedef unordered_map < string , int > value_map ;\n  value_map value_map [ \"zero\" ] = 0 ;\n  value_map [ \"one\" ] = 1 ;\n  value_map [ \"two\" ] = 2 ;\n  value_map [ \"three\" ] = 3 ;\n  value_map [ \"four\" ] = 4 ;\n  value_map [ \"five\" ] = 5 ;\n  value_map [ \"six\" ] = 6 ;\n  value_map [ \"seven\" ] = 7 ;\n  value_map [ \"eight\" ] = 8 ;\n  value_map [ \"nine\" ] = 9 ;\n  vector < string > number_array ( vector < string > ( numbers . begin ( ) , numbers . end ( ) ) ) ;\n  sort ( number_array . begin ( ) , number_array . end ( ) ) ;\n  string result ;\n  for ( auto number : number_array ) result += number + \" \" ;\n  return result . c_str ( ) ;\n}\n",
        "string sort_numbers ( string numbers ) {\n  static unordered_map < string , int > value_map = {\n    {\n      \"zero\" , 0 }\n      , {\n        \"one\" , 1 }\n        , {\n          \"two\" , 2 }\n          , {\n            \"three\" , 3 }\n            , {\n              \"four\" , 4 }\n              , {\n                \"five\" , 5 }\n                , {\n                  \"six\" , 6 }\n                  , {\n                    \"seven\" , 7 }\n                    , {\n                      \"eight\" , 8 }\n                      , {\n                        \"nine\" , 9 }\n                      }\n                      ;\n                      vector < string > number_array ( std :: begin ( numbers ) , std :: end ( numbers ) ) ;\n                      sort ( number_array . begin ( ) , number_array . end ( ) ) ;\n                      string result ;\n                      for ( auto number : number_array ) {\n                        result += number + \" \" ;\n                      }\n                      return result . c_str ( ) ;\n                    }\n                    "
      ],
      "output": [
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \",\" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \",\" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final String [ ] numberArray = new String [ numbers . length ( ) ] ;\n  Arrays . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( numbers . split ( \" \" ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( numbers . split ( \" \" ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  List < String > numberArray = new ArrayList < String > ( numbers . split ( \" \" ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( numbers . split ( \" \" ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final String [ ] numberArray = new String [ valueMap . size ( ) ] ;\n  Arrays . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \",\" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \",\" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  final HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  final ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  final StringBuilder sb = new StringBuilder ( ) ;\n  for ( final String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < > ( Arrays . asList ( numbers . split ( \" \" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers ( String numbers ) {\n  HashMap < String , Integer > valueMap = new HashMap < String , Integer > ( ) ;\n  valueMap . put ( \"zero\" , 0 ) ;\n  valueMap . put ( \"one\" , 1 ) ;\n  valueMap . put ( \"two\" , 2 ) ;\n  valueMap . put ( \"three\" , 3 ) ;\n  valueMap . put ( \"four\" , 4 ) ;\n  valueMap . put ( \"five\" , 5 ) ;\n  valueMap . put ( \"six\" , 6 ) ;\n  valueMap . put ( \"seven\" , 7 ) ;\n  valueMap . put ( \"eight\" , 8 ) ;\n  valueMap . put ( \"nine\" , 9 ) ;\n  ArrayList < String > numberArray = new ArrayList < String > ( Arrays . asList ( numbers . split ( \",\" ) ) ) ;\n  Collections . sort ( numberArray ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String number : numberArray ) {\n    sb . append ( number ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else { \n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
      "target": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){ \n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
      "function range": "7,5-27,5",
      "raw_output": [
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > separateParenGroups ( String parenString ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder currentStringBuilder = new StringBuilder ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentStringBuilder . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentStringBuilder . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentStringBuilder . toString ( ) ) ;\n        currentStringBuilder = new StringBuilder ( ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder currentString = new StringBuilder ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString = new StringBuilder ( ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > separateParenGroups ( String parenString ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuffer currentString = new StringBuffer ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString = new StringBuffer ( ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += Character . toString ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += Character . toString ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > separateParenGroups ( String parenString ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder currentStringBuilder = new StringBuilder ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentStringBuilder . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentStringBuilder . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentStringBuilder . toString ( ) ) ;\n        currentStringBuilder = new StringBuilder ( ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder currentString = new StringBuilder ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString . setLength ( 0 ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder currentString = new StringBuilder ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString = new StringBuilder ( ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > separateParenGroups ( String parenString ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = null ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuffer currentString = new StringBuffer ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString = new StringBuffer ( ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += Character . toString ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += Character . toString ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > separateParenGroups ( String parenString ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuffer currentString = new StringBuffer ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString = new StringBuffer ( ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > separateParenGroups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += Character . toString ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += Character . toString ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < string > separate_paren_groups ( string paren_string ) {\n  vector < string > result ;\n  string current_string ;\n  int current_depth = 0 ;\n  for ( char c : paren_string ) {\n    if ( c == '(' ) {\n      current_depth += 1 ;\n      current_string += string ( c ) ;\n    }\n    else {\n      current_depth -= 1 ;\n      current_string += string ( c ) ;\n      if ( current_depth == 0 ) {\n        result . push_back ( current_string ) ;\n        current_string = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "vector < string > separate_paren_groups ( string paren_string ) {\n  vector < string > result ;\n  string current_string = \"\" ;\n  int current_depth = 0 ;\n  for ( char c : paren_string ) {\n    if ( c == '(' ) {\n      current_depth += 1 ;\n      current_string += string ( c ) ;\n    }\n    else {\n      current_depth -= 1 ;\n      current_string += string ( c ) ;\n      if ( current_depth == 0 ) {\n        result . push_back ( current_string ) ;\n        current_string = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "vector < string > separate_paren_groups ( string paren_string ) {\n  vector < string > result ;\n  string current_string ;\n  int current_depth = 0 ;\n  for ( char c : paren_string ) {\n    if ( c == '(' ) {\n      current_depth += 1 ;\n      current_string += string ( c ) ;\n    }\n    else {\n      current_depth -= 1 ;\n      current_string += string ( c ) ;\n      if ( current_depth == 0 ) {\n        result . push_back ( current_string ) ;\n        current_string . clear ( ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "vector < string > separate_paren_groups ( string paren_string ) {\n  vector < string > result ;\n  string current_string = \"\" ;\n  int current_depth = 0 ;\n  for ( char c : paren_string ) {\n    if ( c == '(' ) {\n      current_depth += 1 ;\n      current_string += string ( c ) ;\n    }\n    else {\n      current_depth -= 1 ;\n      current_string += string ( c ) ;\n      if ( current_depth == 0 ) {\n        result . push_back ( current_string ) ;\n        current_string . clear ( ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "vector < string > separate_paren_groups ( string paren_string ) {\n  vector < string > result ;\n  string current_string = \"\" ;\n  int current_depth = 0 ;\n  for ( char c : paren_string . c_str ( ) ) {\n    if ( c == '(' ) {\n      current_depth += 1 ;\n      current_string += string ( c ) ;\n    }\n    else {\n      current_depth -= 1 ;\n      current_string += string ( c ) ;\n      if ( current_depth == 0 ) {\n        result . push_back ( current_string ) ;\n        current_string = \"\" ;\n      }\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > separate_paren_groups ( String parenString ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder currentStringBuilder = new StringBuilder ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentStringBuilder . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentStringBuilder . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentStringBuilder . toString ( ) ) ;\n        currentStringBuilder = new StringBuilder ( ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder currentString = new StringBuilder ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString = new StringBuilder ( ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > separate_paren_groups ( String parenString ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuffer currentString = new StringBuffer ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString = new StringBuffer ( ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += Character . toString ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += Character . toString ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > separate_paren_groups ( String parenString ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder currentStringBuilder = new StringBuilder ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentStringBuilder . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentStringBuilder . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentStringBuilder . toString ( ) ) ;\n        currentStringBuilder = new StringBuilder ( ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder currentString = new StringBuilder ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString . setLength ( 0 ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder currentString = new StringBuilder ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString = new StringBuilder ( ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > separate_paren_groups ( String parenString ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = null ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuffer currentString = new StringBuffer ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString = new StringBuffer ( ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += Character . toString ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += Character . toString ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > separate_paren_groups ( String parenString ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuffer currentString = new StringBuffer ( ) ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString . append ( String . valueOf ( c ) ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString . toString ( ) ) ;\n        currentString = new StringBuffer ( ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += String . valueOf ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += String . valueOf ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > separate_paren_groups ( String parenString ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String currentString = \"\" ;\n  int currentDepth = 0 ;\n  for ( char c : parenString . toCharArray ( ) ) {\n    if ( c == '(' ) {\n      currentDepth += 1 ;\n      currentString += Character . toString ( c ) ;\n    }\n    else {\n      currentDepth -= 1 ;\n      currentString += Character . toString ( c ) ;\n      if ( currentDepth == 0 ) {\n        result . add ( currentString ) ;\n        currentString = \"\" ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){ \n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
      "target": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 2; k < n - 1; k += 1){ \n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
      "function range": "4,5-12,5",
      "raw_output": [
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean isPrime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static final boolean isPrime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static final boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static final boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean isPrime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean isPrime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean isPrime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n"
      ],
      "mid_translation": [
        "bool is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public : bool is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "bool is_prime ( unsigned n ) {\n  if ( n < 2 ) return false ;\n  for ( unsigned k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "bool is_prime ( unsigned int n ) {\n  if ( n < 2 ) return false ;\n  for ( unsigned int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "bool IsPrime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) {\n    return false ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime ( int n ) {\n  if ( n < 2 ) return false ;\n  for ( int k = 0 ;\n  k < n ;\n  k += 1 ) {\n    if ( n % k == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n    return n; \n}",
      "target": "public static int car_race_collision(int n) {\n    return n * n; \n}",
      "function range": "14,5-16,5",
      "raw_output": [
        "public static int carrierCollision ( int n ) {\n  return n ;\n}\n",
        "public static int carrace_collision ( int n ) {\n  return n ;\n}\n",
        "public static int car_race_collision ( int n ) {\n  return n ;\n}\n",
        "public static int carRayCollision ( int n ) {\n  return n ;\n}\n",
        "public static int carRingCollision ( int n ) {\n  return n ;\n}\n",
        "public static int carrierCollision ( int n ) {\n  return 0 ;\n}\n",
        "public static int carrace_collision ( int n ) {\n  return 0 ;\n}\n",
        "public static int car_race_collision ( int n ) {\n  return 0 ;\n}\n",
        "public static int carRace_collision ( int n ) {\n  return 0 ;\n}\n",
        "public static int carRayCollision ( int n ) {\n  return 0 ;\n}\n",
        "public static int car_race_collision ( int n ) {\n  return n ;\n}\n",
        "public static int carrace_collision ( int n ) {\n  return n ;\n}\n",
        "public static int carrierCollision ( int n ) {\n  return n ;\n}\n",
        "public static int carRingCollision ( int n ) {\n  return n ;\n}\n",
        "public static int carRaceCollision ( int n ) {\n  return n ;\n}\n",
        "public static int carrierCollision ( int n ) {\n  return n ;\n}\n",
        "public static int carrace_collision ( int n ) {\n  return n ;\n}\n",
        "public static int car_race_collision ( int n ) {\n  return n ;\n}\n",
        "public static int carRingCollision ( int n ) {\n  return n ;\n}\n",
        "public static int carRayCollision ( int n ) {\n  return n ;\n}\n",
        "public static int carrierCollision ( int n ) {\n  return n ;\n}\n",
        "public static int carrace_collision ( int n ) {\n  return n ;\n}\n",
        "public static int car_race_collision ( int n ) {\n  return n ;\n}\n",
        "public static int carRingCollision ( int n ) {\n  return n ;\n}\n",
        "public static int carRayCollision ( int n ) {\n  return n ;\n}\n"
      ],
      "mid_translation": [
        "int car_race_collision ( int n ) {\n  return n ;\n}\n",
        "int car_race_collision ( int n ) {\n  return 0 ;\n}\n",
        "unsigned int car_race_collision ( unsigned int n ) {\n  return n ;\n}\n",
        "int car_race_collision ( unsigned int n ) {\n  return n ;\n}\n",
        "virtual int car_race_collision ( int n ) {\n  return n ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision ( int n ) {\n  return n ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toLowerCase(c); \n        } \n        else { \n            char_list[i] = Character.toUpperCase(c); \n        }\n    }\n    return new String(char_list);\n}",
      "target": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c); \n        } \n        else { \n            char_list[i] = Character.toLowerCase(c); \n        }\n    }\n    return new String(char_list);\n}",
      "function range": "4,5-17,5",
      "raw_output": [
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charList = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charList . length ;\n  i += 1 ) {\n    char c = charList [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charList [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charList [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charList = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charList . length ;\n  i += 1 ) {\n    char c = charList [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charList [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charList [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charList = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charList . length ;\n  i += 1 ) {\n    char c = charList [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charList [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charList [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}\n",
        "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}\n",
        "public static String flipCase ( String string ) {\n  char [ ] charList = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charList . length ;\n  i += 1 ) {\n    char c = charList [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charList [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charList [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}\n"
      ],
      "mid_translation": [
        "string flip_case ( string string ) {\n  char * char_list = string . c_str ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = char_list [ i ] ;\n    if ( islower ( c ) ) char_list [ i ] = tolower ( c ) ;\n    else char_list [ i ] = toupper ( c ) ;\n  }\n  return string ;\n}\n",
        "string flip_case ( string string ) {\n  char * char_list = string . c_str ( ) ;\n  for ( int i = 0 ;\n  i < string . size ( ) ;\n  i += 1 ) {\n    char c = char_list [ i ] ;\n    if ( islower ( c ) ) char_list [ i ] = tolower ( c ) ;\n    else char_list [ i ] = toupper ( c ) ;\n  }\n  return string ;\n}\n",
        "string flip_case ( string string ) {\n  char * char_list = string . c_str ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = char_list [ i ] ;\n    if ( std :: islower ( c ) ) char_list [ i ] = tolower ( c ) ;\n    else char_list [ i ] = toupper ( c ) ;\n  }\n  return string ;\n}\n",
        "string flip_case ( const string & string ) {\n  char * char_list = string . c_str ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = char_list [ i ] ;\n    if ( islower ( c ) ) char_list [ i ] = tolower ( c ) ;\n    else char_list [ i ] = toupper ( c ) ;\n  }\n  return string ;\n}\n",
        "string flip_case ( string string ) {\n  char * char_list = string . c_str ( ) ;\n  for ( int i = 0 ;\n  i < string . size ( ) ;\n  i += 1 ) {\n    char c = char_list [ i ] ;\n    if ( std :: islower ( c ) ) char_list [ i ] = tolower ( c ) ;\n    else char_list [ i ] = toupper ( c ) ;\n  }\n  return string ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charList = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charList . length ;\n  i += 1 ) {\n    char c = charList [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charList [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charList [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charList = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charList . length ;\n  i += 1 ) {\n    char c = charList [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charList [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charList [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charList = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charList . length ;\n  i += 1 ) {\n    char c = charList [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charList [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charList [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charArray . length ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charArray = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < string . length ( ) ;\n  i += 1 ) {\n    char c = charArray [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charArray [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charArray [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return new String ( charArray ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case ( String string ) {\n  char [ ] charList = string . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < charList . length ;\n  i += 1 ) {\n    char c = charList [ i ] ;\n    if ( Character . isLowerCase ( c ) ) {\n      charList [ i ] = Character . toLowerCase ( c ) ;\n    }\n    else {\n      charList [ i ] = Character . toUpperCase ( c ) ;\n    }\n  }\n  return string ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result; \n}",
      "target": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result.trim(); \n}",
      "function range": "4,5-10,5",
      "raw_output": [
        "public static String stringSequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i + \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i + \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}\n",
        "public static String getStringSequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}\n",
        "public static String toStringSequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}\n",
        "static String stringSequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result . append ( i ) . append ( \" \" ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i + \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String getStringSequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) sb . append ( i ) . append ( \" \" ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) result += i + \" \" ;\n  return result ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) sb . append ( i ) . append ( \" \" ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) sb . append ( i + \" \" ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) sb . append ( i + \" \" ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i + \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String stringSequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i + \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string string_sequence ( int n ) {\n  string result ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) result += i + \" \" ;\n  return result ;\n}\n",
        "string string_sequence ( int n ) {\n  string result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) result += i + \" \" ;\n  return result ;\n}\n",
        "string string_sequence ( int n ) {\n  string result ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) result << i << \" \" ;\n  return result ;\n}\n",
        "string string_sequence ( int n ) {\n  string result ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}\n",
        "public : string string_sequence ( int n ) {\n  string result ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) result += i + \" \" ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String string_sequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i + \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i + \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result . append ( i ) . append ( \" \" ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i + \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) sb . append ( i ) . append ( \" \" ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) result += i + \" \" ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) sb . append ( i ) . append ( \" \" ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) sb . append ( i + \" \" ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) sb . append ( i + \" \" ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  String result = \"\" ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    result += i + \" \" ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i + \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence ( int n ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i += 1 ) {\n    sb . append ( i + \" \" ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1){ \n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
      "target": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1){ \n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "10,5-18,5",
      "raw_output": [
        "public static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean pairsSumToZero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean pairsSumToZero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool pairs_sum_to_zero ( std :: vector < int > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool pairs_sum_to_zero ( const std :: vector < int > & l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool pairs_sum_to_zero ( list < int > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool pairs_sum_to_zero ( vector < int > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool pairs_sum_to_zero ( const vector < int > & l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( int [ ] l ) {\n  for ( int i = 0 ;\n  i < l . length ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . length ;\n    j += 1 ) {\n      if ( l [ i ] + l [ j ] == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero ( List < Integer > l ) {\n  for ( int i = 0 ;\n  i < l . size ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l . size ( ) ;\n    j += 1 ) {\n      if ( l . get ( i ) + l . get ( j ) == 0 ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result; \n}",
      "target": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){ \n        result.add(n);\n    }\n    return result;\n}",
      "function range": "7,5-21,5",
      "raw_output": [
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else i += 1 ;\n  }\n  return result ;\n}\n",
        "public static int [ ] factorize ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result [ i ] = i ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else i += 1 ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else i += 1 ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] factorize ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result [ i ] = i ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] factorize ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result [ i ] = i ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= Integer . MAX_VALUE ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= Integer . MAX_VALUE ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= Integer . MAX_VALUE ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else i += 1 ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= Integer . MAX_VALUE ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) Math . sqrt ( n ) + 1 ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < int > factorize ( int n ) {\n  vector < int > result ;\n  int i = 2 ;\n  while ( i <= ( int ) ( sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . push_back ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "vector < int > factorize ( int n ) {\n  vector < int > result ;\n  int i = 2 ;\n  while ( i <= ( int ) ( sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . push_back ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public : vector < int > factorize ( int n ) {\n  vector < int > result ;\n  int i = 2 ;\n  while ( i <= ( int ) ( sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . push_back ( i ) ;\n      n = n / i ;\n    }\n    else i += 1 ;\n  }\n  return result ;\n}\n",
        "vector < int > factorize ( int n ) {\n  vector < int > result ;\n  int i = 2 ;\n  while ( i <= ( int ) ( sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . push_back ( i ) ;\n      n = n / i ;\n    }\n    else i += 1 ;\n  }\n  return result ;\n}\n",
        "public : vector < int > factorize ( int n ) {\n  vector < int > result ;\n  int i = 2 ;\n  while ( i <= int ( sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . push_back ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else i += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] factorize ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result [ i ] = i ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else i += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else i += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] factorize ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result [ i ] = i ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] factorize ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  int i = 2 ;\n  while ( i <= ( int ) ( Math . sqrt ( n ) + 1 ) ) {\n    if ( n % i == 0 ) {\n      result [ i ] = i ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= Integer . MAX_VALUE ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  int i = 2 ;\n  while ( i <= Integer . MAX_VALUE ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= Integer . MAX_VALUE ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else i += 1 ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static ArrayList < Integer > factorize ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= Integer . MAX_VALUE ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorize ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  int i = 2 ;\n  while ( i <= ( int ) Math . sqrt ( n ) + 1 ) {\n    if ( n % i == 0 ) {\n      result . add ( i ) ;\n      n = n / i ;\n    }\n    else {\n      i += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c; \n    }\n    return result;\n}",
      "target": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c - '0'; \n    }\n    return result;\n}",
      "function range": "22,5-35,5",
      "raw_output": [
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( ArrayList < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( List < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( ArrayList < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( ArrayList < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( List < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( ArrayList < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( List < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int skjkasdkd ( ArrayList < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int skjkasdkd ( List < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : int skjkasdkd ( vector < int > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) {\n      max = lst [ i ] ;\n    }\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "int skjkasdkd ( vector < int > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) {\n      max = lst [ i ] ;\n    }\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public : int skjkasdkd ( vector < int > & lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) {\n      max = lst [ i ] ;\n    }\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "int skjkasdkd ( vector < int > & lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) {\n      max = lst [ i ] ;\n    }\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "int skjkasdkd ( vector < int > & lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) {\n      max = lst [ i ] ;\n    }\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( ArrayList < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( List < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( ArrayList < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( ArrayList < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( List < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( ArrayList < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( List < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) result += ( int ) c ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && isPrime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( ArrayList < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( List < Integer > lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . size ( ) ) {\n    if ( lst . get ( i ) > max && isPrime ( lst . get ( i ) ) ) max = lst . get ( i ) ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd ( int [ ] lst ) {\n  int max = 0 ;\n  int i = 0 ;\n  while ( i < lst . length ) {\n    if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ;\n    i += 1 ;\n  }\n  int result = 0 ;\n  for ( char c : ( max + \"\" ) . toCharArray ( ) ) {\n    result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    if (str_chars[str_chars.length - 1] == 'y') \n        result += 1;\n    return result;\n}",
      "target": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    if (str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y') \n        result += 1;\n    return result;\n}",
      "function range": "15,5-27,5",
      "raw_output": [
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( CharSequence str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toString ( ) . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int vowelsCount ( CharSequence str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toString ( ) . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strArr = str . toCharArray ( ) ;\n  for ( char c : strArr ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strArr [ strArr . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < strChars . length ;\n  i ++ ) {\n    if ( strChars [ i ] == 'a' || strChars [ i ] == 'e' || strChars [ i ] == 'i' || strChars [ i ] == 'o' || strChars [ i ] == 'u' || strChars [ i ] == 'A' || strChars [ i ] == 'E' || strChars [ i ] == 'I' || strChars [ i ] == 'O' || strChars [ i ] == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars . length - 1 == 0 ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < strChars . length ;\n  i ++ ) {\n    if ( strChars [ i ] == 'a' || strChars [ i ] == 'e' || strChars [ i ] == 'i' || strChars [ i ] == 'o' || strChars [ i ] == 'u' || strChars [ i ] == 'A' || strChars [ i ] == 'E' || strChars [ i ] == 'I' || strChars [ i ] == 'O' || strChars [ i ] == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}\n",
        "public static int vowelsCount ( String str ) {\n  int result = 0 ;\n  char [ ] str_array = str . toCharArray ( ) ;\n  for ( char c : str_array ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( str_array [ str_array . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "size_t vowels_count ( const std :: string & str ) {\n  size_t result = 0 ;\n  auto str_chars = str . begin ( ) ;\n  for ( auto c : str_chars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( str_chars [ str_chars . size ( ) - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "int vowels_count ( string str ) {\n  int result = 0 ;\n  char * str_p = str . c_str ( ) ;\n  for ( char c : str_p ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( str_p [ - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "int vowels_count ( string str ) {\n  int result = 0 ;\n  char * str_chars = str . c_str ( ) ;\n  for ( char c : str_chars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( str_chars [ - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "int vowels_count ( string str ) {\n  int result = 0 ;\n  char * str_p = str . c_str ( ) ;\n  for ( char * p = str_p ;\n  * p ;\n  p ++ ) {\n    if ( * p == 'a' || * p == 'e' || * p == 'i' || * p == 'o' || * p == 'u' || * p == 'A' || * p == 'E' || * p == 'I' || * p == 'O' || * p == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( str_p [ - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n",
        "int vowels_count ( string str ) {\n  int result = 0 ;\n  char * str_p = str . c_str ( ) ;\n  for ( char * p = str_p ;\n  * p ;\n  ++ p ) {\n    if ( * p == 'a' || * p == 'e' || * p == 'i' || * p == 'o' || * p == 'u' || * p == 'A' || * p == 'E' || * p == 'I' || * p == 'O' || * p == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( str_p [ - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( CharSequence str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toString ( ) . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( CharSequence str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toString ( ) . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strArr = str . toCharArray ( ) ;\n  for ( char c : strArr ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strArr [ strArr . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < strChars . length ;\n  i ++ ) {\n    if ( strChars [ i ] == 'a' || strChars [ i ] == 'e' || strChars [ i ] == 'i' || strChars [ i ] == 'o' || strChars [ i ] == 'u' || strChars [ i ] == 'A' || strChars [ i ] == 'E' || strChars [ i ] == 'I' || strChars [ i ] == 'O' || strChars [ i ] == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars . length - 1 == 0 ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( int i = 0 ;\n  i < strChars . length ;\n  i ++ ) {\n    if ( strChars [ i ] == 'a' || strChars [ i ] == 'e' || strChars [ i ] == 'i' || strChars [ i ] == 'o' || strChars [ i ] == 'u' || strChars [ i ] == 'A' || strChars [ i ] == 'E' || strChars [ i ] == 'I' || strChars [ i ] == 'O' || strChars [ i ] == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strChars = str . toCharArray ( ) ;\n  for ( char c : strChars ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strChars [ strChars . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] strArray = str . toCharArray ( ) ;\n  for ( char c : strArray ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ;\n  }\n  if ( strArray [ strArray . length - 1 ] == 'y' ) result += 1 ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count ( String str ) {\n  int result = 0 ;\n  char [ ] str_array = str . toCharArray ( ) ;\n  for ( char c : str_array ) {\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      result += 1 ;\n    }\n  }\n  if ( str_array [ str_array . length - 1 ] == 'y' ) {\n    result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ') \n            break; \n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
      "target": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if ('A' <= c && c <= 'Z') \n            result += (int) c; \n    }\n    return result;\n}",
      "function range": "16,5-25,5",
      "raw_output": [
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "public static final int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static final int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "public static final int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char c = s . charAt ( i ) ;\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static final int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char c = s . charAt ( i ) ;\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "int digit_sum ( string s ) {\n  int result = 0 ;\n  for ( char c : s ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "public : int digit_sum ( string s ) {\n  int result = 0 ;\n  for ( char c : s ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "public : int digit_sum ( string s ) {\n  int result = 0 ;\n  for ( auto c : s ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n",
        "int digit_sum ( string s ) {\n  int result = 0 ;\n  for ( char c : s ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}\n",
        "int digit_sum ( string s ) {\n  int result = 0 ;\n  for ( auto c : s ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char c = s . charAt ( i ) ;\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char c = s . charAt ( i ) ;\n    if ( c == ' ' ) break ;\n    if ( 'A' <= c && c <= 'Z' ) result += ( int ) c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum ( String s ) {\n  int result = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ' ' ) {\n      break ;\n    }\n    if ( 'A' <= c && c <= 'Z' ) {\n      result += ( int ) c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1; \n      if(o1 < o2) return 0; \n      if(o1 > o2) return -1; \n   } \n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
      "target": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 0; \n      if(o1 < o2) return -1; \n      if(o1 > o2) return 1; \n   } \n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
      "function range": "31,10-42,10",
      "raw_output": [
        "@ Nonnull public static int compare ( @ Nonnull Object o1 , @ Nonnull Object o2 ) {\n  int numOneso1 = numberOnes ( o1 ) ;\n  int numOneso2 = numberOnes ( o2 ) ;\n  if ( numOneso1 == numOneso2 ) {\n    if ( o1 == o2 ) {\n      return 1 ;\n    }\n    if ( o1 < o2 ) {\n      return 0 ;\n    }\n    if ( o1 > o2 ) {\n      return - 1 ;\n    }\n  }\n  if ( numOneso1 < numOneso2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n",
        "@ java . lang . SuppressWarnings ( \"all\" ) public static int compare ( Object a , Object b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnesA < numOnesB ) return - 1 ;\n  else return 1 ;\n}\n",
        "@ java . lang . SuppressWarnings ( \"all\" ) public static int compare ( Object o1 , Object o2 ) {\n  int numOneso1 = numberOnes ( o1 ) ;\n  int numOneso2 = numberOnes ( o2 ) ;\n  if ( numOneso1 == numOneso2 ) {\n    if ( o1 == o2 ) return 1 ;\n    if ( o1 < o2 ) return 0 ;\n    if ( o1 > o2 ) return - 1 ;\n  }\n  if ( numOneso1 < numOneso2 ) return - 1 ;\n  else return 1 ;\n}\n",
        "@ java . lang . Deprecated public static final com . google . protobuf . Parser < Compare > PARSER = new com . google . protobuf . AbstractParser < Compare > ( ) {\n  public Compare parsePartialFrom ( com . google . protobuf . CodedInputStream input , com . google . protobuf . ExtensionRegistryLite extensionRegistry ) throws com . google . protobuf . InvalidProtocolBufferException {\n    return new Compare ( input , extensionRegistry ) ;\n  }\n}\n",
        "@ java . lang . Deprecated public static final com . google . protobuf . Parser < Number > PARSER = new com . google . protobuf . AbstractParser < Number > ( ) {\n  public Number parsePartialFrom ( com . google . protobuf . CodedInputStream input , com . google . protobuf . ExtensionRegistryLite extensionRegistry ) throws com . google . protobuf . InvalidProtocolBufferException {\n    return new Number ( input , extensionRegistry ) ;\n  }\n}\n",
        "@ java . lang . SuppressWarnings ( \"all\" ) public static int compare ( Object o1 , Object o2 ) {\n  int numOnes_o1 = numberOnes ( o1 ) ;\n  int numOnes_o2 = numberOnes ( o2 ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( o1 == o2 ) return 1 ;\n    if ( o1 < o2 ) return 0 ;\n    if ( o1 > o2 ) return - 1 ;\n  }\n  if ( numOnes_o1 < numOnes_o2 ) return - 1 ;\n  else return 1 ;\n}\n",
        "@ java . lang . SuppressWarnings ( \"all\" ) public static int compare ( Object o1 , Object o2 ) {\n  int numOnesA = numberOnes ( o1 ) ;\n  int numOnesB = numberOnes ( o2 ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( o1 == o2 ) return 1 ;\n    if ( o1 < o2 ) return 0 ;\n    if ( o1 > o2 ) return - 1 ;\n  }\n  if ( numOnesA < numOnesB ) return - 1 ;\n  else return 1 ;\n}\n",
        "@ Nonnull public static int compare ( @ Nonnull Object o1 , @ Nonnull Object o2 ) {\n  int numOnesA = numberOnes ( o1 ) ;\n  int numOnesB = numberOnes ( o2 ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( o1 == o2 ) {\n      return 1 ;\n    }\n    if ( o1 < o2 ) {\n      return 0 ;\n    }\n    if ( o1 > o2 ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA < numOnesB ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n",
        "@ java . lang . SuppressWarnings ( \"all\" ) public static int compare ( Object o1 , Object o2 ) {\n  int numOnesA1 = numberOnes ( o1 ) ;\n  int numOnesA2 = numberOnes ( o2 ) ;\n  if ( numOnesA1 == numOnesA2 ) {\n    if ( o1 == o2 ) return 1 ;\n    if ( o1 < o2 ) return 0 ;\n    if ( o1 > o2 ) return - 1 ;\n  }\n  if ( numOnesA1 < numOnesA2 ) return - 1 ;\n  else return 1 ;\n}\n",
        "@ java . lang . Deprecated public static final com . google . protobuf . Parser < Compare > PARSER = new com . google . protobuf . AbstractParser < Compare > ( ) {\n  public Compare parsePartialFrom ( com . google . protobuf . CodedInputStream input , com . google . protobuf . ExtensionRegistryLite extensionRegistry ) throws com . google . protobuf . InvalidProtocolBufferException {\n    return new Compare ( input , extensionRegistry ) ;\n  }\n}\n",
        "@ SuppressLint ( \"NewApi\" ) public static int cmp ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnes_o1 < numOnes_o2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n",
        "@ SuppressLint ( \"NewApi\" ) public static int cmp ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnes_o1 < numOnes_o2 ) return - 1 ;\n  else return 1 ;\n}\n",
        "@ SuppressLint ( \"NewApi\" ) public static int cmp ( int a , int b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA < numOnesB ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n",
        "@ SuppressLint ( \"NewApi\" ) public static int cmp ( int a , int b ) {\n  int numOnesA1 = numberOnes ( a ) ;\n  int numOnesA2 = numberOnes ( b ) ;\n  if ( numOnesA1 == numOnesA2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA1 < numOnesA2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n",
        "@ SuppressLint ( \"NewApi\" ) public static int cmp ( int a , int b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnesA < numOnesB ) return - 1 ;\n  else return 1 ;\n}\n",
        "@ SuppressLint ( \"NewApi\" ) public static int compare ( int a , int b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA < numOnesB ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n",
        "@ SuppressLint ( \"NewApi\" ) public static int compare ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnes_o1 < numOnes_o2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n",
        "@ SuppressLint ( \"NewApi\" ) public static int compare ( int a , int b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnesA < numOnesB ) return - 1 ;\n  else return 1 ;\n}\n",
        "@ SuppressLint ( \"NewApi\" ) public static int compare ( int a , int b ) {\n  int numOnesA1 = numberOnes ( a ) ;\n  int numOnesA2 = numberOnes ( b ) ;\n  if ( numOnesA1 == numOnesA2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA1 < numOnesA2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n",
        "@ UsedByGeneratedCode public static int compare ( int a , int b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA < numOnesB ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n",
        "@ SuppressLint ( \"NewApi\" ) public static int compareNumbers ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnes_o1 < numOnes_o2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n",
        "@ SuppressLint ( \"NewApi\" ) public static int compareNumbers ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnes_o1 < numOnes_o2 ) return - 1 ;\n  else return 1 ;\n}\n",
        "@ Snippet public static int compareNumbers ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnes_o1 < numOnes_o2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n",
        "@ TargetApi ( Build . VERSION_CODES . LOLLIPOP ) public static int compareNumbers ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnes_o1 < numOnes_o2 ) return - 1 ;\n  else return 1 ;\n}\n",
        "@ TargetApi ( Build . VERSION_CODES . LOLLIPOP ) public static int compareNumbers ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnes_o1 < numOnes_o2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}\n"
      ],
      "mid_translation": [
        "BOOST_PYTHON_DECL int compare ( object const & a , object const & b ) {\n  int num_ones_o1 = number_ones ( a ) ;\n  int num_ones_o2 = number_ones ( b ) ;\n  if ( num_ones_o1 == num_ones_o2 ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( num_ones_o1 < num_ones_o2 ) return - 1 ;\n  else return 1 ;\n}\n",
        "BOOST_PYTHON_DECL int compare ( object const & o1 , object const & o2 ) {\n  int num_ones_o1 = number_ones ( o1 ) ;\n  int num_ones_o2 = number_ones ( o2 ) ;\n  if ( num_ones_o1 == num_ones_o2 ) {\n    if ( o1 == o2 ) return 1 ;\n    if ( o1 < o2 ) return 0 ;\n    if ( o1 > o2 ) return - 1 ;\n  }\n  if ( num_ones_o1 < num_ones_o2 ) return - 1 ;\n  else return 1 ;\n}\n",
        "CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS ) int cmp ( int a , int b ) {\n  int num_ones_o1 = number_ones ( a ) ;\n  int num_ones_o2 = number_ones ( b ) ;\n  if ( num_ones_o1 == num_ones_o2 ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( num_ones_o1 < num_ones_o2 ) return - 1 ;\n  else return 1 ;\n}\n",
        "CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS ) int compare ( int a , int b ) {\n  int num_ones_o1 = number_ones ( a ) ;\n  int num_ones_o2 = number_ones ( b ) ;\n  if ( num_ones_o1 == num_ones_o2 ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( num_ones_o1 < num_ones_o2 ) return - 1 ;\n  else return 1 ;\n}\n",
        "CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS ) int compareNumbers ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnes_o1 < numOnes_o2 ) return - 1 ;\n  else return 1 ;\n}\n"
      ],
      "output": [
        {
          "patch": "@Override\npublic int compare ( @ Nonnull Object o1 , @ Nonnull Object o2 ) {\n  int numOneso1 = numberOnes ( o1 ) ;\n  int numOneso2 = numberOnes ( o2 ) ;\n  if ( numOneso1 == numOneso2 ) {\n    if ( o1 == o2 ) {\n      return 1 ;\n    }\n    if ( o1 < o2 ) {\n      return 0 ;\n    }\n    if ( o1 > o2 ) {\n      return - 1 ;\n    }\n  }\n  if ( numOneso1 < numOneso2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( Object a , Object b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnesA < numOnesB ) return - 1 ;\n  else return 1 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( Object o1 , Object o2 ) {\n  int numOneso1 = numberOnes ( o1 ) ;\n  int numOneso2 = numberOnes ( o2 ) ;\n  if ( numOneso1 == numOneso2 ) {\n    if ( o1 == o2 ) return 1 ;\n    if ( o1 < o2 ) return 0 ;\n    if ( o1 > o2 ) return - 1 ;\n  }\n  if ( numOneso1 < numOneso2 ) return - 1 ;\n  else return 1 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic com . google . protobuf . Parser < Compare compare PARSER = new com . google . protobuf . AbstractParser < Compare > ( ) {\n  public Compare parsePartialFrom ( com . google . protobuf . CodedInputStream input , com . google . protobuf . ExtensionRegistryLite extensionRegistry ) throws com . google . protobuf . InvalidProtocolBufferException {\n    return new Compare ( input , extensionRegistry ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic com . google . protobuf . Parser < Number compare PARSER = new com . google . protobuf . AbstractParser < Number > ( ) {\n  public Number parsePartialFrom ( com . google . protobuf . CodedInputStream input , com . google . protobuf . ExtensionRegistryLite extensionRegistry ) throws com . google . protobuf . InvalidProtocolBufferException {\n    return new Number ( input , extensionRegistry ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( Object o1 , Object o2 ) {\n  int numOnes_o1 = numberOnes ( o1 ) ;\n  int numOnes_o2 = numberOnes ( o2 ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( o1 == o2 ) return 1 ;\n    if ( o1 < o2 ) return 0 ;\n    if ( o1 > o2 ) return - 1 ;\n  }\n  if ( numOnes_o1 < numOnes_o2 ) return - 1 ;\n  else return 1 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( Object o1 , Object o2 ) {\n  int numOnesA = numberOnes ( o1 ) ;\n  int numOnesB = numberOnes ( o2 ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( o1 == o2 ) return 1 ;\n    if ( o1 < o2 ) return 0 ;\n    if ( o1 > o2 ) return - 1 ;\n  }\n  if ( numOnesA < numOnesB ) return - 1 ;\n  else return 1 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( @ Nonnull Object o1 , @ Nonnull Object o2 ) {\n  int numOnesA = numberOnes ( o1 ) ;\n  int numOnesB = numberOnes ( o2 ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( o1 == o2 ) {\n      return 1 ;\n    }\n    if ( o1 < o2 ) {\n      return 0 ;\n    }\n    if ( o1 > o2 ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA < numOnesB ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( Object o1 , Object o2 ) {\n  int numOnesA1 = numberOnes ( o1 ) ;\n  int numOnesA2 = numberOnes ( o2 ) ;\n  if ( numOnesA1 == numOnesA2 ) {\n    if ( o1 == o2 ) return 1 ;\n    if ( o1 < o2 ) return 0 ;\n    if ( o1 > o2 ) return - 1 ;\n  }\n  if ( numOnesA1 < numOnesA2 ) return - 1 ;\n  else return 1 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic com . google . protobuf . Parser < Compare compare PARSER = new com . google . protobuf . AbstractParser < Compare > ( ) {\n  public Compare parsePartialFrom ( com . google . protobuf . CodedInputStream input , com . google . protobuf . ExtensionRegistryLite extensionRegistry ) throws com . google . protobuf . InvalidProtocolBufferException {\n    return new Compare ( input , extensionRegistry ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnes_o1 < numOnes_o2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnes_o1 < numOnes_o2 ) return - 1 ;\n  else return 1 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA < numOnesB ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnesA1 = numberOnes ( a ) ;\n  int numOnesA2 = numberOnes ( b ) ;\n  if ( numOnesA1 == numOnesA2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA1 < numOnesA2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnesA < numOnesB ) return - 1 ;\n  else return 1 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA < numOnesB ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnes_o1 < numOnes_o2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnesA < numOnesB ) return - 1 ;\n  else return 1 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnesA1 = numberOnes ( a ) ;\n  int numOnesA2 = numberOnes ( b ) ;\n  if ( numOnesA1 == numOnesA2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA1 < numOnesA2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnesA = numberOnes ( a ) ;\n  int numOnesB = numberOnes ( b ) ;\n  if ( numOnesA == numOnesB ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnesA < numOnesB ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnes_o1 < numOnes_o2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnes_o1 < numOnes_o2 ) return - 1 ;\n  else return 1 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnes_o1 < numOnes_o2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) return 1 ;\n    if ( a < b ) return 0 ;\n    if ( a > b ) return - 1 ;\n  }\n  if ( numOnes_o1 < numOnes_o2 ) return - 1 ;\n  else return 1 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare ( int a , int b ) {\n  int numOnes_o1 = numberOnes ( a ) ;\n  int numOnes_o2 = numberOnes ( b ) ;\n  if ( numOnes_o1 == numOnes_o2 ) {\n    if ( a == b ) {\n      return 1 ;\n    }\n    if ( a < b ) {\n      return 0 ;\n    }\n    if ( a > b ) {\n      return - 1 ;\n    }\n  }\n  if ( numOnes_o1 < numOnes_o2 ) {\n    return - 1 ;\n  }\n  else {\n    return 1 ;\n  }\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) { \n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
      "target": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) \n                    || (state.equals(\"lower\") && !str_key.toLowerCase().equals(str_key))) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
      "function range": "16,5-43,5",
      "raw_output": [
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . isEmpty ( ) ) {\n        String strKey = entry . getKey ( ) ;\n        if ( state . equals ( \"start\" ) ) {\n          if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n            state = \"upper\" ;\n          }\n          else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n            state = \"lower\" ;\n          }\n          else {\n            state = \"mixed\" ;\n            break ;\n          }\n        }\n        else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n    }\n  }\n  ",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , Object > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , Object > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = ( String ) entry . getValue ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkMapCase ( Map < String , String > map ) {\n  if ( map . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : map . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) == null ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . isEmpty ( ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkMapCase ( Map < String , String > map ) {\n  if ( map . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : map . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , Object > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , Object > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = ( String ) entry . getValue ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = ( String ) entry . getValue ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , Object > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , Object > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) == null ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getKey ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , Object > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , Object > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = ( String ) entry . getValue ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkMapCase ( Map < String , String > map ) {\n  if ( map . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : map . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equalsIgnoreCase ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getKey ( ) . equalsIgnoreCase ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkMapCase ( Map < String , String > map ) {\n  if ( map . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : map . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equalsIgnoreCase ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n",
        "public static boolean checkDictCase ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . startsWith ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}\n"
      ],
      "mid_translation": [
        "bool check_dict_case ( const std :: map < std :: string , std :: string > & dict ) {\n  if ( dict . size ( ) == 0 ) return false ;\n  else {\n    std :: string state = \"start\" ;\n    for ( std :: map < std :: string , std :: string > :: const_iterator it = dict . begin ( ) ;\n    it != dict . end ( ) ;\n    ++ it ) {\n      if ( ! it -> second . size ( ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      std :: string str_key = it -> first ;\n      if ( state == \"start\" ) {\n        if ( str_key . toupper ( ) == str_key ) {\n          state = \"upper\" ;\n        }\n        else if ( str_key . tolower ( ) == str_key ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state == \"upper\" && ! str_key . toupper ( ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state == \"upper\" ) || ( state == \"lower\" ) ;\n  }\n}\n",
        "bool check_dict_case ( const std :: map < std :: string , std :: string > & dict ) {\n  if ( dict . size ( ) == 0 ) return false ;\n  else {\n    std :: string state = \"start\" ;\n    for ( std :: map < std :: string , std :: string > :: const_iterator it = dict . begin ( ) ;\n    it != dict . end ( ) ;\n    ++ it ) {\n      if ( ! it -> second . empty ( ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      std :: string str_key = it -> first ;\n      if ( state == \"start\" ) {\n        if ( str_key . toupper ( ) == str_key ) {\n          state = \"upper\" ;\n        }\n        else if ( str_key . tolower ( ) == str_key ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state == \"upper\" && ! str_key . toupper ( ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state == \"upper\" ) || ( state == \"lower\" ) ;\n  }\n}\n",
        "bool check_dict_case ( const std :: map < std :: string , std :: string > & dict ) {\n  if ( dict . size ( ) == 0 ) return false ;\n  else {\n    std :: string state = \"start\" ;\n    for ( std :: map < std :: string , std :: string > :: const_iterator it = dict . begin ( ) ;\n    it != dict . end ( ) ;\n    ++ it ) {\n      if ( ! it -> second . size ( ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      std :: string str_key = it -> second ;\n      if ( state == \"start\" ) {\n        if ( str_key . toupper ( ) == str_key ) {\n          state = \"upper\" ;\n        }\n        else if ( str_key . tolower ( ) == str_key ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state == \"upper\" && ! str_key . toupper ( ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state == \"upper\" ) || ( state == \"lower\" ) ;\n  }\n}\n",
        "bool check_dict_case ( const std :: map < std :: string , std :: string > & dict ) {\n  if ( dict . size ( ) == 0 ) return false ;\n  else {\n    std :: string state = \"start\" ;\n    for ( std :: map < std :: string , std :: string > :: const_iterator it = dict . begin ( ) ;\n    it != dict . end ( ) ;\n    ++ it ) {\n      if ( ! it -> second . empty ( ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      std :: string str_key = it -> second ;\n      if ( state == \"start\" ) {\n        if ( str_key . toupper ( ) == str_key ) {\n          state = \"upper\" ;\n        }\n        else if ( str_key . tolower ( ) == str_key ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state == \"upper\" && ! str_key . toupper ( ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state == \"upper\" ) || ( state == \"lower\" ) ;\n  }\n}\n",
        "bool check_dict_case ( const std :: map < std :: string , std :: string > & dict ) {\n  if ( dict . size ( ) == 0 ) return false ;\n  else {\n    std :: string state = \"start\" ;\n    for ( std :: map < std :: string , std :: string > :: const_iterator it = dict . begin ( ) ;\n    it != dict . end ( ) ;\n    ++ it ) {\n      if ( ! it -> second . compare ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      std :: string str_key = it -> first ;\n      if ( state == \"start\" ) {\n        if ( str_key . toupper ( ) == str_key ) {\n          state = \"upper\" ;\n        }\n        else if ( str_key . tolower ( ) == str_key ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state == \"upper\" && ! str_key . toupper ( ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state == \"upper\" ) || ( state == \"lower\" ) ;\n  }\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . isEmpty ( ) ) {\n        String strKey = entry . getKey ( ) ;\n        if ( state . equals ( \"start\" ) ) {\n          if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n            state = \"upper\" ;\n          }\n          else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n            state = \"lower\" ;\n          }\n          else {\n            state = \"mixed\" ;\n            break ;\n          }\n        }\n        else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n    }\n  }\n  ",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , Object > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , Object > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = ( String ) entry . getValue ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > map ) {\n  if ( map . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : map . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) == null ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . isEmpty ( ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > map ) {\n  if ( map . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : map . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , Object > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , Object > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = ( String ) entry . getValue ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = ( String ) entry . getValue ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , Object > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , Object > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) == null ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getKey ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , Object > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , Object > entry : dict . entrySet ( ) ) {\n      if ( ! ( entry . getValue ( ) instanceof String ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = ( String ) entry . getValue ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > map ) {\n  if ( map . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : map . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equalsIgnoreCase ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getKey ( ) . equalsIgnoreCase ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equals ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > map ) {\n  if ( map . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : map . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . equalsIgnoreCase ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_dict_case ( Map < String , String > dict ) {\n  if ( dict . size ( ) == 0 ) {\n    return false ;\n  }\n  else {\n    String state = \"start\" ;\n    for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) {\n      if ( ! entry . getValue ( ) . startsWith ( \"start\" ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n      String strKey = entry . getKey ( ) ;\n      if ( state . equals ( \"start\" ) ) {\n        if ( strKey . toUpperCase ( ) . equals ( strKey ) ) {\n          state = \"upper\" ;\n        }\n        else if ( strKey . toLowerCase ( ) . equals ( strKey ) ) {\n          state = \"lower\" ;\n        }\n        else {\n          state = \"mixed\" ;\n          break ;\n        }\n      }\n      else if ( state . equals ( \"upper\" ) && ! strKey . toUpperCase ( ) . equals ( strKey ) ) {\n        state = \"mixed\" ;\n        break ;\n      }\n    }\n    return ( state . equals ( \"upper\" ) ) || ( state . equals ( \"lower\" ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst1) \n        l2 = st.length(); \n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
      "target": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2) \n        l2 += st.length(); \n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
      "function range": "18,5-29,5",
      "raw_output": [
        "public static List < String > totalMatch ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static List < String > totalMatch ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}\n",
        "public static String [ ] totalMatch ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static ArrayList < String > totalMatch ( ArrayList < String > lst1 , ArrayList < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static String [ ] totalMatch ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}\n",
        "public static List < String > totalMatch ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static String [ ] totalMatch ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static ArrayList < String > totalMatch ( ArrayList < String > lst1 , ArrayList < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static List < String > totalMatch ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( List < String > st : lst1 ) l1 += st . size ( ) ;\n  int l2 = 0 ;\n  for ( List < String > st : lst1 ) l2 = st . size ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static List < String > totalMatch ( List < List < String >> lst1 , List < List < String >> lst2 ) {\n  int l1 = 0 ;\n  for ( List < String > st : lst1 ) l1 += st . size ( ) ;\n  int l2 = 0 ;\n  for ( List < String > st : lst1 ) l2 = st . size ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static List < String > totalMatch ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static String [ ] totalMatch ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static List < String > totalMatch ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}\n",
        "public static ArrayList < String > totalMatch ( ArrayList < String > lst1 , ArrayList < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static String [ ] totalMatch ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}\n",
        "public static List < String > totalMatch ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static String [ ] totalMatch ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static ArrayList < String > totalMatch ( ArrayList < String > lst1 , ArrayList < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static List < String > total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static String [ ] totalMatch ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static List < String > totalMatch ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static List < String > totalMatch ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}\n",
        "public static String [ ] totalMatch ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static ArrayList < String > totalMatch ( ArrayList < String > lst1 , ArrayList < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public static String [ ] totalMatch ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < string > total_match ( vector < string > lst1 , vector < string > lst2 ) {\n  int l1 = 0 ;\n  for ( auto st : lst1 ) {\n    l1 += st . size ( ) ;\n  }\n  int l2 = 0 ;\n  for ( auto st : lst1 ) {\n    l2 = st . size ( ) ;\n  }\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}\n",
        "public : vector < string > total_match ( vector < string > lst1 , vector < string > lst2 ) {\n  int l1 = 0 ;\n  for ( auto st : lst1 ) {\n    l1 += st . size ( ) ;\n  }\n  int l2 = 0 ;\n  for ( auto st : lst1 ) {\n    l2 = st . size ( ) ;\n  }\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public : vector < string > total_match ( vector < string > lst1 , vector < string > lst2 ) {\n  int l1 = 0 ;\n  for ( auto & st : lst1 ) {\n    l1 += st . size ( ) ;\n  }\n  int l2 = 0 ;\n  for ( auto & st : lst1 ) {\n    l2 = st . size ( ) ;\n  }\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}\n",
        "public : vector < string > total_match ( vector < string > lst1 , vector < string > lst2 ) {\n  int l1 = 0 ;\n  for ( auto & st : lst1 ) {\n    l1 += st . size ( ) ;\n  }\n  int l2 = 0 ;\n  for ( auto & st : lst1 ) {\n    l2 = st . size ( ) ;\n  }\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}\n",
        "public : vector < string > total_match ( vector < string > lst1 , vector < string > lst2 ) {\n  int l1 = 0 ;\n  for ( auto st : lst1 ) {\n    l1 += st . length ( ) ;\n  }\n  int l2 = 0 ;\n  for ( auto st : lst1 ) {\n    l2 = st . length ( ) ;\n  }\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < String > total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] total_match ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > total_match ( ArrayList < String > lst1 , ArrayList < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] total_match ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] total_match ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > total_match ( ArrayList < String > lst1 , ArrayList < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( List < String > st : lst1 ) l1 += st . size ( ) ;\n  int l2 = 0 ;\n  for ( List < String > st : lst1 ) l2 = st . size ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > total_match ( List < List < String >> lst1 , List < List < String >> lst2 ) {\n  int l1 = 0 ;\n  for ( List < String > st : lst1 ) l1 += st . size ( ) ;\n  int l2 = 0 ;\n  for ( List < String > st : lst1 ) l2 = st . size ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] total_match ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > total_match ( ArrayList < String > lst1 , ArrayList < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] total_match ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] total_match ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > total_match ( ArrayList < String > lst1 , ArrayList < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > total_match ( List < String > lst1 , List < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] total_match ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > total_match ( ArrayList < String > lst1 , ArrayList < String > lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) return lst1 ;\n  return lst2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] total_match ( String [ ] lst1 , String [ ] lst2 ) {\n  int l1 = 0 ;\n  for ( String st : lst1 ) l1 += st . length ( ) ;\n  int l2 = 0 ;\n  for ( String st : lst1 ) l2 = st . length ( ) ;\n  if ( l1 <= l2 ) {\n    return lst1 ;\n  }\n  return lst2 ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = word.length() - 2; i >= 0; i--) { \n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
      "target": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = word.length() - 2; i > 0; i--) { \n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
      "function range": "23,5-34,5",
      "raw_output": [
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) {\n    return \"\" ;\n  }\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . contains ( word . charAt ( i ) ) ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) {\n    return \"\" ;\n  }\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) {\n    return \"\" ;\n  }\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , word . length ( ) ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) && ! vowels . indexOf ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . contains ( word . charAt ( i ) ) ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) {\n    return \"\" ;\n  }\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . contains ( word . charAt ( i ) ) ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . contains ( word . charAt ( i ) ) ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) {\n    return \"\" ;\n  }\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , word . length ( ) ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) && ! vowels . indexOf ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "public static String getClosetVowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . contains ( word . charAt ( i ) ) ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }\n  "
      ],
      "mid_translation": [
        "string get_closet_vowel ( string word ) {\n  if ( word . size ( ) < 3 ) return \"\" ;\n  vector < char > vowels {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . size ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . find ( word [ i ] ) != vowels . end ( ) ) {\n        if ( ! vowels . find ( word [ i + 1 ] ) == vowels . end ( ) && ! vowels . find ( word [ i - 1 ] ) == vowels . end ( ) ) return word . substr ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "string get_closet_vowel ( string word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  vector < char > vowels {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . find ( word [ i ] ) != vowels . end ( ) ) {\n        if ( ! vowels . find ( word [ i + 1 ] ) == vowels . end ( ) && ! vowels . find ( word [ i - 1 ] ) == vowels . end ( ) ) return word . substr ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "string get_closet_vowel ( string word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  vector < char > vowels {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . find ( word [ i ] ) != vowels . end ( ) ) {\n        if ( ! vowels . find ( word [ i + 1 ] ) && ! vowels . find ( word [ i - 1 ] ) ) return word . substr ( i , word . length ( ) ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "string get_closet_vowel ( string word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  vector < char > vowels {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . find ( word [ i ] ) != vowels . end ( ) ) {\n        if ( ! vowels . find ( word [ i + 1 ] ) && ! vowels . find ( word [ i - 1 ] ) ) return word . substr ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }\n  ",
        "string get_closet_vowel ( string word ) {\n  if ( word . size ( ) < 3 ) return \"\" ;\n  vector < char > vowels {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . size ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . find ( word [ i ] ) != vowels . end ( ) ) {\n        if ( ! vowels . find ( word [ i + 1 ] ) && ! vowels . find ( word [ i - 1 ] ) ) return word . substr ( i , word . size ( ) ) ;\n      }\n    }\n    return \"\" ;\n  }\n  "
      ],
      "output": [
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) {\n    return \"\" ;\n  }\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . contains ( word . charAt ( i ) ) ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) {\n    return \"\" ;\n  }\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && ! vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) {\n    return \"\" ;\n  }\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , word . length ( ) ) ;\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) && ! vowels . indexOf ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . contains ( word . charAt ( i ) ) ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) {\n    return \"\" ;\n  }\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . contains ( word . charAt ( i ) ) ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , i + 1 ) ;\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . contains ( word . charAt ( i ) ) ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , i + 1 ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) {\n    return \"\" ;\n  }\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) return word . substring ( i , word . length ( ) ) ;\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 ) {\n        if ( ! vowels . indexOf ( word . charAt ( i + 1 ) ) && ! vowels . indexOf ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String get_closet_vowel ( String word ) {\n  if ( word . length ( ) < 3 ) return \"\" ;\n  char [ ] vowels = {\n    'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' }\n    ;\n    for ( int i = word . length ( ) - 2 ;\n    i >= 0 ;\n    i -- ) {\n      if ( vowels . contains ( word . charAt ( i ) ) ) {\n        if ( ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) {\n          return word . substring ( i , word . length ( ) ) ;\n        }\n      }\n    }\n    return \"\" ;\n  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) { \n                all_odd = true; \n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
      "target": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) == 0) { \n                all_odd = false; \n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
      "function range": "20,5-39,5",
      "raw_output": [
        "public static ArrayList < Integer > uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static List < Integer > uniqueDigits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static List < Integer > uniqueDigits ( List < Integer > x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static int [ ] uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res . toArray ( new Integer [ res . size ( ) ] ) ;\n}\n",
        "public static ArrayList < Integer > uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static ArrayList < Integer > uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static List < Integer > uniqueDigits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static List < Integer > uniqueDigits ( List < Integer > x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static ArrayList < Integer > uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static int [ ] uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res . toArray ( new Integer [ res . size ( ) ] ) ;\n}\n",
        "public static ArrayList < Integer > uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static List < Integer > uniqueDigits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static ArrayList < Integer > uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static List < Integer > uniqueDigits ( List < Integer > x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static int [ ] uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res . toArray ( new Integer [ res . size ( ) ] ) ;\n}\n",
        "public static ArrayList < Integer > uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static List < Integer > uniqueDigits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static int [ ] uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res . toArray ( new Integer [ res . size ( ) ] ) ;\n}\n",
        "public static List < Integer > uniqueDigits ( List < Integer > x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static ArrayList < Integer > uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static ArrayList < Integer > uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static List < Integer > uniqueDigits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static int [ ] uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res . toArray ( new Integer [ res . size ( ) ] ) ;\n}\n",
        "public static List < Integer > uniqueDigits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n",
        "public static ArrayList < Integer > uniqueDigits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > unique_digits ( vector < int > x ) {\n  vector < int > res ;\n  for ( auto i : x ) {\n    int num = i ;\n    bool all_odd = true ;\n    while ( num > 0 ) {\n      int curr_digit = num % 10 ;\n      if ( ( curr_digit % 2 ) != 0 ) {\n        all_odd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( all_odd ) res . push_back ( i ) ;\n  }\n  sort ( res . begin ( ) , res . end ( ) ) ;\n  return res ;\n}\n",
        "vector < int > unique_digits ( vector < int > x ) {\n  vector < int > res ;\n  for ( auto i : x ) {\n    int num = i ;\n    bool all_odd = true ;\n    while ( num ) {\n      int curr_digit = num % 10 ;\n      if ( ( curr_digit % 2 ) != 0 ) {\n        all_odd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( all_odd ) res . push_back ( i ) ;\n  }\n  sort ( res . begin ( ) , res . end ( ) ) ;\n  return res ;\n}\n",
        "vector < int > unique_digits ( vector < int > x ) {\n  vector < int > res ;\n  for ( auto i : x ) {\n    int num = i ;\n    bool all_odd = true ;\n    while ( num ) {\n      int curr_digit = num % 10 ;\n      if ( ( curr_digit % 2 ) != 0 ) {\n        all_odd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( all_odd ) {\n      res . push_back ( i ) ;\n    }\n  }\n  sort ( res . begin ( ) , res . end ( ) ) ;\n  return res ;\n}\n",
        "vector < int > unique_digits ( vector < int > x ) {\n  vector < int > res ;\n  for ( auto i : x ) {\n    int num = i ;\n    bool all_odd = true ;\n    while ( num > 0 ) {\n      int curr_digit = num % 10 ;\n      if ( ( curr_digit % 2 ) != 0 ) {\n        all_odd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( all_odd ) {\n      res . push_back ( i ) ;\n    }\n  }\n  sort ( res . begin ( ) , res . end ( ) ) ;\n  return res ;\n}\n",
        "vector < int > unique_digits ( vector < int > x ) {\n  vector < int > res ;\n  for ( int i : x ) {\n    int num = i ;\n    bool all_odd = true ;\n    while ( num > 0 ) {\n      int curr_digit = num % 10 ;\n      if ( ( curr_digit % 2 ) != 0 ) {\n        all_odd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( all_odd ) res . push_back ( i ) ;\n  }\n  sort ( res . begin ( ) , res . end ( ) ) ;\n  return res ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static ArrayList < Integer > unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > unique_digits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > unique_digits ( List < Integer > x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res . toArray ( new Integer [ res . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static ArrayList < Integer > unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > unique_digits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > unique_digits ( List < Integer > x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res . toArray ( new Integer [ res . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > unique_digits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > unique_digits ( List < Integer > x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res . toArray ( new Integer [ res . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > unique_digits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res . toArray ( new Integer [ res . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > unique_digits ( List < Integer > x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( Integer i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) res . add ( i ) ;\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static ArrayList < Integer > unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > unique_digits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < Integer > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res . toArray ( new Integer [ res . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > unique_digits ( int [ ] x ) {\n  List < Integer > res = new ArrayList < > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > unique_digits ( int [ ] x ) {\n  ArrayList < Integer > res = new ArrayList < > ( ) ;\n  for ( int i : x ) {\n    int num = i ;\n    boolean allOdd = true ;\n    while ( num > 0 ) {\n      int currDigit = num % 10 ;\n      if ( ( currDigit % 2 ) != 0 ) {\n        allOdd = true ;\n        break ;\n      }\n      num /= 10 ;\n    }\n    if ( allOdd ) {\n      res . add ( i ) ;\n    }\n  }\n  Collections . sort ( res ) ;\n  return res ;\n}",
          "correctness": "uncompilable with tests"
        }
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n    int min_even = 0; \n    int index = 0; \n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
      "target": "public static int[] pluck(int[] arr) {\n    int min_even = Integer.MAX_VALUE; \n    int index = -1; \n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
      "function range": "36,5-49,5",
      "raw_output": [
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    min_even , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ ] {\n  }\n  ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    min_even , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    min_even , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ ] {\n  }\n  ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    min_even , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ ] {\n  }\n  ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ ] {\n    }\n    ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static ArrayList < Integer > pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new ArrayList < Integer > ( ) ;\n  return new ArrayList < Integer > ( Arrays . asList ( minEven , index ) ) ;\n}\n",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ ] {\n    }\n    ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    min_even , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ ] {\n    }\n    ;\n  }\n  return new int [ ] {\n    min_even , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    min_even , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ ] {\n  }\n  ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }\n  ",
        "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    min_even , index }\n    ;\n  }\n  "
      ],
      "mid_translation": [
        "public : vector < int > pluck ( vector < int > arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return {\n  }\n  ;\n  return {\n    min_even , index }\n    ;\n  }\n  ",
        "public : vector < int > pluck ( vector < int > & arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return {\n  }\n  ;\n  return {\n    min_even , index }\n    ;\n  }\n  ",
        "public : vector < int > pluck ( vector < int > arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return {\n  }\n  ;\n  return {\n    minEven , index }\n    ;\n  }\n  ",
        "public : vector < int > pluck ( vector < int > arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return {\n    }\n    ;\n  }\n  return {\n    min_even , index }\n    ;\n  }\n  ",
        "vector < int > pluck ( vector < int > arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return {\n  }\n  ;\n  return {\n    min_even , index }\n    ;\n  }\n  "
      ],
      "output": [
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    min_even , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ ] {\n  }\n  ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    min_even , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    min_even , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ ] {\n  }\n  ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    min_even , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ ] {\n  }\n  ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ ] {\n    }\n    ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new ArrayList < Integer > ( ) ;\n  return new ArrayList < Integer > ( Arrays . asList ( minEven , index ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ ] {\n    }\n    ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    min_even , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ ] {\n    }\n    ;\n  }\n  return new int [ ] {\n    min_even , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ 0 ] ;\n  return new int [ ] {\n    min_even , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int minEven = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < minEven ) {\n      minEven = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) return new int [ ] {\n  }\n  ;\n  return new int [ ] {\n    minEven , index }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] pluck ( int [ ] arr ) {\n  int min_even = 0 ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) {\n      min_even = arr [ i ] ;\n      index = i ;\n    }\n  }\n  if ( index == - 1 ) {\n    return new int [ 0 ] ;\n  }\n  return new int [ ] {\n    min_even , index }\n    ;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n    return a * h; \n}",
      "target": "public static double triangle_area(double a, double h) {\n    return a * h / 2.; \n}",
      "function range": "8,5-10,5",
      "raw_output": [
        "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangleArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangularArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "static double triangle_area ( double a , double h ) {\n  return a * h ;\n}\n",
        "static double triangleArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangleArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangularArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "static double triangle_area ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangleArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangleArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangularArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static float triangleArea ( float a , float h ) {\n  return a * h ;\n}\n",
        "public static double triageArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangleArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangularArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "static double triangle_area ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangleArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangleArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triangularArea ( double a , double h ) {\n  return a * h ;\n}\n",
        "static double triangle_area ( double a , double h ) {\n  return a * h ;\n}\n",
        "public static double triAngleArea ( double a , double h ) {\n  return a * h ;\n}\n"
      ],
      "mid_translation": [
        "double triangle_area ( double a , double h ) {\n  return a * h ;\n}\n",
        "template < typename T > T triangle_area ( T a , T h ) {\n  return a * h ;\n}\n",
        "template < typename T > inline T triangle_area ( T a , T h ) {\n  return a * h ;\n}\n",
        "template < typename T > double triangle_area ( T a , T h ) {\n  return a * h ;\n}\n",
        "template < typename Scalar > Scalar triangle_area ( Scalar a , Scalar h ) {\n  return a * h ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static float triangle_area ( float a , float h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area ( double a , double h ) {\n  return a * h ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) { \n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
      "target": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) == -1) { \n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
      "function range": "17,5-32,5",
      "raw_output": [
        "public static ArrayList < String > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < String > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < String > reverseDelete ( String s , String c ) {\n  StringBuffer new_s = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  StringBuffer reverse_s = new StringBuffer ( ) ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s . append ( new_s . charAt ( i ) ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static List < String > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  List < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static List < String > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  List < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < String > reverseDelete ( String s , String c ) {\n  StringBuffer new_s = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  StringBuffer reverse_s = new StringBuffer ( ) ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s . append ( new_s . charAt ( i ) ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < String > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < String > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static List < String > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  List < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static List < String > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  List < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  StringBuffer new_s = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  StringBuffer reverse_s = new StringBuffer ( ) ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s . append ( new_s . charAt ( i ) ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  String newS = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      newS += s . charAt ( i ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  String newS = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      newS += s . charAt ( i ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  StringBuffer new_s = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  StringBuffer reverse_s = new StringBuffer ( ) ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s . append ( new_s . charAt ( i ) ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  String newS = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      newS += s . charAt ( i ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  String newS = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      newS += s . charAt ( i ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  StringBuilder new_s = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  StringBuilder new_s = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  StringBuilder newS = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      newS . append ( s . charAt ( i ) ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}\n",
        "public static ArrayList < Object > reverseDelete ( String s , String c ) {\n  StringBuilder newS = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      newS . append ( s . charAt ( i ) ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}\n",
        "public static List < Object > reverseDelete ( String s , String c ) {\n  StringBuilder newS = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      newS . append ( s . charAt ( i ) ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  List < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}\n"
      ],
      "mid_translation": [
        "vector < string > reverse_delete ( string s , string c ) {\n  string new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . find ( s [ i ] ) != string :: npos ) new_s += s [ i ] ;\n  }\n  string reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) reverse_s += new_s [ i ] ;\n  vector < string > res ;\n  res . push_back ( new_s ) ;\n  res . push_back ( reverse_s == new_s ) ;\n  return res ;\n}\n",
        "vector < string > reverse_delete ( string s , string c ) {\n  string new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . size ( ) ;\n  i ++ ) {\n    if ( c . find ( s [ i ] ) != string :: npos ) new_s += s [ i ] ;\n  }\n  string reverse_s = \"\" ;\n  for ( int i = new_s . size ( ) - 1 ;\n  i >= 0 ;\n  i -- ) reverse_s += new_s [ i ] ;\n  vector < string > res ;\n  res . push_back ( new_s ) ;\n  res . push_back ( reverse_s == new_s ) ;\n  return res ;\n}\n",
        "vector < object > reverse_delete ( string s , string c ) {\n  string new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . size ( ) ;\n  i ++ ) {\n    if ( c . find ( s [ i ] ) != string :: npos ) new_s += s [ i ] ;\n  }\n  string reverse_s = \"\" ;\n  for ( int i = new_s . size ( ) - 1 ;\n  i >= 0 ;\n  i -- ) reverse_s += new_s [ i ] ;\n  vector < object > res ;\n  res . push_back ( new_s ) ;\n  res . push_back ( reverse_s == new_s ) ;\n  return res ;\n}\n",
        "vector < object > reverse_delete ( string s , string c ) {\n  string new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . find ( s [ i ] ) != string :: npos ) new_s += s [ i ] ;\n  }\n  string reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) reverse_s += new_s [ i ] ;\n  vector < object > res ;\n  res . push_back ( new_s ) ;\n  res . push_back ( reverse_s == new_s ) ;\n  return res ;\n}\n",
        "vector < object > reverse_delete ( string s , string c ) {\n  string new_s ;\n  for ( int i = 0 ;\n  i < s . size ( ) ;\n  i ++ ) {\n    if ( c . find ( s [ i ] ) != string :: npos ) new_s += s [ i ] ;\n  }\n  string reverse_s = \"\" ;\n  for ( int i = new_s . size ( ) - 1 ;\n  i >= 0 ;\n  i -- ) reverse_s += new_s [ i ] ;\n  vector < object > res ;\n  res . push_back ( new_s ) ;\n  res . push_back ( reverse_s == new_s ) ;\n  return res ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static ArrayList < String > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > reverse_delete ( String s , String c ) {\n  StringBuffer new_s = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  StringBuffer reverse_s = new StringBuffer ( ) ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s . append ( new_s . charAt ( i ) ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  List < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  List < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > reverse_delete ( String s , String c ) {\n  StringBuffer new_s = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  StringBuffer reverse_s = new StringBuffer ( ) ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s . append ( new_s . charAt ( i ) ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  List < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  List < String > res = new ArrayList < String > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  StringBuffer new_s = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  StringBuffer reverse_s = new StringBuffer ( ) ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s . append ( new_s . charAt ( i ) ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  String newS = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      newS += s . charAt ( i ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  String newS = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      newS += s . charAt ( i ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  String new_s = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s += s . charAt ( i ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  StringBuffer new_s = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  StringBuffer reverse_s = new StringBuffer ( ) ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s . append ( new_s . charAt ( i ) ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  String newS = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      newS += s . charAt ( i ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  String newS = \"\" ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      newS += s . charAt ( i ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  StringBuilder new_s = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  StringBuilder new_s = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      new_s . append ( s . charAt ( i ) ) ;\n    }\n  }\n  String reverse_s = \"\" ;\n  for ( int i = new_s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverse_s += new_s . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( new_s ) ;\n  res . add ( reverse_s . equals ( new_s ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  StringBuilder newS = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      newS . append ( s . charAt ( i ) ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Object > reverse_delete ( String s , String c ) {\n  StringBuilder newS = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . contains ( s . charAt ( i ) ) ) {\n      newS . append ( s . charAt ( i ) ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  ArrayList < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Object > reverse_delete ( String s , String c ) {\n  StringBuilder newS = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( c . indexOf ( s . charAt ( i ) ) != - 1 ) {\n      newS . append ( s . charAt ( i ) ) ;\n    }\n  }\n  String reverseS = \"\" ;\n  for ( int i = newS . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    reverseS += newS . charAt ( i ) ;\n  }\n  List < Object > res = new ArrayList < Object > ( ) ;\n  res . add ( newS ) ;\n  res . add ( reverseS . equals ( newS ) ) ;\n  return res ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'}; \n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
      "target": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}; \n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
      "function range": "20,5-39,5",
      "raw_output": [
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = {\n    \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }\n    ;\n    for ( int i = 0 ;\n    i < words . length ;\n    i ++ ) {\n      int numConsonants = 0 ;\n      char [ ] vowels = {\n        'a' , 'e' , 'i' , 'o' , 'u' }\n        ;\n        for ( int j = 0 ;\n        j < words [ i ] . length ( ) ;\n        j ++ ) {\n          boolean consonant = true ;\n          for ( int k = 0 ;\n          k < vowels . length ;\n          k ++ ) {\n            if ( vowels [ k ] == words [ i ] [ j ] ) {\n              consonant = false ;\n              break ;\n            }\n          }\n          if ( consonant ) numConsonants ++ ;\n        }\n        if ( numConsonants == n ) result . add ( words [ i ] ) ;\n      }\n      return result ;\n    }\n    ",
        "public static List < String > selectWords ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = {\n    \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }\n    ;\n    for ( int i = 0 ;\n    i < words . length ;\n    i ++ ) {\n      int numConsonants = 0 ;\n      char [ ] vowels = {\n        'a' , 'e' , 'i' , 'o' , 'u' }\n        ;\n        for ( int j = 0 ;\n        j < words [ i ] . length ( ) ;\n        j ++ ) {\n          boolean consonant = true ;\n          for ( int k = 0 ;\n          k < vowels . length ;\n          k ++ ) {\n            if ( vowels [ k ] == words [ i ] [ j ] ) {\n              consonant = false ;\n              break ;\n            }\n          }\n          if ( consonant ) numConsonants ++ ;\n        }\n        if ( numConsonants == n ) result . add ( words [ i ] ) ;\n      }\n      return result ;\n    }\n    ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = {\n    \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }\n    ;\n    for ( int i = 0 ;\n    i < words . length ;\n    i ++ ) {\n      int numConsonants = 0 ;\n      char [ ] vowels = {\n        'a' , 'e' , 'i' , 'o' , 'u' }\n        ;\n        for ( int j = 0 ;\n        j < words [ i ] . length ( ) ;\n        j ++ ) {\n          boolean consonant = true ;\n          for ( int k = 0 ;\n          k < vowels . length ;\n          k ++ ) {\n            if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n              consonant = false ;\n              break ;\n            }\n          }\n          if ( consonant ) numConsonants ++ ;\n        }\n        if ( numConsonants == n ) result . add ( words [ i ] ) ;\n      }\n      return result ;\n    }\n    ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  String [ ] words = {\n    \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }\n    ;\n    for ( int i = 0 ;\n    i < words . length ;\n    i ++ ) {\n      int numConsonants = 0 ;\n      char [ ] vowels = {\n        'a' , 'e' , 'i' , 'o' , 'u' }\n        ;\n        for ( int j = 0 ;\n        j < words [ i ] . length ( ) ;\n        j ++ ) {\n          boolean consonant = true ;\n          for ( int k = 0 ;\n          k < vowels . length ;\n          k ++ ) {\n            if ( vowels [ k ] == words [ i ] [ j ] ) {\n              consonant = false ;\n              break ;\n            }\n          }\n          if ( consonant ) numConsonants ++ ;\n        }\n        if ( numConsonants == n ) result . add ( words [ i ] ) ;\n      }\n      return result ;\n    }\n    ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = {\n    \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }\n    ;\n    for ( int i = 0 ;\n    i < words . length ;\n    i ++ ) {\n      int numConsonants = 0 ;\n      char [ ] vowels = {\n        'a' , 'e' , 'i' , 'o' , 'u' }\n        ;\n        for ( int j = 0 ;\n        j < words [ i ] . length ( ) ;\n        j ++ ) {\n          boolean consonant = true ;\n          for ( int k = 0 ;\n          k < vowels . length ;\n          k ++ ) {\n            if ( vowels [ k ] == words [ i ] [ j ] ) {\n              consonant = false ;\n              break ;\n            }\n          }\n          if ( consonant ) {\n            numConsonants ++ ;\n          }\n        }\n        if ( numConsonants == n ) {\n          result . add ( words [ i ] ) ;\n        }\n      }\n      return result ;\n    }\n    ",
        "public static List < String > selectWords ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static List < String > selectWords ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static List < String > selectWords ( String s , int n ) {\n  List < String > result = new ArrayList < > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static List < String > selectWords ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static List < String > selectWords ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char vowels [ ] = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static List < String > selectWords ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static String [ ] selectWords ( String s , int n ) {\n  String [ ] result = new String [ n ] ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result [ i ] = words [ i ] ;\n    }\n    return result ;\n  }\n  ",
        "public static String [ ] selectWords ( String s , int n ) {\n  String [ ] result = new String [ n ] ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] [ j ] ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result [ i ] = words [ i ] ;\n    }\n    return result ;\n  }\n  ",
        "public static List < String > selectWords ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] [ j ] ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static List < String > selectWords ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static List < String > selectWords ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "public static ArrayList < String > selectWords ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }\n  "
      ],
      "mid_translation": [
        "vector < string > select_words ( string s , int n ) {\n  vector < string > result ;\n  string words [ ] = {\n    \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }\n    ;\n    for ( int i = 0 ;\n    i < words . size ( ) ;\n    i ++ ) {\n      int num_consonants = 0 ;\n      char vowels [ ] = {\n        'a' , 'e' , 'i' , 'o' , 'u' }\n        ;\n        for ( int j = 0 ;\n        j < words [ i ] . size ( ) ;\n        j ++ ) {\n          bool consonant = true ;\n          for ( int k = 0 ;\n          k < vowels . size ( ) ;\n          k ++ ) {\n            if ( vowels [ k ] == words [ i ] [ j ] ) {\n              consonant = false ;\n              break ;\n            }\n          }\n          if ( consonant ) {\n            num_consonants ++ ;\n          }\n        }\n        if ( num_consonants == n ) {\n          result . push_back ( words [ i ] ) ;\n        }\n      }\n      return result ;\n    }\n    ",
        "vector < string > select_words ( string s , int n ) {\n  vector < string > result ;\n  vector < string > words = s ;\n  for ( int i = 0 ;\n  i < words . size ( ) ;\n  i ++ ) {\n    int num_consonants = 0 ;\n    vector < char > vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . size ( ) ;\n      j ++ ) {\n        bool consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . size ( ) ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] [ j ] ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) {\n          num_consonants ++ ;\n        }\n      }\n      if ( num_consonants == n ) {\n        result . push_back ( words [ i ] ) ;\n      }\n    }\n    return result ;\n  }\n  ",
        "vector < string > select_words ( string s , int n ) {\n  vector < string > result ;\n  vector < string > words = s ;\n  for ( int i = 0 ;\n  i < words . size ( ) ;\n  i ++ ) {\n    int num_consonants = 0 ;\n    char vowels [ ] = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . size ( ) ;\n      j ++ ) {\n        bool consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . size ( ) ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] [ j ] ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) {\n          num_consonants ++ ;\n        }\n      }\n      if ( num_consonants == n ) {\n        result . push_back ( words [ i ] ) ;\n      }\n    }\n    return result ;\n  }\n  ",
        "vector < string > select_words ( string s , int n ) {\n  vector < string > result ;\n  vector < string > words ;\n  words . push_back ( s ) ;\n  for ( int i = 0 ;\n  i < words . size ( ) ;\n  i ++ ) {\n    int num_consonants = 0 ;\n    char vowels [ ] = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . size ( ) ;\n      j ++ ) {\n        bool consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . size ( ) ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] [ j ] ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) {\n          num_consonants ++ ;\n        }\n      }\n      if ( num_consonants == n ) {\n        result . push_back ( words [ i ] ) ;\n      }\n    }\n    return result ;\n  }\n  ",
        "vector < string > select_words ( string s , int n ) {\n  vector < string > result ;\n  vector < string > words ;\n  s . split ( words , ' ' ) ;\n  for ( int i = 0 ;\n  i < words . size ( ) ;\n  i ++ ) {\n    int num_consonants = 0 ;\n    char vowels [ ] = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . size ( ) ;\n      j ++ ) {\n        bool consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . size ( ) ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] [ j ] ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) {\n          num_consonants ++ ;\n        }\n      }\n      if ( num_consonants == n ) {\n        result . push_back ( words [ i ] ) ;\n      }\n    }\n    return result ;\n  }\n  "
      ],
      "output": [
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = {\n    \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }\n    ;\n    for ( int i = 0 ;\n    i < words . length ;\n    i ++ ) {\n      int numConsonants = 0 ;\n      char [ ] vowels = {\n        'a' , 'e' , 'i' , 'o' , 'u' }\n        ;\n        for ( int j = 0 ;\n        j < words [ i ] . length ( ) ;\n        j ++ ) {\n          boolean consonant = true ;\n          for ( int k = 0 ;\n          k < vowels . length ;\n          k ++ ) {\n            if ( vowels [ k ] == words [ i ] [ j ] ) {\n              consonant = false ;\n              break ;\n            }\n          }\n          if ( consonant ) numConsonants ++ ;\n        }\n        if ( numConsonants == n ) result . add ( words [ i ] ) ;\n      }\n      return result ;\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > select_words ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = {\n    \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }\n    ;\n    for ( int i = 0 ;\n    i < words . length ;\n    i ++ ) {\n      int numConsonants = 0 ;\n      char [ ] vowels = {\n        'a' , 'e' , 'i' , 'o' , 'u' }\n        ;\n        for ( int j = 0 ;\n        j < words [ i ] . length ( ) ;\n        j ++ ) {\n          boolean consonant = true ;\n          for ( int k = 0 ;\n          k < vowels . length ;\n          k ++ ) {\n            if ( vowels [ k ] == words [ i ] [ j ] ) {\n              consonant = false ;\n              break ;\n            }\n          }\n          if ( consonant ) numConsonants ++ ;\n        }\n        if ( numConsonants == n ) result . add ( words [ i ] ) ;\n      }\n      return result ;\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = {\n    \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }\n    ;\n    for ( int i = 0 ;\n    i < words . length ;\n    i ++ ) {\n      int numConsonants = 0 ;\n      char [ ] vowels = {\n        'a' , 'e' , 'i' , 'o' , 'u' }\n        ;\n        for ( int j = 0 ;\n        j < words [ i ] . length ( ) ;\n        j ++ ) {\n          boolean consonant = true ;\n          for ( int k = 0 ;\n          k < vowels . length ;\n          k ++ ) {\n            if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n              consonant = false ;\n              break ;\n            }\n          }\n          if ( consonant ) numConsonants ++ ;\n        }\n        if ( numConsonants == n ) result . add ( words [ i ] ) ;\n      }\n      return result ;\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  String [ ] words = {\n    \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }\n    ;\n    for ( int i = 0 ;\n    i < words . length ;\n    i ++ ) {\n      int numConsonants = 0 ;\n      char [ ] vowels = {\n        'a' , 'e' , 'i' , 'o' , 'u' }\n        ;\n        for ( int j = 0 ;\n        j < words [ i ] . length ( ) ;\n        j ++ ) {\n          boolean consonant = true ;\n          for ( int k = 0 ;\n          k < vowels . length ;\n          k ++ ) {\n            if ( vowels [ k ] == words [ i ] [ j ] ) {\n              consonant = false ;\n              break ;\n            }\n          }\n          if ( consonant ) numConsonants ++ ;\n        }\n        if ( numConsonants == n ) result . add ( words [ i ] ) ;\n      }\n      return result ;\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = {\n    \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }\n    ;\n    for ( int i = 0 ;\n    i < words . length ;\n    i ++ ) {\n      int numConsonants = 0 ;\n      char [ ] vowels = {\n        'a' , 'e' , 'i' , 'o' , 'u' }\n        ;\n        for ( int j = 0 ;\n        j < words [ i ] . length ( ) ;\n        j ++ ) {\n          boolean consonant = true ;\n          for ( int k = 0 ;\n          k < vowels . length ;\n          k ++ ) {\n            if ( vowels [ k ] == words [ i ] [ j ] ) {\n              consonant = false ;\n              break ;\n            }\n          }\n          if ( consonant ) {\n            numConsonants ++ ;\n          }\n        }\n        if ( numConsonants == n ) {\n          result . add ( words [ i ] ) ;\n        }\n      }\n      return result ;\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > select_words ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > select_words ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > select_words ( String s , int n ) {\n  List < String > result = new ArrayList < > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > select_words ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > select_words ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char vowels [ ] = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > select_words ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] select_words ( String s , int n ) {\n  String [ ] result = new String [ n ] ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result [ i ] = words [ i ] ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] select_words ( String s , int n ) {\n  String [ ] result = new String [ n ] ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] [ j ] ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result [ i ] = words [ i ] ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > select_words ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] [ j ] ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > select_words ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] . equals ( words [ i ] . charAt ( j ) ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > select_words ( String s , int n ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > select_words ( String s , int n ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String [ ] words = s . split ( \" \" ) ;\n  for ( int i = 0 ;\n  i < words . length ;\n  i ++ ) {\n    int numConsonants = 0 ;\n    char [ ] vowels = {\n      'a' , 'e' , 'i' , 'o' , 'u' }\n      ;\n      for ( int j = 0 ;\n      j < words [ i ] . length ( ) ;\n      j ++ ) {\n        boolean consonant = true ;\n        for ( int k = 0 ;\n        k < vowels . length ;\n        k ++ ) {\n          if ( vowels [ k ] == words [ i ] . charAt ( j ) ) {\n            consonant = false ;\n            break ;\n          }\n        }\n        if ( consonant ) numConsonants ++ ;\n      }\n      if ( numConsonants == n ) result . add ( words [ i ] ) ;\n    }\n    return result ;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != \"\") { \n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
      "target": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) { \n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
      "function range": "31,5-50,5",
      "raw_output": [
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , Integer . CASE_INSENSITIVE_ORDER ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( List < Integer > a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Collections . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( Integer num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static String [ ] byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) - digit_map . get ( num2 ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( List < Integer > a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Collections . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( Integer num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , byLength ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , byLength ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static String [ ] byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , byLength ) ;\n  String [ ] result = new String [ a . length ] ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result [ num ] = digit_map . get ( num ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( List < Integer > a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Collections . sort ( a , byLength ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( Integer num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , byLength ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . compareTo ( digit_map . get ( num2 ) ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) - digit_map . get ( num2 ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static String [ ] byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < String > byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static String [ ] byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  String [ ] result = new String [ a . length ] ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result [ num ] = digit_map . get ( num ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static String [ ] byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}\n",
        "public static String [ ] byLength ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  String [ ] result = new String [ a . length ] ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result [ num ] = digit_map . get ( num ) ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < string > by_length ( vector < int > a ) {\n  map < int , string > digit_map = {\n    {\n      1 , \"One\" }\n      , {\n        2 , \"Two\" }\n        , {\n          3 , \"Three\" }\n          , {\n            4 , \"Four\" }\n            , {\n              5 , \"Five\" }\n              , {\n                6 , \"Six\" }\n                , {\n                  7 , \"Seven\" }\n                  , {\n                    8 , \"Eight\" }\n                    , {\n                      9 , \"Nine\" }\n                    }\n                    ;\n                    sort ( a . begin ( ) , a . end ( ) , greater < int > ( ) ) ;\n                    vector < string > result ;\n                    for ( int num : a ) {\n                      if ( digit_map [ num ] != \"\" ) result . push_back ( digit_map [ num ] ) ;\n                    }\n                    return result ;\n                  }\n                  ",
        "vector < string > by_length ( vector < int > a ) {\n  map < int , string > digit_map = {\n    {\n      1 , \"One\" }\n      , {\n        2 , \"Two\" }\n        , {\n          3 , \"Three\" }\n          , {\n            4 , \"Four\" }\n            , {\n              5 , \"Five\" }\n              , {\n                6 , \"Six\" }\n                , {\n                  7 , \"Seven\" }\n                  , {\n                    8 , \"Eight\" }\n                    , {\n                      9 , \"Nine\" }\n                    }\n                    ;\n                    sort ( a . begin ( ) , a . end ( ) , cmp ) ;\n                    vector < string > result ;\n                    for ( int num : a ) {\n                      if ( digit_map [ num ] != \"\" ) result . push_back ( digit_map [ num ] ) ;\n                    }\n                    return result ;\n                  }\n                  ",
        "vector < string > by_length ( vector < int > a ) {\n  map < int , string > digit_map = {\n    {\n      1 , \"One\" }\n      , {\n        2 , \"Two\" }\n        , {\n          3 , \"Three\" }\n          , {\n            4 , \"Four\" }\n            , {\n              5 , \"Five\" }\n              , {\n                6 , \"Six\" }\n                , {\n                  7 , \"Seven\" }\n                  , {\n                    8 , \"Eight\" }\n                    , {\n                      9 , \"Nine\" }\n                    }\n                    ;\n                    sort ( a . begin ( ) , a . end ( ) , by_length ) ;\n                    vector < string > result ;\n                    for ( int num : a ) {\n                      if ( digit_map [ num ] != \"\" ) result . push_back ( digit_map [ num ] ) ;\n                    }\n                    return result ;\n                  }\n                  ",
        "vector < string > by_length ( vector < int > a ) {\n  map < int , string > digit_map ;\n  digit_map [ 1 ] = \"One\" ;\n  digit_map [ 2 ] = \"Two\" ;\n  digit_map [ 3 ] = \"Three\" ;\n  digit_map [ 4 ] = \"Four\" ;\n  digit_map [ 5 ] = \"Five\" ;\n  digit_map [ 6 ] = \"Six\" ;\n  digit_map [ 7 ] = \"Seven\" ;\n  digit_map [ 8 ] = \"Eight\" ;\n  digit_map [ 9 ] = \"Nine\" ;\n  sort ( a . begin ( ) , a . end ( ) , cmp ) ;\n  vector < string > result ;\n  for ( int num : a ) {\n    if ( digit_map [ num ] != \"\" ) result . push_back ( digit_map [ num ] ) ;\n  }\n  return result ;\n}\n",
        "vector < string > by_length ( vector < int > a ) {\n  map < int , string > digit_map ;\n  digit_map [ 1 ] = \"One\" ;\n  digit_map [ 2 ] = \"Two\" ;\n  digit_map [ 3 ] = \"Three\" ;\n  digit_map [ 4 ] = \"Four\" ;\n  digit_map [ 5 ] = \"Five\" ;\n  digit_map [ 6 ] = \"Six\" ;\n  digit_map [ 7 ] = \"Seven\" ;\n  digit_map [ 8 ] = \"Eight\" ;\n  digit_map [ 9 ] = \"Nine\" ;\n  sort ( a . begin ( ) , a . end ( ) ) ;\n  vector < string > result ;\n  for ( int num : a ) {\n    if ( digit_map [ num ] != \"\" ) result . push_back ( digit_map [ num ] ) ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , Integer . CASE_INSENSITIVE_ORDER ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( List < Integer > a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Collections . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( Integer num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) - digit_map . get ( num2 ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( List < Integer > a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Collections . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( Integer num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , byLength ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , byLength ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , byLength ) ;\n  String [ ] result = new String [ a . length ] ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result [ num ] = digit_map . get ( num ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( List < Integer > a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Collections . sort ( a , byLength ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( Integer num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , byLength ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . compareTo ( digit_map . get ( num2 ) ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) - digit_map . get ( num2 ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a , new Comparator < Integer > ( ) {\n    @ Override public int compare ( Integer num , Integer num2 ) {\n      return digit_map . get ( num ) . length ( ) - digit_map . get ( num2 ) . length ( ) ;\n    }\n  }\n  ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  List < String > result = new ArrayList < > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  String [ ] result = new String [ a . length ] ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result [ num ] = digit_map . get ( num ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < Integer , String > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result . add ( digit_map . get ( num ) ) ;\n    }\n  }\n  return result . toArray ( new String [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] by_length ( int [ ] a ) {\n  Map < Integer , String > digit_map = new HashMap < > ( ) ;\n  digit_map . put ( 1 , \"One\" ) ;\n  digit_map . put ( 2 , \"Two\" ) ;\n  digit_map . put ( 3 , \"Three\" ) ;\n  digit_map . put ( 4 , \"Four\" ) ;\n  digit_map . put ( 5 , \"Five\" ) ;\n  digit_map . put ( 6 , \"Six\" ) ;\n  digit_map . put ( 7 , \"Seven\" ) ;\n  digit_map . put ( 8 , \"Eight\" ) ;\n  digit_map . put ( 9 , \"Nine\" ) ;\n  Arrays . sort ( a ) ;\n  String [ ] result = new String [ a . length ] ;\n  for ( int num : a ) {\n    if ( digit_map . get ( num ) != null ) {\n      result [ num ] = digit_map . get ( num ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst2) { \n        if((i % 2) == 1) even++; \n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
      "target": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) { \n        if((i % 2) == 1) odd++; \n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
      "function range": "20,5-32,5",
      "raw_output": [
        "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String exchange ( int lst1 [ ] , int lst2 [ ] ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String exchange ( int lst1 [ ] , int lst2 [ ] ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}\n"
      ],
      "mid_translation": [
        "public : string exchange ( vector < int > lst1 , vector < int > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( auto i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) {\n      even ++ ;\n    }\n  }\n  for ( auto i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) {\n      even ++ ;\n    }\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public : string exchange ( vector < int > lst1 , vector < int > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) {\n      even ++ ;\n    }\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) {\n      even ++ ;\n    }\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public : string exchange ( vector < int > & lst1 , vector < int > & lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( auto i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) {\n      even ++ ;\n    }\n  }\n  for ( auto i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) {\n      even ++ ;\n    }\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "string exchange ( vector < int > lst1 , vector < int > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( auto i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) {\n      even ++ ;\n    }\n  }\n  for ( auto i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) {\n      even ++ ;\n    }\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "string exchange ( vector < int > lst1 , vector < int > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) {\n      even ++ ;\n    }\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) {\n      even ++ ;\n    }\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( int lst1 [ ] , int lst2 [ ] ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( Integer i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String exchange ( int [ ] lst1 , int [ ] lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( List < Integer > lst1 , List < Integer > lst2 ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange ( int lst1 [ ] , int lst2 [ ] ) {\n  int odd = 0 , even = 0 ;\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 1 ) even ++ ;\n  }\n  for ( int i : lst2 ) {\n    if ( ( i % 2 ) == 0 ) even ++ ;\n  }\n  if ( even >= odd ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable with tests"
        }
      ]
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) { \n        result.add(arr.get(i));\n    }\n    return result;\n}",
      "target": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for(int i = arr.size() - k; i <= arr.size() - 1; i++) { \n        result.add(arr.get(i));\n    }\n    return result;\n}",
      "function range": "32,5-39,5",
      "raw_output": [
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximumK ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result . add ( arr [ i ] ) ;\n  }\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximumK ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result . add ( arr [ i ] ) ;\n  }\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximumK ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result . add ( arr [ i ] ) ;\n  }\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximumK ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result . add ( arr [ i ] ) ;\n  }\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) result [ i ] = arr [ i ] ;\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) result [ i ] = arr [ i ] ;\n  return result ;\n}\n",
        "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int [ ] maximumK ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) result [ i ] = arr [ i ] ;\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > maximum_k ( vector < int > arr , int k ) {\n  sort ( arr . begin ( ) , arr . end ( ) ) ;\n  vector < int > result ;\n  for ( int i = arr . size ( ) - 1 ;\n  i >= arr . size ( ) - k ;\n  i -- ) result . push_back ( arr [ i ] ) ;\n  return result ;\n}\n",
        "public : vector < int > maximum_k ( vector < int > arr , int k ) {\n  sort ( arr . begin ( ) , arr . end ( ) ) ;\n  vector < int > result ;\n  for ( int i = arr . size ( ) - 1 ;\n  i >= arr . size ( ) - k ;\n  i -- ) result . push_back ( arr [ i ] ) ;\n  return result ;\n}\n",
        "vector < int > maximum_k ( vector < int > & arr , int k ) {\n  sort ( arr . begin ( ) , arr . end ( ) ) ;\n  vector < int > result ;\n  for ( int i = arr . size ( ) - 1 ;\n  i >= arr . size ( ) - k ;\n  i -- ) result . push_back ( arr [ i ] ) ;\n  return result ;\n}\n",
        "public : vector < int > maximum_k ( vector < int > & arr , int k ) {\n  sort ( arr . begin ( ) , arr . end ( ) ) ;\n  vector < int > result ;\n  for ( int i = arr . size ( ) - 1 ;\n  i >= arr . size ( ) - k ;\n  i -- ) result . push_back ( arr [ i ] ) ;\n  return result ;\n}\n",
        "vector < int > maximum_k ( vector < int > arr , int k ) {\n  sort ( arr . begin ( ) , arr . end ( ) ) ;\n  vector < int > result ;\n  for ( int i = arr . size ( ) - 1 ;\n  i >= arr . size ( ) - k ;\n  i -- ) {\n    result . push_back ( arr [ i ] ) ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result . add ( arr [ i ] ) ;\n  }\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result . add ( arr [ i ] ) ;\n  }\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result . add ( arr [ i ] ) ;\n  }\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result . add ( arr [ i ] ) ;\n  }\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) result [ i ] = arr [ i ] ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) result [ i ] = arr [ i ] ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length - k ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) {\n    result [ i ] = arr [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] maximum_k ( int [ ] arr , int k ) {\n  Arrays . sort ( arr ) ;\n  int [ ] result = new int [ arr . length ] ;\n  for ( int i = arr . length - 1 ;\n  i >= arr . length - k ;\n  i -- ) result [ i ] = arr [ i ] ;\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    } \n    return true;\n}",
      "target": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n        i += 1; \n        j -= 1;\n    }\n    return true;\n}",
      "function range": "20,5-34,5",
      "raw_output": [
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean wildcardItFly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j -- ] ) return false ;\n  }\n  return true ;\n}\n"
      ],
      "mid_translation": [
        "bool will_it_fly ( vector < int > q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . size ( ) ;\n  i += 1 ) {\n    sum += q [ i ] ;\n  }\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . size ( ) - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}\n",
        "bool will_it_fly ( vector < int > q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . size ( ) ;\n  i += 1 ) {\n    sum += q [ i ] ;\n  }\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . size ( ) - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "bool will_it_fly ( vector < int > & q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . size ( ) ;\n  i += 1 ) {\n    sum += q [ i ] ;\n  }\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . size ( ) - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}\n",
        "bool will_it_fly ( vector < int > & q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . size ( ) ;\n  i += 1 ) {\n    sum += q [ i ] ;\n  }\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . size ( ) - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "bool will_it_fly ( const vector < int > & q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . size ( ) ;\n  i += 1 ) {\n    sum += q [ i ] ;\n  }\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . size ( ) - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) {\n    return false ;\n  }\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j ++ ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ] != q [ j ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly ( int [ ] q , int w ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < q . length ;\n  i += 1 ) sum += q [ i ] ;\n  if ( sum > w ) return false ;\n  int i = 0 ;\n  int j = q . length - 1 ;\n  while ( i < j ) {\n    if ( q [ i ++ ] != q [ j -- ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3); \n}",
      "target": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2) \n        return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}",
      "function range": "17,5-23,5",
      "raw_output": [
        "static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "static int fibFib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}\n",
        "static int fibFib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}\n",
        "public static int fibFib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}\n",
        "public static int fibFib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}\n",
        "static int fibFib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}\n",
        "static int fib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fib ( n - 1 ) + fib ( n - 2 ) + fib ( n - 3 ) ;\n}\n",
        "static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "static int Fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return Fibfib ( n - 1 ) + Fibfib ( n - 2 ) + Fibfib ( n - 3 ) ;\n}\n",
        "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return Fibfib . fib ( n - 1 ) + Fibfib . fib ( n - 2 ) + Fibfib . fib ( n - 3 ) ;\n}\n",
        "static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "static int fibFib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}\n",
        "static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "static int Fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n"
      ],
      "mid_translation": [
        "int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "int fib_fib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fib_fib ( n - 1 ) + fib_fib ( n - 2 ) + fib_fib ( n - 3 ) ;\n}\n",
        "int Fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return Fibfib ( n - 1 ) + Fibfib ( n - 2 ) + Fibfib ( n - 3 ) ;\n}\n",
        "int fibfib ( int n ) {\n  if ( ! n ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n",
        "int Fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fib ( n - 1 ) + fib ( n - 2 ) + fib ( n - 3 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return Fibfib ( n - 1 ) + Fibfib ( n - 2 ) + Fibfib ( n - 3 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return Fibfib . fib ( n - 1 ) + Fibfib . fib ( n - 2 ) + Fibfib . fib ( n - 3 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibFib ( n - 1 ) + fibFib ( n - 2 ) + fibFib ( n - 3 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) return 0 ;\n  if ( n == 1 ) return 0 ;\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib ( int n ) {\n  if ( n == 0 ) {\n    return 0 ;\n  }\n  if ( n == 1 ) {\n    return 0 ;\n  }\n  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7') \n            result += 1;\n    }\n    return result;\n}",
      "target": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') \n            result += 1;\n    }\n    return result;\n}",
      "function range": "21,5-28,5",
      "raw_output": [
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( Character c : num . toCharArray ( ) ) {\n    if ( c . equals ( '2' ) || c . equals ( '3' ) || c . equals ( '5' ) || c . equals ( '7' ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( Character c : num . toCharArray ( ) ) {\n    if ( c . equals ( '2' ) || c . equals ( '3' ) || c . equals ( '5' ) || c . equals ( '7' ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int hexKey ( final String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static final int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static final int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public final static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}\n",
        "static int hexKey ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "int hex_key ( string num ) {\n  int result = 0 ;\n  for ( char c : num ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "int hex_key ( string num ) {\n  int result = 0 ;\n  for ( auto c : num ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "int hex_key ( const string & num ) {\n  int result = 0 ;\n  for ( char c : num ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public : int hex_key ( string num ) {\n  int result = 0 ;\n  for ( char c : num ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "unsigned int hex_key ( string num ) {\n  unsigned int result = 0 ;\n  for ( char c : num ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( Character c : num . toCharArray ( ) ) {\n    if ( c . equals ( '2' ) || c . equals ( '3' ) || c . equals ( '5' ) || c . equals ( '7' ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( Character c : num . toCharArray ( ) ) {\n    if ( c . equals ( '2' ) || c . equals ( '3' ) || c . equals ( '5' ) || c . equals ( '7' ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( final String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int hex_key ( String num ) {\n  int result = 0 ;\n  for ( char c : num . toCharArray ( ) ) {\n    if ( c == '2' || c == '3' || c == '5' || c == '7' ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    } \n    return result;\n}",
      "target": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        lst.remove(result.get(result.size() - 1)); \n        switched = (! switched);\n    }\n    return result;\n}",
      "function range": "17,5-29,5",
      "raw_output": [
        "public static int [ ] strangeSortArray ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] strangeSortArray ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( min ( lst . subList ( 0 , 1 ) ) ) ;\n    }\n    else {\n      result . add ( max ( lst . subList ( 0 , 1 ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] strangeSortArray ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] strangeSortArray ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Collections . min ( lst ) ) ;\n    }\n    else {\n      result . add ( Collections . max ( lst ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] strangeSortArray ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( min ( lst . subList ( 0 , 1 ) ) ) ;\n    }\n    else {\n      result . add ( max ( lst . subList ( 0 , 1 ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . subList ( 0 , 1 ) , lst . subList ( 1 , lst . size ( ) ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . subList ( 0 , 1 ) , lst . subList ( 1 , lst . size ( ) ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] strangeSortArray ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Collections . min ( lst ) ) ;\n    }\n    else {\n      result . add ( Collections . max ( lst ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] strangeSortArray ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] strangeSortArray ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    else result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > strangeSortList ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    else result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] strangeSortArray ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    else result [ 1 ] = Math . max ( lst [ 1 ] , lst [ lst . length - 1 ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] strangeSortArray ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > strangeSortList ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    else result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > strange_sort_vector ( vector < int > lst ) {\n  vector < int > result ;\n  bool switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) result . push_back ( min ( lst . begin ( ) , lst . end ( ) ) ) ;\n    else result . push_back ( max ( lst . begin ( ) , lst . end ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "vector < int > strange_sort_vector ( vector < int > lst ) {\n  vector < int > result ;\n  bool switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) result . push_back ( std :: min ( lst . begin ( ) , lst . end ( ) ) ) ;\n    else result . push_back ( std :: max ( lst . begin ( ) , lst . end ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "vector < int > strange_sort_vector ( const vector < int > & lst ) {\n  vector < int > result ;\n  bool switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) result . push_back ( min ( lst . begin ( ) , lst . end ( ) ) ) ;\n    else result . push_back ( max ( lst . begin ( ) , lst . end ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "vector < int > strange_sort_vector ( const vector < int > & lst ) {\n  vector < int > result ;\n  bool switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) result . push_back ( std :: min ( lst . begin ( ) , lst . end ( ) ) ) ;\n    else result . push_back ( std :: max ( lst . begin ( ) , lst . end ( ) ) ) ;\n  }\n  return result ;\n}\n",
        "vector < int > strange_sort_vector ( vector < int > lst ) {\n  vector < int > result ;\n  bool switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . push_back ( min ( lst . begin ( ) , lst . end ( ) ) ) ;\n    }\n    else {\n      result . push_back ( max ( lst . begin ( ) , lst . end ( ) ) ) ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] strange_sort_list ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] strange_sort_list ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( min ( lst . subList ( 0 , 1 ) ) ) ;\n    }\n    else {\n      result . add ( max ( lst . subList ( 0 , 1 ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int [ ] strange_sort_list ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] strange_sort_list ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Collections . min ( lst ) ) ;\n    }\n    else {\n      result . add ( Collections . max ( lst ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int [ ] strange_sort_list ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( min ( lst . subList ( 0 , 1 ) ) ) ;\n    }\n    else {\n      result . add ( max ( lst . subList ( 0 , 1 ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . subList ( 0 , 1 ) , lst . subList ( 1 , lst . size ( ) ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . subList ( 0 , 1 ) , lst . subList ( 1 , lst . size ( ) ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int [ ] strange_sort_list ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Math . min ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n    else {\n      result . add ( Math . max ( lst . get ( 0 ) , lst . get ( 1 ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) {\n      result . add ( Collections . min ( lst ) ) ;\n    }\n    else {\n      result . add ( Collections . max ( lst ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int [ ] strange_sort_list ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ 1 ] ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] strange_sort_list ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    else result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > strange_sort_list ( List < Integer > lst ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    else result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int [ ] strange_sort_list ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    else result [ 1 ] = Math . max ( lst [ 1 ] , lst [ lst . length - 1 ] ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] strange_sort_list ( int [ ] lst ) {\n  int [ ] result = new int [ lst . length ] ;\n  boolean switched = true ;\n  while ( lst . length > 0 ) {\n    if ( switched ) {\n      result [ 0 ] = Math . min ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n    else {\n      result [ 0 ] = Math . max ( lst [ 0 ] , lst [ lst . length - 1 ] ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > strange_sort_list ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  boolean switched = true ;\n  while ( lst . size ( ) > 0 ) {\n    if ( switched ) result . add ( Math . min ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n    else result . add ( Math . max ( lst . get ( 0 ) , lst . get ( lst . size ( ) - 1 ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1)); \n    }\n    return Integer.toBinaryString(sum);\n}",
      "target": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1)); \n    }\n    return Integer.toBinaryString(sum);\n}",
      "function range": "17,5-23,5",
      "raw_output": [
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) . trim ( ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . substring ( i + 1 ) ) . trim ( ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) . trim ( ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . substring ( i + 1 ) ) . trim ( ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) . trim ( ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) . trim ( ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . charAt ( i + 1 ) ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . substring ( i + 1 ) ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) . trim ( ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += ( int ) ( ( N + \"\" . charAt ( i + 1 ) ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += ( int ) ( ( N + \"\" ) . charAt ( i + 1 ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . charAt ( i + 1 ) ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . charAt ( i + 1 ) ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . format ( \"%d\" , sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return Long . toString ( sum ) ;\n}\n",
        "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 , N + \"\" ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}\n"
      ],
      "mid_translation": [
        "string solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) sum += atoi ( ( N + \"\" ) . substr ( i + 1 ) . c_str ( ) ) ;\n  return to_string ( sum ) ;\n}\n",
        "public : string solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) sum += atoi ( ( N + \"\" ) . substr ( i + 1 ) . c_str ( ) ) ;\n  return to_string ( sum ) ;\n}\n",
        "string solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) sum += atoi ( ( N + \"\" ) [ i + 1 ] . c_str ( ) ) ;\n  return to_string ( sum ) ;\n}\n",
        "string solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) sum += int ( ( N + \"\" ) [ i + 1 ] ) ;\n  return to_string ( sum ) ;\n}\n",
        "string solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) sum += atoi ( ( N + \"\" ) . c_str ( ) + i + 1 ) ;\n  return to_string ( sum ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) . trim ( ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . substring ( i + 1 ) ) . trim ( ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) . trim ( ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . substring ( i + 1 ) ) . trim ( ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) . trim ( ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) . trim ( ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . charAt ( i + 1 ) ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . substring ( i + 1 ) ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) . trim ( ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += ( int ) ( ( N + \"\" . charAt ( i + 1 ) ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += ( int ) ( ( N + \"\" ) . charAt ( i + 1 ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . charAt ( i + 1 ) ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" . length ( ) ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" . charAt ( i + 1 ) ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . valueOf ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return String . format ( \"%d\" , sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 ) ) ;\n  }\n  return Long . toString ( sum ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve ( int N ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < ( N + \"\" ) . length ( ) ;\n  i += 1 ) {\n    sum += Integer . parseInt ( ( N + \"\" ) . substring ( i + 1 , N + \"\" ) ) ;\n  }\n  return Integer . toString ( sum ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) { \n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "target": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue; \n            for (int k = j; k < a; k += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "19,5-31,5",
      "raw_output": [
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiprime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! is_prime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiprime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiprime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! is_prime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiprime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! is_prime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return 1 ;\n      }\n    }\n  }\n  return 0 ;\n}\n",
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return 1 ;\n        }\n      }\n    }\n  }\n  return 0 ;\n}\n",
        "public static boolean isMultiprime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiPrimePrime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiprime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! is_prime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean isMultiprime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! is_prime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "bool is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! is_prime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "bool is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! is_prime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}\n",
        "bool is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! is_prime ( k ) ) continue ;\n        if ( i * j * k == a ) return 1 ;\n      }\n    }\n  }\n  return 0 ;\n}\n",
        "bool is_multiply_prime ( unsigned a ) {\n  for ( unsigned i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) continue ;\n    for ( unsigned j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( unsigned k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! is_prime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! is_prime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! is_prime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      k += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! is_prime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return 1 ;\n      }\n    }\n  }\n  return 0 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return 1 ;\n        }\n      }\n    }\n  }\n  return 0 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! is_prime ( i ) ) continue ;\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! is_prime ( k ) ) continue ;\n        if ( i * j * k == a ) return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean is_multiply_prime ( int a ) {\n  for ( int i = 2 ;\n  i < a ;\n  i += 1 ) {\n    if ( ! isPrime ( i ) ) {\n      continue ;\n    }\n    for ( int j = i ;\n    j < a ;\n    j += 1 ) {\n      for ( int k = j ;\n      k < a ;\n      j += 1 ) {\n        if ( ! isPrime ( k ) ) {\n          continue ;\n        }\n        if ( i * j * k == a ) {\n          return true ;\n        }\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j; \n            ret.add(x);\n        }\n    }\n    return ret;\n}",
      "target": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j; \n            ret.add(x);\n        }\n    }\n    return ret;\n}",
      "function range": "16,5-30,5",
      "raw_output": [
        "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public static int [ ] factorial ( int n ) {\n  int ret [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static ArrayList < Integer > factorial ( int n ) {\n  ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static int [ ] factorial ( int n ) {\n  int ret [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public static ArrayList < Integer > factorial ( int n ) {\n  ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public static int [ ] factorial ( int n ) {\n  int ret [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static int [ ] factorial ( int n ) {\n  int ret [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) {\n        x *= j ;\n      }\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) {\n        x -= j ;\n      }\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public static int [ ] factorial ( int n ) {\n  int ret [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n",
        "public static ArrayList < Integer > factorial ( int n ) {\n  ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > factorial ( int n ) {\n  vector < int > ret ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) {\n        x *= j ;\n      }\n      ret . push_back ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) {\n        x -= j ;\n      }\n      ret . push_back ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public : vector < int > factorial ( int n ) {\n  vector < int > ret ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) {\n        x *= j ;\n      }\n      ret . push_back ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) {\n        x -= j ;\n      }\n      ret . push_back ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "vector < int > factorial ( int n ) {\n  vector < int > ret ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) {\n        x *= j ;\n      }\n      ret . push_back ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) {\n        x -= j ;\n      }\n      ret . push_back ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "public : vector < int > factorial ( int n ) {\n  vector < int > ret ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) {\n        x *= j ;\n      }\n      ret . push_back ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) {\n        x -= j ;\n      }\n      ret . push_back ( x ) ;\n    }\n  }\n  return ret ;\n}\n",
        "vector < int > factorial ( int n ) {\n  vector < int > ret ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) {\n        x *= j ;\n      }\n      ret . emplace_back ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) {\n        x -= j ;\n      }\n      ret . emplace_back ( x ) ;\n    }\n  }\n  return ret ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int ret [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static ArrayList < Integer > factorial ( int n ) {\n  ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int ret [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > factorial ( int n ) {\n  ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int ret [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int ret [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) {\n        x *= j ;\n      }\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) {\n        x -= j ;\n      }\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > factorial ( int n ) {\n  List < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int ret [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > factorial ( int n ) {\n  ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret . add ( x ) ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret . add ( x ) ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int [ ] factorial ( int n ) {\n  int [ ] ret = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      int x = 1 ;\n      for ( int j = 1 ;\n      j <= i ;\n      j ++ ) x *= j ;\n      ret [ i ] = x ;\n    }\n    else {\n      int x = 0 ;\n      for ( int j = 1 ;\n      j <= i ;\n      i ++ ) x -= j ;\n      ret [ i ] = x ;\n    }\n  }\n  return ret ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>(); \n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
      "target": "public static Integer next_smallest(int[] lst) {\n    HashSet<Integer> numbers = new HashSet<Integer>(); \n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
      "function range": "15,5-25,5",
      "raw_output": [
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( lst . size ( ) ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  ArrayList < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( lst . size ( ) ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  ArrayList < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( lst . size ( ) ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  ArrayList < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( int n = 0 ;\n  n < lst . size ( ) ;\n  n ++ ) numbers . add ( lst . get ( n ) ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( int n = 0 ;\n  n < lst . size ( ) ;\n  n ++ ) numbers . add ( lst . get ( n ) ) ;\n  ArrayList < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( int n = 0 ;\n  n < lst . size ( ) ;\n  n ++ ) numbers . add ( lst . get ( n ) ) ;\n  ArrayList < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( int n = 0 ;\n  n < lst . size ( ) ;\n  n ++ ) numbers . add ( lst . get ( n ) ) ;\n  List < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( lst . size ( ) ) ;\n  for ( int n = 0 ;\n  n < lst . size ( ) ;\n  n ++ ) numbers . add ( lst . get ( n ) ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( lst . size ( ) ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  ArrayList < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}\n",
        "public static Integer nextSmallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}\n"
      ],
      "mid_translation": [
        "public : Integer nextSmallest ( vector < Integer > lst ) {\n  vector < Integer > numbers ;\n  for ( auto n : lst ) {\n    numbers . push_back ( n ) ;\n  }\n  vector < Integer > no_duplicate = numbers ;\n  sort ( no_duplicate . begin ( ) , no_duplicate . end ( ) ) ;\n  if ( no_duplicate . size ( ) < 2 ) return 0 ;\n  return no_duplicate [ 1 ] ;\n}\n",
        "public : Integer nextSmallest ( vector < Integer > & lst ) {\n  vector < Integer > numbers ;\n  for ( auto n : lst ) {\n    numbers . push_back ( n ) ;\n  }\n  vector < Integer > no_duplicate = numbers ;\n  sort ( no_duplicate . begin ( ) , no_duplicate . end ( ) ) ;\n  if ( no_duplicate . size ( ) < 2 ) return 0 ;\n  return no_duplicate [ 1 ] ;\n}\n",
        "public : Integer nextSmallest ( vector < Integer > & lst ) {\n  vector < Integer > numbers ;\n  for ( auto & n : lst ) {\n    numbers . push_back ( n ) ;\n  }\n  vector < Integer > no_duplicate = numbers ;\n  sort ( no_duplicate . begin ( ) , no_duplicate . end ( ) ) ;\n  if ( no_duplicate . size ( ) < 2 ) return 0 ;\n  return no_duplicate [ 1 ] ;\n}\n",
        "public : Integer nextSmallest ( vector < Integer > lst ) {\n  vector < Integer > numbers ;\n  for ( int n = 0 ;\n  n < lst . size ( ) ;\n  n ++ ) {\n    numbers . push_back ( lst [ n ] ) ;\n  }\n  vector < Integer > no_duplicate = numbers ;\n  sort ( no_duplicate . begin ( ) , no_duplicate . end ( ) ) ;\n  if ( no_duplicate . size ( ) < 2 ) return 0 ;\n  return no_duplicate [ 1 ] ;\n}\n",
        "public : Integer nextSmallest ( vector < Integer > lst ) {\n  vector < Integer > numbers ;\n  for ( auto n : lst ) {\n    numbers . push_back ( n ) ;\n  }\n  vector < Integer > no_duplicate = numbers ;\n  sort ( no_duplicate . begin ( ) , no_duplicate . end ( ) ) ;\n  if ( no_duplicate . size ( ) < 2 ) return Integer ( ) ;\n  return no_duplicate [ 1 ] ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( lst . size ( ) ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  ArrayList < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( lst . size ( ) ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  ArrayList < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( lst . size ( ) ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  ArrayList < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( int n = 0 ;\n  n < lst . size ( ) ;\n  n ++ ) numbers . add ( lst . get ( n ) ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( int n = 0 ;\n  n < lst . size ( ) ;\n  n ++ ) numbers . add ( lst . get ( n ) ) ;\n  ArrayList < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( int n = 0 ;\n  n < lst . size ( ) ;\n  n ++ ) numbers . add ( lst . get ( n ) ) ;\n  ArrayList < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( int n = 0 ;\n  n < lst . size ( ) ;\n  n ++ ) numbers . add ( lst . get ( n ) ) ;\n  List < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( lst . size ( ) ) ;\n  for ( int n = 0 ;\n  n < lst . size ( ) ;\n  n ++ ) numbers . add ( lst . get ( n ) ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( lst . size ( ) ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( ArrayList < Integer > lst ) {\n  ArrayList < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  ArrayList < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < Integer > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > no_duplicate = numbers ;\n  Collections . sort ( no_duplicate ) ;\n  if ( no_duplicate . size ( ) < 2 ) return null ;\n  return no_duplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static Integer next_smallest ( List < Integer > lst ) {\n  List < Integer > numbers = new ArrayList < > ( ) ;\n  for ( Integer n : lst ) numbers . add ( n ) ;\n  List < Integer > noDuplicate = numbers ;\n  Collections . sort ( noDuplicate ) ;\n  if ( noDuplicate . size ( ) < 2 ) return null ;\n  return noDuplicate . get ( 1 ) ;\n}",
          "correctness": "uncompilable with tests"
        }
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n    int power = 1; \n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
      "target": "public static boolean is_simple_power(int x, int n) {\n    if (n == 1) \n        return x == 1;\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
      "function range": "15,5-21,5",
      "raw_output": [
        "public static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}\n",
        "static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public static boolean isSimplePow ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public static final boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "static final boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public final static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public static Matcher < Integer > isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}\n",
        "static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}\n",
        "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}\n",
        "public static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}\n",
        "public static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public static boolean isSimplePower ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}\n",
        "public static boolean isSimplePow ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n"
      ],
      "mid_translation": [
        "bool is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}\n",
        "bool is_simple_power ( unsigned x , unsigned n ) {\n  unsigned power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}\n",
        "public : bool is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}\n",
        "bool is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}\n",
        "bool is_simple_power ( size_t x , size_t n ) {\n  size_t power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Matcher < Integer > is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) power *= n ;\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power ( int x , int n ) {\n  int power = 1 ;\n  while ( power < x ) {\n    power *= n ;\n  }\n  return power == x ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars); \n    } \n    return result; \n}",
      "target": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars) + \" \"; \n    } \n    return result.substring(0, result.length() - 1); \n}",
      "function range": "17,5-25,5",
      "raw_output": [
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Collections . shuffle ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Collections . shuffle ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String antiShuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string anti_shuffle ( string s ) {\n  string result ;\n  for ( string :: size_type i = 0 ;\n  i < s . size ( ) ;\n  i ++ ) {\n    char * p = s . c_str ( ) + i ;\n    std :: random_shuffle ( p , p + s . size ( ) ) ;\n    result += string ( p , p + s . size ( ) ) ;\n  }\n  return result ;\n}\n",
        "string anti_shuffle ( string s ) {\n  string result ;\n  for ( string :: size_type i = 0 ;\n  i < s . size ( ) ;\n  ++ i ) {\n    char * p = s . c_str ( ) + i ;\n    std :: random_shuffle ( p , p + s . size ( ) ) ;\n    result += string ( p , p + s . size ( ) ) ;\n  }\n  return result ;\n}\n",
        "string anti_shuffle ( string s ) {\n  string result ;\n  for ( string :: size_type i = 0 ;\n  i < s . size ( ) ;\n  i ++ ) {\n    char * p = s . c_str ( ) + i ;\n    std :: sort ( p , p + s . size ( ) ) ;\n    result += string ( p , p + s . size ( ) ) ;\n  }\n  return result ;\n}\n",
        "string anti_shuffle ( string s ) {\n  string result ;\n  for ( string :: size_type i = 0 ;\n  i < s . size ( ) ;\n  i ++ ) {\n    char * p = s . c_str ( ) + i ;\n    std :: random_shuffle ( p , p + s . size ( ) ) ;\n    result += std :: string ( p , p + s . size ( ) ) ;\n  }\n  return result ;\n}\n",
        "string anti_shuffle ( string s ) {\n  string result ;\n  for ( string :: size_type i = 0 ;\n  i < s . size ( ) ;\n  ++ i ) {\n    char * p = s . c_str ( ) + i ;\n    std :: sort ( p , p + s . size ( ) ) ;\n    result += string ( p , p + s . size ( ) ) ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Collections . shuffle ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Collections . shuffle ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( new String ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    char [ ] chars = s . toCharArray ( ) ;\n    Arrays . sort ( chars ) ;\n    sb . append ( String . valueOf ( chars [ i ] ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i); \n\t}\n\treturn pile;\n}",
      "target": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n + 2 * i); \n\t}\n\treturn pile;\n}",
      "function range": "20,2-26,2",
      "raw_output": [
        "public static int [ ] makeAPile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}\n",
        "public static int [ ] makeAile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}\n",
        "public static ArrayList < Integer > makeAPile ( int n ) {\n  ArrayList < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}\n",
        "public static List < Integer > makeAPile ( int n ) {\n  List < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}\n",
        "public static List < Integer > makeAPile ( int n ) {\n  List < Integer > pile = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}\n",
        "public static int [ ] makeAPile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}\n",
        "public static int [ ] makeAile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}\n",
        "public static int [ ] makeAPile ( int n ) {\n  int pile [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}\n",
        "public static List < Integer > makeAPile ( int n ) {\n  List < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}\n",
        "public static List < Integer > makeAPile ( int n ) {\n  List < Integer > pile = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}\n",
        "public static int [ ] makeAPile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}\n",
        "public static int [ ] makeAile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}\n",
        "public static int [ ] makeAPile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}\n",
        "public static int [ ] makeAPile ( int n ) {\n  int pile [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}\n",
        "public static ArrayList < Integer > makeAPile ( int n ) {\n  ArrayList < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile . add ( n - 2 * i ) ;\n  return pile ;\n}\n",
        "public static int [ ] makeAPile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}\n",
        "public static int [ ] makeAile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}\n",
        "public static int [ ] makeAPile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}\n",
        "public static int [ ] makeAPile ( int n ) {\n  int pile [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}\n",
        "public static List < Integer > makeAPile ( int n ) {\n  List < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile . add ( n - 2 * i ) ;\n  return pile ;\n}\n",
        "public static int [ ] makeAPile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}\n",
        "public static int [ ] makeAile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}\n",
        "public static List < Integer > makeAPile ( int n ) {\n  List < Integer > pile = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}\n",
        "public static ArrayList < Integer > makeAPile ( int n ) {\n  ArrayList < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}\n",
        "static int [ ] makeAPile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > make_a_pile ( int n ) {\n  vector < int > pile ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile . push_back ( n - 2 * i ) ;\n  return pile ;\n}\n",
        "public : vector < int > make_a_pile ( int n ) {\n  vector < int > pile ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile . push_back ( n - 2 * i ) ;\n  return pile ;\n}\n",
        "vector < int > make_a_pile ( int n ) {\n  vector < int > pile ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . push_back ( n - 2 * i ) ;\n  }\n  return pile ;\n}\n",
        "public : vector < int > make_a_pile ( int n ) {\n  vector < int > pile ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . push_back ( n - 2 * i ) ;\n  }\n  return pile ;\n}\n",
        "vector < int > make_a_pile ( int n ) {\n  vector < int > pile ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile . emplace_back ( n - 2 * i ) ;\n  return pile ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static ArrayList < Integer > make_a_pile ( int n ) {\n  ArrayList < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > make_a_pile ( int n ) {\n  List < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > make_a_pile ( int n ) {\n  List < Integer > pile = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int pile [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > make_a_pile ( int n ) {\n  List < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > make_a_pile ( int n ) {\n  List < Integer > pile = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int pile [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > make_a_pile ( int n ) {\n  ArrayList < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile . add ( n - 2 * i ) ;\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int pile [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile [ i ] = n - 2 * i ;\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > make_a_pile ( int n ) {\n  List < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pile . add ( n - 2 * i ) ;\n  return pile ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > make_a_pile ( int n ) {\n  List < Integer > pile = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > make_a_pile ( int n ) {\n  ArrayList < Integer > pile = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile . add ( n - 2 * i ) ;\n  }\n  return pile ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] make_a_pile ( int n ) {\n  int [ ] pile = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    pile [ i ] = n - 2 * i ;\n  }\n  return pile ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2)) \n            return false;\n    }\n    return true;\n}",
      "target": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i + 2) == s.charAt(i)) \n            return false;\n    }\n    return true;\n}",
      "function range": "15,5-23,5",
      "raw_output": [
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean isHappy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n"
      ],
      "mid_translation": [
        "bool is_happy ( string s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] ) return false ;\n  }\n  return true ;\n}\n",
        "bool is_happy ( string s ) {\n  if ( s . size ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . size ( ) - 2 ;\n  i += 1 ) {\n    if ( s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] ) return false ;\n  }\n  return true ;\n}\n",
        "bool is_happy ( const string & s ) {\n  if ( s . size ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . size ( ) - 2 ;\n  i += 1 ) {\n    if ( s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] ) return false ;\n  }\n  return true ;\n}\n",
        "bool is_happy ( const string & s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] ) return false ;\n  }\n  return true ;\n}\n",
        "bool is_happy ( string s ) {\n  if ( s . size ( ) < 3 ) return false ;\n  for ( size_t i = 0 ;\n  i < s . size ( ) - 2 ;\n  i += 1 ) {\n    if ( s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] ) return false ;\n  }\n  return true ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) return false ;\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy ( String s ) {\n  if ( s . length ( ) < 3 ) {\n    return false ;\n  }\n  for ( int i = 0 ;\n  i < s . length ( ) - 2 ;\n  i += 1 ) {\n    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0) \n            return false;\n    }\n    return true;\n}",
      "target": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l % i == 0) \n            return false;\n    }\n    return true;\n}",
      "function range": "12,5-21,5",
      "raw_output": [
        "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean primalLength ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean primalLength ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean prime_length ( char [ ] string ) {\n  int l = string . length ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean prime_length ( byte [ ] string ) {\n  int l = string . length ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean prime_length ( char [ ] string ) {\n  int l = string . length ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean prime_length ( char [ ] string ) {\n  int l = string . length ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean primeLength ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean primeLength ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean primalLength ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean primalLength ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean primeLength ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean primalLength ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n"
      ],
      "mid_translation": [
        "bool prime_length ( const char * string ) {\n  int l = strlen ( string ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "bool prime_length ( char * string ) {\n  int l = strlen ( string ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "bool prime_length ( string string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "bool prime_length ( const string & string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n",
        "bool prime_length ( string & string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( char [ ] string ) {\n  int l = string . length ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( byte [ ] string ) {\n  int l = string . length ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( char [ ] string ) {\n  int l = string . length ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( char [ ] string ) {\n  int l = string . length ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) {\n    return false ;\n  }\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length ( String string ) {\n  int l = string . length ( ) ;\n  if ( l <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < l ;\n  i += 1 ) {\n    if ( l - i == 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            array[i] = array[array.length - i - 1]; \n            array[array.length - i - 1] = array[i]; \n        }\n        return array;\n    }\n}",
      "target": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i]; \n            array[i] = array[array.length - i - 1]; \n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
      "function range": "19,5-32,5",
      "raw_output": [
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return 0 ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array . length ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array . length ;\n  }\n}\n",
        "public static int sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return 0 ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array . length ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array . length ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return array ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return 0 ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array . length ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return 0 ;\n  }\n}\n",
        "public static int sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return 0 ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array . length ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return 0 ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array . length ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return array ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return 0 ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array . length ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array . length ;\n  }\n}\n",
        "public static int sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return 0 ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array . length ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array . length ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return array ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array . length ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return array ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return 0 ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return 0 ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return 1 ;\n  }\n}\n",
        "/**\n* Sort an array.\n*\n* @param array the array\n*/\npublic static void sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return array ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n",
        "public static int sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return 0 ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return 1 ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return 0 ;\n  }\n}\n",
        "/**\n* Sort an array.\n*\n* @param array the array\n*/\npublic static void sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return ;\n  }\n}\n",
        "public static int [ ] sortArray ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}\n"
      ],
      "mid_translation": [
        "int sort_array ( vector < int > & v ) {\n  if ( v . size ( ) == 0 ) return 0 ;\n  sort ( v . begin ( ) , v . end ( ) ) ;\n  if ( ( v [ 0 ] + v [ v . size ( ) - 1 ] ) % 2 == 1 ) return v . size ( ) ;\n  else {\n    for ( int i = 0 ;\n    i < v . size ( ) / 2 ;\n    i += 1 ) {\n      v [ i ] = v [ v . size ( ) - i - 1 ] ;\n      v [ v . size ( ) - i - 1 ] = v [ i ] ;\n    }\n    return v . size ( ) ;\n  }\n}\n",
        "int sort_array ( vector < int > & v ) {\n  if ( v . size ( ) == 0 ) return 0 ;\n  sort ( v . begin ( ) , v . end ( ) ) ;\n  if ( ( v [ 0 ] + v [ v . size ( ) - 1 ] ) % 2 == 1 ) return v . size ( ) ;\n  else {\n    for ( int i = 0 ;\n    i < v . size ( ) / 2 ;\n    i += 1 ) {\n      v [ i ] = v [ v . size ( ) - i - 1 ] ;\n      v [ v . size ( ) - i - 1 ] = v [ i ] ;\n    }\n    return 0 ;\n  }\n}\n",
        "int sort_array ( vector < int > & array ) {\n  if ( array . size ( ) == 0 ) return 0 ;\n  sort ( array . begin ( ) , array . end ( ) ) ;\n  if ( ( array [ 0 ] + array [ array . size ( ) - 1 ] ) % 2 == 1 ) return array . size ( ) ;\n  else {\n    for ( int i = 0 ;\n    i < array . size ( ) / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . size ( ) - i - 1 ] ;\n      array [ array . size ( ) - i - 1 ] = array [ i ] ;\n    }\n    return array . size ( ) ;\n  }\n}\n",
        "int sort_array ( vector < int > & v ) {\n  if ( v . size ( ) == 0 ) return 0 ;\n  sort ( v . begin ( ) , v . end ( ) ) ;\n  if ( ( v [ 0 ] + v [ v . size ( ) - 1 ] ) % 2 == 1 ) return 0 ;\n  else {\n    for ( int i = 0 ;\n    i < v . size ( ) / 2 ;\n    i += 1 ) {\n      v [ i ] = v [ v . size ( ) - i - 1 ] ;\n      v [ v . size ( ) - i - 1 ] = v [ i ] ;\n    }\n    return 1 ;\n  }\n}\n",
        "int sort_array ( vector < int > & v ) {\n  if ( v . size ( ) == 0 ) return 0 ;\n  sort ( v . begin ( ) , v . end ( ) ) ;\n  if ( ( v [ 0 ] + v [ v . size ( ) - 1 ] ) % 2 == 1 ) return 1 ;\n  else {\n    for ( int i = 0 ;\n    i < v . size ( ) / 2 ;\n    i += 1 ) {\n      v [ i ] = v [ v . size ( ) - i - 1 ] ;\n      v [ v . size ( ) - i - 1 ] = v [ i ] ;\n    }\n    return 0 ;\n  }\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return 0 ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array . length ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array . length ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return 0 ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array . length ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array . length ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return array ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return 0 ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array . length ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return 0 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return 0 ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array . length ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return 0 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array . length ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return array ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return 0 ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array . length ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array . length ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return 0 ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array . length ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array . length ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return array ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array . length ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return array ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return 0 ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return 0 ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return 1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static void sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return array ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return array ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return 0 ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) return 1 ;\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return 0 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static void sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) {\n    return ;\n  }\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] sort_array ( int [ ] array ) {\n  if ( array . length == 0 ) return array ;\n  Arrays . sort ( array ) ;\n  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {\n    return array ;\n  }\n  else {\n    for ( int i = 0 ;\n    i < array . length / 2 ;\n    i += 1 ) {\n      array [ i ] = array [ array . length - i - 1 ] ;\n      array [ array . length - i - 1 ] = array [ i ] ;\n    }\n    return array ;\n  }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) { \n        if (x + y == z || x + z == y) \n            return true;\n    }\n    return false;\n}",
      "target": "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y && (int)z == z) { \n        if (x + y == z || x + z == y || y + z == x) \n            return true;\n    }\n    return false;\n}",
      "function range": "17,5-23,5",
      "raw_output": [
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n",
        "static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( Integer . MIN_VALUE == x && Integer . MAX_VALUE == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( Integer . MIN_VALUE == x && Integer . MAX_VALUE == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( Integer . MAX_VALUE == x && Integer . MIN_VALUE == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( Integer . MAX_VALUE == x && Integer . MAX_VALUE == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( Integer . MIN_VALUE == x && Integer . MIN_VALUE == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n",
        "static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean anyInt ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n",
        "bool any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool any_int ( double x , double y , double z ) {\n  if ( int ( x ) == x && int ( y ) == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n",
        "bool any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n",
        "bool any_int ( double & x , double & y , double & z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( Integer . MIN_VALUE == x && Integer . MAX_VALUE == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( Integer . MIN_VALUE == x && Integer . MAX_VALUE == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( Integer . MAX_VALUE == x && Integer . MIN_VALUE == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( Integer . MAX_VALUE == x && Integer . MAX_VALUE == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( Integer . MIN_VALUE == x && Integer . MIN_VALUE == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int ( double x , double y , double z ) {\n  if ( ( int ) x == x && ( int ) y == y ) {\n    if ( x + y == z || x + z == y ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CORRECT_PARENTHESIS": {
      "loc": "23-27",
      "input": "public static boolean correct_parenthesis(String parenthesis) {\n    int depth = 0;\n    for (char b : parenthesis.toCharArray()) {\n        if (b == '(')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth >= 0) \n            return true; \n    } \n    return false; \n}",
      "target": "public static boolean correct_parenthesis(String parenthesis) {\n    int depth = 0;\n    for (char b : parenthesis.toCharArray()) {\n        if (b == '(')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0) \n            return false; \n    } \n    return depth == 0; \n}",
      "function range": "16,5-27,5",
      "raw_output": [
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( byte b : parenthesis . getBytes ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( byte b : parenthesis . getBytes ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctParentheses ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean correctParenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "public static boolean correctParentheses ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool correct_parenthesis ( string parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool correct_parenthesis ( string parenthesis ) {\n  int depth = 0 ;\n  for ( auto b : parenthesis ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool correct_parenthesis ( string parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}\n",
        "bool correct_parenthesis ( const string & parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool correct_parenthesis ( const std :: string & parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( byte b : parenthesis . getBytes ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( byte b : parenthesis . getBytes ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) {\n      depth += 1 ;\n    }\n    else {\n      depth -= 1 ;\n    }\n    if ( depth >= 0 ) {\n      return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_parenthesis ( String parenthesis ) {\n  int depth = 0 ;\n  for ( char b : parenthesis . toCharArray ( ) ) {\n    if ( b == '(' ) depth += 1 ;\n    else depth -= 1 ;\n    if ( depth >= 0 ) return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){ \n            if (lst.get(i).get(j) == x){ \n                result.add(new GET_ROW().new Tuple(i, j)); \n            }\n        }\n    }\n    return result;\n}",
      "target": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){ \n            if (lst.get(i).get(i) == x){ \n                result.add(new GET_ROW().new Tuple(i, i)); \n            }\n        }\n    }\n    return result;\n}",
      "function range": "22,5-33,5",
      "raw_output": [
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Tuple > getRow ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Tuple > getRow ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( int [ ] [ ] lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    for ( int j = lst [ i ] . length - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst [ i ] [ j ] == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( make_tuple ( ) . new Tuple ( i , j ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Tuple > getRow ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( make_tuple ( ) . new Tuple ( i , j ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Tuple > getRow ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Tuple > getRow ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Tuple > getRow ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( int [ ] [ ] lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    for ( int j = lst [ i ] . length - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst [ i ] [ j ] == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Tuple > getRow ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( make_tuple ( ) . new Tuple ( i , j ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static List < Tuple > getRow ( int [ ] [ ] lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    for ( int j = lst [ i ] . length - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst [ i ] [ j ] == x ) {\n        result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < tuple > get_row ( vector < vector < int >> & lst , int x ) {\n  vector < tuple > result ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst [ i ] . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst [ i ] [ j ] == x ) {\n        result . push_back ( make_tuple ( GET_ROW ( ) . new tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "vector < tuple > get_row ( vector < vector < int >> lst , int x ) {\n  vector < tuple > result ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst [ i ] . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst [ i ] [ j ] == x ) {\n        result . push_back ( make_tuple ( GET_ROW ( ) . new tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "vector < tuple > get_row ( vector < vector < int >> & lst , int x ) {\n  vector < tuple > result ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst [ i ] . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst [ i ] [ j ] == x ) {\n        result . push_back ( make_tuple ( ) . new tuple ( i , j ) ) ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "vector < tuple > get_row ( vector < vector < int >> & lst , int x ) {\n  vector < tuple > result ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst [ i ] . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst [ i ] [ j ] == x ) result . push_back ( make_tuple ( GET_ROW ( ) . new tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}\n",
        "vector < tuple > get_row ( vector < vector < int >> & lst , int x ) {\n  vector < tuple > result ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst [ i ] . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst [ i ] [ j ] == x ) result . push_back ( make_tuple ( ) . new tuple ( i , j ) ) ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Tuple > get_row ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Tuple > get_row ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( int [ ] [ ] lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    for ( int j = lst [ i ] . length - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst [ i ] [ j ] == x ) result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( make_tuple ( ) . new Tuple ( i , j ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Tuple > get_row ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( make_tuple ( ) . new Tuple ( i , j ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Tuple > get_row ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Tuple > get_row ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Tuple > get_row ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( int [ ] [ ] lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    for ( int j = lst [ i ] . length - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst [ i ] [ j ] == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( GET_ROW ( ) . new Tuple ( i , j ) ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Tuple > get_row ( ArrayList < ArrayList < Integer >> lst , int x ) {\n  ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( make_tuple ( ) . new Tuple ( i , j ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( List < List < Integer >> lst , int x ) {\n  List < Tuple > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    for ( int j = lst . get ( i ) . size ( ) - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst . get ( i ) . get ( j ) == x ) {\n        result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Tuple > get_row ( int [ ] [ ] lst , int x ) {\n  List < Tuple > result = new ArrayList < Tuple > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    for ( int j = lst [ i ] . length - 1 ;\n    j >= 0 ;\n    j -= 1 ) {\n      if ( lst [ i ] [ j ] == x ) {\n        result . add ( new Tuple ( ) . new Tuple ( i , j ) ) ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = false; \n        for (int j = 2; j < i; j += 1){ \n            if (i % j == 0) { \n                is_prime = false; \n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
      "target": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true; \n        for (int j = 2; j < i; j += 1){ \n            if (i % j == 0) { \n                is_prime = false; \n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
      "function range": "17,5-30,5",
      "raw_output": [
        "public static List < Integer > countUpTo ( int n ) {\n  List < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static List < Integer > countUpTo ( int n ) {\n  List < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static ArrayList < Integer > countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static int [ ] countUpTo ( int n ) {\n  int [ ] primes = new int [ n ] ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes [ i ] = i ;\n    }\n  }\n  return primes ;\n}\n",
        "public static ArrayList < Integer > countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static List < Integer > countUpTo ( int n ) {\n  List < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static List < Integer > countUpTo ( int n ) {\n  List < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static ArrayList < Integer > countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static ArrayList < Integer > countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static int [ ] countUpTo ( int n ) {\n  int [ ] primes = new int [ n ] ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes [ i ] = i ;\n    }\n  }\n  return primes ;\n}\n",
        "public static ArrayList < Integer > countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static List < Integer > countUpTo ( int n ) {\n  List < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static List < Integer > countUpTo ( int n ) {\n  List < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static ArrayList < Integer > countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static ArrayList < Integer > countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) primes . add ( i ) ;\n  }\n  return primes ;\n}\n",
        "public static List < Integer > countUpTo ( int n ) {\n  List < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static List < Integer > countUpTo ( int n ) {\n  List < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static ArrayList < Integer > countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static int [ ] countUpTo ( int n ) {\n  int [ ] primes = new int [ n ] ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes [ i ] = i ;\n    }\n  }\n  return primes ;\n}\n",
        "public static ArrayList < Integer > countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static ArrayList < Integer > countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static List < Integer > countUpTo ( int n ) {\n  List < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static List < Integer > countUpTo ( int n ) {\n  List < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static ArrayList < Integer > countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public static int [ ] countUpTo ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes . toArray ( new Integer [ primes . size ( ) ] ) ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < int > countUpTo ( int n ) {\n  vector < int > primes ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    bool is_prime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) is_prime = false ;\n    }\n    if ( is_prime ) {\n      primes . push_back ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public : vector < int > countUpTo ( int n ) {\n  vector < int > primes ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    bool is_prime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) is_prime = false ;\n    }\n    if ( is_prime ) primes . push_back ( i ) ;\n  }\n  return primes ;\n}\n",
        "vector < int > count_up_to ( int n ) {\n  vector < int > primes ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    bool is_prime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) is_prime = false ;\n    }\n    if ( is_prime ) {\n      primes . push_back ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "public : vector < int > countUpTo ( int n ) {\n  vector < int > primes ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    bool isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) isPrime = false ;\n    }\n    if ( isPrime ) {\n      primes . push_back ( i ) ;\n    }\n  }\n  return primes ;\n}\n",
        "vector < int > count_up_to ( int n ) {\n  vector < int > primes ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    bool is_prime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) is_prime = false ;\n    }\n    if ( is_prime ) primes . push_back ( i ) ;\n  }\n  return primes ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < Integer > count_up_to ( int n ) {\n  List < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > count_up_to ( int n ) {\n  List < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] count_up_to ( int n ) {\n  int [ ] primes = new int [ n ] ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes [ i ] = i ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > count_up_to ( int n ) {\n  List < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > count_up_to ( int n ) {\n  List < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] count_up_to ( int n ) {\n  int [ ] primes = new int [ n ] ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes [ i ] = i ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > count_up_to ( int n ) {\n  List < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > count_up_to ( int n ) {\n  List < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) primes . add ( i ) ;\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > count_up_to ( int n ) {\n  List < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > count_up_to ( int n ) {\n  List < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] count_up_to ( int n ) {\n  int [ ] primes = new int [ n ] ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes [ i ] = i ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > count_up_to ( int n ) {\n  List < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > count_up_to ( int n ) {\n  List < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] count_up_to ( int n ) {\n  ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    boolean isPrime = false ;\n    for ( int j = 2 ;\n    j < i ;\n    j += 1 ) {\n      if ( i % j == 0 ) {\n        isPrime = false ;\n      }\n    }\n    if ( isPrime ) {\n      primes . add ( i ) ;\n    }\n  }\n  return primes . toArray ( new Integer [ primes . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n    if(x < y) return -1; \n    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
      "target": "public static int choose_num(int x, int y) {\n    if(x > y) return -1; \n    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
      "function range": "14,5-19,5",
      "raw_output": [
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "static int chooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "static int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "static public int chooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "public static final int chooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "public static final int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "public static final int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  return y - 1 ;\n}\n",
        "static int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    throw new IllegalArgumentException ( \"x = \" + x + \", y = \" + y ) ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    throw new IllegalArgumentException ( \"x = \" + x + \", y = \" + y ) ;\n  }\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "static int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "public static int chooseNum ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "public static int ChooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "static int chooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "public static int ChooseNum ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n"
      ],
      "mid_translation": [
        "int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "public : int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n",
        "int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}\n",
        "int ChooseNum ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    throw new IllegalArgumentException ( \"x = \" + x + \", y = \" + y ) ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    throw new IllegalArgumentException ( \"x = \" + x + \", y = \" + y ) ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) return - 1 ;\n  if ( ( y % 2 ) == 0 ) return y ;\n  if ( x == y ) return - 1 ;\n  return y - 1 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num ( int x , int y ) {\n  if ( x < y ) {\n    return - 1 ;\n  }\n  if ( ( y % 2 ) == 0 ) {\n    return y ;\n  }\n  if ( x == y ) {\n    return - 1 ;\n  }\n  return y - 1 ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false; \n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
      "target": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i] && (day < 1 || day > 31)) return false; \n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
      "function range": "25,5-50,5",
      "raw_output": [
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new SimpleDateFormat ( \"yyyy-MM-dd\" ) . parse ( date ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( ParseException e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = new int [ ] {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = new int [ ] {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = new int [ ] {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = new int [ ] {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] date_info = date . split ( \"-\" ) ;\n    if ( date_info . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( date_info [ 0 ] ) ;\n    int day = Integer . parseInt ( date_info [ 1 ] ) ;\n    int year = Integer . parseInt ( date_info [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] month_check1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < month_check1 . length ;\n      i ++ ) {\n        if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] month_check2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < month_check2 . length ;\n        i ++ ) {\n          if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new SimpleDateFormat ( \"yyyy-MM-dd\" ) . parse ( date ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( ParseException e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new SimpleDateFormat ( \"yyyy-MM-dd\" ) . parse ( date ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( ParseException e ) {\n        return false ;\n      }\n    }\n    ",
        "public static boolean validDate ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] date_info = date . split ( \"-\" ) ;\n    if ( date_info . length > 3 ) return false ;\n    int month = Integer . parseInt ( date_info [ 0 ] ) ;\n    int day = Integer . parseInt ( date_info [ 1 ] ) ;\n    int year = Integer . parseInt ( date_info [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] month_check1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < month_check1 . length ;\n      i ++ ) {\n        if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] month_check2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < month_check2 . length ;\n        i ++ ) {\n          if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }\n    "
      ],
      "mid_translation": [
        "bool valid_date ( string date ) {\n  stringstream ss ;\n  ss << date ;\n  vector < string > date_info = ss . str ( ) . split ( \"-\" ) ;\n  if ( date_info . size ( ) > 3 ) return false ;\n  int month = atoi ( date_info [ 0 ] . c_str ( ) ) ;\n  int day = atoi ( date_info [ 1 ] . c_str ( ) ) ;\n  int year = atoi ( date_info [ 2 ] . c_str ( ) ) ;\n  if ( month < 1 || month > 12 ) return false ;\n  vector < int > month_check1 = {\n    1 , 3 , 5 , 7 , 8 , 10 , 12 }\n    ;\n    for ( int i = 0 ;\n    i < month_check1 . size ( ) ;\n    i ++ ) {\n      if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n    }\n    vector < int > month_check2 = {\n      4 , 6 , 9 , 11 }\n      ;\n      for ( int i = 0 ;\n      i < month_check2 . size ( ) ;\n      i ++ ) {\n        if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n      }\n      if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n      return true ;\n    }\n    ",
        "bool valid_date ( string date ) {\n  stringstream ss ;\n  ss << date ;\n  vector < string > date_info = ss . str ( ) . split ( \"-\" ) ;\n  if ( date_info . size ( ) > 3 ) return false ;\n  int month = atoi ( date_info [ 0 ] . c_str ( ) ) ;\n  int day = atoi ( date_info [ 1 ] . c_str ( ) ) ;\n  int year = atoi ( date_info [ 2 ] . c_str ( ) ) ;\n  if ( month < 1 || month > 12 ) return false ;\n  int month_check1 [ ] = {\n    1 , 3 , 5 , 7 , 8 , 10 , 12 }\n    ;\n    for ( int i = 0 ;\n    i < sizeof ( month_check1 ) / sizeof ( month_check1 [ 0 ] ) ;\n    i ++ ) {\n      if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n    }\n    int month_check2 [ ] = {\n      4 , 6 , 9 , 11 }\n      ;\n      for ( int i = 0 ;\n      i < sizeof ( month_check2 ) / sizeof ( month_check2 [ 0 ] ) ;\n      i ++ ) {\n        if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n      }\n      if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n      return true ;\n    }\n    ",
        "bool valid_date ( string date ) {\n  stringstream ss ;\n  ss << date ;\n  vector < string > date_info = ss . str ( ) . split ( \"-\" ) ;\n  if ( date_info . size ( ) > 3 ) return false ;\n  int month = atoi ( date_info [ 0 ] . c_str ( ) ) ;\n  int day = atoi ( date_info [ 1 ] . c_str ( ) ) ;\n  int year = atoi ( date_info [ 2 ] . c_str ( ) ) ;\n  if ( month < 1 || month > 12 ) return false ;\n  int month_check1 [ ] = {\n    1 , 3 , 5 , 7 , 8 , 10 , 12 }\n    ;\n    for ( int i = 0 ;\n    i < month_check1 . size ( ) ;\n    i ++ ) {\n      if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n    }\n    int month_check2 [ ] = {\n      4 , 6 , 9 , 11 }\n      ;\n      for ( int i = 0 ;\n      i < month_check2 . size ( ) ;\n      i ++ ) {\n        if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n      }\n      if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n      return true ;\n    }\n    ",
        "bool valid_date ( string date ) {\n  stringstream ss ;\n  ss << date ;\n  vector < string > date_info ;\n  ss >> date_info ;\n  if ( date_info . size ( ) > 3 ) return false ;\n  int month = atoi ( date_info [ 0 ] . c_str ( ) ) ;\n  int day = atoi ( date_info [ 1 ] . c_str ( ) ) ;\n  int year = atoi ( date_info [ 2 ] . c_str ( ) ) ;\n  if ( month < 1 || month > 12 ) return false ;\n  vector < int > month_check1 = {\n    1 , 3 , 5 , 7 , 8 , 10 , 12 }\n    ;\n    for ( int i = 0 ;\n    i < month_check1 . size ( ) ;\n    i ++ ) {\n      if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n    }\n    vector < int > month_check2 = {\n      4 , 6 , 9 , 11 }\n      ;\n      for ( int i = 0 ;\n      i < month_check2 . size ( ) ;\n      i ++ ) {\n        if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n      }\n      if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n      return true ;\n    }\n    ",
        "bool valid_date ( string date ) {\n  stringstream date ;\n  date << date ;\n  vector < string > date_info ;\n  date >> date_info ;\n  if ( date_info . size ( ) > 3 ) return false ;\n  int month = atoi ( date_info [ 0 ] . c_str ( ) ) ;\n  int day = atoi ( date_info [ 1 ] . c_str ( ) ) ;\n  int year = atoi ( date_info [ 2 ] . c_str ( ) ) ;\n  if ( month < 1 || month > 12 ) return false ;\n  vector < int > month_check1 = {\n    1 , 3 , 5 , 7 , 8 , 10 , 12 }\n    ;\n    for ( int i = 0 ;\n    i < month_check1 . size ( ) ;\n    i ++ ) {\n      if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n    }\n    vector < int > month_check2 = {\n      4 , 6 , 9 , 11 }\n      ;\n      for ( int i = 0 ;\n      i < month_check2 . size ( ) ;\n      i ++ ) {\n        if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n      }\n      if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n      return true ;\n    }\n    "
      ],
      "output": [
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new SimpleDateFormat ( \"yyyy-MM-dd\" ) . parse ( date ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( ParseException e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = new int [ ] {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = new int [ ] {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = new int [ ] {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = new int [ ] {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] date_info = date . split ( \"-\" ) ;\n    if ( date_info . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( date_info [ 0 ] ) ;\n    int day = Integer . parseInt ( date_info [ 1 ] ) ;\n    int year = Integer . parseInt ( date_info [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] month_check1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < month_check1 . length ;\n      i ++ ) {\n        if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] month_check2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < month_check2 . length ;\n        i ++ ) {\n          if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new SimpleDateFormat ( \"yyyy-MM-dd\" ) . parse ( date ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) return false ;\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( ParseException e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new SimpleDateFormat ( \"yyyy-MM-dd\" ) . parse ( date ) ;\n    String [ ] dateInfo = date . split ( \"-\" ) ;\n    if ( dateInfo . length > 3 ) {\n      return false ;\n    }\n    int month = Integer . parseInt ( dateInfo [ 0 ] ) ;\n    int day = Integer . parseInt ( dateInfo [ 1 ] ) ;\n    int year = Integer . parseInt ( dateInfo [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) {\n      return false ;\n    }\n    int [ ] monthCheck1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < monthCheck1 . length ;\n      i ++ ) {\n        if ( month != monthCheck1 [ i ] && ! ( day < 1 || day > 31 ) ) {\n          return false ;\n        }\n      }\n      int [ ] monthCheck2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < monthCheck2 . length ;\n        i ++ ) {\n          if ( month == monthCheck2 [ i ] && ( day < 1 || day > 30 ) ) {\n            return false ;\n          }\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) {\n          return false ;\n        }\n        return true ;\n      }\n      catch ( ParseException e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date ( String date ) {\n  try {\n    Date date = new Date ( ) ;\n    String [ ] date_info = date . split ( \"-\" ) ;\n    if ( date_info . length > 3 ) return false ;\n    int month = Integer . parseInt ( date_info [ 0 ] ) ;\n    int day = Integer . parseInt ( date_info [ 1 ] ) ;\n    int year = Integer . parseInt ( date_info [ 2 ] ) ;\n    if ( month < 1 || month > 12 ) return false ;\n    int [ ] month_check1 = {\n      1 , 3 , 5 , 7 , 8 , 10 , 12 }\n      ;\n      for ( int i = 0 ;\n      i < month_check1 . length ;\n      i ++ ) {\n        if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false ;\n      }\n      int [ ] month_check2 = {\n        4 , 6 , 9 , 11 }\n        ;\n        for ( int i = 0 ;\n        i < month_check2 . length ;\n        i ++ ) {\n          if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false ;\n        }\n        if ( month == 2 && ( day < 1 || day > 29 ) ) return false ;\n        return true ;\n      }\n      catch ( Exception e ) {\n        return false ;\n      }\n    }",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') \n            count += 1;\n    }\n    return count;\n}",
      "target": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n            count += 1;\n    }\n    return count;\n}",
      "function range": "11,5-19,5",
      "raw_output": [
        "public static int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "public static int countUpper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUppercase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "static int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "public static int countUpper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUppercase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "public static int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "public static final int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "public static int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "public static final int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "public static int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpperCase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "public static int countUpper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUppercase ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}\n",
        "public static int countUpper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n"
      ],
      "mid_translation": [
        "int count_upper ( string s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . size ( ) ;\n  i += 2 ) {\n    char c = s [ i ] ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "int count_upper ( string s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s [ i ] ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "public : int count_upper ( string s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s [ i ] ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "public : int count_upper ( string s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . size ( ) ;\n  i += 2 ) {\n    char c = s [ i ] ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n",
        "int count_upper ( string s ) {\n  int count = 0 ;\n  for ( string :: size_type i = 0 ;\n  i < s . size ( ) ;\n  i += 2 ) {\n    char c = s [ i ] ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ;\n  }\n  return count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper ( String s ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i += 2 ) {\n    char c = s . charAt ( i ) ;\n    if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) {\n      count += 1 ;\n    }\n  }\n  return count ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) num *= 1; \n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
      "target": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) num *= -1; \n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
      "function range": "6,5-20,5",
      "raw_output": [
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toHexString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNumbers ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= - 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toHexString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNumbers ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= - 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toHexString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNumbers ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= - 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toHexString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNumbers ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= - 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toHexString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNumbers ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= - 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n",
        "public static int countNums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toBinaryString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}\n"
      ],
      "mid_translation": [
        "public : int count_nums ( vector < int > arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    bool neg = num < 0 ;\n    if ( neg ) {\n      num *= 1 ;\n    }\n    string num_string = to_string ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < num_string . size ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) {\n        sum -= num_string [ i ] - '0' ;\n      }\n      else {\n        sum += num_string [ i ] - '0' ;\n      }\n    }\n    if ( sum > 0 ) {\n      count ++ ;\n    }\n  }\n  return count ;\n}\n",
        "public : int count_nums ( vector < int > & arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    bool neg = num < 0 ;\n    if ( neg ) {\n      num *= 1 ;\n    }\n    string num_string = to_string ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < num_string . size ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) {\n        sum -= num_string [ i ] - '0' ;\n      }\n      else {\n        sum += num_string [ i ] - '0' ;\n      }\n    }\n    if ( sum > 0 ) {\n      count ++ ;\n    }\n  }\n  return count ;\n}\n",
        "public : int count_nums ( vector < int > arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    bool neg = num < 0 ;\n    if ( neg ) {\n      num *= 1 ;\n    }\n    string num_string = to_string ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < num_string . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) {\n        sum -= num_string [ i ] - '0' ;\n      }\n      else {\n        sum += num_string [ i ] - '0' ;\n      }\n    }\n    if ( sum > 0 ) {\n      count ++ ;\n    }\n  }\n  return count ;\n}\n",
        "public : int count_nums ( vector < int > & arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    bool neg = num < 0 ;\n    if ( neg ) {\n      num *= 1 ;\n    }\n    string num_string = to_string ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < num_string . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) {\n        sum -= num_string [ i ] - '0' ;\n      }\n      else {\n        sum += num_string [ i ] - '0' ;\n      }\n    }\n    if ( sum > 0 ) {\n      count ++ ;\n    }\n  }\n  return count ;\n}\n",
        "public : int count_nums ( vector < int > & arr ) {\n  int count = 0 ;\n  for ( auto num : arr ) {\n    bool neg = num < 0 ;\n    if ( neg ) {\n      num *= 1 ;\n    }\n    string num_string = to_string ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < num_string . size ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) {\n        sum -= num_string [ i ] - '0' ;\n      }\n      else {\n        sum += num_string [ i ] - '0' ;\n      }\n    }\n    if ( sum > 0 ) {\n      count ++ ;\n    }\n  }\n  return count ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toHexString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= - 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toHexString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= - 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toHexString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= - 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toHexString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= - 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toHexString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= - 1 ;\n    String numString = Integer . toString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int count_nums ( int [ ] arr ) {\n  int count = 0 ;\n  for ( int num : arr ) {\n    boolean neg = num < 0 ;\n    if ( neg ) num *= 1 ;\n    String numString = Integer . toBinaryString ( num ) ;\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < numString . length ( ) ;\n    i ++ ) {\n      if ( ( i == 0 ) && neg ) sum -= numString . charAt ( i ) - '0' ;\n      else sum += numString . charAt ( i ) - '0' ;\n    }\n    if ( sum > 0 ) count ++ ;\n  }\n  return count ;\n}",
          "correctness": "uncompilable with tests"
        }
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 0) { \n                n--; \n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
      "target": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) { \n                n++; \n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
      "function range": "19,5-32,5",
      "raw_output": [
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > oddCount ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > oddCount ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( String [ ] lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > oddCount ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( String [ ] lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > oddCount ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > oddCount ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > oddCount ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > oddCount ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > oddCount ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > oddCount ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > oddCount ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > oddCount ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < string > odd_count ( vector < string > lst ) {\n  vector < string > result ;\n  for ( string s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s [ i ] - '0' ;\n      if ( digit % 2 == 0 ) n -- ;\n    }\n    result . push_back ( \"the number of odd elements \" + to_string ( n ) + \"n the str\" + to_string ( n ) + \"ng \" + to_string ( n ) + \" of the \" + to_string ( n ) + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "vector < string > odd_count ( vector < string > lst ) {\n  vector < string > result ;\n  for ( string s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . size ( ) ;\n    i ++ ) {\n      int digit = s [ i ] - '0' ;\n      if ( digit % 2 == 0 ) n -- ;\n    }\n    result . push_back ( \"the number of odd elements \" + to_string ( n ) + \"n the str\" + to_string ( n ) + \"ng \" + to_string ( n ) + \" of the \" + to_string ( n ) + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "vector < string > odd_count ( vector < string > lst ) {\n  vector < string > result ;\n  for ( auto s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . size ( ) ;\n    i ++ ) {\n      int digit = s [ i ] - '0' ;\n      if ( digit % 2 == 0 ) n -- ;\n    }\n    result . push_back ( \"the number of odd elements \" + to_string ( n ) + \"n the str\" + to_string ( n ) + \"ng \" + to_string ( n ) + \" of the \" + to_string ( n ) + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "vector < string > odd_count ( vector < string > & lst ) {\n  vector < string > result ;\n  for ( string s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s [ i ] - '0' ;\n      if ( digit % 2 == 0 ) n -- ;\n    }\n    result . push_back ( \"the number of odd elements \" + to_string ( n ) + \"n the str\" + to_string ( n ) + \"ng \" + to_string ( n ) + \" of the \" + to_string ( n ) + \"nput.\" ) ;\n  }\n  return result ;\n}\n",
        "vector < string > odd_count ( vector < string > & lst ) {\n  vector < string > result ;\n  for ( string s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . size ( ) ;\n    i ++ ) {\n      int digit = s [ i ] - '0' ;\n      if ( digit % 2 == 0 ) n -- ;\n    }\n    result . push_back ( \"the number of odd elements \" + to_string ( n ) + \"n the str\" + to_string ( n ) + \"ng \" + to_string ( n ) + \" of the \" + to_string ( n ) + \"nput.\" ) ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > odd_count ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > odd_count ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > odd_count ( String [ ] lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > odd_count ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > odd_count ( String [ ] lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > odd_count ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > odd_count ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > odd_count ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > odd_count ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > odd_count ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > odd_count ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > odd_count ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > odd_count ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String s : lst ) {\n    int n = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      int digit = s . charAt ( i ) - '0' ;\n      if ( digit % 2 == 0 ) {\n        n -- ;\n      }\n    }\n    result . add ( \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num; \n        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
      "target": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += -num; \n        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
      "function range": "14,5-32,5",
      "raw_output": [
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) {\n      s = 0 ;\n    }\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubArraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( Long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) {\n      s = 0 ;\n    }\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( Long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( int [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( int num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) {\n      s = 0 ;\n    }\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubArraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( Long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) {\n      s = 0 ;\n    }\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( Long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubArraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) {\n      s = 0 ;\n    }\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long max_sum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    max_sum = Math . max ( s , max_sum ) ;\n  }\n  if ( max_sum == 0 ) {\n    max_sum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      max_sum = Math . max ( max_sum , - nums [ i ] ) ;\n    }\n  }\n  long min_sum = - max_sum ;\n  return min_sum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public static long minSubarraySum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( Long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}\n"
      ],
      "mid_translation": [
        "public : long long min_subarray_sum ( vector < long long > & nums ) {\n  long long max_sum = 0 ;\n  long long s = 0 ;\n  for ( auto num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    max_sum = max ( s , max_sum ) ;\n  }\n  if ( max_sum == 0 ) {\n    max_sum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . size ( ) ;\n    i ++ ) max_sum = max ( max_sum , - nums [ i ] ) ;\n  }\n  long long min_sum = - max_sum ;\n  return min_sum ;\n}\n",
        "public : long long minSubarraySum ( vector < long long > & nums ) {\n  long long maxSum = 0 ;\n  long long s = 0 ;\n  for ( auto num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . size ( ) ;\n    i ++ ) maxSum = max ( maxSum , - nums [ i ] ) ;\n  }\n  long long minSum = - maxSum ;\n  return minSum ;\n}\n",
        "public : long long min_subarray_sum ( vector < long long > & nums ) {\n  long long max_sum = 0 ;\n  long long s = 0 ;\n  for ( long long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    max_sum = max ( s , max_sum ) ;\n  }\n  if ( max_sum == 0 ) {\n    max_sum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . size ( ) ;\n    i ++ ) max_sum = max ( max_sum , - nums [ i ] ) ;\n  }\n  long long min_sum = - max_sum ;\n  return min_sum ;\n}\n",
        "public : long min_subarray_sum ( vector < long > & nums ) {\n  long max_sum = 0 ;\n  long s = 0 ;\n  for ( auto num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    max_sum = max ( s , max_sum ) ;\n  }\n  if ( max_sum == 0 ) {\n    max_sum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . size ( ) ;\n    i ++ ) max_sum = max ( max_sum , - nums [ i ] ) ;\n  }\n  long min_sum = - max_sum ;\n  return min_sum ;\n}\n",
        "public : long long minSubarraySum ( vector < long long > & nums ) {\n  long long max_sum = 0 ;\n  long long s = 0 ;\n  for ( auto num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    max_sum = max ( s , max_sum ) ;\n  }\n  if ( max_sum == 0 ) {\n    max_sum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . size ( ) ;\n    i ++ ) max_sum = max ( max_sum , - nums [ i ] ) ;\n  }\n  long long min_sum = - max_sum ;\n  return min_sum ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) {\n      s = 0 ;\n    }\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( Long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) {\n      s = 0 ;\n    }\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( Long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( int [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( int num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) {\n      s = 0 ;\n    }\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( Long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) {\n      s = 0 ;\n    }\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( Long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) {\n      s = 0 ;\n    }\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long max_sum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    max_sum = Math . max ( s , max_sum ) ;\n  }\n  if ( max_sum == 0 ) {\n    max_sum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      max_sum = Math . max ( max_sum , - nums [ i ] ) ;\n    }\n  }\n  long min_sum = - max_sum ;\n  return min_sum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static long min_subarray_sum ( long [ ] nums ) {\n  long maxSum = 0 ;\n  long s = 0 ;\n  for ( Long num : nums ) {\n    s += num ;\n    if ( s < 0 ) s = 0 ;\n    maxSum = Math . max ( s , maxSum ) ;\n  }\n  if ( maxSum == 0 ) {\n    maxSum = - nums [ 0 ] ;\n    for ( int i = 1 ;\n    i < nums . length ;\n    i ++ ) {\n      maxSum = Math . max ( maxSum , - nums [ i ] ) ;\n    }\n  }\n  long minSum = - maxSum ;\n  return minSum ;\n}",
          "correctness": "uncompilable with tests"
        }
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1); \n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "target": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(0); \n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "function range": "7,5-29,5",
      "raw_output": [
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return true ;\n  }\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex + i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return true ;\n  }\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex + i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return true ;\n  }\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex + i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return true ;\n  }\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex + i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return true ;\n  }\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean moveOneBall ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex + i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}\n"
      ],
      "mid_translation": [
        "bool move_one_ball ( vector < int > & arr ) {\n  if ( arr . size ( ) == 0 ) return true ;\n  vector < int > sorted_arr ( arr ) ;\n  sort ( sorted_arr . begin ( ) , sorted_arr . end ( ) ) ;\n  int min_value = sorted_arr [ - 1 ] ;\n  int min_index = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr [ i ] == min_value ) min_index = i ;\n  }\n  vector < int > arr_after_move ;\n  for ( int i = min_index ;\n  i < arr . size ( ) ;\n  i ++ ) arr_after_move . push_back ( arr [ i ] ) ;\n  for ( int i = 0 ;\n  i < min_index ;\n  i ++ ) arr_after_move . push_back ( arr [ i ] ) ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr_after_move [ i ] != sorted_arr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "bool move_one_ball ( vector < int > arr ) {\n  if ( arr . size ( ) == 0 ) return true ;\n  vector < int > sorted_arr ( arr ) ;\n  sort ( sorted_arr . begin ( ) , sorted_arr . end ( ) ) ;\n  int min_value = sorted_arr [ - 1 ] ;\n  int min_index = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr [ i ] == min_value ) min_index = i ;\n  }\n  vector < int > arr_after_move ;\n  for ( int i = min_index ;\n  i < arr . size ( ) ;\n  i ++ ) arr_after_move . push_back ( arr [ i ] ) ;\n  for ( int i = 0 ;\n  i < min_index ;\n  i ++ ) arr_after_move . push_back ( arr [ i ] ) ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr_after_move [ i ] != sorted_arr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "bool move_one_ball ( vector < int > & arr ) {\n  if ( arr . size ( ) == 0 ) return true ;\n  vector < int > sorted_arr ( arr ) ;\n  sort ( sorted_arr . begin ( ) , sorted_arr . end ( ) ) ;\n  int min_value = sorted_arr [ sorted_arr . size ( ) - 1 ] ;\n  int min_index = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr [ i ] == min_value ) min_index = i ;\n  }\n  vector < int > arr_after_move ;\n  for ( int i = min_index ;\n  i < arr . size ( ) ;\n  i ++ ) arr_after_move . push_back ( arr [ i ] ) ;\n  for ( int i = 0 ;\n  i < min_index ;\n  i ++ ) arr_after_move . push_back ( arr [ i ] ) ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr_after_move [ i ] != sorted_arr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "bool move_one_ball ( vector < int > arr ) {\n  if ( arr . size ( ) == 0 ) return true ;\n  vector < int > sorted_arr ( arr ) ;\n  sort ( sorted_arr . begin ( ) , sorted_arr . end ( ) ) ;\n  int min_value = sorted_arr [ sorted_arr . size ( ) - 1 ] ;\n  int min_index = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr [ i ] == min_value ) min_index = i ;\n  }\n  vector < int > arr_after_move ;\n  for ( int i = min_index ;\n  i < arr . size ( ) ;\n  i ++ ) arr_after_move . push_back ( arr [ i ] ) ;\n  for ( int i = 0 ;\n  i < min_index ;\n  i ++ ) arr_after_move . push_back ( arr [ i ] ) ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr_after_move [ i ] != sorted_arr [ i ] ) return false ;\n  }\n  return true ;\n}\n",
        "bool move_one_ball ( vector < int > & arr ) {\n  if ( arr . size ( ) == 0 ) return true ;\n  vector < int > sorted_arr ( arr ) ;\n  sort ( sorted_arr . begin ( ) , sorted_arr . end ( ) ) ;\n  int min_value = sorted_arr [ - 1 ] ;\n  int min_index = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr [ i ] == min_value ) min_index = i ;\n  }\n  vector < int > arr_after_move ;\n  for ( int i = min_index ;\n  i < arr . size ( ) ;\n  i ++ ) arr_after_move . push_back ( arr [ i ] ) ;\n  for ( int i = 0 ;\n  i < min_index ;\n  i ++ ) arr_after_move . push_back ( arr [ i ] ) ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) if ( arr_after_move [ i ] != sorted_arr [ i ] ) return false ;\n  return true ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return true ;\n  }\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex + i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return true ;\n  }\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex + i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return true ;\n  }\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex + i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return true ;\n  }\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ sortedArr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex + i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return true ;\n  }\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) {\n      minIndex = i ;\n    }\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = minIndex ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball ( int [ ] arr ) {\n  if ( arr . length == 0 ) return true ;\n  int [ ] sortedArr = new int [ arr . length ] ;\n  Arrays . sort ( sortedArr ) ;\n  int minValue = sortedArr [ arr . length - 1 ] ;\n  int minIndex = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == minValue ) minIndex = i ;\n  }\n  int [ ] arrAfterMove = new int [ minIndex ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrAfterMove [ i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < minIndex ;\n  i ++ ) {\n    arrAfterMove [ minIndex + i ] = arr [ i ] ;\n  }\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arrAfterMove [ i ] != sortedArr [ i ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) { \n            result -= arr.get(i); \n        }\n    }\n    return result;\n}",
      "target": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() <= 2) { \n            result += arr.get(i); \n        }\n    }\n    return result;\n}",
      "function range": "21,5-29,5",
      "raw_output": [
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr [ i ] ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( String . valueOf ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr [ i ] ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( String . valueOf ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . bitCount ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . bitCount ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . bitCount ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . numberOfLeadingZeros ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . numberOfTrailingZeros ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . bitCount ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . numberOfLeadingZeros ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . numberOfTrailingZeros ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . bitCount ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . numberOfElements ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr [ i ] ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int addElements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . toString ( arr [ i ] ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] addElements ( int [ ] arr , int k ) {\n  int [ ] result = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result [ i ] -= arr [ i ] ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : int add_elements ( vector < int > & arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( to_string ( arr [ i ] ) . size ( ) >= 2 ) result -= arr [ i ] ;\n  }\n  return result ;\n}\n",
        "int add_elements ( vector < int > & arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( to_string ( arr [ i ] ) . size ( ) >= 2 ) result -= arr [ i ] ;\n  }\n  return result ;\n}\n",
        "int add_elements ( vector < int > & arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( size_t ( arr [ i ] ) >= 2 ) result -= arr [ i ] ;\n  }\n  return result ;\n}\n",
        "int add_elements ( vector < int > & arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( int ( arr [ i ] ) >= 2 ) result -= arr [ i ] ;\n  }\n  return result ;\n}\n",
        "public : int add_elements ( vector < int > arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( to_string ( arr [ i ] ) . size ( ) >= 2 ) result -= arr [ i ] ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr [ i ] ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( String . valueOf ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr [ i ] ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( String . valueOf ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . bitCount ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . bitCount ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . bitCount ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . numberOfLeadingZeros ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . numberOfTrailingZeros ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . bitCount ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . numberOfLeadingZeros ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . numberOfTrailingZeros ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . bitCount ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . numberOfElements ( arr [ i ] ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr [ i ] ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Arrays . toString ( arr ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_elements ( int [ ] arr , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . toString ( arr [ i ] ) . length >= 2 ) {\n      result -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] add_elements ( int [ ] arr , int k ) {\n  int [ ] result = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( Integer . toString ( arr [ i ] ) . length ( ) >= 2 ) {\n      result [ i ] -= arr [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        }
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    Collections.reverse(opening_brackets); \n    int cnt = 0, i = 0, l = opening_brackets.size(); \n    for(int idx : closing_brackets) { \n        if(i < l || idx >= opening_brackets.get(i)) { \n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
      "target": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    Collections.reverse(closing_brackets); \n    int cnt = 0, i = 0, l = closing_brackets.size(); \n    for(int idx : opening_brackets) { \n        if(i < l && idx < closing_brackets.get(i)) { \n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
      "function range": "21,5-37,5",
      "raw_output": [
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  ArrayList < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  List < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  List < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) {\n      openingBrackets [ i ] = i ;\n    }\n    else {\n      closing_brackets [ i ] = i ;\n    }\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = 0 ;\n    else closing_brackets [ i ] = 0 ;\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  ArrayList < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  List < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  List < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) {\n      openingBrackets [ i ] = i ;\n    }\n    else {\n      closing_brackets [ i ] = i ;\n    }\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = 0 ;\n    else closing_brackets [ i ] = 0 ;\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  ArrayList < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  List < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  List < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) {\n      openingBrackets [ i ] = i ;\n    }\n    else {\n      closing_brackets [ i ] = i ;\n    }\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] ++ ;\n    else closing_brackets [ i ] ++ ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  ArrayList < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  List < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  List < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] ++ ;\n    else closing_brackets [ i ] ++ ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) {\n      openingBrackets [ i ] = i ;\n    }\n    else {\n      closing_brackets [ i ] = i ;\n    }\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  ArrayList < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) {\n      openingBrackets [ i ] = i ;\n    }\n    else {\n      closing_brackets [ i ] = i ;\n    }\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "public static boolean isNested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] ++ ;\n    else closing_brackets [ i ] ++ ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n"
      ],
      "mid_translation": [
        "bool is_nested ( string brackets ) {\n  vector < int > opening_brackets ;\n  vector < int > closing_brackets ;\n  for ( int i = 0 ;\n  i < brackets . size ( ) ;\n  i ++ ) {\n    if ( brackets [ i ] == '[' ) {\n      opening_brackets . push_back ( i ) ;\n    }\n    else {\n      closing_brackets . push_back ( i ) ;\n    }\n  }\n  sort ( opening_brackets . begin ( ) , opening_brackets . end ( ) ) ;\n  int cnt = 0 , i = 0 , l = opening_brackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= opening_brackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "bool is_nested ( string brackets ) {\n  vector < int > opening_brackets ;\n  vector < int > closing_brackets ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets [ i ] == '[' ) {\n      opening_brackets . push_back ( i ) ;\n    }\n    else {\n      closing_brackets . push_back ( i ) ;\n    }\n  }\n  sort ( opening_brackets . begin ( ) , opening_brackets . end ( ) ) ;\n  int cnt = 0 , i = 0 , l = opening_brackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= opening_brackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "bool is_nested ( string brackets ) {\n  vector < int > opening_brackets ;\n  vector < int > closing_brackets ;\n  for ( int i = 0 ;\n  i < brackets . size ( ) ;\n  i ++ ) {\n    if ( brackets [ i ] == '[' ) {\n      opening_brackets . push_back ( i ) ;\n    }\n    else {\n      closing_brackets . push_back ( i ) ;\n    }\n  }\n  reverse ( opening_brackets . begin ( ) , opening_brackets . end ( ) ) ;\n  int cnt = 0 , i = 0 , l = opening_brackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= opening_brackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "bool is_nested ( string brackets ) {\n  vector < int > opening_brackets ;\n  vector < int > closing_brackets ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets [ i ] == '[' ) {\n      opening_brackets . push_back ( i ) ;\n    }\n    else {\n      closing_brackets . push_back ( i ) ;\n    }\n  }\n  reverse ( opening_brackets . begin ( ) , opening_brackets . end ( ) ) ;\n  int cnt = 0 , i = 0 , l = opening_brackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= opening_brackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n",
        "bool is_nested ( string brackets ) {\n  vector < int > opening_brackets ;\n  vector < int > closing_brackets ;\n  for ( int i = 0 ;\n  i < brackets . size ( ) ;\n  i ++ ) {\n    if ( brackets [ i ] == '[' ) {\n      opening_brackets . push_back ( i ) ;\n    }\n    else {\n      closing_brackets . push_back ( i ) ;\n    }\n  }\n  std :: reverse ( opening_brackets . begin ( ) , opening_brackets . end ( ) ) ;\n  int cnt = 0 , i = 0 , l = opening_brackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= opening_brackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  ArrayList < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  List < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  List < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) {\n      openingBrackets [ i ] = i ;\n    }\n    else {\n      closing_brackets [ i ] = i ;\n    }\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = 0 ;\n    else closing_brackets [ i ] = 0 ;\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  ArrayList < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  List < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  List < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) {\n      openingBrackets [ i ] = i ;\n    }\n    else {\n      closing_brackets [ i ] = i ;\n    }\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = 0 ;\n    else closing_brackets [ i ] = 0 ;\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  ArrayList < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  List < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  List < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) {\n      openingBrackets [ i ] = i ;\n    }\n    else {\n      closing_brackets [ i ] = i ;\n    }\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] ++ ;\n    else closing_brackets [ i ] ++ ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  ArrayList < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  List < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  List < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] ++ ;\n    else closing_brackets [ i ] ++ ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) {\n      openingBrackets [ i ] = i ;\n    }\n    else {\n      closing_brackets [ i ] = i ;\n    }\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  ArrayList < Integer > openingBrackets = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > closing_brackets = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets . add ( i ) ;\n    else closing_brackets . add ( i ) ;\n  }\n  Collections . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . size ( ) ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets . get ( i ) ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] = i ;\n    else closing_brackets [ i ] = i ;\n  }\n  Arrays . sort ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) {\n      openingBrackets [ i ] = i ;\n    }\n    else {\n      closing_brackets [ i ] = i ;\n    }\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested ( String brackets ) {\n  int [ ] openingBrackets = new int [ brackets . length ( ) ] ;\n  int [ ] closing_brackets = new int [ brackets . length ( ) ] ;\n  for ( int i = 0 ;\n  i < brackets . length ( ) ;\n  i ++ ) {\n    if ( brackets . charAt ( i ) == '[' ) openingBrackets [ i ] ++ ;\n    else closing_brackets [ i ] ++ ;\n  }\n  Arrays . reverse ( openingBrackets ) ;\n  int cnt = 0 , i = 0 , l = openingBrackets . length ;\n  for ( int idx : closing_brackets ) {\n    if ( i < l || idx >= openingBrackets [ i ] ) {\n      i ++ ;\n      cnt ++ ;\n    }\n  }\n  return cnt >= 2 ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1); \n    }\n}",
      "target": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift) + s.substring(0, s.length() - shift); \n    }\n}",
      "function range": "12,5-23,5",
      "raw_output": [
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      sb . append ( s . charAt ( i ) ) ;\n    }\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    String result = \"\" ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) result += s . charAt ( i ) ;\n    return result ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      sb . append ( s . charAt ( i ) ) ;\n    }\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder builder = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) builder . append ( s . charAt ( i ) ) ;\n    return builder . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      sb . append ( s . charAt ( i ) ) ;\n    }\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder builder = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) builder . append ( s . charAt ( i ) ) ;\n    return builder . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}\n",
        "public static String circularShift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      sb . append ( s . charAt ( i ) ) ;\n    }\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n"
      ],
      "mid_translation": [
        "string circular_shift ( int x , int shift ) {\n  string s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    string result ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      result += s [ i ] ;\n    }\n    return result ;\n  }\n  else {\n    return s . substr ( s . length ( ) - shift + 1 ) + s . substr ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "string circular_shift ( int x , int shift ) {\n  string s = x + \"\" ;\n  if ( shift > s . size ( ) ) {\n    string result ;\n    for ( int i = s . size ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      result += s [ i ] ;\n    }\n    return result ;\n  }\n  else {\n    return s . substr ( s . size ( ) - shift + 1 ) + s . substr ( 0 , s . size ( ) - shift - 1 ) ;\n  }\n}\n",
        "string circular_shift ( int x , int shift ) {\n  string s = x + \"\" ;\n  if ( shift > s . size ( ) ) {\n    ostringstream oss ;\n    for ( int i = s . size ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      oss << s [ i ] ;\n    }\n    return oss . str ( ) ;\n  }\n  else {\n    return s . substr ( s . size ( ) - shift + 1 ) + s . substr ( 0 , s . size ( ) - shift - 1 ) ;\n  }\n}\n",
        "string circular_shift ( int x , int shift ) {\n  string s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    ostringstream oss ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      oss << s [ i ] ;\n    }\n    return oss . str ( ) ;\n  }\n  else {\n    return s . substr ( s . length ( ) - shift + 1 ) + s . substr ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}\n",
        "string circular_shift ( int x , int shift ) {\n  string s = x + \"\" ;\n  if ( shift > s . size ( ) ) {\n    string result ;\n    for ( int i = s . size ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      result . push_back ( s [ i ] ) ;\n    }\n    return result ;\n  }\n  else {\n    return s . substr ( s . size ( ) - shift + 1 ) + s . substr ( 0 , s . size ( ) - shift - 1 ) ;\n  }\n}\n"
      ],
      "output": [
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      sb . append ( s . charAt ( i ) ) ;\n    }\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    String result = \"\" ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) result += s . charAt ( i ) ;\n    return result ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      sb . append ( s . charAt ( i ) ) ;\n    }\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder builder = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) builder . append ( s . charAt ( i ) ) ;\n    return builder . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      sb . append ( s . charAt ( i ) ) ;\n    }\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder builder = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) builder . append ( s . charAt ( i ) ) ;\n    return builder . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuffer sb = new StringBuffer ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n    return sb . toString ( ) ;\n  }\n  else return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift ( int x , int shift ) {\n  String s = x + \"\" ;\n  if ( shift > s . length ( ) ) {\n    StringBuilder sb = new StringBuilder ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      sb . append ( s . charAt ( i ) ) ;\n    }\n    return sb . toString ( ) ;\n  }\n  else {\n    return s . substring ( s . length ( ) - shift + 1 ) + s . substring ( 0 , s . length ( ) - shift - 1 ) ;\n  }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str); \n        result -= cnt; \n    }\n    return result;\n}",
      "target": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        try { \n            int cnt = Integer.parseInt(str); \n            result -= cnt;\n        } catch (Exception e) {\n            continue;\n        }\n    }\n    return result;\n}",
      "function range": "15,5-23,5",
      "raw_output": [
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( String i : s . split ( \" \" ) ) {\n    int cnt = Integer . parseInt ( i ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( String line : s . split ( \"\\n\" ) ) {\n    int cnt = Integer . parseInt ( line ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \" \" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \",\" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \"\\\\s+\" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \" \" ) ) {\n    int cnt = Integer . parseInt ( str . trim ( ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \",\" ) ) {\n    int cnt = Integer . parseInt ( str . trim ( ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String [ ] s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s [ i ] ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s [ ] , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s [ i ] ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt ;\n    Scanner sc = new Scanner ( s ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + n ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \" \" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \",\" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public static int fruitDistribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \"\\\\s+\" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "int fruit_distribution ( string s , int n ) {\n  int result = n ;\n  for ( string :: size_type i = 0 ;\n  i < s . size ( ) ;\n  i ++ ) {\n    int cnt ;\n    cin >> cnt ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "public : int fruit_distribution ( string s , int n ) {\n  int result = n ;\n  for ( auto str : s ) {\n    int cnt = atoi ( str . c_str ( ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "int fruit_distribution ( string s , int n ) {\n  int result = n ;\n  for ( string :: size_type i = 0 ;\n  i < s . size ( ) ;\n  i ++ ) {\n    int cnt = atoi ( s [ i ] . c_str ( ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "int fruit_distribution ( string s , int n ) {\n  int result = n ;\n  for ( string :: size_type i = 0 ;\n  i < s . size ( ) ;\n  i ++ ) {\n    int cnt ;\n    scanf ( \"%d\" , & cnt ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n",
        "int fruit_distribution ( string s , int n ) {\n  int result = n ;\n  for ( string :: iterator it = s . begin ( ) ;\n  it != s . end ( ) ;\n  it ++ ) {\n    int cnt = atoi ( it -> c_str ( ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( String i : s . split ( \" \" ) ) {\n    int cnt = Integer . parseInt ( i ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( String line : s . split ( \"\\n\" ) ) {\n    int cnt = Integer . parseInt ( line ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \" \" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \",\" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \"\\\\s+\" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \" \" ) ) {\n    int cnt = Integer . parseInt ( str . trim ( ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \",\" ) ) {\n    int cnt = Integer . parseInt ( str . trim ( ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String [ ] s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s [ i ] ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s [ ] , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s [ i ] ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt ;\n    Scanner sc = new Scanner ( s ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + n ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i , i + 1 ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \" \" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    int cnt = Integer . parseInt ( s . substring ( i ) ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \",\" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution ( String s , int n ) {\n  int result = n ;\n  for ( String str : s . split ( \"\\\\s+\" ) ) {\n    int cnt = Integer . parseInt ( str ) ;\n    result -= cnt ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    int[] frq = new int[max]; \n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1; \n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i; \n    return result;\n}",
      "target": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    int[] frq = new int[max + 1]; \n    for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1; \n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i && frq[i] > 0) result = i; \n    return result;\n}",
      "function range": "13,5-26,5",
      "raw_output": [
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( List < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( int lst [ ] ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( List < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( ArrayList < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}\n",
        "public static int search ( List < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) {\n      result = i ;\n    }\n  }\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}\n",
        "public static int search ( List < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) {\n      result = i ;\n    }\n  }\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( List < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public static int search ( int lst [ ] ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : int search ( vector < int > lst ) {\n  int max = - 1 ;\n  for ( auto i : lst ) {\n    if ( i > max ) {\n      max = i ;\n    }\n  }\n  int result = - 1 ;\n  vector < int > frq ( max , 0 ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . size ( ) ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public : int search ( vector < int > & lst ) {\n  int max = - 1 ;\n  for ( auto i : lst ) {\n    if ( i > max ) {\n      max = i ;\n    }\n  }\n  int result = - 1 ;\n  vector < int > frq ( max , 0 ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . size ( ) ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n",
        "public : int search ( vector < int > & lst ) {\n  int max = - 1 ;\n  for ( auto i : lst ) {\n    if ( i > max ) {\n      max = i ;\n    }\n  }\n  int result = - 1 ;\n  vector < int > frq ( max , 0 ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . size ( ) ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) {\n      result = i ;\n    }\n  }\n  return result ;\n}\n",
        "public : int search ( vector < int > lst ) {\n  int max = - 1 ;\n  for ( auto i : lst ) {\n    if ( i > max ) {\n      max = i ;\n    }\n  }\n  int result = - 1 ;\n  vector < int > frq ( max , 0 ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . size ( ) ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) {\n      result = i ;\n    }\n  }\n  return result ;\n}\n",
        "public : int search ( vector < int > lst ) {\n  int max = - 1 ;\n  for ( auto i : lst ) {\n    if ( i > max ) {\n      max = i ;\n    }\n  }\n  int result = - 1 ;\n  vector < int > frq ( max ) ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . size ( ) ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( List < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int search ( int lst [ ] ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( List < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int search ( ArrayList < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( List < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) {\n      result = i ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( List < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) result = i ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) {\n    if ( frq [ i ] >= i ) {\n      result = i ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( int [ ] lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    frq [ i ] += 1 ;\n  }\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search ( List < Integer > lst ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int [ ] frq = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int search ( int lst [ ] ) {\n  int max = - 1 ;\n  for ( int i : lst ) {\n    if ( i > max ) max = i ;\n  }\n  int result = - 1 ;\n  int frq [ ] = new int [ max ] ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) frq [ i ] += 1 ;\n  for ( int i = 0 ;\n  i < frq . length ;\n  i += 1 ) if ( frq [ i ] >= i ) result = i ;\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\npublic static double triangle_area_2(double a, double b, double c) { \n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
      "target": "\npublic static double triangle_area_2(double a, double b, double c) { \n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
      "function range": "16,5-26,5",
      "raw_output": [
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  System . out . println ( result ) ;\n  return result ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  System . out . println ( result ) ;\n  return result ;\n}\n",
        "public static double triangleArea_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  System . out . println ( result ) ;\n  return result ;\n}\n",
        "public static double triangleArea_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  System . out . println ( result ) ;\n  return result ;\n}\n",
        "static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  System . out . println ( result ) ;\n  return result ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . toString ( ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder builder = new StringBuilder ( ) ;\n  builder . append ( result ) ;\n  return builder . toString ( ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder builder = new StringBuilder ( ) ;\n  builder . append ( result ) ;\n  return builder . toString ( ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  String s = result ;\n  return s ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    return result ;\n  }\n  catch ( Exception e ) {\n    return - 1 ;\n  }\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    return result ;\n  }\n  catch ( Exception e ) {\n    return - 1 ;\n  }\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    return Double . longBitsToDouble ( result ) ;\n  }\n  catch ( NumberFormatException e ) {\n    return - 1 ;\n  }\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    result = Double . valueOf ( result ) ;\n  }\n  catch ( NumberFormatException e ) {\n    return - 1 ;\n  }\n  return result ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  NumberFormat nf = NumberFormat . getInstance ( ) ;\n  nf . setMaximumFractionDigits ( 2 ) ;\n  nf . setMinimumFractionDigits ( 2 ) ;\n  nf . setGroupingUsed ( false ) ;\n  return nf . format ( result ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . toString ( ) . length ( ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . toString ( ) . length ( ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . length ( ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . length ( ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( result ) ;\n  return sb . length ( ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    return result ;\n  }\n  catch ( Exception e ) {\n    return - 1 ;\n  }\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    return result ;\n  }\n  catch ( Exception e ) {\n    return - 1 ;\n  }\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  NumberFormat nf = NumberFormat . getInstance ( ) ;\n  nf . setMaximumFractionDigits ( 2 ) ;\n  nf . setMinimumFractionDigits ( 2 ) ;\n  nf . setGroupingUsed ( false ) ;\n  return nf . format ( result ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  NumberFormat nf = NumberFormat . getInstance ( ) ;\n  nf . setMaximumFractionDigits ( 2 ) ;\n  nf . setMinimumFractionDigits ( 2 ) ;\n  nf . setGroupingUsed ( false ) ;\n  return nf . format ( result ) ;\n}\n",
        "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  NumberFormat nf = NumberFormat . getInstance ( ) ;\n  nf . setMaximumFractionDigits ( 2 ) ;\n  nf . setMinimumFractionDigits ( 2 ) ;\n  nf . setGroupingUsed ( false ) ;\n  nf . setMaximumFractionDigits ( 2 ) ;\n  return nf . format ( result ) ;\n}\n"
      ],
      "mid_translation": [
        "double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = pow ( s , 0.5 ) ;\n  std :: cout << result << std :: endl ;\n  return result ;\n}\n",
        "double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = pow ( s , 0.5 ) ;\n  std :: ostringstream os ;\n  os << result ;\n  return os . str ( ) ;\n}\n",
        "double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = pow ( s , 0.5 ) ;\n  std :: istringstream iss ( result ) ;\n  iss . imbue ( std :: locale :: classic ( ) ) ;\n  iss >> result ;\n  return iss . rdstate ( ) ;\n}\n",
        "double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = pow ( s , 0.5 ) ;\n  std :: ostringstream os ;\n  os << result ;\n  return os . str ( ) . length ( ) ;\n}\n",
        "double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = pow ( s , 0.5 ) ;\n  std :: istringstream iss ( result ) ;\n  iss . imbue ( std :: locale :: classic ( ) ) ;\n  iss >> result ;\n  return iss . rdbuf ( ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  System . out . println ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  System . out . println ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  System . out . println ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  System . out . println ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  System . out . println ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder builder = new StringBuilder ( ) ;\n  builder . append ( result ) ;\n  return builder . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder builder = new StringBuilder ( ) ;\n  builder . append ( result ) ;\n  return builder . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  String s = result ;\n  return s ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    return result ;\n  }\n  catch ( Exception e ) {\n    return - 1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    return result ;\n  }\n  catch ( Exception e ) {\n    return - 1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    return Double . longBitsToDouble ( result ) ;\n  }\n  catch ( NumberFormatException e ) {\n    return - 1 ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    result = Double . valueOf ( result ) ;\n  }\n  catch ( NumberFormatException e ) {\n    return - 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  NumberFormat nf = NumberFormat . getInstance ( ) ;\n  nf . setMaximumFractionDigits ( 2 ) ;\n  nf . setMinimumFractionDigits ( 2 ) ;\n  nf . setGroupingUsed ( false ) ;\n  return nf . format ( result ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . toString ( ) . length ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . toString ( ) . length ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . length ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( result ) ;\n  return sb . length ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  StringBuilder sb = new StringBuilder ( result ) ;\n  return sb . length ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    return result ;\n  }\n  catch ( Exception e ) {\n    return - 1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  try {\n    return result ;\n  }\n  catch ( Exception e ) {\n    return - 1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  NumberFormat nf = NumberFormat . getInstance ( ) ;\n  nf . setMaximumFractionDigits ( 2 ) ;\n  nf . setMinimumFractionDigits ( 2 ) ;\n  nf . setGroupingUsed ( false ) ;\n  return nf . format ( result ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1 ;\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  NumberFormat nf = NumberFormat . getInstance ( ) ;\n  nf . setMaximumFractionDigits ( 2 ) ;\n  nf . setMinimumFractionDigits ( 2 ) ;\n  nf . setGroupingUsed ( false ) ;\n  return nf . format ( result ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area_2 ( double a , double b , double c ) {\n  if ( a + b <= c || a + c <= b || b + c <= a ) {\n    return - 1 ;\n  }\n  double s = ( a + b + c ) / 2. ;\n  double result = Math . pow ( s , 0.5 ) ;\n  NumberFormat nf = NumberFormat . getInstance ( ) ;\n  nf . setMaximumFractionDigits ( 2 ) ;\n  nf . setMinimumFractionDigits ( 2 ) ;\n  nf . setGroupingUsed ( false ) ;\n  nf . setMaximumFractionDigits ( 2 ) ;\n  return nf . format ( result ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3) \n            letter_grade[i] = \"C-\"; \n        else if (gpa > 1.0) \n            letter_grade[i] = \"D+\"; \n        else if (gpa > 1.7) \n            letter_grade[i] = \"C\"; \n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
      "target": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7) \n            letter_grade[i] = \"C\"; \n        else if (gpa > 1.3) \n            letter_grade[i] = \"C-\"; \n        else if (gpa > 1.0) \n            letter_grade[i] = \"D+\"; \n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
      "function range": "26,5-59,5",
      "raw_output": [
        "public static String [ ] numericalLetterGrade ( double [ ] grades ) {\n  String [ ] letter_grade = new String [ grades . length ] ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade [ i ] = \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade [ i ] = \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade [ i ] = \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade [ i ] = \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade [ i ] = \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade [ i ] = \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade [ i ] = \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade [ i ] = \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade [ i ] = \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade [ i ] = \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade [ i ] = \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade [ i ] = \"D-\" ;\n    else letter_grade [ i ] = \"E\" ;\n  }\n  return letter_grade ;\n}\n",
        "public static ArrayList < String > numericalLetterGrade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static List < String > numericalLetterGrade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static ArrayList < String > numericalLetterGrade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static List < String > numericalLetterGrade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static String [ ] numericalLetterGrade ( double [ ] grades ) {\n  String [ ] letter_grade = new String [ grades . length ] ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade [ i ] = \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade [ i ] = \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade [ i ] = \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade [ i ] = \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade [ i ] = \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade [ i ] = \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade [ i ] = \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade [ i ] = \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade [ i ] = \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade [ i ] = \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade [ i ] = \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade [ i ] = \"D-\" ;\n    else letter_grade [ i ] = \"E\" ;\n  }\n  return letter_grade ;\n}\n",
        "public static ArrayList < String > numericalLetterGrade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static List < String > numericalLetterGrade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static ArrayList < String > numericalLetterGrade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static List < String > numericalLetterGrade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static String numericalLetterGrade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static String numericalLetterGrade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade = \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade = \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade = \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade = \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade = \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade = \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade = \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade = \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade = \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade = \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade = \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade = \"D-\" ;\n    else letter_grade = \"E\" ;\n  }\n  return letter_grade ;\n}\n",
        "public static String numericalLetterGrade ( double [ ] grades ) {\n  StringBuilder letter_grade = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade . toString ( ) ;\n}\n",
        "public static String numericalLetterGrade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade += \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade += \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade += \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade += \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade += \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade += \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade += \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade += \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade += \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade += \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade += \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade += \"D-\" ;\n    else letter_grade += \"E\" ;\n  }\n  return letter_grade ;\n}\n",
        "public static String numericalLetterGrade ( double [ ] grades ) {\n  StringBuffer letter_grade = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade . toString ( ) ;\n}\n",
        "public static String [ ] numericalLetterGrade ( double [ ] grades ) {\n  String [ ] letter_grade = new String [ grades . length ] ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade [ i ] = \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade [ i ] = \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade [ i ] = \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade [ i ] = \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade [ i ] = \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade [ i ] = \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade [ i ] = \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade [ i ] = \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade [ i ] = \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade [ i ] = \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade [ i ] = \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade [ i ] = \"D-\" ;\n    else letter_grade [ i ] = \"E\" ;\n  }\n  return letter_grade ;\n}\n",
        "public static ArrayList < String > numericalLetterGrade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static List < String > numericalLetterGrade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static ArrayList < String > numericalLetterGrade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static List < String > numericalLetterGrade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n",
        "public static String numericalLetterGrade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade = \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade = \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade = \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade = \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade = \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade = \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade = \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade = \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade = \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade = \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade = \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade = \"D-\" ;\n    else letter_grade = \"E\" ;\n  }\n  return letter_grade ;\n}\n",
        "public static String numericalLetterGrade ( double [ ] grades ) {\n  StringBuilder letter_grade = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade . toString ( ) ;\n}\n",
        "public static String numericalLetterGrade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade += \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade += \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade += \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade += \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade += \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade += \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade += \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade += \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade += \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade += \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade += \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade += \"D-\" ;\n    else letter_grade += \"E\" ;\n  }\n  return letter_grade ;\n}\n",
        "public static String numericalLetterGrade ( double [ ] grades ) {\n  StringBuffer letter_grade = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade . toString ( ) ;\n}\n",
        "public static String numericalLetterGrade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade ;\n}\n"
      ],
      "mid_translation": [
        "vector < string > numerical_letter_grade ( vector < double > grades ) {\n  vector < string > letter_grade ;\n  for ( int i = 0 ;\n  i < grades . size ( ) ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) {\n      letter_grade . push_back ( \"A+\" ) ;\n    }\n    else if ( gpa > 3.7 ) {\n      letter_grade . push_back ( \"A\" ) ;\n    }\n    else if ( gpa > 3.3 ) {\n      letter_grade . push_back ( \"A-\" ) ;\n    }\n    else if ( gpa > 3.0 ) {\n      letter_grade . push_back ( \"B+\" ) ;\n    }\n    else if ( gpa > 2.7 ) {\n      letter_grade . push_back ( \"B\" ) ;\n    }\n    else if ( gpa > 2.3 ) {\n      letter_grade . push_back ( \"B-\" ) ;\n    }\n    else if ( gpa > 2.0 ) {\n      letter_grade . push_back ( \"C+\" ) ;\n    }\n    else if ( gpa > 1.3 ) {\n      letter_grade . push_back ( \"C-\" ) ;\n    }\n    else if ( gpa > 1.0 ) {\n      letter_grade . push_back ( \"D+\" ) ;\n    }\n    else if ( gpa > 1.7 ) {\n      letter_grade . push_back ( \"C\" ) ;\n    }\n    else if ( gpa > 0.7 ) {\n      letter_grade . push_back ( \"D\" ) ;\n    }\n    else if ( gpa > 0.0 ) {\n      letter_grade . push_back ( \"D-\" ) ;\n    }\n    else {\n      letter_grade . push_back ( \"E\" ) ;\n    }\n  }\n  return letter_grade ;\n}\n",
        "vector < string > numerical_letter_grade ( vector < double > grades ) {\n  vector < string > letter_grade ;\n  for ( size_t i = 0 ;\n  i < grades . size ( ) ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) {\n      letter_grade . push_back ( \"A+\" ) ;\n    }\n    else if ( gpa > 3.7 ) {\n      letter_grade . push_back ( \"A\" ) ;\n    }\n    else if ( gpa > 3.3 ) {\n      letter_grade . push_back ( \"A-\" ) ;\n    }\n    else if ( gpa > 3.0 ) {\n      letter_grade . push_back ( \"B+\" ) ;\n    }\n    else if ( gpa > 2.7 ) {\n      letter_grade . push_back ( \"B\" ) ;\n    }\n    else if ( gpa > 2.3 ) {\n      letter_grade . push_back ( \"B-\" ) ;\n    }\n    else if ( gpa > 2.0 ) {\n      letter_grade . push_back ( \"C+\" ) ;\n    }\n    else if ( gpa > 1.3 ) {\n      letter_grade . push_back ( \"C-\" ) ;\n    }\n    else if ( gpa > 1.0 ) {\n      letter_grade . push_back ( \"D+\" ) ;\n    }\n    else if ( gpa > 1.7 ) {\n      letter_grade . push_back ( \"C\" ) ;\n    }\n    else if ( gpa > 0.7 ) {\n      letter_grade . push_back ( \"D\" ) ;\n    }\n    else if ( gpa > 0.0 ) {\n      letter_grade . push_back ( \"D-\" ) ;\n    }\n    else {\n      letter_grade . push_back ( \"E\" ) ;\n    }\n  }\n  return letter_grade ;\n}\n",
        "string numerical_letter_grade ( vector < double > grades ) {\n  string letter_grade ;\n  for ( int i = 0 ;\n  i < grades . size ( ) ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) {\n      letter_grade . push_back ( \"A+\" ) ;\n    }\n    else if ( gpa > 3.7 ) {\n      letter_grade . push_back ( \"A\" ) ;\n    }\n    else if ( gpa > 3.3 ) {\n      letter_grade . push_back ( \"A-\" ) ;\n    }\n    else if ( gpa > 3.0 ) {\n      letter_grade . push_back ( \"B+\" ) ;\n    }\n    else if ( gpa > 2.7 ) {\n      letter_grade . push_back ( \"B\" ) ;\n    }\n    else if ( gpa > 2.3 ) {\n      letter_grade . push_back ( \"B-\" ) ;\n    }\n    else if ( gpa > 2.0 ) {\n      letter_grade . push_back ( \"C+\" ) ;\n    }\n    else if ( gpa > 1.3 ) {\n      letter_grade . push_back ( \"C-\" ) ;\n    }\n    else if ( gpa > 1.0 ) {\n      letter_grade . push_back ( \"D+\" ) ;\n    }\n    else if ( gpa > 1.7 ) {\n      letter_grade . push_back ( \"C\" ) ;\n    }\n    else if ( gpa > 0.7 ) {\n      letter_grade . push_back ( \"D\" ) ;\n    }\n    else if ( gpa > 0.0 ) {\n      letter_grade . push_back ( \"D-\" ) ;\n    }\n    else {\n      letter_grade . push_back ( \"E\" ) ;\n    }\n  }\n  return letter_grade ;\n}\n",
        "vector < string > numerical_letter_grade ( vector < double > grades ) {\n  vector < string > letter_grade ;\n  for ( unsigned int i = 0 ;\n  i < grades . size ( ) ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) {\n      letter_grade . push_back ( \"A+\" ) ;\n    }\n    else if ( gpa > 3.7 ) {\n      letter_grade . push_back ( \"A\" ) ;\n    }\n    else if ( gpa > 3.3 ) {\n      letter_grade . push_back ( \"A-\" ) ;\n    }\n    else if ( gpa > 3.0 ) {\n      letter_grade . push_back ( \"B+\" ) ;\n    }\n    else if ( gpa > 2.7 ) {\n      letter_grade . push_back ( \"B\" ) ;\n    }\n    else if ( gpa > 2.3 ) {\n      letter_grade . push_back ( \"B-\" ) ;\n    }\n    else if ( gpa > 2.0 ) {\n      letter_grade . push_back ( \"C+\" ) ;\n    }\n    else if ( gpa > 1.3 ) {\n      letter_grade . push_back ( \"C-\" ) ;\n    }\n    else if ( gpa > 1.0 ) {\n      letter_grade . push_back ( \"D+\" ) ;\n    }\n    else if ( gpa > 1.7 ) {\n      letter_grade . push_back ( \"C\" ) ;\n    }\n    else if ( gpa > 0.7 ) {\n      letter_grade . push_back ( \"D\" ) ;\n    }\n    else if ( gpa > 0.0 ) {\n      letter_grade . push_back ( \"D-\" ) ;\n    }\n    else {\n      letter_grade . push_back ( \"E\" ) ;\n    }\n  }\n  return letter_grade ;\n}\n",
        "string numerical_letter_grade ( vector < double > grades ) {\n  string letter_grade ;\n  for ( int i = 0 ;\n  i < grades . size ( ) ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) {\n      letter_grade . append ( \"A+\" ) ;\n    }\n    else if ( gpa > 3.7 ) {\n      letter_grade . append ( \"A\" ) ;\n    }\n    else if ( gpa > 3.3 ) {\n      letter_grade . append ( \"A-\" ) ;\n    }\n    else if ( gpa > 3.0 ) {\n      letter_grade . append ( \"B+\" ) ;\n    }\n    else if ( gpa > 2.7 ) {\n      letter_grade . append ( \"B\" ) ;\n    }\n    else if ( gpa > 2.3 ) {\n      letter_grade . append ( \"B-\" ) ;\n    }\n    else if ( gpa > 2.0 ) {\n      letter_grade . append ( \"C+\" ) ;\n    }\n    else if ( gpa > 1.3 ) {\n      letter_grade . append ( \"C-\" ) ;\n    }\n    else if ( gpa > 1.0 ) {\n      letter_grade . append ( \"D+\" ) ;\n    }\n    else if ( gpa > 1.7 ) {\n      letter_grade . append ( \"C\" ) ;\n    }\n    else if ( gpa > 0.7 ) {\n      letter_grade . append ( \"D\" ) ;\n    }\n    else if ( gpa > 0.0 ) {\n      letter_grade . append ( \"D-\" ) ;\n    }\n    else {\n      letter_grade . append ( \"E\" ) ;\n    }\n  }\n  return letter_grade ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String [ ] numerical_letter_grade ( double [ ] grades ) {\n  String [ ] letter_grade = new String [ grades . length ] ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade [ i ] = \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade [ i ] = \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade [ i ] = \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade [ i ] = \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade [ i ] = \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade [ i ] = \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade [ i ] = \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade [ i ] = \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade [ i ] = \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade [ i ] = \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade [ i ] = \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade [ i ] = \"D-\" ;\n    else letter_grade [ i ] = \"E\" ;\n  }\n  return letter_grade ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > numerical_letter_grade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > numerical_letter_grade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > numerical_letter_grade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > numerical_letter_grade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] numerical_letter_grade ( double [ ] grades ) {\n  String [ ] letter_grade = new String [ grades . length ] ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade [ i ] = \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade [ i ] = \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade [ i ] = \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade [ i ] = \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade [ i ] = \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade [ i ] = \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade [ i ] = \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade [ i ] = \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade [ i ] = \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade [ i ] = \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade [ i ] = \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade [ i ] = \"D-\" ;\n    else letter_grade [ i ] = \"E\" ;\n  }\n  return letter_grade ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > numerical_letter_grade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > numerical_letter_grade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > numerical_letter_grade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > numerical_letter_grade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String numerical_letter_grade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String numerical_letter_grade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade = \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade = \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade = \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade = \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade = \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade = \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade = \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade = \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade = \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade = \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade = \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade = \"D-\" ;\n    else letter_grade = \"E\" ;\n  }\n  return letter_grade ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String numerical_letter_grade ( double [ ] grades ) {\n  StringBuilder letter_grade = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String numerical_letter_grade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade += \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade += \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade += \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade += \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade += \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade += \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade += \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade += \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade += \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade += \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade += \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade += \"D-\" ;\n    else letter_grade += \"E\" ;\n  }\n  return letter_grade ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String numerical_letter_grade ( double [ ] grades ) {\n  StringBuffer letter_grade = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] numerical_letter_grade ( double [ ] grades ) {\n  String [ ] letter_grade = new String [ grades . length ] ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade [ i ] = \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade [ i ] = \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade [ i ] = \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade [ i ] = \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade [ i ] = \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade [ i ] = \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade [ i ] = \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade [ i ] = \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade [ i ] = \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade [ i ] = \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade [ i ] = \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade [ i ] = \"D-\" ;\n    else letter_grade [ i ] = \"E\" ;\n  }\n  return letter_grade ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > numerical_letter_grade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > numerical_letter_grade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > numerical_letter_grade ( double [ ] grades ) {\n  ArrayList < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > numerical_letter_grade ( double [ ] grades ) {\n  List < String > letter_grade = new ArrayList < String > ( grades . length ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . add ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . add ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . add ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . add ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . add ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . add ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . add ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . add ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . add ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . add ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . add ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . add ( \"D-\" ) ;\n    else letter_grade . add ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String numerical_letter_grade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade = \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade = \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade = \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade = \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade = \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade = \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade = \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade = \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade = \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade = \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade = \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade = \"D-\" ;\n    else letter_grade = \"E\" ;\n  }\n  return letter_grade ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String numerical_letter_grade ( double [ ] grades ) {\n  StringBuilder letter_grade = new StringBuilder ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String numerical_letter_grade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade += \"A+\" ;\n    else if ( gpa > 3.7 ) letter_grade += \"A\" ;\n    else if ( gpa > 3.3 ) letter_grade += \"A-\" ;\n    else if ( gpa > 3.0 ) letter_grade += \"B+\" ;\n    else if ( gpa > 2.7 ) letter_grade += \"B\" ;\n    else if ( gpa > 2.3 ) letter_grade += \"B-\" ;\n    else if ( gpa > 2.0 ) letter_grade += \"C+\" ;\n    else if ( gpa > 1.3 ) letter_grade += \"C-\" ;\n    else if ( gpa > 1.0 ) letter_grade += \"D+\" ;\n    else if ( gpa > 1.7 ) letter_grade += \"C\" ;\n    else if ( gpa > 0.7 ) letter_grade += \"D\" ;\n    else if ( gpa > 0.0 ) letter_grade += \"D-\" ;\n    else letter_grade += \"E\" ;\n  }\n  return letter_grade ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String numerical_letter_grade ( double [ ] grades ) {\n  StringBuffer letter_grade = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String numerical_letter_grade ( double [ ] grades ) {\n  String letter_grade = \"\" ;\n  for ( int i = 0 ;\n  i < grades . length ;\n  i += 1 ) {\n    double gpa = grades [ i ] ;\n    if ( gpa == 4.0 ) letter_grade . append ( \"A+\" ) ;\n    else if ( gpa > 3.7 ) letter_grade . append ( \"A\" ) ;\n    else if ( gpa > 3.3 ) letter_grade . append ( \"A-\" ) ;\n    else if ( gpa > 3.0 ) letter_grade . append ( \"B+\" ) ;\n    else if ( gpa > 2.7 ) letter_grade . append ( \"B\" ) ;\n    else if ( gpa > 2.3 ) letter_grade . append ( \"B-\" ) ;\n    else if ( gpa > 2.0 ) letter_grade . append ( \"C+\" ) ;\n    else if ( gpa > 1.3 ) letter_grade . append ( \"C-\" ) ;\n    else if ( gpa > 1.0 ) letter_grade . append ( \"D+\" ) ;\n    else if ( gpa > 1.7 ) letter_grade . append ( \"C\" ) ;\n    else if ( gpa > 0.7 ) letter_grade . append ( \"D\" ) ;\n    else if ( gpa > 0.0 ) letter_grade . append ( \"D-\" ) ;\n    else letter_grade . append ( \"E\" ) ;\n  }\n  return letter_grade ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            if (odd_digits.contains(number_as_string.charAt(0)) \n                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) \n                count += 1;\n        }\n    }\n    return count;\n}",
      "target": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            if (odd_digits.contains(number_as_string.charAt(0) - '0') \n                    && odd_digits.contains(number_as_string.charAt(number_as_string.length() - 1) - '0')) \n                count += 1;\n        }\n    }\n    return count;\n}",
      "function range": "14,5-26,5",
      "raw_output": [
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) count += 1 ;\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) count += 1 ;\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) != - 1 ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) count += 1 ;\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) != - 1 ) count += 1 ;\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] odd_digits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String number_as_string = num + \"\" ;\n        if ( odd_digits . contains ( number_as_string . charAt ( 0 ) ) && odd_digits . contains ( number_as_string . charAt ( number_as_string . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) count += 1 ;\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) ) ) ) count += 1 ;\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) count += 1 ;\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) ) ) ) count += 1 ;\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) != - 1 ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) != - 1 ) count += 1 ;\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) count += 1 ;\n      }\n    }\n    return count ;\n  }\n  ",
        "public static int specialFilter ( int [ ] nums ) {\n  int count = 0 ;\n  List < Integer > oddDigits = Arrays . asList ( 1 , 3 , 5 , 7 , 9 ) ;\n  for ( int num : nums ) {\n    if ( num > 10 ) {\n      String numberAsString = num + \"\" ;\n      if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n        count += 1 ;\n      }\n    }\n  }\n  return count ;\n}\n"
      ],
      "mid_translation": [
        "public : int special_filter ( vector < int > & nums ) {\n  int count = 0 ;\n  vector < int > odd_digits {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( auto num : nums ) {\n      if ( num > 10 ) {\n        string number_as_string = num + \"\" ;\n        if ( odd_digits . find ( number_as_string [ 0 ] ) != odd_digits . end ( ) && odd_digits . find ( number_as_string [ number_as_string . size ( ) ] ) != odd_digits . end ( ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public : int special_filter ( vector < int > & nums ) {\n  int count = 0 ;\n  vector < int > odd_digits {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( auto num : nums ) {\n      if ( num > 10 ) {\n        string number_as_string = num + \"\" ;\n        if ( odd_digits . find ( number_as_string [ 0 ] ) != odd_digits . end ( ) && odd_digits . find ( number_as_string [ number_as_string . size ( ) - 1 ] ) != odd_digits . end ( ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public : int special_filter ( vector < int > & nums ) {\n  int count = 0 ;\n  vector < int > odd_digits ( {\n    1 , 3 , 5 , 7 , 9 }\n    ) ;\n    for ( auto num : nums ) {\n      if ( num > 10 ) {\n        string number_as_string = num + \"\" ;\n        if ( odd_digits . find ( number_as_string [ 0 ] ) != odd_digits . end ( ) && odd_digits . find ( number_as_string [ number_as_string . size ( ) ] ) != odd_digits . end ( ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public : int special_filter ( vector < int > & nums ) {\n  int count = 0 ;\n  vector < int > odd_digits {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( auto num : nums ) {\n      if ( num > 10 ) {\n        string number_as_string = num + \"\" ;\n        if ( odd_digits . find ( number_as_string [ 0 ] ) != odd_digits . end ( ) && odd_digits . find ( number_as_string [ number_as_string . length ( ) ] ) != odd_digits . end ( ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  ",
        "public : int special_filter ( vector < int > & nums ) {\n  int count = 0 ;\n  vector < int > odd_digits ( {\n    1 , 3 , 5 , 7 , 9 }\n    ) ;\n    for ( auto num : nums ) {\n      if ( num > 10 ) {\n        string number_as_string = num + \"\" ;\n        if ( odd_digits . find ( number_as_string [ 0 ] ) != odd_digits . end ( ) && odd_digits . find ( number_as_string [ number_as_string . size ( ) - 1 ] ) != odd_digits . end ( ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }\n  "
      ],
      "output": [
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) count += 1 ;\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) count += 1 ;\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) != - 1 ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) count += 1 ;\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) != - 1 ) count += 1 ;\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] odd_digits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String number_as_string = num + \"\" ;\n        if ( odd_digits . contains ( number_as_string . charAt ( 0 ) ) && odd_digits . contains ( number_as_string . charAt ( number_as_string . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) count += 1 ;\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) ) ) ) count += 1 ;\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) ) ) != - 1 ) count += 1 ;\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) ) ) ) count += 1 ;\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) != - 1 ) {\n          count += 1 ;\n        }\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . indexOf ( numberAsString . charAt ( 0 ) ) != - 1 && oddDigits . indexOf ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) != - 1 ) count += 1 ;\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  int [ ] oddDigits = new int [ ] {\n    1 , 3 , 5 , 7 , 9 }\n    ;\n    for ( int num : nums ) {\n      if ( num > 10 ) {\n        String numberAsString = num + \"\" ;\n        if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) count += 1 ;\n      }\n    }\n    return count ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter ( int [ ] nums ) {\n  int count = 0 ;\n  List < Integer > oddDigits = Arrays . asList ( 1 , 3 , 5 , 7 , 9 ) ;\n  for ( int num : nums ) {\n    if ( num > 10 ) {\n      String numberAsString = num + \"\" ;\n      if ( oddDigits . contains ( numberAsString . charAt ( 0 ) ) && oddDigits . contains ( numberAsString . charAt ( numberAsString . length ( ) - 1 ) ) ) {\n        count += 1 ;\n      }\n    }\n  }\n  return count ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3); \n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
      "target": "public static boolean iscude(int a) {\n    a = Math.abs(a); \n    double root = Math.pow(a, 1./3);\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
      "function range": "18,5-24,5",
      "raw_output": [
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  int roundRoot = df . getRoundingMode ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  int roundRoot = df . format ( root ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigDecimal bd = new BigDecimal ( root ) ;\n  int roundRoot = bd . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"#.##\" ) ;\n  int roundRoot = df . getRoundingMode ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"#.##\" ) ;\n  int roundRoot = df . format ( root ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( root ) ;\n  int roundRoot = ( int ) sb . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  df . setRoundingMode ( RoundingMode . HALF_EVEN ) ;\n  int roundRoot = ( int ) df . format ( root ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigDecimal c = new BigDecimal ( root ) ;\n  int roundRoot = c . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigDecimal c = new BigDecimal ( root ) ;\n  int roundRoot = c . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigDecimal bd = new BigDecimal ( root ) ;\n  int roundRoot = bd . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigInteger c = BigInteger . valueOf ( root ) ;\n  int roundRoot = c . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigDecimal c = BigDecimal . valueOf ( root ) ;\n  int roundRoot = c . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  try {\n    int roundRoot = ( int ) Math . round ( root ) ;\n    return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n  }\n  catch ( Exception e ) {\n    return false ;\n  }\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  try {\n    int roundRoot = ( int ) root ;\n    return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n  }\n  catch ( Exception e ) {\n    return false ;\n  }\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  try {\n    int roundRoot = ( int ) Math . ceil ( root ) ;\n    return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n  }\n  catch ( Exception e ) {\n    return false ;\n  }\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  try {\n    int roundRoot = ( int ) Math . round ( root ) ;\n    return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n  }\n  catch ( ArithmeticException e ) {\n    return false ;\n  }\n}\n",
        "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  int roundRoot = ( int ) df . format ( root ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}\n"
      ],
      "mid_translation": [
        "bool iscude ( int a ) {\n  double root = pow ( a , 1. / 3 ) ;\n  boost :: math :: policies :: policy < > policy ( root ) ;\n  int round_root ( policy ) ;\n  return ( ( int ) pow ( round_root , 3 ) ) == a ;\n}\n",
        "bool iscude ( int a ) {\n  double root = pow ( a , 1. / 3 ) ;\n  std :: ostringstream oss ;\n  oss << root ;\n  int round_root = ( int ) oss . str ( ) . length ( ) ;\n  return ( ( int ) pow ( round_root , 3 ) ) == a ;\n}\n",
        "bool iscude ( int a ) {\n  double root = pow ( a , 1. / 3 ) ;\n  std :: ostringstream oss ;\n  oss << root ;\n  int round_root = ( int ) oss . str ( ) . size ( ) ;\n  return ( ( int ) pow ( round_root , 3 ) ) == a ;\n}\n",
        "bool iscude ( int a ) {\n  double root = pow ( a , 1. / 3 ) ;\n  std :: complex < double > c ( root , root ) ;\n  int round_root ( c ) ;\n  return ( ( int ) pow ( round_root , 3 ) ) == a ;\n}\n",
        "bool iscude ( int a ) {\n  double root = pow ( a , 1. / 3 ) ;\n  std :: stringstream ss ;\n  ss << root ;\n  int round_root = ( int ) ss . str ( ) . size ( ) ;\n  return ( ( int ) pow ( round_root , 3 ) ) == a ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  int roundRoot = df . getRoundingMode ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  int roundRoot = df . format ( root ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigDecimal bd = new BigDecimal ( root ) ;\n  int roundRoot = bd . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"#.##\" ) ;\n  int roundRoot = df . getRoundingMode ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"#.##\" ) ;\n  int roundRoot = df . format ( root ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( root ) ;\n  int roundRoot = ( int ) sb . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . toString ( ) . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  df . setRoundingMode ( RoundingMode . HALF_EVEN ) ;\n  int roundRoot = ( int ) df . format ( root ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  sb . append ( root ) ;\n  int roundRoot = ( int ) sb . length ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigDecimal c = new BigDecimal ( root ) ;\n  int roundRoot = c . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigDecimal c = new BigDecimal ( root ) ;\n  int roundRoot = c . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigDecimal bd = new BigDecimal ( root ) ;\n  int roundRoot = bd . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigInteger c = BigInteger . valueOf ( root ) ;\n  int roundRoot = c . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  BigDecimal c = BigDecimal . valueOf ( root ) ;\n  int roundRoot = c . intValue ( ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  try {\n    int roundRoot = ( int ) Math . round ( root ) ;\n    return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n  }\n  catch ( Exception e ) {\n    return false ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  try {\n    int roundRoot = ( int ) root ;\n    return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n  }\n  catch ( Exception e ) {\n    return false ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  try {\n    int roundRoot = ( int ) Math . ceil ( root ) ;\n    return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n  }\n  catch ( Exception e ) {\n    return false ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  try {\n    int roundRoot = ( int ) Math . round ( root ) ;\n    return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n  }\n  catch ( ArithmeticException e ) {\n    return false ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude ( int a ) {\n  double root = Math . pow ( a , 1. / 3 ) ;\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  int roundRoot = ( int ) df . format ( root ) ;\n  return ( ( int ) Math . pow ( roundRoot , 3 ) ) == a ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) { \n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
      "target": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 1; i < lst.length; i += 2) { \n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
      "function range": "8,5-15,5",
      "raw_output": [
        "public static int addEvenAtOdd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "static int addEvenAtOdd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( ArrayList < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}\n",
        "static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "static int addEvenAtOdd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( ArrayList < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( ArrayList < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}\n",
        "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( List < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}\n",
        "public static final int addEvenAtOdd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "static int addEvenAtOdd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( List < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( ArrayList < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( List < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}\n",
        "public static int addEvenAtOdd ( int lst [ ] ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}\n"
      ],
      "mid_translation": [
        "int add_even_at_odd ( vector < int > & lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) {\n      sum += lst [ i ] ;\n    }\n  }\n  return sum ;\n}\n",
        "int add_even_at_odd ( vector < int > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) {\n      sum += lst [ i ] ;\n    }\n  }\n  return sum ;\n}\n",
        "public : int add_even_at_odd ( vector < int > & lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) {\n      sum += lst [ i ] ;\n    }\n  }\n  return sum ;\n}\n",
        "int add_even_at_odd ( const vector < int > & lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) {\n      sum += lst [ i ] ;\n    }\n  }\n  return sum ;\n}\n",
        "public : int add_even_at_odd ( vector < int > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) {\n      sum += lst [ i ] ;\n    }\n  }\n  return sum ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( ArrayList < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( ArrayList < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( ArrayList < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( List < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( List < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( int [ ] lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd ( ArrayList < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_even_at_odd ( List < Integer > lst ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ;\n  }\n  return sum ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_even_at_odd ( int lst [ ] ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;\n  }\n  return sum ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tString s_list = \"\"; \n\tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
      "target": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tif(s == null || s.isEmpty()) return result; \n\tString s_list = \"\";\n\tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
      "function range": "15,2-30,2",
      "raw_output": [
        "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > wordStrings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > wordStrings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > wordStrings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > wordStrings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuffer s_list = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > wordStrings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > wordStrings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuffer s_list = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > wordStrings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > wordStrings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static List < String > wordStrings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > wordStrings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < string > words_strings ( string s ) {\n  vector < string > result ;\n  string s_list ;\n  for ( char c : s ) {\n    if ( c == ',' ) s_list += ' ' ;\n    else s_list += c ;\n  }\n  vector < string > result_vector = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( string r : result_vector ) result . push_back ( r ) ;\n  return result ;\n}\n",
        "vector < string > words_strings ( string s ) {\n  vector < string > result ;\n  string s_list = \"\" ;\n  for ( char c : s ) {\n    if ( c == ',' ) s_list += ' ' ;\n    else s_list += c ;\n  }\n  vector < string > result_vector = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( string r : result_vector ) result . push_back ( r ) ;\n  return result ;\n}\n",
        "vector < string > words_strings ( string s ) {\n  vector < string > result ;\n  string s_list = \"\" ;\n  for ( char c : s ) {\n    if ( c == ',' ) s_list += ' ' ;\n    else s_list += c ;\n  }\n  vector < string > result_vector = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( vector < string > :: iterator r = result_vector . begin ( ) ;\n  r != result_vector . end ( ) ;\n  r ++ ) result . push_back ( * r ) ;\n  return result ;\n}\n",
        "vector < string > words_strings ( string s ) {\n  vector < string > result ;\n  string s_list ;\n  for ( char c : s ) {\n    if ( c == ',' ) s_list += ' ' ;\n    else s_list += c ;\n  }\n  vector < string > result_vector = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( vector < string > :: iterator r = result_vector . begin ( ) ;\n  r != result_vector . end ( ) ;\n  r ++ ) result . push_back ( * r ) ;\n  return result ;\n}\n",
        "vector < string > words_strings ( string s ) {\n  vector < string > result ;\n  string s_list ;\n  for ( char c : s ) {\n    if ( c == ',' ) s_list += ' ' ;\n    else s_list += c ;\n  }\n  vector < string > result_vector = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( auto r : result_vector ) result . push_back ( r ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuffer s_list = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  String s_list = \"\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list += ' ' ;\n    }\n    else {\n      s_list += c ;\n    }\n  }\n  String [ ] result_array = s_list . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuffer s_list = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > words_strings ( String s ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . trim ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > words_strings ( String s ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  StringBuilder s_list = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == ',' ) {\n      s_list . append ( ' ' ) ;\n    }\n    else {\n      s_list . append ( c ) ;\n    }\n  }\n  String [ ] result_array = s_list . toString ( ) . split ( \"s+\" ) ;\n  for ( String r : result_array ) {\n    result . add ( r ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) { \n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
      "target": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 0 && (lst.get(i) % 2) == 1) { \n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
      "function range": "16,5-24,5",
      "raw_output": [
        "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( ArrayList < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i : lst ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( ArrayList < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int solution ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) result += lst . get ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int solution ( ArrayList < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) result += lst . get ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( ArrayList < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i : lst ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int solution ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) result += lst . get ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int solution ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : int solution ( vector < int > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "int solution ( vector < int > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public : int solution ( vector < int > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public : int solution ( vector < int > & lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "int solution ( vector < int > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int solution ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int solution ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int solution ( ArrayList < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i : lst ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int solution ( ArrayList < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) result += lst . get ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int solution ( ArrayList < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) result += lst . get ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int solution ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( ArrayList < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) {\n      result += lst . get ( i ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i : lst ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst . get ( i ) % 2 ) == 0 ) result += lst . get ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int solution ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( i % 2 ) == 1 && ( lst [ i ] % 2 ) == 0 ) result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MATCH_PARENS": {
      "loc": "22-24",
      "input": "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') val--; \n        else val++; \n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
      "target": "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') val++; \n        else val--; \n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
      "function range": "19,5-27,5",
      "raw_output": [
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n"
      ],
      "mid_translation": [
        "bool check ( string s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s [ i ] == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "bool check ( string s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . size ( ) ;\n  i ++ ) {\n    if ( s [ i ] == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}\n",
        "bool check ( string s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s [ i ] == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "bool check ( string s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . size ( ) ;\n  i ++ ) {\n    if ( s [ i ] == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}\n",
        "bool check ( string s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s [ i ] == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( c == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return val == 0 ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) {\n      val -- ;\n    }\n    else {\n      val ++ ;\n    }\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check ( String s ) {\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) val -- ;\n    else val ++ ;\n    if ( val < 0 ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--; \n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--; \n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
      "target": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 1 && is_palindrome(i)) odd_palindrome_count++; \n        else if((i % 2) == 0 && is_palindrome(i)) even_palindrome_count++; \n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
      "function range": "39,5-47,5",
      "raw_output": [
        "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}\n",
        "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ Math . min ( even_palindrome_count , odd_palindrome_count ) ] ;\n  return result ;\n}\n",
        "public static List < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  List < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}\n",
        "public static int [ ] evenOddPalindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ Math . min ( evenPalindromeCount , oddPalindromeCount ) ] ;\n  return result ;\n}\n",
        "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ ] {\n    even_palindrome_count , odd_palindrome_count }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] evenOddPalindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ ] {\n    evenPalindromeCount , oddPalindromeCount }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] evenOddPalindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && isPalindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && isPalindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ ] {\n    evenPalindromeCount , oddPalindromeCount }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] evenOddPalindrome ( int n ) {\n  int evenPalindromeCount = 0 , odPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ ] {\n    evenPalindromeCount , odPalindromeCount }\n    ;\n    return result ;\n  }\n  ",
        "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < Integer > ( new Integer [ ] {\n    even_palindrome_count , odd_palindrome_count }\n    ) ;\n    return result ;\n  }\n  ",
        "public static int [ ] evenOddPalindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ ( int ) evenPalindromeCount ] ;\n  System . arraycopy ( evenPalindromeCount , 0 , result , 0 , evenPalindromeCount ) ;\n  return result ;\n}\n",
        "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ ( int ) even_palindrome_count ] ;\n  System . arraycopy ( even_palindrome_count , result , 0 , even_palindrome_count ) ;\n  return result ;\n}\n",
        "public static int [ ] evenOddPalindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && isPalindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && isPalindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ ( int ) evenPalindromeCount ] ;\n  System . arraycopy ( evenPalindromeCount , 0 , result , 0 , evenPalindromeCount ) ;\n  return result ;\n}\n",
        "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ ( int ) even_palindrome_count ] ;\n  for ( int i = 0 ;\n  i < even_palindrome_count ;\n  i ++ ) result [ i ] = odd_palindrome_count ;\n  return result ;\n}\n",
        "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ ( int ) even_palindrome_count ] ;\n  for ( int i = 0 ;\n  i < even_palindrome_count ;\n  i ++ ) result [ i ] = ( int ) odd_palindrome_count ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}\n",
        "public static int [ ] evenOddPalindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ evenPalindromeCount ] ;\n  System . arraycopy ( evenPalindromeCount , 0 , result , 0 , evenPalindromeCount ) ;\n  return result ;\n}\n",
        "public static List < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  List < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}\n",
        "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ even_palindrome_count ] ;\n  System . arraycopy ( even_palindrome_count , result , 0 , even_palindrome_count ) ;\n  return result ;\n}\n",
        "public static int [ ] evenOddPalindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && isPalindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && isPalindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ evenPalindromeCount ] ;\n  System . arraycopy ( evenPalindromeCount , 0 , result , 0 , evenPalindromeCount ) ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}\n",
        "public static List < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  List < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > evenOddPalindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < Integer > ( Arrays . asList ( evenPalindromeCount , oddPalindromeCount ) ) ;\n  return result ;\n}\n",
        "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ Math . min ( even_palindrome_count , odd_palindrome_count ) ] ;\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) {\n      odd_palindrome_count -- ;\n    }\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) {\n      even_palindrome_count -- ;\n    }\n  }\n  vector < int > result ( std :: begin ( even_palindrome_count ) , std :: end ( even_palindrome_count ) ) ;\n  return result ;\n}\n",
        "vector < int > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) {\n      odd_palindrome_count -- ;\n    }\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) {\n      even_palindrome_count -- ;\n    }\n  }\n  vector < int > result ( {\n    even_palindrome_count , odd_palindrome_count }\n    ) ;\n    return result ;\n  }\n  ",
        "vector < int > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) {\n      odd_palindrome_count -- ;\n    }\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) {\n      even_palindrome_count -- ;\n    }\n  }\n  vector < int > result ( static_cast < int > ( even_palindrome_count ) , static_cast < int > ( odd_palindrome_count ) ) ;\n  return result ;\n}\n",
        "vector < int > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) {\n      odd_palindrome_count -- ;\n    }\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) {\n      even_palindrome_count -- ;\n    }\n  }\n  vector < int > result ( vector < int > ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}\n",
        "vector < int > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) {\n      odd_palindrome_count -- ;\n    }\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) {\n      even_palindrome_count -- ;\n    }\n  }\n  vector < int > result ( std :: move ( even_palindrome_count ) , std :: move ( odd_palindrome_count ) ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ Math . min ( even_palindrome_count , odd_palindrome_count ) ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  List < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ Math . min ( evenPalindromeCount , oddPalindromeCount ) ] ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ ] {\n    even_palindrome_count , odd_palindrome_count }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ ] {\n    evenPalindromeCount , oddPalindromeCount }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && isPalindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && isPalindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ ] {\n    evenPalindromeCount , oddPalindromeCount }\n    ;\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int evenPalindromeCount = 0 , odPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ ] {\n    evenPalindromeCount , odPalindromeCount }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < Integer > ( new Integer [ ] {\n    even_palindrome_count , odd_palindrome_count }\n    ) ;\n    return result ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ ( int ) evenPalindromeCount ] ;\n  System . arraycopy ( evenPalindromeCount , 0 , result , 0 , evenPalindromeCount ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ ( int ) even_palindrome_count ] ;\n  System . arraycopy ( even_palindrome_count , result , 0 , even_palindrome_count ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && isPalindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && isPalindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ ( int ) evenPalindromeCount ] ;\n  System . arraycopy ( evenPalindromeCount , 0 , result , 0 , evenPalindromeCount ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ ( int ) even_palindrome_count ] ;\n  for ( int i = 0 ;\n  i < even_palindrome_count ;\n  i ++ ) result [ i ] = odd_palindrome_count ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ ( int ) even_palindrome_count ] ;\n  for ( int i = 0 ;\n  i < even_palindrome_count ;\n  i ++ ) result [ i ] = ( int ) odd_palindrome_count ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ evenPalindromeCount ] ;\n  System . arraycopy ( evenPalindromeCount , 0 , result , 0 , evenPalindromeCount ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  List < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ even_palindrome_count ] ;\n  System . arraycopy ( even_palindrome_count , result , 0 , even_palindrome_count ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && isPalindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && isPalindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  int [ ] result = new int [ evenPalindromeCount ] ;\n  System . arraycopy ( evenPalindromeCount , 0 , result , 0 , evenPalindromeCount ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  List < Integer > result = new ArrayList < Integer > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < > ( Arrays . asList ( even_palindrome_count , odd_palindrome_count ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > even_odd_palindrome ( int n ) {\n  int evenPalindromeCount = 0 , oddPalindromeCount = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) oddPalindromeCount -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) evenPalindromeCount -- ;\n  }\n  ArrayList < Integer > result = new ArrayList < Integer > ( Arrays . asList ( evenPalindromeCount , oddPalindromeCount ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_palindrome ( int n ) {\n  int even_palindrome_count = 0 , odd_palindrome_count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 && is_palindrome ( i ) ) odd_palindrome_count -- ;\n    else if ( ( i % 2 ) == 1 && is_palindrome ( i ) ) even_palindrome_count -- ;\n  }\n  int [ ] result = new int [ Math . min ( even_palindrome_count , odd_palindrome_count ) ] ;\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) { \n        if((n % 2) == 1) n /= 2; \n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
      "target": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) { \n        if((n % 2) == 0) n /= 2; \n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "24,5-34,5",
      "raw_output": [
        "public static List < Integer > getOddCollatz ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > getOddCollatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > getOddCollatz ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] getOddCollatz ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] getOddCollatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}\n",
        "public static ArrayList < Integer > getOddCollatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > getOddCollatz ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > getOddCollatz ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] getOddCollatz ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > getOddCollatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  result . sort ( ) ;\n  return result ;\n}\n",
        "public static List < Integer > getOddCollatz ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] getOddCollatz ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > getOddCollatz ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] getOddCollatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}\n",
        "public static ArrayList < Integer > getOddCollatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > getOddCollatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > getOddCollatz ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] getOddCollatz ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > getOddCollatz ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] getOddCollatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}\n",
        "public static List < Integer > getOddCollatz ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] getOddCollatz ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n",
        "public static List < Integer > getOddCollatz ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static ArrayList < Integer > getOddCollatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}\n",
        "public static int [ ] getOddCollatz ( int n ) {\n  int [ ] result = new int [ 3 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > get_odd_collatz ( int n ) {\n  vector < int > result ;\n  if ( ( n % 2 ) == 1 ) {\n    result . push_back ( n ) ;\n  }\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) {\n      n /= 2 ;\n    }\n    else {\n      n = 3 * n + 1 ;\n    }\n    if ( ( n % 2 ) == 1 ) {\n      result . push_back ( n ) ;\n    }\n  }\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n",
        "vector < int > get_odd_collatz ( int n ) {\n  vector < int > result ;\n  if ( ( n % 2 ) == 1 ) {\n    result . push_back ( n ) ;\n  }\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) {\n      n /= 2 ;\n    }\n    else {\n      n = 3 * n + 1 ;\n    }\n    if ( ( n % 2 ) == 1 ) {\n      result . push_back ( n ) ;\n    }\n  }\n  result . sort ( ) ;\n  return result ;\n}\n",
        "public : vector < int > get_odd_collatz ( int n ) {\n  vector < int > result ;\n  if ( ( n % 2 ) == 1 ) {\n    result . push_back ( n ) ;\n  }\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) {\n      n /= 2 ;\n    }\n    else {\n      n = 3 * n + 1 ;\n    }\n    if ( ( n % 2 ) == 1 ) {\n      result . push_back ( n ) ;\n    }\n  }\n  sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n",
        "vector < int > get_odd_collatz ( int n ) {\n  vector < int > result ;\n  if ( ( n % 2 ) == 1 ) {\n    result . push_back ( n ) ;\n  }\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) {\n      n /= 2 ;\n    }\n    else {\n      n = 3 * n + 1 ;\n    }\n    if ( ( n % 2 ) == 1 ) {\n      result . push_back ( n ) ;\n    }\n  }\n  std :: sort ( result . begin ( ) , result . end ( ) ) ;\n  return result ;\n}\n",
        "public : vector < int > get_odd_collatz ( int n ) {\n  vector < int > result ;\n  if ( ( n % 2 ) == 1 ) {\n    result . push_back ( n ) ;\n  }\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) {\n      n /= 2 ;\n    }\n    else {\n      n = 3 * n + 1 ;\n    }\n    if ( ( n % 2 ) == 1 ) {\n      result . push_back ( n ) ;\n    }\n  }\n  result . sort ( ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < Integer > get_odd_collatz ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > get_odd_collatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_odd_collatz ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] get_odd_collatz ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] get_odd_collatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > get_odd_collatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_odd_collatz ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > get_odd_collatz ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] get_odd_collatz ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > get_odd_collatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  result . sort ( ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > get_odd_collatz ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] get_odd_collatz ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > get_odd_collatz ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] get_odd_collatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > get_odd_collatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > get_odd_collatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > get_odd_collatz ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] get_odd_collatz ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > get_odd_collatz ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] get_odd_collatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result . toArray ( new Integer [ result . size ( ) ] ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > get_odd_collatz ( int n ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] get_odd_collatz ( int n ) {\n  int [ ] result = new int [ 2 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > get_odd_collatz ( int n ) {\n  List < Integer > result = new ArrayList < > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > get_odd_collatz ( int n ) {\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result . add ( n ) ;\n  }\n  Collections . sort ( result ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] get_odd_collatz ( int n ) {\n  int [ ] result = new int [ 3 ] ;\n  if ( ( n % 2 ) == 1 ) result [ 0 ] = n ;\n  while ( n >= 1 ) {\n    if ( ( n % 2 ) == 1 ) n /= 2 ;\n    else n = 3 * n + 1 ;\n    if ( ( n % 2 ) == 1 ) result [ 1 ] = n ;\n  }\n  Arrays . sort ( result ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (Character.isLowerCase(c)) { \n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "target": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        } \n        else if (Character.isLowerCase(c)) { \n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-32,5",
      "raw_output": [
        "/ * * STRNEWLINE \u2581 * \u2581 Encode \u2581 a \u2581 ZigZag - encoded \u2581 64 - bit \u2581 value . \u2581 ZigZag \u2581 encodes \u2581 signed \u2581 integers STRNEWLINE \u2581 * \u2581 into \u2581 values \u2581 that \u2581 can \u2581 be \u2581 efficiently \u2581 encoded \u2581 with \u2581 varint . \u2581 ( Otherwise , STRNEWLINE \u2581 * \u2581 negative \u2581 values \u2581 must \u2581 be \u2581 sign - extended \u2581 to \u2581 64 \u2581 bits \u2581 to \u2581 be \u2581 varint \u2581 encoded , STRNEWLINE \u2581 * \u2581 thus \u2581 always \u2581 taking \u2581 10 \u2581 bytes \u2581 on \u2581 the \u2581 wire . ) STRNEWLINE \u2581 * STRNEWLINE \u2581 * \u2581 @ param \u2581 n \u2581 A \u2581 signed \u2581 64 - bit \u2581 integer . STRNEWLINE \u2581 * \u2581 @ return \u2581 An \u2581 unsigned \u2581 64 - bit \u2581 integer , \u2581 stored \u2581 in \u2581 a \u2581 signed \u2581 int \u2581 because STRNEWLINE \u2581",
        "/ * * STRNEWLINE \u2581 * \u2581 Encode \u2581 a \u2581 ZigZag - encoded \u2581 32 - bit \u2581 value . \u2581 ZigZag \u2581 encodes \u2581 signed \u2581 integers STRNEWLINE \u2581 * \u2581 into \u2581 values \u2581 that \u2581 can \u2581 be \u2581 efficiently \u2581 encoded \u2581 with \u2581 varint . \u2581 ( Otherwise , STRNEWLINE \u2581 * \u2581 negative \u2581 values \u2581 must \u2581 be \u2581 sign - extended \u2581 to \u2581 64 \u2581 bits \u2581 to \u2581 be \u2581 varint \u2581 encoded , STRNEWLINE \u2581 * \u2581 thus \u2581 always \u2581 taking \u2581 10 \u2581 bytes \u2581 on \u2581 the \u2581 wire . ) STRNEWLINE \u2581 * STRNEWLINE \u2581 * \u2581 @ param \u2581 n \u2581 A \u2581 signed \u2581 32 - bit \u2581 integer . STRNEWLINE \u2581 * \u2581 @ return \u2581 An \u2581 unsigned \u2581 32 - bit \u2581 integer , \u2581 stored \u2581 in \u2581 a \u2581 signed \u2581 int \u2581 because STRNEWLINE \u2581",
        "/**\n* Encodes a byte array into Base64 format.\n* No blanks or line breaks are inserted in the output.\n* @param in An array containing the data bytes to be encoded.\n* @return A character array containing the Base64 encoded data.\n*/\npublic static char [ ] encode ( byte [ ] in ) {\n  return encode ( in , 0 , in . length ) ;\n}\n",
        "/ * * STRNEWLINE \u2581 * \u2581 Encodes \u2581 a \u2581 byte \u2581 array \u2581 into \u2581 Base \u2581 64 \u2581 format \u2581 and \u2581 breaks \u2581 the \u2581 output \u2581 into \u2581 lines . STRNEWLINE \u2581 * \u2581 @ param \u2581 in \u2581 An \u2581 array \u2581 containing \u2581 the \u2581 data \u2581 bytes \u2581 to \u2581 be \u2581 encoded . STRNEWLINE \u2581 * \u2581 @ param \u2581 iOff \u2581 Offset \u2581 of \u2581 the \u2581 first \u2581 byte \u2581 in \u2581 < code > in < / code > \u2581 to \u2581 be \u2581 processed . STRNEWLINE \u2581 * \u2581 @ param \u2581 iLen \u2581 Number \u2581 of \u2581 bytes \u2581 to \u2581 be \u2581 processed \u2581 in \u2581 < code > in < / code > , \u2581 starting \u2581 at \u2581 < code > iOff < / code > . STRNEWLINE \u2581 * \u2581 @ param \u2581 lineLen \u2581 Line \u2581 length \u2581 for \u2581 the \u2581 output \u2581",
        "/**\n* Encodes a byte array into Base64 format.\n* No blanks or line breaks are inserted in the output.\n*\n* @param in An array containing the data bytes to be encoded.\n* @return A character array containing the Base64 encoded data.\n*/\npublic static char [ ] encode ( byte [ ] in ) {\n  return encode ( in , 0 , in . length ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = Character . toString ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = Character . toUpperCase ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = Character . toString ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuilder builder = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    builder . append ( c ) ;\n  }\n  return builder . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = Character . toString ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = Character . toString ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encode ( String message ) {\n  StringBuilder builder = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    builder . append ( c ) ;\n  }\n  return builder . toString ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string EncodeBase32 ( const string & str ) {\n  vector < unsigned char > vchRet = DecodeBase32 ( str . c_str ( ) ) ;\n  return string ( ( const char * ) & vchRet [ 0 ] , vchRet . size ( ) ) ;\n}\n",
        "string encode ( string message ) {\n  string result ;\n  for ( char c : message ) {\n    if ( islower ( c ) ) c = tolower ( c ) ;\n    if ( isupper ( c ) ) c = toupper ( c ) ;\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) c = char ( ( int ) c + 2 ) ;\n    result += c ;\n  }\n  return result ;\n}\n",
        "string encode ( string message ) {\n  string result ;\n  for ( char c : message ) {\n    if ( islower ( c ) ) c = tolower ( c ) ;\n    if ( isupper ( c ) ) c = toupper ( c ) ;\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) c = ( char ) ( ( int ) c + 2 ) ;\n    result += c ;\n  }\n  return result ;\n}\n",
        "string encode ( string message ) {\n  string result ;\n  for ( char & c : message ) {\n    if ( islower ( c ) ) c = tolower ( c ) ;\n    if ( isupper ( c ) ) c = toupper ( c ) ;\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) c = char ( ( int ) c + 2 ) ;\n    result += c ;\n  }\n  return result ;\n}\n",
        "string encode ( string message ) {\n  string result ;\n  for ( char & c : message ) {\n    if ( islower ( c ) ) c = tolower ( c ) ;\n    if ( isupper ( c ) ) c = toupper ( c ) ;\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) c = ( char ) ( ( int ) c + 2 ) ;\n    result += c ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static / * * STRNEWLINE encode * \u2581 Encode \u2581 a \u2581 ZigZag - encoded \u2581 64 - bit \u2581 value . \u2581 ZigZag \u2581 encodes \u2581 signed \u2581 integers STRNEWLINE \u2581 * \u2581 into \u2581 values \u2581 that \u2581 can \u2581 be \u2581 efficiently \u2581 encoded \u2581 with \u2581 varint . \u2581 ( Otherwise , STRNEWLINE \u2581 * \u2581 negative \u2581 values \u2581 must \u2581 be \u2581 sign - extended \u2581 to \u2581 64 \u2581 bits \u2581 to \u2581 be \u2581 varint \u2581 encoded , STRNEWLINE \u2581 * \u2581 thus \u2581 always \u2581 taking \u2581 10 \u2581 bytes \u2581 on \u2581 the \u2581 wire . ) STRNEWLINE \u2581 * STRNEWLINE \u2581 * \u2581 @ param \u2581 n \u2581 A \u2581 signed \u2581 64 - bit \u2581 integer . STRNEWLINE \u2581 * \u2581 @ return \u2581 An \u2581 unsigned \u2581 64 - bit \u2581 integer , \u2581 stored \u2581 in \u2581 a \u2581 signed \u2581 int \u2581 because STRNEWLINE \u2581",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static / * * STRNEWLINE encode * \u2581 Encode \u2581 a \u2581 ZigZag - encoded \u2581 32 - bit \u2581 value . \u2581 ZigZag \u2581 encodes \u2581 signed \u2581 integers STRNEWLINE \u2581 * \u2581 into \u2581 values \u2581 that \u2581 can \u2581 be \u2581 efficiently \u2581 encoded \u2581 with \u2581 varint . \u2581 ( Otherwise , STRNEWLINE \u2581 * \u2581 negative \u2581 values \u2581 must \u2581 be \u2581 sign - extended \u2581 to \u2581 64 \u2581 bits \u2581 to \u2581 be \u2581 varint \u2581 encoded , STRNEWLINE \u2581 * \u2581 thus \u2581 always \u2581 taking \u2581 10 \u2581 bytes \u2581 on \u2581 the \u2581 wire . ) STRNEWLINE \u2581 * STRNEWLINE \u2581 * \u2581 @ param \u2581 n \u2581 A \u2581 signed \u2581 32 - bit \u2581 integer . STRNEWLINE \u2581 * \u2581 @ return \u2581 An \u2581 unsigned \u2581 32 - bit \u2581 integer , \u2581 stored \u2581 in \u2581 a \u2581 signed \u2581 int \u2581 because STRNEWLINE \u2581",
          "correctness": "uncompilable"
        },
        {
          "patch": " ",
          "correctness": "uncompilable"
        },
        {
          "patch": " ",
          "correctness": "uncompilable"
        },
        {
          "patch": " ",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = Character . toString ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = Character . toUpperCase ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = Character . toString ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuilder builder = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    builder . append ( c ) ;\n  }\n  return builder . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = Character . toString ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = Character . toString ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode ( String message ) {\n  StringBuilder builder = new StringBuilder ( ) ;\n  for ( char c : message . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) {\n      c = Character . toLowerCase ( c ) ;\n    }\n    if ( Character . isUpperCase ( c ) ) {\n      c = Character . toUpperCase ( c ) ;\n    }\n    if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) {\n      c = ( char ) ( ( int ) c + 2 ) ;\n    }\n    builder . append ( c ) ;\n  }\n  return builder . toString ( ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size(); \n        }\n    );\n    return words_list.get(0);\n}",
      "target": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            if (s2.size() != s1.size()) return s2.size() - s1.size(); \n            else return w1.compareTo(w2);\n        }\n    );\n    return words_list.get(0);\n}",
      "function range": "18,5-31,5",
      "raw_output": [
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) ( wordsList . get ( 1 ) ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) ( wordsList . get ( 1 ) ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) wordsList . get ( 1 ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) ( wordsList . get ( 1 ) ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) ( wordsList . get ( 1 ) ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) wordsList . get ( 1 ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( List < Character > ) w2 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( ( List < Character > ) w2 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new TreeSet < Character > ( c1 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( List < Character > ) w2 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( ( List < Character > ) w2 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( ( List < Character > ) w2 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . iterator ( ) . next ( ) . compareTo ( s2 . iterator ( ) . next ( ) ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . iterator ( ) . next ( ) . compareTo ( s2 . iterator ( ) . next ( ) ) ;\n}\n",
        "public static String findMax ( String [ ] words ) {\n  String [ ] wordsList = new String [ words . length ] ;\n  Arrays . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = new char [ ( ( w1 ) . length ) ] ;\n  Arrays . sort ( c1 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( ( w2 ) . length ) ;\n  Arrays . sort ( c2 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( ( String ) w1 ) . toCharArray ( ) ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( ( String ) w2 ) . toCharArray ( ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( String [ ] words ) {\n  String [ ] wordsList = new String [ words . length ] ;\n  Arrays . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = new char [ ( ( w1 ) . length ) ] ;\n  Arrays . sort ( c1 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  HashSet s1 = new HashSet ( c1 ) ;\n  HashSet c2 = new HashSet ( ( ( w2 ) . length ) ;\n  Arrays . sort ( c2 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  HashSet s2 = new HashSet ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( String [ ] words ) {\n  String [ ] wordsList = new String [ words . length ] ;\n  Arrays . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = new char [ ( ( w1 ) . length ) ] ;\n  Arrays . sort ( c1 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  HashSet s1 = new HashSet ( c1 ) ;\n  HashSet c2 = new HashSet ( ( ( w2 ) . length ) ) ;\n  Arrays . sort ( c2 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  HashSet s2 = new HashSet ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public static String findMax ( String [ ] words ) {\n  String [ ] wordsList = new String [ words . length ] ;\n  Arrays . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = new char [ ( ( w1 ) . length ) ] ;\n  Arrays . sort ( c1 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  TreeSet < String > s1 = new TreeSet < String > ( c1 ) ;\n  TreeSet < String > c2 = new TreeSet < String > ( ( ( w2 ) . length ) ;\n  Arrays . sort ( c2 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  TreeSet < String > s2 = new TreeSet < String > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n"
      ],
      "mid_translation": [
        "public : string find_max ( vector < string > & words ) {\n  vector < string > words_list ( words . begin ( ) , words . end ( ) ) ;\n  sort ( words_list . begin ( ) , words_list . end ( ) , ( w1 , w2 ) -> begin ( ) , ( w1 , w2 ) -> end ( ) ) ;\n  vector < char > c1 ( ( * w1 ) . begin ( ) , ( * w1 ) . end ( ) ) ;\n  unordered_set < char > s1 ( c1 . begin ( ) , c1 . end ( ) ) ;\n  unordered_set < char > c2 ( ( * w2 ) . begin ( ) , ( * w2 ) . end ( ) ) ;\n  unordered_set < char > s2 ( c2 . begin ( ) , c2 . end ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public : string find_max ( vector < string > & words ) {\n  vector < string > words_list ( words . begin ( ) , words . end ( ) ) ;\n  sort ( words_list . begin ( ) , words_list . end ( ) , ( w1 , w2 ) -> begin ( ) , ( w1 , w2 ) -> end ( ) ) ;\n  vector < char > c1 ( ( * w1 ) . begin ( ) , ( * w1 ) . end ( ) ) ;\n  unordered_set < char > s1 ( c1 . begin ( ) , c1 . end ( ) ) ;\n  unordered_set < char > c2 ( ( * w2 ) . begin ( ) , ( * w2 ) . end ( ) ) ;\n  unordered_set < char > s2 ( c2 . begin ( ) , c2 . end ( ) ) ;\n  return s1 . end ( ) - s2 . end ( ) ;\n}\n",
        "public : string find_max ( vector < string > & words ) {\n  vector < string > words_list ( words . begin ( ) , words . end ( ) ) ;\n  sort ( words_list . begin ( ) , words_list . end ( ) , ( w1 , w2 ) -> begin ( ) , ( w1 , w2 ) -> end ( ) ) ;\n  vector < char > c1 ( ( * w1 ) . begin ( ) , ( * w2 ) . begin ( ) ) ;\n  unordered_set < char > s1 ( c1 . begin ( ) , c1 . end ( ) ) ;\n  unordered_set < char > c2 ( ( * w2 ) . begin ( ) , ( * w1 ) . end ( ) ) ;\n  unordered_set < char > s2 ( c2 . begin ( ) , c2 . end ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n",
        "public : string find_max ( vector < string > & words ) {\n  vector < string > words_list ( words . begin ( ) , words . end ( ) ) ;\n  sort ( words_list . begin ( ) , words_list . end ( ) , ( w1 , w2 ) -> begin ( ) , ( w1 , w2 ) -> end ( ) ) ;\n  vector < char > c1 ( ( * w1 ) . begin ( ) , ( * w2 ) . begin ( ) ) ;\n  unordered_set < char > s1 ( c1 . begin ( ) , c1 . end ( ) ) ;\n  unordered_set < char > c2 ( ( * w2 ) . begin ( ) , ( * w1 ) . end ( ) ) ;\n  unordered_set < char > s2 ( c2 . begin ( ) , c2 . end ( ) ) ;\n  return s1 . end ( ) - s2 . end ( ) ;\n}\n",
        "public : string find_max ( vector < string > & words ) {\n  vector < string > words_list ( words . begin ( ) , words . end ( ) ) ;\n  sort ( words_list . begin ( ) , words_list . end ( ) , ( w1 , w2 ) -> begin ( ) , ( w1 , w2 ) -> end ( ) ) ;\n  vector < char > c1 ( ( ( * w1 ) . begin ( ) ) , ( ( * w2 ) . begin ( ) ) ) ;\n  unordered_set < char > s1 ( c1 . begin ( ) , c1 . end ( ) ) ;\n  unordered_set < char > c2 ( ( ( * w2 ) . begin ( ) ) , ( ( * w1 ) . begin ( ) ) ) ;\n  unordered_set < char > s2 ( c2 . begin ( ) , c2 . end ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) ( wordsList . get ( 1 ) ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) ( wordsList . get ( 1 ) ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) wordsList . get ( 1 ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) ( wordsList . get ( 1 ) ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) ( wordsList . get ( 1 ) ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  char [ ] c1 = ( char [ ] ) ( wordsList . get ( 0 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( char [ ] ) wordsList . get ( 1 ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( List < Character > ) w2 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( ( List < Character > ) w2 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new TreeSet < Character > ( c1 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( List < Character > ) w2 ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . max ( s2 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( ( List < Character > ) w2 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( ( List < Character > ) w2 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . iterator ( ) . next ( ) . compareTo ( s2 . iterator ( ) . next ( ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( List < Character > ) w1 ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s1 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( s1 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > c2 = new HashSet < Character > ( c1 ) ;\n  Collections . sort ( c2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  Set < Character > s2 = new HashSet < Character > ( c2 ) ;\n  Collections . sort ( s2 , ( w1 , w2 ) -> w1 . length ( ) - w2 . length ( ) ) ;\n  return s1 . iterator ( ) . next ( ) . compareTo ( s2 . iterator ( ) . next ( ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( String [ ] words ) {\n  String [ ] wordsList = new String [ words . length ] ;\n  Arrays . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = new char [ ( ( w1 ) . length ) ] ;\n  Arrays . sort ( c1 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( ( w2 ) . length ) ;\n  Arrays . sort ( c2 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( List < String > words ) {\n  List < String > wordsList = new ArrayList < String > ( words ) ;\n  Collections . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  List < Character > c1 = new ArrayList < Character > ( ( ( String ) w1 ) . toCharArray ( ) ) ;\n  Collections . sort ( c1 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  TreeSet < Character > s1 = new TreeSet < Character > ( c1 ) ;\n  TreeSet < Character > c2 = new TreeSet < Character > ( ( ( String ) w2 ) . toCharArray ( ) ) ;\n  TreeSet < Character > s2 = new TreeSet < Character > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( String [ ] words ) {\n  String [ ] wordsList = new String [ words . length ] ;\n  Arrays . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = new char [ ( ( w1 ) . length ) ] ;\n  Arrays . sort ( c1 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  HashSet s1 = new HashSet ( c1 ) ;\n  HashSet c2 = new HashSet ( ( ( w2 ) . length ) ;\n  Arrays . sort ( c2 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  HashSet s2 = new HashSet ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( String [ ] words ) {\n  String [ ] wordsList = new String [ words . length ] ;\n  Arrays . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = new char [ ( ( w1 ) . length ) ] ;\n  Arrays . sort ( c1 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  HashSet s1 = new HashSet ( c1 ) ;\n  HashSet c2 = new HashSet ( ( ( w2 ) . length ) ) ;\n  Arrays . sort ( c2 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  HashSet s2 = new HashSet ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max ( String [ ] words ) {\n  String [ ] wordsList = new String [ words . length ] ;\n  Arrays . sort ( wordsList , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  char [ ] c1 = new char [ ( ( w1 ) . length ) ] ;\n  Arrays . sort ( c1 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  TreeSet < String > s1 = new TreeSet < String > ( c1 ) ;\n  TreeSet < String > c2 = new TreeSet < String > ( ( ( w2 ) . length ) ;\n  Arrays . sort ( c2 , ( w1 , w2 ) -> w1 . compareTo ( w2 ) ) ;\n  TreeSet < String > s2 = new TreeSet < String > ( c2 ) ;\n  return s1 . size ( ) - s2 . size ( ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\"); \n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
      "target": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\"); \n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
      "function range": "13,5-20,5",
      "raw_output": [
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . trim ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toString ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) throws NoSuchAlgorithmException {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . trim ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) throws Exception {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . trim ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) return null ;\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) throws NoSuchAlgorithmException {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = null ;\n  try {\n    md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  }\n  catch ( NoSuchAlgorithmException e ) {\n    e . printStackTrace ( ) ;\n  }\n  byte [ ] digest = md5 . digest ( text . getBytes ( ) ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) throws Exception {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) throws Exception {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ) ;\n  digest . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = digest . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . trim ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ) ;\n  digest . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = digest . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . trim ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ) ;\n  digest . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = digest . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ) ;\n  digest . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = digest . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toUpperCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ) ;\n  digest . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = digest . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toString ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) throws NoSuchAlgorithmException {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) return null ;\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = null ;\n  try {\n    md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  }\n  catch ( NoSuchAlgorithmException e ) {\n    e . printStackTrace ( ) ;\n  }\n  byte [ ] digest = md5 . digest ( text . getBytes ( ) ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) throws Exception {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) throws NoSuchAlgorithmException {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = null ;\n  try {\n    md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  }\n  catch ( NoSuchAlgorithmException e ) {\n    e . printStackTrace ( ) ;\n  }\n  byte [ ] digest = md5 . digest ( text . getBytes ( ) ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) {\n  if ( text == null ) return null ;\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "public static String stringToMD5 ( String text ) throws Exception {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string string_to_md5 ( string text ) {\n  if ( text == \"\" ) return string ( ) ;\n  MD5 md5 ;\n  md5 . Update ( text . c_str ( ) , text . size ( ) ) ;\n  byte digest [ MD5 :: DIGEST_SIZE ] ;\n  md5 . Final ( digest ) ;\n  return DatatypeConverter :: printHexBinary ( digest ) . c_str ( ) ;\n}\n",
        "string string_to_md5 ( string text ) {\n  if ( text == \"\" ) return string ( ) ;\n  MD5 md5 ;\n  md5 . Update ( text . c_str ( ) , text . size ( ) ) ;\n  byte digest [ MD5 :: DIGEST_SIZE ] ;\n  md5 . Final ( digest ) ;\n  return DatatypeConverter :: printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n",
        "string string_to_md5 ( string text ) {\n  if ( text == \"\" ) return string ( ) ;\n  SHA sha ;\n  sha . Update ( text . c_str ( ) , text . size ( ) ) ;\n  byte digest [ SHA :: DIGEST_SIZE ] ;\n  sha . Final ( digest ) ;\n  return DatatypeConverter :: printHexBinary ( digest ) . c_str ( ) ;\n}\n",
        "string string_to_md5 ( string text ) {\n  if ( text == \"\" ) return string ( ) ;\n  MD5 md5 ;\n  md5 . Update ( text . c_str ( ) , text . size ( ) ) ;\n  byte digest [ MD5 :: DIGEST_SIZE ] ;\n  md5 . Final ( digest ) ;\n  return DatatypeConverter :: printHexBinary ( digest ) . ToLower ( ) ;\n}\n",
        "string string_to_md5 ( string text ) {\n  if ( text == \"\" ) return string ( ) ;\n  MD5 md5 ;\n  md5 . Update ( text . c_str ( ) , text . size ( ) ) ;\n  byte digest [ MD5 :: DIGEST_SIZE ] ;\n  md5 . Final ( digest , sizeof ( digest ) ) ;\n  return DatatypeConverter :: printHexBinary ( digest ) . toLowerCase ( ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . trim ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . trim ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) throws Exception {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . trim ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) return null ;\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = null ;\n  try {\n    md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  }\n  catch ( NoSuchAlgorithmException e ) {\n    e . printStackTrace ( ) ;\n  }\n  byte [ ] digest = md5 . digest ( text . getBytes ( ) ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) throws Exception {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) throws Exception {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ) ;\n  digest . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = digest . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . trim ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ) ;\n  digest . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = digest . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . trim ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ) ;\n  digest . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = digest . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ) ;\n  digest . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = digest . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toUpperCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ) ;\n  digest . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = digest . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) return null ;\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = null ;\n  try {\n    md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  }\n  catch ( NoSuchAlgorithmException e ) {\n    e . printStackTrace ( ) ;\n  }\n  byte [ ] digest = md5 . digest ( text . getBytes ( ) ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) throws Exception {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = null ;\n  try {\n    md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  }\n  catch ( NoSuchAlgorithmException e ) {\n    e . printStackTrace ( ) ;\n  }\n  byte [ ] digest = md5 . digest ( text . getBytes ( ) ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) {\n  if ( text == null ) return null ;\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5 ( String text ) throws Exception {\n  if ( text == null ) {\n    return null ;\n  }\n  MessageDigest md5 = MessageDigest . getInstance ( \"MD5\" ) ;\n  md5 . update ( text . getBytes ( ) ) ;\n  byte [ ] digest = md5 . digest ( ) ;\n  return DatatypeConverter . printHexBinary ( digest ) . toLowerCase ( ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) { \n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
      "target": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) { \n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
      "function range": "19,5-40,5",
      "raw_output": [
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) {\n    return res ;\n  }\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s . isEmpty ( ) ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) {\n    return res ;\n  }\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s . isEmpty ( ) ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) {\n    return res ;\n  }\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s . isEmpty ( ) ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) {\n    return res ;\n  }\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s . isEmpty ( ) ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) {\n    return res ;\n  }\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n",
        "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s . isEmpty ( ) ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}\n"
      ],
      "mid_translation": [
        "public : unordered_map < char , int > histogram ( string s ) {\n  unordered_map < char , int > res ;\n  if ( s . empty ( ) ) return res ;\n  vector < string > list_letters = s . split ( \" \" ) ;\n  int count_letter [ 26 ] ;\n  for ( int i = 0 ;\n  i < list_letters . size ( ) ;\n  i ++ ) {\n    char c = list_letters [ i ] [ 0 ] ;\n    count_letter [ c - 'a' ] ++ ;\n  }\n  int most_count = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( count_letter [ i ] < most_count ) {\n      most_count = count_letter [ i ] ;\n      res . clear ( ) ;\n      res [ ( char ) ( 'a' + i ) ] = most_count ;\n    }\n    else if ( count_letter [ i ] == most_count ) {\n      res [ ( char ) ( 'a' + i ) ] = most_count ;\n    }\n  }\n  if ( most_count == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public : unordered_map < char , int > histogram ( string s ) {\n  unordered_map < char , int > res ;\n  if ( s . empty ( ) ) return res ;\n  vector < string > list_letters = s . split ( \" \" ) ;\n  int count_letter [ 26 ] ;\n  for ( int i = 0 ;\n  i < list_letters . size ( ) ;\n  i ++ ) {\n    char c = list_letters [ i ] . at ( 0 ) ;\n    count_letter [ c - 'a' ] ++ ;\n  }\n  int most_count = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( count_letter [ i ] < most_count ) {\n      most_count = count_letter [ i ] ;\n      res . clear ( ) ;\n      res [ ( char ) ( 'a' + i ) ] = most_count ;\n    }\n    else if ( count_letter [ i ] == most_count ) {\n      res [ ( char ) ( 'a' + i ) ] = most_count ;\n    }\n  }\n  if ( most_count == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public : unordered_map < char , int > histogram ( string s ) {\n  unordered_map < char , int > res ;\n  if ( s . empty ( ) ) return res ;\n  vector < string > list_letters = s . split ( \" \" ) ;\n  vector < int > count_letter ( 26 , 0 ) ;\n  for ( int i = 0 ;\n  i < list_letters . size ( ) ;\n  i ++ ) {\n    char c = list_letters [ i ] . at ( 0 ) ;\n    count_letter [ c - 'a' ] ++ ;\n  }\n  int most_count = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( count_letter [ i ] < most_count ) {\n      most_count = count_letter [ i ] ;\n      res . clear ( ) ;\n      res [ ( char ) ( 'a' + i ) ] = most_count ;\n    }\n    else if ( count_letter [ i ] == most_count ) {\n      res [ ( char ) ( 'a' + i ) ] = most_count ;\n    }\n  }\n  if ( most_count == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public : unordered_map < char , int > histogram ( string s ) {\n  unordered_map < char , int > res ;\n  if ( s . empty ( ) ) return res ;\n  vector < string > list_letters = s . split ( \" \" ) ;\n  vector < int > count_letter ( 26 , 0 ) ;\n  for ( int i = 0 ;\n  i < list_letters . size ( ) ;\n  i ++ ) {\n    char c = list_letters [ i ] [ 0 ] ;\n    count_letter [ c - 'a' ] ++ ;\n  }\n  int most_count = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( count_letter [ i ] < most_count ) {\n      most_count = count_letter [ i ] ;\n      res . clear ( ) ;\n      res [ ( char ) ( 'a' + i ) ] = most_count ;\n    }\n    else if ( count_letter [ i ] == most_count ) {\n      res [ ( char ) ( 'a' + i ) ] = most_count ;\n    }\n  }\n  if ( most_count == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n",
        "public : unordered_map < char , int > histogram ( string s ) {\n  unordered_map < char , int > res ;\n  if ( s . empty ( ) ) return res ;\n  vector < string > list_letters = s . split ( \" \" ) ;\n  vector < int > count_letter ( 26 ) ;\n  for ( int i = 0 ;\n  i < list_letters . size ( ) ;\n  i ++ ) {\n    char c = list_letters [ i ] . at ( 0 ) ;\n    count_letter [ c - 'a' ] ++ ;\n  }\n  int most_count = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( count_letter [ i ] < most_count ) {\n      most_count = count_letter [ i ] ;\n      res . clear ( ) ;\n      res [ ( char ) ( 'a' + i ) ] = most_count ;\n    }\n    else if ( count_letter [ i ] == most_count ) {\n      res [ ( char ) ( 'a' + i ) ] = most_count ;\n    }\n  }\n  if ( most_count == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) {\n    return res ;\n  }\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s . isEmpty ( ) ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) {\n    return res ;\n  }\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s . isEmpty ( ) ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) {\n    return res ;\n  }\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s . isEmpty ( ) ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) {\n    return res ;\n  }\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s . isEmpty ( ) ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) {\n    return res ;\n  }\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) {\n    res . clear ( ) ;\n  }\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s == null ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap < Character , Integer > histogram ( String s ) {\n  HashMap < Character , Integer > res = new HashMap < Character , Integer > ( ) ;\n  if ( s . isEmpty ( ) ) return res ;\n  String [ ] listLetters = s . split ( \" \" ) ;\n  int [ ] countLetter = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < listLetters . length ;\n  i ++ ) {\n    char c = listLetters [ i ] . charAt ( 0 ) ;\n    countLetter [ c - 'a' ] ++ ;\n  }\n  int mostCount = 0 ;\n  for ( int i = 0 ;\n  i < 26 ;\n  i ++ ) {\n    if ( countLetter [ i ] < mostCount ) {\n      mostCount = countLetter [ i ] ;\n      res . clear ( ) ;\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n    else if ( countLetter [ i ] == mostCount ) {\n      res . put ( ( char ) ( 'a' + i ) , mostCount ) ;\n    }\n  }\n  if ( mostCount == 0 ) res . clear ( ) ;\n  return res ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) { \n        if (arr[i] != arr[arr.length - i]) \n            result += 1;\n    }\n    return result;\n}",
      "target": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length / 2; i += 1) { \n        if (arr[i] != arr[arr.length - i - 1]) \n            result += 1;\n    }\n    return result;\n}",
      "function range": "13,5-21,5",
      "raw_output": [
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static final int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i - 1 ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - 1 ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static final int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i - 1 ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - 1 ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i - 1 ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static final int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i - 1 ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - 1 ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}\n",
        "static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int smallestChange ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i - 1 ] ) result += 1 ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : int smallest_change ( vector < int > arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . size ( ) - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public : int smallest_change ( vector < int > & arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . size ( ) - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "int smallest_change ( vector < int > arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . size ( ) - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public : int smallestChange ( vector < int > arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . size ( ) - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "int smallest_change ( vector < int > & arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . size ( ) - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i - 1 ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - 1 ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i - 1 ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - 1 ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i - 1 ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i - 1 ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - 1 ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i ] ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change ( int [ ] arr ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i += 1 ) {\n    if ( arr [ i ] != arr [ arr . length - i - 1 ] ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n    String result = Integer.toHexString(decimal); \n    return \"db\" + result + \"db\";\n}",
      "target": "public static String decimal_to_binary(int decimal) {\n    String result = Integer.toBinaryString(decimal); \n    return \"db\" + result + \"db\";\n}",
      "function range": "15,5-18,5",
      "raw_output": [
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toHexString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toBinaryString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toString ( decimal , 16 ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toHexString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toBinaryString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toString ( decimal , 16 ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result ;\n  result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toHexString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = String . valueOf ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = String . valueOf ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimal_to_binary ( int decimal ) {\n  String result = String . valueOf ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toHexString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = \"\" + decimal ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = Integer . toHexString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "public static String decimalToBinary ( int decimal ) {\n  String result = String . valueOf ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n"
      ],
      "mid_translation": [
        "string decimal_to_binary ( int decimal ) {\n  string result = to_string ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "string decimal_to_binary ( unsigned decimal ) {\n  string result = to_string ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "string decimal_to_binary ( int decimal ) {\n  string result ;\n  result = to_string ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "QString decimal_to_binary ( int decimal ) {\n  QString result = QString :: number ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n",
        "string decimal_to_binary ( int decimal ) {\n  string result ;\n  sprintf ( result . c_str ( ) , \"%d\" , decimal ) ;\n  return \"db\" + result + \"db\" ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toHexString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toBinaryString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal , 16 ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toHexString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toBinaryString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal , 16 ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result ;\n  result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toHexString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = String . valueOf ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = String . valueOf ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = String . valueOf ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toHexString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = \"\" + decimal ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toHexString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = Integer . toString ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary ( int decimal ) {\n  String result = String . valueOf ( decimal ) ;\n  return \"db\" + result + \"db\" ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false; \n    }\n    return true;\n}",
      "target": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false; \n    }\n    return true;\n}",
      "function range": "22,5-37,5",
      "raw_output": [
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static final boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static final boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static final boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static final boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static final boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static final boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static final boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static final boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n",
        "public static final boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static final boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n",
        "public static final boolean isSorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n"
      ],
      "mid_translation": [
        "bool is_sorted ( vector < int > lst ) {\n  unordered_map < int , int > count_num ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) count_num [ lst [ i ] ] = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) count_num [ lst [ i ] ] = count_num [ lst [ i ] ] + 1 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( count_num [ lst [ i ] ] > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . size ( ) - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n",
        "public : bool is_sorted ( vector < int > lst ) {\n  unordered_map < int , int > count_num ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) count_num [ lst [ i ] ] = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) count_num [ lst [ i ] ] = count_num [ lst [ i ] ] + 1 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( count_num [ lst [ i ] ] > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . size ( ) - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n",
        "public : bool is_sorted ( vector < int > & lst ) {\n  unordered_map < int , int > count_num ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) count_num [ lst [ i ] ] = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) count_num [ lst [ i ] ] = count_num [ lst [ i ] ] + 1 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( count_num [ lst [ i ] ] > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . size ( ) - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n",
        "bool is_sorted ( vector < int > & lst ) {\n  unordered_map < int , int > count_num ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) count_num [ lst [ i ] ] = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) count_num [ lst [ i ] ] = count_num [ lst [ i ] ] + 1 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( count_num [ lst [ i ] ] > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . size ( ) - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n",
        "public : bool isSorted ( vector < int > lst ) {\n  unordered_map < int , int > count_num ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) count_num [ lst [ i ] ] = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) count_num [ lst [ i ] ] = count_num [ lst [ i ] ] + 1 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( count_num [ lst [ i ] ] > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . size ( ) - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > countNum = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    countNum . put ( lst [ i ] , countNum . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( countNum . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) {\n      return false ;\n    }\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) {\n      return false ;\n    }\n  }\n  return true ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted ( int [ ] lst ) {\n  HashMap < Integer , Integer > count_num = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , 0 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    count_num . put ( lst [ i ] , count_num . get ( lst [ i ] ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( count_num . get ( lst [ i ] ) > 2 ) return false ;\n  }\n  for ( int i = 0 ;\n  i < lst . length - 1 ;\n  i ++ ) {\n    if ( lst [ i ] <= lst [ i + 1 ] ) return false ;\n  }\n  return true ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\"; \n    for (int i = 0; i < operand.length; i += 1) { \n        expression += operator[i] + operand[i]; \n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
      "target": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = operand[0] + \"\"; \n    for (int i = 0; i < operator.length; i += 1) { \n        expression += operator[i] + operand[i + 1]; \n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
      "function range": "30,5-38,5",
      "raw_output": [
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  try {\n    String expression = \"\" ;\n    for ( int i = 0 ;\n    i < operand . length ;\n    i += 1 ) {\n      expression += operator [ i ] + operand [ i ] ;\n    }\n    return Double . parseDouble ( expression ) ;\n  }\n  catch ( Exception e ) {\n    throw e ;\n  }\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  Runtime runtime = Runtime . getRuntime ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return Double . parseDouble ( runtime . exec ( expression ) ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( double ) engine . eval ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws RuntimeException {\n  try {\n    String expression = \"\" ;\n    for ( int i = 0 ;\n    i < operand . length ;\n    i += 1 ) {\n      expression += operator [ i ] + operand [ i ] ;\n    }\n    return Double . parseDouble ( expression ) ;\n  }\n  catch ( Exception e ) {\n    throw new RuntimeException ( e ) ;\n  }\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return Double . parseDouble ( engine . eval ( expression ) ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . enter ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( double ) engine . eval ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . getCurrentContext ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( double ) engine . eval ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . getCurrentContext ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( Double ) engine . eval ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . enter ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( Double ) engine . eval ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  Runtime runtime = Runtime . getRuntime ( ) ;\n  try {\n    String expression = \"\" ;\n    for ( int i = 0 ;\n    i < operand . length ;\n    i += 1 ) {\n      expression += operator [ i ] + operand [ i ] ;\n    }\n    return Double . parseDouble ( runtime . exec ( expression ) ) ;\n  }\n  finally {\n    runtime . shutdown ( ) ;\n  }\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"#.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"##.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"#.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return df . format ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return df . format ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . enter ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( double ) engine . eval ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . getCurrentContext ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( double ) engine . eval ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . getCurrentContext ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( Double ) engine . eval ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . enter ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( Double ) engine . eval ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . getCurrentContext ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return Double . parseDouble ( engine . eval ( expression ) ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"#.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"##.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return df . format ( expression ) ;\n}\n",
        "public static double doAlgebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"##.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return df . format ( expression ) ;\n}\n"
      ],
      "mid_translation": [
        "template < typename T > double do_algebra ( const std :: vector < std :: string > & operator , const std :: vector < int > & operand ) throw ( std :: runtime_error , std :: runtime_error ) {\n  boost :: shared_ptr < T > t ( new T ) ;\n  std :: string expression ;\n  for ( int i = 0 ;\n  i < operand . size ( ) ;\n  i += 1 ) expression += operator [ i ] + operand [ i ] ;\n  return static_cast < double > ( t -> eval ( expression ) ) ;\n}\n",
        "template < typename T > double do_algebra ( const std :: vector < std :: string > & operator , const std :: vector < int > & operand ) throw ( std :: runtime_error , std :: runtime_error ) {\n  boost :: shared_ptr < T > t ( new T ) ;\n  boost :: shared_ptr < T > p ( new T ) ;\n  std :: string expression ;\n  for ( int i = 0 ;\n  i < operand . size ( ) ;\n  i += 1 ) expression += operator [ i ] + operand [ i ] ;\n  return static_cast < double > ( t -> eval ( expression ) ) ;\n}\n",
        "template < typename T > double do_algebra ( const std :: vector < std :: string > & operator , const std :: vector < int > & operand ) throw ( std :: runtime_error , std :: runtime_error ) {\n  boost :: shared_ptr < T > t ( new T ) ;\n  boost :: shared_ptr < T > p ( new T ) ;\n  std :: string expression ;\n  for ( int i = 0 ;\n  i < operand . size ( ) ;\n  i += 1 ) expression += operator [ i ] + operand [ i ] ;\n  return boost :: lexical_cast < double > ( expression ) ;\n}\n",
        "template < typename T > double do_algebra ( const std :: vector < std :: string > & operator , const std :: vector < int > & operand ) throw ( std :: runtime_error , std :: runtime_error ) {\n  boost :: shared_ptr < T > t ( new T ) ;\n  boost :: shared_ptr < T > p ( new T ) ;\n  std :: string expression ;\n  for ( int i = 0 ;\n  i < operand . size ( ) ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return static_cast < double > ( t -> eval ( expression ) ) ;\n}\n",
        "template < typename T > double do_algebra ( const std :: vector < std :: string > & operator , const std :: vector < int > & operand ) throw ( std :: runtime_error , std :: runtime_error ) {\n  boost :: shared_ptr < T > t ( new T ) ;\n  boost :: shared_ptr < T > p ( new T ) ;\n  std :: string expression ;\n  for ( int i = 0 ;\n  i < operand . size ( ) ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return boost :: lexical_cast < double > ( expression ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  try {\n    String expression = \"\" ;\n    for ( int i = 0 ;\n    i < operand . length ;\n    i += 1 ) {\n      expression += operator [ i ] + operand [ i ] ;\n    }\n    return Double . parseDouble ( expression ) ;\n  }\n  catch ( Exception e ) {\n    throw e ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  Runtime runtime = Runtime . getRuntime ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return Double . parseDouble ( runtime . exec ( expression ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( double ) engine . eval ( expression ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws RuntimeException {\n  try {\n    String expression = \"\" ;\n    for ( int i = 0 ;\n    i < operand . length ;\n    i += 1 ) {\n      expression += operator [ i ] + operand [ i ] ;\n    }\n    return Double . parseDouble ( expression ) ;\n  }\n  catch ( Exception e ) {\n    throw new RuntimeException ( e ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return Double . parseDouble ( engine . eval ( expression ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . enter ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( double ) engine . eval ( expression ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . getCurrentContext ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( double ) engine . eval ( expression ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . getCurrentContext ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( Double ) engine . eval ( expression ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . enter ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( Double ) engine . eval ( expression ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  Runtime runtime = Runtime . getRuntime ( ) ;\n  try {\n    String expression = \"\" ;\n    for ( int i = 0 ;\n    i < operand . length ;\n    i += 1 ) {\n      expression += operator [ i ] + operand [ i ] ;\n    }\n    return Double . parseDouble ( runtime . exec ( expression ) ) ;\n  }\n  finally {\n    runtime . shutdown ( ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"#.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"##.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"#.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return df . format ( expression ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return df . format ( expression ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . enter ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( double ) engine . eval ( expression ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . getCurrentContext ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( double ) engine . eval ( expression ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . getCurrentContext ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( Double ) engine . eval ( expression ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . enter ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return ( Double ) engine . eval ( expression ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  ScriptEngine engine = new ScriptEngineManager ( ) . getEngineByName ( \"JavaScript\" ) ;\n  Context cx = Context . getCurrentContext ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return Double . parseDouble ( engine . eval ( expression ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"#.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"##.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  StringBuffer expression = new StringBuffer ( ) ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression . append ( operator [ i ] ) . append ( operand [ i ] ) ;\n  }\n  return df . format ( expression . toString ( ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"###.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return df . format ( expression ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra ( String [ ] operator , int [ ] operand ) throws Exception {\n  DecimalFormat df = new DecimalFormat ( \"##.##\" ) ;\n  DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ;\n  String expression = \"\" ;\n  for ( int i = 0 ;\n  i < operand . length ;\n  i += 1 ) {\n    expression += operator [ i ] + operand [ i ] ;\n  }\n  return df . format ( expression ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) \n            result += 1;\n    }\n    return result;\n}",
      "target": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        sentence = sentence.trim(); \n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "raw_output": [
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static final int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static final int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  List < String > sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \".|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \".|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \".|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static final int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static final int isBored ( String S ) {\n  String [ ] sentences = S . split ( \".|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  List < String > sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}\n",
        "public static int isBored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : int is_bored ( string S ) {\n  vector < string > sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( auto sentence : sentences ) {\n    if ( sentence . size ( ) >= 2 && sentence . substr ( 0 , 2 ) == \"I \" ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "int is_bored ( string S ) {\n  vector < string > sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( auto sentence : sentences ) {\n    if ( sentence . size ( ) >= 2 && sentence . substr ( 0 , 2 ) == \"I \" ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "int is_bored ( string S ) {\n  vector < string > sentences ;\n  S . split ( \".|\\\\?|!\" , sentences ) ;\n  int result = 0 ;\n  for ( auto sentence : sentences ) {\n    if ( sentence . size ( ) >= 2 && sentence . substr ( 0 , 2 ) == \"I \" ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "public : int is_bored ( string S ) {\n  vector < string > sentences ;\n  S . split ( \".|\\\\?|!\" , sentences ) ;\n  int result = 0 ;\n  for ( auto sentence : sentences ) {\n    if ( sentence . size ( ) >= 2 && sentence . substr ( 0 , 2 ) == \"I \" ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n",
        "int is_bored ( string S ) {\n  vector < string > sentences ;\n  S . split ( \"\\\\.|\\\\?|!\" , sentences ) ;\n  int result = 0 ;\n  for ( auto sentence : sentences ) {\n    if ( sentence . size ( ) >= 2 && sentence . substr ( 0 , 2 ) == \"I \" ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  List < String > sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \".|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \".|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \".|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \".|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  List < String > sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . startsWith ( \"I \" ) ) result += 1 ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored ( String S ) {\n  String [ ] sentences = S . split ( \"\\\\.|\\\\?|!\" ) ;\n  int result = 0 ;\n  for ( String sentence : sentences ) {\n    if ( sentence . length ( ) >= 2 && sentence . substring ( 0 , 2 ) . equals ( \"I \" ) ) {\n      result += 1 ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1; \n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
      "target": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] < 0) prod *= -1; \n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
      "function range": "16,5-28,5",
      "raw_output": [
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i : arr ) {\n    if ( i == 0 ) {\n      prod = 0 ;\n    }\n    else if ( i > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i : arr ) {\n    sum += Math . abs ( i ) ;\n  }\n  return prod * sum ;\n}\n",
        "static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) sum += Math . abs ( arr [ i ] ) ;\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i : arr ) {\n    if ( i == 0 ) prod = 0 ;\n    else if ( i > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i : arr ) sum += Math . abs ( i ) ;\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i : arr ) sum += Math . abs ( i ) ;\n  return prod * sum ;\n}\n",
        "static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) sum += Math . abs ( arr [ i ] ) ;\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) sum += Math . abs ( arr [ i ] ) ;\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i : arr ) {\n    if ( i == 0 ) prod = 0 ;\n    else if ( i > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i : arr ) sum += Math . abs ( i ) ;\n  return prod * sum ;\n}\n",
        "public static int prodSigs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) sum += Math . abs ( arr [ i ] ) ;\n  return prod * sum ;\n}\n",
        "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) sum += Math . abs ( arr [ i ] ) ;\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i : arr ) {\n    if ( i == 0 ) prod = 0 ;\n    else if ( i > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i : arr ) {\n    sum += Math . abs ( i ) ;\n  }\n  return prod * sum ;\n}\n",
        "static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i : arr ) {\n    sum += Math . abs ( i ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigs ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public static int prodSigns ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i : arr ) {\n    if ( i == 0 ) {\n      prod = 0 ;\n    }\n    else if ( i > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i : arr ) {\n    sum += Math . abs ( i ) ;\n  }\n  return prod * sum ;\n}\n"
      ],
      "mid_translation": [
        "int prod_signs ( vector < int > arr ) {\n  if ( arr . size ( ) == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) sum += abs ( arr [ i ] ) ;\n  return prod * sum ;\n}\n",
        "int prod_signs ( vector < int > arr ) {\n  if ( arr . size ( ) == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    sum += abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "public : int prod_signs ( vector < int > arr ) {\n  if ( arr . size ( ) == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    sum += abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}\n",
        "int prod_signs ( vector < int > arr ) {\n  if ( arr . size ( ) == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) sum += abs ( arr [ i ] ) ;\n  return prod * sum ;\n}\n",
        "public : int prod_signs ( vector < int > arr ) {\n  if ( arr . size ( ) == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) ;\n  i ++ ) sum += abs ( arr [ i ] ) ;\n  return prod * sum ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i : arr ) {\n    if ( i == 0 ) {\n      prod = 0 ;\n    }\n    else if ( i > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i : arr ) {\n    sum += Math . abs ( i ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) sum += Math . abs ( arr [ i ] ) ;\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i : arr ) {\n    if ( i == 0 ) prod = 0 ;\n    else if ( i > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i : arr ) sum += Math . abs ( i ) ;\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i : arr ) sum += Math . abs ( i ) ;\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) sum += Math . abs ( arr [ i ] ) ;\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) sum += Math . abs ( arr [ i ] ) ;\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i : arr ) {\n    if ( i == 0 ) prod = 0 ;\n    else if ( i > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i : arr ) sum += Math . abs ( i ) ;\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) sum += Math . abs ( arr [ i ] ) ;\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) sum += Math . abs ( arr [ i ] ) ;\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i : arr ) {\n    if ( i == 0 ) prod = 0 ;\n    else if ( i > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i : arr ) {\n    sum += Math . abs ( i ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i : arr ) {\n    sum += Math . abs ( i ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) return - 10 ;\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) prod = 0 ;\n    else if ( arr [ i ] > 0 ) prod *= 1 ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      prod = 0 ;\n    }\n    else if ( arr [ i ] > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    sum += Math . abs ( arr [ i ] ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs ( int [ ] arr ) {\n  if ( arr . length == 0 ) {\n    return - 10 ;\n  }\n  int prod = 1 ;\n  for ( int i : arr ) {\n    if ( i == 0 ) {\n      prod = 0 ;\n    }\n    else if ( i > 0 ) {\n      prod *= 1 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i : arr ) {\n    sum += Math . abs ( i ) ;\n  }\n  return prod * sum ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2)); \n}",
      "target": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9 - 1) * Math.pow(10, n - 2)); \n}",
      "function range": "7,5-11,5",
      "raw_output": [
        "public static int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static int startsOneEnds ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "static int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "static int startsOneEnds ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "static public int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static int startsOneEnds ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "static int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "static int startsOneEnds ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "static public int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static final int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static int startsOneEnds ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static final int startsOneEnds ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static final int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static int startsOneEnds ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static final int startsOneEnds ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static final int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static int startsOneEnds ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "static int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "static int startsOneEnds ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n",
        "public static int startsOneEnds ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return Integer . parseInt ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}\n"
      ],
      "mid_translation": [
        "int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * pow ( 10 , n - 2 ) ) ;\n}\n",
        "int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return int ( ( 10 + 9 ) * pow ( 10 , n - 2 ) ) ;\n}\n",
        "public : int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return int ( ( 10 + 9 ) * pow ( 10 , n - 2 ) ) ;\n}\n",
        "public : int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * pow ( 10 , n - 2 ) ) ;\n}\n",
        "int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return static_cast < int > ( ( 10 + 9 ) * pow ( 10 , n - 2 ) ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) {\n    return 1 ;\n  }\n  return ( int ) ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return Integer . parseInt ( ( 10 + 9 ) * Math . pow ( 10 , n - 2 ) ) ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = -3; \n    for(int i = 2; i < n - 1; i--) { \n        if(i % 2 == 0) sequence[i] = i / 2 - 1; \n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2; \n    }\n    return sequence;\n}",
      "target": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 3; \n    for(int i = 2; i < n + 1; i++) { \n        if(i % 2 == 0) sequence[i] = i / 2 + 1; \n        else sequence[i] = sequence[i - 1] + sequence[i - 2] + (i + 3) / 2; \n    }\n    return sequence;\n}",
      "function range": "23,5-37,5",
      "raw_output": [
        "public static List < Integer > tri ( int n ) {\n  List < Integer > sequence = new ArrayList < Integer > ( ) ;\n  if ( n == 0 ) {\n    sequence . add ( 1 ) ;\n    return sequence ;\n  }\n  sequence . add ( 1 ) ;\n  sequence . add ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence . add ( i / 2 - 1 ) ;\n    else sequence . add ( sequence . get ( sequence . size ( ) - 1 ) - ( i + 3 ) / 2 ) ;\n  }\n  return sequence ;\n}\n",
        "public static List < Integer > tri ( int n ) {\n  List < Integer > sequence = new ArrayList < > ( ) ;\n  if ( n == 0 ) {\n    sequence . add ( 1 ) ;\n    return sequence ;\n  }\n  sequence . add ( 1 ) ;\n  sequence . add ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence . add ( i / 2 - 1 ) ;\n    else sequence . add ( sequence . get ( sequence . size ( ) - 1 ) - ( i + 3 ) / 2 ) ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i ] - sequence [ i ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i ] - sequence [ i ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ 0 ] = i / 2 - 1 ;\n    else sequence [ 0 ] = sequence [ 0 ] - sequence [ 0 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = 1 ;\n    else sequence [ i ] = sequence [ i ] - sequence [ i ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static List < Integer > tri ( int n ) {\n  List < Integer > sequence = new ArrayList < Integer > ( ) ;\n  if ( n == 0 ) {\n    sequence . add ( 1 ) ;\n    return sequence ;\n  }\n  sequence . add ( 1 ) ;\n  sequence . add ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence . add ( i / 2 - 1 ) ;\n    else sequence . add ( sequence . get ( i - 1 ) - sequence . get ( i - 2 ) - ( i + 3 ) / 2 ) ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 1 ] = 1 ;\n  sequence [ 2 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ n - 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) {\n      sequence [ i ] = i / 2 - 1 ;\n    }\n    else {\n      sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    }\n  }\n  return sequence ;\n}\n",
        "public static final int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int sequence [ ] = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static List < Integer > tri ( int n ) {\n  List < Integer > sequence = new ArrayList < Integer > ( n + 1 ) ;\n  if ( n == 0 ) {\n    sequence . add ( 1 ) ;\n    return sequence ;\n  }\n  sequence . add ( 1 ) ;\n  sequence . add ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence . add ( i / 2 - 1 ) ;\n    else sequence . add ( sequence . get ( i - 1 ) - sequence . get ( i - 2 ) - ( i + 3 ) / 2 ) ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) {\n      sequence [ i ] = i / 2 - 1 ;\n    }\n    else {\n      sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    }\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int sequence [ ] = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static final int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static List < Integer > tri ( int n ) {\n  List < Integer > sequence = new ArrayList < Integer > ( ) ;\n  if ( n == 0 ) {\n    sequence . add ( 1 ) ;\n    return sequence ;\n  }\n  sequence . add ( 1 ) ;\n  sequence . add ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence . add ( i / 2 - 1 ) ;\n    else sequence . add ( sequence . get ( i - 1 ) - sequence . get ( i - 2 ) - ( i + 3 ) / 2 ) ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 1 ] = 1 ;\n  sequence [ 2 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n",
        "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ n - 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < int > tri ( int n ) {\n  vector < int > sequence ;\n  if ( n == 0 ) {\n    sequence . push_back ( 1 ) ;\n    return sequence ;\n  }\n  sequence . push_back ( 1 ) ;\n  sequence . push_back ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) {\n      sequence . push_back ( i / 2 - 1 ) ;\n    }\n    else {\n      sequence . push_back ( sequence . back ( ) - sequence . back ( ) - ( i + 3 ) / 2 ) ;\n    }\n  }\n  return sequence ;\n}\n",
        "public : vector < int > tri ( int n ) {\n  vector < int > sequence ;\n  if ( n == 0 ) {\n    sequence . push_back ( 1 ) ;\n    return sequence ;\n  }\n  sequence . push_back ( 1 ) ;\n  sequence . push_back ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) {\n      sequence . push_back ( i / 2 - 1 ) ;\n    }\n    else {\n      sequence . push_back ( sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ) ;\n    }\n  }\n  return sequence ;\n}\n",
        "public : vector < int > tri ( int n ) {\n  vector < int > sequence ( n + 1 , 0 ) ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) {\n      sequence [ i ] = i / 2 - 1 ;\n    }\n    else {\n      sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    }\n  }\n  return sequence ;\n}\n",
        "public : vector < int > tri ( int n ) {\n  vector < int > sequence ( n + 1 ) ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) {\n      sequence [ i ] = i / 2 - 1 ;\n    }\n    else {\n      sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    }\n  }\n  return sequence ;\n}\n",
        "vector < int > tri ( int n ) {\n  vector < int > sequence ;\n  if ( n == 0 ) {\n    sequence . push_back ( 1 ) ;\n    return sequence ;\n  }\n  sequence . push_back ( 1 ) ;\n  sequence . push_back ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) {\n      sequence . push_back ( i / 2 - 1 ) ;\n    }\n    else {\n      sequence . push_back ( sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ) ;\n    }\n  }\n  return sequence ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < Integer > tri ( int n ) {\n  List < Integer > sequence = new ArrayList < Integer > ( ) ;\n  if ( n == 0 ) {\n    sequence . add ( 1 ) ;\n    return sequence ;\n  }\n  sequence . add ( 1 ) ;\n  sequence . add ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence . add ( i / 2 - 1 ) ;\n    else sequence . add ( sequence . get ( sequence . size ( ) - 1 ) - ( i + 3 ) / 2 ) ;\n  }\n  return sequence ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > tri ( int n ) {\n  List < Integer > sequence = new ArrayList < > ( ) ;\n  if ( n == 0 ) {\n    sequence . add ( 1 ) ;\n    return sequence ;\n  }\n  sequence . add ( 1 ) ;\n  sequence . add ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence . add ( i / 2 - 1 ) ;\n    else sequence . add ( sequence . get ( sequence . size ( ) - 1 ) - ( i + 3 ) / 2 ) ;\n  }\n  return sequence ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i ] - sequence [ i ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i ] - sequence [ i ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ 0 ] = i / 2 - 1 ;\n    else sequence [ 0 ] = sequence [ 0 ] - sequence [ 0 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = 1 ;\n    else sequence [ i ] = sequence [ i ] - sequence [ i ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > tri ( int n ) {\n  List < Integer > sequence = new ArrayList < Integer > ( ) ;\n  if ( n == 0 ) {\n    sequence . add ( 1 ) ;\n    return sequence ;\n  }\n  sequence . add ( 1 ) ;\n  sequence . add ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence . add ( i / 2 - 1 ) ;\n    else sequence . add ( sequence . get ( i - 1 ) - sequence . get ( i - 2 ) - ( i + 3 ) / 2 ) ;\n  }\n  return sequence ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 1 ] = 1 ;\n  sequence [ 2 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ n - 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) {\n      sequence [ i ] = i / 2 - 1 ;\n    }\n    else {\n      sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    }\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int sequence [ ] = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > tri ( int n ) {\n  List < Integer > sequence = new ArrayList < Integer > ( n + 1 ) ;\n  if ( n == 0 ) {\n    sequence . add ( 1 ) ;\n    return sequence ;\n  }\n  sequence . add ( 1 ) ;\n  sequence . add ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence . add ( i / 2 - 1 ) ;\n    else sequence . add ( sequence . get ( i - 1 ) - sequence . get ( i - 2 ) - ( i + 3 ) / 2 ) ;\n  }\n  return sequence ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) {\n      sequence [ i ] = i / 2 - 1 ;\n    }\n    else {\n      sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    }\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int sequence [ ] = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n + 1 ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > tri ( int n ) {\n  List < Integer > sequence = new ArrayList < Integer > ( ) ;\n  if ( n == 0 ) {\n    sequence . add ( 1 ) ;\n    return sequence ;\n  }\n  sequence . add ( 1 ) ;\n  sequence . add ( - 3 ) ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence . add ( i / 2 - 1 ) ;\n    else sequence . add ( sequence . get ( i - 1 ) - sequence . get ( i - 2 ) - ( i + 3 ) / 2 ) ;\n  }\n  return sequence ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = 1 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 1 ] = 1 ;\n  sequence [ 2 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] tri ( int n ) {\n  int [ ] sequence = new int [ n ] ;\n  if ( n == 0 ) {\n    sequence [ 0 ] = 1 ;\n    return sequence ;\n  }\n  sequence [ 0 ] = 1 ;\n  sequence [ n - 1 ] = - 3 ;\n  for ( int i = 2 ;\n  i < n - 1 ;\n  i -- ) {\n    if ( i % 2 == 0 ) sequence [ i / 2 - 1 ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n    else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2 ;\n  }\n  return sequence ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[j].length; j++) { \n            row_capacity += grid[j][i]; \n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
      "target": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) { \n            row_capacity += grid[i][j]; \n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
      "function range": "38,5-48,5",
      "raw_output": [
        "public static int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "static int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( ArrayList < ArrayList < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( int [ ] [ ] grid , int bucket_capacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int row_capacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      row_capacity += grid [ j ] [ i ] ;\n    }\n    result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ 0 ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static final int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( ArrayList < ArrayList < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( List < List < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( int [ ] [ ] grid , int bucket_capacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int row_capacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      row_capacity += grid [ j ] [ i ] ;\n    }\n    result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( ArrayList < ArrayList < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( List < List < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ i ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ i ] [ j ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( List < List < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( ArrayList < ArrayList < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ i ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ i ] [ j ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static final int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) rowCapacity += grid [ j ] [ i ] ;\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static final int maxFill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) rowCapacity += grid [ j ] [ i ] ;\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( int [ ] [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) rowCapacity += grid [ j ] [ i ] ;\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public static int maxFill ( ArrayList < ArrayList < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) rowCapacity += grid . get ( j ) . get ( i ) ;\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "int max_fill ( vector < vector < int >> & grid , int bucket_capacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int row_capacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . size ( ) ;\n    j ++ ) row_capacity += grid [ j ] [ i ] ;\n    result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity ;\n  }\n  return result ;\n}\n",
        "public : int max_fill ( vector < vector < int >> & grid , int bucket_capacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int row_capacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . size ( ) ;\n    j ++ ) row_capacity += grid [ j ] [ i ] ;\n    result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity ;\n  }\n  return result ;\n}\n",
        "public : int maxFill ( vector < vector < int >> & grid , int bucket_capacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int row_capacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . size ( ) ;\n    j ++ ) row_capacity += grid [ j ] [ i ] ;\n    result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity ;\n  }\n  return result ;\n}\n",
        "public : int maxFill ( vector < vector < int >> & grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . size ( ) ;\n    j ++ ) rowCapacity += grid [ j ] [ i ] ;\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n",
        "public : int maxFill ( vector < vector < int >> & grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( ArrayList < ArrayList < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int row_capacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      row_capacity += grid [ j ] [ i ] ;\n    }\n    result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ 0 ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( ArrayList < ArrayList < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill ( List < List < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int row_capacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      row_capacity += grid [ j ] [ i ] ;\n    }\n    result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( ArrayList < ArrayList < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill ( List < List < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ i ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ i ] [ j ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( List < List < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill ( ArrayList < ArrayList < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) {\n      rowCapacity += grid . get ( j ) . get ( i ) ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ i ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ i ] [ j ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) rowCapacity += grid [ j ] [ i ] ;\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) {\n      rowCapacity += grid [ j ] [ i ] ;\n    }\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) rowCapacity += grid [ j ] [ i ] ;\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill ( int [ ] [ ] [ ] grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . length ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid [ j ] . length ;\n    j ++ ) rowCapacity += grid [ j ] [ i ] ;\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill ( ArrayList < ArrayList < Integer >> grid , int bucketCapacity ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    int rowCapacity = 0 ;\n    for ( int j = 0 ;\n    j < grid . get ( j ) . size ( ) ;\n    j ++ ) rowCapacity += grid . get ( j ) . get ( i ) ;\n    result += ( rowCapacity + bucketCapacity - 1 ) / bucketCapacity ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]); \n    int r = Math.max(interval1[1], interval2[1]); \n    int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
      "target": "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.max(interval1[0], interval2[0]); \n    int r = Math.min(interval1[1], interval2[1]); \n    int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
      "function range": "33,5-39,5",
      "raw_output": [
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . get ( 0 ) , interval2 . get ( 0 ) ) ;\n  int r = Math . max ( interval1 . get ( 1 ) , interval2 . get ( 1 ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static final String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . get ( 0 ) , interval2 . get ( 0 ) ) ;\n  int r = Math . max ( interval1 . get ( 1 ) , interval2 . get ( 1 ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 . length , interval2 . length ) ;\n  int r = Math . max ( interval1 . length , interval2 . length ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 . length , interval2 . length ) ;\n  int r = Math . max ( interval1 . length , interval2 . length ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int r = Math . max ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int r = Math . max ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String intersection ( ArrayList < Integer > interval1 , ArrayList < Integer > interval2 ) {\n  int l = Math . min ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int r = Math . max ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 . length , interval2 . length ) ;\n  int r = Math . max ( interval1 . length , interval2 . length ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 . length , interval2 . length ) ;\n  int r = Math . max ( interval1 . length , interval2 . length ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int r = Math . max ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n",
        "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int r = Math . max ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 , interval2 ) ;\n  int r = max ( interval1 , interval2 ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}\n"
      ],
      "mid_translation": [
        "string intersection ( vector < int > interval1 , vector < int > interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && is_prime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "public : string intersection ( vector < int > interval1 , vector < int > interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && is_prime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "string intersection ( vector < int > interval1 , vector < int > interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length && is_prime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "string intersection ( vector < int > interval1 , vector < int > interval2 ) {\n  int l = min ( interval1 . begin ( ) , interval2 . begin ( ) ) ;\n  int r = max ( interval1 . end ( ) , interval2 . end ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && is_prime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n",
        "string intersection ( vector < int > interval1 , vector < int > interval2 ) {\n  int l = min ( interval1 . begin ( ) , interval2 . begin ( ) ) ;\n  int r = max ( interval1 . begin ( ) , interval2 . begin ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && is_prime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . get ( 0 ) , interval2 . get ( 0 ) ) ;\n  int r = Math . max ( interval1 . get ( 1 ) , interval2 . get ( 1 ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = Math . max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 [ 0 ] , interval2 [ 0 ] ) ;\n  int r = max ( interval1 [ 1 ] , interval2 [ 1 ] ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . get ( 0 ) , interval2 . get ( 0 ) ) ;\n  int r = Math . max ( interval1 . get ( 1 ) , interval2 . get ( 1 ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 . length , interval2 . length ) ;\n  int r = Math . max ( interval1 . length , interval2 . length ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 . length , interval2 . length ) ;\n  int r = Math . max ( interval1 . length , interval2 . length ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int r = Math . max ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int r = Math . max ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( ArrayList < Integer > interval1 , ArrayList < Integer > interval2 ) {\n  int l = Math . min ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int r = Math . max ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 . length , interval2 . length ) ;\n  int r = Math . max ( interval1 . length , interval2 . length ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = Math . min ( interval1 . length , interval2 . length ) ;\n  int r = Math . max ( interval1 . length , interval2 . length ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int r = Math . max ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( List < Integer > interval1 , List < Integer > interval2 ) {\n  int l = Math . min ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int r = Math . max ( interval1 . size ( ) , interval2 . size ( ) ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) return \"YES\" ;\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection ( int [ ] interval1 , int [ ] interval2 ) {\n  int l = min ( interval1 , interval2 ) ;\n  int r = max ( interval1 , interval2 ) ;\n  int length = r - l ;\n  if ( length > 0 && isPrime ( length ) ) {\n    return \"YES\" ;\n  }\n  return \"NO\" ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]); \n    }\n    return result;\n}",
      "target": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.abs(game[i] - guess[i]); \n    }\n    return result;\n}",
      "function range": "12,5-20,5",
      "raw_output": [
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ guess . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ guess . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > compare ( int [ ] game , int [ ] guess ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result . add ( floorDiv ( game [ i ] , guess [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDivide ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floordiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDivide ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDivide ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floordiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = floorDivide ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = floordiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ guess . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < int > compare ( vector < int > game , vector < int > guess ) {\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < game . size ( ) ;\n  i += 1 ) result . push_back ( floorDiv ( game [ i ] , guess [ i ] ) ) ;\n  return result ;\n}\n",
        "public : vector < int > compare ( vector < int > game , vector < int > guess ) {\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < game . size ( ) ;\n  i += 1 ) result . push_back ( floordiv ( game [ i ] , guess [ i ] ) ) ;\n  return result ;\n}\n",
        "vector < int > compare ( vector < int > game , vector < int > guess ) {\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < game . size ( ) ;\n  i += 1 ) result . push_back ( floordiv ( game [ i ] , guess [ i ] ) ) ;\n  return result ;\n}\n",
        "public : vector < int > compare ( vector < int > game , vector < int > guess ) {\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < game . size ( ) ;\n  i += 1 ) {\n    result . push_back ( floordiv ( game [ i ] , guess [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public : vector < int > compare ( vector < int > game , vector < int > guess ) {\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < game . size ( ) ;\n  i += 1 ) {\n    result . push_back ( floorDiv ( game [ i ] , guess [ i ] ) ) ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ guess . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ guess . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > compare ( int [ ] game , int [ ] guess ) {\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result . add ( floorDiv ( game [ i ] , guess [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDivide ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floordiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDivide ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDivide ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floordiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = floorDivide ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = floordiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ game . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) {\n    result [ i ] = Math . floorDiv ( game [ i ] , guess [ i ] ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] compare ( int [ ] game , int [ ] guess ) {\n  int [ ] result = new int [ guess . length ] ;\n  for ( int i = 0 ;\n  i < game . length ;\n  i += 1 ) result [ i ] = floorDiv ( game [ i ] , guess [ i ] ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++; \n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
      "target": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 1) count++; \n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
      "function range": "14,5-28,5",
      "raw_output": [
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count , 16 ) ;\n    }\n    return result ;\n  }\n}\n",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count ) ;\n    }\n    return result ;\n  }\n}\n",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . valueOf ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    result [ 0 ] = Integer . toString ( count ) ;\n    return result ;\n  }\n}\n",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count , 16 ) ;\n    }\n    return result ;\n  }\n}\n",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    result [ 0 ] = Integer . valueOf ( count ) . toString ( ) ;\n    return result ;\n  }\n}\n",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count , 16 ) ;\n    }\n    return result ;\n  }\n}\n",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . indexOf ( ' ' ) != - 1 ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . indexOf ( ',' ) != - 1 ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . indexOf ( ' ' ) != - 1 ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . indexOf ( ',' ) != - 1 ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count , 16 ) ;\n    }\n    return result ;\n  }\n}\n",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count ) ;\n    }\n    return result ;\n  }\n}\n",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count , 16 ) ;\n    }\n    return result ;\n  }\n}\n",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count ) ;\n    }\n    return result ;\n  }\n}\n",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . valueOf ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . valueOf ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . indexOf ( \" \" ) != - 1 ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . indexOf ( \",\" ) != - 1 ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . valueOf ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . indexOf ( \" \" ) != - 1 ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . indexOf ( \",\" ) != - 1 ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "public static String [ ] splitWords ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count ++ ;\n    }\n    String [ ] result = new String [ ] {\n      Integer . valueOf ( count ) }\n      ;\n      return result ;\n    }\n  }\n  "
      ],
      "mid_translation": [
        "vector < string > split_words ( string txt ) {\n  if ( txt . find ( \" \" ) != string :: npos ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . find ( \",\" ) != string :: npos ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt [ i ] ;\n      if ( isupper ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    vector < string > result {\n      to_string ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "vector < string > split_words ( string txt ) {\n  if ( txt . find ( \" \" ) != string :: npos ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . find ( \",\" ) != string :: npos ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt [ i ] ;\n      if ( isupper ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    vector < string > result = {\n      to_string ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "vector < string > split_words ( string txt ) {\n  if ( txt . find ( ' ' ) != string :: npos ) {\n    return txt . split ( ' ' ) ;\n  }\n  else if ( txt . find ( ',' ) != string :: npos ) {\n    return txt . split ( ',' ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt [ i ] ;\n      if ( isupper ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    vector < string > result {\n      to_string ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "vector < string > split_words ( string txt ) {\n  if ( txt . find ( \" \" ) != string :: npos ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . find ( \",\" ) != string :: npos ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . size ( ) ;\n    i ++ ) {\n      char curr = txt [ i ] ;\n      if ( isupper ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    vector < string > result {\n      to_string ( count ) }\n      ;\n      return result ;\n    }\n  }\n  ",
        "string split_words ( string txt ) {\n  if ( txt . find ( \" \" ) != string :: npos ) {\n    return txt . substr ( 0 , txt . find ( \" \" ) ) ;\n  }\n  else if ( txt . find ( \",\" ) != string :: npos ) {\n    return txt . substr ( 0 , txt . find ( \",\" ) ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt [ i ] ;\n      if ( isupper ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    string result = {\n      static_cast < int > ( count ) }\n      ;\n      return result ;\n    }\n  }\n  "
      ],
      "output": [
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count , 16 ) ;\n    }\n    return result ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count ) ;\n    }\n    return result ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . valueOf ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    result [ 0 ] = Integer . toString ( count ) ;\n    return result ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count , 16 ) ;\n    }\n    return result ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    result [ 0 ] = Integer . valueOf ( count ) . toString ( ) ;\n    return result ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count , 16 ) ;\n    }\n    return result ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . indexOf ( ' ' ) != - 1 ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . indexOf ( ',' ) != - 1 ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . indexOf ( ' ' ) != - 1 ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . indexOf ( ',' ) != - 1 ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count , 16 ) ;\n    }\n    return result ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count ) ;\n    }\n    return result ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count , 16 ) ;\n    }\n    return result ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ count ] ;\n    for ( int i = 0 ;\n    i < result . length ;\n    i ++ ) {\n      result [ i ] = Integer . toString ( count ) ;\n    }\n    return result ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . valueOf ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . valueOf ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . indexOf ( \" \" ) != - 1 ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . indexOf ( \",\" ) != - 1 ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . valueOf ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . indexOf ( \" \" ) != - 1 ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . indexOf ( \",\" ) != - 1 ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) {\n        count ++ ;\n      }\n    }\n    String [ ] result = new String [ ] {\n      Integer . toString ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String [ ] split_words ( String txt ) {\n  if ( txt . contains ( \" \" ) ) {\n    return txt . split ( \" \" ) ;\n  }\n  else if ( txt . contains ( \",\" ) ) {\n    return txt . split ( \",\" ) ;\n  }\n  else {\n    int count = 0 ;\n    for ( int i = 0 ;\n    i < txt . length ( ) ;\n    i ++ ) {\n      char curr = txt . charAt ( i ) ;\n      if ( Character . isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count ++ ;\n    }\n    String [ ] result = new String [ ] {\n      Integer . valueOf ( count ) }\n      ;\n      return result ;\n    }\n  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    last = parts[parts.length - 1]; \n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \"; \n    if(txt.length() == 1) last = \" \"; \n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a'; \n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25); \n}",
      "target": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if(parts.length != 0) last = parts[parts.length - 1]; \n    if(txt.length() != 0 && txt.charAt(txt.length() - 1) == ' ') last = \" \"; \n    if(txt.length() == 0) last = \" \"; \n    int last_char_pos = Character.toLowerCase(last.charAt(0)) - 'a'; \n    return (last.length() == 1) && (0 <= last_char_pos && last_char_pos <= 25); \n}",
      "function range": "18,5-26,5",
      "raw_output": [
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) last = \" \" ;\n  if ( txt . length ( ) == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  char last = ' ' ;\n  last = txt . charAt ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = ' ' ;\n  if ( len == 1 ) last = ' ' ;\n  int lastCharPos = Character . toUpperCase ( last ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( 0 , len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) last = \" \" ;\n  if ( txt . length ( ) == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  char last = ' ' ;\n  last = txt . charAt ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = ' ' ;\n  if ( len == 1 ) last = ' ' ;\n  int lastCharPos = Character . toUpperCase ( last ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) {\n    last = \" \" ;\n  }\n  if ( txt . length ( ) == 1 ) {\n    last = \" \" ;\n  }\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) last = \" \" ;\n  if ( txt . length ( ) == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( 0 , len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( 0 , len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  char last = ' ' ;\n  last = txt . charAt ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = ' ' ;\n  if ( len == 1 ) last = ' ' ;\n  int lastCharPos = Character . toUpperCase ( last ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) last = \" \" ;\n  if ( txt . length ( ) == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  char last = ' ' ;\n  last = txt . charAt ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = ' ' ;\n  if ( len == 1 ) last = ' ' ;\n  int lastCharPos = Character . toUpperCase ( last ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) last = \" \" ;\n  if ( txt . length ( ) == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n",
        "public static boolean checkIfLastCharIsALetter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}\n"
      ],
      "mid_translation": [
        "bool check_if_last_char_is_a_letter ( string txt ) {\n  string :: iterator it = txt . begin ( ) ;\n  string last = \" \" ;\n  last = * it ;\n  if ( txt [ txt . size ( ) - 1 ] == ' ' ) last = \" \" ;\n  if ( txt . size ( ) == 1 ) last = \" \" ;\n  int last_char_pos = toupper ( last [ 0 ] ) - 'a' ;\n  return ( last . size ( ) == 1 ) || ( 0 <= last_char_pos || last_char_pos <= 25 ) ;\n}\n",
        "bool check_if_last_char_is_a_letter ( string txt ) {\n  string :: iterator it = txt . begin ( ) ;\n  string last = \" \" ;\n  last = * it ;\n  if ( txt [ - 1 ] == ' ' ) last = \" \" ;\n  if ( txt . size ( ) == 1 ) last = \" \" ;\n  int last_char_pos = toupper ( last [ 0 ] ) - 'a' ;\n  return ( last . size ( ) == 1 ) || ( 0 <= last_char_pos || last_char_pos <= 25 ) ;\n}\n",
        "bool check_if_last_char_is_a_letter ( string txt ) {\n  string :: iterator it = txt . begin ( ) ;\n  string last = \" \" ;\n  last = * it ;\n  if ( txt [ txt . length ( ) - 1 ] == ' ' ) last = \" \" ;\n  if ( txt . length ( ) == 1 ) last = \" \" ;\n  int last_char_pos = toupper ( last [ 0 ] ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= last_char_pos || last_char_pos <= 25 ) ;\n}\n",
        "bool check_if_last_char_is_a_letter ( string & txt ) {\n  string :: iterator it = txt . begin ( ) ;\n  string last = \" \" ;\n  last = * it ;\n  if ( txt [ txt . size ( ) - 1 ] == ' ' ) last = \" \" ;\n  if ( txt . size ( ) == 1 ) last = \" \" ;\n  int last_char_pos = toupper ( last [ 0 ] ) - 'a' ;\n  return ( last . size ( ) == 1 ) || ( 0 <= last_char_pos || last_char_pos <= 25 ) ;\n}\n",
        "bool check_if_last_char_is_a_letter ( string & txt ) {\n  string :: iterator it = txt . begin ( ) ;\n  string last = \" \" ;\n  last = * it ;\n  if ( txt [ - 1 ] == ' ' ) last = \" \" ;\n  if ( txt . size ( ) == 1 ) last = \" \" ;\n  int last_char_pos = toupper ( last [ 0 ] ) - 'a' ;\n  return ( last . size ( ) == 1 ) || ( 0 <= last_char_pos || last_char_pos <= 25 ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) last = \" \" ;\n  if ( txt . length ( ) == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  char last = ' ' ;\n  last = txt . charAt ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = ' ' ;\n  if ( len == 1 ) last = ' ' ;\n  int lastCharPos = Character . toUpperCase ( last ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( 0 , len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) last = \" \" ;\n  if ( txt . length ( ) == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  char last = ' ' ;\n  last = txt . charAt ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = ' ' ;\n  if ( len == 1 ) last = ' ' ;\n  int lastCharPos = Character . toUpperCase ( last ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) {\n    last = \" \" ;\n  }\n  if ( txt . length ( ) == 1 ) {\n    last = \" \" ;\n  }\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) last = \" \" ;\n  if ( txt . length ( ) == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( 0 , len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( 0 , len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  char last = ' ' ;\n  last = txt . charAt ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = ' ' ;\n  if ( len == 1 ) last = ' ' ;\n  int lastCharPos = Character . toUpperCase ( last ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) last = \" \" ;\n  if ( txt . length ( ) == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  char last = ' ' ;\n  last = txt . charAt ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = ' ' ;\n  if ( len == 1 ) last = ' ' ;\n  int lastCharPos = Character . toUpperCase ( last ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  char [ ] chars = txt . toCharArray ( ) ;\n  String last = \" \" ;\n  last = chars [ chars . length - 1 ] ;\n  if ( txt . charAt ( chars . length - 1 ) == ' ' ) last = \" \" ;\n  if ( txt . length ( ) == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt . substring ( len - 1 ) ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( last . length ( ) == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter ( String txt ) {\n  int len = txt . length ( ) ;\n  String last = \" \" ;\n  last = txt ;\n  if ( txt . charAt ( len - 1 ) == ' ' ) last = \" \" ;\n  if ( len == 1 ) last = \" \" ;\n  int lastCharPos = Character . toUpperCase ( last . charAt ( 0 ) ) - 'a' ;\n  return ( len == 1 ) || ( 0 <= lastCharPos || lastCharPos <= 25 ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2) \n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
      "target": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((d.indexOf((int) c) + 2 * 2) % 26) \n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "raw_output": [
        "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  String result = \"\" ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result += d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ;\n    }\n    else {\n      result += c ;\n    }\n  }\n  return result ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  String result = \"\" ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result += d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ;\n    }\n    else {\n      result += c ;\n    }\n  }\n  return result ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    else sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    else sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  String result = \"\" ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) result += d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ;\n    else result += c ;\n  }\n  return result ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    else result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuilder builder = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      builder . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      builder . append ( c ) ;\n    }\n  }\n  return builder . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  String result = \"\" ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result += d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ;\n    }\n    else {\n      result += c ;\n    }\n  }\n  return result ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n",
        "public static String encrypt ( String s ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string encrypt ( string s ) {\n  string result ;\n  string d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s ) {\n    if ( 'a' <= c && c <= 'z' ) result += d [ s . find ( ( int ) c ) + 2 * 2 ] ;\n    else result += c ;\n  }\n  return result ;\n}\n",
        "string encrypt ( string s ) {\n  string result ;\n  string d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( auto c : s ) {\n    if ( 'a' <= c && c <= 'z' ) result += d [ s . find ( ( int ) c ) + 2 * 2 ] ;\n    else result += c ;\n  }\n  return result ;\n}\n",
        "string encrypt ( string s ) {\n  string result ;\n  string d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result += d [ s . find ( ( int ) c ) + 2 * 2 ] ;\n    }\n    else {\n      result += c ;\n    }\n  }\n  return result ;\n}\n",
        "string encrypt ( string s ) {\n  string result ;\n  string d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s ) {\n    if ( 'a' <= c && c <= 'z' ) result . push_back ( d [ s . find ( ( int ) c ) + 2 * 2 ] ) ;\n    else result . push_back ( c ) ;\n  }\n  return result ;\n}\n",
        "string encrypt ( string s ) {\n  string result ;\n  string d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s ) {\n    if ( 'a' <= c && c <= 'z' ) result += d . at ( s . find ( ( int ) c ) + 2 * 2 ) ;\n    else result += c ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  String result = \"\" ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result += d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ;\n    }\n    else {\n      result += c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  String result = \"\" ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result += d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ;\n    }\n    else {\n      result += c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    else sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    else sb . append ( c ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  String result = \"\" ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) result += d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ;\n    else result += c ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    else result . append ( c ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuilder builder = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      builder . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      builder . append ( c ) ;\n    }\n  }\n  return builder . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuffer sb = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      sb . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      sb . append ( c ) ;\n    }\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  String result = \"\" ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result += d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ;\n    }\n    else {\n      result += c ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuffer result = new StringBuffer ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt ( String s ) {\n  StringBuilder result = new StringBuilder ( ) ;\n  String d = \"abcdefghijklmnopqrstuvwxyz\" ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( 'a' <= c && c <= 'z' ) {\n      result . append ( d . charAt ( s . indexOf ( ( int ) c ) + 2 * 2 ) ) ;\n    }\n    else {\n      result . append ( c ) ;\n    }\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10); \n}",
      "target": "public static int multiply(int a, int b) {\n    return Math.abs(a % 10) * Math.abs(b % 10); \n}",
      "function range": "13,5-15,5",
      "raw_output": [
        "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "static public int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "/**\n* Multiply two integers.\n*\n* @param a the first integer\n* @param b the second integer\n* @return the result\n*/\npublic static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "/**\n* Multiply two integers.\n*\n* @param a the first integer\n* @param b the second integer\n* @return the multiplied integer\n*/\npublic static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static int Multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "static int Multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "/**\n* Multiply two integers.\n*\n* @param a the first integer\n* @param b the second integer\n* @return the result\n*/\npublic static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static final int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "static public int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public final static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static Integer multiply ( Integer a , Integer b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static long multiply ( long a , long b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static double multiply ( double a , double b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "static long multiply ( long a , long b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static double multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "static public int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static long multiply ( long a , long b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) + ( b % 10 ) ;\n}\n"
      ],
      "mid_translation": [
        "int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "int Multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "public : int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "template < typename T > T multiply ( T a , T b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n",
        "unsigned int multiply ( unsigned int a , unsigned int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer multiply ( Integer a , Integer b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long multiply ( long a , long b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double multiply ( double a , double b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long multiply ( long a , long b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public int multiply ( int a , int b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long multiply ( long a , long b ) {\n  return ( a % 10 ) * ( b % 10 ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply ( int a , int b ) {\n  return ( a % 10 ) + ( b % 10 ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg); \n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
      "target": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg); \n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
      "function range": "15,5-30,5",
      "raw_output": [
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . format ( \"%d\" , avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}\n",
        "public static String roundedAvg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) m - n + 1 ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}\n"
      ],
      "mid_translation": [
        "string rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) summation += i ;\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - floor ( avg ) ;\n  int avg_rounded = 0 ;\n  if ( rem <= 0.5 ) avg_rounded = ( int ) ceil ( avg ) ;\n  else avg_rounded = ( int ) ceil ( avg ) ;\n  return to_string ( avg_rounded ) ;\n}\n",
        "string rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) summation += i ;\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - floor ( avg ) ;\n  int avg_rounded = 0 ;\n  if ( rem <= 0.5 ) avg_rounded = int ( ceil ( avg ) ) ;\n  else avg_rounded = int ( ceil ( avg ) ) ;\n  return to_string ( avg_rounded ) ;\n}\n",
        "string rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) summation += i ;\n  double avg = ( static_cast < double > ( summation ) ) / ( static_cast < double > ( m - n + 1 ) ) ;\n  double rem = avg - floor ( avg ) ;\n  int avg_rounded = 0 ;\n  if ( rem <= 0.5 ) avg_rounded = int ( ceil ( avg ) ) ;\n  else avg_rounded = int ( ceil ( avg ) ) ;\n  return to_string ( avg_rounded ) ;\n}\n",
        "QString rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) summation += i ;\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - floor ( avg ) ;\n  int avg_rounded = 0 ;\n  if ( rem <= 0.5 ) avg_rounded = ( int ) ceil ( avg ) ;\n  else avg_rounded = ( int ) ceil ( avg ) ;\n  return QString :: number ( avg_rounded ) ;\n}\n",
        "string rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) summation += i ;\n  double avg = ( static_cast < double > ( summation ) ) / ( static_cast < double > ( m - n + 1 ) ) ;\n  double rem = avg - floor ( avg ) ;\n  int avg_rounded = 0 ;\n  if ( rem <= 0.5 ) avg_rounded = ( int ) ceil ( avg ) ;\n  else avg_rounded = ( int ) ceil ( avg ) ;\n  return to_string ( avg_rounded ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . format ( \"%d\" , avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) return \"-1\" ;\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) ( m - n + 1 ) ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return String . valueOf ( avgRounded ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg ( int n , int m ) {\n  if ( m < n ) {\n    return \"-1\" ;\n  }\n  int summation = 0 ;\n  for ( int i = n ;\n  i < m + 1 ;\n  i ++ ) {\n    summation += i ;\n  }\n  double avg = ( ( double ) summation ) / ( ( double ) m - n + 1 ) ;\n  double rem = avg - Math . floor ( avg ) ;\n  int avgRounded = 0 ;\n  if ( rem <= 0.5 ) {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  else {\n    avgRounded = ( int ) Math . ceil ( avg ) ;\n  }\n  return Integer . toString ( avgRounded ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need}; \n}",
      "target": "public static int[] eat(int number, int need, int remaining) {\n    if (need <= remaining) { \n        return new int[] {number + need,  remaining - need};\n    }\n    else {\n        return new int[] {number + remaining , 0};\n    }\n}",
      "function range": "31,5-33,5",
      "raw_output": [
        "public static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n}\n",
        "static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n}\n",
        "static public int eat ( int number , int need , int remaining ) {\n  return number + need ;\n}\n",
        "public static int eat ( int number , int need , int remaining ) {\n  return eat ( number , need , remaining , 0 ) ;\n}\n",
        "public static int eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining ) ;\n}\n",
        "public static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n  return remaining - need ;\n}\n",
        "static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n  return remaining - need ;\n}\n",
        "static public int eat ( int number , int need , int remaining ) {\n  return number + need ;\n  return remaining - need ;\n}\n",
        "public static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n}\n",
        "/**\n* eat a number.\n*\n* @param number\n* @param need\n* @param remaining\n* @return\n*/\npublic static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n  return remaining - need ;\n}\n",
        "public static int eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining - need ) ;\n}\n",
        "public static int eat ( int number , int need , int remaining ) {\n  return new int [ ] {\n    number + need , remaining - need }\n    ;\n  }\n  ",
        "public static int eat ( int number , int need , int remaining ) {\n  return new Integer ( number + need , remaining - need ) . intValue ( ) ;\n}\n",
        "public static int eat ( int number , int need , int remaining ) {\n  return new Integer ( number + need ) . intValue ( ) + remaining - need ;\n}\n",
        "static int eat ( int number , int need , int remaining ) {\n  return new Integer ( number + need , remaining - need ) . intValue ( ) ;\n}\n",
        "public static int eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining - need ) ;\n}\n",
        "public static int eat ( int number , int need , int remaining ) {\n  return number + need , remaining - need ;\n}\n",
        "static int eat ( int number , int need , int remaining ) {\n  return number + need , remaining - need ;\n}\n",
        "public static int eat ( int number , int need , int remaining ) {\n  return eat ( number , need , remaining - need ) ;\n}\n",
        "public static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n}\n",
        "public static ArrayList < Integer > eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining - need ) ;\n}\n",
        "public static int [ ] eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining - need ) ;\n}\n",
        "public static int [ ] eat ( int number , int need , int remaining ) {\n  return new int [ ] {\n    number + need , remaining - need }\n    ;\n  }\n  ",
        "public static List < Integer > eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining - need ) ;\n}\n",
        "public static int [ ] eat ( int number , int need , int remaining ) {\n  return {\n    number + need , remaining - need }\n    ;\n  }\n  "
      ],
      "mid_translation": [
        "int eat ( int number , int need , int remaining ) {\n  return number + need ;\n}\n",
        "int eat ( int number , int need , int remaining ) {\n  return number + need ;\n  return remaining - need ;\n}\n",
        "int eat ( int number , int need , int remaining ) {\n  return {\n    number + need , remaining - need }\n    ;\n  }\n  ",
        "int eat ( int number , int need , int remaining ) {\n  return number + need , remaining - need ;\n}\n",
        "vector < int > eat ( int number , int need , int remaining ) {\n  return {\n    number + need , remaining - need }\n    ;\n  }\n  "
      ],
      "output": [
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static public int eat ( int number , int need , int remaining ) {\n  return number + need ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return eat ( number , need , remaining , 0 ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n  return remaining - need ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n  return remaining - need ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static public int eat ( int number , int need , int remaining ) {\n  return number + need ;\n  return remaining - need ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": " ",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining - need ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return new int [ ] {\n    number + need , remaining - need }\n    ;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return new Integer ( number + need , remaining - need ) . intValue ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return new Integer ( number + need ) . intValue ( ) + remaining - need ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return new Integer ( number + need , remaining - need ) . intValue ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining - need ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return number + need , remaining - need ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return number + need , remaining - need ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return eat ( number , need , remaining - need ) ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static int eat ( int number , int need , int remaining ) {\n  return number + need ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static ArrayList < Integer > eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining - need ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining - need ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] eat ( int number , int need , int remaining ) {\n  return new int [ ] {\n    number + need , remaining - need }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > eat ( int number , int need , int remaining ) {\n  return eat ( number + need , remaining - need ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] eat ( int number , int need , int remaining ) {\n  return {\n    number + need , remaining - need }\n    ;\n  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0; \n    for(int j = 0; j < lst.length; j++) { \n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i])); \n    }\n    return result;\n}",
      "target": "public static long sum_squared_nums(double[] lst) {\n    int result = 0; \n    for(int i = 0; i < lst.length; i++) { \n        result += (Math.ceil(lst[i])) * (Math.ceil(lst[i])); \n    }\n    return result;\n}",
      "function range": "16,5-22,5",
      "raw_output": [
        "public static long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "static long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( double lst [ ] ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNumbers ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "static long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( List < Double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( double lst [ ] ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "static public long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "static long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( double lst [ ] ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( List < Double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNumbers ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( List < Double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "static long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "static long sumSquaredNums ( List < Double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( List lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "static long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( List < Double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static long sumSquaredNums ( double lst [ ] ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n",
        "static public long sumSquaredNums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "long long sum_squared_nums ( vector < double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) result += ( floor ( ( int ) lst [ i ] ) ) * ( ceil ( ( int ) lst [ i ] ) ) ;\n  return result ;\n}\n",
        "long long sum_squared_nums ( const std :: vector < double > & lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) result += ( floor ( ( int ) lst [ i ] ) ) * ( ceil ( ( int ) lst [ i ] ) ) ;\n  return result ;\n}\n",
        "long long sum_squared_nums ( vector < double > & lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) result += ( floor ( ( int ) lst [ i ] ) ) * ( ceil ( ( int ) lst [ i ] ) ) ;\n  return result ;\n}\n",
        "long long sum_squared_nums ( std :: vector < double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) result += ( floor ( ( int ) lst [ i ] ) ) * ( ceil ( ( int ) lst [ i ] ) ) ;\n  return result ;\n}\n",
        "long long sum_squared_nums ( const std :: vector < double > & lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) result += ( std :: floor ( ( int ) lst [ i ] ) ) * ( std :: ceil ( ( int ) lst [ i ] ) ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( double lst [ ] ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( List < Double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long sum_squared_nums ( double lst [ ] ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( double lst [ ] ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( List < Double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( List < Double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( List < Double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long sum_squared_nums ( List lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums ( List < Double > lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst . get ( i ) ) ) * ( Math . ceil ( ( int ) lst . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long sum_squared_nums ( double lst [ ] ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public long sum_squared_nums ( double [ ] lst ) {\n  int result = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    result += ( Math . floor ( ( int ) lst [ i ] ) ) * ( Math . ceil ( ( int ) lst [ i ] ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (value.substring(value.length() - 2).equals(\".5\")) { \n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num); \n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
      "target": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (value.length() >= 2 && value.substring(value.length() - 2).equals(\".5\")) { \n        result = num > 0 ? (int)Math.ceil(num) : (int)Math.floor(num); \n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
      "function range": "20,5-35,5",
      "raw_output": [
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) {\n      value = value . substring ( 0 , value . length ( ) - 1 ) ;\n    }\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) {\n      value = value . substring ( 0 , value . length ( ) - 1 ) ;\n    }\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) {\n      value = value . substring ( 0 , value . length ( ) - 1 ) ;\n    }\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) {\n      value = value . substring ( 0 , value . length ( ) - 1 ) ;\n    }\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) {\n      value = value . substring ( 0 , value . length ( ) - 1 ) ;\n    }\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}\n",
        "public static int closestInteger ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "int closest_integer ( string value ) {\n  if ( value . find ( '.' ) >= 0 ) {\n    while ( value [ value . length ( ) - 1 ] == '0' ) {\n      value . erase ( value . length ( ) - 1 ) ;\n    }\n  }\n  double num = atof ( value . c_str ( ) ) ;\n  int result = 0 ;\n  if ( value . substr ( value . length ( ) - 2 ) == \".5\" ) {\n    result = num ? ( int ) floor ( num ) : ( int ) ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) round ( num ) ;\n  }\n  return result ;\n}\n",
        "int closest_integer ( string value ) {\n  if ( value . find ( '.' ) >= 0 ) {\n    while ( value [ value . length ( ) - 1 ] == '0' ) {\n      value . erase ( value . length ( ) - 1 ) ;\n    }\n  }\n  double num = atof ( value . c_str ( ) ) ;\n  int result = 0 ;\n  if ( value . substr ( value . length ( ) - 2 ) == \".5\" ) {\n    result = num > 0 ? ( int ) floor ( num ) : ( int ) ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) round ( num ) ;\n  }\n  return result ;\n}\n",
        "int closest_integer ( string value ) {\n  if ( value . find ( '.' ) >= 0 ) {\n    while ( value [ value . size ( ) - 1 ] == '0' ) {\n      value . erase ( value . size ( ) - 1 ) ;\n    }\n  }\n  double num = atof ( value . c_str ( ) ) ;\n  int result = 0 ;\n  if ( value . substr ( value . size ( ) - 2 ) == \".5\" ) {\n    result = num ? ( int ) floor ( num ) : ( int ) ceil ( num ) ;\n  }\n  else if ( value . size ( ) > 0 ) {\n    result = ( int ) round ( num ) ;\n  }\n  return result ;\n}\n",
        "int closest_integer ( string value ) {\n  if ( value . find ( '.' ) >= 0 ) {\n    while ( value [ value . size ( ) - 1 ] == '0' ) {\n      value . erase ( value . size ( ) - 1 ) ;\n    }\n  }\n  double num = atof ( value . c_str ( ) ) ;\n  int result = 0 ;\n  if ( value . substr ( value . size ( ) - 2 ) == \".5\" ) {\n    result = num > 0 ? ( int ) floor ( num ) : ( int ) ceil ( num ) ;\n  }\n  else if ( value . size ( ) > 0 ) {\n    result = ( int ) round ( num ) ;\n  }\n  return result ;\n}\n",
        "int closest_integer ( string value ) {\n  if ( value . find ( '.' ) >= 0 ) {\n    while ( value [ value . length ( ) - 1 ] == '0' ) {\n      value . erase ( value . length ( ) - 1 ) ;\n    }\n  }\n  double num = atof ( value . c_str ( ) ) ;\n  int result = 0 ;\n  if ( value . substr ( value . length ( ) - 2 ) == \".5\" ) {\n    result = num ? ( int ) floor ( num ) : ( int ) ceil ( num ) ;\n  }\n  else if ( value . size ( ) > 0 ) {\n    result = ( int ) round ( num ) ;\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) {\n      value = value . substring ( 0 , value . length ( ) - 1 ) ;\n    }\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) {\n      value = value . substring ( 0 , value . length ( ) - 1 ) ;\n    }\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) {\n      value = value . substring ( 0 , value . length ( ) - 1 ) ;\n    }\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) {\n      value = value . substring ( 0 , value . length ( ) - 1 ) ;\n    }\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) {\n      value = value . substring ( 0 , value . length ( ) - 1 ) ;\n    }\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . endsWith ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) {\n    result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  }\n  else if ( value . length ( ) > 0 ) {\n    result = ( int ) Math . round ( num ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer ( String value ) {\n  if ( value . indexOf ( '.' ) >= 0 ) {\n    while ( value . charAt ( value . length ( ) - 1 ) == '0' ) value = value . substring ( 0 , value . length ( ) - 1 ) ;\n  }\n  double num = Double . parseDouble ( value ) ;\n  int result = 0 ;\n  if ( value . substring ( value . length ( ) - 2 ) . equals ( \".5\" ) ) result = num > 0 ? ( int ) Math . floor ( num ) : ( int ) Math . ceil ( num ) ;\n  else if ( value . length ( ) > 0 ) result = ( int ) Math . round ( num ) ;\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true; \n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;  \n    for(int i = 1; i < lst.length; i++) { \n        if(lst[i] < 0) { \n            negative = false; \n            max_negative = Math.min(max_negative, lst[i]); \n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
      "target": "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = false, positive = false; \n    int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE;  \n    for(int i = 0; i < lst.length; i++) { \n        if(lst[i] < 0) { \n            negative = true; \n            max_negative = Math.max(max_negative, lst[i]); \n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
      "function range": "16,5-32,5",
      "raw_output": [
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ ] {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ ] {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ ] {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ 2 ] ;\n  result [ 0 ] = maxNegative ;\n  result [ 1 ] = minPositive ;\n  return result ;\n}\n",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = new int [ 2 ] ;\n  result [ 0 ] = maxNegative ;\n  result [ 1 ] = minPositive ;\n  return result ;\n}\n",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ 2 ] ;\n  result [ 0 ] = maxNegative ;\n  result [ 1 ] = minPositive ;\n  return result ;\n}\n",
        "public static List < Integer > largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  result . add ( maxNegative ) ;\n  result . add ( minPositive ) ;\n  return result ;\n}\n",
        "public static List < Integer > largestSmallestIntegers ( List < Integer > lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( lst . get ( i ) < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst . get ( i ) ) ;\n    }\n    else if ( lst . get ( i ) > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst . get ( i ) ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  result . add ( maxNegative ) ;\n  result . add ( minPositive ) ;\n  return result ;\n}\n",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ ] {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  ",
        "public static int [ ] largestSmallestIntegers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }\n  "
      ],
      "mid_translation": [
        "public : vector < int > largest_smallest_integers ( vector < int > lst ) {\n  bool negative = true , positive = true ;\n  int max_negative = INT_MAX , min_positive = INT_MAX ;\n  for ( int i = 1 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      max_negative = min ( max_negative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      min_positive = min ( min_positive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) max_negative = 0 ;\n  if ( ! positive ) min_positive = 0 ;\n  vector < int > result = {\n    max_negative , min_positive }\n    ;\n    return result ;\n  }\n  ",
        "vector < int > largest_smallest_integers ( vector < int > lst ) {\n  bool negative = true , positive = true ;\n  int max_negative = INT_MAX , min_positive = INT_MAX ;\n  for ( int i = 1 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      max_negative = min ( max_negative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      min_positive = min ( min_positive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) max_negative = 0 ;\n  if ( ! positive ) min_positive = 0 ;\n  vector < int > result = {\n    max_negative , min_positive }\n    ;\n    return result ;\n  }\n  ",
        "public : vector < int > largest_smallest_integers ( vector < int > lst ) {\n  bool negative = true , positive = true ;\n  int max_negative = numeric_limits < int > :: max ( ) , min_positive = numeric_limits < int > :: min ( ) ;\n  for ( int i = 1 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      max_negative = min ( max_negative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      min_positive = min ( min_positive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) max_negative = 0 ;\n  if ( ! positive ) min_positive = 0 ;\n  vector < int > result = {\n    max_negative , min_positive }\n    ;\n    return result ;\n  }\n  ",
        "public : vector < int > largest_smallest_integers ( vector < int > lst ) {\n  bool negative = true , positive = true ;\n  int max_negative = INT_MAX , min_positive = INT_MAX ;\n  for ( int i = 1 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      max_negative = min ( max_negative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      min_positive = min ( min_positive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) max_negative = 0 ;\n  if ( ! positive ) min_positive = 0 ;\n  vector < int > result ;\n  result . push_back ( max_negative ) ;\n  result . push_back ( min_positive ) ;\n  return result ;\n}\n",
        "public : vector < int > largest_smallest_integers ( vector < int > lst ) {\n  bool negative = true , positive = true ;\n  int max_negative = INT_MAX , min_positive = INT_MIN ;\n  for ( int i = 1 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      max_negative = min ( max_negative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      min_positive = min ( min_positive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) max_negative = 0 ;\n  if ( ! positive ) min_positive = 0 ;\n  vector < int > result = {\n    max_negative , min_positive }\n    ;\n    return result ;\n  }\n  "
      ],
      "output": [
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ ] {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ ] {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ ] {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ 2 ] ;\n  result [ 0 ] = maxNegative ;\n  result [ 1 ] = minPositive ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = new int [ 2 ] ;\n  result [ 0 ] = maxNegative ;\n  result [ 1 ] = minPositive ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ 2 ] ;\n  result [ 0 ] = maxNegative ;\n  result [ 1 ] = minPositive ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  result . add ( maxNegative ) ;\n  result . add ( minPositive ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > largest_smallest_integers ( List < Integer > lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . size ( ) ;\n  i ++ ) {\n    if ( lst . get ( i ) < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst . get ( i ) ) ;\n    }\n    else if ( lst . get ( i ) > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst . get ( i ) ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  result . add ( maxNegative ) ;\n  result . add ( minPositive ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MAX_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) maxNegative = 0 ;\n  if ( ! positive ) minPositive = 0 ;\n  int [ ] result = new int [ ] {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] largest_smallest_integers ( int [ ] lst ) {\n  boolean negative = true , positive = true ;\n  int maxNegative = Integer . MIN_VALUE , minPositive = Integer . MIN_VALUE ;\n  for ( int i = 1 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( lst [ i ] < 0 ) {\n      negative = false ;\n      maxNegative = Math . min ( maxNegative , lst [ i ] ) ;\n    }\n    else if ( lst [ i ] > 0 ) {\n      positive = true ;\n      minPositive = Math . min ( minPositive , lst [ i ] ) ;\n    }\n  }\n  if ( ! negative ) {\n    maxNegative = 0 ;\n  }\n  if ( ! positive ) {\n    minPositive = 0 ;\n  }\n  int [ ] result = {\n    maxNegative , minPositive }\n    ;\n    return result ;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text; \n}",
      "target": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\"; \n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n    }\n    return new_text;\n}",
      "function range": "13,5-37,5",
      "raw_output": [
        "public static String fixSpaces ( String text ) {\n  StringBuilder new_text = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuilder newText = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText . append ( \"_\" ) ;\n        newText . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else newText . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  String newText = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText += \"_\" ;\n        newText += text . substring ( i , i + 1 ) ;\n      }\n      else newText += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuffer new_text = new StringBuffer ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  String new_text = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text += \"_\" ;\n        new_text += text . substring ( i , i + 1 ) ;\n      }\n      else new_text += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuilder new_text = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuilder newText = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText . append ( \"_\" ) ;\n        newText . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else newText . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  String newText = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText += \"_\" ;\n        newText += text . substring ( i , i + 1 ) ;\n      }\n      else newText += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuffer new_text = new StringBuffer ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  String new_text = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text += \"_\" ;\n        new_text += text . substring ( i , i + 1 ) ;\n      }\n      else new_text += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuilder newText = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText . append ( \"_\" ) ;\n        newText . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else newText . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuilder new_text = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  String newText = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText += \"_\" ;\n        newText += text . substring ( i , i + 1 ) ;\n      }\n      else newText += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuffer new_text = new StringBuffer ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  String new_text = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text += \"_\" ;\n        new_text += text . substring ( i , i + 1 ) ;\n      }\n      else new_text += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  String newText = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        newText += \"-\" + text . substring ( i , i + 1 ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          newText += \"_\" ;\n        }\n        newText += text . substring ( i , i + 1 ) ;\n      }\n    }\n    else {\n      newText += text . substring ( i , i + 1 ) ;\n    }\n    start = i + 1 ;\n    end = i + 1 ;\n  }\n  i += 1 ;\n  return newText ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuilder new_text = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          new_text . append ( \"_\" ) ;\n        }\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n    }\n    else {\n      new_text . append ( text . substring ( i , i + 1 ) ) ;\n    }\n    start = i + 1 ;\n    end = i + 1 ;\n  }\n  i += 1 ;\n  return new_text . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuilder newText = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        newText . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          newText . append ( \"_\" ) ;\n        }\n        newText . append ( text . substring ( i , i + 1 ) ) ;\n      }\n    }\n    else {\n      newText . append ( text . substring ( i , i + 1 ) ) ;\n    }\n    start = i + 1 ;\n    end = i + 1 ;\n  }\n  i += 1 ;\n  return newText . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  String new_text = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        new_text += \"-\" + text . substring ( i , i + 1 ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          new_text += \"_\" ;\n        }\n        new_text += text . substring ( i , i + 1 ) ;\n      }\n    }\n    else {\n      new_text += text . substring ( i , i + 1 ) ;\n    }\n    start = i + 1 ;\n    end = i + 1 ;\n  }\n  i += 1 ;\n  return new_text ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuffer new_text = new StringBuffer ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          new_text . append ( \"_\" ) ;\n        }\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n    }\n    else {\n      new_text . append ( text . substring ( i , i + 1 ) ) ;\n    }\n    start = i + 1 ;\n    end = i + 1 ;\n  }\n  i += 1 ;\n  return new_text . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuilder newText = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText . append ( \"_\" ) ;\n        newText . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else newText . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuilder new_text = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  String newText = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText += \"_\" ;\n        newText += text . substring ( i , i + 1 ) ;\n      }\n      else newText += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  StringBuffer new_text = new StringBuffer ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}\n",
        "public static String fixSpaces ( String text ) {\n  String new_text = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text += \"_\" ;\n        new_text += text . substring ( i , i + 1 ) ;\n      }\n      else new_text += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}\n"
      ],
      "mid_translation": [
        "QString fix_spaces ( QString text ) {\n  QString new_text ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text [ i ] == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        new_text += \"-\" + text . mid ( i , i + 1 ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          new_text += \"_\" ;\n        }\n        new_text += text . mid ( i , i + 1 ) ;\n      }\n      else {\n        new_text += text . mid ( i , i + 1 ) ;\n      }\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}\n",
        "QString fix_spaces ( QString text ) {\n  QString new_text ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . size ( ) ) {\n    if ( text [ i ] == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        new_text += \"-\" + text . mid ( i , i + 1 ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          new_text += \"_\" ;\n        }\n        new_text += text . mid ( i , i + 1 ) ;\n      }\n      else {\n        new_text += text . mid ( i , i + 1 ) ;\n      }\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}\n",
        "QString fix_spaces ( const QString & text ) {\n  QString new_text ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text [ i ] == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        new_text += \"-\" + text . mid ( i , i + 1 ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          new_text += \"_\" ;\n        }\n        new_text += text . mid ( i , i + 1 ) ;\n      }\n      else {\n        new_text += text . mid ( i , i + 1 ) ;\n      }\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}\n",
        "QString fix_spaces ( QString text ) {\n  QString new_text ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text [ i ] == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text += \"-\" + text . mid ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text += \"_\" ;\n        new_text += text . mid ( i , i + 1 ) ;\n      }\n      else new_text += text . mid ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}\n",
        "QString fix_spaces ( const QString & text ) {\n  QString new_text ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . size ( ) ) {\n    if ( text [ i ] == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        new_text += \"-\" + text . mid ( i , i + 1 ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          new_text += \"_\" ;\n        }\n        new_text += text . mid ( i , i + 1 ) ;\n      }\n      else {\n        new_text += text . mid ( i , i + 1 ) ;\n      }\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuilder new_text = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuilder newText = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText . append ( \"_\" ) ;\n        newText . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else newText . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  String newText = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText += \"_\" ;\n        newText += text . substring ( i , i + 1 ) ;\n      }\n      else newText += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuffer new_text = new StringBuffer ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  String new_text = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text += \"_\" ;\n        new_text += text . substring ( i , i + 1 ) ;\n      }\n      else new_text += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuilder new_text = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuilder newText = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText . append ( \"_\" ) ;\n        newText . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else newText . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  String newText = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText += \"_\" ;\n        newText += text . substring ( i , i + 1 ) ;\n      }\n      else newText += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuffer new_text = new StringBuffer ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  String new_text = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text += \"_\" ;\n        new_text += text . substring ( i , i + 1 ) ;\n      }\n      else new_text += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuilder newText = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText . append ( \"_\" ) ;\n        newText . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else newText . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuilder new_text = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  String newText = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText += \"_\" ;\n        newText += text . substring ( i , i + 1 ) ;\n      }\n      else newText += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuffer new_text = new StringBuffer ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  String new_text = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text += \"_\" ;\n        new_text += text . substring ( i , i + 1 ) ;\n      }\n      else new_text += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  String newText = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        newText += \"-\" + text . substring ( i , i + 1 ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          newText += \"_\" ;\n        }\n        newText += text . substring ( i , i + 1 ) ;\n      }\n    }\n    else {\n      newText += text . substring ( i , i + 1 ) ;\n    }\n    start = i + 1 ;\n    end = i + 1 ;\n  }\n  i += 1 ;\n  return newText ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuilder new_text = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          new_text . append ( \"_\" ) ;\n        }\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n    }\n    else {\n      new_text . append ( text . substring ( i , i + 1 ) ) ;\n    }\n    start = i + 1 ;\n    end = i + 1 ;\n  }\n  i += 1 ;\n  return new_text . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuilder newText = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        newText . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          newText . append ( \"_\" ) ;\n        }\n        newText . append ( text . substring ( i , i + 1 ) ) ;\n      }\n    }\n    else {\n      newText . append ( text . substring ( i , i + 1 ) ) ;\n    }\n    start = i + 1 ;\n    end = i + 1 ;\n  }\n  i += 1 ;\n  return newText . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  String new_text = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        new_text += \"-\" + text . substring ( i , i + 1 ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          new_text += \"_\" ;\n        }\n        new_text += text . substring ( i , i + 1 ) ;\n      }\n    }\n    else {\n      new_text += text . substring ( i , i + 1 ) ;\n    }\n    start = i + 1 ;\n    end = i + 1 ;\n  }\n  i += 1 ;\n  return new_text ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuffer new_text = new StringBuffer ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) {\n      end += 1 ;\n    }\n    else {\n      if ( end - start > 2 ) {\n        new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) {\n          new_text . append ( \"_\" ) ;\n        }\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n    }\n    else {\n      new_text . append ( text . substring ( i , i + 1 ) ) ;\n    }\n    start = i + 1 ;\n    end = i + 1 ;\n  }\n  i += 1 ;\n  return new_text . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuilder newText = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText . append ( \"_\" ) ;\n        newText . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else newText . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuilder new_text = new StringBuilder ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  String newText = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) newText += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) newText += \"_\" ;\n        newText += text . substring ( i , i + 1 ) ;\n      }\n      else newText += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return newText ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  StringBuffer new_text = new StringBuffer ( ) ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text . append ( \"-\" ) . append ( text . substring ( i , i + 1 ) ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text . append ( \"_\" ) ;\n        new_text . append ( text . substring ( i , i + 1 ) ) ;\n      }\n      else new_text . append ( text . substring ( i , i + 1 ) ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces ( String text ) {\n  String new_text = \"\" ;\n  int i = 0 ;\n  int start = 0 ;\n  int end = 0 ;\n  while ( i < text . length ( ) ) {\n    if ( text . charAt ( i ) == ' ' ) end += 1 ;\n    else {\n      if ( end - start > 2 ) new_text += \"-\" + text . substring ( i , i + 1 ) ;\n      else if ( end - start > 0 ) {\n        for ( int j = start ;\n        j < end ;\n        j += 1 ) new_text += \"_\" ;\n        new_text += text . substring ( i , i + 1 ) ;\n      }\n      else new_text += text . substring ( i , i + 1 ) ;\n      start = i + 1 ;\n      end = i + 1 ;\n    }\n    i += 1 ;\n  }\n  return new_text ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0) \n            result += lst[i] * lst[i]; \n        else if (i % 3 == 0) \n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
      "target": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 3 == 0) \n            result += lst[i] * lst[i]; \n        else if (i % 4 == 0) \n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
      "function range": "13,5-24,5",
      "raw_output": [
        "public static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst . get ( i ) * lst . get ( i ) ;\n    else if ( i % 3 == 0 ) result += lst . get ( i ) * lst . get ( i ) * lst . get ( i ) ;\n    else result += lst . get ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquare ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int sumSquare ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst . get ( i ) * lst . get ( i ) ;\n    else if ( i % 3 == 0 ) result += lst . get ( i ) * lst . get ( i ) * lst . get ( i ) ;\n    else result += lst . get ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n",
        "public static int sumSquares ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst . get ( i ) * lst . get ( i ) ;\n    else if ( i % 3 == 0 ) result += lst . get ( i ) * lst . get ( i ) * lst . get ( i ) ;\n    else result += lst . get ( i ) ;\n  }\n  return result ;\n}\n",
        "static public int sumSquares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "int sum_squares ( vector < int > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "int sum_squares ( vector < int > & lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public : int sum_squares ( vector < int > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public : int sum_squares ( vector < int > & lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n",
        "public : int sumSquares ( vector < int > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst . get ( i ) * lst . get ( i ) ;\n    else if ( i % 3 == 0 ) result += lst . get ( i ) * lst . get ( i ) * lst . get ( i ) ;\n    else result += lst . get ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst . get ( i ) * lst . get ( i ) ;\n    else if ( i % 3 == 0 ) result += lst . get ( i ) * lst . get ( i ) * lst . get ( i ) ;\n    else result += lst . get ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) {\n      result += lst [ i ] * lst [ i ] ;\n    }\n    else if ( i % 3 == 0 ) {\n      result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    }\n    else {\n      result += lst [ i ] ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( int lst [ ] ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares ( List < Integer > lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . size ( ) ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst . get ( i ) * lst . get ( i ) ;\n    else if ( i % 3 == 0 ) result += lst . get ( i ) * lst . get ( i ) * lst . get ( i ) ;\n    else result += lst . get ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static public int sum_squares ( int [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i += 1 ) {\n    if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ;\n    else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ;\n    else result += lst [ i ] ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8)); \n}",
      "target": "public static boolean is_equal_to_sum_even(int n) {\n    return ((n % 2 == 0) && (n >= 8)); \n}",
      "function range": "13,5-15,5",
      "raw_output": [
        "public static boolean isEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "static boolean isEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean isEqualToSumEvenOdd ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean isEqualToSumEvenEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean isEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "static boolean isEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean isEqualToSumEvenOdd ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean isEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "static boolean isEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean isEqualToSumEvenOdd ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean equalsToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean IsEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "static boolean equalsToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "static boolean IsEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean equals ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static final boolean isEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static boolean isEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static final boolean isEqualToSumEvenOdd ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public final static boolean isEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public static final Predicate < Integer > IS_EQUAL_TO_sum_EVEN = new Predicate < Integer > ( ) {\n  @ Override public boolean apply ( Integer n ) {\n    return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n  }\n}\n"
      ],
      "mid_translation": [
        "bool is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "bool is_equal_to_sum_even ( unsigned n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "bool is_equal_to_sum_even ( size_t n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "bool IsEqualToSumEven ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n",
        "public : bool is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static static boolean is_equal_to_sum_even ( int n ) {\n  return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Predicate < Integer is_equal_to_sum_even IS_EQUAL_TO_sum_EVEN = new Predicate < Integer > ( ) {\n  @ Override public boolean apply ( Integer n ) {\n    return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ;\n  }\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a); \n    int upper = Math.min(8, b); \n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
      "target": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, Math.min(a, b)); \n    int upper = Math.min(8, Math.max(a, b)); \n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
      "function range": "14,5-23,5",
      "raw_output": [
        "public static int [ ] generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = i ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = i ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = i ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ lower ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}\n",
        "public static int [ ] generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = i ;\n    }\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . add ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public static int [ ] generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = i ;\n    }\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > generateIntegers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > generate_integers ( int a , int b ) {\n  int lower = max ( 2 , a ) ;\n  int upper = min ( 8 , b ) ;\n  vector < int > result ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . push_back ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "vector < int > generate_integers ( int a , int b ) {\n  int lower = std :: max ( 2 , a ) ;\n  int upper = std :: min ( 8 , b ) ;\n  vector < int > result ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . push_back ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public : vector < int > generate_integers ( int a , int b ) {\n  int lower = max ( 2 , a ) ;\n  int upper = min ( 8 , b ) ;\n  vector < int > result ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . push_back ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "public : vector < int > generateIntegers ( int a , int b ) {\n  int lower = max ( 2 , a ) ;\n  int upper = min ( 8 , b ) ;\n  vector < int > result ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . push_back ( i ) ;\n    }\n  }\n  return result ;\n}\n",
        "vector < int > generate_integers ( int a , int b ) {\n  int lower = max ( 2 , a ) ;\n  int upper = min ( 8 , b ) ;\n  vector < int > result ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . emplace_back ( i ) ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = i ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static ArrayList < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = i ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = i ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ lower ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = i ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result . add ( i ) ;\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result [ i ] = i ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  int [ ] result = new int [ upper ] ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) {\n      result [ i ] = i ;\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < Integer > generate_integers ( int a , int b ) {\n  int lower = Math . max ( 2 , a ) ;\n  int upper = Math . min ( 8 , b ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = lower ;\n  i <= upper ;\n  i += 1 ) {\n    if ( i % 2 == 0 ) result . add ( i ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]); \n                if(j != 0) val = Math.min(val, grid[i - 1][j]); \n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]); \n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]); \n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
      "target": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.min(val, grid[i - 1][j]); \n                if(j != 0) val = Math.min(val, grid[i][j - 1]); \n                if(i != n - 1) val = Math.min(val, grid[i + 1][j]); \n                if(j != n - 1) val = Math.min(val, grid[i][j + 1]); \n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
      "function range": "35,5-54,5",
      "raw_output": [
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static List < Integer > minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  List < Integer > ans = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans . add ( 1 ) ;\n    else ans . add ( val ) ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] [ ] ans = new int [ k ] [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] [ i ] = 1 ;\n    else ans [ i ] [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static List < Integer > minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  List < Integer > ans = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans . add ( 1 ) ;\n    else ans . add ( val ) ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n",
        "public static int [ ] [ ] minPath ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < vector < int >> min_path ( vector < vector < int >> & grid , int k ) {\n  int n = grid . size ( ) ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) {\n          val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        }\n        if ( j != 0 ) {\n          val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        }\n        if ( i != n - 1 ) {\n          val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        }\n        if ( j != n + 1 ) {\n          val = max ( val , grid [ i ] [ j - 1 ] ) ;\n        }\n      }\n    }\n  }\n  vector < int > ans ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      ans . push_back ( 1 ) ;\n    }\n    else {\n      ans . push_back ( val ) ;\n    }\n  }\n  return ans ;\n}\n",
        "public : vector < vector < int >> min_path ( vector < vector < int >> & grid , int k ) {\n  int n = grid . size ( ) ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) {\n          val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        }\n        if ( j != 0 ) {\n          val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        }\n        if ( i != n - 1 ) {\n          val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        }\n        if ( j != n + 1 ) {\n          val = max ( val , grid [ i ] [ j - 1 ] ) ;\n        }\n      }\n    }\n  }\n  vector < int > ans ( k , 0 ) ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      ans [ i ] = 1 ;\n    }\n    else {\n      ans [ i ] = val ;\n    }\n  }\n  return ans ;\n}\n",
        "public : vector < vector < int >> minPath ( vector < vector < int >> & grid , int k ) {\n  int n = grid . size ( ) ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) {\n          val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        }\n        if ( j != 0 ) {\n          val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        }\n        if ( i != n - 1 ) {\n          val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        }\n        if ( j != n + 1 ) {\n          val = max ( val , grid [ i ] [ j - 1 ] ) ;\n        }\n      }\n    }\n  }\n  vector < int > ans ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      ans . push_back ( 1 ) ;\n    }\n    else {\n      ans . push_back ( val ) ;\n    }\n  }\n  return ans ;\n}\n",
        "public : vector < vector < int >> minPath ( vector < vector < int >> & grid , int k ) {\n  int n = grid . size ( ) ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) {\n          val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        }\n        if ( j != 0 ) {\n          val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        }\n        if ( i != n - 1 ) {\n          val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        }\n        if ( j != n + 1 ) {\n          val = max ( val , grid [ i ] [ j - 1 ] ) ;\n        }\n      }\n    }\n  }\n  vector < int > ans ( k , 0 ) ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      ans [ i ] = 1 ;\n    }\n    else {\n      ans [ i ] = val ;\n    }\n  }\n  return ans ;\n}\n",
        "public : vector < vector < int >> min_path ( vector < vector < int >> & grid , int k ) {\n  int n = grid . size ( ) ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) {\n          val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        }\n        if ( j != 0 ) {\n          val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        }\n        if ( i != n - 1 ) {\n          val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        }\n        if ( j != n + 1 ) {\n          val = max ( val , grid [ i ] [ j - 1 ] ) ;\n        }\n      }\n    }\n  }\n  vector < int > ans ( k ) ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) {\n      ans [ i ] = 1 ;\n    }\n    else {\n      ans [ i ] = val ;\n    }\n  }\n  return ans ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  List < Integer > ans = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans . add ( 1 ) ;\n    else ans . add ( val ) ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] [ ] ans = new int [ k ] [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] [ i ] = 1 ;\n    else ans [ i ] [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  List < Integer > ans = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans . add ( 1 ) ;\n    else ans . add ( val ) ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = Math . max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = Math . min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = Math . max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int ans [ ] = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] [ ] min_path ( int [ ] [ ] grid , int k ) {\n  int n = grid . length ;\n  int val = n * n + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] == 1 ) {\n        if ( i != 0 ) val = max ( val , grid [ i ] [ j + 1 ] ) ;\n        if ( j != 0 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( i != n - 1 ) val = min ( val , grid [ i - 1 ] [ j ] ) ;\n        if ( j != n + 1 ) val = max ( val , grid [ i ] [ j - 1 ] ) ;\n      }\n    }\n  }\n  int [ ] ans = new int [ k ] ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ;\n    else ans [ i ] = val ;\n  }\n  return ans ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z') \n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
      "target": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if (! (('a' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'z') || ('A' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'Z'))) \n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
      "function range": "17,5-35,5",
      "raw_output": [
        "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . equals ( \"\" ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . equals ( \"\" ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . equals ( \"\" ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . equals ( \"\" ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( '0' <= lst [ i ] . charAt ( 0 ) && lst [ i ] . charAt ( 0 ) <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . equals ( \"\" ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "public static String fileNameCheck ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n"
      ],
      "mid_translation": [
        "QString file_name_check ( QString file_name ) {\n  QStringList lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . count ( ) != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] == \"txt\" || lst [ 1 ] == \"exe\" || lst [ 1 ] == \"dll\" ) ) return \"No\" ;\n  if ( lst [ 0 ] . isEmpty ( ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] [ 0 ] && lst [ 0 ] [ 0 ] > 'z' || 'A' > lst [ 0 ] [ 0 ] && lst [ 0 ] [ 0 ] > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "QString file_name_check ( QString file_name ) {\n  QStringList lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . count ( ) != 2 ) return \"No\" ;\n  if ( ! ( lst . at ( 1 ) == \"txt\" || lst . at ( 1 ) == \"exe\" || lst . at ( 1 ) == \"dll\" ) ) return \"No\" ;\n  if ( lst . at ( 0 ) == \"\" ) return \"No\" ;\n  if ( 'a' > lst . at ( 0 ) && lst . at ( 0 ) > 'z' || 'A' > lst . at ( 0 ) && lst . at ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( QChar c : file_name ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "QString file_name_check ( QString file_name ) {\n  QStringList lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . count ( ) != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] == \"txt\" || lst [ 1 ] == \"exe\" || lst [ 1 ] == \"dll\" ) ) return \"No\" ;\n  if ( lst [ 0 ] . isEmpty ( ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] [ 0 ] && lst [ 0 ] [ 0 ] > 'z' || 'A' > lst [ 0 ] [ 0 ] && lst [ 0 ] [ 0 ] > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( QChar c : file_name ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "QString file_name_check ( QString file_name ) {\n  QStringList lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . count ( ) != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] == \"txt\" || lst [ 1 ] == \"exe\" || lst [ 1 ] == \"dll\" ) ) return \"No\" ;\n  if ( lst [ 0 ] . isEmpty ( ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . at ( 0 ) && lst [ 0 ] . at ( 0 ) > 'z' || 'A' > lst [ 0 ] . at ( 0 ) && lst [ 0 ] . at ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n",
        "QString file_name_check ( QString file_name ) {\n  QStringList lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . size ( ) != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] == \"txt\" || lst [ 1 ] == \"exe\" || lst [ 1 ] == \"dll\" ) ) return \"No\" ;\n  if ( lst [ 0 ] . isEmpty ( ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] [ 0 ] && lst [ 0 ] [ 0 ] > 'z' || 'A' > lst [ 0 ] [ 0 ] && lst [ 0 ] [ 0 ] > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( QChar c : file_name ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . equals ( \"\" ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . equals ( \"\" ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . equals ( \"\" ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . equals ( \"\" ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( '0' <= lst [ i ] . charAt ( 0 ) && lst [ i ] . charAt ( 0 ) <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . equals ( \"\" ) ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] . length ( ) == 0 ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String file_name ) {\n  String [ ] lst = file_name . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check ( String fileName ) {\n  String [ ] lst = fileName . split ( \"\\\\.\" ) ;\n  if ( lst . length != 2 ) return \"No\" ;\n  if ( ! ( lst [ 1 ] . equals ( \"txt\" ) || lst [ 1 ] . equals ( \"exe\" ) || lst [ 1 ] . equals ( \"dll\" ) ) ) return \"No\" ;\n  if ( lst [ 0 ] == null ) return \"No\" ;\n  if ( 'a' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'z' || 'A' > lst [ 0 ] . charAt ( 0 ) && lst [ 0 ] . charAt ( 0 ) > 'Z' ) return \"No\" ;\n  int digit_cnt = 0 ;\n  for ( char c : lst ) {\n    if ( '0' <= c && c <= '9' ) digit_cnt += 1 ;\n  }\n  if ( digit_cnt > 3 ) return \"No\" ;\n  return \"Yes\" ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator / denom == (int) (numerator / denom)) \n        return true;\n    return false;\n}",
      "target": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (1.0 * numerator / denom == (int) (numerator / denom)) \n        return true;\n    return false;\n}",
      "function range": "15,5-26,5",
      "raw_output": [
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x . trim ( ) ) ;\n  int b = Integer . parseInt ( x . trim ( ) ) ;\n  int c = Integer . parseInt ( n . trim ( ) ) ;\n  int d = Integer . parseInt ( n . trim ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( n ) ;\n  int c = Integer . parseInt ( x ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( n ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x . substring ( 0 , 1 ) ) ;\n  int b = Integer . parseInt ( x . substring ( 1 ) ) ;\n  int c = Integer . parseInt ( n . substring ( 0 , 1 ) ) ;\n  int d = Integer . parseInt ( n . substring ( 1 ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}\n",
        "static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x . trim ( ) ) ;\n  int b = Integer . parseInt ( x . trim ( ) ) ;\n  int c = Integer . parseInt ( n . trim ( ) ) ;\n  int d = Integer . parseInt ( n . trim ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}\n",
        "static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x . trim ( ) ) ;\n  int b = Integer . parseInt ( x . trim ( ) ) ;\n  int c = Integer . parseInt ( n . trim ( ) ) ;\n  int d = Integer . parseInt ( n . trim ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MIN_VALUE ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MAX_VALUE ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MIN_VALUE ) return true ;\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MAX_VALUE ) return true ;\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x . trim ( ) ) ;\n  int b = Integer . parseInt ( x . trim ( ) ) ;\n  int c = Integer . parseInt ( n . trim ( ) ) ;\n  int d = Integer . parseInt ( n . trim ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MAX_VALUE ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MIN_VALUE ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MAX_VALUE ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MIN_VALUE ) return true ;\n  return false ;\n}\n",
        "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MAX_VALUE ) return true ;\n  return false ;\n}\n",
        "static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MIN_VALUE ) {\n    return true ;\n  }\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool simplify ( const SkString & x , const SkString & n ) {\n  int a = SkScalarRoundToInt ( x . c_str ( ) ) ;\n  int b = SkScalarRoundToInt ( x . c_str ( ) ) ;\n  int c = SkScalarRoundToInt ( n . c_str ( ) ) ;\n  int d = SkScalarRoundToInt ( n . c_str ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}\n",
        "bool simplify ( const string & x , const string & n ) {\n  int a = atoi ( x . c_str ( ) ) ;\n  int b = atoi ( x . c_str ( ) ) ;\n  int c = atoi ( n . c_str ( ) ) ;\n  int d = atoi ( n . c_str ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}\n",
        "bool simplify ( string x , string n ) {\n  int a = atoi ( x . c_str ( ) ) ;\n  int b = atoi ( x . c_str ( ) ) ;\n  int c = atoi ( n . c_str ( ) ) ;\n  int d = atoi ( n . c_str ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}\n",
        "bool simplify ( const QString & x , const QString & n ) {\n  int a = int ( x . toDouble ( ) ) ;\n  int b = int ( x . toDouble ( ) ) ;\n  int c = int ( n . toDouble ( ) ) ;\n  int d = int ( n . toDouble ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == int ( numerator / denom ) ) return true ;\n  return false ;\n}\n",
        "bool simplify ( const string & x , const string & n ) {\n  int a = atoi ( x . c_str ( ) ) ;\n  int b = atoi ( x . c_str ( ) ) ;\n  int c = atoi ( n . c_str ( ) ) ;\n  int d = atoi ( n . c_str ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == int ( numerator / denom ) ) return true ;\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x . trim ( ) ) ;\n  int b = Integer . parseInt ( x . trim ( ) ) ;\n  int c = Integer . parseInt ( n . trim ( ) ) ;\n  int d = Integer . parseInt ( n . trim ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( n ) ;\n  int c = Integer . parseInt ( x ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( n ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x . substring ( 0 , 1 ) ) ;\n  int b = Integer . parseInt ( x . substring ( 1 ) ) ;\n  int c = Integer . parseInt ( n . substring ( 0 , 1 ) ) ;\n  int d = Integer . parseInt ( n . substring ( 1 ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x . trim ( ) ) ;\n  int b = Integer . parseInt ( x . trim ( ) ) ;\n  int c = Integer . parseInt ( n . trim ( ) ) ;\n  int d = Integer . parseInt ( n . trim ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x . trim ( ) ) ;\n  int b = Integer . parseInt ( x . trim ( ) ) ;\n  int c = Integer . parseInt ( n . trim ( ) ) ;\n  int d = Integer . parseInt ( n . trim ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == ( int ) ( numerator / denom ) ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MIN_VALUE ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MAX_VALUE ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MIN_VALUE ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MAX_VALUE ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x . trim ( ) ) ;\n  int b = Integer . parseInt ( x . trim ( ) ) ;\n  int c = Integer . parseInt ( n . trim ( ) ) ;\n  int d = Integer . parseInt ( n . trim ( ) ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MAX_VALUE ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MIN_VALUE ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MAX_VALUE ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MIN_VALUE ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MAX_VALUE ) return true ;\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify ( String x , String n ) {\n  int a = Integer . parseInt ( x ) ;\n  int b = Integer . parseInt ( x ) ;\n  int c = Integer . parseInt ( n ) ;\n  int d = Integer . parseInt ( n ) ;\n  int numerator = a * c ;\n  int denom = b * d ;\n  if ( numerator / denom == Integer . MIN_VALUE ) {\n    return true ;\n  }\n  return false ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 0; i < n-2; i += 1) { \n        for (int j = 0; j < n-1; j += 1) { \n            for (int k = 0; k < n; k += 1) { \n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "target": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 0; i < n-2; i += 1) { \n        for (int j = i + 1; j < n-1; j += 1) { \n            for (int k = j + 1; k < n; k += 1) { \n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "16,5-30,5",
      "raw_output": [
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int A [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static final int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) {\n    A [ i - 1 ] = i * i - i + 1 ;\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int A [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result ++ ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] [ i ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int A [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) {\n    A [ i - 1 ] = i * i - i + 1 ;\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] [ i ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int A [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result ++ ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] [ i ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) {\n    A [ i - 1 ] = i * i - i + 1 ;\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int getMaxTriples ( int n ) {\n  int A [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : int get_max_triples ( int n ) {\n  int A [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) {\n    A [ i - 1 ] = i * i - i + 1 ;\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "int get_max_triples ( int n ) {\n  int A [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) {\n    A [ i - 1 ] = i * i - i + 1 ;\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public : int get_max_triples ( int n ) {\n  vector < int > A ( n ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) {\n    A [ i - 1 ] = i * i - i + 1 ;\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public : int get_max_triples ( int n ) {\n  vector < int > A ( n , 0 ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) {\n    A [ i - 1 ] = i * i - i + 1 ;\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n",
        "public : int getMaxTriples ( int n ) {\n  vector < int > A ( n ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) {\n    A [ i - 1 ] = i * i - i + 1 ;\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int A [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) {\n    A [ i - 1 ] = i * i - i + 1 ;\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int A [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result ++ ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] [ i ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int A [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) {\n    A [ i - 1 ] = i * i - i + 1 ;\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] [ i ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int A [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result ++ ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] [ i ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] [ ] A = new int [ n ] [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] [ j ] + A [ j ] [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int [ ] A = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) {\n    A [ i - 1 ] = i * i - i + 1 ;\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) {\n          result += 1 ;\n        }\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples ( int n ) {\n  int A [ ] = new int [ n ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i += 1 ) A [ i - 1 ] = i * i - i + 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j += 1 ) {\n      for ( int k = 0 ;\n      k < n ;\n      k += 1 ) {\n        if ( ( A [ i ] + A [ j ] + A [ k ] ) % 3 == 0 ) result += 1 ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x; \n    } \n    return y; \n}",
      "target": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return y; \n    } \n    return x; \n}",
      "function range": "11,5-17,5",
      "raw_output": [
        "public static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "public static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "public static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "public static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "public static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "public static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "public static final int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "public static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "public static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "public static double xOrY ( int n , double x , double y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "public static double xOrY ( int n , double x , double y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "public static int xOrY ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "public static long xOrY ( int n , long x , long y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "public static double x_or_y ( int n , double x , double y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n"
      ],
      "mid_translation": [
        "int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "public : int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n",
        "int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}\n",
        "template < typename T > T x_or_y ( int n , T x , T y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double x_or_y ( int n , double x , double y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double x_or_y ( int n , double x , double y ) {\n  if ( n == 1 ) {\n    return y ;\n  }\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) {\n      return x ;\n    }\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y ( int n , int x , int y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long x_or_y ( int n , long x , long y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double x_or_y ( int n , double x , double y ) {\n  if ( n == 1 ) return y ;\n  for ( int i = 2 ;\n  i < n ;\n  i += 1 ) {\n    if ( n % i == 0 ) return x ;\n  }\n  return y ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    String pat = b; \n    for (int i = 0; i < a.length(); i += 1) { \n        for (int j = 0; j < l; j += 1) { \n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
      "target": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    String pat = b + b; \n    for (int i = 0; i < a.length() - l + 1; i += 1) { \n        for (int j = 0; j < l + 1; j += 1) { \n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
      "function range": "12,5-21,5",
      "raw_output": [
        "public static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpPatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . charAt ( i ) == pat . charAt ( j ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . charAt ( i ) == pat . charAt ( j ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . charAt ( i ) == pat . charAt ( j ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . charAt ( i ) == pat . charAt ( j ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpPatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . charAt ( i ) == pat . charAt ( j ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpPatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpPatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "static boolean cycpatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}\n",
        "public static boolean cycpPatternCheck ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}\n"
      ],
      "mid_translation": [
        "bool cycpattern_check ( string a , string b ) {\n  int l = b . length ( ) ;\n  string pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substr ( i , i + l ) == pat . substr ( j , j + l ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool cycpattern_check ( string a , string b ) {\n  int l = b . length ( ) ;\n  string pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a [ i ] == pat [ j ] ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool cycpattern_check ( string a , string b ) {\n  size_t l = b . length ( ) ;\n  string pat = b ;\n  for ( size_t i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( size_t j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substr ( i , i + l ) == pat . substr ( j , j + l ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool cycpattern_check ( const string & a , const string & b ) {\n  int l = b . length ( ) ;\n  string pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substr ( i , i + l ) == pat . substr ( j , j + l ) ) return true ;\n    }\n  }\n  return false ;\n}\n",
        "bool cycpattern_check ( const string & a , const string & b ) {\n  size_t l = b . length ( ) ;\n  string pat = b ;\n  for ( size_t i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( size_t j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substr ( i , i + l ) == pat . substr ( j , j + l ) ) return true ;\n    }\n  }\n  return false ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . charAt ( i ) == pat . charAt ( j ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . charAt ( i ) == pat . charAt ( j ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . charAt ( i ) == pat . charAt ( j ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . charAt ( i ) == pat . charAt ( j ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . charAt ( i ) == pat . charAt ( j ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check ( String a , String b ) {\n  int l = b . length ( ) ;\n  String pat = b ;\n  for ( int i = 0 ;\n  i < a . length ( ) ;\n  i += 1 ) {\n    for ( int j = 0 ;\n    j < l ;\n    j += 1 ) {\n      if ( a . substring ( i , i + l ) . equals ( pat . substring ( j , j + l ) ) ) return true ;\n    }\n  }\n  return false ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i < planet2_index; i += 1) \n        result.add(planet_names.get(i)); \n    return result;\n}",
      "target": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index < planet2_index) { \n        for (int i = planet1_index + 1; i < planet2_index; i += 1) \n            result.add(planet_names.get(i));\n    } else {\n        for (int i = planet2_index + 1; i < planet1_index; i += 1)\n            result.add(planet_names.get(i));\n    }\n    return result;\n}",
      "function range": "21,5-34,5",
      "raw_output": [
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < string > bf ( string planet1 , string planet2 ) {\n  vector < string > planet_names ( {\n    \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" }\n    ) ;\n    vector < string > result ;\n    if ( ( ! planet_names . find ( planet1 ) ) || ( ! planet_names . find ( planet2 ) ) ) return result ;\n    int planet1_index = planet_names . find ( planet1 ) ;\n    int planet2_index = planet_names . find ( planet2 ) ;\n    for ( int i = planet1_index ;\n    i < planet2_index ;\n    i += 1 ) {\n      result . push_back ( planet_names [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "vector < string > bf ( string planet1 , string planet2 ) {\n  vector < string > planet_names {\n    \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" }\n    ;\n    vector < string > result ;\n    if ( ( ! planet_names . find ( planet1 ) ) || ( ! planet_names . find ( planet2 ) ) ) return result ;\n    int planet1_index = planet_names . find ( planet1 ) ;\n    int planet2_index = planet_names . find ( planet2 ) ;\n    for ( int i = planet1_index ;\n    i < planet2_index ;\n    i += 1 ) {\n      result . push_back ( planet_names [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "vector < string > bf ( string planet1 , string planet2 ) {\n  vector < string > planet_names ( {\n    \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" }\n    ) ;\n    vector < string > result ;\n    if ( ( ! planet_names . count ( planet1 ) ) || ( ! planet_names . count ( planet2 ) ) ) return result ;\n    int planet1_index = planet_names . find ( planet1 ) ;\n    int planet2_index = planet_names . find ( planet2 ) ;\n    for ( int i = planet1_index ;\n    i < planet2_index ;\n    i += 1 ) {\n      result . push_back ( planet_names [ i ] ) ;\n    }\n    return result ;\n  }\n  ",
        "vector < string > bf ( string planet1 , string planet2 ) {\n  vector < string > planet_names {\n    \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" }\n    ;\n    vector < string > result ;\n    if ( ( ! planet_names . find ( planet1 ) ) || ( ! planet_names . find ( planet2 ) ) ) return result ;\n    int planet1_index = planet_names . find ( planet1 ) ;\n    int planet2_index = planet_names . find ( planet2 ) ;\n    for ( int i = planet1_index ;\n    i < planet2_index ;\n    i += 1 ) {\n      result . push_back ( planet_names . at ( i ) ) ;\n    }\n    return result ;\n  }\n  ",
        "vector < string > bf ( string planet1 , string planet2 ) {\n  vector < string > planet_names = {\n    \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" }\n    ;\n    vector < string > result ;\n    if ( ( ! planet_names . find ( planet1 ) ) || ( ! planet_names . find ( planet2 ) ) ) return result ;\n    int planet1_index = planet_names . find ( planet1 ) ;\n    int planet2_index = planet_names . find ( planet2 ) ;\n    for ( int i = planet1_index ;\n    i < planet2_index ;\n    i += 1 ) {\n      result . push_back ( planet_names [ i ] ) ;\n    }\n    return result ;\n  }\n  "
      ],
      "output": [
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( Arrays . asList ( \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ) ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < String > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) return result ;\n  int planet1Index = planet_names . indexOf ( planet1 ) ;\n  int planet2Index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1Index ;\n  i < planet2Index ;\n  i += 1 ) result . add ( planet_names . get ( i ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList < String > bf ( String planet1 , String planet2 ) {\n  ArrayList < String > planet_names = new ArrayList < > ( ) ;\n  planet_names . add ( \"Mercury\" ) ;\n  planet_names . add ( \"Venus\" ) ;\n  planet_names . add ( \"Earth\" ) ;\n  planet_names . add ( \"Mars\" ) ;\n  planet_names . add ( \"Jupiter\" ) ;\n  planet_names . add ( \"Saturn\" ) ;\n  planet_names . add ( \"Uranus\" ) ;\n  planet_names . add ( \"Neptune\" ) ;\n  ArrayList < String > result = new ArrayList < > ( ) ;\n  if ( ( ! planet_names . contains ( planet1 ) ) || ( ! planet_names . contains ( planet2 ) ) ) {\n    return result ;\n  }\n  int planet1_index = planet_names . indexOf ( planet1 ) ;\n  int planet2_index = planet_names . indexOf ( planet2 ) ;\n  for ( int i = planet1_index ;\n  i < planet2_index ;\n  i += 1 ) {\n    result . add ( planet_names . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i]; \n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
      "target": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        int div = (int) (number / num[i]); \n        while (div > 0) {\n            result += sym[i];\n            div -= 1;\n        }\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
      "function range": "13,5-27,5",
      "raw_output": [
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniroman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniroman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniroman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }\n    ",
        "public static String intToMiniroman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniroman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniroman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniroman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniroman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }\n    ",
        "public static String intToMiniRoman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }\n    "
      ],
      "mid_translation": [
        "string int_to_mini_roman ( int number ) {\n  int num [ ] = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    string sym [ ] = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      string result ;\n      while ( number > 0 ) {\n        result += sym [ i ] ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return result . c_str ( ) ;\n    }\n    ",
        "string int_to_mini_roman ( int number ) {\n  int num [ ] = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    string sym [ ] = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      string result ;\n      while ( number ) {\n        result += sym [ i ] ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return result . c_str ( ) ;\n    }\n    ",
        "string int_to_mini_roman ( int number ) {\n  vector < int > num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    vector < string > sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      string result ;\n      while ( number > 0 ) {\n        result += sym [ i ] ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return result . c_str ( ) ;\n    }\n    ",
        "string int_to_mini_roman ( int number ) {\n  vector < int > num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    string sym [ ] = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      string result ;\n      while ( number > 0 ) {\n        result += sym [ i ] ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return result . c_str ( ) ;\n    }\n    ",
        "public : string int_to_mini_roman ( int number ) {\n  vector < int > num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    vector < string > sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      string result ;\n      while ( number > 0 ) {\n        result += sym [ i ] ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return result . c_str ( ) ;\n    }\n    "
      ],
      "output": [
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuffer sb = new StringBuffer ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . toUpperCase ( ) ;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman ( int number ) {\n  int [ ] num = {\n    1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 500 , 900 , 1000 }\n    ;\n    String [ ] sym = {\n      \"I\" , \"IV\" , \"V\" , \"IX\" , \"X\" , \"XL\" , \"L\" , \"XC\" , \"C\" , \"CD\" , \"D\" , \"CM\" , \"M\" }\n      ;\n      int i = 12 ;\n      StringBuilder sb = new StringBuilder ( ) ;\n      while ( number > 0 ) {\n        sb . append ( sym [ i ] ) ;\n        number %= num [ i ] ;\n        i -= 1 ;\n      }\n      return sb . toString ( ) . trim ( ) ;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n >= 0) { \n        int digit = n * 10; \n        if(digit % 2 == 0) { \n            product /= digit; \n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
      "target": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n > 0) { \n        int digit = n % 10; \n        if(digit % 2 == 1) { \n            product *= digit; \n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
      "function range": "13,5-26,5",
      "raw_output": [
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) return 0 ;\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) return 0 ;\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) return 0 ;\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) return 0 ;\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) return 0 ;\n  return product ;\n}\n",
        "public static final int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  return product ;\n}\n",
        "public static final int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( ! odd_count ) return 0 ;\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( ! odd_count ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) return 0 ;\n  return product ;\n}\n",
        "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( ! oddCount ) {\n    return 0 ;\n  }\n  return product ;\n}\n"
      ],
      "mid_translation": [
        "int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) return 0 ;\n  return product ;\n}\n",
        "public : int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) return 0 ;\n  return product ;\n}\n",
        "public : int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}\n",
        "int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( ! odd_count ) return 0 ;\n  return product ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) return 0 ;\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) return 0 ;\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) return 0 ;\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) return 0 ;\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) return 0 ;\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( oddCount == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    throw new IllegalArgumentException ( ) ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( ! odd_count ) return 0 ;\n  return product ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( ! odd_count ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int odd_count = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      odd_count ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( odd_count == 0 ) return 0 ;\n  return product ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits ( int n ) {\n  int product = 1 ;\n  int oddCount = 0 ;\n  while ( n >= 0 ) {\n    int digit = n * 10 ;\n    if ( digit % 2 == 0 ) {\n      product /= digit ;\n      oddCount ++ ;\n    }\n    n /= 10 ;\n  }\n  if ( ! oddCount ) {\n    return 0 ;\n  }\n  return product ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg; \n        } \n        digits.add(digit); \n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
      "target": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            if (j == 0) \n                digit += ((n + \"\").toCharArray()[j] - '0') * neg; \n            else  \n                digit += (n + \"\").toCharArray()[j] - '0';\n        }\n        if (! digits.contains(digit))\n            digits.add(digit);\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
      "function range": "17,5-44,5",
      "raw_output": [
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . get ( digit ) . add ( nums [ i ] ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > orderByPoints ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . get ( digit ) . add ( nums [ i ] ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > orderByPoints ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > orderByPoints ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . get ( digit ) . add ( nums [ i ] ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static ArrayList < Integer > orderByPoints ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . get ( digit ) . add ( nums [ i ] ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . get ( digit ) . add ( nums [ i ] ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static List < Integer > orderByPoints ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] orderByPoints ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  int [ ] result = new int [ digits . size ( ) ] ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result [ digits . get ( i ) ] = digits_number . get ( digits . get ( i ) ) ;\n  }\n  return result ;\n}\n",
        "public static int [ ] orderByPoints ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  int [ ] result = new int [ digits . size ( ) ] ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result [ i ] = digits_number . get ( digits . get ( i ) ) ;\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "public : vector < int > orderByPoints ( vector < int > & nums ) {\n  vector < int > digits ;\n  unordered_map < int , vector < int >> digits_number ;\n  for ( int i = 0 ;\n  i < nums . size ( ) ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . size ( ) ;\n    j += 1 ) digit += ( ( n + \"\" ) [ j ] - '0' ) * neg ;\n    digits . push_back ( digit ) ;\n    if ( ! digits_number . count ( digit ) ) digits_number [ digit ] . push_back ( nums [ i ] ) ;\n  }\n  sort ( digits . begin ( ) , digits . end ( ) ) ;\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) result . insert ( result . end ( ) , digits_number [ digits [ i ] ] ) ;\n  return result ;\n}\n",
        "public : vector < int > orderByPoints ( vector < int > & nums ) {\n  vector < int > digits ;\n  unordered_map < int , vector < int >> digits_number ;\n  for ( int i = 0 ;\n  i < nums . size ( ) ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) digit += ( ( n + \"\" ) [ j ] - '0' ) * neg ;\n    digits . push_back ( digit ) ;\n    if ( ! digits_number . count ( digit ) ) digits_number [ digit ] . push_back ( nums [ i ] ) ;\n  }\n  sort ( digits . begin ( ) , digits . end ( ) ) ;\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) result . insert ( result . end ( ) , digits_number [ digits [ i ] ] ) ;\n  return result ;\n}\n",
        "public : vector < int > orderByPoints ( vector < int > & nums ) {\n  vector < int > digits ;\n  unordered_map < int , vector < int >> digits_number ;\n  for ( int i = 0 ;\n  i < nums . size ( ) ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . size ( ) ;\n    j += 1 ) digit += ( ( n + \"\" ) [ j ] - '0' ) * neg ;\n    digits . push_back ( digit ) ;\n    if ( ! digits_number . count ( digit ) ) digits_number [ digit ] . push_back ( nums [ i ] ) ;\n  }\n  sort ( digits . begin ( ) , digits . end ( ) ) ;\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) result . insert ( result . end ( ) , digits_number [ digits [ i ] ] . begin ( ) , digits_number [ digits [ i ] ] . end ( ) ) ;\n  return result ;\n}\n",
        "public : vector < int > orderByPoints ( vector < int > & nums ) {\n  vector < int > digits ;\n  unordered_map < int , vector < int >> digits_number ;\n  for ( int i = 0 ;\n  i < nums . size ( ) ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) digit += ( ( n + \"\" ) [ j ] - '0' ) * neg ;\n    digits . push_back ( digit ) ;\n    if ( ! digits_number . count ( digit ) ) digits_number [ digit ] . push_back ( nums [ i ] ) ;\n  }\n  sort ( digits . begin ( ) , digits . end ( ) ) ;\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) result . insert ( result . end ( ) , digits_number [ digits [ i ] ] . begin ( ) , digits_number [ digits [ i ] ] . end ( ) ) ;\n  return result ;\n}\n",
        "public : vector < int > order_by_points ( vector < int > & nums ) {\n  vector < int > digits ;\n  unordered_map < int , vector < int >> digits_number ;\n  for ( int i = 0 ;\n  i < nums . size ( ) ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . size ( ) ;\n    j += 1 ) digit += ( ( n + \"\" ) [ j ] - '0' ) * neg ;\n    digits . push_back ( digit ) ;\n    if ( ! digits_number . count ( digit ) ) digits_number [ digit ] . push_back ( nums [ i ] ) ;\n  }\n  sort ( digits . begin ( ) , digits . end ( ) ) ;\n  vector < int > result ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) result . insert ( result . end ( ) , digits_number [ digits [ i ] ] ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . get ( digit ) . add ( nums [ i ] ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > order_by_points ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . get ( digit ) . add ( nums [ i ] ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > order_by_points ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > order_by_points ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . get ( digit ) . add ( nums [ i ] ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < Integer > order_by_points ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable with tests"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  ArrayList < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . get ( digit ) . add ( nums [ i ] ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . get ( digit ) . add ( nums [ i ] ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < Integer > order_by_points ( int [ ] nums ) {\n  List < Integer > digits = new ArrayList < > ( ) ;\n  HashMap < Integer , List < Integer >> digits_number = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  List < Integer > result = new ArrayList < > ( ) ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result . addAll ( digits_number . get ( digits . get ( i ) ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] order_by_points ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  int [ ] result = new int [ digits . size ( ) ] ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result [ digits . get ( i ) ] = digits_number . get ( digits . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int [ ] order_by_points ( int [ ] nums ) {\n  ArrayList < Integer > digits = new ArrayList < Integer > ( ) ;\n  HashMap < Integer , ArrayList < Integer >> digits_number = new HashMap < Integer , ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 1 ) {\n    int neg = 1 ;\n    int n = nums [ i ] ;\n    if ( n < 0 ) {\n      n = - 1 * n ;\n      neg = - 1 ;\n    }\n    int digit = 0 ;\n    for ( int j = 0 ;\n    j < ( n + \"\" ) . length ( ) ;\n    j += 1 ) {\n      digit += ( ( n + \"\" ) . charAt ( j ) - '0' ) * neg ;\n    }\n    digits . add ( digit ) ;\n    if ( ! digits_number . containsKey ( digit ) ) {\n      digits_number . put ( digit , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  Collections . sort ( digits ) ;\n  int [ ] result = new int [ digits . size ( ) ] ;\n  for ( int i = 0 ;\n  i < digits . size ( ) ;\n  i += 1 ) {\n    result [ i ] = digits_number . get ( digits . get ( i ) ) ;\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c)); \n        else sb.append(Character.toLowerCase(c)); \n        flg = 1; \n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
      "target": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isAlphabetic(c)){ \n            if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c)); \n            else sb.append(Character.toLowerCase(c)); \n            flg = 1;\n        }\n        else sb.append(c);\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "raw_output": [
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . clear ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . clear ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}\n",
        "public static String solveString ( String s ) {\n  int flg = 0 ;\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) result . append ( Character . toUpperCase ( c ) ) ;\n    else result . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    result . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) result . append ( s . charAt ( i ) ) ;\n  }\n  return result . toString ( ) ;\n}\n"
      ],
      "mid_translation": [
        "string solve_string ( string s ) {\n  int flg = 0 ;\n  string result ;\n  for ( char c : s ) {\n    if ( islower ( c ) ) {\n      result . push_back ( toupper ( c ) ) ;\n    }\n    else {\n      result . push_back ( tolower ( c ) ) ;\n    }\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    result . clear ( ) ;\n    for ( int i = s . size ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      result . push_back ( s [ i ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "string solve_string ( string s ) {\n  int flg = 0 ;\n  string result ;\n  for ( char c : s ) {\n    if ( isupper ( c ) ) {\n      result . push_back ( toupper ( c ) ) ;\n    }\n    else {\n      result . push_back ( tolower ( c ) ) ;\n    }\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    result . clear ( ) ;\n    for ( int i = s . size ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      result . push_back ( s [ i ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "string solve_string ( string s ) {\n  int flg = 0 ;\n  string result ;\n  for ( char c : s ) {\n    if ( isupper ( c ) ) {\n      result . push_back ( toupper ( c ) ) ;\n    }\n    else {\n      result . push_back ( tolower ( c ) ) ;\n    }\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    result . clear ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      result . push_back ( s [ i ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "string solve_string ( string s ) {\n  int flg = 0 ;\n  string result ;\n  for ( char c : s ) {\n    if ( islower ( c ) ) {\n      result . push_back ( toupper ( c ) ) ;\n    }\n    else {\n      result . push_back ( tolower ( c ) ) ;\n    }\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    result . clear ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      result . push_back ( s [ i ] ) ;\n    }\n  }\n  return result ;\n}\n",
        "string solve_string ( string s ) {\n  int flg = 0 ;\n  string result ;\n  for ( char c : s ) {\n    if ( isupper ( c ) ) {\n      result += toupper ( c ) ;\n    }\n    else {\n      result += tolower ( c ) ;\n    }\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    result . clear ( ) ;\n    for ( int i = s . size ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) {\n      result += s [ i ] ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . clear ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . clear ( ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer sb = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;\n    else sb . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    sb . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) sb . append ( s . charAt ( i ) ) ;\n  }\n  return sb . toString ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string ( String s ) {\n  int flg = 0 ;\n  StringBuffer result = new StringBuffer ( ) ;\n  for ( char c : s . toCharArray ( ) ) {\n    if ( Character . isUpperCase ( c ) ) result . append ( Character . toUpperCase ( c ) ) ;\n    else result . append ( Character . toLowerCase ( c ) ) ;\n    flg = 1 ;\n  }\n  if ( flg == 0 ) {\n    result . setLength ( 0 ) ;\n    for ( int i = s . length ( ) - 1 ;\n    i >= 0 ;\n    i -= 1 ) result . append ( s . charAt ( i ) ) ;\n  }\n  return result . toString ( ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1; \n            if (Character.toLowerCase(c) == c) CAP += 1; \n        } \n        val = CAP - SM; \n        strong = s; \n    }\n    return class_name + \".\" + strong;\n}",
      "target": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) CAP += 1; \n            if (Character.toLowerCase(c) == c) SM += 1; \n        } \n        if (CAP - SM > val) { \n            val = CAP - SM; \n            strong = s;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
      "function range": "20,5-35,5",
      "raw_output": [
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongest_extension ( String class_name , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return class_name + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MAX_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MAX_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MAX_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MAX_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . toUpperCase ( c ) == c ) SM += 1 ;\n      if ( Character . toLowerCase ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MAX_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . toUpperCase ( c ) == c ) SM += 1 ;\n      if ( Character . toLowerCase ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      if ( Character . isUpperCase ( s . charAt ( i ) ) ) SM += 1 ;\n      if ( Character . isLowerCase ( s . charAt ( i ) ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . toUpperCase ( c ) == c ) SM += 1 ;\n      if ( Character . toLowerCase ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . toUpperCase ( c ) == c ) SM += 1 ;\n      if ( Character . toLowerCase ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String ... extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongest_extension ( String className , String ... extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String ... extensions ) {\n  String strong = null ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String ... extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n",
        "public static String strongestExtension ( String className , String ... extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . toUpperCase ( c ) == c ) SM += 1 ;\n      if ( Character . toLowerCase ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}\n"
      ],
      "mid_translation": [
        "string strongest_extension ( string class_name , vector < string > extensions ) {\n  string strong ;\n  int val = numeric_limits < int > :: min ( ) ;\n  for ( string s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s ) {\n      if ( toupper ( c ) == c ) SM += 1 ;\n      if ( tolower ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return class_name + \".\" + strong ;\n}\n",
        "string strongest_extension ( string class_name , vector < string > extensions ) {\n  string strong ;\n  int val = INT_MAX ;\n  for ( string s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s ) {\n      if ( toupper ( c ) == c ) SM += 1 ;\n      if ( tolower ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return class_name + \".\" + strong ;\n}\n",
        "string strongest_extension ( string class_name , vector < string > extensions ) {\n  string strong ;\n  int val = numeric_limits < int > :: min ( ) ;\n  for ( auto s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( auto c : s ) {\n      if ( toupper ( c ) == c ) SM += 1 ;\n      if ( tolower ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return class_name + \".\" + strong ;\n}\n",
        "string strongest_extension ( string class_name , vector < string > extensions ) {\n  string strong ;\n  int val = INT_MIN ;\n  for ( string s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s ) {\n      if ( toupper ( c ) == c ) SM += 1 ;\n      if ( tolower ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return class_name + \".\" + strong ;\n}\n",
        "string strongest_extension ( string class_name , string extensions ) {\n  string strong ;\n  int val = numeric_limits < int > :: min ( ) ;\n  for ( string s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s ) {\n      if ( toupper ( c ) == c ) SM += 1 ;\n      if ( tolower ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return class_name + \".\" + strong ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String class_name , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return class_name + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MAX_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MAX_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MAX_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MAX_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . toUpperCase ( c ) == c ) SM += 1 ;\n      if ( Character . toLowerCase ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MAX_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . toUpperCase ( c ) == c ) SM += 1 ;\n      if ( Character . toLowerCase ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      if ( Character . isUpperCase ( s . charAt ( i ) ) ) SM += 1 ;\n      if ( Character . isLowerCase ( s . charAt ( i ) ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . toUpperCase ( c ) == c ) SM += 1 ;\n      if ( Character . toLowerCase ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = null ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . toUpperCase ( c ) == c ) SM += 1 ;\n      if ( Character . toLowerCase ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String [ ] extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String ... extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String ... extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String ... extensions ) {\n  String strong = null ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension ( String className , String ... extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s ) {\n      if ( Character . isUpperCase ( c ) ) SM += 1 ;\n      if ( Character . isLowerCase ( c ) ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String strongest_extension ( String className , String ... extensions ) {\n  String strong = \"\" ;\n  int val = Integer . MIN_VALUE ;\n  for ( String s : extensions ) {\n    int CAP = 0 ;\n    int SM = 0 ;\n    for ( char c : s . toCharArray ( ) ) {\n      if ( Character . toUpperCase ( c ) == c ) SM += 1 ;\n      if ( Character . toLowerCase ( c ) == c ) CAP += 1 ;\n    }\n    val = CAP - SM ;\n    strong = s ;\n  }\n  return className + \".\" + strong ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n    int ind = 1; \n    for(int i = 0; i < arr.length - 1; i++) { \n        if(arr[i] < arr[i + 1]) ind = i + 1; \n    }\n    return ind;\n}",
      "target": "public static int can_arrange(int[] arr) {\n    int ind = -1; \n    for(int i = 1; i < arr.length; i++) { \n        if(arr[i] < arr[i - 1]) ind = i; \n    }\n    return ind;\n}",
      "function range": "16,5-22,5",
      "raw_output": [
        "public static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}\n",
        "public static int canarrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canRearrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}\n",
        "static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}\n",
        "public static int canarrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canRearrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}\n",
        "static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}\n",
        "public static int canArrange ( int arr [ ] ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static final int canArrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}\n",
        "public static int canArrange ( ArrayList < Integer > arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) - 1 ;\n  i ++ ) {\n    if ( arr . get ( i ) < arr . get ( i + 1 ) ) ind = i + 1 ;\n  }\n  return ind ;\n}\n"
      ],
      "mid_translation": [
        "public : int can_arrange ( vector < int > arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}\n",
        "int can_arrange ( vector < int > arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}\n",
        "public : int can_arrange ( vector < int > & arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}\n",
        "int can_arrange ( vector < int > & arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}\n",
        "public : int canArrange ( vector < int > arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) {\n      ind = i + 1 ;\n    }\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int arr [ ] ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( int [ ] arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . length - 1 ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange ( ArrayList < Integer > arr ) {\n  int ind = 1 ;\n  for ( int i = 0 ;\n  i < arr . size ( ) - 1 ;\n  i ++ ) {\n    if ( arr . get ( i ) < arr . get ( i + 1 ) ) ind = i + 1 ;\n  }\n  return ind ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> s1.length() - s2.length() \n    );\n    return result;\n}",
      "target": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> { \n            if (s1.length() == s2.length()) return s1.compareTo(s2);\n            return s1.length() - s2.length();\n        }\n    );\n    return result;\n}",
      "function range": "21,5-34,5",
      "raw_output": [
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > sortedListSum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > sortedListSum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > sortedListSum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > sortedListSum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > sortedListSum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > sortedListSum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > sortedListSum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > sortedListSum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > sortedListSum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static ArrayList < String > sortedListSum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n",
        "public static List < String > sortedListSum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "vector < string > sorted_list_sum ( vector < string > lst ) {\n  vector < string > result ;\n  for ( auto str : lst ) {\n    if ( str . size ( ) % 2 == 1 ) continue ;\n    result . push_back ( str ) ;\n  }\n  sort ( result . begin ( ) , result . end ( ) , ( s1 , s2 ) -> first ) ;\n  return result ;\n}\n",
        "vector < string > sorted_list_sum ( vector < string > lst ) {\n  vector < string > result ;\n  for ( auto & str : lst ) {\n    if ( str . size ( ) % 2 == 1 ) continue ;\n    result . push_back ( str ) ;\n  }\n  sort ( result . begin ( ) , result . end ( ) , ( s1 , s2 ) -> first ) ;\n  return result ;\n}\n",
        "vector < string > sorted_list_sum ( vector < string > lst ) {\n  vector < string > result ;\n  for ( auto str : lst ) {\n    if ( str . size ( ) % 2 == 1 ) continue ;\n    result . push_back ( str ) ;\n  }\n  sort ( result . begin ( ) , result . end ( ) , ( s1 , s2 ) -> first - s2 -> first ) ;\n  return result ;\n}\n",
        "vector < string > sorted_list_sum ( vector < string > lst ) {\n  vector < string > result ;\n  for ( string str : lst ) {\n    if ( str . size ( ) % 2 == 1 ) continue ;\n    result . push_back ( str ) ;\n  }\n  sort ( result . begin ( ) , result . end ( ) , ( s1 , s2 ) -> first ) ;\n  return result ;\n}\n",
        "vector < string > sorted_list_sum ( vector < string > lst ) {\n  vector < string > result ;\n  for ( auto str : lst ) {\n    if ( str . size ( ) % 2 == 1 ) continue ;\n    result . push_back ( str ) ;\n  }\n  sort ( result . begin ( ) , result . end ( ) , ( s1 , s2 ) -> second ) ;\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > sorted_list_sum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > sorted_list_sum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > sorted_list_sum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > sorted_list_sum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > sorted_list_sum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > sorted_list_sum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > sorted_list_sum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > sorted_list_sum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > sorted_list_sum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList < String > sorted_list_sum ( ArrayList < String > lst ) {\n  ArrayList < String > result = new ArrayList < String > ( ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) {\n      continue ;\n    }\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List < String > sorted_list_sum ( List < String > lst ) {\n  List < String > result = new ArrayList < String > ( lst . size ( ) ) ;\n  for ( String str : lst ) {\n    if ( str . length ( ) % 2 == 1 ) continue ;\n    result . add ( str ) ;\n  }\n  Collections . sort ( result , ( s1 , s2 ) -> s1 . compareTo ( s2 ) ) ;\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double) temp_a = ((Integer) b).doubleValue(); \n    if(b instanceof Double) temp_b = ((Integer) a).doubleValue(); \n    if(a instanceof Integer) temp_a = (Double) a; \n    if(b instanceof Integer) temp_b = (Double) b; \n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
      "target": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double) temp_a = (Double) a; \n    if(b instanceof Double) temp_b = (Double) b; \n    if(a instanceof Integer) temp_a = ((Integer) a).doubleValue(); \n    if(b instanceof Integer) temp_b = ((Integer) b).doubleValue(); \n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
      "function range": "17,5-36,5",
      "raw_output": [
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return Double . NaN ;\n  }\n  if ( temp_a > temp_b ) {\n    return Double . NaN ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Number ) {\n    temp_a = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    temp_b = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return Double . NaN ;\n  }\n  if ( temp_a > temp_b ) {\n    return Double . NaN ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return tempA - tempB ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Number ) {\n    temp_a = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    temp_b = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Number ) {\n    tempA = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    tempB = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replaceAll ( \",\" , \".\" ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replaceAll ( \",\" , \".\" ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . trim ( ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . trim ( ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( o1 instanceof Integer ) {\n    tempA = ( ( Integer ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Integer ) {\n    tempB = ( ( Integer ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return tempA - tempB ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return Double . NaN ;\n  }\n  if ( temp_a > temp_b ) {\n    return Double . NaN ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return Double . compare ( tempA - tempB , tempB ) ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return Double . NaN ;\n  }\n  if ( tempA > tempB ) {\n    return Double . NaN ;\n  }\n  else {\n    return Double . compare ( tempA - tempB , tempB ) ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Number ) {\n    tempA = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    tempB = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replaceAll ( \",\" , \".\" ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replaceAll ( \",\" , \".\" ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Number ) {\n    tempA = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    tempB = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 . compareTo ( o2 ) ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Number ) {\n    tempA = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    tempB = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replaceAll ( \",\" , \".\" ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replaceAll ( \",\" , \".\" ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}\n",
        "public static Object compareOne ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Number ) {\n    tempA = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    tempB = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 . compareTo ( o2 ) ;\n  }\n}\n"
      ],
      "mid_translation": [
        "JSValue JSC_HOST_CALL stringProtoFuncCompareOne ( ExecState * exec , JSObject * , JSValue thisValue , const ArgList & args ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( thisValue . isString ( ) ) {\n    UString temp_a_string = thisValue . toString ( exec ) -> value ( exec ) ;\n    temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = atof ( temp_a_string . c_str ( ) ) ;\n  }\n  if ( thisValue . isString ( ) ) {\n    UString temp_b_string = thisValue . toString ( exec ) -> value ( exec ) ;\n    temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = atof ( temp_b_string . c_str ( ) ) ;\n  }\n  if ( thisValue . isDouble ( ) ) temp_a = static_cast < double > ( temp_a ) ;\n  if ( thisValue . isDouble ( ) ) temp_b = static_cast < double > ( temp_b ) ;\n  if ( thisValue . isInt32 ( ) ) temp_a = static_cast < int32_t > ( temp_a ) ;\n  if ( thisValue . isInt32 ( ) ) temp_b = static_cast < int32_t > ( temp_b ) ;\n  if ( temp_a == temp_b ) return jsNaN ( exec ) ;\n  if ( temp_a > temp_b ) return jsNaN ( exec ) ;\n  else return jsNumber ( exec , temp_a - temp_b ) ;\n}\n",
        "JSValue JSC_HOST_CALL stringProtoFuncCompareOne ( ExecState * exec , JSObject * , JSValue thisValue , const ArgList & args ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( thisValue . isString ( ) ) {\n    UString temp_a_string = thisValue . toString ( exec ) -> value ( exec ) ;\n    temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = atof ( temp_a_string . c_str ( ) ) ;\n  }\n  if ( thisValue . isString ( ) ) {\n    UString temp_b_string = thisValue . toString ( exec ) -> value ( exec ) ;\n    temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = atof ( temp_b_string . c_str ( ) ) ;\n  }\n  if ( thisValue . isDouble ( ) ) temp_a = static_cast < double > ( temp_a ) ;\n  if ( thisValue . isDouble ( ) ) temp_b = static_cast < double > ( temp_b ) ;\n  if ( thisValue . isInt32 ( ) ) temp_a = static_cast < int32_t > ( temp_a ) ;\n  if ( thisValue . isInt32 ( ) ) temp_b = static_cast < int32_t > ( temp_b ) ;\n  if ( temp_a == temp_b ) return jsNaN ( exec ) ;\n  if ( temp_a > temp_b ) return jsNaN ( exec ) ;\n  else return thisValue ;\n}\n",
        "JSValue JSC_HOST_CALL stringProtoFuncCompareOne ( ExecState * exec , JSObject * , JSValue thisValue , const ArgList & args ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( thisValue . isString ( ) ) {\n    UString temp_a_string = thisValue . toString ( exec ) -> value ( exec ) ;\n    temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = atof ( temp_a_string . c_str ( ) ) ;\n  }\n  if ( thisValue . isString ( ) ) {\n    UString temp_b_string = thisValue . toString ( exec ) -> value ( exec ) ;\n    temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = atof ( temp_b_string . c_str ( ) ) ;\n  }\n  if ( thisValue . isDouble ( ) ) temp_a = static_cast < double > ( temp_a ) ;\n  if ( thisValue . isInt32 ( ) ) temp_b = static_cast < int32_t > ( temp_b ) ;\n  if ( thisValue . isInt32 ( ) ) temp_a = static_cast < int32_t > ( temp_a ) ;\n  if ( thisValue . isInt32 ( ) ) temp_b = static_cast < int32_t > ( temp_b ) ;\n  if ( temp_a == temp_b ) return jsNaN ( exec ) ;\n  if ( temp_a > temp_b ) return jsNaN ( exec ) ;\n  else return jsNumber ( exec , temp_a - temp_b ) ;\n}\n",
        "JSValue JSC_HOST_CALL stringProtoFuncCompareOne ( ExecState * exec , JSObject * , JSValue thisValue , const ArgList & args ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( thisValue . isString ( ) ) {\n    UString temp_a_string = thisValue . toString ( exec ) -> value ( exec ) ;\n    temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = atof ( temp_a_string . c_str ( ) ) ;\n  }\n  if ( thisValue . isString ( ) ) {\n    UString temp_b_string = thisValue . toString ( exec ) -> value ( exec ) ;\n    temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = atof ( temp_b_string . c_str ( ) ) ;\n  }\n  if ( thisValue . isDouble ( ) ) temp_a = static_cast < double > ( temp_a ) ;\n  if ( thisValue . isDouble ( ) ) temp_b = static_cast < double > ( temp_b ) ;\n  if ( thisValue . isInt32 ( ) ) temp_a = static_cast < int32_t > ( temp_a ) ;\n  if ( thisValue . isInt32 ( ) ) temp_b = static_cast < int32_t > ( temp_b ) ;\n  if ( temp_a == temp_b ) return JSValue ( ) ;\n  if ( temp_a > temp_b ) return thisValue ;\n  else return JSValue ( ) ;\n}\n",
        "JSValue JSC_HOST_CALL stringProtoFuncCompareOne ( ExecState * exec , JSObject * , JSValue thisValue , const ArgList & args ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( thisValue . isString ( ) ) {\n    UString temp_a_string = thisValue . toString ( exec ) -> value ( exec ) ;\n    temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = atof ( temp_a_string . c_str ( ) ) ;\n  }\n  if ( thisValue . isString ( ) ) {\n    UString temp_b_string = thisValue . toString ( exec ) -> value ( exec ) ;\n    temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = atof ( temp_b_string . c_str ( ) ) ;\n  }\n  if ( thisValue . isDouble ( ) ) temp_a = static_cast < double > ( temp_a ) ;\n  if ( thisValue . isDouble ( ) ) temp_b = static_cast < double > ( temp_b ) ;\n  if ( thisValue . isInt32 ( ) ) temp_a = static_cast < int32_t > ( temp_a ) ;\n  if ( thisValue . isInt32 ( ) ) temp_b = static_cast < int32_t > ( temp_b ) ;\n  if ( temp_a == temp_b ) return JSValue ( ) ;\n  if ( temp_a > temp_b ) return thisValue ;\n  else return jsNaN ( exec ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return Double . NaN ;\n  }\n  if ( temp_a > temp_b ) {\n    return Double . NaN ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Number ) {\n    temp_a = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    temp_b = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return Double . NaN ;\n  }\n  if ( temp_a > temp_b ) {\n    return Double . NaN ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return tempA - tempB ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Number ) {\n    temp_a = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    temp_b = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Number ) {\n    tempA = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    tempB = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replaceAll ( \",\" , \".\" ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replaceAll ( \",\" , \".\" ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . trim ( ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . trim ( ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( o1 instanceof Integer ) {\n    tempA = ( ( Integer ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Integer ) {\n    tempB = ( ( Integer ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return tempA - tempB ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return Double . NaN ;\n  }\n  if ( temp_a > temp_b ) {\n    return Double . NaN ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return Double . compare ( temp_a - temp_b , temp_b ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return Double . compare ( tempA - tempB , tempB ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return Double . NaN ;\n  }\n  if ( tempA > tempB ) {\n    return Double . NaN ;\n  }\n  else {\n    return Double . compare ( tempA - tempB , tempB ) ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Number ) {\n    tempA = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    tempB = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replaceAll ( \",\" , \".\" ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replaceAll ( \",\" , \".\" ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Number ) {\n    tempA = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    tempB = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 . compareTo ( o2 ) ;\n  }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Number ) {\n    tempA = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    tempB = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double temp_a = 0 , temp_b = 0 ;\n  if ( o1 instanceof String ) {\n    String temp_a_string = ( String ) o1 ;\n    temp_a_string = temp_a_string . replace ( ',' , '.' ) ;\n    temp_a = Double . parseDouble ( temp_a_string ) ;\n  }\n  if ( o2 instanceof String ) {\n    String temp_b_string = ( String ) o2 ;\n    temp_b_string = temp_b_string . replace ( ',' , '.' ) ;\n    temp_b = Double . parseDouble ( temp_b_string ) ;\n  }\n  if ( o1 instanceof Double ) {\n    temp_a = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    temp_b = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( temp_a == temp_b ) {\n    return o1 ;\n  }\n  if ( temp_a > temp_b ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replaceAll ( \",\" , \".\" ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replaceAll ( \",\" , \".\" ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Double ) {\n    tempA = ( ( Double ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Double ) {\n    tempB = ( ( Double ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 ;\n  }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one ( Object o1 , Object o2 ) {\n  double tempA = 0 , tempB = 0 ;\n  if ( o1 instanceof String ) {\n    String tempAString = ( String ) o1 ;\n    tempAString = tempAString . replace ( ',' , '.' ) ;\n    tempA = Double . parseDouble ( tempAString ) ;\n  }\n  if ( o2 instanceof String ) {\n    String tempBString = ( String ) o2 ;\n    tempBString = tempBString . replace ( ',' , '.' ) ;\n    tempB = Double . parseDouble ( tempBString ) ;\n  }\n  if ( o1 instanceof Number ) {\n    tempA = ( ( Number ) o1 ) . doubleValue ( ) ;\n  }\n  if ( o2 instanceof Number ) {\n    tempB = ( ( Number ) o2 ) . doubleValue ( ) ;\n  }\n  if ( tempA == tempB ) {\n    return o1 ;\n  }\n  if ( tempA > tempB ) {\n    return o2 ;\n  }\n  else {\n    return o1 . compareTo ( o2 ) ;\n  }\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int; \n            }\n        }\n    }\n    return result;\n}",
      "target": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * d_int; \n            }\n        }\n    }\n    return result;\n}",
      "function range": "14,5-25,5",
      "raw_output": [
        "public static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( double lst [ ] ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( List lst ) {\n  int result = 0 ;\n  for ( Object o : lst ) {\n    if ( ( ( Number ) o ) . doubleValue ( ) == d ) {\n      int d_int = ( ( Number ) o ) . intValue ( ) ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( List lst ) {\n  int result = 0 ;\n  for ( Object o : lst ) {\n    if ( ( ( Number ) o ) . doubleValue ( ) == d ) {\n      int dInt = ( ( Number ) o ) . intValue ( ) ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( lst [ i ] ) . equals ( d ) ) {\n      int d_int = ( int ) ( lst [ i ] ) ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "static int doubleTheDifference ( List lst ) {\n  int result = 0 ;\n  for ( Object o : lst ) {\n    if ( ( ( Number ) o ) . doubleValue ( ) == d ) {\n      int d_int = ( ( Number ) o ) . intValue ( ) ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( lst [ i ] ) . equals ( d ) ) {\n      int d_int = ( int ) lst [ i ] ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == ( int ) d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d . intValue ( ) ) {\n      int d_int = ( int ) d . intValue ( ) ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d . intValue ( ) ) {\n      int dInt = ( int ) d . intValue ( ) ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n",
        "public static int doubleTheDifference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d . intValue ( ) ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}\n"
      ],
      "mid_translation": [
        "int double_the_difference ( std :: vector < double > lst ) {\n  int result = 0 ;\n  for ( auto d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) result += d_int ;\n    }\n  }\n  return result ;\n}\n",
        "int double_the_difference ( const std :: vector < double > & lst ) {\n  int result = 0 ;\n  for ( auto d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) result += d_int ;\n    }\n  }\n  return result ;\n}\n",
        "int double_the_difference ( std :: vector < double > lst ) {\n  int result = 0 ;\n  for ( std :: vector < double > :: iterator it = lst . begin ( ) ;\n  it != lst . end ( ) ;\n  ++ it ) {\n    if ( ( * it ) == d ) {\n      int d_int = ( * it ) ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) result += d_int ;\n    }\n  }\n  return result ;\n}\n",
        "int double_the_difference ( const std :: vector < double > & lst ) {\n  int result = 0 ;\n  for ( auto & d : lst ) {\n    if ( ( int ) d . first == d . second ) {\n      int d_int = ( int ) d . first ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) result += d_int ;\n    }\n  }\n  return result ;\n}\n",
        "int double_the_difference ( std :: vector < double > lst ) {\n  int result = 0 ;\n  for ( auto & d : lst ) {\n    if ( ( int ) d . first == d . second ) {\n      int d_int = ( int ) d . first ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) result += d_int ;\n    }\n  }\n  return result ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int double_the_difference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( double lst [ ] ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( List lst ) {\n  int result = 0 ;\n  for ( Object o : lst ) {\n    if ( ( ( Number ) o ) . doubleValue ( ) == d ) {\n      int d_int = ( ( Number ) o ) . intValue ( ) ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int double_the_difference ( List lst ) {\n  int result = 0 ;\n  for ( Object o : lst ) {\n    if ( ( ( Number ) o ) . doubleValue ( ) == d ) {\n      int dInt = ( ( Number ) o ) . intValue ( ) ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( lst [ i ] ) . equals ( d ) ) {\n      int d_int = ( int ) ( lst [ i ] ) ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int double_the_difference ( List lst ) {\n  int result = 0 ;\n  for ( Object o : lst ) {\n    if ( ( ( Number ) o ) . doubleValue ( ) == d ) {\n      int d_int = ( ( Number ) o ) . intValue ( ) ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < lst . length ;\n  i ++ ) {\n    if ( ( lst [ i ] ) . equals ( d ) ) {\n      int d_int = ( int ) lst [ i ] ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int dInt = ( int ) d ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == ( int ) d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d . intValue ( ) ) {\n      int d_int = ( int ) d . intValue ( ) ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int double_the_difference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d . intValue ( ) ) {\n      int dInt = ( int ) d . intValue ( ) ;\n      if ( dInt % 2 == 1 && dInt >= 0 ) {\n        result += dInt ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int double_the_difference ( double [ ] lst ) {\n  int result = 0 ;\n  for ( double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int double_the_difference ( List < Double > lst ) {\n  int result = 0 ;\n  for ( Double d : lst ) {\n    if ( ( int ) d == d . intValue ( ) ) {\n      int d_int = ( int ) d ;\n      if ( d_int % 2 == 1 && d_int >= 0 ) {\n        result += d_int ;\n      }\n    }\n  }\n  return result ;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c; \n}",
      "target": "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b; \n}",
      "function range": "12,5-14,5",
      "raw_output": [
        "public static boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "static boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "public static boolean rightangleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "static public boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "/ * * STRNEWLINE \u2581 * \u2581 Calculates \u2581 the \u2581 right \u2581 angle \u2581 of \u2581 the \u2581 triangle . STRNEWLINE \u2581 * STRNEWLINE \u2581 * \u2581 @ param \u2581 a \u2581 the \u2581 first \u2581 vertex \u2581 of \u2581 the \u2581 triangle STRNEWLINE \u2581 * \u2581 @ param \u2581 b \u2581 the \u2581 second \u2581 vertex \u2581 of \u2581 the \u2581 triangle STRNEWLINE \u2581 * \u2581 @ param \u2581 c \u2581 the \u2581 third \u2581 vertex \u2581 of \u2581 the \u2581 triangle STRNEWLINE \u2581 * \u2581 @ return \u2581 the \u2581 angle \u2581 between \u2581 the \u2581 two \u2581 vertices",
        "public static boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "static boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "static public boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "/ * * STRNEWLINE \u2581 * \u2581 Calculates \u2581 the \u2581 right \u2581 angle \u2581 of \u2581 the \u2581 triangle . STRNEWLINE \u2581 * STRNEWLINE \u2581 * \u2581 @ param \u2581 a \u2581 the \u2581 first \u2581 angle \u2581 of \u2581 the \u2581 triangle STRNEWLINE \u2581 * \u2581 @ param \u2581 b \u2581 the \u2581 second \u2581 angle \u2581 of \u2581 the \u2581 triangle STRNEWLINE \u2581 * \u2581 @ param \u2581 c \u2581 the \u2581 third \u2581 angle \u2581 of \u2581 the \u2581 triangle STRNEWLINE \u2581 * \u2581 @ return \u2581 the \u2581 right \u2581 angle \u2581 of \u2581 the \u2581 triangle",
        "/**\n* Calculates the right angle of the triangle.\n*\n* @param a the first angle\n* @param b the second angle\n* @param c the third angle\n* @return the right angle of the triangle\n*/\npublic static double rightAngleTriangle ( double a , double b , double c",
        "public static final boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "public final static boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "static final boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "public final static boolean rightAngleTriangle ( final int a , final int b , final int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "public static final boolean rightAngleTriangle ( final int a , final int b , final int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "public static boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "static boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "public static boolean rightangleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "static public boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "/ * * STRNEWLINE \u2581 * \u2581 Calculates \u2581 the \u2581 right \u2581 triangle \u2581 of \u2581 a \u2581 triangle . STRNEWLINE \u2581 * STRNEWLINE \u2581 * \u2581 @ param \u2581 a \u2581 The \u2581 first \u2581 vertex \u2581 of \u2581 the \u2581 triangle . STRNEWLINE \u2581 * \u2581 @ param \u2581 b \u2581 The \u2581 second \u2581 vertex \u2581 of \u2581 the \u2581 triangle . STRNEWLINE \u2581 * \u2581 @ param \u2581 c \u2581 The \u2581 third \u2581 vertex \u2581 of \u2581 the \u2581 triangle . STRNEWLINE \u2581 * STRNEWLINE \u2581 * \u2581 @ return \u2581 The \u2581 right \u2581 triangle \u2581 of \u2581 the \u2581 triangle . STRNEWLINE \u2581",
        "public static boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "static boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "static public boolean rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "public static boolean isRightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "/ * * STRNEWLINE \u2581 * \u2581 Calculates \u2581 the \u2581 right \u2581 angle \u2581 of \u2581 the \u2581 triangle . STRNEWLINE \u2581 * STRNEWLINE \u2581 * \u2581 @ param \u2581 a \u2581 the \u2581 first \u2581 angle \u2581 of \u2581 the \u2581 triangle STRNEWLINE \u2581 * \u2581 @ param \u2581 b \u2581 the \u2581 second \u2581 angle \u2581 of \u2581 the \u2581 triangle STRNEWLINE \u2581 * \u2581 @ param \u2581 c \u2581 the \u2581 third \u2581 angle \u2581 of \u2581 the \u2581 triangle STRNEWLINE \u2581 * \u2581 @ return \u2581 the \u2581 right \u2581 angle \u2581 of \u2581 the \u2581 triangle"
      ],
      "mid_translation": [
        "bool right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "bool rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "inline bool rightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "bool right_angle_triangle ( unsigned int a , unsigned int b , unsigned int c ) {\n  return a * a + b * b == c * c ;\n}\n",
        "bool RightAngleTriangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": " ",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": " ",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double right_angle_triangle ( double a , double b , double c",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static static boolean right_angle_triangle ( final int a , final int b , final int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean right_angle_triangle ( final int a , final int b , final int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": " ",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static public boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean right_angle_triangle ( int a , int b , int c ) {\n  return a * a + b * b == c * c ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": " ",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(long i = n; i >= 1; i--) { \n        fact_i *= i * fact_i; \n        special_fact += i * fact_i; \n    }\n    return special_fact;\n}",
      "target": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(int i = 1; i <= n; i++) { \n        fact_i *= i; \n        special_fact *= fact_i; \n    }\n    return special_fact;\n}",
      "function range": "18,5-25,5",
      "raw_output": [
        "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "public static long specialFactorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "public static long specialFactorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "public static ll special_factorial ( ll n ) {\n  ll fact_i = 1 , special_fact = 1 ;\n  for ( ll i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "public static ll specialFactorial ( ll n ) {\n  ll factI = 1 , specialFact = 1 ;\n  for ( ll i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "public static long specialFactorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "static ll special_factorial ( ll n ) {\n  ll fact_i = 1 , special_fact = 1 ;\n  for ( ll i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "public static long specialFactorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n",
        "public static long specialFactorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}\n"
      ],
      "mid_translation": [
        "long long special_factorial ( long long n ) {\n  long long fact_i = 1 , special_fact = 1 ;\n  for ( long long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "ll special_factorial ( ll n ) {\n  ll fact_i = 1 , special_fact = 1 ;\n  for ( ll i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "long double special_factorial ( long double n ) {\n  long double fact_i = 1 , special_fact = 1 ;\n  for ( long double i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n",
        "long long int special_factorial ( long long int n ) {\n  long long int fact_i = 1 , special_fact = 1 ;\n  for ( long long int i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ll special_factorial ( ll n ) {\n  ll fact_i = 1 , special_fact = 1 ;\n  for ( ll i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ll special_factorial ( ll n ) {\n  ll factI = 1 , specialFact = 1 ;\n  for ( ll i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ll special_factorial ( ll n ) {\n  ll fact_i = 1 , special_fact = 1 ;\n  for ( ll i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long fact_i = 1 , special_fact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    fact_i *= i * fact_i ;\n    special_fact += i * fact_i ;\n  }\n  return special_fact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial ( long n ) {\n  long factI = 1 , specialFact = 1 ;\n  for ( long i = n ;\n  i >= 1 ;\n  i -- ) {\n    factI *= i * factI ;\n    specialFact += i * factI ;\n  }\n  return specialFact ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1){ \n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
      "target": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        if (word.length() == 1) flag = 1; \n        for (int i = 2; i < word.length(); i += 1){\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
      "function range": "22,5-34,5",
      "raw_output": [
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word + \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toUpperCase ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . toUpperCase ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word + \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . toUpperCase ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toUpperCase ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word + \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . toUpperCase ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toUpperCase ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word + \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . toUpperCase ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toUpperCase ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toUpperCase ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toLowerCase ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \"\\\\s+\" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}\n",
        "public static String wordsInSentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) {\n      result += word + \" \" ;\n    }\n  }\n  return result . trim ( ) ;\n}\n"
      ],
      "mid_translation": [
        "public : string wordsInSentence ( string sentence ) {\n  string result ;\n  for ( string word : sentence ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . size ( ) ;\n    i += 1 ) {\n      if ( word . size ( ) % i == 0 ) {\n        flag = 1 ;\n      }\n    }\n    if ( flag == 0 || word . size ( ) == 2 ) {\n      result += word + \" \" ;\n    }\n  }\n  return result . c_str ( ) ;\n}\n",
        "public : string wordsInSentence ( string sentence ) {\n  string result ;\n  for ( string word : sentence ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) {\n        flag = 1 ;\n      }\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) {\n      result += word + \" \" ;\n    }\n  }\n  return result . c_str ( ) ;\n}\n",
        "public : string words_in_sentence ( string sentence ) {\n  string result ;\n  for ( string word : sentence ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . size ( ) ;\n    i += 1 ) {\n      if ( word . size ( ) % i == 0 ) {\n        flag = 1 ;\n      }\n    }\n    if ( flag == 0 || word . size ( ) == 2 ) {\n      result += word + \" \" ;\n    }\n  }\n  return result . c_str ( ) ;\n}\n",
        "public : string words_in_sentence ( string sentence ) {\n  string result ;\n  for ( string word : sentence ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) {\n        flag = 1 ;\n      }\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) {\n      result += word + \" \" ;\n    }\n  }\n  return result . c_str ( ) ;\n}\n",
        "public : string wordsInSentence ( string sentence ) {\n  string result = \"\" ;\n  for ( string word : sentence ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . size ( ) ;\n    i += 1 ) {\n      if ( word . size ( ) % i == 0 ) {\n        flag = 1 ;\n      }\n    }\n    if ( flag == 0 || word . size ( ) == 2 ) {\n      result += word + \" \" ;\n    }\n  }\n  return result . c_str ( ) ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word + \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toUpperCase ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . toUpperCase ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word + \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . toUpperCase ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toUpperCase ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word + \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . toUpperCase ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toUpperCase ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word + \" \" ) ;\n  }\n  return sb . toString ( ) . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) sb . append ( word ) . append ( \" \" ) ;\n  }\n  return sb . toString ( ) . toUpperCase ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toUpperCase ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toUpperCase ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . toLowerCase ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \"\\\\s+\" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) result += word + \" \" ;\n  }\n  return result . trim ( ) ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence ( String sentence ) {\n  String result = \"\" ;\n  for ( String word : sentence . split ( \" \" ) ) {\n    int flag = 0 ;\n    for ( int i = 2 ;\n    i < word . length ( ) ;\n    i += 1 ) {\n      if ( word . length ( ) % i == 0 ) flag = 1 ;\n    }\n    if ( flag == 0 || word . length ( ) == 2 ) {\n      result += word + \" \" ;\n    }\n  }\n  return result . trim ( ) ;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (char c : (num + \"\").toCharArray()) { \n        if ((int)c % 2 == 0) even_count += 1; \n        if ((int)c % 2 == 1) odd_count += 1; \n    }\n    return new int[] {even_count, odd_count};\n}",
      "target": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (char c : (Math.abs(num) + \"\").toCharArray()) { \n        int n = c - '0'; \n        if (n % 2 == 0) even_count += 1; \n        if (n % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}",
      "function range": "10,5-19,5",
      "raw_output": [
        "public static int [ ] evenOddCount ( int num ) {\n  int evenCount = 0 ;\n  int oddCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) oddCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , oddCount }\n    ;\n  }\n  ",
        "public static int [ ] even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }\n  ",
        "public static int [ ] evenOddCount ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }\n  ",
        "public static int [ ] evenOddCount ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }\n  ",
        "public static int [ ] evenodCount ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }\n  ",
        "public static int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n}\n",
        "public static int evenOddCount ( int num ) {\n  int evenCount = 0 ;\n  int oddCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) oddCount += 1 ;\n  }\n  return evenCount ;\n}\n",
        "public static int evenodCount ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return evenCount ;\n}\n",
        "public static int evenOddCount ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n}\n",
        "static int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n}\n",
        "public static int [ ] evenOddCount ( int num ) {\n  int evenCount = 0 ;\n  int oddCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) oddCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , oddCount }\n    ;\n  }\n  ",
        "public static int [ ] even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }\n  ",
        "public static int [ ] evenOddCount ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }\n  ",
        "public static int [ ] evenOddCount ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }\n  ",
        "public static int [ ] evenodCount ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }\n  ",
        "public static int [ ] even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }\n  ",
        "public static int [ ] evenOddCount ( int num ) {\n  int evenCount = 0 ;\n  int oddCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) oddCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , oddCount }\n    ;\n  }\n  ",
        "public static int [ ] evenodCount ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }\n  ",
        "public static int [ ] evenOddCount ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }\n  ",
        "public static int [ ] evenOddCount ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }\n  ",
        "public static final int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n  odd_count = 0 ;\n}\n",
        "public static int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n  odd_count = 0 ;\n}\n",
        "public static final int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n  odd_count = 0 ;\n  return odd_count ;\n}\n",
        "public static int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n  odd_count = 0 ;\n  return odd_count ;\n}\n",
        "public static final int even_odd_count ( int num ) {\n  even_count = 0 ;\n  odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n  odd_count = 0 ;\n}\n"
      ],
      "mid_translation": [
        "vector < int > even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) {\n      even_count += 1 ;\n    }\n    if ( ( int ) c % 2 == 1 ) {\n      odd_count += 1 ;\n    }\n  }\n  return {\n    even_count , odd_count }\n    ;\n  }\n  ",
        "int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) {\n      even_count += 1 ;\n    }\n    if ( ( int ) c % 2 == 1 ) {\n      odd_count += 1 ;\n    }\n  }\n  return even_count ;\n}\n",
        "vector < int > even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) {\n      even_count += 1 ;\n    }\n    if ( ( int ) c % 2 == 1 ) {\n      odd_count += 1 ;\n    }\n  }\n  return even_count , odd_count ;\n}\n",
        "public : vector < int > even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) {\n      even_count += 1 ;\n    }\n    if ( ( int ) c % 2 == 1 ) {\n      odd_count += 1 ;\n    }\n  }\n  return {\n    even_count , odd_count }\n    ;\n  }\n  ",
        "public : int even_odd_count ( int num ) {\n  even_count = 0 ;\n  odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) {\n      even_count += 1 ;\n    }\n    if ( ( int ) c % 2 == 1 ) {\n      odd_count += 1 ;\n    }\n  }\n  return even_count ;\n  odd_count = 0 ;\n}\n"
      ],
      "output": [
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int evenCount = 0 ;\n  int oddCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) oddCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , oddCount }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int even_odd_count ( int num ) {\n  int evenCount = 0 ;\n  int oddCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) oddCount += 1 ;\n  }\n  return evenCount ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int even_odd_count ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return evenCount ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int evenCount = 0 ;\n  int oddCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) oddCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , oddCount }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int evenCount = 0 ;\n  int oddCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) oddCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , oddCount }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return new int [ ] {\n    even_count , odd_count }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int [ ] even_odd_count ( int num ) {\n  int evenCount = 0 ;\n  int odCount = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) evenCount += 1 ;\n    if ( ( int ) c % 2 == 1 ) odCount += 1 ;\n  }\n  return new int [ ] {\n    evenCount , odCount }\n    ;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n  odd_count = 0 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n  odd_count = 0 ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n  odd_count = 0 ;\n  return odd_count ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int even_odd_count ( int num ) {\n  int even_count = 0 ;\n  int odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n  odd_count = 0 ;\n  return odd_count ;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int even_odd_count ( int num ) {\n  even_count = 0 ;\n  odd_count = 0 ;\n  for ( char c : ( num + \"\" ) . toCharArray ( ) ) {\n    if ( ( int ) c % 2 == 0 ) even_count += 1 ;\n    if ( ( int ) c % 2 == 1 ) odd_count += 1 ;\n  }\n  return even_count ;\n  odd_count = 0 ;\n}",
          "correctness": "uncompilable"
        }
      ]
    }
  }
}